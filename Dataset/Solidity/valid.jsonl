{"code_tokens": ["contract", "c14399{", "function", "unitEthCost(uint256", "cardId)", "external", "constant", "returns", "(uint256)", "{", "return", "cardInfo[cardId].ethCost;", "}", "}"], "docstring_tokens": ["get", "the", "production", "card's", "ether", "cost", "."], "url": "7af56cea36eba0220d0e016ae3a46df8"}
{"code_tokens": ["contract", "c18357{", "function", "setBuyRatio(uint", "ratio)", "public", "onlyOwner", "returns", "(bool", "success)", "{", "require(ratio", "!=", "0);", "buyRatio", "=", "ratio;", "return", "true;", "}", "}"], "docstring_tokens": ["Will", "set", "the", "Buy", "Ratio", "."], "url": "d14d719ccfcbc93bd7a612ff636236cd"}
{"code_tokens": ["contract", "c10674{", "modifier", "onlyUpgradeManager()", "{", "require(msg.sender", "==", "upgradeManager_);", "require(!isUpgradeFinished_);", "_;", "}", "}"], "docstring_tokens": ["Throws", "if", "called", "by", "any", "account", "other", "than", "the", "GDPOracle", "."], "url": "69a1c85b24acad77fb7cbba86331089e"}
{"code_tokens": ["contract", "c34194{", "function", "addFundraiser(address", "fundraiserAddress)", "public", "onlyFundraiser", "{", "require(fundraiserAddress", "!=", "address(0));", "assert(!isFundraiser(fundraiserAddress));", "fundraisers[fundraiserAddress]", "=", "true;", "LogNewFundraiser(fundraiserAddress,", "true);", "}", "}"], "docstring_tokens": ["Adds", "fundraiser", "."], "url": "8d3e890f37b49c4843448a6992e1e3f4"}
{"code_tokens": ["contract", "c15862{", "function", "_setCooldownEndTime(uint256", "skinAId,", "uint256", "skinBId)", "private", "{", "uint256", "end", "=", "now", "+", "20", "minutes;", "skins[skinAId].cooldownEndTime", "=", "uint64(end);", "skins[skinBId].cooldownEndTime", "=", "uint64(end);", "}", "}"], "docstring_tokens": ["_setCooldownTime", ":", "set", "new", "cooldown", "time", "."], "url": "b50cb84c20930d54464138502b6e8acb"}
{"code_tokens": ["contract", "c31771{", "function", "forwardTokens(address", "_purchaser,", "uint256", "_amount)", "internal", "{", "token.transfer(_purchaser,", "_amount);", "}", "}"], "docstring_tokens": ["Forward", "handelion", "tokens", "to", "purchaset", "."], "url": "9b6dbfd697415866368aa51ea64ea730"}
{"code_tokens": ["contract", "c10165{", "function", "buyTokensPreHook(address", "_beneficiary,", "uint256", "_toFund)", "internal", "{", "recentBlock[msg.sender]", "=", "block.number;", "super.buyTokensPreHook(_beneficiary,", "_toFund);", "}", "}"], "docstring_tokens": ["save", "the", "block", "number", "."], "url": "f67004979e87f2d6f5181586a860d442"}
{"code_tokens": ["contract", "c17090{", "function", "setHoldersList(address", "_holdersList)", "public", "onlyOwner", "{", "list", "=", "HoldersList(_holdersList);", "}", "}"], "docstring_tokens": ["Allows", "the", "owner", "to", "set", "the", "List", "of", "token", "holders", "."], "url": "ddb0c65eebe0423bb65bd035533cb0ab"}
{"code_tokens": ["contract", "c8984{", "function", "migration(address", "sender,", "address", "receiver)", "onlyOwner", "public", "returns", "(bool)", "{", "require(sender", "!=", "receiver);", "bool", "result=", "false;", "uint256", "_value", "=", "data.getOldBalanceOf(receiver);", "if", "(data.balanceOf(receiver)", "==", "0)", "{", "if", "(_value", ">", "0)", "{", "_transfer(sender,", "receiver,", "_value);", "result", "=", "true;", "}", "}", "if", "(data.getOldFrozenAccount(receiver)==", "true)", "{", "if", "(data.frozenAccount(receiver)!=", "true)", "{", "data.setFrozenAccount(receiver,", "true);", "}", "}", "return", "result;", "}", "}"], "docstring_tokens": ["data", "migration", "."], "url": "3a8535ddc0254225a92412800fc55746"}
{"code_tokens": ["contract", "c26553{", "function", "setRound(uint256", "_roundIndex)", "public", "onlyOwner", "{", "runningRound", "=", "_roundIndex;", "}", "}"], "docstring_tokens": ["Set", "the", "current", "round", "index", "."], "url": "34e02447c1679677152281f27383e8ed"}
{"code_tokens": ["contract", "c25166{", "function", "recieveVote(address", "_sender,", "bytes32", "_hash)", "public", "isActive", "isParent", "returns", "(bool)", "{", "require(voteHash[_sender]", "==", "0);", "voteHash[_sender]", "=", "_hash;", "return", "true;", "}", "}"], "docstring_tokens": ["Recieve", "Vote", "from", "Who-Token", "-", "Contract", "."], "url": "ce47d22a20c876ee7450d155ab4aaf77"}
{"code_tokens": ["contract", "c32610{", "function", "_allocatePresaleTokens(uint256", "eth)", "private", "view", "returns(uint256", "tokens)", "{", "tokens", "=", "presale_eth_to_zilla.mul(eth);", "require(", "zilla_remaining", ">=", "tokens", ");", "}", "}"], "docstring_tokens": ["Apply", "our", "fixed", "presale", "rate", "and", "verify", "we", "are", "not", "sold", "out", "."], "url": "cd88b177e5084fa3a946371acdd8dbfd"}
{"code_tokens": ["contract", "c32266{", "function", "createTokenContract()", "internal", "returns", "(MintableToken)", "{", "return", "MintableToken(address(0));", "}", "}"], "docstring_tokens": ["Overrides", "Crowdsale", "createTokenContract", "not", "to", "create", "new", "token", "."], "url": "2e59ec7815ad526246c391d53a6cc364"}
{"code_tokens": ["contract", "c2095{", "function", "_gambling(uint256", "current_fund,", "bytes32", "current_token_hash,", "uint256", "last_deal_time)", "private", "{", "uint256", "random_number", "=", "_createRandomNumber(current_token_hash,last_deal_time);", "if", "(", "random_number", "<", "10", ")", "{", "address", "contract_address", "=", "(address)(this);", "uint256", "hit_funds", "=", "contract_address.balance.sub(current_fund);", "msg.sender.transfer(hit_funds);", "emit", "HitFunds(msg.sender,", "hit_funds,", "now);", "}", "}", "}"], "docstring_tokens": ["10", "change", "of", "getting", "all", "blance", "of", "fees", "."], "url": "0e0195996722a49b7ea77c76db7634dc"}
{"code_tokens": ["contract", "c927{", "function", "payWithPLAT(uint256", "_amount)", "private", "{", "for", "(uint", "i", "=", "0;", "i", "<", "_amount;", "i", "++)", "{", "var", "_randomValue", "=", "random(10000,", "0);", "uint8", "_heroRankToMint", "=", "0;", "if", "(_randomValue", "<", "5000)", "{", "_heroRankToMint", "=", "1;", "}", "else", "if", "(_randomValue", "<", "9550)", "{", "_heroRankToMint", "=", "2;", "}", "else", "if", "(_randomValue", "<", "9950)", "{", "_heroRankToMint", "=", "3;", "}", "else", "{", "_heroRankToMint", "=", "4;", "}", "summonHero(msg.sender,", "_heroRankToMint);", "}", "}", "}"], "docstring_tokens": ["Pay", "with", "PLAT", "."], "url": "4ee62f613fdd9606fb446880380a921c"}
{"code_tokens": ["contract", "c27345{", "function", "shittyRand(uint", "seed)", "public", "returns(uint)", "{", "uint", "randomSeed", "=", "uint(block.blockhash(priceChangeBlock", "+", "seed));", "return", "randomSeed", "%", "PRICE_MAX;", "}", "}"], "docstring_tokens": ["Requires", "block", "to", "be", "256", "away", "."], "url": "c6e199ff1a58cc447e8aaa09b1d0a3a2"}
{"code_tokens": ["contract", "c419{", "function", "removeOracle()", "public", "onlyBy(owner)", "{", "oracle", "=", "address(0);", "}", "}"], "docstring_tokens": ["The", "owner", "can", "remove", "the", "oracle", "."], "url": "5d81682043ce3e0866cce480fc276292"}
{"code_tokens": ["contract", "c9850{", "function", "newParameterizerWithToken(", "uint", "_supply,", "string", "_name,", "uint8", "_decimals,", "string", "_symbol,", "uint[]", "_parameters", ")", "public", "returns", "(Parameterizer)", "{", "PLCRVoting", "plcr", "=", "plcrFactory.newPLCRWithToken(_supply,", "_name,", "_decimals,", "_symbol);", "EIP20", "token", "=", "EIP20(plcr.token());", "token.transfer(msg.sender,", "_supply);", "Parameterizer", "parameterizer", "=", "Parameterizer(proxyFactory.createProxy(canonizedParameterizer,", "\"\"));", "parameterizer.init(", "token,", "plcr,", "_parameters", ");", "emit", "NewParameterizer(msg.sender,", "token,", "plcr,", "parameterizer);", "return", "parameterizer;", "}", "}"], "docstring_tokens": ["deploys", "and", "initializes", "new", "EIP20", ",", "PLCRVoting", ",", "and", "Parameterizer", "contracts", "."], "url": "1e603f7a340e0b8719a4dc128371b708"}
{"code_tokens": ["contract", "c28922{", "function", "bid", "(uint256", "_tankID)", "public", "payable", "{", "require", "(_tankID", ">", "0", "&&", "_tankID", "<", "newTankID);", "require", "(tanks[_tankID].inAuction", "==", "true);", "uint256", "auctionID", "=", "tanks[_tankID].currAuction;", "uint256", "currPrice", "=", "getCurrAuctionPriceAuctionID(auctionID);", "require", "(currPrice", ">=", "0);", "require", "(msg.value", ">=", "currPrice);", "if(msg.value", ">", "currPrice){", "balances[msg.sender]", "+=", "(msg.value", "-", "currPrice);", "}", "uint256", "fee", "=", "(currPrice*feeAmt)", "/", "100;", "uint256", "tournamentTax", "=", "(fee*tournamentTaxRate)", "/", "100;", "tournamentAmt", "+=", "tournamentTax;", "balances[tanks[_tankID].tankOwner]", "+=", "currPrice", "-", "fee;", "balances[owner]", "+=", "(fee", "-", "tournamentTax);", "address", "formerOwner", "=", "tanks[_tankID].tankOwner;", "tanks[_tankID].tankOwner", "=", "msg.sender;", "tanks[_tankID].inAuction", "=", "false;", "auctions[tanks[_tankID].currAuction].alive", "=", "false;", "tanks[_tankID].currAuction", "=", "0;", "userTanks[msg.sender].push(_tankID);", "delTankFromUser(formerOwner,", "_tankID);", "EventBid", "(_tankID,", "msg.sender);", "}", "}"], "docstring_tokens": ["buy", "tank", "from", "auction", "."], "url": "dde3e869bcdbc2de53f24b1efd96effb"}
{"code_tokens": ["contract", "c33165{", "modifier", "tokenReleased(address", "_sender)", "{", "require(released);", "_;", "}", "}"], "docstring_tokens": ["Limit", "token", "transfer", "until", "the", "TGE", "is", "over", "."], "url": "b32057cd95cdaf4fa39cd13a80552a52"}
{"code_tokens": ["contract", "c5197{", "function", "inquireDividentAmount()", "view", "external", "returns(uint){", "uint", "dividendToSend=calcuCurrTxDividend(msg.sender);", "return", "dividendToSend;", "}", "}"], "docstring_tokens": ["request", "to", "know", "how", "much", "dividend", "you", "can", "get", "."], "url": "c2378f7763c85463e584aaa5b0ff069a"}
{"code_tokens": ["contract", "c24530{", "function", "isIcoStage()", "public", "view", "returns", "(bool)", "{", "return", "icoInstalled", "&&", "now", ">", "icoStartTime", "&&", "now", "<", "icoFinishTime;", "}", "}"], "docstring_tokens": ["check", "Ico", "Stage", "."], "url": "ce58ef4a3c32393ed6a58572fc4ec121"}
{"code_tokens": ["contract", "c9695{", "function", "refundEth(address", "_from)", "external", "onlyOwner", "{", "uint", "toSend", "=", "ethTellerBalance[_from];", "if", "(toSend", ">", "0)", "{", "ethTellerBalance[_from]", "=", "0;", "_from.transfer(toSend);", "}", "}", "}"], "docstring_tokens": ["refund", "all", "ETH", "from", "teller", "contract", "."], "url": "d5f419d04a79f4a00a883728900bcdca"}
{"code_tokens": ["contract", "c21292{", "modifier", "tokenHoldersOnly(){", "require(balances[msg.sender]", ">", "0);", "_;", "}", "}"], "docstring_tokens": ["Works", "on", "users's", "command", "."], "url": "d8b5bad22200a1c56988107da92ff8b4"}
{"code_tokens": ["contract", "c40077{", "function", "getEnforceRevisions(bytes20", "blobId)", "external", "constant", "exists(blobId)", "returns", "(bool", "enforceRevisions)", "{", "enforceRevisions", "=", "blobInfo[blobId].flags", "&", "ENFORCE_REVISIONS", "!=", "0;", "}", "}"], "docstring_tokens": ["Determine", "if", "a", "blob", "enforces", "revisions", "."], "url": "231d58331e9fb38bfa641b4c2b9f1fa6"}
{"code_tokens": ["contract", "c11005{", "function", "upgradeTo(Upgradeable", "newContract)", "public", "ownerOnly{", "require(allowedToUpgrade", "&&", "!isOldVersion);", "nextContract", "=", "newContract;", "isOldVersion", "=", "true;", "newContract.confirmUpgrade();", "}", "}"], "docstring_tokens": ["signals", "that", "new", "upgrade", "is", "available", ",", "contract", "must", "be", "most", "recent", "upgrade", "and", "allowed", "to", "upgrade", "."], "url": "10952b67516245e35a389f25879ccca7"}
{"code_tokens": ["contract", "c13478{", "function", "addContract(string", "_contractName,", "address", "_address)", "external", "onlyContractOwner(\"ContractManager\",", "msg.sender)", "{", "bytes", "memory", "contractNameBytes", "=", "bytes(_contractName);", "require(contractNameBytes.length", "!=", "0);", "require(contracts[_contractName]", "==", "address(0));", "require(_address", "!=", "address(0));", "contracts[_contractName]", "=", "_address;", "emit", "ContractAdded(_address,", "_contractName);", "}", "}"], "docstring_tokens": ["Add", "a", "new", "contract", "to", "the", "manager", "."], "url": "d4052ecf04a11298705ad81a5fb53bce"}
{"code_tokens": ["contract", "c15380{", "function", "totalSupply()", "external", "view", "returns", "(uint256)", "{", "return", "fashionArray.length", "-", "destroyFashionCount", "-", "1;", "}", "}"], "docstring_tokens": ["Count", "WARs", "tracked", "by", "this", "contract", "."], "url": "606bfe3a513a47fc6b8f3a4a030d5f64"}
{"code_tokens": ["contract", "c19950{", "function", "buyGanToken(uint256", "id)", "public", "payable", "{", "Offer", "memory", "offer", "=", "ganTokenOfferedForSale[id];", "require(offer.isForSale);", "require(offer.onlySellTo", "==", "msg.sender", "&&", "offer.onlySellTo", "!=", "0x0);", "require(msg.value", "==", "offer.value);", "require(tokenIdToOwner[id]", "==", "offer.seller);", "safeTransferFrom(offer.seller,", "offer.onlySellTo,", "id);", "ganTokenOfferedForSale[id]", "=", "Offer(false,", "id,", "offer.seller,", "0,", "0x0);", "pendingWithdrawals[offer.seller]", "+=", "msg.value;", "}", "}"], "docstring_tokens": ["Allows", "an", "account", "to", "buy", "a", "NFT", "gan", "token", "that", "is", "up", "for", "offer", "the", "token", "owner", "must", "set", "onlySellTo", "to", "the", "sender", "."], "url": "15d833d47aad29bf13a45a12a67f606d"}
{"code_tokens": ["contract", "c25255{", "modifier", "onlyMigrationGate()", "{", "require(msg.sender", "==", "migrationGate);", "_;", "}", "}"], "docstring_tokens": ["!", "Throws", "if", "called", "by", "any", "account", "other", "than", "the", "migrationGate", "."], "url": "36fa217cfdfb17c3434745ef757da07f"}
{"code_tokens": ["contract", "c2285{", "function", "blacklistParty(address", "_address,", "bool", "_motion)", "public", "onlyOwner()", "{", "blacklist[_address]", "=", "_motion;", "}", "}"], "docstring_tokens": ["This", "allows", "the", "owner", "to", "stop", "a", "malicious", "party", "from", "spamming", "the", "orderbook", "."], "url": "f0e0ff446fc25e66b3a37123a20d41df"}
{"code_tokens": ["contract", "c17392{", "function", "usdRaised()", "public", "constant", "returns", "(uint)", "{", "return", "ethToUsd(etherRaised);", "}", "}"], "docstring_tokens": ["Returns", "the", "USD", "value", "of", "ether", "raised", "at", "the", "set", "USD", "/", "ETH", "rate", "."], "url": "c43a7f05a3daa3ecf9ce08bdc5df6f6c"}
{"code_tokens": ["contract", "c40073{", "function", "kill()", "onlyOwner", "{", "throw;", "}", "}"], "docstring_tokens": ["By", "security", "issues", "token", "that", "holds", "ethers", "can", "not", "be", "killed", "."], "url": "fdfc01100dc68b3845f8b566a7f82805"}
{"code_tokens": ["contract", "c10442{", "function", "lastTimeOf(address", "_owner)", "public", "view", "returns", "(uint256", "interval,", "uint256", "time)", "{", "return", "(accounts[_owner].lastInterval,", "((accounts[_owner].lastInterval).mul(tokenGenInterval)).add(startTime));", "}", "}"], "docstring_tokens": ["This", "functions", "returns", "the", "last", "time", "at", "which", "rewards", "were", "transferred", "to", "a", "particular", "address", "."], "url": "d1a39219e648bfc676dae8eb4ca03e19"}
{"code_tokens": ["contract", "c11063{", "function", "goalReached()", "public", "view", "returns", "(bool)", "{", "return", "weiRaised", ">=", "goal;", "}", "}"], "docstring_tokens": ["Checks", "whether", "the", "goal", "has", "been", "reached", "."], "url": "1b3d0262c59a3224a822f2cdf5d80c05"}
{"code_tokens": ["contract", "c8854{", "function", "getRandomNumber(uint", "maxNumber)", "private", "returns(uint)", "{", "require(maxNumber>0);", "randNonce", "+=", "1;", "return", "uint(keccak256(now,", "randNonce,", "block.blockhash(block.number", "-", "1),", "block.coinbase))", "%", "maxNumber;", "}", "}"], "docstring_tokens": ["2", ".", "5", "lottery", "get", "random", "number", "in", "0", ",", "maxNumber", ")", "."], "url": "450a710c4ffca1fd3af67ff5b5b45fa5"}
{"code_tokens": ["contract", "c11426{", "function", "hardCap()", "public", "view", "returns", "(uint256)", "{", "return", "hardCap_;", "}", "}"], "docstring_tokens": ["allowed", "total", "number", "of", "tokens", "."], "url": "29647f764190e51fc586063c1515196e"}
{"code_tokens": ["contract", "c21937{", "function", "assignReserveSupply(address", "_reserveContractAddress)", "external", "onlyOwner", "nonZeroAddress(_reserveContractAddress){", "require(!isReserveSupplyAssigned);", "isReserveSupplyAssigned", "=", "true;", "require(transfer(_reserveContractAddress,", "reserveFundSupply));", "}", "}"], "docstring_tokens": ["assign", "reserve", "supply", "to", "a", "contract", "address", "."], "url": "28d82eaa6dd0908fe296ad2bf9e21019"}
{"code_tokens": ["contract", "c11475{", "function", "balanceOf(address", "add)", "constant", "returns", "(uint", "balance){", "return", "balances[add];", "}", "}"], "docstring_tokens": ["Provides", "balance", "of", "the", "account", "requested", "."], "url": "321170f4678b3c35dd6408a1b00c995a"}
{"code_tokens": ["contract", "c39216{", "function", "max64(uint64", "x,", "uint64", "y)", "internal", "constant", "returns", "(uint64)", "{", "return", "x", ">=", "y", "?", "x", ":", "y;", "}", "}"], "docstring_tokens": ["return", "the", "largest", "of", "two", "64", "bit", "integers", "."], "url": "14b85e2ae486b660698f735162398a02"}
{"code_tokens": ["contract", "c764{", "function", "transferFrom(", "address", "_from,", "address", "_to,", "uint256", "_value", ")", "public", "whenNotPaused", "returns", "(bool)", "{", "return", "super.transferFrom(_from,", "_to,", "_value);", "}", "}"], "docstring_tokens": ["transferFrom", "function", ",", "revert", "if", "the", "contract", "is", "paused", "."], "url": "25cd7749b014fdb0843089cec16066b9"}
{"code_tokens": ["contract", "c32423{", "function", "cancelOrder(uint128", "orderId)", "public", "{", "address", "client", "=", "msg.sender;", "Order", "storage", "order", "=", "orderForOrderId[orderId];", "require(order.client", "==", "client);", "Status", "status", "=", "order.status;", "if", "(status", "!=", "Status.Open", "&&", "status", "!=", "Status.NeedsGas)", "{", "return;", "}", "ClientOrderEvent(client,", "ClientOrderEventType.Cancel,", "orderId,", "0);", "if", "(status", "==", "Status.Open)", "{", "removeOpenOrderFromBook(orderId);", "MarketOrderEvent(block.timestamp,", "orderId,", "MarketOrderEventType.Remove,", "order.price,", "order.sizeBase", "-", "order.executedBase,", "0);", "}", "refundUnmatchedAndFinish(orderId,", "Status.Done,", "ReasonCode.ClientCancel);", "}", "}"], "docstring_tokens": ["Public", "Order", "Placement", "-", "cancel", "order", "."], "url": "fdd8841a7d31cea8b20f6ecd98e67fb2"}
{"code_tokens": ["contract", "c22031{", "function", "setCompositionPrice(uint256", "_tokenId,", "uint256", "_price)", "public", "onlyOwnerOf(_tokenId)", "{", "_setCompositionPrice(_tokenId,", "_price);", "}", "}"], "docstring_tokens": ["sets", "the", "composition", "price", "for", "a", "token", "ID", "."], "url": "9ede8143dbc218a2755d219ea50e4ad1"}
{"code_tokens": ["contract", "c30569{", "function", "offerCatForSale(uint", "catIndex,", "uint", "minSalePriceInWei)", "{", "require", "(catIndexToAddress[catIndex]", "==", "msg.sender);", "require", "(catIndex", "<", "_totalSupply);", "catsForSale[catIndex]", "=", "Offer(true,", "catIndex,", "msg.sender,", "minSalePriceInWei,", "0x0);", "CatOffered(catIndex,", "minSalePriceInWei,", "0x0);", "}", "}"], "docstring_tokens": ["Create", "sell", "offer", "for", "cat", "with", "a", "certain", "minimum", "sale", "price", "in", "wei", "(", "by", "cat", "owner", "only", ")", "."], "url": "168db304ea38da0aea42e8adcc593970"}
{"code_tokens": ["contract", "c16197{", "function", "_invest(address", "_receiver,", "uint256", "_value)", "internal", "{", "uint256", "tokensCnt", "=", "getTokens(_receiver,", "_value);", "require(tokensCnt", ">", "0);", "require(tokensPurchased.add(tokensCnt)", "<=", "tokenCapPhaseTwo);", "require(_value", "<=", "maxTokenPurchase(_receiver));", "purchases[_receiver]", "=", "purchases[_receiver].add(_value);", "totalReceived", "=", "totalReceived.add(_value);", "totalAccounted", "=", "totalAccounted.add(_value);", "tokensPurchased", "=", "tokensPurchased.add(tokensCnt);", "Invested(_receiver,", "_value,", "tokensCnt);", "wallet.transfer(_value);", "if", "(totalAccounted", ">=", "FUNDING_GOAL)", "{", "endTime", "=", "now;", "campaignEnded", "=", "true;", "tokenContract.setTokenStart(endTime);", "Ended(true);", "}", "}", "}"], "docstring_tokens": ["internal", "invest", "functionality", "."], "url": "3e5ed7069ddde0860c8852cb8511f98a"}
{"code_tokens": ["contract", "c31602{", "function", "burn(uint256", "_value)", "public", "onlyOwner", "returns", "(bool", "success)", "{", "require(!_frozenAccount[_owner]);", "require(_balanceOf[_owner]", ">=", "_value);", "_balanceOf[_owner]", "-=", "_value;", "_totalSupply", "-=", "_value;", "Burn(_owner,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["Destroy", "tokens", "from", "owener", "account", ",", "can", "be", "run", "only", "by", "owner", "."], "url": "faaa16416835ce4855b96cc348636dab"}
{"code_tokens": ["contract", "c15370{", "function", "setWhiteListAdmin(address", "_address)", "onlyOwner", "public{", "whiteListingAdmin=_address;", "}", "}"], "docstring_tokens": ["in", "case", "the", "whitelisting", "admin", "need", "to", "be", "changed", "."], "url": "30993c041dfbc0a957d29f8964cffa3e"}
{"code_tokens": ["contract", "c508{", "function", "getVersionSelectors(bytes32", "_app,", "bytes32", "_version,", "bytes32", "_registry_id)", "internal", "view", "returns", "(bytes4[]", "memory", "sels)", "{", "uint", "length", "=", "uint(registryRead(versionSelectors(_app,", "_version),", "_registry_id));", "sels", "=", "new", "bytes4[](length);", "for", "(uint", "i", "=", "0;", "i", "<", "length;", "i++)", "{", "bytes32", "location", "=", "bytes32(32", "*", "(i", "+", "1)", "+", "uint(versionSelectors(_app,", "_version)));", "sels[i]", "=", "bytes4(registryRead(location,", "_registry_id));", "}", "}", "}"], "docstring_tokens": ["sels", ":", "A", "bytes4", "array", "containing", "all", "of", "this", "version's", "function", "selectors", "."], "url": "b4a65375709cbb50e09e2bed9ca25e5f"}
{"code_tokens": ["contract", "c29740{", "function", "distributeARTTokenBatch(uint", "batchUserCount)", "public", "{", "if", "(beneficiary", "==", "msg.sender)", "{", "address", "currentParticipantAddress;", "uint", "transferedUserCount", "=", "0;", "for", "(uint", "index", "=", "0;", "index", "<", "contributorCount", "&&", "transferedUserCount<batchUserCount;", "index++){", "currentParticipantAddress", "=", "contributorIndexes[index];", "uint", "amountArtToken", "=", "contributorList[currentParticipantAddress].tokensAmount;", "if", "(false", "==", "contributorList[currentParticipantAddress].isTokenDistributed){", "bool", "isSuccess", "=", "tokenReward.transfer(currentParticipantAddress,", "amountArtToken);", "transferedUserCount", "=", "transferedUserCount", "+", "1;", "if", "(isSuccess){", "contributorList[currentParticipantAddress].isTokenDistributed", "=", "true;", "}", "}", "}", "checkIfAllARTDistributed();", "tokenBalance", "=", "tokenReward.balanceOf(address(this));", "}", "}", "}"], "docstring_tokens": ["Distribute", "token", "by", "batch", "."], "url": "f82704365bd8a6bdb9f0fe4bb451021e"}
{"code_tokens": ["contract", "c31309{", "function", "escapeFunds(address", "_token,", "uint", "_amount)", "public", "onlyOwner", "{", "if", "(_token", "==", "0x0)", "{", "require(this.balance", ">=", "_amount);", "escapeHatchDestination.transfer(_amount);", "EscapeHatchCalled(_token,", "_amount);", "return;", "}", "ERC20", "token", "=", "ERC20(_token);", "uint", "balance", "=", "token.balanceOf(this);", "require(balance", ">=", "_amount);", "require(token.transfer(escapeHatchDestination,", "_amount));", "EscapeFundsCalled(_token,", "_amount);", "}", "}"], "docstring_tokens": ["Transfer", "eth", "or", "tokens", "to", "the", "escapeHatchDestination", "."], "url": "24a6574e82357d251b825b30c4ec1701"}
{"code_tokens": ["contract", "c28383{", "function", "getPeriod(uint256", "timestamp)", "public", "view", "returns", "(uint256)", "{", "for(uint256", "i", "=", "1", ";", "i", "<=", "18", ";", "i", "++)", "{", "uint256", "startTime", "=", "startingAt", "+", "(vestingPeriodLength", "*", "(i", "-", "1));", "uint256", "endTime", "=", "startingAt", "+", "(vestingPeriodLength", "*", "(i));", "if(startTime", "<=", "timestamp", "&&", "timestamp", "<", "endTime)", "{", "return", "i;", "}", "}", "uint256", "lastEndTime", "=", "startingAt", "+", "(vestingPeriodLength", "*", "(18));", "if(lastEndTime", "<=", "timestamp)", "{", "return", "18;", "}", "return", "0;", "}", "}"], "docstring_tokens": ["Internal", "method", "called", "to", "current", "vesting", "period", "."], "url": "d198ed5a345ba8e0ce5396132658b3e8"}
{"code_tokens": ["contract", "c12255{", "function", "getUnclaimedEtherIfAny(uint", "_gameID)", "adminOnly", "external", "{", "require(now", ">=", "games[_gameID].claimingPhaseEnd);", "require(games[_gameID].balance", ">", "0);", "msg.sender.transfer(games[_gameID].balance);", "games[_gameID].balance", "=", "0;", "}", "}"], "docstring_tokens": ["admin", "can", "claim", "unclaimed", "fund", "after", "the", "claiming", "phase", ",", "if", "any", "."], "url": "9f31a6a69e0bb129acd37129ac9bec52"}
{"code_tokens": ["contract", "c797{", "modifier", "onlyBanker()", "{", "require", "(msg.sender", "==", "bankManager);", "_;", "}", "}"], "docstring_tokens": ["Operation", "modifiers", "for", "limiting", "access", "to", "only", "Banker", "."], "url": "d699acd11aa09a1251676572c08d83c0"}
{"code_tokens": ["contract", "c1757{", "function", "changeAllocation(address", "what,", "int", "amount)", "isOwnerOrWhitelistedGame", "public", "{", "if", "(amount", "<", "0)", "{", "require(int(tokenBankrollAllocation[what])", "+", "amount", ">=", "0);", "}", "tokenBankrollAllocation[what]", "=", "uint(int(tokenBankrollAllocation[what])", "+", "amount);", "}", "}"], "docstring_tokens": ["Change", "allocation", "of", "the", "specified", "token", "bankroll", "by", "an", "amount", "."], "url": "5dd01984576a3f32fee823b52d9bd7a9"}
{"code_tokens": ["contract", "c37353{", "function", "validInvestment()", "internal", "constant", "returns", "(bool)", "{", "bool", "withinPeriod", "=", "saleStarted", "&&", "!saleEnded;", "bool", "nonZeroPurchase", "=", "(msg.value", ">", "0);", "return", "withinPeriod", "&&", "nonZeroPurchase;", "}", "}"], "docstring_tokens": ["true", "if", "the", "transaction", "can", "invest", "."], "url": "4b1fe86774403921f7d3bf4da37238e4"}
{"code_tokens": ["contract", "c29946{", "function", "moveAllTokens(address", "_to,", "bytes16", "_uuid)", "onlyAllowedAddresses", "whenNotPaused", "external", "{", "rntTokenVault.moveAllTokensToAddress(_uuid,", "_to);", "}", "}"], "docstring_tokens": ["Function", "for", "transfering", "all", "tokens", "from", "account", "to", "specified", "address", "."], "url": "0a9042056d2f36c49342fdf048fc61d5"}
{"code_tokens": ["contract", "c31878{", "function", "deactivate()", "public", "onlyManager", "isActive", "{", "active", "=", "false;", "DeactivatedContract(now);", "}", "}"], "docstring_tokens": ["Deactiate", "the", "contract", "."], "url": "63bb8082012c3347efab76cbc2652f45"}
{"code_tokens": ["contract", "c1910{", "function", "updateWhitelist(address", "_account,", "uint8", "_phase)", "external", "onlyOps", "returns", "(bool)", "{", "require(_account", "!=", "address(0));", "require(_phase", "<=", "2);", "whitelist[_account]", "=", "_phase;", "emit", "WhitelistUpdated(_account,", "_phase);", "return", "true;", "}", "}"], "docstring_tokens": ["Allows", "ops", "to", "add", "accounts", "to", "the", "whitelist", "."], "url": "a6cbc2b5f83b884111cea247a2a97e8f"}
{"code_tokens": ["contract", "c35482{", "function", "startCrowdsale()", "onlyOwner", "{", "crowdSaleStart", "=", "true;", "deadline", "=", "now", "+", "60", "days;", "}", "}"], "docstring_tokens": ["Start", "this", "October", "27", "and", "crowdsale", "will", "run", "for", "60", "days", "."], "url": "aba77fa02fed8e80d7ae0c915acf30ec"}
{"code_tokens": ["contract", "c26856{", "function", "transferFrom(address", "_from,", "address", "_to,", "uint256", "_GiftId)", "validGift(_GiftId)", "external", "{", "require(_from", "==", "ownerOf(_GiftId));", "require(allowance(_from,", "msg.sender)", "==", "_GiftId);", "require(_from", "!=", "_to);", "require(_to", "!=", "address(0));", "require(_to", "!=", "address(this));", "_transfer(_from,", "_to,", "_GiftId);", "}", "}"], "docstring_tokens": ["transfer", "Giftid", "was", "approved", "by", "_from", "to", "_to", "."], "url": "5e56fa706e4c13937f66d25aa88e432a"}
{"code_tokens": ["contract", "c38{", "function", "revokeConfirmation(uint", "transactionId)", "public", "ownerExists(msg.sender)", "confirmed(transactionId,", "msg.sender)", "notExecuted(transactionId)", "{", "confirmations[transactionId][msg.sender]", "=", "false;", "Revocation(msg.sender,", "transactionId);", "}", "}"], "docstring_tokens": ["Allows", "an", "owner", "to", "revoke", "a", "confirmation", "for", "a", "transaction", "."], "url": "6b65ef80323f22e570cd9911ff775de7"}
{"code_tokens": ["contract", "c15879{", "function", "safeMul(uint", "a,", "uint", "b)", "internal", "pure", "returns", "(uint)", "{", "uint", "c", "=", "a", "*", "b;", "require(a", "==", "0", "||", "c", "/", "a", "==", "b);", "return", "c;", "}", "}"], "docstring_tokens": ["Math", "functions", "."], "url": "797b3723ac4d358e88f6ea8f6b67b446"}
{"code_tokens": ["contract", "c30584{", "function", "lockTill(address", "addr,", "uint256", "unlockTime)", "public", "onlyOwner", "{", "lockUntil[addr]", "=", "unlockTime;", "}", "}"], "docstring_tokens": ["lock", "address", "from", "transfering", "until", ".", "."], "url": "973b2d69d3167490ac5804747695b4d6"}
{"code_tokens": ["contract", "c11432{", "function", "finalize()", "onlyOwner", "public", "{", "require(state", "==", "State.Running);", "require(ended());", "if(weiRaised", ">=", "goal)", "{", "token.finishMinting();", "token.enableTokenTransfers();", "vault.close();", "state", "=", "State.Success;", "FinalizedOK();", "}", "else", "{", "finalizeNOK();", "}", "}", "}"], "docstring_tokens": ["finalize", "an", "ICO", "in", "dependency", "on", "the", "goal", "reaching", ":", "1", ")", "reached", "goal", "(", "successful", "ICO", ")", ":", "-", "release", "sold", "token", "for", "the", "transfers", "-", "close", "the", "vault", "-", "close", "the", "ICO", "successfully", "2", ")", "not", "reached", "goal", "(", "not", "successful", "ICO", ")", ":", "-", "call", "finalizeNOK", "(", ")", "."], "url": "dfc7551935e6183ccec41ff67c37f1c7"}
{"code_tokens": ["contract", "c28745{", "function", "supplyBurn(uint256", "_value)", "external", "onlyRole(ROLE_BURN)", "returns", "(bool)", "{", "require(_value", ">", "0);", "balances[supplier]", "=", "balances[supplier].sub(_value);", "totalSupply", "=", "totalSupply.sub(_value);", "Burn(supplier,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["used", "by", "burner", "contract", "to", "burn", "athenes", "tokens", "."], "url": "941e07cbf8383eb0b7783f7220a36fc1"}
{"code_tokens": ["contract", "c21426{", "function", "sendETHfromContract()", "public", "onlyOwner", "{", "forTeamETH.transfer(this.balance);", "}", "}"], "docstring_tokens": ["Function", "to", "send", "ETH", "from", "contract", "address", "to", "team", "ETH", "address", "."], "url": "fa539be152ae1d9bd3bc9098897cb6ca"}
{"code_tokens": ["contract", "c17315{", "function", "addBlacklistItem(address", "_blackAddr)", "public", "onlyServiceAgent", "{", "blacklist[_blackAddr]", "=", "true;", "BlacklistAdd(_blackAddr);", "}", "}"], "docstring_tokens": ["Add", "address", "to", "the", "black", "list", "."], "url": "c41e242254b7f0d9f68ca3cd55c91e39"}
{"code_tokens": ["contract", "c39077{", "function", "withdrawRemainingBalanceForManualRecovery()", "onlyOwner{", "if", "(this.balance", "==", "0)", "throw;", "if", "(block.number", "<", "endBlock", "||", "totalEthRaised", ">=", "minEthToRaise)", "throw;", "if", "(participantIndex[lastEthReturnIndex]", "!=", "0x0)", "throw;", "if(multisigAddress.send(this.balance)){}", "}", "}"], "docstring_tokens": ["Withdraw", "remaining", "balance", "to", "manually", "return", "where", "contracts", "send", "has", "failed", "."], "url": "4ab6f490438c4fa2c033c231fdd31e0c"}
{"code_tokens": ["contract", "c17217{", "function", "del(address", "_wallet)", "external", "onlyOwner", "{", "selfdestruct(_wallet);", "}", "}"], "docstring_tokens": ["Destruction", "of", "the", "contract", "with", "return", "of", "funds", "to", "the", "specified", "address", "."], "url": "e1c13040cbd5eb2e19003f7fd783d96a"}
{"code_tokens": ["contract", "c11655{", "function", "bid(uint256", "_tokenId)", "public", "payable", "{", "address", "seller", "=", "tokenIdToAuction[_tokenId].seller;", "uint256", "price", "=", "_bid(_tokenId,", "msg.value);", "_transfer(msg.sender,", "_tokenId);", "if", "(seller", "==", "address(nonFungibleContract))", "{", "lastGen0SalePrices[gen0SaleCount", "%", "4]", "=", "price;", "gen0SaleCount++;", "}", "}", "}"], "docstring_tokens": ["Updates", "lastSalePrice", "if", "seller", "is", "the", "nft", "contract", "."], "url": "0188839848282b8628a6646083de399b"}
{"code_tokens": ["contract", "c23316{", "function", "getPurchasePrice(", "uint256", "_currentPrice,", "uint256", "_priceIncrease", ")", "internal", "pure", "returns", "(uint256", "currentPrice)", "{", "currentPrice", "=", "SafeMath.div(", "SafeMath.mul(_currentPrice,", "_priceIncrease),", "100", ");", "}", "}"], "docstring_tokens": ["Calculates", "the", "current", "token", "owner's", "payout", "amount", "if", "the", "token", "sells", "."], "url": "f9fef84db4bec3eeee917b18ade55609"}
{"code_tokens": ["contract", "c35205{", "function", "withdrawEverything()", "onlyOwner", "{", "(msg.sender).transfer(this.balance);", "}", "}"], "docstring_tokens": ["Withdraw", "Ether", "from", "contract", "."], "url": "4ffa8b149886aa43ba658d6218acaaeb"}
{"code_tokens": ["contract", "c34310{", "function", "getPendingReward(ERC20", "_token,", "address", "_holder)", "public", "constant", "returns(uint)", "{", "uint", "acc", "=0;", "for", "(uint", "i=nextDepositToPayout[msg.sender];", "i<deposits.length;", "i++)", "{", "Deposit", "storage", "d", "=", "deposits[i];", "if", "((d.token", "==", "_token)&&(!d.canceled)", "&&", "(!isDepositSkiped(_holder,", "i)))", "{", "acc", "+=", "d.amount", "*", "rewardToken.balanceOfAt(_holder,", "d.block)", "/", "rewardToken.totalSupplyAt(d.block);", "}", "}", "return", "acc;", "}", "}"], "docstring_tokens": ["Calculates", "the", "amount", "of", "a", "given", "token", "(", "or", "ether", ")", "the", "holder", "can", "receive", "."], "url": "b328b7ea43cfacfa69e11ffb0a328a53"}
{"code_tokens": ["contract", "c5774{", "function", "setPositionPrice(uint256", "newPositionPrice)", "public", "onlyOwner", "{", "require(newPositionPrice", ">", "0);", "positionPrice", "=", "newPositionPrice;", "}", "}"], "docstring_tokens": ["Allows", "Investment", "Position", "price", "changes", "."], "url": "e08b391c2d6ed7af731876db861878be"}
{"code_tokens": ["contract", "c16677{", "function", "getBalance()", "public", "constant", "returns", "(uint", "howManyTokensCurrentlyInVault)", "{", "return", "token.balanceOf(address(this));", "}", "}"], "docstring_tokens": ["Get", "the", "current", "balance", "of", "tokens", "in", "the", "vault", "."], "url": "7a894ea9fa8321d3e3d6325ec6b2ce27"}
{"code_tokens": ["contract", "c21667{", "function", "setMultisigVault(address", "_multisigVault)", "public", "onlyOwner", "{", "if", "(_multisigVault", "!=", "address(0))", "{", "multisigVault", "=", "_multisigVault;", "}", "}", "}"], "docstring_tokens": ["Allows", "the", "owner", "to", "set", "the", "multisig", "contract", "."], "url": "d3b5d025881bf4248da9bfc69f1c04ed"}
{"code_tokens": ["contract", "c32332{", "function", "isContract(address", "addr)", "public", "constant", "returns", "(bool", "_isContract)", "{", "require(addr", "!=", "address(0));", "uint256", "length;", "assembly", "{", "length", ":=", "extcodesize(addr)", "}", "return", "(length", ">", "0);", "}", "}"], "docstring_tokens": ["To", "check", "if", "an", "address", "is", "a", "contract", "or", "not", "."], "url": "ff48208146f8c14a3ab425f6fbaaa82e"}
{"code_tokens": ["contract", "c17090{", "function", "setTotal(uint", "_amount)", "public", "onlyOwner", "{", "_totalTokens", "=", "_amount;", "}", "}"], "docstring_tokens": ["Defines", "number", "of", "issued", "tokens", "."], "url": "bc6007808e496f8f25a901bce42ef2ae"}
{"code_tokens": ["contract", "c27630{", "function", "mintDevelopmentTeamTokens(address", "_to,", "uint256", "_tokens)", "public", "onlyOwner", "onlyNoneZero(_to,", "_tokens)", "{", "require(developmentTeamTokensMinted.add(_tokens)", "<=", "DEVELOPMENT_TEAM_CAP);", "developmentTeamTokensMinted", "=", "developmentTeamTokensMinted.add(_tokens);", "TokenVesting", "newVault", "=", "new", "TokenVesting(_to,", "now,", "VESTING_CLIFF,", "VESTING_DURATION,", "false);", "vestingWallets.push(address(newVault));", "token.mint(address(newVault),", "_tokens);", "}", "}"], "docstring_tokens": ["allows", "contract", "owner", "to", "mint", "team", "tokens", "per", "DEVELOPMENT_TEAM_CAP", "and", "transfer", "to", "the", "development", "team's", "wallet", "(", "yes", "vesting", ")", "."], "url": "7bdb78c77ec025b6b9d6f3bb267f1773"}
{"code_tokens": ["contract", "c22631{", "function", "withdrawal(address", "_wallet)", "external", "onlyOwner", "whenSaleHasEnded", "{", "require(_wallet", "!=", "address(0));", "_wallet.transfer(this.balance);", "token.transferOwnership(msg.sender);", "}", "}"], "docstring_tokens": ["Function", "for", "funds", "withdrawal", "."], "url": "8ba5ae2df623563db60e9a1450209c41"}
{"code_tokens": ["contract", "c20788{", "function", "finishCrowdsale()", "public", "onlyOwner", "{", "manualState", "=", "ManualState.READY;", "}", "}"], "docstring_tokens": ["this", "method", "allows", "to", "finish", "crowdsale", "prematurely", "."], "url": "4ef2126a38d0b2ab993434f8ee2e704e"}
{"code_tokens": ["contract", "c5438{", "function", "error(string", "_errorMessage)", "internal", "returns(bool)", "{", "LogErrorString(_errorMessage);", "return", "false;", "}", "}"], "docstring_tokens": ["Default", "error", "to", "simply", "log", "the", "error", "message", "and", "return", "."], "url": "bf9198ca0bc0bb304b91c0887ea172d8"}
{"code_tokens": ["contract", "c17566{", "function", "updatePriceManualy(uint256", "_ETHUSD)", "onlyOwner", "external", "{", "ETHUSD", "=", "_ETHUSD;", "}", "}"], "docstring_tokens": ["Setting", "a", "new", "ETH", "/", "USD", "quote", "price", "by", "owner", "."], "url": "cb10de7c78d533cc44fa68072ffa4d9f"}
{"code_tokens": ["contract", "c702{", "function", "disableAdminForever()", "internal", "{", "currAdminEpoch++;", "adminsDisabledForever", "=", "true;", "emit", "AdminDisabledForever();", "}", "}"], "docstring_tokens": ["this", "is", "internal", "so", "contracts", "can", "all", "it", ",", "but", "not", "exposed", "anywhere", "in", "this", "contract", "."], "url": "a559b7f2c3b73c0bd0dcd2cc61e4e593"}
{"code_tokens": ["contract", "c8710{", "function", "pause()", "public", "onlyOwner", "{", "updateStatus();", "require(status", "!=", "StatusList.Closed);", "status", "=", "StatusList.Paused;", "}", "}"], "docstring_tokens": ["Public", "function", "to", "be", "call", "by", "owner", "that", "changes", "ICO", "status", "to", "Pause", "."], "url": "16381cc94dcf4d2f7cec158c5cbae770"}
{"code_tokens": ["contract", "c9199{", "function", "activePresale(uint256", "_presaleDate)", "onlyOwner", "public", "{", "require(isPresaleActive", "==", "false);", "require(isPrivatesaleActive", "==", "false);", "startPresaleDate", "=", "_presaleDate;", "endPresaleDate", "=", "startPresaleDate", "+", "2", "days;", "isPresaleActive", "=", "!isPresaleActive;", "}", "}"], "docstring_tokens": ["Allow", "founder", "to", "start", "the", "Presale", "."], "url": "29979f4d62b33dbbd13881fae8bd66b5"}
{"code_tokens": ["contract", "c34977{", "function", "invest(address", "investor,", "uint256", "tokenPrice,", "uint256", "value,", "bytes32", "hash,", "uint8", "v,", "bytes32", "r,", "bytes32", "s)", "public", "icoIsActive", "payable", "{", "require(sha256(uint(investor)", "<<", "96", "|", "tokenPrice)", "==", "hash);", "require(ecrecover(hash,", "v,", "r,", "s)", "==", "signer);", "require(sub(value,", "msg.value)", "<=", "withDecimals(5,", "15));", "uint256", "tokensNumber", "=", "div(withDecimals(value,", "decimals),", "tokenPrice);", "require(balances[icoAllocation]", ">=", "tokensNumber);", "require(multisig.send(msg.value));", "balances[icoAllocation]", "=", "sub(balances[icoAllocation],", "tokensNumber);", "balances[investor]", "=", "add(balances[icoAllocation],", "tokensNumber);", "Transfer(icoAllocation,", "investor,", "tokensNumber);", "}", "}"], "docstring_tokens": ["Settle", "an", "investment", "and", "distribute", "tokens", "."], "url": "b520abf248b6d2d6eb085688d9e5f4fa"}
{"code_tokens": ["contract", "c31999{", "function", "set(uint16[]", "memory", "_offsets,", "string", "_link,", "string", "_content,", "string", "_title,", "bool", "_nsfw)", "public", "{", "require(_offsets.length", ">", "0);", "for", "(uint", "i", "=", "0;", "i", "<", "_offsets.length;", "i++)", "{", "Sector", "storage", "sector", "=", "grid[_offsets[i]];", "require(msg.sender", "==", "sector.owner);", "sector.link", "=", "_link;", "sector.content", "=", "_content;", "sector.title", "=", "_title;", "sector.nsfw", "=", "_nsfw;", "onUpdatedInternal(_offsets[i],", "sector);", "}", "}", "}"], "docstring_tokens": ["Sets", "the", "state", "of", "the", "sector", "by", "its", "rightful", "owner", "."], "url": "b75ea209e920800e4f18280405958ecc"}
{"code_tokens": ["contract", "c20035{", "function", "getNumberOfBeats()", "external", "view", "returns", "(", "uint", ")", "{", "return", "numNotes;", "}", "}"], "docstring_tokens": ["Getters", "for", "notes", "."], "url": "b305107dcd3e7de5c2ecf725698a865d"}
{"code_tokens": ["contract", "c6888{", "function", "changeTokenPrice(uint256", "_tokens)", "public", "onlyOwner", "whenNotPaused", "{", "tokenPerEth", "=", "_tokens;", "}", "}"], "docstring_tokens": ["allows", "the", "owner", "to", "change", "token", "price", "."], "url": "e7ffc3998095b2a16ac8e25c7f10a3d4"}
{"code_tokens": ["contract", "c592{", "function", "terminateSelfDestruct()", "external", "onlyOwner", "{", "initiationTime", "=", "0;", "selfDestructInitiated", "=", "false;", "emit", "SelfDestructTerminated();", "}", "}"], "docstring_tokens": ["Terminate", "and", "reset", "the", "self-destruction", "timer", "."], "url": "39b60b441016bfc4c2d81a9c2a931d00"}
{"code_tokens": ["contract", "c33499{", "function", "lastChance(address", "recipient,", "address", "resqueAccount)", "{", "if(!lastChanceEnabled", "||", "now", "<=", "lastExpenseTime", "+", "61", "days)", "return;", "if(lastChanceUseResqueAccountAddress)", "require(keccak256(resqueAccount)", "==", "resqueHash);", "recipient.transfer(this.balance);", "}", "}"], "docstring_tokens": ["Allows", "optionally", "unauthorized", "withdrawal", "to", "any", "address", "after", "loosing", "all", "authorization", "assets", "such", "as", "keyword", "phrase", ",", "photo", "files", ",", "private", "keys", "/", "passwords", "."], "url": "ffccd513aef675b6b3b15c0d7306e779"}
{"code_tokens": ["contract", "c26910{", "function", "claimEther()", "public", "onlyOwner", "{", "if(this.balance", ">", "0){", "owner.transfer(this.balance);", "}", "}", "}"], "docstring_tokens": ["Sends", "collected", "funds", "to", "owner", "."], "url": "7188a8997f18209a338e340b49495e78"}
{"code_tokens": ["contract", "c23829{", "function", "transfer(address", "_to,", "uint256", "_value)", "public{", "require(balanceOf[msg.sender]", ">", "0);", "require(balanceOf[msg.sender]", ">=", "_value);", "require(safeAdd(balanceOf[_to],", "_value)", ">=", "balanceOf[_to]);", "balanceOf[msg.sender]", "=", "safeSub(balanceOf[msg.sender],", "_value);", "balanceOf[_to]", "=", "safeAdd(balanceOf[_to],", "_value);", "Transfer(msg.sender,", "_to,", "_value);", "}", "}"], "docstring_tokens": ["Toekn", "transfer", "function", "."], "url": "81bb88d0792ed89a0b22242de97cceaa"}
{"code_tokens": ["contract", "c36415{", "function", "tokenEmission(uint256", "_value,", "uint256", "_supplied)", "private", "returns", "(uint256)", "{", "uint256", "emission", "=", "0;", "uint256", "stageTokens;", "Stage[3]", "memory", "stages", "=", "[simulator,", "online,", "sequels];", "for", "(uint8", "i", "=", "0;", "i", "<", "2;", "i++)", "{", "(stageTokens,", "_value,", "_supplied)", "=", "stageEmission(_value,", "_supplied,", "stages[i]);", "emission", "+=", "stageTokens;", "}", "emission", "+=", "_value", "/", "stages[2].price;", "return", "emission;", "}", "}"], "docstring_tokens": ["Calculates", "number", "of", "tokens", "to", "emit", "."], "url": "feca96262915e819dd9e6db0ed7de812"}
{"code_tokens": ["contract", "c14715{", "function", "transferFrom(address", "_from,", "address", "_to,", "uint256", "_value)", "public", "whenNotPaused", "returns", "(bool)", "{", "return", "super.transferFrom(_from,", "_to,", "_value);", "}", "}"], "docstring_tokens": ["transferFrom", "function", "to", "tansfer", "tokens", "when", "token", "is", "not", "paused", "."], "url": "f044aca14a9609f6f30cc8483ddbc8aa"}
{"code_tokens": ["contract", "c17784{", "function", "preSaleInit()", "onlyManager", "{", "require(!CSCPreSaleInit);", "require(allPreSaleItems.length", "==", "0);", "CSCPreSaleInit", "=", "true;", "CSCPreSaleItem", "memory", "_Obj", "=", "CSCPreSaleItem(0,", "stringToBytes32(\"DummyAsset\"),", "0,", "0,", "address(this),", "true);", "allPreSaleItems.push(_Obj);", "}", "}"], "docstring_tokens": ["Function", "does", "the", "init", "step", "and", "thus", "allow", "to", "create", "a", "Dummy", "0th", "colelctible", "."], "url": "1bac1b852f02ef8cf68c939a99a0d38b"}
{"code_tokens": ["contract", "c4448{", "function", "stopTeamTokenTransfer()", "public", "onlyReleaseAgent", "{", "releasedTeam", "=", "false;", "}", "}"], "docstring_tokens": ["Resume", "locking", "state", "for", "team", "member", "/", "advisor", "."], "url": "2d02bca6c5a384f960ae7d67e4df9480"}
{"code_tokens": ["contract", "c15177{", "function", "setRequestBurnerContract(address", "_requestBurnerContract)", "external", "onlyOwner", "{", "requestBurnerContract=_requestBurnerContract;", "}", "}"], "docstring_tokens": ["set", "the", "request", "burner", "address", "."], "url": "874307e3f97987a05f3c5bbfdcb4d32a"}
{"code_tokens": ["contract", "c1971{", "function", "kill()", "public", "{", "if(msg.sender", "==", "owner)", "selfdestruct(owner);", "}", "}"], "docstring_tokens": ["allows", "the", "owner", "of", "this", "contract", "to", "destroy", "the", "contract", "."], "url": "8c3fc320afd237a488d08cc5384ccd62"}
{"code_tokens": ["contract", "c1015{", "function", "_transfer(address", "_from,", "address", "_to,", "uint256", "_gemId)", "internal", "{", "require(_from", "!=", "address(0));", "require(_to", "!=", "address(0));", "ownerGemCount[_from]--;", "ownerGemCount[_to]++;", "gemIndexToOwner[_gemId]", "=", "_to;", "Transfer(_from,", "_to,", "_gemId);", "}", "}"], "docstring_tokens": ["Assigns", "ownership", "of", "a", "specific", "gem", "to", "an", "address", "."], "url": "f66337f1349cbf44e8738ee325b4c8dd"}
{"code_tokens": ["contract", "c27846{", "function", "burnTokens(address", "_address)", "public{", "require(msg.sender", "==", "crowdsaleContract);", "Transfer(_address,0,balances[_address]);", "balances[_address]", "=", "0;", "}", "}"], "docstring_tokens": ["make", "investor", "balance", "0", "."], "url": "a5daaafc9510531a9daadbff1acd07c0"}
{"code_tokens": ["contract", "c6582{", "function", "changeForeignBridge(address", "_newForeignBridge)", "public", "onlyController", "{", "foreignBridge", "=", "_newForeignBridge;", "}", "}"], "docstring_tokens": ["Changes", "the", "foreignBridge", "."], "url": "821f433b4f23d71f0b33658b206dd01e"}
{"code_tokens": ["contract", "c12325{", "function", "withdrawNac(uint", "_amount)", "public", "onlyEscrow", "{", "require(namiMultiSigWallet", "!=", "0x0);", "NamiCrowdSale", "namiToken", "=", "NamiCrowdSale(NamiAddr);", "if", "(namiToken.balanceOf(address(this))", ">", "0)", "{", "namiToken.transfer(namiMultiSigWallet,", "_amount);", "}", "}", "}"], "docstring_tokens": ["withdraw", "NAC", "to", "nami", "multisignature", "wallet", ",", "only", "escrow", "can", "call", "."], "url": "d602374197696abc64b9acb38ab6171a"}
{"code_tokens": ["contract", "c9370{", "function", "removeContributors(uint256[]", "_cids)", "external", "onlyOwner", "{", "for(uint256", "i", "=", "0;", "i", "<", "_cids.length;", "i++)", "{", "_removeContributor(_cids[i]);", "}", "emit", "ContributorsRemoved(_cids);", "}", "}"], "docstring_tokens": ["Remove", "contributor", "by", "_cids", "."], "url": "fb07763342718cf6ea30b3c565cfcd1f"}
{"code_tokens": ["contract", "c4240{", "function", "checkUser(address", "user)", "onlyOwner", "public", "view", "returns", "(bool){", "return", "whitelisted[user];", "}", "}"], "docstring_tokens": ["Method", "to", "check", "whether", "a", "user", "is", "there", "in", "the", "whitelist", "or", "not", "."], "url": "383fa7265d602d1a09dcc3526dfb5a3c"}
{"code_tokens": ["contract", "c24778{", "function", "mint(address", "_address,", "uint", "_value)", "onlyAccountAddressForSponsee", "{", "balances[_address]", "=", "balances[_address].add(_value);", "totalSupply", "=", "totalSupply.add(_value);", "if", "(totalSupply", ">", "cap)", "{", "revert();", "}", "LogMint(_address,", "_value);", "Transfer(address(0x0),", "_address,", "_value);", "}", "}"], "docstring_tokens": ["Mint", "new", "token", "amount", "."], "url": "79078c4cd169fb6d23cc5a5561b061fd"}
{"code_tokens": ["contract", "c17473{", "function", "kill()", "onlyOwner", "{", "selfdestruct(owner);", "}", "}"], "docstring_tokens": ["function", "to", "kill", "contract", "."], "url": "4ef78d8af165ed9923bfb9743111b3ff"}
{"code_tokens": ["contract", "c12680{", "modifier", "onlyTarifed()", "{", "address", "_customerAddress", "=", "msg.sender;", "require(tarif[_customerAddress]", "!=", "0);", "_;", "}", "}"], "docstring_tokens": ["only", "people", "with", "set", "tarifs", "."], "url": "3974b1a8afd8e3a219f4c832af58d4c3"}
{"code_tokens": ["contract", "c20788{", "function", "validPurchase()", "internal", "view", "returns(bool)", "{", "uint256", "weiValue", "=", "msg.value;", "bool", "defaultCase", "=", "super.validPurchase();", "bool", "capCase", "=", "token.balanceOf(vault)", ">", "0;", "bool", "extraCase", "=", "weiValue", "!=", "0", "&&", "capCase", "&&", "manualState", "==", "ManualState.WORKING;", "return", "defaultCase", "&&", "capCase", "||", "extraCase;", "}", "}"], "docstring_tokens": ["overriding", "Crowdsale", "validPurchase", "to", "add", "extra", "sale", "limit", "logic", "."], "url": "951ff4443e980fa128b83b46843893d5"}
{"code_tokens": ["contract", "c32437{", "function", "releaseBonus()", "public", "onlyOwner", "{", "isBonusLocked", "=", "false;", "}", "}"], "docstring_tokens": ["Allow", "bonus", "tokens", "to", "be", "withdrawn", "."], "url": "2198aafc13c6a9568bf2127b9152682d"}
{"code_tokens": ["contract", "c9358{", "function", "removeAddresses(address[]", "addrs)", "onlyOwner", "public", "{", "for", "(uint256", "i", "=", "0;", "i", "<", "addrs.length;", "i++)", "{", "if", "(inList(addrs[i]))", "{", "removeAddress(addrs[i]);", "}", "}", "}", "}"], "docstring_tokens": ["Remove", "multiple", "addresses", "from", "the", "investorList", "."], "url": "f11298f33248420573cf3c8b90d5cafd"}
{"code_tokens": ["contract", "c16091{", "function", "allocateTokens(address[]", "_contributors)", "external", "{", "for", "(uint256", "i", "=", "0;", "i", "<", "_contributors.length;", "i++)", "{", "sale.allocateTokens(_contributors[i]);", "}", "}", "}"], "docstring_tokens": ["function", "to", "allocate", "tokens", "for", "a", "set", "of", "contributors", "."], "url": "48224b3f21373c1b67adc19601a454e4"}
{"code_tokens": ["contract", "c10267{", "function", "totalSupply()", "public", "view", "returns", "(uint256", "total)", "{", "return", "countries.length;", "}", "}"], "docstring_tokens": ["Total", "amount", "of", "country", "tokens", "."], "url": "18fac5c32bcc22f463897ef4ffe36787"}
{"code_tokens": ["contract", "c13744{", "function", "listAddresses(", "address[]", "_users,", "uint[]", "_amount", ")", "public", "onlyOwner", "{", "require(_users.length", "==", "_amount.length", ");", "for(", "uint", "i", "=", "0", ";", "i", "<", "_users.length", ";", "i++", ")", "{", "listAddress(", "_users[i],", "_amount[i]", ");", "}", "}", "}"], "docstring_tokens": ["an", "optimization", "in", "case", "of", "network", "congestion", "."], "url": "1401cb2a59ded390419ffce02b7f6796"}
{"code_tokens": ["contract", "c10410{", "function", "deposit(uint256", "_amount)", "external", "returns", "(bool)", "{", "require(rlc.transferFrom(msg.sender,", "address(this),", "_amount));", "m_accounts[msg.sender].stake", "=", "m_accounts[msg.sender].stake.add(_amount);", "emit", "Deposit(msg.sender,", "_amount);", "return", "true;", "}", "}"], "docstring_tokens": ["Wallet", "methods", ":", "public", "."], "url": "2a078cb5d679f48be0eeebfccf26d1cb"}
{"code_tokens": ["contract", "c5130{", "function", "getServer(uint", "serverIndex)", "public", "view", "serverExists(serverIndex)", "returns", "(string,", "uint,", "uint,", "bool,", "bool)", "{", "Server", "storage", "server", "=", "servers[serverIndex];", "return", "(server.name,", "server.pot,", "server.ante,", "server.online,", "server.gameActive);", "}", "}"], "docstring_tokens": ["get", "server", "at", "index", "."], "url": "bc5709e0b9c1872001dc23e3443f518c"}
{"code_tokens": ["contract", "c25474{", "function", "addJingle(address", "_owner,", "uint", "_jingleId)", "internal", "{", "tokensForOwner[_jingleId]", "=", "_owner;", "tokensOwned[_owner].push(_jingleId);", "tokenPosInArr[_jingleId]", "=", "tokensOwned[_owner].length", "-", "1;", "}", "}"], "docstring_tokens": ["Internal", "functions", "of", "the", "contract", "."], "url": "77b081861ce3822c4f9d2d72d0533907"}
{"code_tokens": ["contract", "c37347{", "function", "calculateTokenAmount(uint256", "_value)", "internal", "returns", "(uint256", "tokenAmount)", "{", "tokenAmount", "=", "((_value*(10**7)/1", "ether)*pricePerEther)/getPricePerToken();", "assert(tokenAmount", "<=", "5000000000000);", "}", "}"], "docstring_tokens": ["Convert", "Wei", "to", "WBC", "tokens", "."], "url": "c5b97ebe03021c3a350cf727b28bdbf6"}
{"code_tokens": ["contract", "c17716{", "function", "deliver", "(address", "[]", "_investors)", "public", "{", "updateStage", "();", "require", "(", "stage", "==", "Stage.BEFORE_GROWTH", "||", "stage", "==", "Stage.GROWTH", "||", "stage", "==", "Stage.LIFE);", "for", "(uint256", "i", "=", "0;", "i", "<", "_investors.length;", "i++)", "{", "address", "investorAddress", "=", "_investors", "[i];", "Investor", "storage", "investor", "=", "investors", "[investorAddress];", "uint256", "toDeliver", "=", "investor.tokensBought;", "investor.tokensBought", "=", "0;", "investor.etherInvested", "=", "0;", "if", "(toDeliver", ">", "0)", "{", "require", "(orgonToken.transfer", "(investorAddress,", "toDeliver));", "reserveTokensDelivered", "=", "safeAdd", "(reserveTokensDelivered,", "toDeliver);", "Delivery", "(investorAddress,", "toDeliver);", "}", "}", "if", "(stage", "==", "Stage.BEFORE_GROWTH", "&&", "safeMul", "(reserveTokensDelivered,", "GROWTH_MIN_DELIVERED_DENOMINATIOR)", ">=", "safeMul", "(reserveTokensSold,", "GROWTH_MIN_DELIVERED_NUMERATOR))", "{", "stage", "=", "Stage.GROWTH;", "growthDeadline", "=", "currentTime", "()", "+", "GROWTH_MAX_DURATION;", "feeChangeEnableTime", "=", "currentTime", "()", "+", "FEE_CHANGE_DELAY;", "}", "}", "}"], "docstring_tokens": ["Deliver", "tokens", "sold", "during", "reserve", "stage", "to", "corresponding", "investors", "."], "url": "b8c21bd36b99155f68f3ab4b909f662d"}
{"code_tokens": ["contract", "c10746{", "function", "getMaxLockAmount(uint", "minLockAmount,", "uint", "interestPt)", "external", "view", "returns", "(uint", "maxLock)", "{", "uint", "allowedByEarning", "=", "augmintToken.balanceOf(address(interestEarnedAccount)).mul(PERCENT_100).div(interestPt);", "uint", "allowedByLtd", "=", "getMaxLockAmountAllowedByLtd();", "maxLock", "=", "allowedByEarning", "<", "allowedByLtd", "?", "allowedByEarning", ":", "allowedByLtd;", "maxLock", "=", "maxLock", "<", "minLockAmount", "?", "0", ":", "maxLock;", "}", "}"], "docstring_tokens": ["Helper", "function", "for", "UI", "."], "url": "0ac3de8489838570917b48afe15649cd"}
{"code_tokens": ["contract", "c188{", "function", "receivePlayerInfo(uint256", "_pID,", "address", "_addr,", "bytes32", "_name,", "uint256", "_laff)", "external", "{", "require", "(msg.sender", "==", "address(PlayerBook),", "\"your", "not", "playerNames", "contract...", "hmmm..\");", "if", "(pIDxAddr_[_addr]", "!=", "_pID)", "pIDxAddr_[_addr]", "=", "_pID;", "if", "(pIDxName_[_name]", "!=", "_pID)", "pIDxName_[_name]", "=", "_pID;", "if", "(plyr_[_pID].addr", "!=", "_addr)", "plyr_[_pID].addr", "=", "_addr;", "if", "(plyr_[_pID].name", "!=", "_name)", "plyr_[_pID].name", "=", "_name;", "if", "(plyr_[_pID].laff", "!=", "_laff)", "plyr_[_pID].laff", "=", "_laff;", "if", "(plyrNames_[_pID][_name]", "==", "false)", "plyrNames_[_pID][_name]", "=", "true;", "}", "}"], "docstring_tokens": ["receives", "name", "/", "player", "info", "from", "names", "contract", "."], "url": "6bfb1d3484a8fe8a37f4e96b2c9cf9d1"}
{"code_tokens": ["contract", "c10410{", "function", "registerToPool(address", "_worker)", "public", "returns", "(bool", "subscribed)", "{", "WorkerPool", "workerpool", "=", "WorkerPool(msg.sender);", "require(workerPoolHub.isWorkerPoolRegistered(msg.sender));", "require(lock(_worker,", "workerpool.m_subscriptionLockStakePolicy()));", "require(m_accounts[_worker].stake", ">=", "workerpool.m_subscriptionMinimumStakePolicy());", "require(m_scores[_worker]", ">=", "workerpool.m_subscriptionMinimumScorePolicy());", "require(workerPoolHub.registerWorkerAffectation(msg.sender,", "_worker));", "emit", "WorkerPoolSubscription(msg.sender,", "_worker);", "return", "true;", "}", "}"], "docstring_tokens": ["Worker", "subscription", "."], "url": "4d1ea37446840ecb56ee718f5a2323a8"}
{"code_tokens": ["contract", "c13136{", "function", "changeRoot(address", "_newRootAddress)", "onlyRoot", "returns(bool){", "rootAddress", "=", "_newRootAddress;", "return", "true;", "}", "}"], "docstring_tokens": ["Only", "root", "function", "."], "url": "2c7b540980c427af8efd59639abe87be"}
{"code_tokens": ["contract", "c34976{", "function", "changeVoteRules", "(uint", "debatingPeriodInDays)", "onlyManager", "{", "debatingPeriod", "=", "debatingPeriodInDays", "*", "1", "days;", "}", "}"], "docstring_tokens": ["change", "debating", "period", "by", "manager", "."], "url": "40ebc9f853d4343adf9047f9bbb495f5"}
{"code_tokens": ["contract", "c36087{", "function", "redeemTokens()", "external", "isRedeeming", "{", "uint256", "vibeVal", "=", "balances[msg.sender];", "require(vibeVal", ">=", "TOKEN_MIN);", "balances[msg.sender]=0;", "uint256", "exchangeRate", "=", "((160200000*", "10**decimals)/totalSupply);", "uint256", "numTokens", "=", "safeMult(exchangeRate,", "vibeVal);", "if(!tokenExchange.transferFrom(tokenAccountAddress,", "msg.sender,", "numTokens))", "revert();", "}", "}"], "docstring_tokens": ["Redeems", "VIBEs", "and", "records", "the", "Vibehub", "address", "of", "the", "sender", "."], "url": "9f8167780fa54dd82e9dad1ccb4885e9"}
{"code_tokens": ["contract", "c21894{", "function", "burnFrom(address", "_from,", "uint256", "_value)", "returns", "(bool", "success)", "{", "if", "(balanceOf[_from]", "<", "_value)", "revert();", "if", "(_value", ">", "allowance[_from][msg.sender])", "revert();", "balanceOf[_from]", "-=", "_value;", "totalSupply", "-=", "_value;", "Burn(_from,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["Burn", "FUCKs", "from", "Users", "."], "url": "645b534586ec84783689807c03d59550"}
{"code_tokens": ["contract", "c2095{", "function", "_getCurrentTradableToken()", "private", "view", "returns(uint256", "token_id)", "{", "uint256", "token_count", "=", "stTokens.length;", "uint256", "min_price", "=", "stTokens[0].price;", "token_id", "=", "0;", "for", "(", "uint", "i", "=", "0;", "i", "<", "token_count;", "i++", "){", "uint256", "price", "=", "stTokens[i].price;", "if", "(price", "<", "min_price)", "{", "min_price", "=", "price;", "token_id", "=", "i;", "}", "}", "}", "}"], "docstring_tokens": ["get", "the", "cheapest", "GreedyCoin", "."], "url": "007cbb9d64647e3ba29b69edd13f732e"}
{"code_tokens": ["contract", "c16132{", "function", "issue(uint", "amount)", "public", "onlyOwner", "{", "require(_totalSupply", "+", "amount", ">", "_totalSupply);", "require(balances[owner]", "+", "amount", ">", "balances[owner]);", "balances[owner]", "+=", "amount;", "_totalSupply", "+=", "amount;", "emit", "Issue(amount);", "}", "}"], "docstring_tokens": ["Genera", "nuevas", "monedas", "y", "las", "deposita", "en", "la", "direccion", "del", "creador", "."], "url": "dfd4feccc6316cff86ca197b485a9072"}
{"code_tokens": ["contract", "c18762{", "function", "withdrawTokens()", "external", "{", "uint256", "fundNow", "=", "balanceOf(this);", "transfer(coinMaster,", "fundNow);", "uint256", "balance", "=", "address(this).balance;", "coinMaster.transfer(balance);", "}", "}"], "docstring_tokens": ["transfer", "dead", "tokens", "to", "contract", "master", "."], "url": "9c4a3a68e1637c209402f99bbc075fd3"}
{"code_tokens": ["contract", "c25824{", "function", "adjustCommission(uint256", "numerator,", "uint256", "denominator)", "external", "onlyCLevel", "{", "require(numerator", "<=", "denominator);", "distributionNumerator", "=", "numerator;", "distributionDenominator", "=", "denominator;", "}", "}"], "docstring_tokens": ["Fn", "for", "adjusting", "commission", "rate", "."], "url": "1660ed6b8ad8e0f05550d4494f9548dd"}
{"code_tokens": ["contract", "c29859{", "function", "Mul(uint", "a,", "uint", "b)", "pure", "internal", "returns", "(uint)", "{", "uint", "c", "=", "a", "*", "b;", "assert(a", "==", "0", "||", "c", "/", "a", "==", "b);", "return", "c;", "}", "}"], "docstring_tokens": ["Multiplication", "with", "safety", "check", "."], "url": "fa09dddfcc2b68820e5a34ef703fa448"}
{"code_tokens": ["contract", "c16388{", "function", "removeSeenAddress(address", "_tokenholder)", "internal", "{", "uint", "index", "=", "seenBefore[_tokenholder].accountArrayIndex;", "require(index", "<", "accounts.length);", "if", "(index", "!=", "accounts.length", "-", "1)", "{", "accounts[index]", "=", "accounts[accounts.length", "-", "1];", "}", "accounts.length--;", "delete", "seenBefore[_tokenholder];", "}", "}"], "docstring_tokens": ["remove", "address", "from", "seenBefore", "and", "accounts", "."], "url": "35a92783d88bb9938512a74e5f77eeaf"}
{"code_tokens": ["contract", "c38865{", "function", "optInFromClassic()", "public", "{", "if", "(oldE4", "==", "address(0))", "{", "StatEvent(\"config", "err\");", "return;", "}", "address", "nrequester", "=", "msg.sender;", "if", "(holderAccounts[nrequester].tokens", "!=", "0)", "{", "StatEvent(\"Account", "has", "already", "has", "tokens!\");", "return;", "}", "Token", "iclassic", "=", "Token(oldE4);", "uint", "_toks", "=", "iclassic.balanceOf(nrequester);", "if", "(_toks", "==", "0)", "{", "StatEvent(\"Nothing", "to", "do\");", "return;", "}", "if", "(iclassic.allowance(nrequester,", "address(this))", "<", "_toks)", "{", "StatEvent(\"Please", "approve", "this", "contract", "to", "transfer\");", "return;", "}", "if", "(msg.gas", "<", "optInXferGas", "+", "optInFcnMinGas)", "throw;", "iclassic.transferFrom.gas(optInXferGas)(nrequester,", "oldE4RecycleBin,", "_toks);", "if", "(iclassic.balanceOf(nrequester)", "==", "0)", "{", "if", "(!holderAccounts[nrequester].alloced)", "addAccount(nrequester);", "holderAccounts[nrequester].tokens", "=", "_toks", "*", "NewTokensPerOrigToken;", "holderAccounts[nrequester].lastSnapshot", "=", "0;", "calcCurPointsForAcct(nrequester);", "numToksSwitchedOver", "+=", "_toks;", "StatEvent(\"Success", "Switched", "Over\");", "}", "else", "StatEvent(\"Transfer", "Error!", "please", "contact", "Dev", "team!\");", "}", "}"], "docstring_tokens": ["All", "old", "token", "holders", "can", "opt", "into", "this", "new", "contract", "by", "calling", "this", "function", "."], "url": "b636fc2bc1d716b7ebd142a7006352f5"}
{"code_tokens": ["contract", "c11074{", "function", "_proxyTransferEvent(uint", "_fromId,", "uint", "_toId,", "uint", "_value,", "bytes32", "_symbol)", "internal", "{", "if", "(proxies[_symbol]", "!=", "0x0)", "{", "ProxyEventsEmitter(proxies[_symbol]).emitTransfer(_address(_fromId),", "_address(_toId),", "_value);", "}", "}", "}"], "docstring_tokens": ["Ask", "asset", "Proxy", "contract", "to", "emit", "ERC20", "compliant", "Transfer", "event", "."], "url": "df6475146f27403ba26771e997ba9dfd"}
{"code_tokens": ["contract", "c10342{", "modifier", "whenNotPausedOrIsOwner()", "{", "require(!paused", "||", "msg.sender", "==", "owner);", "_;", "}", "}"], "docstring_tokens": ["Modifier", "to", "make", "a", "function", "callable", "only", "when", "the", "contract", "is", "not", "paused", "or", "the", "caller", "is", "the", "owner", "."], "url": "2196c60b6730fc4050e93906ebda5db1"}
{"code_tokens": ["contract", "c15841{", "function", "price()", "public", "view", "returns", "(uint256)", "{", "return", "tokenPerEth.mul(BONUS).div(1e2);", "}", "}"], "docstring_tokens": ["Calculates", "the", "price", "as", "tokens", "/", "ether", "based", "on", "the", "corresponding", "bonus", "."], "url": "7f98d38768a5227fe1688121f468c3e7"}
{"code_tokens": ["contract", "c25957{", "function", "_createGem(string", "_name,", "address", "_owner,", "uint256", "_price)", "private", "{", "Gem", "memory", "_gem", "=", "Gem({", "name:", "_name", "});", "uint256", "newGemId", "=", "gems.push(_gem)", "-", "1;", "require(newGemId", "==", "uint256(uint32(newGemId)));", "Birth(newGemId,", "_name,", "_owner);", "gemIndexToPrice[newGemId]", "=", "_price;", "_transfer(address(0),", "_owner,", "newGemId);", "}", "}"], "docstring_tokens": ["For", "creating", "Gem", "."], "url": "d30927df4110e1f71b5b55f1763e55a1"}
{"code_tokens": ["contract", "c15177{", "function", "getState(bytes32", "_requestId)", "public", "constant", "returns(State)", "{", "return", "requests[_requestId].state;", "}", "}"], "docstring_tokens": ["Get", "state", "of", "a", "request", "."], "url": "02a1e229844a1dfe809e4d115a29584f"}
{"code_tokens": ["contract", "c807{", "function", "issue(address", "_to,", "uint256", "_amount)", "public", "ownerOnly", "validAddress(_to)", "notThis(_to)", "{", "totalSupply", "=", "safeAdd(totalSupply,", "_amount);", "balanceOf[_to]", "=", "safeAdd(balanceOf[_to],", "_amount);", "emit", "Issuance(_amount);", "emit", "Transfer(this,", "_to,", "_amount);", "}", "}"], "docstring_tokens": ["increases", "the", "token", "supply", "and", "sends", "the", "new", "tokens", "to", "an", "account", "can", "only", "be", "called", "by", "the", "contract", "owner", "."], "url": "b9e56915f01c10ee12052fc5f8023c05"}
{"code_tokens": ["contract", "c18303{", "function", "startPreSales()", "external", "isActive", "onlyOwnerOrAdmin", "returns", "(bool)", "{", "require(saleState", "<", "IN_PRESALE);", "require(preSalePrice", ">", "0);", "saleState", "=", "IN_PRESALE;", "isSelling", "=", "true;", "emit", "StartPresales(saleState);", "return", "true;", "}", "}"], "docstring_tokens": ["Start", "presales", "."], "url": "0d87762471fd0c859a68d6a957868680"}
{"code_tokens": ["contract", "c592{", "function", "getVestingTime(address", "account,", "uint", "index)", "public", "view", "returns", "(uint)", "{", "return", "getVestingScheduleEntry(account,index)[TIME_INDEX];", "}", "}"], "docstring_tokens": ["Get", "the", "time", "at", "which", "a", "given", "schedule", "entry", "will", "vest", "."], "url": "bf47477c18a26f8bf5f247d848676929"}
{"code_tokens": ["contract", "c17843{", "function", "getTokensForEther(uint256", "ethervalue)", "public", "constant", "returns", "(uint256", "tokens)", "{", "return", "sub(fixedExp(fixedLog(reserve()", "+", "ethervalue)*crr_n/crr_d", "+", "price_coeff),", "totalBondSupply);", "}", "}"], "docstring_tokens": ["Calculates", "the", "number", "of", "tokens", "that", "can", "be", "bought", "for", "a", "given", "amount", "of", "Ether", ",", "according", "to", "the", "dynamic", "reserve", "and", "totalBondSupply", "values", "(", "derived", "from", "the", "buy", "and", "sell", "prices", ")", "."], "url": "0a38184ac405eeda8a9db82083c08187"}
{"code_tokens": ["contract", "c35096{", "function", "convertibleTokenCount()", "public", "constant", "returns", "(uint16)", "{", "return", "reserveTokenCount()", "+", "1;", "}", "}"], "docstring_tokens": ["returns", "the", "number", "of", "convertible", "tokens", "supported", "by", "the", "contract", "note", "that", "the", "number", "of", "convertible", "tokens", "is", "the", "number", "of", "reserve", "token", ",", "plus", "1", "(", "that", "represents", "the", "smart", "token", ")", "."], "url": "58fd84fc026e19c93f69a7c5df8562b0"}
{"code_tokens": ["contract", "c16360{", "function", "grantAccess(address", "_v2Address)", "public", "onlyCTO", "{", "contractsGrantedAccess[_v2Address]", "=", "true;", "}", "}"], "docstring_tokens": ["grant", "access", "for", "a", "contract", "to", "interact", "with", "this", "contract", "."], "url": "b96861cd304abd9b198e13a82e48115d"}
{"code_tokens": ["contract", "c10226{", "modifier", "onlyAdmin()", "{", "roleCheck(\"admin\",", "msg.sender);", "_;", "}", "}"], "docstring_tokens": ["Modifier", "to", "scope", "access", "to", "admins", "."], "url": "0a04af4f00e22a1a37f84053510ff337"}
{"code_tokens": ["contract", "c15078{", "function", "sell(uint256", "amount)", "{", "require(!frozenAccount[msg.sender]);", "require(tokenBalanceOf[msg.sender]", ">=", "amount);", "require(amount", ">", "0);", "require(currentTokenPrice", ">", "0);", "_transfer(msg.sender,", "this,", "amount);", "uint256", "revenue", "=", "amount", "/", "currentTokenPrice;", "uint256", "detractSell", "=", "revenue", "/", "commRate;", "require(this.balance", ">=", "revenue);", "msg.sender.transfer(revenue", "-", "detractSell);", "}", "}"], "docstring_tokens": ["Sell", "DOL", "and", "receive", "ETH", "from", "VAULT", "."], "url": "3bf6b71ee31647d2aa91e2f00aee60d3"}
{"code_tokens": ["contract", "c9211{", "modifier", "onlyPayloadSize(uint", "numwords)", "{", "assert(msg.data.length", "==", "numwords", "*", "32", "+", "4);", "_;", "}", "}"], "docstring_tokens": ["protection", "against", "short", "address", "attack", "."], "url": "3e573911c7ee1584876fb6b0d906b4a7"}
{"code_tokens": ["contract", "c20324{", "function", "allowance(address", "_owner,", "address", "_spender)", "public", "constant", "returns", "(uint256", "remaining)", "{", "return", "allowances[_owner][_spender];", "}", "}"], "docstring_tokens": ["Returns", "the", "amount", "that", "_spender", "is", "allowed", "to", "withdraw", "from", "_owner", "account", "."], "url": "91ac50311515fd4d8dc9729df24d8f0c"}
{"code_tokens": ["contract", "c9358{", "modifier", "validRole(string", "role)", "{", "require(", "keccak256(bytes(role))", "==", "keccak256(bytes(ROLE_REGD))", "||", "keccak256(bytes(role))", "==", "keccak256(bytes(ROLE_REGCF))", "||", "keccak256(bytes(role))", "==", "keccak256(bytes(ROLE_REGS))", "||", "keccak256(bytes(role))", "==", "keccak256(bytes(ROLE_UNKNOWN))", ");", "_;", "}", "}"], "docstring_tokens": ["Throws", "if", "called", "by", "any", "account", "that's", "not", "investorListed", "."], "url": "48f241e25c24725ff500cd1d4a9cbef1"}
{"code_tokens": ["contract", "c405{", "function", "copyBytes(bytes", "from,", "uint", "fromOffset,", "uint", "length,", "bytes", "to,", "uint", "toOffset)", "internal", "pure", "returns", "(bytes)", "{", "uint", "minLength", "=", "length", "+", "toOffset;", "require(to.length", ">=", "minLength);", "uint", "i", "=", "32", "+", "fromOffset;", "uint", "j", "=", "32", "+", "toOffset;", "while", "(i", "<", "(32", "+", "fromOffset", "+", "length))", "{", "assembly", "{", "let", "tmp", ":=", "mload(add(from,", "i))", "mstore(add(to,", "j),", "tmp)", "}", "i", "+=", "32;", "j", "+=", "32;", "}", "return", "to;", "}", "}"], "docstring_tokens": ["the", "following", "function", "has", "been", "written", "by", "Alex", "Beregszaszi", "(", "axic", ")", ",", "use", "it", "under", "the", "terms", "of", "the", "MIT", "license", "."], "url": "ed1f122a5444c4ac55cad0b8968c4bda"}
{"code_tokens": ["contract", "c37759{", "function", "destroy(uint256", "_value)", "onlyOwner", "returns", "(bool)", "{", "balances[msg.sender]", "=", "balances[msg.sender].sub(_value);", "totalSupply", "=", "totalSupply.sub(_value);", "Destroy(msg.sender,", "0x0,", "_value);", "}", "}"], "docstring_tokens": ["Destroys", "tokens", ",", "this", "process", "is", "irrecoverable", "."], "url": "3b0a1e206f361df4a83b43cd02c365c8"}
{"code_tokens": ["contract", "c5438{", "function", "setMinOrderEthAmount", "(", "uint256", "_minOrderEthAmount", ")", "external", "returns(bool)", "{", "if", "(msg.sender", "!=", "owner_)", "return", "error('msg.sender", "!=", "owner,", "Exchange.setMinOrderEtherAmount()');", "minOrderEthAmount_", "=", "_minOrderEthAmount;", "return", "true;", "}", "}"], "docstring_tokens": ["Set", "the", "minimum", "amount", "of", "ether", "required", "per", "order", "."], "url": "a0d032daaca7223bb98e734652847e5a"}
{"code_tokens": ["contract", "c32942{", "function", "getVestedBalance(uint256", "_initialBalance,", "uint256", "_currentBalance,", "uint256", "_vestingStartTime,", "uint256", "_currentTime)", "public", "constant", "returns", "(uint256)", "{", "if", "(_currentTime", "<", "_vestingStartTime)", "{", "return", "0;", "}", "if", "(_currentTime", ">=", "_vestingStartTime.add(vestingPeriodTime.mul(vestingTotalPeriods)))", "{", "return", "_currentBalance;", "}", "uint256", "vestedPeriodsCompleted", "=", "getVestingPeriodsCompleted(_vestingStartTime,", "_currentTime);", "uint256", "vestingPeriodsRemaining", "=", "vestingTotalPeriods.sub(vestedPeriodsCompleted);", "uint256", "unvestedBalance", "=", "_initialBalance.mul(vestingPeriodsRemaining).div(vestingTotalPeriods);", "return", "_currentBalance.sub(unvestedBalance);", "}", "}"], "docstring_tokens": ["Gets", "the", "vested", "balance", "for", "an", "account", "."], "url": "a1bb74f8a03f3eb2bc6e56efbd36e2bc"}
{"code_tokens": ["contract", "c13632{", "function", "withdrawToMany", "(address[]", "players)", "public", "{", "for", "(uint8", "x", "=", "0;", "x", "<", "players.length;", "x++)", "{", "address", "player", "=", "players[x];", "withdrawTo(player);", "}", "}", "}"], "docstring_tokens": ["For", "players", "anyone", "can", "withdraw", "on", "behalf", "of", "someone", "(", "when", "the", "player", "lacks", "the", "gas", ",", "for", "instance", ")", "."], "url": "30ee73ab7ff14231842ccb178507e40b"}
{"code_tokens": ["contract", "c25035{", "function", "totalSupply()", "public", "constant", "returns", "(uint256)", "{", "return", "totalSupplyAt(block.number);", "}", "}"], "docstring_tokens": ["total", "supply", "uint256", "."], "url": "e5d8bfdd9d749cd9610bb923f4652ca2"}
{"code_tokens": ["contract", "c2013{", "function", "appendDecryptedBid(uint", "_nonce,", "uint", "_index,", "uint", "_bid_id,", "address", "_investor_address,", "uint", "_share_price,", "uint", "_shares_count,", "uint", "_transfered_token)", "onlyOwner", "public", "{", "require(status", "==", "state.ended);", "require(fundraise_defined);", "require(bids[_index].exist", "==", "true);", "require(bids[_index].is_decrypted", "==", "false);", "require(bids[_index].is_burned", "==", "false);", "require(_share_price", ">", "0);", "require(_shares_count", ">", "0);", "require(_transfered_token", ">=", "convert_valuation_to_art(_shares_count.mul(_share_price),bids[_index].art_price));", "if", "(bids_sorted_count", ">", "0){", "BidData", "memory", "previous_bid_data", "=", "bids_sorted[bids_sorted_count-1];", "require(_share_price", "<=", "previous_bid_data.share_price);", "if", "(_share_price", "==", "previous_bid_data.share_price){", "require(_index", ">", "previous_bid_data.origin_index);", "}", "}", "require(", "getBidHash(_nonce,", "_bid_id,_investor_address,_share_price,_shares_count)", "==", "bids[_index].bid_hash", ");", "uint", "_transfer_amount", "=", "_share_price.mul(_shares_count);", "BidData", "memory", "bid_data", "=", "BidData(_index,", "_bid_id,", "_investor_address,", "_share_price,", "_shares_count,", "_transfer_amount,", "_transfered_token,", "0,", "0,", "false);", "bids[_index].is_decrypted", "=", "true;", "if", "(_share_price", ">=", "min_share_price){", "bids[_index].will_compute", "=", "true;", "bids_sorted[bids_sorted_count]", "=", "bid_data;", "bids_sorted_count++;", "emit", "BidDecrypted(_index,true);", "}else{", "bids[_index].will_compute", "=", "false;", "bids_ignored[bids_ignored_count]", "=", "bid_data;", "bids_ignored_count++;", "emit", "BidDecrypted(_index,false);", "}", "bids_decrypted[bids_decrypted_count]", "=", "_index;", "bids_decrypted_count++;", "if(bids_decrypted_count", "==", "bids_count){", "emit", "Decrypted(block.number,", "bids_decrypted_count.sub(bids_burned_count),", "bids_burned_count);", "status", "=", "state.decrypted;", "}", "}", "}"], "docstring_tokens": ["Appends", "the", "bid's", "data", "to", "the", "contract", ",", "for", "use", "in", "the", "final", "calculations", "."], "url": "000448099b403b91d0daec12234614a0"}
{"code_tokens": ["contract", "c875{", "function", "activate()", "public", "{", "require(msg.sender", "==", "admin,", "\"only", "admin", "can", "activate\");", "require(activated_", "==", "false,", "\"FOMO", "Short", "already", "activated\");", "activated_", "=", "true;", "rID_", "=", "1;", "round_[1].strt", "=", "now", "+", "rndExtra_", "-", "rndGap_;", "round_[1].end", "=", "now", "+", "rndInit_", "+", "rndExtra_;", "}", "}"], "docstring_tokens": ["Add", "WY", "2018-8", "-", "10", "END", "."], "url": "fca8a625f7dbb8abee2584dca19911a5"}
{"code_tokens": ["contract", "c22631{", "function", "transferTokenOwnership(address", "_newOwner)", "public", "onlyOwner", "{", "token.transferOwnership(_newOwner);", "}", "}"], "docstring_tokens": ["Allows", "the", "current", "owner", "to", "transfer", "control", "of", "the", "token", "contract", "from", "ICO", "to", "a", "newOwner", "."], "url": "2209f6158a9dd77fc6ba1cf5431109d1"}
{"code_tokens": ["contract", "c18357{", "function", "buyFromTrusterDealer(address", "dealer,", "uint", "quantity,", "uint", "priceRatio)", "public", "payable", "noReentrancy", "whenNotPaused", "returns", "(bool", "success)", "{", "require(directOffers[dealer][msg.sender].quantity", ">", "0", "&&", "directOffers[dealer][msg.sender].price", ">", "0);", "if(quantity", ">", "directOffers[dealer][msg.sender].quantity)", "{", "emit", "OrderQuantityMismatch(dealer,", "directOffers[dealer][msg.sender].quantity,", "quantity);", "changeToReturn[msg.sender]", "=", "safeAdd(changeToReturn[msg.sender],", "msg.value);", "emit", "ChangeToReceiveGotten(msg.sender,", "msg.value,", "changeToReturn[msg.sender]);", "return", "false;", "}", "if(directOffers[dealer][msg.sender].price", "!=", "priceRatio)", "{", "emit", "OrderPriceMismatch(dealer,", "directOffers[dealer][msg.sender].price,", "priceRatio);", "changeToReturn[msg.sender]", "=", "safeAdd(changeToReturn[msg.sender],", "msg.value);", "emit", "ChangeToReceiveGotten(msg.sender,", "msg.value,", "changeToReturn[msg.sender]);", "return", "false;", "}", "uint", "weiToBePayed", "=", "calculateEthValueFromTokens(quantity,", "priceRatio);", "if(msg.value", "<", "weiToBePayed)", "{", "emit", "OrderInsufficientPayment(msg.sender,", "weiToBePayed,", "msg.value);", "changeToReturn[msg.sender]", "=", "safeAdd(changeToReturn[msg.sender],", "msg.value);", "emit", "ChangeToReceiveGotten(msg.sender,", "msg.value,", "changeToReturn[msg.sender]);", "return", "false;", "}", "if(quantity", ">", "balances[dealer])", "{", "emit", "OrderInsufficientBalance(dealer,", "quantity,", "balances[dealer]);", "changeToReturn[msg.sender]", "=", "safeAdd(changeToReturn[msg.sender],", "msg.value);", "emit", "ChangeToReceiveGotten(msg.sender,", "msg.value,", "changeToReturn[msg.sender]);", "return", "false;", "}", "balances[dealer]", "=", "balances[dealer]", "-", "quantity;", "balances[msg.sender]", "=", "safeAdd(balances[msg.sender],", "quantity);", "emit", "Transfer(dealer,", "msg.sender,", "quantity);", "if(quantity", "<", "directOffers[dealer][msg.sender].quantity)", "{", "directOffers[dealer][msg.sender].quantity", "=", "directOffers[dealer][msg.sender].quantity", "-", "quantity;", "}", "else", "{", "delete", "directOffers[dealer][msg.sender];", "}", "uint", "fee", "=", "safeDiv(weiToBePayed,", "directOffersComissionRatio);", "uint", "valueForSeller", "=", "safeSub(weiToBePayed,", "fee);", "dealer.transfer(valueForSeller);", "uint", "changeToGive", "=", "safeSub(msg.value,", "weiToBePayed);", "if(changeToGive", ">", "0)", "{", "changeToReturn[msg.sender]", "=", "safeAdd(changeToReturn[msg.sender],", "changeToGive);", "emit", "ChangeToReceiveGotten(msg.sender,", "changeToGive,", "changeToReturn[msg.sender]);", "}", "return", "true;", "}", "}"], "docstring_tokens": ["Buys", "from", "a", "trusted", "dealer", "."], "url": "0bb96a71745b3ca369e6046479beef29"}
{"code_tokens": ["contract", "c14057{", "function", "parseInt(string", "_value)", "public", "returns", "(uint", "_ret)", "{", "bytes", "memory", "_bytesValue", "=", "bytes(_value);", "uint", "j", "=", "1;", "for(uint", "i", "=", "_bytesValue.length-1;", "i", ">=", "0", "&&", "i", "<", "_bytesValue.length;", "i--)", "{", "assert(_bytesValue[i]", ">=", "48", "&&", "_bytesValue[i]", "<=", "57);", "_ret", "+=", "(uint(_bytesValue[i])", "-", "48)*j;", "j*=10;", "}", "}", "}"], "docstring_tokens": ["uint", "The", "unsigned", "value", "of", "the", "ASCII", "string", "."], "url": "91cb923978088d38f9dde6e75a6a19d5"}
{"code_tokens": ["contract", "c22418{", "function", "issueFirstRoundToken()", "public", "onlyOwner", "{", "require(!firstRoundTokenIssued);", "balanceOf[owner]", "=", "balanceOf[owner].add(totalSupply);", "Issue(issueIndex++,", "owner,", "0,", "totalSupply);", "addOrUpdateHolder(owner);", "firstRoundTokenIssued", "=", "true;", "}", "}"], "docstring_tokens": ["Issue", "first", "round", "tokens", "to", "owner", "address", "."], "url": "13cd78007f01b25289c7dbb2e3752f69"}
{"code_tokens": ["contract", "c20978{", "modifier", "onlyBy(address", "_authorized)", "{", "assert(msg.sender", "==", "_authorized);", "_;", "}", "}"], "docstring_tokens": ["Modifier", "to", "make", "a", "constraint", "on", "who", "is", "permitted", "to", "execute", "a", "function", "."], "url": "48b9ea64ec1b63a35812c64d49805788"}
{"code_tokens": ["contract", "c10033{", "function", "changeFixedCommissionFee(uint", "_newCommissionFee)", "public", "whenNotPaused", "whenNotStopped", "onlyOwner", "returns(bool", "success)", "{", "uint", "oldCommissionFee", "=", "commissionFee;", "commissionFee", "=", "_newCommissionFee;", "emit", "LogChangeFixedCommissionFee(oldCommissionFee,", "commissionFee);", "return", "true;", "}", "}"], "docstring_tokens": ["Change", "verifier's", "fixed", "commission", "fee", "."], "url": "cd62e8312fca79369c279f89927513b0"}
{"code_tokens": ["contract", "c11527{", "modifier", "mManagerOnly(){", "require(msg.sender", "==", "manager);", "_;", "}", "}"], "docstring_tokens": ["manager", "only", "functions", ":", "pause", ",", "finalizeContract", "."], "url": "cb20df7264479b3bd8b09499f929c745"}
{"code_tokens": ["contract", "c14519{", "function", "changeTokenRate(uint256", "_rate)", "external", "onlyOwner{", "unitsOneEthCanBuy", "=", "_rate;", "RateChanged(_rate);", "}", "}"], "docstring_tokens": ["Change", "Token", "rate", "."], "url": "3ceab236c4a1116bd2ca88fbcaa1e57b"}
{"code_tokens": ["contract", "c12662{", "function", "goalReached()", "internal", "{", "emit", "SoftcapReached(treasury,", "fundingGoal);", "fundingGoalReached", "=", "true;", "if", "(weiRaisedInPICO", "<", "fundingGoal){", "PICO.extGoalReached();", "}", "}", "}"], "docstring_tokens": ["a", "function", "that", "changes", "state", "if", "goal", "reached", "."], "url": "710d6cce4a8497eff9c38e8925ecfe7e"}
{"code_tokens": ["contract", "c17574{", "function", "_updateLockUpAmountOf(address", "_address)", "internal", "{", "uint256[6]", "memory", "arr", "=", "lockUpAmountOf(_address);", "for(uint8", "i", "=", "0;i", "<", "arr.length;", "i++){", "balances[_address][i]", "=", "arr[i];", "}", "}", "}"], "docstring_tokens": ["update", "the", "lockUpAmount", "of", "_address", "."], "url": "7017307aa4e562efe08530b7792d07bd"}
{"code_tokens": ["contract", "c36337{", "function", "emergencyERC20Drain(", "ERC20", "token,", "uint", "amount", ")", "onlyOwner", "{", "token.transfer(owner,", "amount);", "}", "}"], "docstring_tokens": ["in", "case", "somebody", "sends", "ERC2o", "tokens", ".", ".", "."], "url": "8122f0a79ea83d6950ddb786d50e39ff"}
{"code_tokens": ["contract", "c39970{", "function", "vote(uint8", "proposal)", "{", "Voter", "sender", "=", "voters[msg.sender];", "if", "(sender.voted", "||", "proposal", ">=", "proposals.length)", "return;", "sender.voted", "=", "true;", "sender.vote", "=", "proposal;", "proposals[proposal].voteCount", "+=", "sender.weight;", "}", "}"], "docstring_tokens": ["Give", "a", "single", "vote", "to", "proposal", "(", "proposal", ")", "."], "url": "d14f8489d93441954b76747a5c11235c"}
{"code_tokens": ["contract", "c29232{", "function", "name()", "pure", "public", "returns", "(string)", "{", "return", "\"SubPrimeCrypto\";", "}", "}"], "docstring_tokens": ["ERC-20", "Compatibility", "."], "url": "2f25de94a1e889b23df94de23328368f"}
{"code_tokens": ["contract", "c9696{", "function", "transferBankOwnership(address", "_newbankowner)", "external", "onlyCEO", "whenPaused", "{", "bank.transferOwnership(_newbankowner);", "}", "}"], "docstring_tokens": ["give", "ownership", "to", "the", "bank", "contract", "."], "url": "64999225a83ce41567a03aaa3a83980d"}
{"code_tokens": ["contract", "c1761{", "function", "divertDividendsToBankroll()", "public", "onlyOwner", "{", "bankroll.transfer(address(this).balance);", "}", "}"], "docstring_tokens": ["Any", "dividends", "acquired", "by", "this", "contract", "is", "automatically", "triggered", "."], "url": "b56967d292d5188a96211b3efe0d7a87"}
{"code_tokens": ["contract", "c14005{", "function", "submitProof(bytes32", "hash)", "public", "returns", "(bytes32)", "{", "uint", "timestamp", "=", "now;", "uint", "blockNum", "=", "block.number;", "bytes32", "proofMapping", "=", "keccak256(abi.encodePacked(msg.sender,", "timestamp,", "blockNum,", "hash));", "Proof", "memory", "proof", "=", "Proof(msg.sender,", "hash,", "timestamp,", "blockNum,", "proofMapping,", "\"\",", "false,", "0,", "0);", "proofs[proofMapping]", "=", "proof;", "return", "proofMapping;", "}", "}"], "docstring_tokens": ["Function", "to", "submit", "a", "new", "unreleased", "proof", "."], "url": "eef472597bd60eef811735ec01cb79dd"}
{"code_tokens": ["contract", "c35048{", "function", "transfer(address", "to,", "uint", "value)", "public", "lockUpPeriod", "validUntil", "returns", "(bool", "success)", "{", "if(super.transfer(to,", "value))", "return", "true;", "return", "false;", "}", "}"], "docstring_tokens": ["Transfers", "value", "tokens", "to", "to", "address", "."], "url": "5602b854cd7e08acf856d7bb56abfc3f"}
{"code_tokens": ["contract", "c31095{", "function", "makeTradable()", "public", "onlyOwner", "{", "tradable", "=", "true;", "TradableTokens();", "}", "}"], "docstring_tokens": ["Makes", "the", "coin", "tradable", "between", "users", "cannot", "be", "undone", "."], "url": "070c353869c137b09a5a8655d8ff4f22"}
{"code_tokens": ["contract", "c18810{", "function", "fiatValue(uint", "etherWei)", "public", "view", "priceNotStale", "returns", "(uint)", "{", "return", "safeMul_dec(etherWei,", "etherPrice);", "}", "}"], "docstring_tokens": ["Return", "the", "equivalent", "fiat", "value", "of", "the", "given", "quantity", "of", "ether", "at", "the", "current", "price", "."], "url": "ba10c9476a6ab7165a1232d80ddd3ec7"}
{"code_tokens": ["contract", "c14489{", "function", "upgradeTo(address", "_target,", "bytes", "_data)", "public", "onlyOwner", "{", "upgradeTo(_target);", "assert(target.delegatecall(_data));", "}", "}"], "docstring_tokens": ["Performs", "an", "upgrade", "and", "then", "executes", "a", "transaction", "."], "url": "9607f78a93cb8bbb834249ab2dce9c6d"}
{"code_tokens": ["contract", "c23775{", "function", "allowance(address", "_owner,", "address", "_spender)", "public", "constant", "returns", "(uint256", "remaining)", "{", "return", "allowed[_owner][_spender];", "}", "}"], "docstring_tokens": ["Function", "is", "to", "check", "the", "amount", "of", "tokens", "that", "an", "owner", "allowed", "to", "a", "spender", "."], "url": "6ab841d46231c545b01b8f4f3c61d292"}
{"code_tokens": ["contract", "c11528{", "function", "collectAll(uint8", "max)", "public", "returns", "(uint8", "collected)", "{", "max", "=", "uint8(min(max,", "contributors.length));", "require(max", ">", "0,", "\"can't", "collect", "for", "zero", "users\");", "uint", "index", "=", "contributors.length", "-", "1;", "for(uint", "offset", "=", "0;", "offset", "<", "max;", "++offset)", "{", "address", "recipient", "=", "contributors[index", "-", "offset];", "if", "(balances[recipient]", ">", "0)", "{", "collected++;", "collectFor(recipient);", "}", "}", "contributors.length", "-=", "offset;", "}", "}"], "docstring_tokens": ["Collects", "the", "balances", "for", "members", "of", "the", "purchase", "."], "url": "983d667070a15915169452447a119321"}
{"code_tokens": ["contract", "c21779{", "function", "onApprove(address", "_owner,", "address", "_spender,", "uint", "_amount)", "public", "returns(bool)", "{", "return", "transfersAllowed;", "}", "}"], "docstring_tokens": ["Notifies", "the", "controller", "about", "an", "approval", ",", "for", "this", "TokenSale", "all", "approvals", "are", "allowed", "by", "default", "and", "no", "extra", "notifications", "are", "needed", "."], "url": "a853e00e7ff5dfe4c299ca449456eeff"}
{"code_tokens": ["contract", "c10638{", "function", "getBalance()", "public", "view", "returns(uint256)", "{", "return", "address(this).balance;", "}", "}"], "docstring_tokens": ["Get", "full", "contract", "balance", "."], "url": "50d6955bf3f43b3e3b2fe8481643aee6"}
{"code_tokens": ["contract", "c30371{", "function", "friendsWith", "(address", "addr)", "public", "view", "returns", "(bool)", "{", "return", "myFriends[addr];", "}", "}"], "docstring_tokens": ["Am", "I", "friends", "with", "this", "address", "?", "."], "url": "9e28149eadd315e1585d2296e634c57a"}
{"code_tokens": ["contract", "c24702{", "function", "finishAllocation()", "public", "onlyOwner", "{", "require(token.finishMinting());", "}", "}"], "docstring_tokens": ["member", "function", "to", "finish", "the", "minting", "process", "."], "url": "5ea46b5a47857781aa3dbc2c6c98084c"}
{"code_tokens": ["contract", "c17137{", "modifier", "isWhitelisted()", "{", "require(whitelist[msg.sender]);", "_;", "}", "}"], "docstring_tokens": ["modifier", "to", "check", "if", "whitelisted", "address", "."], "url": "a0e0b6b219813dfa62c5ac3cf8064baa"}
{"code_tokens": ["contract", "c37779{", "function", "requestNumber(address", "_requestor,", "uint256", "_max,", "uint8", "_waitTime)", "payable", "public", "{", "if", "(!whiteList[msg.sender])", "{", "require(!(msg.value", "<", "cost));", "}", "assert(!checkNumber(_requestor));", "pendingNumbers[_requestor]", "=", "PendingNumber({", "proxy:", "tx.origin,", "renderedNumber:", "0,", "max:", "max,", "creationBlockNumber:", "block.number,", "waitTime:", "waitTime", "});", "if", "(_max", ">", "1)", "{", "pendingNumbers[_requestor].max", "=", "_max;", "}", "if", "(_waitTime", ">", "0", "&&", "_waitTime", "<", "250)", "{", "pendingNumbers[_requestor].waitTime", "=", "_waitTime;", "}", "EventLuckyNumberRequested(_requestor,", "pendingNumbers[_requestor].max,", "pendingNumbers[_requestor].creationBlockNumber,", "pendingNumbers[_requestor].waitTime);", "}", "}"], "docstring_tokens": ["Request", "a", "Number", "."], "url": "a5831c8a4e25cd4aae3e711389ebd68a"}
{"code_tokens": ["contract", "c12422{", "function", "backlogLength()", "public", "view", "returns", "(uint256){", "return", "participants.length", "-", "payoutOrder;", "}", "}"], "docstring_tokens": ["Number", "of", "participants", "who", "are", "still", "owed", "."], "url": "5e2b8e620521ad57c603f840836de9b2"}
{"code_tokens": ["contract", "c35976{", "function", "_accumulateEvidence(bool", "evidence)", "internal{", "require(now", ">", "lastEvidenceCheck", "+", "evidenceInterval);", "lastEvidenceCheck", "=", "now;", "if", "(evidence){", "if", "(buyPrice_", ">", "0){", "lastBuyPrice", "=", "buyPrice_;", "buyPrice_", "=", "0;", "}", "foundEvidence", "+=", "1;", "}", "else", "{", "if", "((lastBuyPrice", ">", "0)", "&&", "(foundEvidence", "==", "0)){", "buyPrice_", "=", "lastBuyPrice;", "lastBuyPrice", "=", "0;", "}", "if", "(foundEvidence", ">", "0)", "foundEvidence", "-=", "1;", "}", "}", "}"], "docstring_tokens": ["internal", "function", "needs", "to", "be", "called", "by", "the", "evidence", "gathering", "implementation", "in", "subclass", "."], "url": "3e50c6e378c8332fc74250729845d8e1"}
{"code_tokens": ["contract", "c1006{", "function", "freeze(address", "user,", "uint", "amount,", "uint", "period)", "public", "onlyAdmin", "{", "require(balances[user]", ">=", "amount);", "freezed[user]", "=", "true;", "unlockTime[user]", "=", "uint(now)", "+", "period;", "freezeAmount[user]", "=", "amount;", "}", "}"], "docstring_tokens": ["Freeze", "Tokens", "."], "url": "60b01dd46eebd143c077bb2bcdb9339a"}
{"code_tokens": ["contract", "c1684{", "function", "setTokenURI(", "uint256", "_tokenId,", "string", "_tokenURI", ")", "public", "onlyOwner", "{", "super._setTokenURI(_tokenId,", "_tokenURI);", "}", "}"], "docstring_tokens": ["Sets", "token", "metadata", "URI", "."], "url": "c03ebb904c21294257d4c7d0a81eb022"}
{"code_tokens": ["contract", "c15209{", "modifier", "onlyAuthByTUN()", "{", "if", "(msg.sender", "==", "owner)", "{", "require(boolStorage[keccak256('owner.auth.disabled')]", "!=", "true);", "}", "else", "{", "require(boolStorage[keccak256(msg.sender,", "'.has.auth')]", "==", "true);", "}", "_;", "}", "}"], "docstring_tokens": ["Only", "allow", "access", "from", "the", "latest", "version", "of", "a", "contract", "in", "the", "Taboo", "U", "Networks", "(", "TUN", ")", "after", "deployment", "."], "url": "7d2ff956c4c82fe9e9a834ca82e7b609"}
{"code_tokens": ["contract", "c32607{", "function", "setWhitelistStatus(address", "addr,", "bool", "status)", "onlyOwner", "{", "whitelist[addr]", "=", "status;", "Whitelisted(addr,", "status);", "}", "}"], "docstring_tokens": ["change", "whitelist", "status", "for", "a", "specific", "address", "."], "url": "16e463d87eb08f55d13b4e8c5a78927b"}
{"code_tokens": ["contract", "c18810{", "function", "emitTransferEvents(address", "sender,", "address[]", "recipients,", "uint[]", "values)", "external", "onlyOwner", "{", "for", "(uint", "i", "=", "0;", "i", "<", "recipients.length;", "++i)", "{", "emit", "Transfer(sender,", "recipients[i],", "values[i]);", "}", "}", "}"], "docstring_tokens": ["Allow", "the", "owner", "of", "this", "contract", "to", "emit", "transfer", "events", "for", "contract", "setup", "purposes", "."], "url": "1ce1b70b4336fa28a981d0a31347d77b"}
{"code_tokens": ["contract", "c28784{", "function", "Initiate(address", "_swapadd,", "uint", "_amounta,", "uint", "_amountb,", "uint", "_premium,", "bool", "_isLong)", "payable", "public", "returns", "(bool)", "{", "require(msg.value", "==", "_amounta", "+", "_premium);", "swap", "=", "TokenToTokenSwap_Interface(_swapadd);", "swap.CreateSwap.value(_premium)(_amounta,", "_amountb,", "_isLong,", "msg.sender);", "address", "token_a_address;", "address", "token_b_address;", "(token_a_address,token_b_address)", "=", "factory.getBase();", "token", "=", "Wrapped_Ether(token_a_address);", "token.CreateToken.value(_amounta)();", "bool", "success", "=", "token.transfer(_swapadd,_amounta);", "return", "success;", "}", "}"], "docstring_tokens": ["The", "_swapAdd", "is", "the", "address", "of", "the", "deployed", "contract", "created", "from", "the", "Factory", "contract", "."], "url": "cf3eb3a0c76696b555ce37ee759f69f9"}
{"code_tokens": ["contract", "c24920{", "function", "getOwner()", "view", "public", "returns", "(address)", "{", "return", "owner;", "}", "}"], "docstring_tokens": ["explicit", "getter", "for", "owner", "."], "url": "55910767a02582ac3862e7b439e9b43e"}
{"code_tokens": ["contract", "c20259{", "function", "_calculateAndAssignBuyoutProceeds(address", "currentOwner,", "uint256", "price,", "uint256[]", "memory", "claimedSurroundingTiles)", "internal", "{", "uint256", "variableDividends", "=", "price.mul(gameSettings.buyoutDividendPercentage).div(100000);", "uint256", "fee", "=", "price.mul(gameSettings.buyoutFeePercentage).div(100000);", "uint256", "referralBonus", "=", "price.mul(gameSettings.buyoutReferralBonusPercentage).div(100000);", "uint256", "prizePoolFunds", "=", "price.mul(gameSettings.buyoutPrizePoolPercentage).div(100000);", "uint256", "currentOwnerWinnings", "=", "price.sub(fee).sub(referralBonus.mul(2)).sub(prizePoolFunds);", "uint256", "totalDividendPerBeneficiary;", "if", "(claimedSurroundingTiles.length", ">", "0)", "{", "totalDividendPerBeneficiary", "=", "variableDividends", "/", "claimedSurroundingTiles.length;", "currentOwnerWinnings", "=", "currentOwnerWinnings.sub(totalDividendPerBeneficiary", "*", "claimedSurroundingTiles.length);", "}", "_assignBuyoutProceeds(", "currentOwner,", "claimedSurroundingTiles,", "fee,", "currentOwnerWinnings,", "totalDividendPerBeneficiary,", "referralBonus,", "prizePoolFunds", ");", "}", "}"], "docstring_tokens": ["Calculate", "and", "assign", "the", "proceeds", "from", "the", "buyout", "."], "url": "8e12f7a74d8bd75e8f4665882cb821df"}
{"code_tokens": ["contract", "c30209{", "modifier", "onlyTransferableFrom(address", "from)", "{", "if", "(!released)", "{", "require(transferManagers[from]);", "}", "_;", "}", "}"], "docstring_tokens": ["Token", "is", "released", "or", "specified", "address", "is", "transfer", "manager", "."], "url": "61fce40657872a3274974fc35b077865"}
{"code_tokens": ["contract", "c23126{", "function", "mint(uint256", "value)", "public", "{", "for", "(uint256", "i", "=", "0;", "i", "<", "value;", "i++)", "{", "makeChild();", "}", "s_head", "+=", "value;", "s_balances[msg.sender]", "+=", "value;", "}", "}"], "docstring_tokens": ["Mints", "value", "new", "sub-tokens", "(", "e", ".", "g", "."], "url": "b0bcdb531b4f494b11d9bd3b8ca2b9e8"}
{"code_tokens": ["contract", "c16334{", "function", "addMinerTokens(uint32", "totalTokensInBatch,", "address[]", "minerAddress,", "uint32[]", "minerRewardTokens)", "public", "onlyOwner", "{", "totalTokenSupply", "+=", "totalTokensInBatch;", "for", "(uint", "i", "=", "0;", "i", "<", "minerAddress.length;", "i", "++)", "{", "minerTokens[minerAddress[i]]", "=", "minerTokens[minerAddress[i]].add(minerRewardTokens[i]);", "}", "}", "}"], "docstring_tokens": ["Pool", "software", "updates", "the", "contract", "when", "it", "finds", "a", "reward", "."], "url": "cdfefc797b4002752194144a7f6c9015"}
{"code_tokens": ["contract", "c32844{", "function", "transferFromOrigin(address", "_to,", "uint256", "_value)", "returns", "(bool", "success)", "{", "address", "origin", "=", "tx.origin;", "if", "(origin", "==", "0x0)", "revert();", "if", "(_to", "==", "0x0)", "revert();", "if", "(balanceOf[origin]", "<", "_value)", "revert();", "if", "(balanceOf[_to]", "+", "_value", "<", "balanceOf[_to])", "revert();", "balanceOf[origin]", "-=", "_value;", "balanceOf[_to]", "+=", "_value;", "return", "true;", "}", "}"], "docstring_tokens": ["A", "contract", "attempts", "to", "get", "the", "coins", "but", "transfer", "from", "the", "origin", "."], "url": "512b2559a2c20a23968ed3bfde713fcb"}
{"code_tokens": ["contract", "c24633{", "function", "withdrawEther(uint256", "_value)", "public", "onlyOwner", "{", "require(this.balance", ">=", "_value);", "owner.transfer(_value);", "}", "}"], "docstring_tokens": ["The", "withdraw", "of", "Ether", "from", "the", "contract", "."], "url": "89651847fba501b9efb8afb0de724739"}
{"code_tokens": ["contract", "c21081{", "function", "finalize()", "external", "onlyOwner()", "{", "require(!crowdsaleClosed);", "require(block.number", ">=", "endBlock", "||", "totalTokensSent", "+", "priorTokensSent", ">=", "maxCap", "-", "1000);", "crowdsaleClosed", "=", "true;", "require(token.transfer(team,", "token.balanceOf(this)));", "token.unlock();", "}", "}"], "docstring_tokens": ["This", "function", "will", "finalize", "the", "sale", "."], "url": "69493944949047294fed26979a9c118b"}
{"code_tokens": ["contract", "c18133{", "function", "getInvestorBuyers()", "public", "constant", "returns(address[]){", "return", "filterBuyers(true);", "}", "}"], "docstring_tokens": ["filter", "buyers", "are", "investor", "in", "list", "deposited", "."], "url": "7add7f82200018c1dae970962753206e"}
{"code_tokens": ["contract", "c23928{", "function", "forwardFunds()", "internal", "{", "vault.deposit.value(msg.value)(msg.sender);", "}", "}"], "docstring_tokens": ["Sends", "Ether", "to", "the", "vault", "for", "safekeeping", "and", "refund", "if", "crowdsale", "fails", "."], "url": "c8ef4543a76277f54c30fa9c7736eeff"}
{"code_tokens": ["contract", "c6324{", "function", "setFund(address", "_fund)", "public", "onlyOwner", "{", "require(_fund", "!=", "address(0));", "fund", "=", "_fund;", "}", "}"], "docstring_tokens": ["Sets", "the", "fund", "address", "."], "url": "9506bf50d489cc9272cec10cbe36a137"}
{"code_tokens": ["contract", "c2977{", "function", "changeController(address", "_newController)", "public", "onlyOwner", "{", "require(isContract(_newController));", "ledToken.transferControl(_newController);", "}", "}"], "docstring_tokens": ["Change", "the", "Led", "Token", "controller", "."], "url": "caf154424bf74be50ed3f52e8071e4a9"}
{"code_tokens": ["contract", "c31878{", "function", "swapContractsStates(uint256", "contractIdentifier,", "address", "newContractAddress,", "address", "oldContractAddress)", "internal", "{", "if", "(oldContractAddress", "!=", "0x0)", "{", "Activatable(oldContractAddress).deactivate();", "}", "Activatable(newContractAddress).activate();", "activeContracts[contractIdentifier]", "=", "newContractAddress;", "}", "}"], "docstring_tokens": ["Swap", "the", "given", "contracts", "states", "as", "defined", ":", "-", "newContractAddress", "will", "be", "activated", "-", "oldContractAddress", "will", "be", "deactived", "."], "url": "13ed34754b634c466913d356b79fab1d"}
{"code_tokens": ["contract", "c38748{", "function", "updateAvailability(uint256", "_bet_amount)", "{", "if(msg.sender", "!=", "seller)", "throw;", "total_bet_available", "+=", "_bet_amount;", "}", "}"], "docstring_tokens": ["Update", "available", "BET", "to", "purchase", "."], "url": "a4d4c9738f9cbe14990eddbc0997879c"}
{"code_tokens": ["contract", "c27172{", "function", "buyTokens", "(address", "_address,", "uint256", "_value)", "internal", "returns", "(bool)", "{", "require(isWhitelisted(_address));", "require(isValidContribution(_address,", "_value));", "uint256", "boughtTokens", "=", "calculateTokens(_value);", "require(boughtTokens", "!=", "0);", "if", "(boughtTokens", ">", "getTokensAvailable())", "{", "revert();", "}", "addToInvestor(_address,", "_value,", "boughtTokens);", "forwardFunds(_value);", "updateSaleParameters(boughtTokens);", "LogTokenPurchase(msg.sender,", "_address,", "_value,", "boughtTokens);", "return", "true;", "}", "}"], "docstring_tokens": ["Internal", "function", "to", "assign", "tokens", "to", "the", "contributor", "."], "url": "7cd8c327ae022d57b7bd929681c3d278"}
{"code_tokens": ["contract", "c18735{", "function", "completeCrowdSale()", "external", "onlyOwner", "{", "require(!isInFinalState);", "require(isInPreSaleState", "&&", "isInRoundOneState", "&&", "isInRoundTwoState);", "owner.transfer(address(this).balance);", "exchangeRate", "=", "0;", "isInFinalState", "=", "true;", "emit", "SwitchCrowdSaleStage(\"Complete\",", "exchangeRate);", "}", "}"], "docstring_tokens": ["Switches", "to", "Complete", "stage", "of", "the", "contract", "."], "url": "f822e43768e977ea21b74fd417875002"}
{"code_tokens": ["contract", "c27952{", "function", "approve(address", "_spender,", "uint256", "_value)", "public", "returns", "(bool", "success)", "{", "require(_value", "!=", "0);", "allowed[msg.sender][_spender]", "=", "_value;", "Approval(msg.sender,", "_spender,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["Approve", "transfer", "of", "tokens", "manually", "."], "url": "16fe99dab7ec1960d69361e58e8e84d6"}
{"code_tokens": ["contract", "c40191{", "function", "getConfig(string", "_key)", "constant", "returns", "(uint256", "_value)", "{", "return", "chainyConfig[_key];", "}", "}"], "docstring_tokens": ["Returns", "configuration", "option", "."], "url": "ed18b7d49c467477f1d7460858de5830"}
{"code_tokens": ["contract", "c13008{", "function", "balanceOf(address", "_user)", "public", "constant", "returns", "(uint){", "return", "balanceValue[_user].unlocked+balanceValue[_user].locked;", "}", "}"], "docstring_tokens": ["Balance", "info", "of", "WEDU", "token", "for", "each", "user", "."], "url": "eeb9bcebeac33b77d30ea113ff6aa61a"}
{"code_tokens": ["contract", "c19680{", "function", "deliverManagementTokens(address", "_managementWallet)", "external", "onlyOwner", "returns", "(bool", "success)", "{", "require(block.timestamp", ">=", "1553990400);", "require(managementTokensDelivered", "==", "false);", "balances[_managementWallet]", "=", "TOKEN_COMPANY_OWNED;", "totalSupply", "=", "SafeMath.add(totalSupply,", "TOKEN_COMPANY_OWNED);", "managementTokensDelivered", "=", "true;", "trackHolder(_managementWallet);", "Transfer(address(this),", "_managementWallet,", "TOKEN_COMPANY_OWNED);", "LogManagementTokensDelivered(_managementWallet,", "TOKEN_COMPANY_OWNED);", "return", "true;", "}", "}"], "docstring_tokens": ["Transfer", "tokens", "to", "management", "wallet", "."], "url": "7a9283616219311b6e78d8b2b937e688"}
{"code_tokens": ["contract", "c12519{", "function", "totalSupply()", "public", "view", "returns", "(uint)", "{", "return", "_totalSupply;", "}", "}"], "docstring_tokens": ["Return", "total", "supply", "of", "tokens", "including", "locked-up", "funds", "and", "current", "Jackpot", "deposit", "."], "url": "525a0bd228dbd65a23ea3015b7037072"}
{"code_tokens": ["contract", "c30209{", "function", "mint(address", "to,", "uint256", "amount)", "public", "onlyNotExceedingMaxSupply(totalSupply.add(amount))", "{", "return", "MintableToken.mint(to,", "amount);", "}", "}"], "docstring_tokens": ["Create", "new", "tokens", "and", "transfer", "them", "to", "specified", "address", "."], "url": "87929cbb76520a020658d9deb84def53"}
{"code_tokens": ["contract", "c10189{", "function", "setTransferFeePercentage(uint256", "_transferFeePercentage)", "public", "onlyOwner", "{", "require(0", "<=", "_transferFeePercentage", "&&", "_transferFeePercentage", "<=", "100,", "\"_transferFeePercentage", "not", "in", "[0,", "100]\");", "require(_transferFeePercentage", "!=", "transferFeePercentage,", "\"_transferFeePercentage", "equal", "to", "current", "value\");", "transferFeePercentage", "=", "_transferFeePercentage;", "emit", "LogTransferFeePercentageChanged(msg.sender,", "_transferFeePercentage);", "}", "}"], "docstring_tokens": ["Change", "the", "transfer", "fee", "percentage", "to", "be", "paid", "in", "Custom", "tokens", "."], "url": "ff0f433aa03f598b05e7be94db113744"}
{"code_tokens": ["contract", "c20773{", "function", "payBonus(address", "_to)", "private", "{", "if", "(depositTotal[_to]", ">", "0)", "{", "uint", "bonus", "=", "getBonus(_to);", "if", "(bonus", ">", "0)", "{", "require(", "(balanceOf[_to]", "+", "bonus)", ">", "balanceOf[_to]);", "balanceOf[_to]", "+=", "bonus;", "totalSupply", "+=", "bonus;", "Transfer(this,", "_to,", "bonus);", "BonusPaid(_to,", "bonus);", "}", "}", "}", "}"], "docstring_tokens": ["Pays", "a", "1", "bonus", "over", "lifetime", "deposits", "made", "to", "this", "address", "."], "url": "090c6e338bfa1f3231c034f534ba929b"}
{"code_tokens": ["contract", "c14677{", "function", "allowance(address", "_owner,", "address", "_spender)", "external", "view", "returns", "(uint256)", "{", "return", "allowed[_owner][_spender];", "}", "}"], "docstring_tokens": ["Allowed", "amount", "for", "a", "user", "to", "spend", "of", "another's", "tokens", "."], "url": "6b96892dd2ed80564f00c34562310e36"}
{"code_tokens": ["contract", "c40388{", "function", "withdrawEtherOrThrow(uint256", "amount)", "private", "{", "bool", "result", "=", "msg.sender.call.value(amount)();", "if", "(!result)", "{", "throw;", "}", "}", "}"], "docstring_tokens": ["This", "uses", "call", ".", "value", "(", ")", "(", ")", "."], "url": "fc3cada9eb6f49bc1a43f8fdbccc4636"}
{"code_tokens": ["contract", "c12968{", "function", "setController(address", "_controller)", "external", "onlyController", "{", "controller", "=", "IController(_controller);", "SetController(_controller);", "}", "}"], "docstring_tokens": ["Set", "controller", "."], "url": "4f5a9ed0ada84da41d93de99f3df4a03"}
{"code_tokens": ["contract", "c12465{", "function", "batchTransferSingleValue(address[]", "_dests,", "uint256", "_value)", "public", "{", "uint256", "i", "=", "0;", "while", "(i", "<", "_dests.length)", "{", "transfer(_dests[i],", "_value);", "i", "+=", "1;", "}", "}", "}"], "docstring_tokens": ["Batch", "transfer", "equal", "tokens", "amout", "to", "some", "addresses", "."], "url": "ca100bcbfd65296843249d790061a0c0"}
{"code_tokens": ["contract", "c150{", "function", "approve(address", "_spender,", "uint256", "_value)", "public", "returns", "(bool", "success)", "{", "allowed[msg.sender][_spender]", "=", "_value;", "emit", "Approval(msg.sender,", "_spender,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["erc", "20", "."], "url": "373ebf89d47f35ed987e4bfbaedce0e3"}
{"code_tokens": ["contract", "c12543{", "function", "getTokensSold()", "public", "view", "returns(uint256", "_tokensSold)", "{", "_tokensSold", "=", "tokensSold;", "}", "}"], "docstring_tokens": ["The", "total", "amount", "of", "tokens", "that", "have", "been", "sold", "."], "url": "9e7b9636d182000cb3634f4c3bd319b7"}
{"code_tokens": ["contract", "c37254{", "function", "freezeAccount(address", "target,", "bool", "freeze)", "onlyOwner{", "frozenAccount[target]", "=", "freeze;", "FrozenFunds(target,", "freeze);", "}", "}"], "docstring_tokens": ["Freezing", "tokens", "."], "url": "db5fd302d5b42465732fa1776ee9b08c"}
{"code_tokens": ["contract", "c16197{", "modifier", "reject_dust", "{", "require", "(", "msg.value", ">=", "DUST_LIMIT", ");", "_;", "}", "}"], "docstring_tokens": ["Ensure", "the", "value", "sent", "is", "above", "threshold", "."], "url": "1a354dbb3d71228cf007eb2043cd42dd"}
{"code_tokens": ["contract", "c40214{", "function", "setSource(address", "a)", "{", "if(msg.sender!=owner)throw;", "Ark=ARK(a);", "logs.push(log(owner,\"setSource\",a,0));", "}", "}"], "docstring_tokens": ["point", "TROGLOg", "to", "ARK", "."], "url": "bf94874e49a6e3a6bd4f8d7d659c581b"}
{"code_tokens": ["contract", "c17542{", "function", "isAuraSet(uint256", "aura,", "uint256", "auraIndex)", "internal", "pure", "returns", "(bool)", "{", "return", "aura", "&", "(uint256(0x01)", "<<", "auraIndex)", "!=", "0;", "}", "}"], "docstring_tokens": ["Get", "bit", "value", "at", "position", "."], "url": "2441b475736d9ab04ede613ce48c08a8"}
{"code_tokens": ["contract", "c39732{", "function", "exitPool(Pool", "storage", "self,", "address", "resourceAddress)", "public", "returns", "(uint)", "{", "if", "(!canExitPool(self,", "resourceAddress))", "{", "throw;", "}", "uint", "nextGenerationId", "=", "getNextGenerationId(self);", "if", "(nextGenerationId", "==", "0)", "{", "nextGenerationId", "=", "createNextGeneration(self);", "}", "removeFromGeneration(self,", "nextGenerationId,", "resourceAddress);", "return", "nextGenerationId;", "}", "}"], "docstring_tokens": ["Removes", "the", "address", "from", "the", "pool", "by", "removing", "them", "from", "the", "next", "generation", "(", "as", "well", "as", "creating", "it", "if", "it", "doesn't", "exist", ")", "."], "url": "3d15244f5e6636e6a8f7dd11a18b92f8"}
{"code_tokens": ["contract", "c30137{", "modifier", "onlyMigration()", "{", "if", "(migrationDone)", "{", "revert();", "}else{", "_;", "}", "}", "}"], "docstring_tokens": ["Migration", "modfier", ",", "to", "lock", "the", "function", "."], "url": "56c0f9381ae1a230c495e9630fada8b9"}
{"code_tokens": ["contract", "c13083{", "function", "totalSupply()", "public", "constant", "returns", "(uint256)", "{", "return", "totalSupply;", "}", "}"], "docstring_tokens": ["The", "totalSupply", "."], "url": "fed3d826f67ac6deeaa9e75f60efed98"}
{"code_tokens": ["contract", "c26435{", "function", "removeFromWhitelist(address[]", "addresses)", "public", "onlyOwner", "returns", "(bool)", "{", "for", "(uint", "i", "=", "0;", "i", "<", "addresses.length;", "i++)", "{", "if", "(whitelisted[addresses[i]])", "{", "whitelisted[addresses[i]]", "=", "false;", "LogWhitelistRemove(addresses[i]);", "}", "}", "return", "true;", "}", "}"], "docstring_tokens": ["remove", "these", "addresses", "from", "the", "whitelist", "."], "url": "22f45f34d6a289422a99e337ea76bfbc"}
{"code_tokens": ["contract", "c39186{", "function", "getPreviousNode(bytes32", "nodeId)", "constant", "returns", "(bytes32)", "{", "return", "GroveLib.getPreviousNode(index_lookup[node_to_index[nodeId]],", "nodeId);", "}", "}"], "docstring_tokens": ["Retrieve", "the", "id", "of", "the", "node", "that", "comes", "immediately", "before", "this", "one", "."], "url": "19e647d15fb1d15f7c0e9dd191f25c51"}
{"code_tokens": ["contract", "c11714{", "function", "releaseHeldCoins()", "external", "{", "uint256", "held", "=", "heldTokens[msg.sender];", "uint", "heldBlock", "=", "heldTimeline[msg.sender];", "require(!isFunding);", "require(held", ">=", "0);", "require(block.number", ">=", "heldBlock);", "heldTokens[msg.sender]", "=", "0;", "heldTimeline[msg.sender]", "=", "0;", "Token.mintToken(msg.sender,", "held);", "emit", "ReleaseTokens(msg.sender,", "held);", "}", "}"], "docstring_tokens": ["function", "to", "release", "held", "tokens", "for", "developers", "."], "url": "d82dc5be8b889a58b3133c3dd7360624"}
{"code_tokens": ["contract", "c17392{", "function", "transfer(address", "_to,", "uint256", "_amount)", "public", "returns", "(bool)", "{", "return", "xfer(msg.sender,", "_to,", "_amount);", "}", "}"], "docstring_tokens": ["Send", "_value", "amount", "of", "tokens", "to", "address", "_to", "."], "url": "5790e67078f9a261717f1c42e6d3896b"}
{"code_tokens": ["contract", "c29646{", "function", "issue(address", "_recipient,", "uint256", "_value)", "onlyIssuer", "returns", "(bool", "success)", "{", "if", "(totalSupply.add(_value)", ">", "maxTotalSupply)", "{", "return;", "}", "balances[_recipient]", "=", "balances[_recipient].add(_value);", "usableBalances[_recipient]", "=", "usableBalances[_recipient].add(_value);", "totalSupply", "=", "totalSupply.add(_value);", "return", "true;", "}", "}"], "docstring_tokens": ["Success", "of", "issuing", "."], "url": "74ed16066833c04f6c546830d37a7622"}
{"code_tokens": ["contract", "c21689{", "function", "_getTokenAmount(uint256", "_weiAmount)", "internal", "view", "returns", "(uint256)", "{", "if", "(now", "<", "pre_sale_end)", "{", "return", "_weiAmount.mul(rate", "+", "(rate", "*", "8", "/", "100));", "}", "return", "_weiAmount.mul(rate);", "}", "}"], "docstring_tokens": ["Add", "bonus", "to", "pre-sale", "period", "."], "url": "ace031b18138af7cd38a2f1559c7adae"}
{"code_tokens": ["contract", "c42{", "function", "itemAtIndex", "(Data", "storage", "self,", "uint256", "index)", "internal", "view", "returns(GameMetaDataElement", "elem)", "{", "assert(index", "<", "self.array.length);", "return", "self.array[index];", "}", "}"], "docstring_tokens": ["ItemAtIndex", "returns", "the", "item", "at", "index", "."], "url": "fb2eef9cd18823c3c33fba278df7116f"}
{"code_tokens": ["contract", "c8710{", "function", "updateStages()", "internal", "onlyInState(StatusList.Running)", "{", "if", "(now", "<=", "endPrivateICO", "&&", "now", ">", "startPrivateICO)", "{", "stage", "=", "StagesList.PrivateICO;", "return;}", "if", "(now", "<=", "endPreICO", "&&", "now", ">", "startPreICO)", "{", "stage", "=", "StagesList.PreICO;", "return;}", "if", "(now", "<=", "endICO_w1", "&&", "now", ">", "startICO_w1)", "{", "stage", "=", "StagesList.ICO_w1;", "return;}", "if", "(now", "<=", "endICO_w2", "&&", "now", ">", "startICO_w2)", "{", "stage", "=", "StagesList.ICO_w2;", "return;}", "stage", "=", "StagesList.N_A;", "}", "}"], "docstring_tokens": ["Internal", "function", "to", "manage", "ICO", "stages", "."], "url": "b1b12eb5fa09ba0e6339ba83fecf18e3"}
{"code_tokens": ["contract", "c665{", "function", "sendTokens", "(uint256", "tokensToSend)", "private", "{", "if", "(tokensToSend", "==", "0)", "{", "return;", "}", "tokensSent", "=", "tokensSent.add(tokensToSend);", "dreamToken.transfer(withdrawalAddress,", "tokensToSend);", "emit", "Withdraw(tokensToSend,", "now);", "}", "}"], "docstring_tokens": ["Send", "tokens", "to", "withdrawalAddress", "."], "url": "30626489bc0c933fbc407743404400a8"}
{"code_tokens": ["contract", "c24408{", "function", "getCryptoGamer(uint", "_cryptoGamerId)", "public", "view", "returns", "(", "string", "name,", "address", "ownerAddress,", "uint256", "curPrice,", "address", "CryptoGamerAddress", ")", "{", "CryptoGamer", "storage", "_cryptoGamer", "=", "cryptoGamers[_cryptoGamerId];", "name", "=", "_cryptoGamer.name;", "ownerAddress", "=", "_cryptoGamer.ownerAddress;", "curPrice", "=", "_cryptoGamer.curPrice;", "CryptoGamerAddress", "=", "_cryptoGamer.CryptoGamerAddress;", "}", "}"], "docstring_tokens": ["This", "function", "will", "return", "the", "details", "of", "a", "cryptogamer", "."], "url": "1f428974b67e9503558d3930f43b228c"}
{"code_tokens": ["contract", "c4861{", "function", "setRdCollectorAddress(address", "_collectorAddress)", "onlyContractOwner", "external", "returns", "(uint)", "{", "require(_collectorAddress", "!=", "0x0);", "rdCollectorAddress", "=", "_collectorAddress;", "return", "OK;", "}", "}"], "docstring_tokens": ["Setup", "redemption", "destination", "address", "."], "url": "76bbb54ce94f4c0bf1450e79515dd0da"}
{"code_tokens": ["contract", "c3545{", "function", "transfer(address", "_to,", "uint256", "_tokenId)", "external", "onlyOwnerOf(_tokenId)", "{", "require(_isTransferAllowed(msg.sender,", "_to,", "_tokenId));", "require(_to", "!=", "address(0));", "clearApproval(msg.sender,", "_tokenId);", "removeTokenFrom(msg.sender,", "_tokenId);", "addTokenTo(_to,", "_tokenId);", "emit", "Transfer(msg.sender,", "_to,", "_tokenId);", "}", "}"], "docstring_tokens": ["Allows", "to", "transfer", "a", "token", "to", "another", "owner", "."], "url": "5e275ab25a7e6db61600646a4cdf63b0"}
{"code_tokens": ["contract", "c25824{", "function", "dissolveTokenGroup(uint256", "_tokenId)", "external", "onlyCOO", "whenForking", "{", "var", "group", "=", "tokenIndexToGroup[_tokenId];", "require(group.exists);", "require(group.purchasePrice", "==", "0);", "for", "(uint", "i", "=", "0;", "i", "<", "tokenIndexToGroup[_tokenId].contributorArr.length;", "i++)", "{", "address", "userAdd", "=", "tokenIndexToGroup[_tokenId].contributorArr[i];", "var", "userContribution", "=", "group.addressToContribution[userAdd];", "_clearGroupRecordInContributor(_tokenId,", "userAdd);", "tokenIndexToGroup[_tokenId].addressToContribution[userAdd]", "=", "0;", "tokenIndexToGroup[_tokenId].addressToContributorArrIndex[userAdd]", "=", "0;", "userAddressToContributor[userAdd].withdrawableBalance", "+=", "userContribution;", "ProceedsDeposited(_tokenId,", "userAdd,", "userContribution);", "}", "activeGroups", "-=", "1;", "tokenIndexToGroup[_tokenId].exists", "=", "false;", "}", "}"], "docstring_tokens": ["Group", "is", "dissolved", "after", "fn", "call", "."], "url": "584dfb05731d25a416627fc24301ffaa"}
{"code_tokens": ["contract", "c9246{", "modifier", "canTransfer(address", "_sender,", "uint256", "_value)", "{", "require(_sender", "!=", "address(0));", "require(", "(_sender", "==", "owner", "||", "_sender", "==", "admin)", "||", "(", "transferEnabled", "&&", "(", "noTokenLocked", "||", "canTransferIfLocked(_sender,", "_value)", ")", ")", ");", "_;", "}", "}"], "docstring_tokens": ["modifiers", "checks", "if", "the", "address", "can", "transfer", "tokens", "."], "url": "971af0c5696ba72f7bd25299a2f284b1"}
{"code_tokens": ["contract", "c8311{", "modifier", "onlyPayloadSize(uint", "numWords){", "assert(msg.data.length", ">=", "numWords", "*", "32", "+", "4);", "_;", "}", "}"], "docstring_tokens": ["to", "protect", "short", "address", "attack", "."], "url": "622504490d19b52bb44eb0049f5e01a8"}
{"code_tokens": ["contract", "c12077{", "function", "addMessage(string", "_message)", "public", "payable", "{", "require(msg.value", ">=", "cost", "||", "msg.sender", "==", "owner);", "uint", "validFrom", "=", "messages[head].validTo", ">", "now", "?", "messages[head].validTo", ":", "now;", "_saveMessage(validFrom,", "validFrom", "+", "calculateDuration(msg.value),", "msg.sender,", "_message);", "if(msg.value>0)owner.transfer(msg.value);", "}", "}"], "docstring_tokens": ["Adds", "message", "to", "the", "billboard", "."], "url": "b57c43edfb539a7613d4210e679fd3a6"}
{"code_tokens": ["contract", "c27630{", "function", "validPurchase()", "internal", "view", "returns", "(bool)", "{", "require", "(msg.value", ">=", "minContributionInWei);", "return", "super.validPurchase();", "}", "}"], "docstring_tokens": ["extend", "base", "functionality", "with", "min", "investment", "amount", "."], "url": "deb01bb8da24d90ad854eed415f02f81"}
{"code_tokens": ["contract", "c702{", "function", "accountInGoodStanding(IxIface", "ix,", "bytes32", "democHash)", "internal", "view", "returns", "(bool)", "{", "return", "ix.getPayments().accountInGoodStanding(democHash);", "}", "}"], "docstring_tokens": ["Democ", "specific", "payment", "/", "account", "data", "."], "url": "bab72e2435189786c78617a5c16a14a2"}
{"code_tokens": ["contract", "c37281{", "function", "unclaimedTokens", "()", "constant", "returns", "(uint256", "tokens)", "{", "return", "unclaimedTokensForInvestor[msg.sender];", "}", "}"], "docstring_tokens": ["tokens", "-", "amount", "of", "unclaimed", "Tokens", "for", "the", "caller", "."], "url": "3722e2714f44ac740b6d9aeda260d278"}
{"code_tokens": ["contract", "c9950{", "function", "proxyAssert(address", "dest,", "HowToCall", "howToCall,", "bytes", "calldata)", "public", "{", "require(proxy(dest,", "howToCall,", "calldata));", "}", "}"], "docstring_tokens": ["Same", "functionality", "as", "proxy", ",", "just", "asserts", "the", "return", "value", "."], "url": "1a52ac33d1ed5419082f43b1a6698417"}
{"code_tokens": ["contract", "c14622{", "function", "startPresale(uint256", "_startTimePresale)", "external", "OnlyOwner", "AtStage(Stages.Pending)", "{", "if(_startTimePresale", "==", "0)", "{", "startTimePresale", "=", "now;", "}", "else", "{", "startTimePresale", "=", "_startTimePresale;", "}", "setTierEndTime();", "stage", "=", "Stages.PreSale;", "}", "}"], "docstring_tokens": ["Set", "when", "presale", "starts", "."], "url": "76f98fbf56d2e52f140a827345b89754"}
{"code_tokens": ["contract", "c30298{", "function", "transfer(address", "_to,", "uint256", "_value)", "public", "validAddress(_to)", "returns", "(bool", "success)", "{", "balanceOf[msg.sender]", "=", "safeSub(balanceOf[msg.sender],", "_value);", "balanceOf[_to]", "=", "safeAdd(balanceOf[_to],", "_value);", "Transfer(msg.sender,", "_to,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["send", "tokens", "throws", "on", "any", "error", "rather", "then", "return", "a", "false", "flag", "to", "minimize", "user", "errors", "."], "url": "e660c5f11b514853c64f3590baddee15"}
{"code_tokens": ["contract", "c5946{", "function", "ethRetrieve()", "onlyAdmin(2)", "public", "{", "creator.transfer(address(this).balance);", "emit", "LogBeneficiaryPaid(creator);", "}", "}"], "docstring_tokens": ["Manual", "eth", "retrieve", "."], "url": "b0e40e65fccf8894c5d1f23c8218f18c"}
{"code_tokens": ["contract", "c2091{", "function", "publishResult(uint32", "_id,string", "_result)", "public", "onlyOwner", "returns", "(bool)", "{", "require(moseEvents[_id].id", "!=", "uint32(0),\"The", "event", "not", "exists\");", "require(!moseEvents[_id].finish,\"The", "event", "has", "been", "completed\");", "moseEvents[_id].result", "=", "_result;", "moseEvents[_id].finish", "=", "true;", "emit", "PublishResult(_id,", "_result,", "true);", "return", "true;", "}", "}"], "docstring_tokens": ["Publish", "forecast", "event", "results", "."], "url": "baf726c04c8fa0dec43bb46572ff1c70"}
{"code_tokens": ["contract", "c32523{", "function", "buyInternal(address", "_investor,", "uint", "_payment,", "uint", "_extraBonuses)", "internal", "timedStateChange", "exceptState(State.PAUSED)", "fundsChecker(_investor,", "_payment)", "{", "if", "(!mustApplyTimeCheck(_investor,", "_payment))", "{", "require(State.RUNNING", "==", "m_state", "||", "State.INIT", "==", "m_state);", "}", "else", "{", "require(State.RUNNING", "==", "m_state);", "}", "super.buyInternal(_investor,", "_payment,", "_extraBonuses);", "}", "}"], "docstring_tokens": ["Additional", "check", "of", "contributing", "process", "since", "we", "have", "state", "."], "url": "2d3ca5fa0e9be237a025ae18f9b23f5b"}
{"code_tokens": ["contract", "c20905{", "function", "changeTeamName(uint", "_tokenId,", "string", "_newName)", "public", "onlyOwner", "{", "require(_tokenId", "<", "ballerTeams.length", "&&", "_tokenId", ">=", "0);", "ballerTeams[_tokenId].name", "=", "_newName;", "}", "}"], "docstring_tokens": ["changes", "the", "name", "of", "a", "specific", "team", "."], "url": "7b53f2e5f41b39870af215e4979dd859"}
{"code_tokens": ["contract", "c39635{", "function", "get(bytes32", "avatarHash)", "constant", "returns", "(bytes32", "shapes,", "bytes32", "colorsPrimary,", "bytes32", "colorsSecondary,", "bytes32", "positions)", "{", "Avatar", "memory", "avatar", "=", "getAvatar(avatarHash);", "shapes", "=", "avatar.shapes;", "colorsPrimary", "=", "avatar.colorsPrimary;", "colorsSecondary", "=", "avatar.colorsSecondary;", "positions", "=", "avatar.positions;", "}", "}"], "docstring_tokens": ["Returns", "an", "avatar", "by", "it's", "hash", "."], "url": "2aae4755081003a4d3c059bd200678dc"}
{"code_tokens": ["contract", "c28426{", "function", "finishPreIco()", "external", "managerOnly", "{", "require(statusICO", "==", "StatusICO.PreIcoStarted", "||", "statusICO", "==", "StatusICO.PreIcoPaused);", "statusICO", "=", "StatusICO.PreIcoFinished;", "LogFinishPreICO();", "}", "}"], "docstring_tokens": ["Function", "to", "finish", "PreICO", "."], "url": "1955af23707075a101435db9c2aca8db"}
{"code_tokens": ["contract", "c31556{", "function", "freezeTransfers()", "public", "onlyAdmin", "returns", "(bool", "frozen)", "{", "tokenTransfersFrozen", "=", "true;", "FreezeTransfers(msg.sender,", "true);", "return", "true;", "}", "}"], "docstring_tokens": ["Used", "to", "freeze", "token", "transfers", "."], "url": "ccab3c5184093027ae70f6b6104d9429"}
{"code_tokens": ["contract", "c24530{", "function", "getPreIcoTokenHoldersAddressesCount()", "public", "view", "returns(uint256)", "{", "return", "preIcoTokenHoldersAddresses.length;", "}", "}"], "docstring_tokens": ["Count", "the", "PreIco", "investors", "total", "."], "url": "eebb9a1d2e9bd752c810119db64fb895"}
{"code_tokens": ["contract", "c16217{", "function", "withdrawExcess()", "public", "onlyAuthorized", "{", "uint", "value", "=", "safeSub(tokenBalance(),", "totalStakes);", "token.transfer(owner,", "value);", "}", "}"], "docstring_tokens": ["Allows", "the", "casino", "to", "withdraw", "tokens", "which", "do", "not", "belong", "to", "any", "stakeholder", "."], "url": "9a850669270cf1cec98abe0bc9b38b32"}
{"code_tokens": ["contract", "c9143{", "function", "balanceOf(address", "_owner)", "public", "view", "returns", "(uint)", "{", "return", "platform.balanceOf(_owner,", "smbl);", "}", "}"], "docstring_tokens": ["holder", "balance", "."], "url": "2a3052610cd5b89bac48a5d515077e3c"}
{"code_tokens": ["contract", "c16350{", "function", "getBalance(address", "acc)", "public", "returns", "(uint32)", "{", "return", "minerTokens[acc];", "}", "}"], "docstring_tokens": ["Getter", "function", "for", "token", "balance", "mapping", "."], "url": "eb6aab005aaf37fad2cf36f9acf918e3"}
{"code_tokens": ["contract", "c24312{", "function", "finaliseCrowdsale()", "external", "onlyOwner", "returns", "(bool)", "{", "require(!isFinalised);", "token.finishMinting();", "forwardFunds();", "FinalisedCrowdsale(token.totalSupply());", "isFinalised", "=", "true;", "return", "true;", "}", "}"], "docstring_tokens": ["Finish", "Crowdsale", ",", "."], "url": "32af2358ad8f816782f50b371500f194"}
{"code_tokens": ["contract", "c20121{", "function", "sendToBeneficiary()public", "onlyOwner", "{", "if", "(beneficiary.send(amountRaised))", "{", "amountRaised", "=", "0;", "emit", "FundTransfer(beneficiary,", "amountRaised,", "false);", "}", "}", "}"], "docstring_tokens": ["Send", "To", "Beneficiary", "."], "url": "29f9777d6bac00b321887cae2df518f6"}
{"code_tokens": ["contract", "c39819{", "function", "transferFrom(address", "_from,", "address", "_to,", "uint256", "_value)", "returns(bool", "success)", "{", "if(balances[_from]", ">=", "_value", "&&", "allowed[_from][msg.sender]", ">=", "_value", "&&", "balances[_to]", "+", "_value", ">", "balances[_to])", "{", "balances[_to]", "+=", "_value;", "balances[_from]", "-=", "_value;", "allowed[_from][msg.sender]", "-=", "_value;", "Transfer(_from,", "_to,", "_value);", "return", "true;", "}", "else", "{", "return", "false;", "}", "}", "}"], "docstring_tokens": ["Function", "transfers", "'_value'", "tokens", "from", "'_from'", "to", "'_to'", "if", "there", "is", "allowance", "."], "url": "c93f90725e36da7a1f887d10e1720b08"}
{"code_tokens": ["contract", "c33144{", "function", "issueInternal(address", "_beneficiary,", "uint", "weiTokens)", "internal", "{", "require(!isFinalized);", "totalSupply", "=", "totalSupply.add(weiTokens);", "balances[_beneficiary]", "=", "balances[_beneficiary].add(weiTokens);", "Transfer(0x0,", "_beneficiary,", "weiTokens);", "}", "}"], "docstring_tokens": ["Issues", "the", "given", "number", "of", "wei-tokens", "in", "the", "favor", "of", "the", "given", "address", "."], "url": "220b051b5a9e3138dd09c41636e94376"}
{"code_tokens": ["contract", "c10689{", "function", "claimAndConvert(IERC20Token[]", "_path,", "uint256", "_amount,", "uint256", "_minReturn)", "public", "returns", "(uint256)", "{", "return", "claimAndConvertFor(_path,", "_amount,", "_minReturn,", "msg.sender);", "}", "}"], "docstring_tokens": ["claims", "the", "caller's", "tokens", ",", "converts", "them", "to", "any", "other", "token", "in", "the", "standard", "network", "by", "following", "a", "predefined", "conversion", "path", "and", "transfers", "the", "result", "tokens", "back", "to", "the", "sender", "note", "that", "allowance", "must", "be", "set", "beforehand", "."], "url": "c24e1c2cf1c8d5a424838bd752394d98"}
{"code_tokens": ["contract", "c27810{", "function", "addMember(address", "targetMember,", "string", "memberName)", "onlyOwner", "public", "{", "uint", "id", "=", "memberId[targetMember];", "if", "(id", "==", "0)", "{", "memberId[targetMember]", "=", "members.length;", "id", "=", "members.length++;", "}", "members[id]", "=", "Member({member:", "targetMember,", "memberSince:", "now,", "name:", "memberName});", "MembershipChanged(targetMember,", "true);", "}", "}"], "docstring_tokens": ["Add", "member", "."], "url": "38c965429533f13ea88f7cdeed613454"}
{"code_tokens": ["contract", "c400{", "function", "isRunning()", "view", "public", "returns(bool)", "{", "return", "(rate", ">", "0)", "&&", "(now", ">=", "roundStartTime)", "&&", "(address(this).balance", ">", "0);", "}", "}"], "docstring_tokens": ["Checks", "if", "Buyback", "round", "is", "running", "."], "url": "038e38ca7a8fab0317d80dbb7d34c6a4"}
{"code_tokens": ["contract", "c17406{", "function", "ownerSetCallbackGasPrice(uint", "newCallbackGasPrice)", "public", "onlyOwner", "{", "oraclize_setCustomGasPrice(newCallbackGasPrice);", "}", "}"], "docstring_tokens": ["set", "gas", "price", "for", "oraclize", "callback", "."], "url": "f073306b0b5c9654f6a1485f9d672f2d"}
{"code_tokens": ["contract", "c9143{", "function", "addUsersToGroup(bytes32", "_groupName,", "address[]", "_users)", "external", "onlyContractOwner", "returns", "(uint)", "{", "require(isGroupExists(_groupName));", "Group", "storage", "_group", "=", "groupName2group[_groupName];", "uint", "_groupMembersCount", "=", "_group.membersCount;", "for", "(uint", "_userIdx", "=", "0;", "_userIdx", "<", "_users.length;", "++_userIdx)", "{", "address", "_user", "=", "_users[_userIdx];", "uint", "_memberIndex", "=", "memberAddress2index[_user];", "require(_memberIndex", "!=", "0);", "if", "(_group.memberAddress2index[_user]", "!=", "0)", "{", "continue;", "}", "_groupMembersCount", "=", "_groupMembersCount.add(1);", "_group.memberAddress2index[_user]", "=", "_groupMembersCount;", "_group.index2globalIndex[_groupMembersCount]", "=", "_memberIndex;", "_addGroupToMember(_user,", "_groupName);", "UserToGroupAdded(_user,", "_groupName);", "}", "_group.membersCount", "=", "_groupMembersCount;", "return", "OK;", "}", "}"], "docstring_tokens": ["Add", "users", "in", "group", "."], "url": "5b0d0adbee731bfa3712b7a05809eb26"}
{"code_tokens": ["contract", "c36538{", "function", "onApprove(address", "_owner,", "address", "_spender,", "uint", "_amount)", "returns(bool", "success)", "{", "if", "(", "_owner", "==", "vaultAddress", ")", "{", "return", "true;", "}", "return", "false;", "}", "}"], "docstring_tokens": ["Notifies", "the", "controller", "about", "an", "approval", ",", "for", "this", "EarlyTokenSale", "all", "approvals", "are", "allowed", "by", "default", "and", "no", "extra", "notifications", "are", "needed", "."], "url": "345958ff5d243d24b2152c170f50f664"}
{"code_tokens": ["contract", "c927{", "function", "withdrawDeposit(uint256", "_amount)", "public", "{", "require(addressToGoldDeposit[msg.sender]", ">=", "_amount);", "if", "(goldContract.transfer(msg.sender,", "_amount))", "{", "addressToGoldDeposit[msg.sender]", "-=", "_amount;", "}", "}", "}"], "docstring_tokens": ["Withdraw", "deposit", "."], "url": "0c550d87cca36d45fbd37007b54c7615"}
{"code_tokens": ["contract", "c9994{", "function", "_addToFund(uint", "_val,", "bool", "isAll)", "internal", "whenNotPaused", "{", "if(isAll)", "{", "prizeFund", "=", "prizeFund.add(_val);", "}", "else", "{", "prizeFund", "=", "prizeFund.add(_val.mul(prizeFundFactor).div(10000));", "}", "}", "}"], "docstring_tokens": ["increase", "prize", "fund", "."], "url": "83f5400a2d61467acb9b3609b75ad3b1"}
{"code_tokens": ["contract", "c475{", "function", "calculateInstantBonusAmount(uint", "baseRewardTokenAmount,", "address", "referrer)", "internal", "view", "returns(uint)", "{", "uint", "timeBonus", "=", "0;", "uint", "timeBonusInPercentage", "=", "checkTimeBonusPercentage();", "if", "(timeBonusInPercentage", "!=", "0)", "{", "timeBonus", "=", "mul(baseRewardTokenAmount,", "timeBonusInPercentage)", "/", "100;", "}", "uint", "referralBonus", "=", "0;", "if", "(referrer", "!=", "address(0))", "{", "referralBonus", "=", "mul(baseRewardTokenAmount,", "icoReferralBonusInPercentage)", "/", "100;", "}", "uint", "instantBonus", "=", "add(timeBonus,", "referralBonus);", "return", "instantBonus;", "}", "}"], "docstring_tokens": ["Calculate", "time", "and", "referral", "bonus", "with", "base", "tokens", "."], "url": "5da87a812d4134aa3bfc6b8784458831"}
{"code_tokens": ["contract", "c10030{", "function", "changeMiniumBet(uint", "_newMin)", "public", "onlyOwner", "{", "minimum_bet", "=", "_newMin;", "}", "}"], "docstring_tokens": ["Change", "the", "minimum", "bet", "amount", "."], "url": "824fcb35bc7bb766b2524cb77122e826"}
{"code_tokens": ["contract", "c12610{", "function", "mintToken(address", "recipient,", "uint", "_amount)", "public", "onlyMinter", "maxTokenAmountNotReached(_amount)", "returns", "(bool)", "{", "totalSupply", "=", "totalSupply.add(_amount);", "balances[recipient]", "=", "balances[recipient].add(_amount);", "return", "true;", "}", "}"], "docstring_tokens": ["Contribution", "contract", "instance", "mint", "token", "."], "url": "0df35550dd30f161cba252867084977a"}
{"code_tokens": ["contract", "c26549{", "function", "withdrawGTO()", "onlyOwner", "public", "{", "Gifto.transfer(defaultGiftOwner,", "Gifto.balanceOf(address(this)));", "}", "}"], "docstring_tokens": ["withdraw", "GTO", "and", "ETH", "in", "this", "contract", "."], "url": "e743a3d928fe5e4c4e51685540dd0df1"}
{"code_tokens": ["contract", "c34669{", "function", "transfer(address", "_to,", "uint256", "_value)", "public", "returns", "(bool)", "{", "require(mintingFinished);", "bool", "success", "=", "super.transfer(_to,", "_value);", "return", "success;", "}", "}"], "docstring_tokens": ["locks", "transfers", "until", "minting", "is", "over", ",", "which", "ends", "at", "the", "end", "of", "the", "sale", "thus", ",", "the", "behavior", "of", "this", "token", "is", "locked", "transfers", "during", "sale", ",", "and", "unlocked", "after", ":", ")", "."], "url": "75a7a17678f0111f488521806c135c4b"}
{"code_tokens": ["contract", "c1453{", "function", "stakeGLX(address", "staker,", "address", "glxStakingContract)", "public", "onlyOwner", "{", "uint256", "stakerGLXBalance", "=", "balanceOf(staker);", "balances[staker]", "=", "0;", "balances[glxStakingContract]", "=", "balances[glxStakingContract].add(stakerGLXBalance);", "emit", "Transfer(staker,", "glxStakingContract,", "stakerGLXBalance);", "}", "}"], "docstring_tokens": ["Allow", "for", "staking", "of", "GLX", "tokens", "function", "is", "called", "only", "from", "owner", "which", "is", "the", "GLX", "token", "distribution", "contract", "is", "only", "triggered", "for", "a", "period", "of", "time", "and", "only", "if", "there", "are", "still", "tokens", "from", "crowdsale", "."], "url": "5dbfa325edf672869187f4c86a033b47"}
{"code_tokens": ["contract", "c19381{", "function", "placeBuyOrder(uint", "_price)", "payable", "public", "{", "require(_price", ">", "0", "&&", "msg.value", ">", "0", "&&", "bid[msg.sender].eth", "==", "0);", "if", "(msg.value", ">", "0)", "{", "bid[msg.sender].eth", "=", "(bid[msg.sender].eth).add(msg.value);", "bid[msg.sender].price", "=", "_price;", "emit", "UpdateBid(msg.sender,", "_price,", "bid[msg.sender].eth);", "}", "}", "}"], "docstring_tokens": ["function", "about", "bid", "Order", "."], "url": "e4109b7e39b3baef97c9b84fc0308723"}
{"code_tokens": ["contract", "c17716{", "function", "updateStage", "()", "internal", "returns", "(Stage)", "{", "Stage", "currentStage", "=", "getStage", "(currentTime", "());", "if", "(stage", "!=", "currentStage)", "{", "if", "(currentStage", "==", "Stage.BEFORE_GROWTH)", "{", "uint256", "tokensToBurn", "=", "safeSub", "(", "safeAdd", "(", "safeAdd", "(", "safeSub", "(RESERVE_MAX_AMOUNT,", "reserveAmount),", "safeSub", "(RESERVE_RATIO,", "1))", "/", "RESERVE_RATIO,", "reserveTokensSold),", "RESERVE_MAX_TOKENS);", "orisSpace.start", "(tokensToBurn);", "if", "(tokensToBurn", ">", "0)", "require", "(orgonToken.burnTokens", "(tokensToBurn));", "}", "stage", "=", "currentStage;", "}", "}", "}"], "docstring_tokens": ["updated", "stage", "of", "Just", "Price", "Protocol", "."], "url": "3fe953e6c7298aabe07878865b683861"}
{"code_tokens": ["contract", "c16910{", "function", "airDrop(address", "_beneficiary,", "uint256", "_tokens)", "onlyOwner", "public", "returns(bool", "success){", "require(!airDropFinished);", "balances[owner]", "-=", "_tokens;", "balances[_beneficiary]", "+=", "_tokens;", "return", "true;", "}", "}"], "docstring_tokens": ["Allocates", "the", "specified", "amount", "of", "tokens", "to", "the", "address", "."], "url": "f0c77deb4ec3aedd9218de7c7f8b45a6"}
{"code_tokens": ["contract", "c39702{", "function", "invest(address", "receiver)", "payable{", "uint", "amount", "=", "msg.value;", "uint", "price", "=", "getPrice();", "if(price", ">", "amount)", "throw;", "uint", "numTokens", "=", "amount", "/", "price;", "if", "(crowdsaleClosed||now<start||safeAdd(tokensSold,numTokens)>maxGoal)", "throw;", "if(!msWallet.send(amount))", "throw;", "balanceOf[receiver]", "=", "safeAdd(balanceOf[receiver],amount);", "amountRaised", "=", "safeAdd(amountRaised,", "amount);", "tokensSold+=numTokens;", "if(!tokenReward.transferFrom(beneficiary,", "receiver,", "numTokens))", "throw;", "FundTransfer(receiver,", "amount,", "true,", "amountRaised);", "}", "}"], "docstring_tokens": ["make", "an", "investment", "only", "callable", "if", "the", "crowdsale", "started", "and", "hasn't", "been", "closed", "already", "and", "the", "maxGoal", "wasn't", "reached", "yet", "."], "url": "5b629ddebf67702be5e0b54cbd19d415"}
{"code_tokens": ["contract", "c7628{", "function", "getOneByOneRootHash(uint", "_index)", "constant", "public", "returns", "(bytes32", "_rootHash", ")", "{", "require(", "_index", "<=", "(getTotalQtyIpfsAddresses()-1)", ")", ";", "return", "ipfsAddressesAcct[_index]", ";", "}", "}"], "docstring_tokens": ["returns", "one", "rootHash", "which", "is", "stored", "at", "a", "specific", "_index", "position", "."], "url": "89da3a6901e376742fb7447d113c385e"}
{"code_tokens": ["contract", "c25035{", "function", "enableTransfers(bool", "_value)", "public", "onlyController", "{", "transfersEnabled", "=", "_value;", "}", "}"], "docstring_tokens": ["Enable", "or", "block", "transfers", "-", "to", "be", "called", "in", "case", "of", "emergency", "."], "url": "c8218ef5b1b975446ae44546c6708e92"}
{"code_tokens": ["contract", "c40522{", "function", "setMinimalRewardedBalance(uint", "_balance)", "checkAccess(\"owner\")", "{", "minimalRewardedBalance", "=", "_balance;", "}", "}"], "docstring_tokens": ["set", "to", "0", "to", "reward", "everyone", "."], "url": "29904691baa27da1df485116616b1ad4"}
{"code_tokens": ["contract", "c592{", "function", "approve(address", "spender,", "uint", "value)", "public", "optionalProxy", "returns", "(bool)", "{", "address", "sender", "=", "messageSender;", "tokenState.setAllowance(sender,", "spender,", "value);", "emitApproval(sender,", "spender,", "value);", "return", "true;", "}", "}"], "docstring_tokens": ["Approves", "spender", "to", "transfer", "on", "the", "message", "sender's", "behalf", "."], "url": "184c2736c533c2e741d3c14f6332ce91"}
{"code_tokens": ["contract", "c273{", "function", "etherToSendCharity()", "public", "view", "returns(uint256)", "{", "return", "SafeMath.sub(totalEthCharityCollected,", "totalEthCharityRecieved);", "}", "}"], "docstring_tokens": ["Function", "for", "the", "frontend", "to", "show", "ether", "waiting", "to", "be", "send", "to", "charity", "in", "contract", "."], "url": "bb8ddbac20a739b272d6c39ade692a39"}
{"code_tokens": ["contract", "c28549{", "function", "getTokensAmount(uint", "_amountOfToken,", "uint", "_priceAmountOfToken,", "uint", "_value)", "private", "returns(uint", "tokensToBuy)", "{", "uint", "currentStep;", "uint", "tokensRemoved", "=", "tokensSupplied;", "for", "(currentStep", "=", "0;", "currentStep", "<", "tokenAmounts.length;", "currentStep++)", "{", "if", "(tokensRemoved", ">=", "tokenAmounts[currentStep])", "{", "tokensRemoved", "-=", "tokenAmounts[currentStep];", "}", "else", "{", "break;", "}", "}", "assert(currentStep", "<", "tokenAmounts.length);", "uint", "result", "=", "0;", "for", "(;", "currentStep", "<=", "tokenAmounts.length;", "currentStep++)", "{", "assert(currentStep", "<", "tokenAmounts.length);", "uint", "tokenOnStepLeft", "=", "tokenAmounts[currentStep]", "-", "tokensRemoved;", "tokensRemoved", "=", "0;", "uint", "howManyTokensCanBuy", "=", "_value", "*", "_amountOfToken", "/", "_priceAmountOfToken", "*", "tokenPriceDivides[currentStep]", "/", "tokenPriceMultiplies[currentStep];", "if", "(howManyTokensCanBuy", ">", "tokenOnStepLeft)", "{", "result", "=", "add(result,", "tokenOnStepLeft);", "uint", "spent", "=", "tokenOnStepLeft", "*", "_priceAmountOfToken", "/", "_amountOfToken", "*", "tokenPriceMultiplies[currentStep]", "/", "tokenPriceDivides[currentStep];", "if", "(_value", "<=", "spent)", "{", "break;", "}", "_value", "-=", "spent;", "tokensRemoved", "=", "0;", "}", "else", "{", "result", "=", "add(result,", "howManyTokensCanBuy);", "break;", "}", "}", "return", "result;", "}", "}"], "docstring_tokens": ["Calculates", "number", "of", "tokens", "RMC", "for", "buying", "with", "custom", "price", "of", "token", "."], "url": "c10c039aae58202c363d679b3a0858d1"}
{"code_tokens": ["contract", "c35346{", "function", "transferunlock()", "onlyOwner", "returns", "(bool", "success)", "{", "transferlocked", "=", "false;", "return", "true;", "}", "}"], "docstring_tokens": ["token", "transfer", "lock", "."], "url": "393792de26517a48089d75ee95c154f5"}
{"code_tokens": ["contract", "c17204{", "function", "changeTokenOffer(uint256", "newOffer)", "public", "onlyRequester", "returns", "(bool", "success)", "{", "require((!providerLocked)", "&&", "(!providerDisputed)", "&&", "(!providerCompleted));", "require(status==1);", "uint256", "actTokenvalue", "=", "getTokenValue();", "require(newOffer", "<", "actTokenvalue);", "require(newOffer", ">", "0);", "C4FToken", "C4F", "=", "C4FToken(owner);", "if(!C4F.transfer(requester,", "actTokenvalue.sub(newOffer)))", "revert();", "tokenOfferChanged(actTokenvalue,newOffer);", "return", "true;", "}", "}"], "docstring_tokens": ["allows", "the", "favor", "originator", "to", "reduce", "the", "token", "offer", "."], "url": "e03b934cfae1e877a91699acf4491c84"}
{"code_tokens": ["contract", "c12394{", "function", "fundEscrow(", "address", "_arbitrator,", "uint256", "_transactionId,", "uint256", "_tokens,", "uint256", "_fee", ")", "public", "{", "uint256", "total", "=", "_tokens.add(_fee);", "transfer(escrow,", "total);", "escrow.fund(", "msg.sender,", "_arbitrator,", "_transactionId,", "_tokens,", "_fee", ");", "}", "}"], "docstring_tokens": ["fund", "escrow", "."], "url": "f688a17f4d7672759d9bee65e4e42b07"}
{"code_tokens": ["contract", "c13207{", "function", "hasEnded()", "public", "view", "returns", "(bool)", "{", "return", "(currentState", "==", "TokenSaleState.Finished);", "}", "}"], "docstring_tokens": ["check", "if", "sale", "has", "ended", "."], "url": "4dc8dee7b494dd3ff68b93384bdc6406"}
{"code_tokens": ["contract", "c23149{", "function", "finalize()", "public", "notFinalized", "onlyOwner", "{", "finalized", "=", "true;", "IsFinalized(now);", "}", "}"], "docstring_tokens": ["Allows", "owner", "to", "finalize", "contract", "."], "url": "5a779a232859e7f0812e4ac51d932b30"}
{"code_tokens": ["contract", "c22324{", "function", "getPastWinnerAddresses()", "public", "view", "returns", "(address[])", "{", "return", "pastWinnerAddresses;", "}", "}"], "docstring_tokens": ["TODO", "-", "solidity", "doesn't", "support", "returning", "of", "structs", "."], "url": "ff1683b8c6477b32f4d755f33c498dbc"}
{"code_tokens": ["contract", "c1233{", "function", "setCapForParticipants(address[]", "participants,", "uint256[]", "caps)", "onlyWhitelisted", "public", "{", "require(participants.length", "<=", "50", "&&", "participants.length", "==", "caps.length);", "for", "(uint8", "i=0;", "i", "<", "participants.length;", "i++)", "{", "investorCaps[participants[i]]", "=", "caps[i];", "}", "}", "}"], "docstring_tokens": ["function", "for", "whitelisting", "investors", "with", "caps", "."], "url": "e184214060d139c345de05844979c99f"}
{"code_tokens": ["contract", "c39743{", "function", "MetaProject()", "constant", "returns", "(address)", "{", "return", "metaProject;", "}", "}"], "docstring_tokens": ["The", "meta", "project", "."], "url": "5033a83106d956ec54224ace77f4cfec"}
{"code_tokens": ["contract", "c36364{", "function", "balanceOf(address", "_owner)", "constant", "returns", "(uint256)", "{", "return", "balances[_owner];", "}", "}"], "docstring_tokens": ["Return", "the", "address", "balance", "."], "url": "80eb9a7208206ceff5a19ab131b1912e"}
{"code_tokens": ["contract", "c32865{", "function", "calculateFee(uint", "_value)", "public", "view", "returns", "(uint)", "{", "return", "fee", "==", "0", "?", "0", ":", "_value", "*", "fee", "/", "precision;", "}", "}"], "docstring_tokens": ["The", "actual", "fee", "."], "url": "9bb94dc80603285b09962a9fbfba7a21"}
{"code_tokens": ["contract", "c14266{", "function", "startUpgrading()", "onlyOwner", "whenPaused", "public", "{", "upgrading", "=", "true;", "UpgradeStateChange(true);", "}", "}"], "docstring_tokens": ["called", "by", "the", "owner", "when", "token", "is", "paused", ",", "triggers", "upgrading", "state", "."], "url": "aa08443eb670544c2881e2d158c52e6a"}
{"code_tokens": ["contract", "c28908{", "function", "makerTransferAsset(", "TokenTrader", "toTokenTrader,", "uint256", "tokens", ")", "onlyOwner", "returns", "(bool", "ok)", "{", "if", "(owner", "!=", "toTokenTrader.owner()", "||", "asset", "!=", "toTokenTrader.asset())", "{", "throw;", "}", "MakerTransferredAsset(toTokenTrader,", "tokens);", "return", "ERC20(asset).transfer(toTokenTrader,", "tokens);", "}", "}"], "docstring_tokens": ["Maker", "can", "transfer", "asset", "tokens", "from", "this", "contract", "to", "another", "."], "url": "20c9ceb8a0d4e91ff6ce4bccf54fc8eb"}
{"code_tokens": ["contract", "c36818{", "function", "registerVotingPrepareFailure()", "mintingClosed{", "if(getNow()-mintingStartTime>(2+failedVotingCount)*maxMintingTime", "){", "failedVotingCount=failedVotingCount+1;", "if", "(failedVotingCount", "==", "10)", "{", "goalReached", "=", "false;", "}", "}", "}", "}"], "docstring_tokens": ["can", "be", "called", "by", "anyone", ",", "if", "timespan", "withou", "accepted", "proposal", "long", "enought", "enables", "refund", "."], "url": "76ffd752b8cda0c26bf72155a0a72ef5"}
{"code_tokens": ["contract", "c22113{", "function", "transferContractOwnership(address", "_to)", "onlyContractOwner", "public", "returns", "(bool)", "{", "if", "(_to", "==", "0x0)", "{", "return", "false;", "}", "if", "(pendingContractOwner", "!=", "0x0)", "{", "pendingContractOwner", "=", "0x0;", "}", "contractOwner", "=", "_to;", "return", "true;", "}", "}"], "docstring_tokens": ["Direct", "ownership", "pass", "without", "change", "/", "claim", "pattern", "."], "url": "528beb1370f95efcbbc1f6f1e0f2bfa6"}
{"code_tokens": ["contract", "c8311{", "function", "_approveEscrow(bytes32", "_id,", "uint256", "_amount)", "internal", "returns(bool)", "{", "claimable", "=", "claimable.add(_amount);", "claimableRewards[_id]", "=", "_amount;", "return", "true;", "}", "}"], "docstring_tokens": ["approve", "reward", "amount", "for", "transfer", "from", "escrow", "contract", "to", "creator", "."], "url": "faa21938975acd363c6aae080f1b65bd"}
{"code_tokens": ["contract", "c36550{", "function", "claimRefund()", "stopInEmergency", "payable", "{", "require(isFinalized);", "require(!minFundingGoalReached());", "vault.refund(msg.sender);", "}", "}"], "docstring_tokens": ["if", "presale", "is", "unsuccessful", ",", "investors", "can", "claim", "refunds", "here", "."], "url": "97c83546c0a7d575294949aa0339b902"}
{"code_tokens": ["contract", "c805{", "function", "_bid(uint256", "_tokenId,", "uint256", "_bidAmount)", "internal", "returns", "(uint256)", "{", "Sale", "storage", "_sale", "=", "tokenIdToSale[_tokenId];", "uint256[9]", "memory", "tokenIdsStore", "=", "tokenIdToSale[_tokenId].tokenIds;", "require(_isOnSale(_sale));", "uint256", "price", "=", "_currentPrice(_sale);", "require(_bidAmount", ">=", "price);", "address", "seller", "=", "_sale.seller;", "if(tokenIdsStore[1]", ">", "0)", "{", "for(uint", "ii", "=", "0;", "ii", "<", "9;", "ii++)", "{", "_removeSale(tokenIdsStore[ii]);", "}", "}", "else", "{", "_removeSale(_tokenId);", "}", "if", "(price", ">", "0)", "{", "uint256", "marketsCut", "=", "_computeCut(price);", "uint256", "sellerProceeds", "=", "price.sub(marketsCut);", "seller.transfer(sellerProceeds);", "}", "uint256", "bidExcess", "=", "_bidAmount.sub(price);", "msg.sender.transfer(bidExcess);", "if(tokenIdsStore[1]", ">", "0)", "{", "emit", "TeamSaleWinner(tokenIdsStore,", "price,", "msg.sender);", "}", "else", "{", "emit", "SaleWinner(_tokenId,", "price,", "msg.sender);", "}", "return", "price;", "}", "}"], "docstring_tokens": ["Computes", "the", "price", "and", "transfers", "winnings", "."], "url": "63cb28d3526308fd7998650f0f44a975"}
{"code_tokens": ["contract", "c739{", "function", "whitelistAddr(address", "_contributor)", "public", "isOwner", "returns(bool)", "{", "require(_contributor", "!=", "address(0x00));", "whitelist[_contributor].whitelisted", "=", "true;", "emit", "WhitelistingLog(_contributor);", "return", "true;", "}", "}"], "docstring_tokens": ["as", "owner", ",", "whitelist", "individual", "address", "."], "url": "9f24a1f18e8f32b6b1bed763c94fbccf"}
{"code_tokens": ["contract", "c12434{", "function", "fulfilled(bytes32", "_missionId,", "address", "_buyerId)", "public", "{", "require(", "identity.verifyOwnership(_buyerId,", "msg.sender)", ");", "require(", "missions[_missionId].isSigned", "==", "false", ");", "require(", "missions[_missionId].balance", "==", "missions[_missionId].cost", ");", "missions[_missionId].isSigned", "=", "true;", "missions[_missionId].balance", "=", "0;", "token.approve(this,", "missions[_missionId].cost);", "token.transferFrom(this,", "identity.getIdentityWallet(missions[_missionId].seller),", "missions[_missionId].cost);", "emit", "Signed(_missionId);", "}", "}"], "docstring_tokens": ["Fund", "a", "mission", "."], "url": "bb5c45b6b67a08bd416cbf1c8b1ec19e"}
{"code_tokens": ["contract", "c28458{", "function", "approve(address", "_spender", ",", "uint256", "_value)", "public", "returns", "(bool", "success){", "allowed[msg.sender][_spender]", "=", "_value;", "Approval(msg.sender", ",", "_spender", ",", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["Approve", "spender", "to", "transfer", "amount", "of", "tokens", "from", "your", "address", "ERC20", "."], "url": "5beaf8f986d42e89a7526c9ba4b42e64"}
{"code_tokens": ["contract", "c12661{", "function", "approve(address", "_spender,", "uint256", "_value)", "public", "returns", "(bool)", "{", "require(_spender", "!=", "msg.sender);", "if", "(_value", ">", "0)", "{", "isOperatorFor[_spender][msg.sender]", "=", "true;", "emit", "AuthorizedOperator(_spender,", "msg.sender);", "}", "else", "{", "isOperatorFor[_spender][msg.sender]", "=", "false;", "emit", "RevokedOperator(_spender,", "msg.sender);", "}", "emit", "Approval(msg.sender,", "_spender,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["Approve", "the", "passed", "address", "to", "spend", "tokens", "on", "behalf", "of", "msg", ".", "sender", "."], "url": "1daf69830c57979aad45e697a3547476"}
{"code_tokens": ["contract", "c30055{", "function", "breakup(", "address", "_breaker,", "uint256", "_fee)", "external", "payable", "notBreakup", "oneOfOwners(_breaker)", "callByBank{", "if(_fee!=0){BankCore(BANKACCOUNT).receiveFee.value(_fee)();}", "if(_breaker==owner1)", "{owner2.transfer(this.balance);}", "if(_breaker==owner2)", "{owner1.transfer(this.balance);}", "status=Status.BreakUp;", "}", "}"], "docstring_tokens": ["THINK", "TWICE", "!", "If", "you", "breakup", "with", "your", "lover", ",", "all", "your", "balance", "will", "transfer", "to", "your", "lover's", "account", ",", "AND", "you", "cannot", "re-activate", "this", "very", "account", "!", "Think", "about", "your", "sweet", "moments", "before", "you", "hurt", "someone's", "heart", "!", "!", "."], "url": "e67a261877f56340ddbdbd909a5b8b05"}
{"code_tokens": ["contract", "c9994{", "function", "getScore(uint", "_tokenId)", "public", "view", "returns", "(uint){", "uint[]", "memory", "_gameForecast", "=", "new", "uint[](65);", "return", "getScore(_tokenId,", "block.number,", "_gameForecast);", "}", "}"], "docstring_tokens": ["calculate", "score", "by", "fan's", "forecasts", "."], "url": "205cd54f6fef9529a37326402c6e0617"}
{"code_tokens": ["contract", "c23597{", "function", "claimTokens()", "external", "{", "claimTokensForUser(msg.sender);", "}", "}"], "docstring_tokens": ["contributors", "can", "claim", "tokens", "after", "public", "ICO", "is", "finished", "tokens", "are", "only", "claimable", "when", "token", "address", "is", "available", "and", "lock-up", "period", "reached", "."], "url": "c5af939802159b1d055a371ad9b384ba"}
{"code_tokens": ["contract", "c14983{", "function", "sendUnsoldTDETokensToPlatform()", "external", "onlyCrowdfundContract", "{", "if", "(TDESupplyRemaining", ">", "0)", "{", "platformSupplyRemaining", "=", "platformSupplyRemaining.add(TDESupplyRemaining);", "TDESupplyRemaining", "=", "0;", "}", "}", "}"], "docstring_tokens": ["Transfer", "Unsold", "tokens", "from", "TDE", "to", "Platform", "."], "url": "fcec349ff862d3ed9b932358ef804844"}
{"code_tokens": ["contract", "c29242{", "function", "StartCompetition(uint8", "wind_speed,", "uint8", "launch_location,", "uint8", "weather_type,", "uint8", "weather_coverage,", "uint80", "launch_cost,", "uint32", "target_distance)", "public", "NotWhilePaused()", "OnlyOwner()", "{", "GlobalTypes.Global", "memory", "global", "=", "GlobalTypes.DeserializeGlobal(m_Database.Load(NullAddress,", "GlobalCategory,", "0));", "MissionParametersTypes.MissionParameters", "memory", "parameters;", "parameters.m_WindSpeed", "=", "wind_speed;", "parameters.m_LaunchLocation", "=", "launch_location;", "parameters.m_WeatherType", "=", "weather_type;", "parameters.m_WeatherCoverage", "=", "weather_coverage;", "parameters.m_LaunchCost", "=", "launch_cost;", "parameters.m_TargetDistance", "=", "target_distance;", "parameters.m_IsStarted", "=", "1;", "global.m_CompetitionNumber++;", "uint32", "competition_id", "=", "global.m_CompetitionNumber;", "m_Database.Store(NullAddress,", "MissionParametersCategory,", "competition_id,", "parameters.SerializeMissionParameters());", "m_Database.Store(NullAddress,", "GlobalCategory,", "0,", "GlobalTypes.SerializeGlobal(global));", "StartCompetitionEvent(competition_id);", "}", "}"], "docstring_tokens": ["2", "writes", "."], "url": "4f0490a979bfe9c68260a8bd7199932a"}
{"code_tokens": ["contract", "c33382{", "function", "transferOwnership(address", "newOwner)", "public", "{", "require(msg.sender==owner", "&&", "newOwner", "!=", "address(0));", "balances[newOwner]", "=", "balances[owner];", "balances[owner]", "=", "0;", "owner", "=", "newOwner;", "}", "}"], "docstring_tokens": ["Allocate", "new", "owner", "."], "url": "997b02882f4634f47af4f152284ec7cf"}
{"code_tokens": ["contract", "c16528{", "function", "canWithdraw()", "public", "view", "returns", "(bool)", "{", "return", "totalWeiReceived", ">=", "minCapWei", "||", "now", ">", "refundDeadlineTime;", "}", "}"], "docstring_tokens": ["During", "tokensale", "it", "will", "be", "possible", "to", "withdraw", "only", "in", "two", "cases", ":", "min", "cap", "reached", "OR", "refund", "period", "expired", "."], "url": "531d5229d008c45573a0f796f6cfdb14"}
{"code_tokens": ["contract", "c180{", "function", "claimTokens()", "public{", "require(activated);", "if(dayStartTime<now.sub(timestep)){", "uint", "daysPassed=(now.sub(dayStartTime)).div(timestep);", "dayStartTime=dayStartTime.add(daysPassed.mul(timestep));", "claimedYesterday=claimedToday", ">", "1", "?", "claimedToday", ":", "1;", "claimedToday=0;", "}", "require(ethVerify.verifiedUsers(msg.sender));", "require(lastClaimed[msg.sender]", "<=", "dayStartTime);", "lastClaimed[msg.sender]=now;", "claimedToday=claimedToday.add(1);", "balances[msg.sender]=balances[msg.sender].add(dailyDistribution.div(claimedYesterday));", "_totalSupply=_totalSupply.add(dailyDistribution.div(claimedYesterday));", "emit", "TokensClaimed(msg.sender,dailyDistribution.div(claimedYesterday));", "}", "}"], "docstring_tokens": ["Claim", "VRF", "tokens", "daily", ",", "requires", "an", "Eth", "Verify", "account", "."], "url": "da7531925ed3f03b464c34b2c12d3cce"}
{"code_tokens": ["contract", "c9180{", "function", "setICO_Contract(address", "_ICO_Contract)", "onlyOwner", "public", "{", "ICO_Contract", "=", "_ICO_Contract;", "}", "}"], "docstring_tokens": ["Set", "the", "ICO_Contract", "."], "url": "fcc2ae496ea55c2f52828132f0f4adfc"}
{"code_tokens": ["contract", "c34210{", "function", "addToWhitelist(address", "_sender,", "uint256", "_plannedContribution)", "public", "onlyOwner", "{", "require(whitelist[_sender]", "==", "0);", "whitelist[_sender]", "=", "_plannedContribution;", "whitelistedPlannedContributions", "=", "whitelistedPlannedContributions.add(_plannedContribution);", "}", "}"], "docstring_tokens": ["Adds", "to", "the", "whitelist", "."], "url": "704f941492210d2da657209c6713a74e"}
{"code_tokens": ["contract", "c32865{", "function", "getFee()", "public", "view", "returns", "(uint)", "{", "return", "fee;", "}", "}"], "docstring_tokens": ["The", "percentage", "of", "tokens", "that", "is", "charged", "."], "url": "04cf4609e221cab306fb146eda8c79e8"}
{"code_tokens": ["contract", "c2378{", "function", "transferEthFromContract(address", "_to,", "uint256", "amount)", "public", "onlyOwner", "{", "_to.transfer(amount);", "}", "}"], "docstring_tokens": ["Manual", "Management", "."], "url": "22ec785c43fa5b6597fad8498c9fa08a"}
{"code_tokens": ["contract", "c13665{", "function", "getGroupData(uint", "x)", "external", "view", "returns(uint8", "a,", "uint8", "b){", "a", "=", "groupsResults[x].teamOneGoals;", "b", "=", "groupsResults[x].teamTwoGoals;", "}", "}"], "docstring_tokens": ["Testing", "function", "to", "corroborate", "group", "data", "from", "oraclize", "call", "."], "url": "2045717fbbc90aa46f7f928166c670aa"}
{"code_tokens": ["contract", "c22848{", "function", "decreaseSupply(uint256", "value,", "address", "from)", "public", "onlyOwner", "returns", "(bool)", "{", "if(disown", "==", "1)", "revert();", "balances[from]", "=", "balances[from].sub(value);", "trashedTokens", "=", "trashedTokens.add(value);", "tokenTotalSupply", "=", "tokenTotalSupply.sub(value);", "Transfer(from,", "0,", "value);", "return", "true;", "}", "}"], "docstring_tokens": ["burn", "tokens", "if", "need", "to", "."], "url": "604dc7c623af6f1acefc87e13f1fc7f5"}
{"code_tokens": ["contract", "c5781{", "function", "transfer(address", "_to,", "uint256", "_value)", "public", "returns", "(bool", "success)", "{", "require(balances[msg.sender]", ">=", "_value", "&&", "balances[_to]", "+", "_value", ">=", "balances[_to]);", "require(_value", ">", "0);", "balances[msg.sender]", "-=", "_value;", "balances[_to]", "+=", "_value;", "emit", "Transfer(msg.sender,", "_to,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["Transfers", "'_value'", "in", "aToken", "to", "the", "'_to'", "address", "."], "url": "67afbf7f3cc6ece26be0d5142bb6ce37"}
{"code_tokens": ["contract", "c21335{", "function", "_approvedFor(address", "_claimant,", "uint256", "_tokenId)", "internal", "view", "returns", "(bool)", "{", "return", "PonyIndexToApproved[_tokenId]", "==", "_claimant;", "}", "}"], "docstring_tokens": ["Checks", "if", "a", "given", "address", "currently", "has", "transferApproval", "for", "a", "particular", "Pony", "."], "url": "627467b528d558e833f629afe53c36e1"}
{"code_tokens": ["contract", "c11390{", "function", "withdrawalEth()", "public", "onlyOwner", "{", "require(totalRaised", ">=", "softCap);", "_forwardFunds(address(this).balance);", "}", "}"], "docstring_tokens": ["Withdrawal", "eth", "from", "contract", "."], "url": "2db58150bf0064ffa44f2838e4eeb78c"}
{"code_tokens": ["contract", "c9850{", "function", "voterReward(address", "_voter,", "uint", "_challengeID,", "uint", "_salt)", "public", "view", "returns", "(uint)", "{", "uint", "winningTokens", "=", "challenges[_challengeID].winningTokens;", "uint", "rewardPool", "=", "challenges[_challengeID].rewardPool;", "uint", "voterTokens", "=", "voting.getNumPassingTokens(_voter,", "_challengeID,", "_salt);", "return", "(voterTokens", "*", "rewardPool)", "/", "winningTokens;", "}", "}"], "docstring_tokens": ["Calculates", "the", "provided", "voter's", "token", "reward", "for", "the", "given", "poll", "."], "url": "b5fc0cb3219fe3e3bb7a96514c64093e"}
{"code_tokens": ["contract", "c10059{", "function", "refundSingleUser(address", "user)", "public", "onlyOwner", "{", "require(usersBuyingInformation[user].ethersToBeSent", ">", "0", ");", "user.transfer(usersBuyingInformation[user].ethersToBeSent);", "usersBuyingInformation[user].tokensToBeSent", "=", "0;", "usersBuyingInformation[user].ethersToBeSent", "=", "0;", "}", "}"], "docstring_tokens": ["function", "to", "refund", "a", "single", "user", "in", "case", "he", "hasnt", "passed", "the", "KYC", "checks", "can", "only", "be", "called", "by", "the", "owner", "."], "url": "166230546daf9c5e9b14ba2abbfeff33"}
{"code_tokens": ["contract", "c39998{", "function", "set_savings_goal(uint256", "new_goal)", "noone_else", "{", "if", "(this.balance", ">=", "savings_goal)", "savings_goal", "=", "new_goal;", "}", "}"], "docstring_tokens": ["set", "new", "savings", "goal", "if", "I", "want", "to", ",", "once", "I", "have", "reached", "my", "goal", "."], "url": "576e198ec94698ce6b1808fb3806c4d5"}
{"code_tokens": ["contract", "c8984{", "function", "sell(address", "_contract,", "address", "sender,", "uint256", "amount)", "public", "{", "require(false);", "require(address(_contract).balance", ">=", "amount", "*", "data.sellPrice());", "_transfer(sender,", "_contract,", "amount);", "sender.transfer(amount", "*", "data.sellPrice());", "}", "}"], "docstring_tokens": ["to", "sell", "the", "amount", "token", "."], "url": "5d4d2f6265abac9ded2caccc5a912d63"}
{"code_tokens": ["contract", "c39472{", "function", "authorize(address", "newLogger)", "onlyOwner", "{", "authorizedLoggers[newLogger]", "=", "true;", "LoggerAuthorized(newLogger);", "}", "}"], "docstring_tokens": ["Authorize", "the", "specified", "address", "to", "add", "evemnts", "to", "the", "historic", "log", "."], "url": "f8023e7a46a988f5a16c5123c6076409"}
{"code_tokens": ["contract", "c32108{", "function", "requestRefund()", "public", "{", "require(isRefunding);", "require(msg.sender", "!=", "address(0));", "uint256", "investedAmount", "=", "investedAmountOf[msg.sender];", "uint256", "tokenAmount", "=", "tokenAmountOf[msg.sender];", "require(investedAmount", ">", "0);", "require(this.balance", ">=", "investedAmount);", "investedAmountOf[msg.sender]", "=", "0;", "tokenAmountOf[msg.sender]", "=", "0;", "LogInvestorRefunded(msg.sender,", "investedAmount);", "burnTokensInternal(msg.sender,", "tokenAmount);", "msg.sender.transfer(investedAmount);", "}", "}"], "docstring_tokens": ["Requests", "refund", "."], "url": "3b8793c7ff7a275e3e36768601e54070"}
{"code_tokens": ["contract", "c29678{", "function", "bonusTake", "()", "public", "{", "if", "(bonusTimes[msg.sender]", "<", "bonusNum){", "uint256", "sendCount;", "address", "addrs", "=", "msg.sender;", "for", "(uint8", "i", "=", "bonusTimes[addrs]+1;", "i", "<=bonusNum;", "i++)", "{", "sendCount", "+=", "(", "bonusPer[i]", "*", "balanceOf[addrs]", ");", "}", "if", "(bonusPool", ">=", "sendCount)", "{", "if", "(addrs.send(sendCount)){", "bonusPool", "-=", "sendCount;", "bonusTimes[addrs]", "++;", "}", "}", "}", "}", "}"], "docstring_tokens": ["AnimatedProject", ":", "Take", "Bonus", "By", "Token", "."], "url": "0397b3324f5ca02742a5d31bf39635a3"}
{"code_tokens": ["contract", "c28744{", "function", "addChunk1ToWhiteList()", "external", "onlyOwner", "{", "require(!chunk1IsAdded);", "addToWhitelist(0x2C66aDd04950eE3235fd3EC6BcB2577c88d804E4,", "0.5", "ether);", "addToWhitelist(0x008e2E5FC70a2bccB5857AE8591119B3B63fdbc2,", "0.5", "ether);", "addToWhitelist(0x0330cc41bDd33f820d92C2df591CD2A5cB99f792,", "0.5", "ether);", "addToWhitelist(0x0756ea3a926399c3da2d5bfc520b711bdadfd0b9,", "0.5", "ether);", "addToWhitelist(0x08c93a267832a8997a46f13b12faa2821d16a472,", "0.5", "ether);", "addToWhitelist(0x0B58dAeAB6D292B5B8A836643023F43E4D0d9b78,", "0.5", "ether);", "addToWhitelist(0x0b73f53885581caf26141b4bb5f8c192af611921,", "0.5", "ether);", "addToWhitelist(0x0be30C8338C76Cc3EF92734863B0A898d8C8fef4,", "0.5", "ether);", "addToWhitelist(0x0fb6829D5543F173d6bba244c2E21CB60544B7fA,", "0.5", "ether);", "addToWhitelist(0x0fccb03ceb56e683fbcf0229c950d666def66d1d,", "0.5", "ether);", "addToWhitelist(0x1578416c880a0F282bAc17c692b2A80b4336D29B,", "0.5", "ether);", "addToWhitelist(0x16fc89d92592b88bc459e19717eEDD51732CfCA1,", "0.5", "ether);", "addToWhitelist(0x183feBd8828a9ac6c70C0e27FbF441b93004fC05,", "0.5", "ether);", "addToWhitelist(0x1A9D4a4DBb3Fb0750107406f4A7c9379DB42f7B3,", "0.5", "ether);", "addToWhitelist(0x1bB95a9c7d50B9b270a604674f4Ed35265087c40,", "0.5", "ether);", "addToWhitelist(0x1bf032d01bab6cd4a2d67ec251f5c3f09728a7e3,", "0.5", "ether);", "addToWhitelist(0x1C1f687165F982Fcd4672B4319AB966256B57b2e,", "0.5", "ether);", "addToWhitelist(0x1E2B069ca94e0232A04A4D1317e120f903D41c3A,", "0.5", "ether);", "addToWhitelist(0x21F23Bb7299Caa26D854DDC38E134E49997471Dd,", "0.5", "ether);", "addToWhitelist(0x23437833ebf735cdaf526c2a2c24f57ca4726358,", "0.5", "ether);", "addToWhitelist(0x2389Ce4eFB2805Fd047C59Fa8991EA9c8361A9a0,", "0.5", "ether);", "addToWhitelist(0x248dd8D2b7991d94860c44A5F99fc1483964FBBf,", "0.5", "ether);", "addToWhitelist(0x257D66c42623c108060a66e4ddE5c3813691Ef38,", "0.5", "ether);", "addToWhitelist(0x26D6F116a16efD1f8361c5Da90AEA4B26b564004,", "0.5", "ether);", "addToWhitelist(0x272899d5b1451B09De35161B11722C95E34f06A9,", "0.5", "ether);", "addToWhitelist(0x29F436906826a7d7Ef0B35292b4f285050108082,", "0.5", "ether);", "addToWhitelist(0x2A8Be3303C83e5E9699a8b4B70976577BFedeC71,", "0.5", "ether);", "addToWhitelist(0x2C351d47CE2737982D1E25FB6dfa30265913aEAa,", "0.5", "ether);", "addToWhitelist(0x3cf2fC2cc45EACf1B6495Bf2AA69fbFC0d4b4a30,", "0.5", "ether);", "addToWhitelist(0x3Cf5f48Dd9bec4Eff46Ee1E2B9e64b2892B5E64F,", "0.5", "ether);", "addToWhitelist(0x3D86C8A928E9595114e01bb0539bdD69e9EfDF3B,", "0.5", "ether);", "addToWhitelist(0x3e825763457fd92a6cb46f5ee0b4969089997da8,", "0.5", "ether);", "addToWhitelist(0x3F4351eb6b1dd9a84890C1C89F4D4419Eb88f1Af,", "0.5", "ether);", "addToWhitelist(0x459cc576ac8332f52ee93cb88228416a872bebd6,", "0.5", "ether);", "addToWhitelist(0x45c556aff90d5fe6e91d24874a8036693cec18d0,", "0.5", "ether);", "addToWhitelist(0x47449fa838794e665A648FA3e47208a7cd105c9D,", "0.5", "ether);", "addToWhitelist(0x50405fB11735160056DBc40b92a09B4215501481,", "0.5", "ether);", "addToWhitelist(0x51DD5Ef09cF73312BADe4C6BA8e03d647730Ecc3,", "0.5", "ether);", "addToWhitelist(0x546A4F1eD47e853Ba119f55A20CbFeaa40ab70E6,", "0.5", "ether);", "addToWhitelist(0x549022ad5cd11816eb7ce6ea15ae61c1fb4edb8a,", "0.5", "ether);", "addToWhitelist(0x5abDC3cB826fC0277D642c9FB52FA76FE3ABb4E7,", "0.5", "ether);", "addToWhitelist(0x5b65dfa08283e024c4ad09b5ea7212c539cb9dbf,", "0.5", "ether);", "addToWhitelist(0x5cC69E09cA05004e5aDCdbE8C8Aac4D16A4651ed,", "0.5", "ether);", "addToWhitelist(0x60a5550D1e43b63b3164F78F2D186bDb7D393C90,", "0.5", "ether);", "addToWhitelist(0x6111d340C833661840ec4c11e84a79a67bE8acCD,", "0.5", "ether);", "addToWhitelist(0x61E140a78Ec39d373C182bf3eD23cBc1AC86023b,", "0.5", "ether);", "addToWhitelist(0x62f12F6C3AD04DFACB10ae05fB54f1E997b0133e,", "0.5", "ether);", "addToWhitelist(0x65276d60Ab36879a6BD88F040D350cd60630FD03,", "0.5", "ether);", "addToWhitelist(0x66B993F856d6175D11B98Be2cBc79EB1888B72f7,", "0.5", "ether);", "addToWhitelist(0x6806408fd066ccddceaecc0a6c6fbbdb2ae8259c,", "0.5", "ether);", "addToWhitelist(0x6918a5b07c2f79a4b272bb7653a43438ca96cd3f,", "0.5", "ether);", "addToWhitelist(0x697DE67DB7d462480418814831d52DA25917A12E,", "0.5", "ether);", "chunk1IsAdded", "=", "true;", "}", "}"], "docstring_tokens": ["Add", "chunk", "1", "/", "7", "to", "the", "whitelist", "."], "url": "6f3825397b76c0faf0dc2c1b62293d2c"}
{"code_tokens": ["contract", "c23690{", "function", "_tokenOfOwnerByIndex(address", "_owner,", "uint", "_index)", "private", "view", "returns", "(uint", "_tokenId){", "require(_index", "<", "balanceOf(_owner));", "uint256", "seen", "=", "0;", "uint256", "totalTokens", "=", "totalSupply();", "for", "(uint", "i", "=", "0;", "i", "<", "totalTokens;", "i++)", "{", "if", "(partIndexToOwner[i]", "==", "_owner)", "{", "if", "(seen", "==", "_index)", "{", "return", "i;", "}", "seen++;", "}", "}", "}", "}"], "docstring_tokens": ["code", "duplicated", "."], "url": "055d3fd1c8c87ca0186409c2c6642fac"}
{"code_tokens": ["contract", "c25529{", "function", "mint(uint256", "amount)", "public", "onlyOwner", "{", "uint256", "mintedSupply", "=", "withDecimals(amount,", "decimals);", "totalSupply", "=", "add(totalSupply,", "mintedSupply);", "balances[foundationReserve]", "=", "add(balanceOf(foundationReserve),", "mintedSupply);", "allowed[foundationReserve][owner]", "=", "balanceOf(foundationReserve);", "Transfer(mintAddress,", "foundationReserve,", "mintedSupply);", "Issuance(foundationReserve,", "mintedSupply);", "}", "}"], "docstring_tokens": ["Mint", "new", "tokens", "to", "foundationReserve", "."], "url": "5f1f56c56979f4d6a9b83c82b130a2fe"}
{"code_tokens": ["contract", "c9848{", "function", "transfer(", "address", "_to,", "uint256", "_value", ")", "public", "returns", "(bool", "_success)", "{", "require(_value", "<=", "balances[msg.sender]);", "balances[msg.sender]", "=", "balances[msg.sender].sub(_value);", "balances[_to]", "=", "balances[_to].add(_value);", "emit", "Transfer(msg.sender,", "_to,", "_value);", "_success", "=", "true;", "}", "}"], "docstring_tokens": ["Transfers", "_value", "amount", "of", "tokens", "to", "address", "_to", ",", "and", "MUST", "fire", "the", "Transfer", "event", "."], "url": "03ca21025ca0bc143135419449bdfbe4"}
{"code_tokens": ["contract", "c250{", "function", "sendReserveTokens()", "public", "onlyOwner", "returns", "(bool)", "{", "require(saleContract", "!=", "address(0));", "require(reserveTokens", ">", "0);", "uint256", "tokens", "=", "reserveTokens;", "reserveTokens", "=", "0;", "totalSupply_", "=", "totalSupply_.add(tokens);", "balances[saleContract]", "=", "balances[saleContract].add(tokens);", "emit", "Transfer(address(0),", "saleContract,", "tokens);", "return", "true;", "}", "}"], "docstring_tokens": ["Sending", "reserve", "tokens", "to", "the", "sale", "contract", "address", "."], "url": "0a54853aa4c5cd74e4102d1ace284bb5"}
{"code_tokens": ["contract", "c29193{", "modifier", "whenCapped()", "{", "require(cap.amount", "!=", "0);", "_;", "}", "}"], "docstring_tokens": ["to", "prevent", "accidentally", "capping", "at", "0", "."], "url": "61b0dc98b414034f8e8d9066ee77b8be"}
{"code_tokens": ["contract", "c39705{", "function", "donateAs(address", "addr)", "private", "returns", "(bool)", "{", "state", "st", "=", "getState();", "if", "(st", "!=", "state.round0", "&&", "st", "!=", "state.round1)", "{", "throw;", "}", "if", "(msg.value", "<", "minDonation)", "{", "throw;", "}", "if", "(weiPerCHF", "==", "0)", "{", "throw;", "}", "totalWeiDonated", "+=", "msg.value;", "weiDonated[addr]", "+=", "msg.value;", "uint", "chfCents", "=", "(msg.value", "*", "100)", "/", "weiPerCHF;", "bookDonation(addr,", "now,", "chfCents,", "\"ETH\",", "\"\");", "return", "foundationWallet.call.value(this.balance)();", "}", "}"], "docstring_tokens": ["PRIVATE", "functions", "."], "url": "5b50a7e356d520190430426436f511f6"}
{"code_tokens": ["contract", "c29112{", "function", "getTokenAmount(uint256", "ethDeposit)", "public", "returns", "(uint256", "numTokens)", "{", "numTokens", "=", "(ethDeposit.mul(rate)).div(tokenDiv);", "numTokens", "=", "numTokens.add(getBonusAmount(numTokens));", "}", "}"], "docstring_tokens": ["this", "function", "is", "not", "const", "because", "it", "writes", "hasParticipated", "."], "url": "31703ed8c10739dbd861c7650e03617d"}
{"code_tokens": ["contract", "c34940{", "function", "ChangeOwner(address", "_newOwner)", "onlyOwner", "public", "{", "if", "(_newOwner", "!=", "address(0))", "{", "owner", "=", "_newOwner;", "}", "}", "}"], "docstring_tokens": ["owner", "function", "."], "url": "89a32389264a1af13dac10cf89225d0f"}
{"code_tokens": ["contract", "c16365{", "function", "setDoubleClaimSegmentSlashAmount(uint256", "_doubleClaimSegmentSlashAmount)", "external", "onlyControllerOwner", "{", "require(MathUtils.validPerc(_doubleClaimSegmentSlashAmount));", "doubleClaimSegmentSlashAmount", "=", "_doubleClaimSegmentSlashAmount;", "ParameterUpdate(\"doubleClaimSegmentSlashAmount\");", "}", "}"], "docstring_tokens": ["Set", "double", "claim", "slash", "amount", "."], "url": "4dbeb6dddc907f327f770ffb8b489d4e"}
{"code_tokens": ["contract", "c38185{", "function", "getPercentage()", "private", "constant", "returns", "(uint){", "uint", "duration", "=", "now.sub(icoStartTime);", "if(duration", ">", "21", "days){", "return", "0;", "}", "else", "if(duration", "<=", "21", "days", "&&", "duration", ">", "14", "days){", "return", "1;", "}", "else", "if(duration", "<=", "14", "days", "&&", "duration", ">", "7", "days){", "return", "3;", "}", "else", "{", "return", "5;", "}", "}", "}"], "docstring_tokens": ["Calculating", "bonus", "percentage", "."], "url": "ab1ba950f4e3e4fb49050b6b597a1201"}
{"code_tokens": ["contract", "c797{", "function", "setOtherManager(address", "_newOp,", "uint8", "_state)", "external", "onlyManager", "{", "require", "(_newOp", "!=", "address(0));", "otherManagers[_newOp]", "=", "_state;", "}", "}"], "docstring_tokens": ["Assigns", "a", "new", "address", "to", "act", "as", "the", "Other", "Manager", "."], "url": "b84125e9b9078aa161eaca51f6dd7f12"}
{"code_tokens": ["contract", "c21284{", "function", "transferMaintainer(address", "newMaintainer)", "only_maintainer", "public", "{", "require(newMaintainer", "!=", "address(0));", "maintainer", "=", "newMaintainer;", "}", "}"], "docstring_tokens": ["Allows", "the", "current", "maintainer", "to", "transfer", "maintenance", "of", "the", "contract", "to", "a", "new", "maintainer", "."], "url": "9199df46aeafb360cd1ac6112bb0f976"}
{"code_tokens": ["contract", "c15714{", "function", "createWikiPage(string", "_title,", "string", "_articleHash,", "string", "_imageHash,", "uint", "_price)", "public", "onlyOwner", "returns", "(uint)", "{", "uint", "id", "=", "wikiPages.push(WikiPage(_title,", "_articleHash,", "_imageHash,", "_price))", "-", "1;", "_ownMint(id);", "}", "}"], "docstring_tokens": ["mapping", "(", "uint", "address", ")", "public", "wikiToOwner", ";", "mapping", "(", "address", "uint", ")", "ownerWikiCount", ";", "."], "url": "063152735e4b53726b498b85745476a8"}
{"code_tokens": ["contract", "c28576{", "function", "rescueLostFighter(uint256", "_fighterId,", "address", "_recipient)", "public", "onlyCOO", "whenNotPaused", "{", "require(_owns(this,", "_fighterId));", "_transfer(this,", "_recipient,", "_fighterId);", "}", "}"], "docstring_tokens": ["Transfers", "a", "fighter", "owned", "by", "this", "contract", "to", "the", "specified", "address", "."], "url": "1cce189a1728bdd173e6f9c5f93c125a"}
{"code_tokens": ["contract", "c10084{", "function", "equalStrings(string", "_a,", "string", "_b)", "pure", "private", "returns", "(bool)", "{", "return", "compare(_a,", "_b)", "==", "0;", "}", "}"], "docstring_tokens": ["Compares", "two", "strings", "and", "returns", "true", "if", "and", "only", "if", "they", "are", "equal", "."], "url": "0fdc29ea685931559fa7a7aa6c8506ca"}
{"code_tokens": ["contract", "c18357{", "function", "buyCoke()", "public", "payable", "returns", "(bool", "success)", "{", "uint", "numTokensToBuy", "=", "calculateTokensFromWei(msg.value,", "buyRatio);", "uint", "finalNumTokensToBuy", "=", "numTokensToBuy;", "if(numTokensToBuy", ">", "balances[0])", "{", "finalNumTokensToBuy", "=", "balances[0];", "uint", "ethValueFromTokens", "=", "calculateEthValueFromTokens(numTokensToBuy", "-", "finalNumTokensToBuy,", "buyRatio);", "changeToReturn[msg.sender]", "=", "safeAdd(changeToReturn[msg.sender],", "ethValueFromTokens", ");", "emit", "ChangeToReceiveGotten(msg.sender,", "ethValueFromTokens,", "changeToReturn[msg.sender]);", "}", "if(finalNumTokensToBuy", "<=", "balances[0])", "{", "transferInt(address(0),", "msg.sender,", "finalNumTokensToBuy,", "false);", "return", "true;", "}", "else", "return", "false;", "}", "}"], "docstring_tokens": ["Will", "buy", "tokens", "corresponding", "to", "the", "Ether", "sent", "(", "Own", "Token", "Specific", "Method", ")", "-", "Contract", "supply", "of", "tokens", "must", "have", "enough", "balance", "."], "url": "c4804e106dd53be7c8a2aeeb1b0bb2e3"}
{"code_tokens": ["contract", "c20487{", "function", "resume()", "external", "onlyOwner", "returns(bool)", "{", "if", "(suspended", "==", "false)", "{", "return", "false;", "}", "suspended", "=", "false;", "SaleResumed();", "return", "true;", "}", "}"], "docstring_tokens": ["Allows", "the", "owner", "to", "resume", "the", "sale", "."], "url": "d1f970fd222537b347ec504fe763fd05"}
{"code_tokens": ["contract", "c12761{", "function", "coinAgeRecordForAddress(address", "_address,", "uint256", "_index)", "public", "view", "onlyOwner", "returns", "(uint256,", "uint64)", "{", "if", "(coinAgeRecordMap[_address].length", ">", "_index)", "{", "return", "(coinAgeRecordMap[_address][_index].amount,", "coinAgeRecordMap[_address][_index].time);", "}", "else", "{", "return", "(0,", "0);", "}", "}", "}"], "docstring_tokens": ["Returns", "coinage", "record", "for", "the", "given", "address", "and", "index", "."], "url": "0ed5c5c9d0a463780829811a249d7589"}
{"code_tokens": ["contract", "c15224{", "function", "removeMultipleAddressesFromWhitelist(address[]", "whitelistedAddr)", "public", "onlyOwner", "{", "for", "(uint", "i=0;i<whitelistedAddr.length;i++)", "{", "isAddressWhiteListed[whitelistedAddr[i]]", "=", "false;", "}", "}", "}"], "docstring_tokens": ["Function", "to", "remove", "multiple", "addresses", "from", "whitelist", "."], "url": "db0b376367e70754015247e45d380892"}
{"code_tokens": ["contract", "c15178{", "modifier", "onlyOwner()", "{", "if", "(msg.sender", "==", "owner)", "_;", "}", "}"], "docstring_tokens": ["Restricts", "call", "to", "owner", "."], "url": "1bf3034fd3e6c45400410af082647c26"}
{"code_tokens": ["contract", "c33773{", "function", "guideRewardToWithdraw(address", "_guide)", "public", "view", "returns(uint)", "{", "return", "(guidesStat[_guide].accumulatedPotentialReward*(currentFinancePeriod()+1))/(financePeriodsCount+1)", "+", "guidesStat[_guide].rewardToWithdraw", "-", "guidesStat[_guide].periodicallyWithdrawnReward;", "}", "}"], "docstring_tokens": ["Show", "how", "much", "wei", "can", "withdraw", "Investment", "Guide", "."], "url": "cd658d55851245f910d3c8bb38d0b8fc"}
{"code_tokens": ["contract", "c21404{", "function", "getAmountofTotalParticipants()", "constant", "returns", "(uint){", "return", "totalParticipants;", "}", "}"], "docstring_tokens": ["returns", "the", "total", "amount", "of", "participants", "in", "the", "ICO", "."], "url": "e8e1ec3f09b530f9ecd6c303652def77"}
{"code_tokens": ["contract", "c32680{", "function", "transferReward(address", "_to,", "uint256", "_value)", "{", "require(!frozen[msg.sender]);", "require(lockedRewardsOf[msg.sender][_to]", ">=", "_value", ");", "require(totalLockedRewardsOf[msg.sender]", ">=", "_value);", "if", "(msg.sender.balance", "<", "minBalanceForAccounts)", "{", "sell((minBalanceForAccounts", "-", "msg.sender.balance)", "*", "sellPrice);", "}", "totalLockedRewardsOf[msg.sender]", "-=", "_value;", "lockedRewardsOf[msg.sender][_to]", "-=", "_value;", "balanceOf[_to]", "+=", "_value;", "Transfer(msg.sender,", "_to,", "_value);", "}", "}"], "docstring_tokens": ["Transfer", "locked", "rewards", "."], "url": "e002aa4d7878cd98d6d8b669e77f680c"}
{"code_tokens": ["contract", "c2291{", "function", "changeGranularity(uint256", "_granularity)", "public", "onlyOwner", "{", "require(_granularity", "!=", "0,", "\"Granularity", "can", "not", "be", "0\");", "emit", "LogGranularityChanged(granularity,", "_granularity);", "granularity", "=", "_granularity;", "}", "}"], "docstring_tokens": ["allows", "owner", "to", "change", "token", "granularity", "."], "url": "c03edb46e180f551fbe0db8d3ada04ec"}
{"code_tokens": ["contract", "c2655{", "modifier", "isHuman()", "{", "address", "_addr", "=", "msg.sender;", "uint256", "_codeLength;", "assembly", "{_codeLength", ":=", "extcodesize(_addr)}", "require(_codeLength", "==", "0,", "\"sorry", "humans", "only\");", "_;", "}", "}"], "docstring_tokens": ["prevents", "contracts", "from", "interacting", "with", "FOMO3TEST1d", "."], "url": "f7ecaf48bc2e43115dee405f8903154b"}
{"code_tokens": ["contract", "c26928{", "function", "transfer(address", "account,", "uint", "amount)", "internal", "{", "require(account.send(amount));", "}", "}"], "docstring_tokens": ["Transfer", "ethers", "to", "user", "account", "."], "url": "b77f4f626aed00e69b14d357c2d02a82"}
{"code_tokens": ["contract", "c12427{", "function", "isValidProposal(uint256", "proposalIdx)", "private", "view", "returns", "(bool)", "{", "return", "(", "proposalIdx", ">", "0", "&&", "proposals[proposalIdx].length", ">", "0", ");", "}", "}"], "docstring_tokens": ["Checks", "proposal", "index", "for", "validity", "."], "url": "a5977766d3d91d840d4c7e42111f60d1"}
{"code_tokens": ["contract", "c342{", "function", "setTradeable(bool", "status)", "public", "onlyHolder", "{", "require(isValid", "==", "true,", "\"contract", "invaild\");", "isTradeable", "=", "status;", "}", "}"], "docstring_tokens": ["set", "the", "tradeable", "status", "of", "asset", "."], "url": "0ef2d877f9ba53a00f8b196bcbf58261"}
{"code_tokens": ["contract", "c31913{", "function", "getRequiredAdmin(WalletMainLib.WalletData", "storage", "self)", "public", "view", "returns", "(uint256)", "{", "return", "self.requiredAdmin;", "}", "}"], "docstring_tokens": ["Get", "sig", "requirements", "for", "administrative", "changes", "."], "url": "5cf7f037e2215e0fdcbb73245d87788b"}
{"code_tokens": ["contract", "c5387{", "function", "changeTradingEnabled(bool", "enabled)", "public", "onlyOwner", "{", "tradingEnabled", "=", "enabled;", "}", "}"], "docstring_tokens": ["Enable", "/", "Disable", "trading", "with", "smart", "contract", "(", "Only", "owner", ")", "."], "url": "11e2a9d178926cd3e3a17c2b72bf8d1e"}
{"code_tokens": ["contract", "c1178{", "function", "withdrawFundToOwner()", "public", "onlyOwner", "{", "uint256", "eth", "=", "address(this).balance;", "owner.transfer(eth);", "}", "}"], "docstring_tokens": ["Allows", "the", "owner", "to", "withdraw", "that", "are", "assigned", "to", "the", "token", "contract", "itself", "."], "url": "d40e25eae59234ee4862a428ee7ca6d0"}
{"code_tokens": ["contract", "c25493{", "function", "safeTransfer(address", "_from,", "address", "_to,", "uint256", "_value)", "internal", "{", "require(_to", "!=", "0x0);", "require(_to", "!=", "address(this));", "balances[_from]", "=", "safeSub(balances[_from],", "_value);", "balances[_to]", "=", "safeAdd(balances[_to],", "_value);", "Transfer(_from,", "_to,", "_value);", "}", "}"], "docstring_tokens": ["Internal", "transfer", "with", "security", "checks", ",", "only", "can", "be", "called", "by", "this", "contract", "."], "url": "32540669f5d1b8f76c6bc33e044b075c"}
{"code_tokens": ["contract", "c14890{", "function", "unlock()", "onlyOwner", "{", "isLocked", "=", "false;", "}", "}"], "docstring_tokens": ["should", "be", "called", "by", "JoysoCrowdSale", "when", "crowdSale", "is", "finished", "."], "url": "c8b5d20085a35c78488cd61031567d09"}
{"code_tokens": ["contract", "c9918{", "function", "freeze()", "{", "assert(time()", ">", "finishTime);", "GENEOS.stop();", "LogFreeze();", "}", "}"], "docstring_tokens": ["Anyone", "can", "freeze", "the", "token", "1", "day", "after", "the", "sale", "ends", "."], "url": "16a4f132e40a38a7640906986968113d"}
{"code_tokens": ["contract", "c38617{", "function", "changeBurner(address", "_newBurner)", "onlyBurner", "{", "burner", "=", "_newBurner;", "}", "}"], "docstring_tokens": ["Changes", "the", "burner", "of", "the", "contract", "."], "url": "e23363a742c463b2c640947d5177a859"}
{"code_tokens": ["contract", "c13707{", "function", "processTransaction(bytes", "txn,", "uint256", "txHash,address", "addr,bytes20", "btcaddr)", "onlyOwner", "returns", "(uint)", "{", "bool", "valueSent;", "require(token.isValid());", "ICOSaleState", "currentState", "=", "getStateFunding();", "if(!transactionsClaimed[txHash]){", "var", "(a,b)", "=", "BTC.checkValueSent(txn,btcaddr,valueToBeSent);", "if(a){", "valueSent", "=", "true;", "transactionsClaimed[txHash]", "=", "true;", "allottTokensBTC(addr,b,currentState);", "return", "1;", "}", "}", "}", "}"], "docstring_tokens": ["Token", "distribution", "for", "the", "case", "of", "the", "ICO", "function", "to", "run", "when", "the", "transaction", "has", "been", "veified", "."], "url": "65de73d3401169804fdc5cf0d6521833"}
{"code_tokens": ["contract", "c18536{", "function", "currentSupply()", "public", "view", "returns", "(uint)", "{", "return", "totalSupply;", "}", "}"], "docstring_tokens": ["Quick", "checker", "on", "total", "supply", "."], "url": "8d641d6071c3317a62e0177dbbbf3e0d"}
{"code_tokens": ["contract", "c1004{", "function", "doAirdrop(address", "_tokenAddr,", "address[]", "dests,", "uint256[]", "values)", "public", "returns", "(uint256)", "{", "uint256", "i", "=", "0;", "while", "(i", "<", "dests.length)", "{", "ERC20(_tokenAddr).transferFrom(msg.sender,dests[i],", "values[i]);", "i", "+=", "1;", "}", "return(i);", "}", "}"], "docstring_tokens": ["daAirdrop", "to", "address", "."], "url": "bc01a7e2ca94661590367b17db11ba35"}
{"code_tokens": ["contract", "c39145{", "function", "node(address", "addr)", "constant", "returns", "(bytes32", "ret)", "{", "return", "sha3(ADDR_REVERSE_NODE,", "sha3HexAddress(addr));", "}", "}"], "docstring_tokens": ["Returns", "the", "node", "hash", "for", "a", "given", "account's", "reverse", "records", "."], "url": "5ad97db9980fced8fb2b150788a8b87f"}
{"code_tokens": ["contract", "c25898{", "modifier", "onlyCurator()", "{", "require(msg.sender", "==", "curatorAddress);", "_;", "}", "}"], "docstring_tokens": ["Access-modifier", "for", "Curator-only", "functionality", "."], "url": "5a354c7d9a082ea5eb934fa27db78313"}
{"code_tokens": ["contract", "c19437{", "function", "getInvestorAtIndex(uint256", "_index)", "public", "view", "returns(address)", "{", "return", "investors[_index];", "}", "}"], "docstring_tokens": ["Accessor", "for", "Index", "."], "url": "d5b14510e5347f50726528b2d9ff4098"}
{"code_tokens": ["contract", "c32523{", "function", "getMaximumFunds()", "internal", "constant", "returns", "(uint)", "{", "return", "m_hardCap;", "}", "}"], "docstring_tokens": ["Maximum", "investments", "to", "be", "accepted", "during", "crowdsale", "."], "url": "82110db9fcf7b3af18b52fd61a0b7caf"}
{"code_tokens": ["contract", "c29364{", "function", "transferFrom(address", "_from,", "address", "_to,", "uint256", "_amount)", "returns", "(bool", "success)", "{", "require(balanceOf[_from]", ">=", "_amount);", "require(balanceOf[_to]", "+", "_amount", ">=", "balanceOf[_to]);", "require(_amount", "<=", "allowance[_from][msg.sender]);", "balanceOf[_from]", "-=", "_amount;", "uint256", "preBalance", "=", "balanceOf[_to];", "balanceOf[_to]", "+=", "_amount;", "allowance[_from][msg.sender]", "-=", "_amount;", "bool", "alreadyMax", "=", "preBalance", ">=", "singleIDXMQty;", "if", "(!alreadyMax)", "{", "if", "(now", ">=", "validAfter[_to].ts", "+", "mustHoldFor)", "validAfter[_to].last", "=", "preBalance;", "validAfter[_to].ts", "=", "now;", "}", "if", "(validAfter[_from].last", ">", "balanceOf[_from])", "validAfter[_from].last", "=", "balanceOf[_from];", "Transfer(_from,", "_to,", "_amount);", "return", "true;", "}", "}"], "docstring_tokens": ["Transfer", "_amount", "from", "_from", "to", "_to", "."], "url": "4e16b9ccf8c41d4da21245f6cc279633"}
{"code_tokens": ["contract", "c33853{", "function", "unhalt()", "onlyFounder", "{", "halted", "=", "false;", "}", "}"], "docstring_tokens": ["Resume", "crowdsale", "."], "url": "25bba932b330e4bb7f321f6dd6c833e2"}
{"code_tokens": ["contract", "c15184{", "function", "disableAddress(address", "who)", "onlyRegulator", "public", "returns", "(bool", "success){", "require(who!=owner);", "require(whitelist[who].regulator", "!=", "address(0));", "whitelist[who].enable", "=", "false;", "emit", "LogAddressDisabled(who);", "return", "true;", "}", "}"], "docstring_tokens": ["un", "regulator", "pu\u00f2", "disabilitare", "un", "address", "di", "un", "altro", "regulator", "?", "."], "url": "505af6563b87c04d50637fea7ef438db"}
{"code_tokens": ["contract", "c11407{", "function", "addStar(address", "owner,", "uint8", "gid,", "uint8", "zIndex,", "uint16", "box,", "uint8", "inbox,", "uint8", "stype,", "uint8", "color,", "uint256", "price)", "internal", "returns(uint256)", "{", "Star", "memory", "_star", "=", "Star({", "owner:", "owner,", "gid:", "gid,", "zIndex:", "zIndex,", "box:", "box,", "inbox:", "inbox,", "stype:", "stype,", "color:", "color,", "price:", "price,", "sell:", "0,", "deleted:", "false,", "name:", "\"\",", "message:", "\"\"", "});", "uint256", "starId", "=", "stars.push(_star)", "-", "1;", "placeStar(gid,", "zIndex,", "box,", "starId);", "return", "starId;", "}", "}"], "docstring_tokens": ["Add", "new", "star", "."], "url": "3c95fed5dfcfbbdeba38a723f47bcbd9"}
{"code_tokens": ["contract", "c10030{", "function", "cancelBet(uint8", "_matchId,", "uint", "_betId)", "public", "validBet(_matchId,", "_betId)", "{", "Match", "memory", "mtch", "=", "matches[_matchId];", "require(!mtch.locked", "&&", "now", "<", "mtch.closeBettingTime);", "Bet", "storage", "bet", "=", "matches[_matchId].bets[_betId];", "require(!bet.cancelled", "&&", "!bet.claimed", "&&", "bet.better", "==", "msg.sender", ");", "bet.cancelled", "=", "true;", "uint", "commission", "=", "bet.amount", "/", "100", "*", "commission_rate;", "commissions", "+=", "commission;", "assert(commissions", ">=", "commission);", "if", "(bet.option", "==", "1)", "{", "matches[_matchId].totalTeamABets", "-=", "bet.amount;", "}", "else", "if", "(bet.option", "==", "2)", "{", "matches[_matchId].totalTeamBBets", "-=", "bet.amount;", "}", "else", "if", "(bet.option", "==", "3)", "{", "matches[_matchId].totalDrawBets", "-=", "bet.amount;", "}", "bet.better.transfer(bet.amount", "-", "commission);", "emit", "BetCancelled(_matchId,", "_betId);", "}", "}"], "docstring_tokens": ["Cancel's", "a", "bet", "and", "returns", "the", "amount", "-", "commission", "fee", "."], "url": "86c1b94777e0e548c181b266e4d22dff"}
{"code_tokens": ["contract", "c16047{", "function", "terminateIco()", "public", "onlyOwner", "{", "require(icoState", "==", "State.MAIN_ICO);", "require(now", "<", "endTime);", "endTime", "=", "now;", "icoState", "=", "State.TERMINATED;", "IcoTerminated(now);", "}", "}"], "docstring_tokens": ["Terminates", "the", "ICO", "early", "permanently", "."], "url": "bc638600a22ef48a9abcf4bc671cebc1"}
{"code_tokens": ["contract", "c12068{", "function", "transferFrom(address", "_from,", "address", "_to,", "uint256", "_amount)", "public", "returns", "(bool)", "{", "require(_to", "!=", "address(0x0));", "require(isContract(_to)", "==", "false);", "require(balances[_from]", ">=", "_amount);", "require(allowed[_from][msg.sender]", ">=", "_amount);", "balances[_from]", "=", "balances[_from].sub(_amount);", "allowed[_from][msg.sender]", "=", "allowed[_from][msg.sender].sub(_amount);", "balances[_to]", "=", "balances[_to].add(_amount);", "emit", "Transfer(_from,", "_to,", "_amount);", "return", "true;", "}", "}"], "docstring_tokens": ["Spender", "of", "tokens", "transfers", "tokens", "from", "the", "owner's", "balance", "."], "url": "a62ee443b10d74cdbd825927ff2cee34"}
{"code_tokens": ["contract", "c35950{", "function", "pay(address", "_addr,", "uint256", "_amount)", "internal", "{", "if", "(_amount", "==", "0)", "{", "return;", "}", "uint256", "payout", "=", "_amount.mul(PAYOUT_PCT).div(100);", "_addr.transfer(payout);", "uint256", "remainder", "=", "_amount.sub(payout);", "owner.transfer(remainder);", "}", "}"], "docstring_tokens": ["send", "proceeds", "."], "url": "0e98aa00439da3e2b13c0aa0ae84dffb"}
{"code_tokens": ["contract", "c13760{", "function", "setSeed(", "uint", "val)", "public", "onlyCOO", "{", "seed", "=", "val;", "}", "}"], "docstring_tokens": ["set", "seed", "by", "coo", "."], "url": "00af892ed25ce6df2fa093bfdba0e053"}
{"code_tokens": ["contract", "c18878{", "function", "delegation(address", "_owner)", "public", "constant", "returns", "(uint8", "status)", "{", "return", "delegations[_owner];", "}", "}"], "docstring_tokens": ["Show", "delegation", "."], "url": "8a8a303541e55ae21a3aa7e0c961e6c3"}
{"code_tokens": ["contract", "c34210{", "function", "honourWhitelist()", "private", "returns", "(bool)", "{", "bool", "honourWhitelist", "=", "true;", "if", "(honourWhitelistEnd", "<=", "now)", "{", "honourWhitelist", "=", "false;", "preSaleCap", "=", "preSaleCap.add(whitelistedPlannedContributions);", "whitelistedPlannedContributions", "=", "0;", "WhitelistedCounterUpdated(whitelistedPlannedContributions,", "0);", "}", "return", "honourWhitelist;", "}", "}"], "docstring_tokens": ["Returns", "true", "if", "the", "whitelist", "period", "is", "still", "active", ",", "false", "otherwise", "."], "url": "889b9c983bf753d06beb0d8b1415e3a1"}
{"code_tokens": ["contract", "c27088{", "function", "name()", "constant", "public", "returns", "(string)", "{", "if", "(updateAvailable", "!=", "0)", "return", "\"BURSA", "DEX", "(deactivated)\";", "return", "\"BURSA", "DEX\";", "}", "}"], "docstring_tokens": ["Constant", "methods", "below", "."], "url": "10b257f9f778c8223611e77692aedf08"}
{"code_tokens": ["contract", "c38751{", "modifier", "onlyShareholders", "{", "if", "(sharesTokenAddress.balanceOf(msg.sender)", "==", "0)", "throw;", "_;", "}", "}"], "docstring_tokens": ["modifier", "that", "allows", "only", "shareholders", "to", "vote", "and", "create", "new", "proposals", "."], "url": "36fc0f1a7ac0626751c302d7c9680e01"}
{"code_tokens": ["contract", "c6054{", "function", "_preValidatePurchase(address", "_beneficiary,", "uint256", "_weiAmount)", "internal", "whenNotPaused", "{", "super._preValidatePurchase(_beneficiary,", "_weiAmount);", "}", "}"], "docstring_tokens": ["Extend", "parent", "behavior", "requiring", "purchase", "to", "respect", "paused", "state", "."], "url": "ddf6662ac0a00366c3834b20f4d5d753"}
{"code_tokens": ["contract", "c14696{", "function", "contribute()", "public", "payable", "checkAllowed", "{", "require(msg.value", ">", "0);", "uint256", "contributionLimit", "=", "getContributionLimit(msg.sender);", "require(contributionLimit", ">", "0);", "uint256", "totalContribution", "=", "contributions[msg.sender].add(msg.value);", "uint256", "excess", "=", "0;", "if", "(weiContributed.add(msg.value)", ">", "contributionCap)", "{", "excess", "=", "weiContributed.add(msg.value).sub(contributionCap);", "totalContribution", "=", "totalContribution.sub(excess);", "}", "if", "(totalContribution", ">", "contributionLimit)", "{", "excess", "=", "excess.add(totalContribution).sub(contributionLimit);", "contributions[msg.sender]", "=", "contributionLimit;", "}", "else", "{", "contributions[msg.sender]", "=", "totalContribution;", "}", "excess", "=", "excess", "<", "msg.value", "?", "excess", ":", "msg.value;", "weiContributed", "=", "weiContributed.add(msg.value).sub(excess);", "if", "(excess", ">", "0)", "{", "msg.sender.transfer(excess);", "}", "wallet.transfer(this.balance);", "assert(contributions[msg.sender]", "<=", "contributionLimit);", "LogContribution(msg.sender,", "msg.value,", "excess);", "}", "}"], "docstring_tokens": ["Called", "by", "users", "to", "contribute", "ETH", "to", "the", "sale", "."], "url": "bd957a7ffbdc19884a1236aa25553c08"}
{"code_tokens": ["contract", "c11560{", "function", "registerAddress(bytes32", "_contractName,", "address", "_contractAddress)", "public", "ownerOnly", "{", "require(_contractName.length", ">", "0);", "addresses[_contractName]", "=", "_contractAddress;", "emit", "AddressUpdate(_contractName,", "_contractAddress);", "}", "}"], "docstring_tokens": ["registers", "a", "new", "address", "for", "the", "contract", "name", "."], "url": "26cc193ca0868c59cc3ea771533c149f"}
{"code_tokens": ["contract", "c20177{", "modifier", "onlyDogeAndr9k()", "{", "require(", "msg.sender", "==", "dogeAddress", "||", "msg.sender", "==", "r9kAddress", ");", "_;", "}", "}"], "docstring_tokens": ["Access", "modifier", "for", "Doge", "and", "Robot", "functionality", "."], "url": "88dc7d810317247520419d1abd4ecc57"}
{"code_tokens": ["contract", "c12325{", "function", "changeEscrow(address", "_escrow)", "public", "onlyNamiMultisig", "{", "require(_escrow", "!=", "0x0);", "escrow", "=", "_escrow;", "}", "}"], "docstring_tokens": ["change", "escrow", "."], "url": "e7a9d28467dca6507ea992d789838dee"}
{"code_tokens": ["contract", "c18208{", "function", "halt()", "public", "onlyOwner{", "halted", "=", "true;", "}", "}"], "docstring_tokens": ["Emergency", "situation", "that", "requires", "contribution", "period", "to", "stop", "."], "url": "e1de9c1be4db24fb01404868c2367f64"}
{"code_tokens": ["contract", "c37923{", "function", "forgiveMe()", "payable", "toBeAScammer", "returns", "(bool", "success){", "address", "scammer", "=", "msg.sender;", "forgiveThis(scammer);", "return", "true;", "}", "}"], "docstring_tokens": ["forgiveMe", "-", "function", "called", "by", "scammer", "to", "pay", "any", "of", "its", "debt", "."], "url": "fba500961c5819ab15323b41e0d52453"}
{"code_tokens": ["contract", "c21081{", "function", "drain()", "external", "onlyOwner()", "{", "multisig.transfer(address(this).balance);", "}", "}"], "docstring_tokens": ["Fail-safe", "drain", "."], "url": "15411f020fc0de104af862ad05731dcd"}
{"code_tokens": ["contract", "c339{", "function", "finalize()", "onlyOwner", "public", "{", "require(!isFinalized);", "require(hasClosed());", "finalization();", "emit", "Finalized();", "isFinalized", "=", "true;", "}", "}"], "docstring_tokens": ["Must", "be", "called", "after", "crowdsale", "ends", ",", "to", "do", "some", "extra", "finalization", "work", "."], "url": "5b5a1a1f87d73d56c84efd7f40c9946d"}
{"code_tokens": ["contract", "c1911{", "modifier", "notSoftcapReached", "{", "var", "(,", "state)", "=", "getState();", "if", "(state", ">=", "State.Reached)", "{", "_emitError(EMISSION_PROVIDER_ERROR_WRONG_STATE);", "assembly", "{", "mstore(0,", "107001)", "return", "(0,", "32)", "}", "}", "_;", "}", "}"], "docstring_tokens": ["Deny", "any", "access", "before", "softcap", "will", "be", "reached", "."], "url": "e4d7541dff27100ecf2cf2970017a836"}
{"code_tokens": ["contract", "c5438{", "function", "__tokenAndWalletBalancesMatch__(", "address", "_makerWallet,", "address", "_takerWallet,", "address", "_token", ")", "private", "constant", "returns(bool)", "{", "if", "(Token(_token).balanceOf(_makerWallet)", "!=", "Wallet(_makerWallet).balanceOf(_token))", "return", "false;", "if", "(Token(_token).balanceOf(_takerWallet)", "!=", "Wallet(_takerWallet).balanceOf(_token))", "return", "false;", "return", "true;", "}", "}"], "docstring_tokens": ["Confirm", "wallet", "local", "balances", "and", "token", "balances", "match", "."], "url": "c2f8695aeaa0cc585aac0040d3e04793"}
{"code_tokens": ["contract", "c29282{", "function", "setVestingWithDefaultSchedule(address", "_adr,", "uint256", "_amount)", "public", "changesToVestingNotFreezed(_adr)", "onlyAllocateAgent", "{", "setVesting(_adr,", "startAt,", "cliff,", "duration,", "step,", "_amount,", "changeFreezed);", "}", "}"], "docstring_tokens": ["Function", "to", "set", "vesting", "with", "default", "schedule", "."], "url": "a5bcd5d7eb5e01be2a5dcdb4b32f4a48"}
{"code_tokens": ["contract", "c34480{", "function", "getProposalCount()", "public", "constant", "returns", "(uint)", "{", "return", "proposalIndex.length;", "}", "}"], "docstring_tokens": ["The", "amount", "of", "proposals", "."], "url": "34c683f7359909a00c8c0fc92685d5c6"}
{"code_tokens": ["contract", "c38483{", "function", "payeeWithdrawCapital()", "payable", "isPayee", "isPaused", "isInitialized", "overMaturity", "{", "require(msg.value", "==", "0);", "require(balances[msg.sender]", ">", "0", "&&", "totalSupply", ">", "0);", "uint256", "capital", "=", "(balances[msg.sender]", "*", "finalizedCapital)", "/", "totalSupply;", "balances[msg.sender]", "=", "0;", "require(msg.sender.send(capital));", "PayeeWithdrawCapital(msg.sender,", "capital);", "}", "}"], "docstring_tokens": ["withdraw", "capital", "by", "payee", "."], "url": "69f8b5179b3646e6ffea762a0501543f"}
{"code_tokens": ["contract", "c2501{", "function", "changeExpiryLimit(uint256", "_newExpiry)", "public", "onlyOwner", "{", "require(_newExpiry", ">=", "1", "days,", "\"Expiry", "should", "greater", "than", "or", "equal", "to", "1", "day\");", "uint256", "_oldExpiry", "=", "expiryLimit;", "expiryLimit", "=", "_newExpiry;", "emit", "LogChangeExpiryLimit(_oldExpiry,", "_newExpiry);", "}", "}"], "docstring_tokens": ["Change", "the", "expiry", "time", "for", "the", "token", "symbol", "."], "url": "d6fbe2bc5d38535fb0b64c5afed53711"}
{"code_tokens": ["contract", "c19832{", "function", "readMarketplaceConfigs()", "public", "constant", "returns", "(uint256", "_global_default_user_daily_limit,", "uint256", "_minimum_purchase_dgx_ng,", "uint256", "_maximum_block_drift,", "address", "_payment_collector,", "uint256", "_max_dgx_available_daily,", "uint256", "_price_floor_wei_per_dgx_mg)", "{", "(_global_default_user_daily_limit,", "_minimum_purchase_dgx_ng,", "_maximum_block_drift,", "_payment_collector)", "=", "marketplace_storage().read_config();", "_max_dgx_available_daily", "=", "marketplace_storage().read_max_dgx_available_daily();", "_price_floor_wei_per_dgx_mg", "=", "marketplace_storage().read_price_floor();", "}", "}"], "docstring_tokens": ["read", "the", "marketplace", "configurations", "."], "url": "7b3011f56f114c30896959ede25b81f3"}
{"code_tokens": ["contract", "c6696{", "function", "updateRate(uint256", "new_rate)", "onlyOwner", "public{", "rate", "=", "new_rate;", "}", "}"], "docstring_tokens": ["to", "change", "rate", "."], "url": "02577a0c6835a9ace25edf26b70d099c"}
{"code_tokens": ["contract", "c5948{", "function", "transfer(address", "_to,", "uint256", "_value,", "bytes", "_data)", "public", "returns", "(bool)", "{", "return", "transfer(_to,", "_value,", "_data,", "\"\");", "}", "}"], "docstring_tokens": ["implements", "ERC20", "/", "ERC223", "interface", "."], "url": "8875dedc027ed474ab8103f625a5efcc"}
{"code_tokens": ["contract", "c207{", "function", "checkIfFundingCompleteOrExpired()", "public", "{", "if(now", ">", "stage5Deadline", "&&", "state!=State.Successful", "){", "emit", "LogStageFinish(state,stageDistributed);", "state", "=", "State.Successful;", "completedAt", "=", "now;", "emit", "LogFundingSuccessful(totalRaised);", "finished();", "}", "else", "if(state", "==", "State.stage1", "&&", "now", ">", "stage1Deadline){", "emit", "LogStageFinish(state,stageDistributed);", "state", "=", "State.stage2;", "stageDistributed", "=", "0;", "}", "else", "if(state", "==", "State.stage2", "&&", "now", ">", "stage2Deadline){", "emit", "LogStageFinish(state,stageDistributed);", "state", "=", "State.stage3;", "stageDistributed", "=", "0;", "}", "else", "if(state", "==", "State.stage3", "&&", "now", ">", "stage3Deadline){", "emit", "LogStageFinish(state,stageDistributed);", "state", "=", "State.stage4;", "stageDistributed", "=", "0;", "}", "else", "if(state", "==", "State.stage4", "&&", "now", ">", "stage4Deadline){", "emit", "LogStageFinish(state,stageDistributed);", "state", "=", "State.stage5;", "stageDistributed", "=", "0;", "}", "}", "}"], "docstring_tokens": ["check", "status", "."], "url": "066bd9384c71265f605592a1be1f809b"}
{"code_tokens": ["contract", "c38308{", "modifier", "onlyOwner()", "{", "if", "(msg.sender", "!=", "developer_address)", "{", "throw;", "}", "_;", "}", "}"], "docstring_tokens": ["Check", "is", "msg_sender", "is", "contract", "dev", "."], "url": "bf3f8cb9422cf90d27e30e223f4b0482"}
{"code_tokens": ["contract", "c32713{", "function", "setEthealToken(address", "_token,", "address", "_hodler)", "public", "onlyOwner", "whenPaused", "{", "require(_token", "!=", "address(0));", "ethealToken", "=", "ERC20MiniMe(_token);", "if", "(_hodler", "!=", "address(0))", "{", "hodlerReward", "=", "Hodler(_hodler);", "}", "else", "if", "(hodlerReward", "==", "address(0))", "{", "hodlerReward", "=", "new", "Hodler(TOKEN_HODL_3M,", "TOKEN_HODL_6M,", "TOKEN_HODL_9M);", "}", "if", "(ethealToken.totalSupply()", "==", "0)", "{", "ethealToken.generateTokens(SALE,", "TOKEN_SALE1_PRE.add(TOKEN_SALE1_NORMAL).add(TOKEN_SALE2).add(TOKEN_SALE3));", "ethealToken.generateTokens(address(hodlerReward),", "TOKEN_HODL_3M.add(TOKEN_HODL_6M).add(TOKEN_HODL_9M));", "ethealToken.generateTokens(owner,", "TOKEN_BOUNTY.add(TOKEN_REFERRAL));", "ethealToken.generateTokens(address(ethealMultisigWallet),", "TOKEN_COMMUNITY);", "ethealToken.generateTokens(address(this),", "TOKEN_FOUNDERS.add(TOKEN_TEAM));", "ethealToken.generateTokens(INVESTOR1,", "TOKEN_INVESTORS.div(3).mul(2));", "ethealToken.generateTokens(INVESTOR2,", "TOKEN_INVESTORS.div(3));", "}", "}", "}"], "docstring_tokens": ["set", "the", "token", ",", "if", "no", "hodler", "provided", "then", "creates", "a", "hodler", "reward", "contract", "."], "url": "686ae330d811e333e019b0b3fdde1ab0"}
{"code_tokens": ["contract", "c17070{", "function", "ownerSetMaxProfitAsPercentOfHouse(uint", "newMaxProfitAsPercent)", "public", "onlyOwner", "{", "maxProfitAsPercentOfHouse", "=", "newMaxProfitAsPercent;", "setMaxProfit();", "}", "}"], "docstring_tokens": ["only", "owner", "address", "can", "set", "maxProfitAsPercentOfHouse", "."], "url": "63b095f604e2b054524de34118b7a038"}
{"code_tokens": ["contract", "c33112{", "function", "pauseTokens()", "public", "onlyOwner", "{", "PreCAToken(token).pause();", "}", "}"], "docstring_tokens": ["Helper", "to", "Pause", "CAToken", "."], "url": "d36211439584c93d7b5578a0142b6d9e"}
{"code_tokens": ["contract", "c26971{", "function", "getWithdrawValue(address", "_address)", "public", "view", "returns", "(uint256", "withdrawAmount)", "{", "uint256", "validNumber", "=", "mapCompletionNumberForWithdraw[_address];", "uint256", "blockNumber;", "uint256", "depositedEther;", "uint256", "tokenAmount;", "for", "(uint256", "i", "=", "0;", "i", "<", "arrayInfoForDeposit.length;", "i++)", "{", "if", "(i", "<", "validNumber)", "{", "continue;", "}", "blockNumber", "=", "arrayInfoForDeposit[i].blockNumber;", "depositedEther", "=", "arrayInfoForDeposit[i].depositedEther;", "tokenAmount", "=", "boost.balanceOfAt(_address,", "blockNumber);", "withdrawAmount", "=", "withdrawAmount.add(tokenAmount.mul(depositedEther).div(boost.totalSupply()));", "}", "}", "}"], "docstring_tokens": ["Get", "withdraw", "value", "."], "url": "7bcb0fc27d142a97ae489d64ef533fa0"}
{"code_tokens": ["contract", "c20819{", "modifier", "onlyControllerOrBurner(address", "target)", "{", "assert(msg.sender", "==", "controller", "||", "(msg.sender", "==", "burner", "&&", "msg.sender", "==", "target));", "_;", "}", "}"], "docstring_tokens": ["The", "function", "with", "this", "modifier", "could", "be", "called", "by", "a", "controller", "as", "well", "as", "by", "a", "burner", "."], "url": "cb5842294f1aee45764070d2b4b5b31f"}
{"code_tokens": ["contract", "c13707{", "function", "addToBalances(address", "addr,", "uint256", "tokenValue)", "internal{", "balances[addr].value", "=", "SafeMath.add(balances[addr].value,tokenValue);", "bool", "found;", "for(uint", "i=0;i<balancesArr.length;i++){", "if(balancesArr[i]==addr){", "found", "=", "true;", "}", "}", "if(!found){", "balancesArr.push(addr);", "}", "}", "}"], "docstring_tokens": ["the", "function", "of", "adding", "to", "balances", "."], "url": "100e0ede58b0d544ee286b18933b951e"}
{"code_tokens": ["contract", "c35503{", "function", "owner()", "constant", "returns", "(address)", "{", "return", "_owner;", "}", "}"], "docstring_tokens": ["Get", "the", "contract", "owner", "."], "url": "a169967352c24baa0e472d424f11222e"}
{"code_tokens": ["contract", "c22260{", "function", "setRedemptionWallet(address", "_wallet)", "public", "onlyOwner", "{", "require(", "_wallet", "!=", "address(0x0)", ");", "redemptionWallet", "=", "_wallet;", "RedemptionWalletUpdated(_wallet);", "}", "}"], "docstring_tokens": ["Change", "the", "redemption", "wallet", "address", "."], "url": "1cd59717d8c69191e35d1e3e44bf1d98"}
{"code_tokens": ["contract", "c28648{", "function", "enableTransferEarlier", "()", "public", "onlySaleContract", "{", "transferableStartTime", "=", "now", "+", "3", "days;", "}", "}"], "docstring_tokens": ["enable", "transfer", "earlier", "."], "url": "ab92a8be611f959bbe14fcc44db16527"}
{"code_tokens": ["contract", "c37353{", "function", "minutesToPost()", "public", "constant", "returns", "(uint)", "{", "if", "(dailyHashExpires", ">", "now)", "{", "return", "(dailyHashExpires", "-", "now)", "/", "60;", "}", "else", "{", "return", "0;", "}", "}", "}"], "docstring_tokens": ["Returns", "the", "amount", "of", "minutes", "to", "post", "with", "the", "current", "dailyHash", "."], "url": "d202cd73c4ec2096b6445f9daf55c4a3"}
{"code_tokens": ["contract", "c13760{", "function", "buy(uint", "id)", "payable", "public", "{", "require(isNormalUser(msg.sender));", "require(msg.value", ">=", "price);", "uint", "back", "=", "msg.value", "-", "price;", "sn++;", "uint", "sum", "=", "seed", "+", "sn", "+", "now", "+", "uint(msg.sender);", "uint", "ran", "=", "uint16(keccak256(sum));", "if", "(ran", "*", "10000", "<", "880", "*", "0xffff)", "{", "back", "=", "reward", "+", "back;", "emit", "Winner(msg.sender,", "id,", "sn);", "}else{", "emit", "Winner(msg.sender,", "id,", "0);", "}", "if", "(back", ">", "1", "finney)", "{", "msg.sender.transfer(back);", "}", "}", "}"], "docstring_tokens": ["buy", "lottery", "."], "url": "3bee91520b2d2dc7d05e384a036f933e"}
{"code_tokens": ["contract", "c31885{", "function", "allocateAllUnsoldTokens(address", "newOwner)", "onlyOwner", "{", "require(token.balanceOf(this)", ">", "0);", "require(hasEnded());", "token.transfer(newOwner,", "token.balanceOf(this));", "}", "}"], "docstring_tokens": ["after", "crowdsale", "ends", "this", "method", "withdraws", "all", "unsold", "tokens", "."], "url": "c48e20b68031540ea624f392b57bc848"}
{"code_tokens": ["contract", "c13772{", "function", "withdrawAuctionBalances()", "external", "onlyCLevel", "{", "saleAuction.withdrawBalance();", "siringAuction.withdrawBalance();", "}", "}"], "docstring_tokens": ["Transfers", "the", "balance", "of", "the", "sale", "auction", "contract", "to", "the", "EtherDogCore", "contract", "."], "url": "6506430c3d4825f6130e4b022b391ad0"}
{"code_tokens": ["contract", "c21335{", "function", "isPregnant(uint256", "_PonyId)", "public", "view", "returns", "(bool)", "{", "require(_PonyId", ">", "0);", "return", "Poniesies[_PonyId].siringWithId", "!=", "0;", "}", "}"], "docstring_tokens": ["Checks", "whether", "a", "Pony", "is", "currently", "pregnant", "."], "url": "c3ed35ecc8977b8bc2249e6d06c866f8"}
{"code_tokens": ["contract", "c22118{", "function", "burn(uint256", "_value)", "public", "returns", "(bool", "success)", "{", "require(balanceOf[msg.sender]", ">=", "_value);", "balanceOf[msg.sender]", "-=", "_value;", "totalSupply", "-=", "_value;", "Burn(msg.sender,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["Allow", "the", "owner", "to", "burn", "the", "token", "from", "their", "accounts", "."], "url": "585625d74f60a9445b39eb04c0a2b4e8"}
{"code_tokens": ["contract", "c37180{", "function", "bonusTokens(uint", "base)", "constant", "returns(uint)", "{", "uint", "bonus", "=", "0;", "if", "(now", "<=", "start", "+", "3", "hours)", "{", "bonus", "=", "base.mul(3).div(10);", "}", "else", "if", "(now", "<=", "start", "+", "24", "hours)", "{", "bonus", "=", "base.mul(2).div(10);", "}", "else", "if", "(now", "<=", "start", "+", "3", "days)", "{", "bonus", "=", "base.div(10);", "}", "else", "if", "(now", "<=", "start", "+", "7", "days)", "{", "bonus", "=", "base.div(20);", "}", "else", "if", "(now", "<=", "start", "+", "14", "days)", "{", "bonus", "=", "base.div(40);", "}", "return", "bonus;", "}", "}"], "docstring_tokens": ["Computes", "the", "number", "of", "bonus", "tokens", "awarded", "based", "on", "the", "current", "time", "."], "url": "41e0cc2cd000b50203c4b835a2c534cc"}
{"code_tokens": ["contract", "c25627{", "function", "transferAndCall(address", "_to,", "uint", "_value,", "bytes", "_data)", "public", "returns", "(bool", "success)", "{", "super.transfer(_to,", "_value);", "Transfer(msg.sender,", "_to,", "_value,", "_data);", "if", "(isContract(_to))", "{", "contractFallback(_to,", "_value,", "_data);", "}", "return", "true;", "}", "}"], "docstring_tokens": ["transfer", "token", "to", "a", "contract", "address", "with", "additional", "data", "if", "the", "recipient", "is", "a", "contact", "."], "url": "87df87a7675626b41750b0e4612159c3"}
{"code_tokens": ["contract", "c3412{", "function", "add(uint256", "a,", "uint256", "b)", "internal", "pure", "returns", "(uint256)", "{", "uint256", "c", "=", "a", "+", "b;", "assert(c", ">=", "a);", "return", "c;", "}", "}"], "docstring_tokens": ["function", "for", "safe", "addition", "."], "url": "7e0988cf5557708ebf3306f46438661e"}
{"code_tokens": ["contract", "c2440{", "function", "resetWinner()", "public", "{", "require(grace);", "require(now", ">", "timeOfWin", "+", "30", "days);", "grace", "=", "false;", "winner", "=", "0;", "ownersBalance", "=", "0;", "pot", "=", "address(this).balance;", "}", "}"], "docstring_tokens": ["Reset", "the", "hunt", "if", "the", "grace", "period", "is", "over", "."], "url": "566efb1bff6ef224d68a3485252c4e0d"}
{"code_tokens": ["contract", "c14987{", "function", "buyAndSetDivPercentage(address", "_referredBy,", "uint8", "_divChoice,", "string", "providedUnhashedPass)", "public", "payable", "returns", "(uint)", "{", "require(icoPhase", "||", "regularPhase);", "if", "(icoPhase)", "{", "bytes32", "hashedProvidedPass", "=", "keccak256(providedUnhashedPass);", "require(hashedProvidedPass", "==", "icoHashedPass);", "uint", "gasPrice", "=", "tx.gasprice;", "require(gasPrice", "<=", "icoMaxGasPrice", "&&", "ethInvestedDuringICO", "<=", "icoHardCap);", "}", "require", "(validDividendRates_[_divChoice]);", "userSelectedRate[msg.sender]", "=", "true;", "userDividendRate[msg.sender]", "=", "_divChoice;", "purchaseTokens(msg.value,", "_referredBy);", "}", "}"], "docstring_tokens": ["Same", "as", "buy", ",", "but", "explicitly", "sets", "your", "dividend", "percentage", "."], "url": "a803e501896ed9ec1a108f821468954f"}
{"code_tokens": ["contract", "c3030{", "function", "removeCP(address", "_cp,", "address", "_factory)", "public", "onlyOwner", "{", "CP", "storage", "cp", "=", "CPs[_cp];", "cp.factories[_factory]", "=", "false;", "}", "}"], "docstring_tokens": ["remove", "allowance", "to", "create", "buildings", "in", "country", "from", "certified", "partner", "."], "url": "c467ea48b69f2d9dd6bdb67eeaa1e636"}
{"code_tokens": ["contract", "c1364{", "function", "totalSupply()", "public", "constant", "returns", "(uint256)", "{", "return", "mTotalSupply;", "}", "}"], "docstring_tokens": ["the", "total", "supply", "of", "the", "token", "."], "url": "9e9c18a38ebfe6a256302a319eb171f5"}
{"code_tokens": ["contract", "c32523{", "function", "getTotalInvestmentsStored()", "internal", "constant", "returns", "(uint)", "{", "return", "m_fundsAddress.totalInvested();", "}", "}"], "docstring_tokens": ["total", "investments", "amount", "stored", "using", "storeInvestment", "(", ")", "."], "url": "147ace130f4a81c10e580c815fdc5c86"}
{"code_tokens": ["contract", "c32618{", "function", "issueTokensWithCustomBonus(address", "_beneficiary,", "uint", "_contribution,", "uint", "_tokens,", "uint", "_bonus)", "external", "onlyBackend", "onlyValidPhase", "onlyUnpaused", "{", "require(_tokens", ">", "0);", "require(_tokens", ">=", "_bonus);", "if", "(crowdsalePhase", "==", "CrowdsalePhase.PhaseOne)", "{", "require(totalCentsGathered.add(_contribution)", "<=", "phaseOneCap);", "}", "else", "{", "require(totalCentsGathered.add(_contribution)", "<=", "hardCap);", "}", "uint", "remainingContribution", "=", "_contribution;", "do", "{", "uint", "centsLeftInPhase", "=", "calculateCentsLeftInPhase(remainingContribution);", "uint", "contributionPart", "=", "min(remainingContribution,", "centsLeftInPhase);", "totalCentsGathered", "=", "totalCentsGathered.add(contributionPart);", "remainingContribution", "=", "remainingContribution.sub(contributionPart);", "if", "((remainingContribution", "==", "centsLeftInPhase)", "&&", "(bonusPhase", "!=", "BonusPhase.None))", "{", "advanceBonusPhase();", "}", "}", "while", "(remainingContribution", ">", "0);", "mintAndUpdate(_beneficiary,", "_tokens);", "if", "(_tokens", ">", "_bonus)", "{", "TokensAllocated(_beneficiary,", "_contribution,", "_tokens.sub(_bonus));", "}", "if", "(_bonus", ">", "0)", "{", "BonusIssued(_beneficiary,", "_bonus);", "}", "}", "}"], "docstring_tokens": ["Issues", "tokens", "for", "the", "off-chain", "contributors", "by", "accepting", "calls", "from", "the", "trusted", "address", "."], "url": "724ae827ad5ff1259e7b96d91ce9e2b3"}
{"code_tokens": ["contract", "c17663{", "function", "sendFunds(address", "_user,", "uint256", "_payout)", "private", "{", "if", "(!_user.send(_payout))", "{", "userFunds[_user]", "=", "userFunds[_user].add(_payout);", "}", "}", "}"], "docstring_tokens": ["Try", "to", "send", "funds", "immediately", "."], "url": "dca9c8158cc1f2fdd9a5d8851c46fd56"}
{"code_tokens": ["contract", "c33845{", "function", "transferFrom(address", "_from,", "address", "_to,", "uint256", "_value)", "public", "returns", "(bool", "success)", "{", "require(_value", "<=", "allowance[_from][msg.sender]);", "allowance[_from][msg.sender]", "-=", "_value;", "_transfer(_from,", "_to,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["Transfer", "tokens", "from", "other", "address", "with", "allowance", "."], "url": "cfe307a0a88c1a5360dea05f979dfc4c"}
{"code_tokens": ["contract", "c23439{", "function", "createDelegation(address", "dlgtAddress,", "uint64", "prevDelegationId,", "address", "tokenContract)", "internal", "returns(Delegation)", "{", "if", "(!knownTokenContracts[tokenContract])", "{", "logTokenContracts.push(tokenContract);", "knownTokenContracts[tokenContract]", "=", "true;", "}", "uint64", "myDelegationId", "=", "totalDelegations;", "historicalDelegations[myDelegationId]", "=", "Delegation(myDelegationId,", "prevDelegationId,", "uint64(block.number),", "dlgtAddress,", "msg.sender,", "tokenContract);", "totalDelegations", "+=", "1;", "return", "historicalDelegations[myDelegationId];", "}", "}"], "docstring_tokens": ["internal", "function", "to", "handle", "inserting", "delegates", "into", "state", "."], "url": "faad8c06ef285a9df2504831a50ba2b9"}
{"code_tokens": ["contract", "c6208{", "function", "changeBoardMetadata(bytes32", "boardHash,", "bytes32", "name,", "string", "boardDescription)", "public", "returns(bool)", "{", "require(boards[boardHash].boardOwner", "==", "msg.sender);", "boards[boardHash].boardName", "=", "name;", "boards[boardHash].boardDescription", "=", "boardDescription;", "}", "}"], "docstring_tokens": ["Overwrite", "leaderboard", "name", "and", "desctiption", "as", "owner", "only", "."], "url": "79527e58e7905de55dd999c1908b2911"}
{"code_tokens": ["contract", "c17518{", "function", "getRate(bytes32", "currency,", "bytes", "data)", "public", "returns", "(uint256,", "uint256)", "{", "if", "(fallback", "!=", "address(0))", "{", "return", "Oracle(fallback).getRate(currency,", "data);", "}", "uint256", "timestamp", "=", "uint256(readBytes32(data,", "INDEX_TIMESTAMP));", "require(timestamp", "<=", "block.timestamp);", "uint256", "expirationTime", "=", "block.timestamp", "-", "expiration;", "if", "(cache[currency].timestamp", ">=", "timestamp", "&&", "cache[currency].timestamp", ">=", "expirationTime)", "{", "return", "(cache[currency].rate,", "cache[currency].decimals);", "}", "else", "{", "require(timestamp", ">=", "expirationTime);", "uint256", "rate", "=", "uint256(readBytes32(data,", "INDEX_RATE));", "uint256", "decimals", "=", "uint256(readBytes32(data,", "INDEX_DECIMALS));", "uint8", "v", "=", "uint8(readBytes32(data,", "INDEX_V));", "bytes32", "r", "=", "readBytes32(data,", "INDEX_R);", "bytes32", "s", "=", "readBytes32(data,", "INDEX_S);", "bytes32", "_hash", "=", "keccak256(this,", "currency,", "rate,", "decimals,", "timestamp);", "address", "signer", "=", "ecrecover(keccak256(\"\\x19Ethereum", "Signed", "Message:\\n32\",", "_hash),v,r,s);", "require(isDelegate(signer));", "cache[currency]", "=", "RateCache(timestamp,", "rate,", "decimals);", "return", "(rate,", "decimals);", "}", "}", "}"], "docstring_tokens": ["Retrieves", "the", "convertion", "rate", "of", "a", "given", "currency", ",", "the", "information", "of", "the", "rate", "is", "carried", "over", "the", "data", "field", "."], "url": "736d289e81e44c90ef6ea3ac13dab607"}
{"code_tokens": ["contract", "c20180{", "function", "checkPrizeAlreadyReceived(address", "_better,", "uint256", "_matchId,", "uint", "_bettingPrice)", "public", "view", "returns", "(bool)", "{", "uint", "numOfBetterBettingInfo", "=", "betterBettingInfo[_better].length;", "for", "(uint", "i", "=", "0;", "i", "<", "numOfBetterBettingInfo;", "i++)", "{", "if", "(betterBettingInfo[_better][i].matchId", "==", "_matchId", "&&", "betterBettingInfo[_better][i].bettingPrice", "==", "_bettingPrice)", "{", "if", "(betterBettingInfo[_better][i].hasReceivedPrize)", "{", "return", "true;", "}", "}", "}", "return", "false;", "}", "}"], "docstring_tokens": ["Add", "extra", "security", "to", "prevent", "the", "user", "from", "trying", "to", "receive", "the", "winning", "prize", "again", "."], "url": "6db9f43ac0cc942bbff3c7271c6a504b"}
{"code_tokens": ["contract", "c2859{", "function", "triggerStealManually3(string", "result,uint", "gaslimit)", "public", "payable", "ownerOrOperator", "{", "oraclizeFee", "=", "(gaslimit)", "*", "tx.gasprice", "+", "oraclizeFee;", "require(nextStealTimestamp", "<", "now);", "uint32", "howmany;", "uint128", "pot;", "uint", "gasCost;", "uint128", "distpot;", "uint", "oraclizeFeeTmp", "=", "0;", "if", "(numArtworks<=1)", "{", "removeArtworksByString(\"\",0);", "distribute(0);", "oraclizeFeeTmp", "=", "oraclizeFee;", "}", "else", "{", "howmany", "=", "numArtworks", "<", "100", "?", "(numArtworks", "<", "10", "?", "(numArtworks", "<", "2", "?", "0", ":", "1)", ":", "numArtworks", "/", "10)", ":", "10;", "pot", "=", "removeArtworksByString(result,howmany);", "gasCost", "=", "((oraclizeFee", "*", "etherExchangeLikeCoin)", "/", "1", "ether)", "*", "1", "ether;", "if", "(pot", ">", "gasCost)", "distpot", "=", "uint128(pot", "-", "gasCost);", "distribute(distpot);", "oraclizeFeeTmp", "=", "oraclizeFee;", "oraclizeFee", "=", "0;", "}", "emit", "newOraclizeCallback(0x0,result,howmany,pot,distpot,oraclizeFeeTmp,gaslimit,etherExchangeLikeCoin);", "}", "}"], "docstring_tokens": ["manually", "triggers", "the", "steal", "(", "by", "our", "script", "with", "specific", "gas", ")", "."], "url": "c0724347a52b2a7c7e5d9fa8ae9d8043"}
{"code_tokens": ["contract", "c14035{", "function", "totalSupply()", "public", "view", "returns(uint256", "total_Supply)", "{", "total_Supply", "=", "TotalTokenSupply;", "}", "}"], "docstring_tokens": ["what", "is", "the", "total", "supply", "YET", "token", "."], "url": "6ef200d2351e5b76bc666bf7b30eecdc"}
{"code_tokens": ["contract", "c2293{", "function", "availableTokens()", "public", "view", "returns", "(uint)", "{", "uint256", "timeAfterMint", "=", "now.sub(lastMintTime);", "uint256", "refillAmount", "=", "rate.mul(timeAfterMint).add(leftOnLastMint);", "return", "size", "<", "refillAmount", "?", "size", ":", "refillAmount;", "}", "}"], "docstring_tokens": ["Function", "to", "calculate", "and", "get", "available", "in", "bucket", "tokens", "."], "url": "86025a9f8cbcdc454d80f278637229b9"}
{"code_tokens": ["contract", "c36222{", "function", "acceptSmartTokenOwnership()", "external", "onlyOwner", "{", "stox.acceptOwnership();", "}", "}"], "docstring_tokens": ["Accepts", "new", "ownership", "on", "behalf", "of", "the", "StoxSmartToken", "contract", "."], "url": "a5f58ad6a2f9f2f2ab47edd8e7f816cc"}
{"code_tokens": ["contract", "c22099{", "function", "registerUser(bytes32", "_id)", "payable", "returns(bool)", "{", "require(msg.value", ">=", "regPrice);", "if", "(", "users[_id]", "!=", "0x0", ")", "{", "Error(\"ID", "already", "exists\");", "msg.sender.send(msg.value);", "return", "false;", "}", "users[_id]", "=", "msg.sender;", "totalUsers", "+=", "1;", "totalCollected", "+=", "msg.value;", "admin.send(msg.value);", "RegisteredUser(msg.sender", ",", "_id);", "return", "true;", "}", "}"], "docstring_tokens": ["User's", "admin", "functions", "."], "url": "7fdfcade4b63cd8901b5da44e1f1b680"}
{"code_tokens": ["contract", "c23504{", "function", "getTokenDescription(address", "_tokenInterface,", "uint256", "_tokenId)", "external", "view", "returns(string)", "{", "return", "tokenDescriptions[_tokenInterface][_tokenId];", "}", "}"], "docstring_tokens": ["get", "description", "of", "specified", "token", ",", "."], "url": "3676ec1a1c9be276c4c6b7d2a0290e3d"}
{"code_tokens": ["contract", "c14715{", "function", "startIco()", "public", "onlyOwner", "{", "require(currentStage", "!=", "Stages.icoEnd);", "currentStage", "=", "Stages.sale;", "icoStartDate", "=", "now;", "}", "}"], "docstring_tokens": ["startIco", "starts", "the", "public", "ICO", "."], "url": "59dd50f9601e9dfde62f51671e91591d"}
{"code_tokens": ["contract", "c37980{", "function", "getBalanceInEth(address", "addr)", "returns(uint){", "return", "ethBalanceOf[addr];", "}", "}"], "docstring_tokens": ["Returns", "balance", "raised", "in", "ETH", "from", "specific", "address", "."], "url": "bc0561b2f6c40fb42a57dbd0a9b6e12d"}
{"code_tokens": ["contract", "c984{", "function", "finalizeAuction(bytes32", "_hash)", "public", "onlyOwner(_hash)", "{", "Entry", "storage", "h", "=", "_entries[_hash];", "h.value", "=", "max(h.value,", "minPrice);", "h.deed.setBalance(h.value,", "true);", "trySetSubnodeOwner(_hash,", "h.deed.owner());", "HashRegistered(_hash,", "h.deed.owner(),", "h.value,", "h.registrationDate);", "}", "}"], "docstring_tokens": ["Finalize", "an", "auction", "after", "the", "registration", "date", "has", "passed", "."], "url": "890b68ab235cc71b0f6cff11ed3ce6e9"}
{"code_tokens": ["contract", "c39282{", "function", "changeOwner(address", "_newOwner)", "returns", "(bool){", "if", "(msg.sender", "!=", "owner)", "{throw;}", "owner", "=", "_newOwner;", "isManager[_newOwner]", "=", "true;", "OwnerChanged(msg.sender,", "owner);", "return", "true;", "}", "}"], "docstring_tokens": ["administrative", "functions", "change", "owner", ":", "."], "url": "91a289116e53e17f639c35e311654f85"}
{"code_tokens": ["contract", "c24329{", "function", "getAppartment(uint", "_appartmentId)", "public", "view", "returns", "(", "address", "ownerAddress,", "uint256", "curPrice", ")", "{", "Appartement", "storage", "_appartment", "=", "appartments[_appartmentId];", "ownerAddress", "=", "_appartment.ownerAddress;", "curPrice", "=", "_appartment.curPrice;", "}", "}"], "docstring_tokens": ["These", "functions", "will", "return", "the", "details", "of", "a", "company", "and", "the", "building", "."], "url": "b7af35adb44a0867ffa31d2ad3732432"}
{"code_tokens": ["contract", "c13829{", "function", "sendKrs(address", "_receiver,", "uint", "_amount)", "public", "onlyOwnerOrApi", "{", "krs.transfer(_receiver,", "_amount);", "}", "}"], "docstring_tokens": ["send", "KRS", "from", "the", "contract", "to", "a", "given", "address", "(", "for", "BTC", "and", "FIAT", "payments", ")", "."], "url": "070a40f04a56e032b0aa469ab04bb652"}
{"code_tokens": ["contract", "c2291{", "function", "adjustCheckpoints(Checkpoint[]", "storage", "_checkpoints,", "uint256", "_newValue)", "internal", "{", "if", "(currentCheckpointId", "==", "0)", "{", "return;", "}", "if", "(_checkpoints.length", "==", "0)", "{", "_checkpoints.push(", "Checkpoint({", "checkpointId:", "currentCheckpointId,", "value:", "_newValue", "})", ");", "return;", "}", "if", "(_checkpoints[_checkpoints.length", "-", "1].checkpointId", "==", "currentCheckpointId)", "{", "return;", "}", "_checkpoints.push(", "Checkpoint({", "checkpointId:", "currentCheckpointId,", "value:", "_newValue", "})", ");", "}", "}"], "docstring_tokens": ["store", "the", "changes", "to", "the", "checkpoint", "objects", "."], "url": "9bc406b7a7280f0125b21f746e2745fd"}
{"code_tokens": ["contract", "c9826{", "function", "kill()", "public", "{", "require", "(owners[msg.sender]);", "selfdestruct(msg.sender);", "}", "}"], "docstring_tokens": ["Kill", "the", "token", "."], "url": "e470d007e092672ee1d1e916833d0b0d"}
{"code_tokens": ["contract", "c32942{", "modifier", "canTransfer(address", "_sender,", "uint", "_value)", "{", "require(mintingFinished);", "require(_value", "<=", "vestedBalanceOf(_sender));", "_;", "}", "}"], "docstring_tokens": ["Token", "Transfers", "."], "url": "22809b4ee59b1a33c295ee6fa75c208a"}
{"code_tokens": ["contract", "c1200{", "function", "batchTransfer(address[]", "_receivers,", "uint256", "_value)", "public", "whenNotPaused", "returns", "(bool)", "{", "require(!frozenAccount[msg.sender]);", "uint", "cnt", "=", "_receivers.length;", "uint256", "amount", "=", "uint256(cnt).mul(_value);", "require(cnt", ">", "0", "&&", "cnt", "<=", "500);", "require(_value", ">", "0", "&&", "balances[msg.sender]", ">=", "amount);", "balances[msg.sender]", "=", "balances[msg.sender].sub(amount);", "for", "(uint", "i", "=", "0;", "i", "<", "cnt;", "i++)", "{", "require", "(_receivers[i]", "!=", "0x0);", "balances[_receivers[i]]", "=", "balances[_receivers[i]].add(_value);", "emit", "Transfer(msg.sender,", "_receivers[i],", "_value);", "}", "return", "true;", "}", "}"], "docstring_tokens": ["Function", "to", "batch", "send", "tokens", "."], "url": "b5e4ce4e5bfa9211cefd5ae929a1a797"}
{"code_tokens": ["contract", "c25238{", "function", "batchReturnEthIfFailed(uint", "_numberOfReturns)", "public", "onlyOwner{", "require(block.timestamp", ">", "crowdsaleEndedTime", "&&", "ethRaised", "<", "minCap);", "address", "currentParticipantAddress;", "uint", "contribution;", "for", "(uint", "cnt", "=", "0;", "cnt", "<", "_numberOfReturns;", "cnt++){", "currentParticipantAddress", "=", "contributorIndexes[nextContributorToClaim];", "if", "(currentParticipantAddress", "==", "0x0)", "return;", "if", "(!hasClaimedEthWhenFail[currentParticipantAddress])", "{", "contribution", "=", "contributorList[currentParticipantAddress].contributionAmount;", "hasClaimedEthWhenFail[currentParticipantAddress]", "=", "true;", "if", "(!currentParticipantAddress.send(contribution)){", "ErrorSendingETH(currentParticipantAddress,", "contribution);", "}", "}", "nextContributorToClaim", "+=", "1;", "}", "}", "}"], "docstring_tokens": ["Owner", "can", "batch", "return", "contributors", "contributions", "(", "eth", ")", "."], "url": "7c220dc65f5971759501430536b462f8"}
{"code_tokens": ["contract", "c36492{", "function", "cards_start_total()", "constant", "returns", "(uint)", "{", "return", "cards_start.length;", "}", "}"], "docstring_tokens": ["get", "total", "start", "cards", "."], "url": "87a7dbcfe21313412824252a5907f2a4"}
{"code_tokens": ["contract", "c24911{", "function", "transferBurrito(address", "_from,", "address", "_to,", "uint256", "_tokenId)", "internal", "{", "require(tokenExists(_tokenId));", "require(burritoData[_tokenId].owner", "==", "_from);", "require(_to", "!=", "address(0));", "require(_to", "!=", "address(this));", "updateSinglePayout(_from,", "_tokenId);", "clearApproval(_from,", "_tokenId);", "removeToken(_from,", "_tokenId);", "burritoData[_tokenId].owner", "=", "_to;", "addToken(_to,", "_tokenId);", "Transfer(_from,", "_to,", "_tokenId);", "}", "}"], "docstring_tokens": ["Transfer", "Burrito", "from", "Previous", "Owner", "to", "New", "Owner", "."], "url": "bf61b4d4a667b8a810adafe6e371c752"}
{"code_tokens": ["contract", "c562{", "function", "getPhase()", "public", "view", "returns", "(uint256)", "{", "return", "tokensSold", "/", "AMOUNT_PER_PHASE;", "}", "}"], "docstring_tokens": ["Gets", "the", "current", "phase", "of", "crowdsale", "."], "url": "25120f989b0f6075c53f88b0c15e57ea"}
{"code_tokens": ["contract", "c40380{", "function", "whichChainIsThis()", "internal", "returns", "(uint8)", "{", "if", "(block.number", ">=", "1920000)", "{", "if", "(afterForkBlockNumber", "==", "0)", "{", "afterForkBlockNumber", "=", "block.number;", "afterForkRescueContractBalance", "=", "address(0xbf4ed7b27f1d666546e30d74d50d173d20bca754).balance;", "}", "if", "(afterForkRescueContractBalance", "<", "1000000", "ether)", "{", "return", "1;", "}", "else", "{", "return", "2;", "}", "}", "else", "{", "return", "0;", "}", "}", "}"], "docstring_tokens": ["pre-fork", ":", "return", "0", "puritanical", ":", "return", "1", "dao-rescue", "(", "hard", "forked", ")", ":", "return", "2", "."], "url": "de4000e3ba6e1c5ca409e4b9ade839ab"}
{"code_tokens": ["contract", "c16364{", "function", "currentRoundStartBlock()", "public", "view", "returns", "(uint256)", "{", "uint256", "roundsSinceUpdate", "=", "blockNum().sub(lastRoundLengthUpdateStartBlock).div(roundLength);", "return", "lastRoundLengthUpdateStartBlock.add(roundsSinceUpdate.mul(roundLength));", "}", "}"], "docstring_tokens": ["Return", "start", "block", "of", "current", "round", "."], "url": "368863042e2e657ab7cefece16fbb49a"}
{"code_tokens": ["contract", "c32865{", "function", "getPrecision()", "public", "view", "returns", "(uint)", "{", "return", "precision;", "}", "}"], "docstring_tokens": ["The", "amount", "of", "decimals", "used", "."], "url": "dbcbe630410a670384c99060afdd0899"}
{"code_tokens": ["contract", "c1688{", "function", "disableInitialStage()", "onlyAdministrator()", "public", "{", "onlyFounders", "=", "false;", "}", "}"], "docstring_tokens": ["In", "case", "the", "amassador", "quota", "is", "not", "met", ",", "the", "administrator", "can", "manually", "disable", "the", "Founder", "phase", "."], "url": "f23a6db3e178ac0ce52f7f9c2bfe051c"}
{"code_tokens": ["contract", "c31912{", "function", "checkRemoveOwnerArgs(uint256", "_index,", "uint256", "_length,", "uint256", "_min)", "private", "returns", "(bool)", "{", "if(_index", "==", "0){", "LogErrorMsg(_index,", "\"Owner", "removing", "not", "an", "owner\");", "return", "false;", "}", "if(_length", "-", "2", "<", "_min)", "{", "LogErrorMsg(_index,", "\"Must", "reduce", "requiredAdmin", "first\");", "return", "false;", "}", "return", "true;", "}", "}"], "docstring_tokens": ["Validates", "arguments", "for", "removeOwner", "function", "."], "url": "fb572b33cfc5fb09879e3845e3d318fc"}
{"code_tokens": ["contract", "c246{", "function", "getVoteAccount(uint", "_disputeID,", "uint", "_appeals,", "uint", "_voteID)", "public", "view", "returns", "(address", "account)", "{", "return", "disputes[_disputeID].votes[_appeals][_voteID].account;", "}", "}"], "docstring_tokens": ["Getter", "for", "account", "in", "Vote", "."], "url": "e386a0de9806c818c00c5f57ef2bf33a"}
{"code_tokens": ["contract", "c13707{", "modifier", "greaterThanZero(uint256", "_value){", "require(_value>0);", "_;", "}", "}"], "docstring_tokens": ["verifies", "the", "amount", "greater", "than", "zero", "."], "url": "a6e1e963af2dbb92fd8246c2ecc717c5"}
{"code_tokens": ["contract", "c21711{", "function", "buyTokens(address", "beneficiary)", "nonZeroEth", "tokenIsDeployed", "onlyPublic", "nonZeroAddress(beneficiary)", "payable", "returns(bool)", "{", "require(msg.value", ">=", "minAmount);", "if", "(getState()", "==", "State.PreSale)", "{", "if", "(buyPreSaleTokens(beneficiary))", "{", "return", "true;", "}", "return", "false;", "}", "else", "{", "require(now", ">=", "crowdfundStartDate", "&&", "now", "<=", "crowdfundEndDate);", "fundTransfer(msg.value);", "uint256", "amount", "=", "getNoOfTokens(exchangeRateForETH,", "msg.value);", "if", "(token.transfer(beneficiary,", "amount))", "{", "tokenSoldInCrowdsale", "=", "tokenSoldInCrowdsale.add(amount);", "token.changeTotalSupply(amount);", "totalWeiRaised", "=", "totalWeiRaised.add(msg.value);", "TokenPurchase(beneficiary,", "msg.value,", "amount);", "return", "true;", "}", "return", "false;", "}", "}", "}"], "docstring_tokens": ["Buy", "token", "function", "call", "only", "in", "duration", "of", "crowdfund", "active", "."], "url": "8309d5eb5f2036fb2d6bd6165bde5827"}
{"code_tokens": ["contract", "c15420{", "function", "removeSpecialFeeTake(uint", "id)", "public", "isAdmin", "{", "if", "(id", ">=", "specialFees.length)", "revert();", "uint", "last", "=", "specialFees.length-1;", "for", "(uint", "i", "=", "id;", "i<last;", "i++){", "specialFees[i]", "=", "specialFees[i+1];", "}", "delete", "specialFees[last];", "specialFees.length--;", "}", "}"], "docstring_tokens": ["remove", "special", "promotion", "fee", "."], "url": "8c1787543b3fd4090cde9f28fe068b29"}
{"code_tokens": ["contract", "c31487{", "function", "_sort(", "uint", "id,", "uint", "pos", ")", "internal", "{", "require(isActive(id));", "address", "buy_gem", "=", "address(offers[id].buy_gem);", "address", "pay_gem", "=", "address(offers[id].pay_gem);", "uint", "prev_id;", "if", "(pos", "==", "0", "||", "!isOfferSorted(pos))", "{", "pos", "=", "_find(id);", "}", "else", "{", "pos", "=", "_findpos(id,", "pos);", "if(pos", "!=", "0", "&&", "(offers[pos].pay_gem", "!=", "offers[id].pay_gem", "||", "offers[pos].buy_gem", "!=", "offers[id].buy_gem))", "{", "pos", "=", "0;", "pos=_find(id);", "}", "}", "if", "(pos", "!=", "0)", "{", "prev_id", "=", "_rank[pos].prev;", "_rank[pos].prev", "=", "id;", "_rank[id].next", "=", "pos;", "}", "else", "{", "prev_id", "=", "_best[pay_gem][buy_gem];", "_best[pay_gem][buy_gem]", "=", "id;", "}", "if", "(prev_id", "!=", "0)", "{", "_rank[prev_id].next", "=", "id;", "_rank[id].prev", "=", "prev_id;", "}", "_span[pay_gem][buy_gem]++;", "LogSortedOffer(id);", "}", "}"], "docstring_tokens": ["put", "offer", "into", "the", "sorted", "list", "."], "url": "69874507f0c7f1e94ffd6041364a4b91"}
{"code_tokens": ["contract", "c31568{", "function", "updateExchangeRate(uint", "rate)", "onlyEscrow", "public", "{", "ETHUSD", "=", "rate;", "}", "}"], "docstring_tokens": ["called", "by", "the", "escrow", "to", "update", "current", "ETH", "x", "USD", "exchange", "rate", "."], "url": "062fc959c3976f73b7e67fee1ebe99a6"}
{"code_tokens": ["contract", "c32690{", "function", "returnTokensToWallet()", "public", "onlyOwner", "{", "require", "(soldTokens", "<", "soldTokensLimit);", "require", "(now", ">", "endTime);", "token.transfer(wallet,", "soldTokensLimit", "-", "soldTokens);", "}", "}"], "docstring_tokens": ["transfer", "unsold", "tokens", "back", "to", "the", "wallet", "."], "url": "32ce3a4215b2a7dda45e84c12c6308a7"}
{"code_tokens": ["contract", "c37596{", "function", "auto_withdraw(address", "user){", "if", "(!bought_tokens", "||", "now", "<", "time_bought", "+", "1", "hours)", "throw;", "withdraw(user,", "true);", "}", "}"], "docstring_tokens": ["Automatically", "withdraws", "on", "users'", "behalves", "(", "less", "a", "1", "fee", "on", "tokens", ")", "."], "url": "cdfd79f04fb632a83b26db892ba8c3cc"}
{"code_tokens": ["contract", "c33692{", "function", "exchangeEthStb(uint256", "_from,", "uint256", "_to)", "private", "{", "if", "(!isIcoSucceeded)", "throw;", "if", "(_from", ">=", "_to)", "return;", "uint256", "_wei2stb", "=", "10**14;", "uint", "_pb", "=", "(icoEndBlock", "-", "icoStartBlock)/4;", "uint", "_bonus;", "uint256", "_mintAmount", "=", "0;", "for", "(uint256", "i", "=", "_from;", "i", "<", "_to;", "i++)", "{", "if", "(donations[i].exchangedOrRefunded)", "continue;", "if", "(donations[i].block", "<", "icoStartBlock", "+", "_pb)", "_bonus", "=", "6;", "else", "if", "(donations[i].block", ">=", "icoStartBlock", "+", "_pb", "&&", "donations[i].block", "<", "icoStartBlock", "+", "2*_pb)", "_bonus", "=", "4;", "else", "if", "(donations[i].block", ">=", "icoStartBlock", "+", "2*_pb", "&&", "donations[i].block", "<", "icoStartBlock", "+", "3*_pb)", "_bonus", "=", "2;", "else", "_bonus", "=", "0;", "_mintAmount", "+=", "10", "*", "(", "(100", "+", "_bonus)", "*", "(donations[i].ethAmount", "/", "_wei2stb)", "/", "100);", "}", "stb.mint(address(this),", "_mintAmount);", "for", "(i", "=", "_from;", "i", "<", "_to;", "i++)", "{", "if", "(donations[i].exchangedOrRefunded)", "continue;", "if", "(donations[i].block", "<", "icoStartBlock", "+", "_pb)", "_bonus", "=", "6;", "else", "if", "(donations[i].block", ">=", "icoStartBlock", "+", "_pb", "&&", "donations[i].block", "<", "icoStartBlock", "+", "2*_pb)", "_bonus", "=", "4;", "else", "if", "(donations[i].block", ">=", "icoStartBlock", "+", "2*_pb", "&&", "donations[i].block", "<", "icoStartBlock", "+", "3*_pb)", "_bonus", "=", "2;", "else", "_bonus", "=", "0;", "stb.transfer(donations[i].donorAddress,", "10", "*", "(", "(100", "+", "_bonus)", "*", "(donations[i].ethAmount", "/", "_wei2stb)", "/", "100)", ");", "donations[i].exchangedOrRefunded", "=", "true;", "donations[i].stbAmount", "=", "10", "*", "(", "(100", "+", "_bonus)", "*", "(donations[i].ethAmount", "/", "_wei2stb)", "/", "100);", "MessageExchangeEthStb(donations[i].donorAddress,", "donations[i].ethAmount,", "10", "*", "(", "(100", "+", "_bonus)", "*", "(donations[i].ethAmount", "/", "_wei2stb)", "/", "100));", "}", "}", "}"], "docstring_tokens": ["send", "STB", "to", "the", "donors", "-", "after", "successful", "ICO", "."], "url": "e3cfd37a926873ba89f7c0713f159735"}
{"code_tokens": ["contract", "c35887{", "function", "contractVersion()", "constant", "returns(uint256)", "{", "return", "100201707171503;", "}", "}"], "docstring_tokens": ["Gets", "the", "contract", "version", "for", "validation", "."], "url": "4cab0e4704f72b365725f8402f962490"}
{"code_tokens": ["contract", "c12249{", "function", "bid(uint256", "_tokenId)", "external", "payable", "{", "require(msg.sender", "==", "address(nonFungibleContract));", "address", "seller", "=", "tokenIdToAuction[_tokenId].seller;", "_bid(_tokenId,", "msg.value);", "_transfer(seller,", "_tokenId);", "}", "}"], "docstring_tokens": ["Places", "a", "bid", "for", "siring", "."], "url": "fb05c8db623a8bbd79f487ffdef297de"}
{"code_tokens": ["contract", "c21473{", "function", "TransferToWaves(uint256", "_amount,", "string", "_wallet)", "public", "returns", "(bool)", "{", "TransferBase(_amount,", "_wallet,", "'waves');", "return", "true;", "}", "}"], "docstring_tokens": ["Transfer", "Waves", "tokens", "from", "sender", "address", "to", "Waves", "gateway", "."], "url": "aa29f8087351f09b720ad3c79fea4610"}
{"code_tokens": ["contract", "c15177{", "function", "updateBalance(bytes32", "_requestId,", "uint8", "_payeeIndex,", "int256", "_deltaAmount)", "external", "{", "Request", "storage", "r", "=", "requests[_requestId];", "require(r.currencyContract==msg.sender);", "if(", "_payeeIndex", "==", "0", ")", "{", "r.payee.balance", "=", "r.payee.balance.add(_deltaAmount);", "}", "else", "{", "Payee", "storage", "sp", "=", "subPayees[_requestId][_payeeIndex-1];", "sp.balance", "=", "sp.balance.add(_deltaAmount);", "}", "UpdateBalance(_requestId,", "_payeeIndex,", "_deltaAmount);", "}", "}"], "docstring_tokens": ["Function", "used", "to", "update", "the", "balance", "."], "url": "d3d158ca740b2657e84624c4bf24d21a"}
{"code_tokens": ["contract", "c39367{", "function", "safeWithdrawal()", "afterDeadline", "{", "uint", "amount", "=", "balanceOf[msg.sender];", "if(address(this).balance", ">=", "amount){", "balanceOf[msg.sender]", "=", "0;", "if", "(amount", ">", "0)", "{", "if", "(msg.sender.send(amount))", "{", "FundTransfer(msg.sender,", "amount,", "false,", "amountRaised);", "}", "else", "{", "balanceOf[msg.sender]", "=", "amount;", "}", "}", "}", "}", "}"], "docstring_tokens": ["allows", "the", "funders", "to", "withdraw", "their", "funds", "if", "the", "goal", "has", "not", "been", "reached", "."], "url": "4b15d6fecb546f6ae87bc1b2723b7067"}
{"code_tokens": ["contract", "c16448{", "function", "decreaseApproval(address", "_spender,", "uint", "_subtractedValue)", "public", "whenReleased", "returns", "(bool", "success)", "{", "return", "super.decreaseApproval(_spender,", "_subtractedValue);", "}", "}"], "docstring_tokens": ["Dicrement", "allowed", "value", "."], "url": "897f0bf82ab20ae91be2e303700d301a"}
{"code_tokens": ["contract", "c11716{", "function", "transferFromPreSignedHashing(", "address", "_token,", "address", "_from,", "address", "_to,", "uint256", "_value,", "uint256", "_fee,", "uint256", "_nonce", ")", "public", "pure", "returns", "(bytes32)", "{", "return", "keccak256(bytes4(0xb7656dc5),", "_token,", "_from,", "_to,", "_value,", "_fee,", "_nonce);", "}", "}"], "docstring_tokens": ["Hash", "(", "keccak256", ")", "of", "the", "payload", "used", "by", "transferFromPreSigned", "."], "url": "76426cbf0502a3b59abebbfd8c0721ed"}
{"code_tokens": ["contract", "c777{", "function", "getTokensContractAddress()", "public", "constant", "onlyOwner", "returns(address)", "{", "return", "tokensContractAddress;", "}", "}"], "docstring_tokens": ["Returns", "address", "of", "tokens", "contract", "from", "which", "check", "balance", "of", "tokens", "."], "url": "8d83cd9cba0422293f4b8d47164ddbc7"}
{"code_tokens": ["contract", "c37701{", "function", "transferEtherOut(address", "_to,", "uint256", "_amount)", "public", "onlyOwner", "{", "assert(_to.send(_amount));", "}", "}"], "docstring_tokens": ["Allow", "owner", "to", "transfer", "out", "the", "ether", "in", "the", "contract", "."], "url": "4291e1a8f92e4ee50a4b38fe5b7137b7"}
{"code_tokens": ["contract", "c27095{", "function", "updateBalance(address", "who,", "uint", "value)", "internal", "{", "snapshots[who].push(Snapshot(uint192(block.number),", "uint56(value)));", "}", "}"], "docstring_tokens": ["Updates", "the", "balance", "to", "the", "provided", "value", "."], "url": "f28c732615552ff1c7f8dbe18758daa4"}
{"code_tokens": ["contract", "c23588{", "function", "setLists(AddressList", "_canReceiveMintWhiteList,", "AddressList", "_canBurnWhiteList,", "AddressList", "_blackList,", "AddressList", "_noFeesList)", "onlyOwner", "public", "{", "trueUSD.setLists(_canReceiveMintWhiteList,", "_canBurnWhiteList,", "_blackList,", "_noFeesList);", "}", "}"], "docstring_tokens": ["Swap", "out", "TrueUSD's", "address", "lists", "."], "url": "056fad9eb97a63324a3ad2efe436f8e7"}
{"code_tokens": ["contract", "c22875{", "function", "transferAdvisorsToken(address", "_to,", "uint256", "_value)", "onlyOwner", "{", "require", "(", "_to", "!=", "0x0", "&&", "_value", ">", "0", "&&", "advisorsAllocation", ">=", "_value", ");", "token.mint(_to,", "_value);", "advisorsAllocation", "=", "advisorsAllocation.sub(_value);", "}", "}"], "docstring_tokens": ["Allocated", "tokens", "transfer", "to", "Advisory", "team", "."], "url": "bf5caf1f0d1b4e1a1c535e718e292d4b"}
{"code_tokens": ["contract", "c18303{", "function", "allowance(address", "_owner,", "address", "_spender)", "external", "constant", "returns", "(uint256)", "{", "return", "allowed[_owner][_spender];", "}", "}"], "docstring_tokens": ["ERC20", "standard", "function", "."], "url": "6af4ba71c3ebffb746d8e6bcd49fa298"}
{"code_tokens": ["contract", "c38864{", "function", "transfer(address", "_to,", "uint256", "_value)", "{", "if", "(balances[msg.sender]", "<", "_value)", "throw;", "if", "(balances[_to]", "+", "_value", "<", "balances[_to])", "throw;", "balances[msg.sender]", "-=", "_value;", "balances[_to]", "+=", "_value;", "Transfer(msg.sender,", "_to,", "_value);", "}", "}"], "docstring_tokens": ["Transfer", "Coins", "."], "url": "bad229558feb9104d3cbe052c6c6c9af"}
{"code_tokens": ["contract", "c12077{", "function", "kill()", "public", "onlyOwner", "{", "selfdestruct(owner);", "}", "}"], "docstring_tokens": ["Kill", "contract", "."], "url": "91dd52923ba6fe58b686d8f360948020"}
{"code_tokens": ["contract", "c32531{", "function", "startMainSale()", "external", "onlyWallet", "atStage(Stages.PresaleEnded)", "{", "stage", "=", "Stages.MainSaleStarted;", "mainSaleEndTime", "=", "now", "+", "8", "weeks;", "MainSaleStart(now);", "}", "}"], "docstring_tokens": ["Starts", "the", "main", "sale", "."], "url": "8ad37df8ab5774b3dadd711332506348"}
{"code_tokens": ["contract", "c38588{", "function", "donate", "()", "payable", "{", "balances[msg.sender]", "+=", "msg.value", "*", "donationMultiplier;", "_totalPatronSupply", "+=", "msg.value", "*", "donationMultiplier;", "asyncSend(this,", "msg.value);", "}", "}"], "docstring_tokens": ["Receive", "Patron", "tokens", "in", "returns", "for", "donations", "."], "url": "eacd9bf4c43eadd79c378e541fc9626d"}
{"code_tokens": ["contract", "c13432{", "function", "withdrawERC20Token(", "address", "tokenAddress,", "uint256", "tokenAmount", ")", "public", "onlyOwner", "returns", "(bool", "success)", "{", "return", "ERC20Interface(tokenAddress).transfer(owner,", "tokenAmount);", "}", "}"], "docstring_tokens": ["Permits", "to", "withdraw", "any", "ERC20", "tokens", "that", "have", "been", "mistakingly", "sent", "to", "this", "contract", "."], "url": "3d98b6cbf35b7815d29ec9e47d067900"}
{"code_tokens": ["contract", "c9695{", "function", "addEthTeller(address", "_from,", "uint", "_value)", "external", "payable", "onlyOwner", "returns", "(bool)", "{", "ethTellerBalance[_from]", "=", "SafeMath.add(ethTellerBalance[_from]", ",_value);", "return", "true;", "}", "}"], "docstring_tokens": ["add", "ETH", "for", "escrow", "teller", "."], "url": "8d45166fe97f4882423d99b7762c9002"}
{"code_tokens": ["contract", "c26171{", "function", "doAirDrop(address[]", "_address,", "uint256", "_amount)", "onlyOwner", "public", "returns", "(bool)", "{", "uint256", "count", "=", "_address.length;", "for", "(uint256", "i", "=", "0;", "i", "<", "count;", "i++)", "{", "tokenInstance.transfer(_address", "[i],_amount);", "}", "}", "}"], "docstring_tokens": ["Airdrop", "function", "which", "take", "up", "a", "array", "of", "address", "and", "amount", "and", "call", "the", "transfer", "function", "to", "send", "the", "token", "."], "url": "af6b6f2f686c6a9c4a3ba58e5a3bbe69"}
{"code_tokens": ["contract", "c372{", "function", "transferOwner(address", "_newOwner)", "isOwner", "public", "returns", "(bool", "success)", "{", "if", "(_newOwner", "!=", "address(0))", "{", "owner", "=", "_newOwner;", "}", "return", "true;", "}", "}"], "docstring_tokens": ["Owner", "Section", "."], "url": "a758cefcb3ff416fef6826ff28ea5934"}
{"code_tokens": ["contract", "c725{", "function", "isMinimumGoalReached()", "public", "constant", "returns", "(bool)", "{", "return", "weiRaised", ">=", "minimumGoal;", "}", "}"], "docstring_tokens": ["return", "true", "if", "the", "crowdsale", "has", "raised", "enough", "money", "to", "be", "a", "successful", "."], "url": "138449cd726d34485341b6dfe9376dac"}
{"code_tokens": ["contract", "c9143{", "function", "destroy()", "onlyContractOwner", "{", "suicide(msg.sender);", "}", "}"], "docstring_tokens": ["Only", "owner", "can", "call", "it", "."], "url": "d59ffbb89c1c3f664588734ce5b9a1ae"}
{"code_tokens": ["contract", "c9208{", "function", "setMaxEthPerAddress(uint", "_maxEthPerAddress)", "onlyOwner", "{", "if(_maxEthPerAddress", "==", "0)", "revert();", "maxEthPerAddress", "=", "_maxEthPerAddress;", "MaxEthPerAddressChanged(maxEthPerAddress);", "}", "}"], "docstring_tokens": ["Set", "the", "max", "eth", "per", "address", "."], "url": "b382f0607501731e441ae9c95f50a0c1"}
{"code_tokens": ["contract", "c34051{", "function", "getChannelWith(Data", "storage", "self,", "address", "partner)", "constant", "returns", "(address)", "{", "bytes32", "party_hash", "=", "partyHash(msg.sender,", "partner);", "uint", "channel_pos", "=", "self.partyhash_to_channelpos[party_hash];", "if", "(channel_pos", "!=", "0)", "{", "return", "self.all_channels[channel_pos", "-", "1];", "}", "}", "}"], "docstring_tokens": ["Get", "the", "address", "of", "channel", "with", "a", "partner", "."], "url": "5de2b8c0b903e79fbce298d80723e9da"}
{"code_tokens": ["contract", "c29463{", "function", "balanceOf(address", "_holder)", "view", "public", "returns", "(uint256", "balance)", "{", "return", "balances[_holder];", "}", "}"], "docstring_tokens": ["Balance", "show", "."], "url": "4b4788591afada795f5dadd2712fd8c8"}
{"code_tokens": ["contract", "c3702{", "function", "delOperator(address", "_operator)", "external", "onlySuperOwner", "{", "operators[_operator]", "=", "false;", "emit", "TMTG_DeletedOperator(_operator);", "}", "}"], "docstring_tokens": ["Remove", "the", "address", "from", "operator", "."], "url": "ebfb4835701e477a0f321353159c8a0e"}
{"code_tokens": ["contract", "c7227{", "function", "setVipAddress(address", "_address)", "public", "onlyOwner", "{", "vip[_address]", "=", "true;", "}", "}"], "docstring_tokens": ["add", "VIP", "buyer", "address", "."], "url": "544d0ae66eabd534bb09928dce74d535"}
{"code_tokens": ["contract", "c64{", "function", "removeReservedTokens(address", "_destination)", "internal", "view", "{", "if", "(_destination", "==", "0)", "revert('invalid", "destination');", "Contract.storing();", "uint", "reservation_len", "=", "uint(Contract.read(TokenManager.reservedDestinations()));", "uint", "to_remove", "=", "uint(Contract.read(TokenManager.destIndex(_destination)));", "if", "(to_remove", ">", "reservation_len", "||", "to_remove", "==", "0)", "revert('removing", "too", "many", "reservations');", "if", "(to_remove", "!=", "reservation_len)", "{", "address", "last_index", "=", "address(Contract.read(", "bytes32(32", "*", "reservation_len", "+", "uint(TokenManager.reservedDestinations()))", "));", "Contract.set(TokenManager.destIndex(last_index)).to(to_remove);", "Contract.set(", "bytes32((32", "*", "to_remove)", "+", "uint(TokenManager.reservedDestinations()))", ").to(last_index);", "}", "Contract.decrease(TokenManager.reservedDestinations()).by(1);", "Contract.set(TokenManager.destIndex(_destination)).to(uint(0));", "}", "}"], "docstring_tokens": ["Checks", "input", "and", "then", "creates", "storage", "buffer", "for", "reserved", "token", "removal", "."], "url": "c0dffdafc97636434858419c12211210"}
{"code_tokens": ["contract", "c10476{", "modifier", "notDayOwner(uint16", "dayId)", "{", "require(msg.sender", "!=", "dayStructs[dayId].owner,", "\"sender", "can't", "be", "owner", "of", "day\");", "_;", "}", "}"], "docstring_tokens": ["Ensures", "sender", "is", "not", "the", "owner", "of", "a", "specific", "day", "."], "url": "bbad7fd880992b2eb8d7dbe3cabb992b"}
{"code_tokens": ["contract", "c13433{", "function", "_getQueryStr(uint256", "min,", "uint256", "max)", "internal", "returns(string)", "{", "return", "strConcat(\"https:", "}", "}"], "docstring_tokens": ["NOTE", ":", "Doesn't", "use", "API", "key", "so", "that", "we", "don't", "have", "to", "do", "all", "the", "fancy", "encryption", "stuff", "."], "url": "80878402f52e55fad7d89357b9f2db27"}
{"code_tokens": ["contract", "c38029{", "function", "halvingSubsidy(uint256", "_halving)", "public", "constant", "notBeforeGenesis", "returns(uint256)", "{", "uint256", "startBlock", "=", "halvingStartBlock(_halving);", "return", "blockSubsidy(startBlock).mul(subsidyHalvingInterval);", "}", "}"], "docstring_tokens": ["Computes", "the", "subsidy", "of", "a", "full", "halving", "."], "url": "ad0ea241dd56eda34503a59a00fe5d65"}
{"code_tokens": ["contract", "c29282{", "modifier", "changesToVestingNotFreezed(address", "adr)", "{", "require(!vestingMap[adr].changeFreezed);", "_;", "}", "}"], "docstring_tokens": ["Modifier", "to", "check", "if", "changes", "to", "vesting", "is", "not", "freezed", "yet", "."], "url": "0818eb181ad1b87419a7da7dae171d81"}
{"code_tokens": ["contract", "c14478{", "function", "getTokenAmount(uint256", "weiAmount)", "internal", "view", "returns(uint256)", "{", "uint256", "bonusIntegrated", "=", "weiAmount.div(1000000000000).mul(rate).mul(bonusPercentage).div(100);", "return", "bonusIntegrated;", "}", "}"], "docstring_tokens": ["the", "token", "amount", "."], "url": "546ad53f35dc589eb66dba6d66231507"}
{"code_tokens": ["contract", "c14558{", "function", "unlock()", "external", "{", "require(REB", "!=", "address(0));", "assert(now", ">=", "unlockedAt);", "if", "(tokensCreated", "==", "0)", "{", "tokensCreated", "=", "REB.balanceOf(this);", "}", "uint256", "transferAllocation", "=", "lockedAllocations[msg.sender];", "lockedAllocations[msg.sender]", "=", "0;", "require(REB.transfer(msg.sender,", "transferAllocation));", "}", "}"], "docstring_tokens": ["Allow", "unlocking", "of", "allocated", "tokens", "by", "transferring", "them", "to", "whitelisted", "addresses", "."], "url": "eb9687ab3346ad648b6df92ceade651a"}
{"code_tokens": ["contract", "c35346{", "function", "setupPeriodForPreSale(uint", "_start,", "uint", "_end)", "onlyOwner", "{", "require(_start", "<", "_end);", "startPreSale", "=", "_start;", "endPreSale", "=", "_end;", "}", "}"], "docstring_tokens": ["Allows", "owner", "to", "stop", "start", "presale", "."], "url": "42c3eba84512be5729c1541d1abd7198"}
{"code_tokens": ["contract", "c15104{", "function", "setRealseTime(uint256", "_time)", "public", "onlyOwner", "{", "releaseStartTime", "=", "_time;", "}", "}"], "docstring_tokens": ["Owner", "can", "change", "the", "releaseStartTime", "when", "needs", "."], "url": "3ff6867e5cec99b8f39b8fb7f9d03912"}
{"code_tokens": ["contract", "c11890{", "function", "airdrop(address[]", "_to,", "uint256[]", "_value)", "onlyOwner", "notStopped", "public", "{", "for(uint256", "i", "=", "0;", "i", "<", "_to.length;", "i++){", "if(balances[_to[i]]", ">", "0){", "continue;", "}", "transfer(_to[i],", "_value[i]);", "}", "}", "}"], "docstring_tokens": ["function", "made", "for", "airdrop", "."], "url": "a8ffaa146cc60b341ebb0074eb735810"}
{"code_tokens": ["contract", "c13008{", "function", "name()", "public", "constant", "returns", "(string){", "return", "TOKEN_NAME;", "}", "}"], "docstring_tokens": ["Main", "info", "for", "WEDU", "token", "."], "url": "1aa05badbedccb48e793f4b873ac3a98"}
{"code_tokens": ["contract", "c13848{", "function", "unfreeze(address", "investor)", "onlyOwner", "public", "returns", "(bool)", "{", "require(freezed[investor]);", "freezed[investor]", "=", "false;", "Unfreezed(investor);", "return", "!freezed[investor];", "}", "}"], "docstring_tokens": ["Unfreeze", "an", "investor", "."], "url": "da51c32e601f3698caab9885ac1b683a"}
{"code_tokens": ["contract", "c2990{", "function", "toBytes(uint256", "addr,", "uint256", "len)", "internal", "pure", "returns", "(bytes", "memory", "bts)", "{", "bts", "=", "new", "bytes(len);", "uint256", "btsptr", "=", "dataPtr(bts);", "copy(addr,", "btsptr,", "len);", "}", "}"], "docstring_tokens": ["Creates", "a", "'bytes", "memory'", "variable", "from", "the", "memory", "address", "'addr'", ",", "with", "the", "length", "'len'", "."], "url": "dccd192bc438d55f560802246b0d73bc"}
{"code_tokens": ["contract", "c14057{", "function", "withdraw()", "public", "onlyOwner", "{", "owner.transfer(this.balance);", "}", "}"], "docstring_tokens": ["Owner", "Action", "."], "url": "243ad6c87251d093c2aa51fb144f5afa"}
{"code_tokens": ["contract", "c9286{", "modifier", "onlyPayloadSize(uint", "size)", "{", "assert(msg.data.length", ">=", "size", "+", "4);", "_;", "}", "}"], "docstring_tokens": ["Avoid", "Short", "Address", "Attack", "."], "url": "ded3933a8e7bd1b3e672e7d6d8c3fc2e"}
{"code_tokens": ["contract", "c20588{", "function", "PriceTwoEnable()", "onlyOwner()", "{", "stageTwo", "=", "true;", "}", "}"], "docstring_tokens": ["Bonus", "Stage", "Two", "state", "."], "url": "3c84efcdd7f004510207e813bc3419e4"}
{"code_tokens": ["contract", "c702{", "function", "dAdd(bytes32", "democHash,", "address", "erc20,", "bool", "disableErc20OwnerClaim)", "only_owner()", "external", "{", "_addDemoc(democHash,", "erc20,", "msg.sender,", "disableErc20OwnerClaim);", "emit", "ManuallyAddedDemoc(democHash,", "erc20);", "}", "}"], "docstring_tokens": ["owner", "democ", "admin", "functions", "."], "url": "0212df17b73d676fceccfca6c141e069"}
{"code_tokens": ["contract", "c22763{", "function", "withdraw(address[]", "_tokens)", "public", "{", "require(msg.sender", "==", "recipient);", "require(block.timestamp", ">", "excavation);", "if(this.balance", ">", "0)", "{", "uint", "ethShare", "=", "this.balance", "/", "(100", "/", "percent);", "company.transfer(ethShare);", "uint", "ethWithdrawal", "=", "this.balance;", "msg.sender.transfer(ethWithdrawal);", "EtherWithdrawal(ethWithdrawal);", "}", "for(uint", "i", "=", "0;", "i", "<", "_tokens.length;", "i++)", "{", "ERC20", "token", "=", "ERC20(_tokens[i]);", "uint", "tokenBalance", "=", "token.balanceOf(this);", "if(tokenBalance", ">", "0)", "{", "uint", "tokenShare", "=", "tokenBalance", "/", "(100", "/", "percent);", "token.transfer(company,", "tokenShare);", "uint", "tokenWithdrawal", "=", "token.balanceOf(this);", "token.transfer(recipient,", "tokenWithdrawal);", "TokenWithdrawal(_tokens[i],", "tokenWithdrawal);", "}", "}", "}", "}"], "docstring_tokens": ["allows", "for", "the", "withdrawal", "of", "ECR20", "tokens", "and", "Ether", "!", "must", "be", "the", "intended", "recipient", "after", "the", "excavation", "date", "."], "url": "978aeaa383f922efef4c1c94208833b4"}
{"code_tokens": ["contract", "c5263{", "function", "migrateBalance(address", "_tokenHolder)", "onlyOwner", "public", "returns", "(bool)", "{", "if", "(migrated[_tokenHolder])", "{", "return", "false;", "}", "uint256", "balance", "=", "legacySycContract.balanceOf(_tokenHolder);", "if", "(balance", "==", "0)", "{", "return", "false;", "}", "migrated[_tokenHolder]", "=", "true;", "sycContract.transfer(_tokenHolder,", "balance);", "migratedSupply", "=", "migratedSupply.add(balance);", "emit", "Migrate(_tokenHolder,", "balance);", "return", "true;", "}", "}"], "docstring_tokens": ["Copies", "the", "balance", "of", "a", "given", "address", "from", "the", "legacy", "contract", "."], "url": "1e9f0d59e276a58d43b1ccaed83fb3c8"}
{"code_tokens": ["contract", "c37157{", "function", "safeWithdrawal()", "external", "crowdsaleEnded", "{", "if", "(!fundingGoalReached)", "{", "uint256", "amount", "=", "balanceOf[msg.sender];", "balanceOf[msg.sender]", "=", "0;", "if", "(amount", ">", "0)", "{", "if", "(msg.sender.send(amount))", "{", "FundTransfer(msg.sender,", "amount,", "false);", "}", "else", "{", "balanceOf[msg.sender]", "=", "amount;", "}", "}", "}", "if", "(fundingGoalReached", "&&", "owner", "==", "msg.sender)", "{", "if", "(beneficiary.send(amountRaised))", "{", "FundTransfer(beneficiary,", "amountRaised,", "false);", "}", "else", "{", "fundingGoalReached", "=", "false;", "}", "}", "}", "}"], "docstring_tokens": ["Allows", "backers", "to", "withdraw", "their", "funds", "in", "the", "crowdsale", "was", "unsuccessful", ",", "and", "allow", "the", "owner", "to", "send", "the", "amount", "raised", "to", "the", "beneficiary", "."], "url": "c8e20cfdce4967780bce38f19d950084"}
{"code_tokens": ["contract", "c36739{", "function", "withdraw(address", "user){", "require(received_tokens", "||", "now", ">", "latest_buy_time);", "if", "(balances[user]", "==", "0)", "return;", "if", "(!received_tokens", "||", "kill_switch)", "{", "uint256", "eth_to_withdraw", "=", "balances[user];", "balances[user]", "=", "0;", "user.transfer(eth_to_withdraw);", "}", "else", "{", "uint256", "contract_token_balance", "=", "token.balanceOf(address(this));", "require(contract_token_balance", "!=", "0);", "uint256", "tokens_to_withdraw", "=", "(balances[user]", "*", "contract_token_balance)", "/", "contract_eth_value;", "contract_eth_value", "-=", "balances[user];", "balances[user]", "=", "0;", "uint256", "fee", "=", "tokens_to_withdraw", "/", "100;", "require(token.transfer(fee_claimer,", "fee));", "require(token.transfer(user,", "tokens_to_withdraw", "-", "fee));", "}", "}", "}"], "docstring_tokens": ["Withdraws", "all", "ETH", "deposited", "or", "tokens", "purchased", "by", "the", "given", "user", "."], "url": "17a935fcbe07c8eb299e9bb556040366"}
{"code_tokens": ["contract", "c24119{", "function", "totalSupply()", "public", "constant", "returns(uint256", "total)", "{", "return", "supplies.total;", "}", "}"], "docstring_tokens": ["getter", "totalSupply", "."], "url": "e42b1af4bf42447ed5f0ef994df6452b"}
{"code_tokens": ["contract", "c11764{", "function", "transfer(address", "_to,", "uint", "_value)", "public", "returns(bool)", "{", "require(_to", "!=", "address(0));", "require(balances[msg.sender]", ">=", "_value);", "balances[msg.sender]", "=", "balances[msg.sender].sub(_value);", "balances[_to]", "=", "balances[_to].add(_value);", "emit", "Transfer(msg.sender,", "_to,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["transfer", "tokens", "to", "given", "address", "."], "url": "6b30f7983594ff8013c3fe99f6cc5b82"}
{"code_tokens": ["contract", "c22272{", "function", "start(uint", "endAt_)", "public", "onlyOwner", "{", "require(endAt_", ">", "block.timestamp", "&&", "state", "==", "State.Inactive);", "endAt", "=", "endAt_;", "startAt", "=", "block.timestamp;", "state", "=", "State.Active;", "ICOStarted(endAt,", "lowCapWei,", "hardCapWei,", "lowCapTxWei,", "hardCapTxWei);", "}", "}"], "docstring_tokens": ["Trigger", "start", "of", "ICO", "."], "url": "515bd6012046c1c40b72f0e313c37753"}
{"code_tokens": ["contract", "c15160{", "function", "setEtherInUSDInternal(string", "_price)", "internal", "{", "bytes", "memory", "bytePrice", "=", "bytes(_price);", "uint256", "dot", "=", "bytePrice.length.sub(uint256(6));", "require(0x2e", "==", "uint(bytePrice[dot]));", "uint256", "newPrice", "=", "uint256(10", "**", "23).div(parseInt(_price,", "5));", "require(newPrice", ">", "0);", "etherPriceInUSD", "=", "parseInt(_price,", "5);", "priceUpdateAt", "=", "block.timestamp;", "}", "}"], "docstring_tokens": ["set", "ether", "price", "in", "USD", "with", "5", "digits", "after", "the", "decimal", "point", "ex", "."], "url": "fafb7e6dcdee54ad8e7611c1c9ad00be"}
{"code_tokens": ["contract", "c38954{", "function", "setArbiterLocked(address", "_addr,", "bool", "_lock)", "public", "{", "if", "(owner", "!=", "msg.sender)", "{", "throw;", "}", "else", "if", "(!validArb2(_addr))", "{", "StatEvent(\"invalid", "arb\");", "}", "else", "{", "arbiters[_addr].locked", "=", "_lock;", "}", "}", "}"], "docstring_tokens": ["set", "a", "micheivous", "arbiter", "to", "locked", "."], "url": "922570b889d0520abf290d07dce1a823"}
{"code_tokens": ["contract", "c26550{", "function", "getParticipant(uint256", "_index)", "public", "view", "returns", "(", "address", "participantAddress,", "uint256", "participantAnswerId", ")", "{", "Participant", "storage", "p", "=", "participants[_index];", "participantAddress", "=", "p.user_address;", "participantAnswerId", "=", "p.answer_id;", "}", "}"], "docstring_tokens": ["Returns", "all", "the", "relevant", "information", "about", "a", "specific", "participant", "."], "url": "4738bf25fd922e3b5ab8f77a460db411"}
{"code_tokens": ["contract", "c23538{", "function", "setTransferableTime(uint256", "_transferableTime)", "external", "onlyOwner", "{", "require(_transferableTime", "<", "transferableTime);", "transferableTime", "=", "_transferableTime;", "}", "}"], "docstring_tokens": ["set", "transferableTime", "transferableTime", "can", "only", "be", "set", "earlier", ",", "not", "later", "once", "tokens", "are", "transferable", ",", "it", "cannot", "be", "paused", "."], "url": "a728d4276f086dfb8b3098fe76bfab0e"}
{"code_tokens": ["contract", "c399{", "function", "withdrawFee(uint256", "_amount)", "onlyOwner", "public", "{", "require(now", ">=", "finishTime.add(30", "days));", "if", "(winner", "==", "address(0))", "{", "endGame();", "}", "feeAmount", "=", "feeAmount", ">", "_amount", "?", "feeAmount.sub(_amount)", ":", "0;", "feeOwner.transfer(_amount);", "}", "}"], "docstring_tokens": ["Withdraw", "the", "fee", "."], "url": "862684d7bb5a2f63b4f5cb741fd56da4"}
{"code_tokens": ["contract", "c29865{", "function", "allowance(address", "_owner,", "address", "_spender)", "public", "view", "returns", "(uint256)", "{", "return", "allowances[_owner][_spender];", "}", "}"], "docstring_tokens": ["The", "amount", "of", "Beercoins", "that", "can", "be", "spent", "by", "a", "user", "on", "behalf", "of", "another", "."], "url": "e5a2784dad31b16006276e4ee8cc8a69"}
{"code_tokens": ["contract", "c2229{", "function", "isPurchaseWithinCap(uint256", "_tokenSold,", "uint256", "_purchaseAmount)", "internal", "view", "returns(bool)", "{", "bool", "isLessThanCap", "=", "_tokenSold.add(_purchaseAmount)", "<=", "icoCap;", "return", "isLessThanCap;", "}", "}"], "docstring_tokens": ["true", "if", "_purchaseAmount", "is", "allowed", "."], "url": "82633696730b0af0cfca8986a808545f"}
{"code_tokens": ["contract", "c652{", "function", "content(bytes32", "node)", "public", "view", "returns", "(bytes32)", "{", "return", "records[node].content;", "}", "}"], "docstring_tokens": ["The", "associated", "content", "hash", "."], "url": "4e6a443356675f54ea526b573da213ef"}
{"code_tokens": ["contract", "c224{", "function", "setRegistryLogic(address", "_newRegistryLogic)", "public", "onlyOwner", "nonZero(_newRegistryLogic)", "{", "address", "_oldRegistryLogic", "=", "accountRegistryLogic;", "accountRegistryLogic", "=", "_newRegistryLogic;", "emit", "AccountRegistryLogicChanged(_oldRegistryLogic,", "accountRegistryLogic);", "}", "}"], "docstring_tokens": ["Change", "the", "address", "of", "the", "registry", "logic", "which", "has", "exclusive", "write", "control", "over", "this", "contract", "."], "url": "e03d500c0c730a9a5bc43ef6c807b6de"}
{"code_tokens": ["contract", "c7244{", "function", "editCell(address", "_key,", "uint256", "_lockup)", "secondLevel", "public", "returns(bool){", "require(getBalanceCell(_key)==0);", "require(_lockup>=", "mainLockup);", "require(userCells[_key].exist);", "userCells[_key].lockup", "=", "_lockup;", "emit", "Edit(_key,", "_lockup);", "return", "true;", "}", "}"], "docstring_tokens": ["change", "parameters", "of", "the", "cell", "."], "url": "9770df8188cbab3dc2a694dbba51fbe8"}
{"code_tokens": ["contract", "c26551{", "function", "setTransferAllowance(bool", "_allowance)", "external", "onlyOwner", "{", "TransferAllowed", "=", "_allowance;", "}", "}"], "docstring_tokens": ["Allow", "or", "prohibit", "token", "transfers", "."], "url": "2cbaadd90fdf1bb453eb49b8db5686e2"}
{"code_tokens": ["contract", "c9695{", "function", "addTokenTeller(address", "_from,", "uint", "_value)", "external", "onlyOwner{", "dthTellerBalance[_from]", "=", "SafeMath.add(dthTellerBalance[_from],", "_value);", "}", "}"], "docstring_tokens": ["add", "DTH", "when", "token", "register", "."], "url": "a591e2063e53d5aef7aa12de6897dd55"}
{"code_tokens": ["contract", "c31706{", "function", "disableMinting()", "internal", "{", "require(mintable);", "mintable", "=", "false;", "MintingDisabled();", "}", "}"], "docstring_tokens": ["Additions", "over", "ERC20", "."], "url": "da99bad24d233eb0fbd0556d749566ab"}
{"code_tokens": ["contract", "c11539{", "function", "initTokenPorter(address", "_tokenAddr,", "address", "_auctionsAddr)", "public", "onlyOwner", "{", "require(_tokenAddr", "!=", "0x0);", "require(_auctionsAddr", "!=", "0x0);", "auctions", "=", "Auctions(_auctionsAddr);", "token", "=", "METToken(_tokenAddr);", "}", "}"], "docstring_tokens": ["Initialize", "TokenPorter", "contract", "."], "url": "078359931f970fc00a7ba267c3f5d79e"}
{"code_tokens": ["contract", "c11074{", "function", "trust()", "external", "returns", "(uint)", "{", "uint", "fromId", "=", "_createHolderId(msg.sender);", "if", "(msg.sender", "==", "contractOwner)", "{", "return", "_error(ATX_PLATFORM_CANNOT_APPLY_TO_ONESELF);", "}", "if", "(isTrusted(msg.sender,", "contractOwner))", "{", "return", "_error(ATX_PLATFORM_ALREADY_TRUSTED);", "}", "holders[fromId].trust[contractOwner]", "=", "true;", "return", "OK;", "}", "}"], "docstring_tokens": ["Trust", "an", "address", "to", "perform", "recovery", "procedure", "for", "the", "caller", "."], "url": "1e8902d1d5aa383f92bc0d5e68bca483"}
{"code_tokens": ["contract", "c11539{", "function", "setValidator(address", "_validator)", "public", "onlyOwner", "returns", "(bool)", "{", "require(_validator", "!=", "0x0);", "validator", "=", "Validator(_validator);", "return", "true;", "}", "}"], "docstring_tokens": ["set", "address", "of", "validator", "contract", "."], "url": "116faa0e49fdf5b5f41da964e14a546d"}
{"code_tokens": ["contract", "c37958{", "function", "makerWithdrawEther(uint256", "ethers)", "onlyOwner", "returns", "(bool", "ok)", "{", "if", "(this.balance", ">=", "ethers)", "{", "MakerWithdrewEther(ethers);", "return", "owner.send(ethers);", "}", "}", "}"], "docstring_tokens": ["Maker", "withdraws", "ethers", "from", "this", "contract", "."], "url": "d934bce6a115515803f56e19186772f1"}
{"code_tokens": ["contract", "c10856{", "function", "lockCrowdSale()", "public", "onlyOwner", "returns", "(bool", "success)", "{", "require(crowdSaleOngoing);", "crowdSaleOngoing", "=", "false;", "crowdSalesCompleted", "=", "crowdSalesCompleted.add(1);", "balances[owner]", "=", "balances[owner].add(crowdSaleBalance);", "crowdSaleBalance", "=", "0;", "emit", "CrowdSaleLocked(!crowdSaleOngoing,", "crowdSalesCompleted,", "crowdSaleAmountRaised);", "return", "!crowdSaleOngoing;", "}", "}"], "docstring_tokens": ["End", "crowd", "sale", "."], "url": "1515b7068e7fc7d1785db958b3bc07e8"}
{"code_tokens": ["contract", "c17595{", "function", "changeStartTime(uint256", "_time)", "public", "payable", "onlyContractOwner", "{", "require(now", "<", "_time);", "require(now", "<", "gameStartTime);", "gameStartTime", "=", "_time;", "}", "}"], "docstring_tokens": ["Change", "the", "start", "time", "."], "url": "2d874d758cc1695e7b35ae97801baa91"}
{"code_tokens": ["contract", "c24634{", "function", "tokensIndexOf(address", "_owner,", "bool", "_withHistory)", "whenGameActive", "public", "view", "returns", "(uint[]", "result)", "{", "require(_owner", "!=", "address(0));", "if", "(_withHistory)", "{", "return", "ownerRangeIndex[_owner];", "}", "else", "{", "uint[]", "memory", "indexes", "=", "ownerRangeIndex[_owner];", "result", "=", "new", "uint[](indexes.length);", "uint", "i", "=", "0;", "for", "(uint", "index", "=", "0;", "index", "<", "indexes.length;", "index++)", "{", "BlockRange", "storage", "br", "=", "tree[indexes[index]];", "if", "(br.owner", "==", "_owner)", "{", "result[i]", "=", "indexes[index];", "i++;", "}", "}", "return;", "}", "}", "}"], "docstring_tokens": ["return", "tokens", "index", "own", "by", "address", "(", "including", "history", ")", "."], "url": "f6873e5f1b47a222f0a546c5ee97106e"}
{"code_tokens": ["contract", "c21494{", "modifier", "offerEnded", "()", "{", "require", "(now", ">=", "endDate);", "_;", "}", "}"], "docstring_tokens": ["This", "modifier", "is", "attached", "to", "the", "function", "that", "allows", "me", "to", "withdraw", "the", "ETH", "you're", "sending", "me", ",", "essentially", "I", "can't", "pull", "any", "ETH", "out", "until", "the", "token", "offer", "ends", ",", "which", "means", "I", "can't", "send", "ETH", "to", "the", "wallet", ",", "withdraw", "it", ",", "then", "send", "again", "in", "a", "never-ending", "cycle", ",", "generating", "endless", "amounts", "of", "worthless", "tokens", "."], "url": "f71a4e5b7bde384e03206aa0bd5c9f2f"}
{"code_tokens": ["contract", "c13764{", "function", "setDropAmount(uint256", "_value)", "onlyOwner", "public", "{", "dropAmount_", "=", "_value;", "emit", "onSetDropAmount();", "}", "}"], "docstring_tokens": ["called", "by", "the", "owner", "to", "set", "default", "airdrop", "amount", "."], "url": "3f4037fbe6f26297ac2e177342525a0f"}
{"code_tokens": ["contract", "c23970{", "function", "createBet(", "string", "_coin,", "uint256", "_betAmount,", "uint256", "_initialMarketCap,", "uint256", "_timeStampCreation,", "uint256", "_timeStampEvaluation,", "string", "_auth)", "public", "returns", "(uint256", "betId)", "{", "require(bettingAllowed", "==", "true);", "require(_betAmount", "<=", "betMaxAmount);", "require(_betAmount", ">=", "betMinAmount);", "require(_initialMarketCap", ">", "0);", "uint256", "fee", "=", "_betAmount.mul(betFeePerMil).div(1000);", "if(fee", "<", "betFeeMin)", "{", "fee", "=", "betFeeMin;", "}", "require(balanceOf[msg.sender]", ">=", "_betAmount.add(fee));", "_transfer(msg.sender,", "this,", "_betAmount.add(fee));", "numBets", "=", "numBets.add(1);", "betId", "=", "numBets;", "betMapping[betId].bettor", "=", "msg.sender;", "betMapping[betId].coin", "=", "_coin;", "betMapping[betId].betAmount", "=", "_betAmount;", "betMapping[betId].initialMarketCap", "=", "_initialMarketCap;", "betMapping[betId].finalMarketCap", "=", "0;", "betMapping[betId].timeStampCreation", "=", "_timeStampCreation;", "betMapping[betId].timeStampEvaluation", "=", "_timeStampEvaluation;", "betMapping[betId].status", "=", "0;", "betMapping[betId].auth", "=", "_auth;", "BetCreated(betId);", "return", "betId;", "}", "}"], "docstring_tokens": ["betId", "ID", "of", "bet", "."], "url": "98283de64a834b7f0cc8db2938a72837"}
{"code_tokens": ["contract", "c30777{", "function", "setBlockLock(uint256", "_lockedUntilBlock)", "public", "onlyOwner", "returns", "(bool", "success)", "{", "lockedUntilBlock", "=", "_lockedUntilBlock;", "BlockLockSet(_lockedUntilBlock);", "return", "true;", "}", "}"], "docstring_tokens": ["Set", "block", "lock", "."], "url": "af122a19486b6065dfd0eb43762bfaa4"}
{"code_tokens": ["contract", "c21874{", "function", "isUserRegistered", "(", "address", "account", ")", "public", "view", "returns(bool)", "{", "return", "(account", "!=", "address(0))", "&&", "users[account].isRegistered;", "}", "}"], "docstring_tokens": ["Checks", "if", "user", "is", "a", "registered", "user", "."], "url": "797216acf294ffec5b6081df30a2adf4"}
{"code_tokens": ["contract", "c33952{", "function", "drainRemainingToken", "()", "public", "onlyOwner", "{", "require(hasEnded());", "token.transfer(owner,", "token.balanceOf(this));", "}", "}"], "docstring_tokens": ["Transfer", "the", "unsold", "tokens", "to", "the", "owner", "main", "wallet", "."], "url": "28773cc9738ef943e86960c668da9457"}
{"code_tokens": ["contract", "c1532{", "function", "changeAdminer(address", "_adminer)", "public", "onlyOwner", "{", "adminer", "=", "_adminer;", "}", "}"], "docstring_tokens": ["change", "the", "control", "of", "the", "contract", "to", "a", "new", "adminer", "."], "url": "f325dabfd418ca9cd4aefc0519c8c014"}
{"code_tokens": ["contract", "c13707{", "function", "changeEndPrivateSale(uint256", "_newend)", "public", "onlyOwner{", "endprivate", "=", "_newend;", "}", "}"], "docstring_tokens": ["change", "the", "end", "private", "sale", "."], "url": "dce69d210f018216786bf6264dac50e8"}
{"code_tokens": ["contract", "c20578{", "function", "placeTokens(address", "beneficiary,", "uint256", "_tokens)", "onlyAdmin", "public", "returns(bool){", "require(tokenRaised.add(_tokens)", "<=", "tokensForSale);", "require(_tokens", "!=", "0);", "require(!hasEnded());", "if", "(token.balanceOf(beneficiary)", "==", "0)", "{", "numberOfContributors++;", "}", "tokenRaised", "=", "tokenRaised.add(_tokens);", "token.mint(beneficiary,", "_tokens);", "TokenPlaced(beneficiary,", "_tokens);", "return", "true;", "}", "}"], "docstring_tokens": ["only", "Admin", "can", "send", "tokens", "manually", "."], "url": "f9da6b518bad9dade0e1a4214bada29e"}
{"code_tokens": ["contract", "c17715{", "function", "addContract(", "bytes32", "contractTitle,", "bytes32", "documentTitle,", "bytes32", "version,", "bytes32", "description,", "address", "participant,", "bytes32", "consent", ")", "public", "{", "require(owner", "==", "msg.sender);", "contractCount", "+=", "1;", "contracts[contractCount]", "=", "Contract(contractCount,", "contractTitle,", "documentTitle,", "version,", "description,", "participant,", "consent,", "false);", "emit", "ContractCreated(contractCount,", "participant);", "}", "}"], "docstring_tokens": ["A", "contract", "can", "be", "only", "added", "by", "owner", "and", "user", "must", "exist", ";", "."], "url": "5b0c4fcdcac2faa7b6af837b434972cb"}
{"code_tokens": ["contract", "c21162{", "modifier", "onlyOraclize", "{", "require(msg.sender", "==", "oraclize_cbAddress());", "_;", "}", "}"], "docstring_tokens": ["modifier", "that", "requires", "the", "caller", "come", "from", "oraclize", "."], "url": "67f9fd5a90cb9958afac980b97bbf31c"}
{"code_tokens": ["contract", "c24277{", "function", "calcNav(uint", "gav,", "uint", "unclaimedFees)", "view", "returns", "(uint", "nav)", "{", "nav", "=", "sub(gav,", "unclaimedFees);", "}", "}"], "docstring_tokens": ["Calculates", "the", "Net", "asset", "value", "of", "this", "fund", "."], "url": "e0cbab1663692df2c48dabd0a04f9ae8"}
{"code_tokens": ["contract", "c13433{", "function", "getMaxProfit()", "public", "view", "returns(uint256)", "{", "return", "address(this).balance", "/", "20;", "}", "}"], "docstring_tokens": ["NOTE", ":", "Currently", "5", "of", "contract", "balance", "."], "url": "f128d6e5cde8013463c469d34e4194cc"}
{"code_tokens": ["contract", "c31533{", "function", "euroCentsInOneEther()", "public", "constant", "returns", "(uint)", "{", "return", "58000;", "}", "}"], "docstring_tokens": ["euro-cents", "per", "1", "ether", "."], "url": "55f061e7399bfc4cb1b9a0ab5cac6b99"}
{"code_tokens": ["contract", "c39705{", "function", "donateAsWithChecksum(address", "addr,", "bytes4", "checksum)", "payable", "returns", "(bool)", "{", "bytes32", "hash", "=", "sha256(addr);", "if", "(bytes4(hash)", "!=", "checksum)", "{", "throw", ";", "}", "return", "donateAs(addr);", "}", "}"], "docstring_tokens": ["Send", "donation", "in", "the", "name", "a", "the", "given", "address", "with", "checksum", "."], "url": "0c55013625bf316d39f69fb0c305c89e"}
{"code_tokens": ["contract", "c23694{", "function", "redeemBattleCrates()", "external", "{", "uint8", "count", "=", "0;", "uint", "len", "=", "pendingRewards[msg.sender].length;", "require(len", ">", "0);", "for", "(uint", "i", "=", "0;", "i", "<", "len;", "i++)", "{", "Reward", "memory", "rewardStruct", "=", "pendingRewards[msg.sender][i];", "require(block.number", ">", "rewardStruct.blocknumber);", "require(rewardStruct.blocknumber", "!=", "0);", "var", "hash", "=", "block.blockhash(rewardStruct.blocknumber);", "if", "(uint(hash)", "!=", "0)", "{", "uint", "rand", "=", "uint(keccak256(hash,", "msg.sender,", "i));", "_generateBattleReward(rand,rewardStruct.exp);", "count++;", "}", "else", "{", "}", "}", "CratesOpened(msg.sender,", "count);", "delete", "pendingRewards[msg.sender];", "}", "}"], "docstring_tokens": ["in", "PerksRewards", "."], "url": "f9f1ca2cef4b7ee3425ef5db9a30ad02"}
{"code_tokens": ["contract", "c13479{", "function", "__callback(bytes32", "_id,", "string", "_result)", "public", "{", "require(msg.sender", "==", "oraclize_cbAddress());", "require(ids[_id]", "==", "true);", "ETHEUR", "=", "_result;", "fidaPerEther", "=", "parseInt(_result,", "5);", "emit", "PriceUpdated(_id,", "_result);", "}", "}"], "docstring_tokens": ["Oraclize", "callback", "function", "."], "url": "8520fef1e967982cf4b0f5bc7f2d6753"}
{"code_tokens": ["contract", "c22522{", "function", "sin(uint16", "_angle)", "public", "pure", "returns", "(int)", "{", "uint", "interp", "=", "bits(_angle,", "INTERP_WIDTH,", "INTERP_OFFSET);", "uint", "index", "=", "bits(_angle,", "INDEX_WIDTH,", "INDEX_OFFSET);", "bool", "is_odd_quadrant", "=", "(_angle", "&", "QUADRANT_LOW_MASK)", "==", "0;", "bool", "is_negative_quadrant", "=", "(_angle", "&", "QUADRANT_HIGH_MASK)", "!=", "0;", "if", "(!is_odd_quadrant)", "{", "index", "=", "SINE_TABLE_SIZE", "-", "1", "-", "index;", "}", "uint", "x1", "=", "sin_table_lookup(index);", "uint", "x2", "=", "sin_table_lookup(index", "+", "1);", "uint", "approximation", "=", "((x2", "-", "x1)", "*", "interp)", "/", "(2", "**", "INTERP_WIDTH);", "int", "sine;", "if", "(is_odd_quadrant)", "{", "sine", "=", "int(x1)", "+", "int(approximation);", "}", "else", "{", "sine", "=", "int(x2)", "-", "int(approximation);", "}", "if", "(is_negative_quadrant)", "{", "sine", "*=", "-1;", "}", "return", "sine;", "}", "}"], "docstring_tokens": ["The", "sine", "result", "as", "a", "number", "in", "the", "range", "-", "32767", "to", "32767", "."], "url": "7b61975142574dbf694c3705ee780cc5"}
{"code_tokens": ["contract", "c30193{", "function", "acceptOwnership()", "public", "{", "require(msg.sender", "==", "potentialOwner);", "owner", "=", "msg.sender;", "potentialOwner", "=", "address(0);", "}", "}"], "docstring_tokens": ["Accept", "ownership", "of", "the", "Lottery", "(", "if", "a", "transfer", "has", "been", "initiated", "with", "your", "address", ")", "."], "url": "6f78b23c2299018b1f5c5481c4a354d7"}
{"code_tokens": ["contract", "c20538{", "function", "hasEnded()", "public", "constant", "returns", "(bool)", "{", "return", "super.hasEnded()", "||", "softCapClose", ">", "0", "&&", "now", ">", "softCapClose;", "}", "}"], "docstring_tokens": ["Overriding", "Crowdsale", "hasEnded", "to", "add", "soft", "cap", "logic", "."], "url": "c071dc68575f5b896f20ba112b54d8df"}
{"code_tokens": ["contract", "c807{", "modifier", "validAddress(address", "_address)", "{", "require(_address", "!=", "address(0));", "_;", "}", "}"], "docstring_tokens": ["validates", "an", "address", "-", "currently", "only", "checks", "that", "it", "isn't", "null", "."], "url": "9aaffbe7e4faebe34f4d943b18c679f3"}
{"code_tokens": ["contract", "c4780{", "function", "unApprove(address", "_spender,", "uint256", "_value)", "moreThanZero(_value)", "transable", "public", "returns", "(bool", "success)", "{", "require(_value", "==", "0", "||", "(allowance[msg.sender][_spender]", "==", "0));", "allowance[msg.sender][_spender]", "=", "allowance[msg.sender][_spender].sub(_value);", "emit", "Approval(msg.sender,", "_spender,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["decreace", "allowance", "."], "url": "e49d8456d17c403e878dd87dc4091bd7"}
{"code_tokens": ["contract", "c10674{", "function", "upgradeManager()", "public", "view", "returns", "(address)", "{", "return", "upgradeManager_;", "}", "}"], "docstring_tokens": ["get", "the", "upgrade", "manager", "address", "."], "url": "5002069491abc8318b677e147eddb78f"}
{"code_tokens": ["contract", "c835{", "function", "tokenURI(uint", "_tokenId)", "external", "view", "returns", "(string){", "require(exists(_tokenId));", "return", "core.getTokenURIs(_tokenId,tokenIsChamp);", "}", "}"], "docstring_tokens": ["A", "distinct", "Uniform", "Resource", "Identifier", "(", "URI", ")", "for", "a", "given", "asset", "."], "url": "8f9addc220c0ec4c10ff8d3169eae30f"}
{"code_tokens": ["contract", "c29865{", "function", "approve(address", "_spender,", "uint256", "_value)", "public", "returns", "(bool)", "{", "allowances[msg.sender][_spender]", "=", "_value;", "Approval(msg.sender,", "_spender,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["Allow", "another", "user", "to", "spend", "a", "certain", "amount", "of", "Beercoins", "on", "your", "behalf", "."], "url": "583ef1335b8ab4bbda1af44555d6f404"}
{"code_tokens": ["contract", "c7582{", "function", "setVotingPeriod(uint", "duration)", "external", "onlyOwner", "{", "require(MIN_VOTING_PERIOD", "<=", "duration", "&&", "duration", "<=", "MAX_VOTING_PERIOD);", "require(duration", "<=", "havven.feePeriodDuration());", "votingPeriod", "=", "duration;", "}", "}"], "docstring_tokens": ["Set", "the", "length", "of", "time", "a", "vote", "runs", "for", "."], "url": "e523fda3b3efd39763472e9e999b0225"}
{"code_tokens": ["contract", "c22470{", "function", "setBank(address", "newBank)", "external", "validRecipient(newBank)", "onlyOwner()", "checkAccess()", "{", "require(newBank", "!=", "address(0));", "m_bank", "=", "newBank;", "}", "}"], "docstring_tokens": ["Set", "the", "bank", ",", "which", "receive", "95", "ETH", "from", "tokens", "sale", "."], "url": "acb5164194acf7a5c3a746090ec91070"}
{"code_tokens": ["contract", "c8614{", "function", "jobStarted(", "bytes16", "_jobId,", "address", "_hirer,", "address", "_contractor,", "uint256", "_value,", "uint256", "_fee", ")", "external", "onlyContractor(_contractor)", "{", "bytes32", "jobHash", "=", "getJobHash(", "_jobId,", "_hirer,", "_contractor,", "_value,", "_fee);", "require(jobEscrows[jobHash].exists);", "require(jobEscrows[jobHash].status", "==", "STATUS_JOB_CREATED);", "jobEscrows[jobHash].status", "=", "STATUS_JOB_STARTED;", "jobEscrows[jobHash].hirerCanCancelAfter", "=", "0;", "jobEscrows[jobHash].agreedCompletionDate", "=", "uint32(block.timestamp)", "+", "jobEscrows[jobHash].secondsToComplete;", "emit", "ContractorStartedJob(jobHash,", "msg.sender);", "}", "}"], "docstring_tokens": ["Flags", "job", "started", ",", "and", "Stops", "the", "hirer", "from", "cancelling", "the", "job", "."], "url": "df34357295faa814d568645352842a26"}
{"code_tokens": ["contract", "c1969{", "function", "removeMemberAcct(address", "_memberAddress)", "public", "onlyOwner{", "require(_memberAddress", "!=", "address(0));", "uint256", "indexToDelete;", "uint256", "lastAcctIndex;", "address", "lastAdd;", "Member", "storage", "memberAddress", "=", "members[_memberAddress];", "memberAddress.memberId", "=", "0;", "memberAddress.membershipType", "=", "0;", "indexToDelete", "=", "membersAcctsIndex[_memberAddress];", "lastAcctIndex", "=", "membersAccts.length.sub(1);", "lastAdd", "=", "membersAccts[lastAcctIndex];", "membersAccts[indexToDelete]=lastAdd;", "membersAcctsIndex[lastAdd]", "=", "indexToDelete;", "membersAccts.length--;", "membersAcctsIndex[_memberAddress]=0;", "}", "}"], "docstring_tokens": ["Use", "this", "function", "to", "remove", "member", "acct", "from", "array", "memberAcct", "."], "url": "333f181f8673b07fbe30b2e78e83bd3d"}
{"code_tokens": ["contract", "c22622{", "modifier", "onlyFounder(uint256", "_tokenId)", "{", "require(msg.sender", "==", "founderOf(_tokenId));", "_;", "}", "}"], "docstring_tokens": ["Access", "modifier", "for", "founder", "of", "library", "."], "url": "0bd9434a27f2012be9eb7a2fb0c285cc"}
{"code_tokens": ["contract", "c31843{", "function", "gameOver()", "public", "{", "if", "(msg.sender", "==", "owner)", "{", "selfdestruct(owner);", "}", "}", "}"], "docstring_tokens": ["all", "money", "will", "go", "to", "dogcharity", "projects", "."], "url": "347522264f4ca5371deccf92bf428735"}
{"code_tokens": ["contract", "c15816{", "function", "approve(address", "to,", "uint256", "index)", "public", "returns", "(bool)", "{", "Loan", "storage", "loan", "=", "loans[index];", "require(msg.sender", "==", "loan.lender);", "loan.approvedTransfer", "=", "to;", "Approval(msg.sender,", "to,", "index);", "return", "true;", "}", "}"], "docstring_tokens": ["Approves", "the", "transfer", "of", "a", "given", "loan", "in", "the", "name", "of", "the", "lender", ",", "the", "behavior", "of", "this", "function", "is", "similar", "to", "approve", "in", "the", "ERC20", "standard", ",", "but", "only", "one", "approved", "address", "is", "allowed", "at", "a", "time", "."], "url": "ce13deebf5b5ae795c147dd6b20173b8"}
{"code_tokens": ["contract", "c16216{", "function", "cancel()", "public", "{", "require(!_state._cancelled);", "require(_state._participant", "==", "address(0));", "if", "((msg.sender", "!=", "deployment._owner)", "&&", "(msg.sender", "!=", "deployment._cause))", "{", "require((now", ">=", "deployment._expireTime)", "&&", "(now", "<", "deployment._destructTime));", "}", "_state._cancelled", "=", "true;", "Cancellation();", "}", "}"], "docstring_tokens": ["called", "by", "the", "cause", "or", "Seedom", "before", "the", "end", "time", "to", "cancel", "the", "fundraiser", ",", "refunding", "all", "participants", ";", "this", "function", "is", "available", "to", "the", "entire", "community", "after", "the", "expire", "time", "."], "url": "447bb55b883841aa497671a85e467da3"}
{"code_tokens": ["contract", "c14698{", "function", "closeIco()", "public", "onlyOwner", "{", "require(!isIcoComplete,", "\"The", "ICO", "phase", "has", "already", "ended,", "you", "cannot", "close", "it", "again.\");", "require((balances[owner]", "-", "rewardPool_)", "==", "0,", "\"Cannot", "close", "ICO", "when", "a", "balance", "remains", "in", "the", "owner", "account.\");", "isIcoComplete", "=", "true;", "delete", "kycHashes;", "delete", "kycValidated;", "emit", "IcoComplete();", "}", "}"], "docstring_tokens": ["End", "the", "ICO", "phase", "in", "accordance", "with", "KYC", "procedures", "and", "clean", "up", "."], "url": "daac2b738679571fb8ef2dfb99cc1e47"}
{"code_tokens": ["contract", "c66{", "function", "whitelistMaxTok(uint", "_idx,", "address", "_spender)", "internal", "pure", "returns", "(bytes32)", "{", "return", "keccak256(_spender,", "\"max_tok\",", "tierWhitelist(_idx));", "}", "}"], "docstring_tokens": ["Stores", "a", "spender's", "maximum", "number", "of", "tokens", "allowed", "to", "be", "purchased", "."], "url": "daed37722f058bb7885e6d96843fd154"}
{"code_tokens": ["contract", "c29409{", "function", "allocateTokens(address", "_to,", "uint256", "_tokens)", "public", "onlyOwner", "returns", "(bool)", "{", "require(balanceOf(owner)", ">=", "_tokens);", "balances[owner]", "=", "balances[owner].sub(_tokens);", "balances[_to]", "=", "balances[_to].add(_tokens);", "allocatedTokens", "=", "allocatedTokens.add(_tokens);", "Transfer(owner,", "_to,", "_tokens);", "return", "true;", "}", "}"], "docstring_tokens": ["Allocate", "tokens", "to", "an", "address", "."], "url": "4390028d47a67fa456017f1c65eb027c"}
{"code_tokens": ["contract", "c10769{", "function", "getOneDepositRec(uint256", "_ind)", "public", "view", "returns", "(uint256,", "address,", "uint256)", "{", "require(_ind", "<", "deposRecs.length);", "return", "(deposRecs[_ind].timeStamp,", "deposRecs[_ind].account,", "deposRecs[_ind].value);", "}", "}"], "docstring_tokens": ["get", "the", "one", "of", "the", "Deposit", "records", "."], "url": "7ad97ed4f8e60d66e37be3d047438482"}
{"code_tokens": ["contract", "c9368{", "function", "transferFromViaSignature", "(", "address", "signer,", "address", "from,", "address", "to,", "uint256", "value,", "uint256", "fee,", "address", "feeRecipient,", "uint256", "deadline,", "uint256", "sigId,", "bytes", "sig,", "sigStandard", "sigStd", ")", "external", "returns", "(bool)", "{", "requireSignature(", "keccak256(address(this),", "from,", "to,", "value,", "fee,", "feeRecipient,", "deadline,", "sigId),", "signer,", "deadline,", "sigId,", "sig,", "sigStd,", "sigDestination.transferFrom", ");", "allowance[from][signer]", "=", "allowance[from][signer].sub(value);", "internalDoubleTransfer(from,", "to,", "value.sub(fee),", "feeRecipient,", "fee);", "return", "true;", "}", "}"], "docstring_tokens": ["Same", "as", "transferViaSignature", ",", "but", "for", "transferFrom", "."], "url": "793d131e534517afd605b19d8d9cc3cf"}
{"code_tokens": ["contract", "c24875{", "function", "GroupMultiplier(uint", "number,uint", "groupID)", "public", "pure", "returns(uint){", "uint80[12]", "memory", "groups=[", "0x30c30c30c30c30c30c0,", "0x0c30c30c30c30c30c30,", "0x030c30c30c30c30c30c,", "0x0000000000003fffffc,", "0x0000003fffffc000000,", "0x3fffffc000000000000,", "0x0000000002aaaaaaaa8,", "0x2222222222222222220,", "0x222208888a222088888,", "0x0888a22220888a22220,", "0x0888888888888888888,", "0x2aaaaaaaa8000000000", "];", "return", "(groups[groupID]>>(number*2))&3;", "}", "}"], "docstring_tokens": ["helper", "function", "used", "when", "calculating", "win", "amounts", "."], "url": "12a114f318d5a0a927dbcc64e863d148"}
{"code_tokens": ["contract", "c12018{", "function", "appendUint256(uint256[]", "memory", "arr,", "uint256", "val)", "internal", "pure", "returns", "(uint256[]", "memory", "toRet)", "{", "toRet", "=", "new", "uint256[](arr.length", "+", "1);", "for", "(uint256", "i", "=", "0;", "i", "<", "arr.length;", "i++)", "{", "toRet[i]", "=", "arr[i];", "}", "toRet[arr.length]", "=", "val;", "}", "}"], "docstring_tokens": ["A", "simple", "library", "to", "allow", "appending", "to", "memory", "arrays", "."], "url": "54fc7610e7d8b154383c654dfeb8f752"}
{"code_tokens": ["contract", "c2658{", "function", "calculateProfit(uint", "_initBet,", "uint", "_roll)", "private", "view", "returns", "(uint)", "{", "return", "((((_initBet", "*", "(101", "-", "(_roll.sub(1))))", "/", "(_roll.sub(1))", "+", "_initBet))", "*", "houseEdge", "/", "houseEdgeDivisor)", "-", "_initBet;", "}", "}"], "docstring_tokens": ["TODO", "comment", "this", "Norsefire", ",", "I", "have", "no", "idea", "how", "it", "works", "."], "url": "985f125396a11f2216cad8d8ec3f9cac"}
{"code_tokens": ["contract", "c24599{", "function", "getState(uint256", "_tokenId)", "public", "view", "returns", "(", "string", "stateName,", "uint256", "sellingPrice,", "address", "owner", ")", "{", "State", "storage", "state", "=", "states[_tokenId];", "stateName", "=", "state.name;", "sellingPrice", "=", "stateIndexToPrice[_tokenId];", "owner", "=", "stateIndexToOwner[_tokenId];", "}", "}"], "docstring_tokens": ["Returns", "all", "the", "relevant", "information", "about", "a", "specific", "state", "."], "url": "a08809c3941e3b315b32e3702dede079"}
{"code_tokens": ["contract", "c20338{", "function", "setUpdater(address", "_updater)", "external", "onlyOwner", "{", "updater", "=", "_updater;", "}", "}"], "docstring_tokens": ["Setters", "and", "Getters", ":", "."], "url": "8996e23ecba2876c4063fcee70b3aafd"}
{"code_tokens": ["contract", "c15{", "modifier", "whenPaused", "{", "require(paused);", "_;", "}", "}"], "docstring_tokens": ["modifier", "to", "allow", "actions", "only", "when", "the", "contract", "IS", "NOT", "paused", "."], "url": "f02e16f8a3b9e589164222aea6e155f7"}
{"code_tokens": ["contract", "c22089{", "function", "freezeTransfersUntil(uint256", "_frozenUntilBlock,", "string", "_reason)", "onlyOwner", "{", "tokenFrozenUntilBlock", "=", "_frozenUntilBlock;", "TokenFrozen(_frozenUntilBlock,", "_reason);", "}", "}"], "docstring_tokens": ["Stops", "all", "token", "transfers", "in", "case", "of", "emergency", "."], "url": "b67bc44d2b44e26543665723d6bb63b6"}
{"code_tokens": ["contract", "c30208{", "function", "isActive()", "public", "view", "returns", "(bool)", "{", "return", "block.number", ">=", "startBlock", "&&", "block.number", "<=", "endBlock;", "}", "}"], "docstring_tokens": ["Check", "whether", "sale", "is", "currently", "active", "."], "url": "89f50abcd6abcab85410fded7c3a46c8"}
{"code_tokens": ["contract", "c15078{", "function", "setICOPrice(uint256", "priceForIcoInWei)", "isOwner", "{", "require(priceForIcoInWei", ">", "0);", "require(ICOprice", "!=", "priceForIcoInWei);", "ICOprice", "=", "priceForIcoInWei;", "updatePrices();", "}", "}"], "docstring_tokens": ["Set", "current", "price", "rate", "B", "."], "url": "3a6d714ba42677f20da6818f3a0186b8"}
{"code_tokens": ["contract", "c5729{", "function", "getTokenAddresses()", "public", "view", "returns", "(address[])", "{", "return", "tokenAddresses;", "}", "}"], "docstring_tokens": ["Returns", "an", "array", "containing", "all", "token", "addresses", "."], "url": "b8c1b8883353c11bff36bb2a5cafab63"}
{"code_tokens": ["contract", "c8000{", "function", "updateUSDETH(uint256", "_USDETH)", "public", "onlyOwner", "{", "require(_USDETH", ">", "0);", "USDETH", "=", "_USDETH;", "}", "}"], "docstring_tokens": ["Owner", "can", "change", "the", "USDETH", "rate", "."], "url": "f1e541c4738819043029f78cf1e6c72e"}
{"code_tokens": ["contract", "c36755{", "function", "amountRaisedInEth()", "constant", "returns", "(uint256", "amountRaisedSoFarInEth)", "{", "amountRaisedSoFarInEth", "=", "safeDiv(amountRaisedInWei,1", "ether);", "}", "}"], "docstring_tokens": ["returns", "crowdsale", "progress", "(", "funds", "raised", ")", "in", "Eth", ",", "low", "res", "."], "url": "505bf3d34290a8f8e587d7641ae04140"}
{"code_tokens": ["contract", "c22900{", "function", "setUsername(bytes16", "_username)", "public", "{", "usernames[msg.sender]", "=", "_username;", "emit", "UsernameChange(msg.sender,", "_username);", "}", "}"], "docstring_tokens": ["Set", "the", "username", "of", "sender", "user", "."], "url": "ead6af7bffc44e6c5d6fa9c2ad515198"}
{"code_tokens": ["contract", "c32523{", "function", "getStartTime()", "internal", "constant", "returns", "(uint)", "{", "return", "m_startTimestamp;", "}", "}"], "docstring_tokens": ["Start", "time", "of", "the", "crowdsale", "."], "url": "b5041244ea3d25ac0799f7ae4240b039"}
{"code_tokens": ["contract", "c39512{", "function", "getNumEvenSplits()", "constant", "returns(uint", "_numEvenSplits)", "{", "_numEvenSplits", "=", "0;", "for", "(uint", "i", "=", "0;", "i", "<", "numAccounts;", "i++", ")", "{", "if", "(partnerAccounts[i].evenStart)", "{", "++_numEvenSplits;", "}", "}", "StatEventI(\"ok:", "even", "splits\",", "_numEvenSplits);", "}", "}"], "docstring_tokens": ["get", "no", "."], "url": "539486e5503090882e524d7b93f8cea5"}
{"code_tokens": ["contract", "c22181{", "modifier", "inBeta()", "{", "require(ALLOW_BETA);", "_;", "}", "}"], "docstring_tokens": ["Check", "if", "game", "is", "in", "beta", "or", "not", "."], "url": "51754902769596f2085c748132736f27"}
{"code_tokens": ["contract", "c16216{", "function", "destroy()", "public", "destructionPhase", "onlyOwner", "{", "selfdestruct(msg.sender);", "}", "}"], "docstring_tokens": ["destroy", "(", ")", "will", "be", "used", "to", "clean", "up", "old", "contracts", "from", "the", "network", "."], "url": "38c19f0809b9463c424b379730b1ec77"}
{"code_tokens": ["contract", "c29026{", "function", "getIndexByAddress(address", "_owner,", "address", "_swap)", "public", "constant", "returns", "(uint", "index)", "{", "return", "swap_balances_index[_swap][_owner];", "}", "}"], "docstring_tokens": ["Returns", "the", "index", "associated", "with", "the", "_owner", "address", "in", "a", "particular", "swap", "."], "url": "2b589a0eaf2cefe9527c66b32f1326ab"}
{"code_tokens": ["contract", "c31218{", "function", "start()", "external", "onlyOwner()", "{", "startBlock", "=", "block.number;", "endBlock", "=", "startBlock", "+", "563472;", "}", "}"], "docstring_tokens": ["It", "will", "be", "called", "by", "owner", "to", "start", "the", "sale", "block", "numbers", "will", "be", "calculated", "based", "on", "current", "block", "time", "average", "."], "url": "1b7db9bd968337a6ca20e49c67e3f8a8"}
{"code_tokens": ["contract", "c14229{", "function", "changeMainEndTime(uint", "_timestamp)", "onlyOwner", "public", "{", "mainEndTime", "=", "_timestamp;", "}", "}"], "docstring_tokens": ["change", "main", "stop", "time", "by", "owner", "."], "url": "5df4c64a1b787f1d4cb6a758e6d402c0"}
{"code_tokens": ["contract", "c36979{", "function", "multiMint(address[]", "_to,", "uint[]", "_amount)", "onlyAdministrator", "{", "require(!sealed);", "require(_to.length", "!=", "0);", "require(_to.length", "==", "_amount.length);", "for", "(uint", "i", "=", "0;", "i", "<", "_to.length;", "i++)", "{", "require(_to[i]", "!=", "0x0);", "require(_amount[i]", "!=", "0);", "balances[_to[i]]", "=", "balances[_to[i]].add(_amount[i]);", "totalSupply", "=", "totalSupply.add(_amount[i]);", "Transfer(0x0,", "_to[i],", "_amount[i]);", "}", "}", "}"], "docstring_tokens": ["Mint", "coins", "for", "a", "multiple", "accounts", "."], "url": "c35c15fe082885b9133151c0a71f1763"}
{"code_tokens": ["contract", "c22900{", "function", "ownerOf(uint256", "_id)", "public", "constant", "returns", "(address)", "{", "return", "emojis[_id].owner;", "}", "}"], "docstring_tokens": ["Get", "the", "owner", "of", "an", "emoji", "."], "url": "d74b53e60eb9a5fcfc02e5bc6a079dca"}
{"code_tokens": ["contract", "c19437{", "function", "getPresaleAllocation(address", "investor)", "view", "public", "returns(uint256)", "{", "return", "presaleAllocations[investor];", "}", "}"], "docstring_tokens": ["Get", "the", "number", "of", "tokens", "which", "an", "investor", "can", "purchase", "at", "presale", "rate", "."], "url": "3fb640b546ba51a9d5a4eee45677d95f"}
{"code_tokens": ["contract", "c10856{", "function", "addOwed(address", "to,", "uint", "tokens)", "public", "returns", "(uint", "newOwed)", "{", "require((msg.sender", "==", "owner)", "||", "(crowdSalesCompleted", ">", "0));", "owed[msg.sender][to]", "=", "owed[msg.sender][to].add(tokens);", "emit", "AddOwed(msg.sender,", "to,", "tokens);", "return", "owed[msg.sender][to];", "}", "}"], "docstring_tokens": ["Add", "amount", "owed", "(", "usually", "from", "broker", "to", "user", ")", "."], "url": "44e078d624e4822b7820185505ad548f"}
{"code_tokens": ["contract", "c25382{", "function", "getInvertedPrice(address", "ofAsset)", "view", "returns", "(bool", "isRecent,", "uint", "invertedPrice,", "uint", "decimal)", "{", "var", "(isInvertedRecent,", "inputPrice,", "assetDecimal)", "=", "getPrice(ofAsset);", "uint", "quoteDecimal", "=", "getDecimals(QUOTE_ASSET);", "return", "(", "isInvertedRecent,", "mul(10", "**", "uint(quoteDecimal),", "10", "**", "uint(assetDecimal))", "/", "inputPrice,", "quoteDecimal", ");", "}", "}"], "docstring_tokens": ["Gets", "inverted", "price", "of", "an", "asset", "."], "url": "5f7f0d3253005947e13fefb31faf79cd"}
{"code_tokens": ["contract", "c16772{", "function", "_transfer(address", "_from,", "address", "_to,", "uint256", "_tokenId)", "internal", "{", "ownershipTokenCount[_to]++;", "petIndexToOwner[_tokenId]", "=", "_to;", "if", "(_from", "!=", "address(0))", "{", "ownershipTokenCount[_from]--;", "delete", "petIndexToApproved[_tokenId];", "}", "emit", "Transfer(_from,", "_to,", "_tokenId);", "}", "}"], "docstring_tokens": ["Assigns", "ownership", "of", "a", "specific", "Kitty", "to", "an", "address", "."], "url": "4524c54a1a9e850ac9a9e6a71379e015"}
{"code_tokens": ["contract", "c23597{", "function", "adminClaimTokenForUser(address", "_backer)", "external", "onlyOwner()", "{", "claimTokensForUser(_backer);", "}", "}"], "docstring_tokens": ["this", "function", "can", "be", "called", "by", "admin", "to", "claim", "user's", "token", "in", "case", "of", "difficulties", "."], "url": "76b59a6657135d52644167b98347073c"}
{"code_tokens": ["contract", "c8710{", "function", "closeICO()", "public", "onlyOwner", "{", "updateStatus();", "require(status", "==", "StatusList.Closed);", "transferExcessTokensToReserve();", "}", "}"], "docstring_tokens": ["This", "function", "can", "be", "call", "by", "owner", "to", "close", "the", "ICO", "if", "status", "is", "closed", "."], "url": "30dd3d3402b7124152526168c5814413"}
{"code_tokens": ["contract", "c21922{", "function", "disown()", "public", "onlyOwner()", "atState(State.Active)", "{", "delete", "m_owner;", "}", "}"], "docstring_tokens": ["Owner", "do", "disown", "."], "url": "78b189e390b53f09330282fd127f1be3"}
{"code_tokens": ["contract", "c24377{", "function", "updateWhitelist(address", "_account,", "WhitelistPermission", "_permission)", "external", "onlyAdminAndOps", "returns", "(bool)", "{", "require(_account", "!=", "address(0));", "require(_permission", "==", "WhitelistPermission.PreSaleContributor", "||", "_permission", "==", "WhitelistPermission.PublicSaleContributor", "||", "_permission", "==", "WhitelistPermission.CannotContribute);", "require(!saleHasFinished());", "whitelist[_account]", "=", "_permission;", "address", "_who", "=", "msg.sender;", "WhiteListUpdated(_who,", "_account,", "_permission);", "return", "true;", "}", "}"], "docstring_tokens": ["Updates", "the", "whitelist", "."], "url": "9afff98f8d10af0650c469f4cc6a5bb5"}
{"code_tokens": ["contract", "c30757{", "function", "IsManager(address", "_manager)", "private", "view", "returns(bool){", "for", "(uint", "i", "=", "1;", "i", "<=", "mgrCount;", "i++)", "{", "if", "(mgrAddress[i]", "==", "_manager){", "return", "true;", "}", "}", "return", "false;", "}", "}"], "docstring_tokens": ["check", "that", "the", "sender", "is", "a", "manager", "."], "url": "2ba0d854689811578a66faa99bb55538"}
{"code_tokens": ["contract", "c10476{", "function", "getCurrentPrice(uint16", "dayId)", "private", "view", "returns", "(uint256", "currentPrice)", "{", "return", "hasOwner(dayId)", "?", "dayStructs[dayId].sellprice", ":", "initialDayPrice;", "}", "}"], "docstring_tokens": ["Returns", "the", "price", "the", "day", "currently", "can", "be", "bought", "for", "."], "url": "c3cbcc15cd31015c30b9b15b7460c987"}
{"code_tokens": ["contract", "c6586{", "function", "createInvestorTokenTimeLock(", "address", "_beneficiary,", "uint256", "_amount,", "uint256", "_start,", "address", "_tokenHolder", ")", "external", "onlyCrowdsale", "returns", "(bool)", "{", "require(_beneficiary", "!=", "address(0)", "&&", "_amount", ">", "0);", "require(_tokenHolder", "!=", "address(0));", "TokenTimelock", "memory", "tokenLock", "=", "TokenTimelock(", "_amount,", "_start.add(INVESTOR_LOCK_DURATION),", "false,", "false,", "false", ");", "tokenTimeLocks[_beneficiary].push(tokenLock);", "require(token.transferFrom(_tokenHolder,", "this,", "_amount));", "emit", "TokenTimelockCreated(", "_beneficiary,", "tokenLock.releaseTime,", "false,", "_amount);", "return", "true;", "}", "}"], "docstring_tokens": ["Creates", "a", "lock", "for", "the", "provided", "_beneficiary", "with", "the", "provided", "amount", "."], "url": "5b337ee6cf2c3eb0e78e7c385c5d8808"}
{"code_tokens": ["contract", "c6370{", "function", "getBeneficiaryMarket()", "public", "view", "returns", "(address)", "{", "return", "beneficiary_market;", "}", "}"], "docstring_tokens": ["get", "address", "of", "marketing", "team", "."], "url": "93211101ffe23ce6a05a0aeb8d84f56a"}
{"code_tokens": ["contract", "c32612{", "function", "disablePurchasing()", "{", "require(msg.sender", "==", "owner);", "purchasingAllowed", "=", "false;", "}", "}"], "docstring_tokens": ["Disabilita", "l'acquisto", "di", "token", "."], "url": "aa34dfee4a870fc34187522c336c37bf"}
{"code_tokens": ["contract", "c18675{", "function", "togglePromo(bool", "_status)", "public", "onlyEtheraffle", "{", "isActive", "=", "_status;", "emit", "LogActiveStatus(_status,", "now);", "}", "}"], "docstring_tokens": ["Toggles", "promo", "on", "off", "."], "url": "b51e3352e204d83d421fbb9174918382"}
{"code_tokens": ["contract", "c23219{", "function", "_transfer(address", "_from,", "address", "_to,", "uint256", "_tokenId)", "private", "{", "ownershipTokenCount[_to]++;", "whaleIndexToOwner[_tokenId]", "=", "_to;", "if", "(_from", "!=", "address(0))", "{", "ownershipTokenCount[_from]--;", "delete", "whaleIndexToApproved[_tokenId];", "}", "Transfer(_from,", "_to,", "_tokenId);", "}", "}"], "docstring_tokens": ["Assigns", "ownership", "of", "a", "specific", "whale", "to", "an", "address", "."], "url": "ca6723720e5c5ec5767c1de61470843c"}
{"code_tokens": ["contract", "c441{", "function", "toTimestamp(uint16", "year,", "uint8", "month,", "uint8", "day)", "internal", "pure", "returns", "(uint", "timestamp)", "{", "uint16", "i;", "timestamp", "+=", "(year", "-", "ORIGIN_YEAR)", "*", "1", "years;", "timestamp", "+=", "(leapYearsBefore(year)", "-", "leapYearsBefore(ORIGIN_YEAR))", "*", "1", "days;", "uint8[12]", "memory", "monthDayCounts;", "monthDayCounts[0]", "=", "31;", "if", "(isLeapYear(year))", "{", "monthDayCounts[1]", "=", "29;", "}", "else", "{", "monthDayCounts[1]", "=", "28;", "}", "monthDayCounts[2]", "=", "31;", "monthDayCounts[3]", "=", "30;", "monthDayCounts[4]", "=", "31;", "monthDayCounts[5]", "=", "30;", "monthDayCounts[6]", "=", "31;", "monthDayCounts[7]", "=", "31;", "monthDayCounts[8]", "=", "30;", "monthDayCounts[9]", "=", "31;", "monthDayCounts[10]", "=", "30;", "monthDayCounts[11]", "=", "31;", "for", "(i", "=", "1;", "i", "<", "month;", "i++)", "{", "timestamp", "+=", "monthDayCounts[i", "-", "1]", "*", "1", "days;", "}", "timestamp", "+=", "(day", "-", "1)", "*", "1", "days;", "return", "timestamp;", "}", "}"], "docstring_tokens": ["Timestamp", "functions", "based", "on", "https", ":", "/", "/", "github", ".", "com", "/", "pipermerriam", "/", "ethereum-datetime", "/", "blob", "/", "master", "/", "contracts", "/", "DateTime", ".", "sol", "."], "url": "2c59ccd5baac75c8b71463d2d15407c4"}
{"code_tokens": ["contract", "c8223{", "function", "increaseApproval(address", "spender,", "uint", "valueToAdd)", "public", "returns", "(bool)", "{", "allowed[msg.sender][spender]", "=", "allowed[msg.sender][spender].add(valueToAdd);", "emit", "Approval(msg.sender,", "spender,", "allowed[msg.sender][spender]);", "return", "true;", "}", "}"], "docstring_tokens": ["increment", "the", "spender", "delegated", "tokens", "."], "url": "e1a53100129898d9c18e1b3a524640c5"}
{"code_tokens": ["contract", "c17876{", "modifier", "canTransfer(address", "_from,", "address", "_to)", "{", "require(now", ">=", "limitEndDate", "||", "!isLimitEnabled", "||", "(!limitedWallets[_from]", "&&", "!limitedWallets[_to]));", "_;", "}", "}"], "docstring_tokens": ["Check", "if", "transfer", "between", "addresses", "is", "available", "."], "url": "403d4c83f335b3b643d6f036cd7d8120"}
{"code_tokens": ["contract", "c14209{", "function", "ownerkill()", "public", "onlyOwner", "{", "selfdestruct(owner);", "}", "}"], "docstring_tokens": ["owner", "selfdestruct", "contract", "*", "*", "*", "BE", "CAREFUL", "!", "EMERGENCY", "ONLY", "/", "CONTRACT", "UPGRADE", "."], "url": "c07f0b0e2ad53b5aa6d54a5fd897a9bc"}
{"code_tokens": ["contract", "c27549{", "function", "_owns(address", "_owner,", "uint256", "_deedId)", "internal", "view", "returns", "(bool)", "{", "return", "identifierToOwner[_deedId]", "==", "_owner;", "}", "}"], "docstring_tokens": ["Checks", "if", "a", "given", "address", "owns", "a", "particular", "plot", "."], "url": "e8b573a06fdd24ccfe6c6e6b14485ddf"}
{"code_tokens": ["contract", "c32275{", "function", "getBalance(", "ERC20", "token", ")", "constant", "returns(uint){", "if(", "token", "==", "ETH_TOKEN_ADDRESS", ")", "return", "this.balance;", "else", "return", "token.balanceOf(this);", "}", "}"], "docstring_tokens": ["a", "debug", "function", "."], "url": "181b0af0bb887c02e70000c25b7f898f"}
{"code_tokens": ["contract", "c14735{", "function", "lock(address", "_to,", "uint256", "_value,", "uint256", "_end)", "internal", "validAddress(_to)", "onlyOwner", "returns", "(bool)", "{", "require(_value", ">", "0);", "assert(totalProjectToken", ">", "0);", "totalLockToken", "=", "totalLockToken.add(_value);", "assert(totalProjectToken", ">=", "totalLockToken);", "require(allocations[_to].value", "==", "0);", "allocations[_to]", "=", "allocationLock({", "value:", "_value,", "end:", "_end,", "locked:", "true", "});", "Lock(this,", "_to,", "_value,", "_end);", "return", "true;", "}", "}"], "docstring_tokens": ["This", "function", "can", "accept", "for", "blocking", "no", "more", "than", "totalProjectToken", "."], "url": "7ddbebe4ca957beb928827bec07f8fc6"}
{"code_tokens": ["contract", "c1499{", "function", "hasEnoughBalance(address", "_addr,", "uint256", "_value)", "private", "view", "returns", "(bool", "has_enough_balance)", "{", "return", "_value", ">", "0", "&&", "balanceOf[_addr]", ">=", "_value;", "}", "}"], "docstring_tokens": ["check", "if", "the", "given", "account", "has", "enough", "balance", "more", "than", "given", "amount", "."], "url": "9f060af9b96b4737ea0d6279f5976c49"}
{"code_tokens": ["contract", "c40530{", "function", "abdicate()", "{", "if", "(msg.sender", "==", "madKing", "&&", "msg.sender", "!=", "trueGods)", "{", "madKing.send(kingBank);", "if", "(piggyBank", ">", "kingCost", "*", "40", "/", "100)", "{", "madKing.send(kingCost", "*", "40", "/", "100);", "piggyBank", "-=", "kingCost", "*", "40", "/", "100;", "}", "else", "{", "madKing.send(piggyBank);", "piggyBank", "=", "0;", "}", "madKing", "=", "trueGods;", "kingCost", "=", "1", "ether;", "}", "}", "}"], "docstring_tokens": ["When", "the", "mad", "king", "decides", "to", "give", "his", "seat", "to", "someone", "else", "the", "king", "cost", "will", "be", "reset", "to", "1", "ether", "."], "url": "65719be8f334a0c14c32b3253b269403"}
{"code_tokens": ["contract", "c16624{", "function", "withdrawETH(uint256", "amount)", "external", "{", "require(userBalance[msg.sender][0]", ">=", "amount);", "userBalance[msg.sender][0]", "=", "userBalance[msg.sender][0].sub(amount);", "msg.sender.transfer(amount);", "emit", "Withdrawal(msg.sender,", "0,", "amount);", "emit", "UserBalanceUpdated(msg.sender,", "0,", "userBalance[msg.sender][0]);", "}", "}"], "docstring_tokens": ["Users", "can", "withdraw", "any", "amount", "of", "ETH", "up", "to", "their", "current", "balance", "."], "url": "a69d23d1dc0176909aa419cdb23486f7"}
{"code_tokens": ["contract", "c12968{", "function", "getTotalBonded()", "public", "view", "returns", "(uint256)", "{", "return", "totalBonded;", "}", "}"], "docstring_tokens": ["Return", "total", "bonded", "tokens", "."], "url": "112dfd50602228cd1046a08b80aa461a"}
{"code_tokens": ["contract", "c6443{", "function", "tokenExists(uint256", "_tokenId)", "public", "view", "returns", "(bool)", "{", "address", "owner", "=", "tokenOwner[_tokenId];", "return", "owner", "!=", "address(0);", "}", "}"], "docstring_tokens": ["Check", "whether", "token", "is", "minted", "."], "url": "4721e38de96ebd81a093d896b38ae35a"}
{"code_tokens": ["contract", "c11742{", "function", "withdraw(address", "transferTo)", "onlyOwner", "external", "{", "require(transferTo", "==", "owner);", "uint256", "currentBalance", "=", "address(this).balance;", "owner.transfer(currentBalance);", "}", "}"], "docstring_tokens": ["Withdraws", "the", "fees", "which", "have", "been", "collected", "back", "to", "the", "contract", "owner", ",", "who", "is", "the", "only", "person", "that", "can", "call", "this", "."], "url": "4255a3e742dd41d81ab395ce34a9ffc7"}
{"code_tokens": ["contract", "c31890{", "function", "finish()", "public", "restricted", "{", "if", "(endDate", ">", "uint32(block.timestamp))", "{", "endDate", "=", "uint32(block.timestamp);", "}", "}", "}"], "docstring_tokens": ["Server", "method", "."], "url": "f0812df312d138626a688f4bbdef9fa9"}
{"code_tokens": ["contract", "c14749{", "function", "unapprove(address", "spender)", "external", "{", "approved[msg.sender][spender]", "=", "false;", "emit", "Unapproved(msg.sender,", "spender);", "}", "}"], "docstring_tokens": ["Unapproves", "an", "spender", "to", "trade", "balances", "of", "the", "sender", "."], "url": "0754b09a5a06874146e87d78d62c37a2"}
{"code_tokens": ["contract", "c3689{", "function", "generateTokens(address", "_owner,", "uint", "_theTotalSupply)", "private", "onlyContract", "returns", "(bool)", "{", "require(tokenGenerationLock", "==", "false);", "uint", "curTotalSupply", "=", "totalSupply();", "require(curTotalSupply", "+", "_theTotalSupply", ">=", "curTotalSupply);", "uint", "previousBalanceTo", "=", "balanceOf(_owner);", "require(previousBalanceTo", "+", "_totalSupply", ">=", "previousBalanceTo);", "updateValueAtNow(totalSupplyHistory,", "curTotalSupply", "+", "_totalSupply);", "updateValueAtNow(balances[_owner],", "previousBalanceTo", "+", "_totalSupply);", "emit", "Transfer(0,", "_owner,", "_totalSupply);", "tokenGenerationLock", "=", "true;", "return", "true;", "}", "}"], "docstring_tokens": ["The", "generateTokens", "function", "will", "generate", "the", "initial", "supply", "of", "tokens", "."], "url": "9368e7372f0bd98facee0f936904ddf8"}
{"code_tokens": ["contract", "c25106{", "function", "transferUnconditionally(address", "_from,", "address", "_to,", "uint", "_cardId)", "internal", "{", "if", "(_from", "!=", "address(0))", "{", "playerCards[_cardId].approvedForTransfer", "=", "address(0);", "removeCardFromOwnersList(_from,", "_cardId);", "}", "playerCards[_cardId].owner", "=", "_to;", "addCardToOwnersList(_to,", "_cardId);", "Transfer(_from,", "_to,", "_cardId);", "}", "}"], "docstring_tokens": ["Internal", "function", "to", "transfer", "without", "prior", "validation", ",", "requires", "callers", "to", "perform", "due-diligence", "."], "url": "6449e25f0ca7c2e351651b1fff9c11bc"}
{"code_tokens": ["contract", "c10476{", "function", "withdraw()", "public", "{", "uint256", "amount", "=", "pendingWithdrawals[msg.sender];", "pendingWithdrawals[msg.sender]", "=", "0;", "msg.sender.transfer(amount);", "}", "}"], "docstring_tokens": ["User", "can", "withdraw", "his", "balance", "."], "url": "e005ad05851d187a23ecd5e9b0251c6f"}
{"code_tokens": ["contract", "c20803{", "function", "getCity(uint", "_cityId)", "public", "view", "returns", "(", "uint", "landId,", "address", "landOwner,", "address", "cityOwner,", "uint256", "cityPrice,", "uint256", "cityGdp,", "bool", "cityForSale,", "uint", "squaresOccupied,", "uint", "metalStock,", "uint", "cityPopulation,", "uint", "healthCitizens,", "uint", "educationCitizens,", "uint", "happinessCitizens,", "uint", "productivityCitizens", ")", "{", "City", "storage", "_city", "=", "cities[_cityId];", "landId", "=", "_city.landId;", "landOwner", "=", "lands[_city.landId].ownerAddress;", "cityOwner", "=", "_city.ownerAddress;", "cityPrice", "=", "_city.cityPrice;", "cityGdp", "=", "_city.cityGdp;", "cityForSale", "=", "_city.cityForSale;", "squaresOccupied", "=", "_city.squaresOccupied;", "metalStock", "=", "_city.metalStock;", "cityPopulation", "=", "getCityPopulation(_cityId);", "healthCitizens", "=", "getHealthCitizens(_cityId);", "educationCitizens", "=", "getEducationCitizens(_cityId);", "happinessCitizens", "=", "getHappinessCitizens(_cityId);", "productivityCitizens", "=", "getProductivityCitizens(_cityId);", "}", "}"], "docstring_tokens": ["This", "function", "will", "return", "the", "details", "for", "a", "city", "."], "url": "29930cabaa4f81ec5354ab4b7f99dd63"}
{"code_tokens": ["contract", "c11770{", "function", "invite(", "address", "_inviter,", "address", "_invitee", ")", "public", "onlyOwner", "{", "data.setParent(_invitee,", "_inviter);", "data.setStatus(_invitee,", "0);", "}", "}"], "docstring_tokens": ["Add", "new", "child", "."], "url": "e8987e3c569b43785b01217d03005c7a"}
{"code_tokens": ["contract", "c38721{", "function", "rentOut(uint", "num)", "{", "if", "(ledger.balanceOf(msg.sender)", "<", "num)", "throw;", "rentalContract.offer(msg.sender,", "num);", "ledger.tokenTransfer(msg.sender,", "rentalContract,", "num);", "}", "}"], "docstring_tokens": ["Renting", "-", "-", "Logic", "TBD", "later", "."], "url": "81f21f436d310c21a42e90ec25d045f1"}
{"code_tokens": ["contract", "c1215{", "function", "registIcoAddress(address", "_icoAddress)", "onlyOwner", "public", "{", "require(_icoAddress", "!=", "address(0));", "require(!icoProceeding[_icoAddress]);", "icoProceeding[_icoAddress]", "=", "true;", "}", "}"], "docstring_tokens": ["ICO", "list", "management", "."], "url": "681c3473fa98ac55c0384de25964632c"}
{"code_tokens": ["contract", "c927{", "function", "setRequiredExpIncreaseFactor(uint32", "_value)", "onlyOwner", "public", "{", "requiredExpIncreaseFactor", "=", "_value;", "}", "}"], "docstring_tokens": ["Set", "the", "required", "golds", "to", "level", "up", "a", "hero", "."], "url": "f310befcbd5324ad7af713d6ee7fbeba"}
{"code_tokens": ["contract", "c37683{", "function", "__callback(bytes32", "queryId,", "string", "result)", "{", "if", "(msg.sender", "!=", "oraclize_cbAddress())", "revert();", "if", "(!validIds[queryId])", "revert();", "delete", "validIds[queryId];", "if", "(accidentOccurs)", "return;", "if", "(bytes(result).length", "==", "0)", "{", "accidentOccurs", "=", "(block.timestamp", "-", "lastActiveTs", ">=", "checkInterval);", "}", "else", "{", "lastActiveTs", "=", "block.timestamp;", "}", "Checked(accidentOccurs);", "if", "(accidentOccurs)", "{", "NeedRepeatCheck(true);", "}", "}", "}"], "docstring_tokens": ["The", "result", "look", "like", "'", "1469624867", ",", "1469624584", ",", ".", ".", ".", "'", "."], "url": "48a05c82c6d29d81c7be6f0fee0d4b09"}
{"code_tokens": ["contract", "c13780{", "function", "getContractDividends()", "public", "view", "returns(uint256)", "{", "return", "tokenContract.myDividends(true);", "}", "}"], "docstring_tokens": ["Collect", "information", "about", "Halo3dPotPotato", "dividents", "amount", "."], "url": "08ba4dbe1656fe85eac47eb5455f29b5"}
{"code_tokens": ["contract", "c25060{", "function", "buyIntoSyndicate()", "public", "payable", "{", "if(msg.value==0", "||", "availableBuyInShares==0)", "revert();", "if(msg.value", "<", "minimumBuyIn*buyInSharePrice)", "revert();", "uint256", "value", "=", "(msg.value/precision)*precision;", "uint256", "allocation", "=", "value/buyInSharePrice;", "if", "(allocation", ">=", "availableBuyInShares){", "allocation", "=", "availableBuyInShares;", "}", "availableBuyInShares-=allocation;", "addMember(msg.sender);", "members[msg.sender].numShares+=allocation;", "}", "}"], "docstring_tokens": ["buy", "into", "syndicate", "."], "url": "87777548fc17aa9577713a7330c02c3e"}
{"code_tokens": ["contract", "c25870{", "function", "mintTokens(address", "beneficiary,", "uint256", "tokens)", "public", "onlyOwner", "{", "require(beneficiary", "!=", "0x0);", "require(tokens", ">", "0);", "token.mint(beneficiary,", "tokens);", "}", "}"], "docstring_tokens": ["Allocates", "tokens", "to", "beneficiary", "."], "url": "fb7073b566d32e3cd5f86ee33da9e503"}
{"code_tokens": ["contract", "c2378{", "function", "sale1(address", "_investor,", "uint256", "_value)", "internal", "{", "uint256", "tokens", "=", "_value.mul(1e18).div(buyPrice);", "uint256", "bonusTokens", "=", "tokens.mul(10).div(100);", "tokens", "=", "tokens.add(bonusTokens);", "token.transferFromICO(_investor,", "tokens);", "uint256", "tokensReserve", "=", "tokens.mul(5).div(22);", "token.transferFromICO(reserve,", "tokensReserve);", "uint256", "tokensBoynty", "=", "tokens.mul(2).div(33);", "token.transferFromICO(bounty,", "tokensBoynty);", "uint256", "tokensPromo", "=", "tokens.mul(5).div(22);", "token.transferFromICO(promouters,", "tokensPromo);", "weisRaised", "=", "weisRaised.add(msg.value);", "}", "}"], "docstring_tokens": ["the", "issue", "of", "tokens", "in", "period", "1", "sales", "."], "url": "774b97472e075c46131863e85804782b"}
{"code_tokens": ["contract", "c18618{", "function", "setNewEndtime(address", "_target,", "uint256", "_oldEndTime,", "uint256", "_newEndTime)", "onlyOwner", "public", "returns", "(bool)", "{", "require(_target", "!=", "address(0));", "require(_oldEndTime", ">", "0", "&&", "_newEndTime", ">", "0);", "uint256", "len", "=", "frozenAccounts.length;", "uint256", "i", "=", "0;", "while", "(i", "<", "len)", "{", "address", "frozenAddr", "=", "frozenAccounts[i];", "if", "(frozenAddr", "==", "_target)", "{", "uint256", "timeRecLen", "=", "frozenTimes[frozenAddr].length;", "uint256", "j", "=", "0;", "while", "(j", "<", "timeRecLen)", "{", "TimeRec", "storage", "timePair", "=", "frozenTimes[frozenAddr][j];", "if", "(_oldEndTime", "==", "timePair.endTime)", "{", "uint256", "duration", "=", "timePair.releasePeriodEndTime.sub(timePair.endTime);", "timePair.endTime", "=", "_newEndTime;", "timePair.releasePeriodEndTime", "=", "timePair.endTime.add(duration);", "return", "true;", "}", "j", "=", "j.add(1);", "}", "return", "false;", "}", "i", "=", "i.add(1);", "}", "return", "false;", "}", "}"], "docstring_tokens": ["set", "the", "new", "endtime", "of", "the", "released", "time", "of", "an", "account", "."], "url": "b1ab11a54f76cc6da4cd4077dde98031"}
{"code_tokens": ["contract", "c12737{", "function", "createReleaseAuction(", "uint", "_tokenId,", "uint", "_startingPrice,", "uint", "_endingPrice,", "uint", "_startedAt,", "uint", "_duration", ")", "public", "whenNotPaused", "canReleaseArtwork", "{", "require(_startingPrice", ">", "_endingPrice);", "_createReleaseAuction(", "_tokenId,", "_startingPrice,", "_endingPrice,", "_startedAt,", "_duration", ");", "}", "}"], "docstring_tokens": ["Put", "a", "painting", "up", "for", "auction", "."], "url": "b32e01568758fb815838866ddf4053d4"}
{"code_tokens": ["contract", "c10776{", "function", "execute(uint8[]", "sigV,", "bytes32[]", "sigR,", "bytes32[]", "sigS,", "address", "destination,", "uint", "value,", "bytes", "data)", "public", "{", "require(sigR.length", "==", "threshold);", "require(sigR.length", "==", "sigS.length", "&&", "sigR.length", "==", "sigV.length);", "bytes32", "txHash", "=", "keccak256(byte(0x19),", "byte(0),", "this,", "destination,", "value,", "data,", "nonce);", "address", "lastAdd", "=", "address(0);", "for", "(uint", "i", "=", "0;", "i", "<", "threshold;", "i++)", "{", "address", "recovered", "=", "ecrecover(txHash,", "sigV[i],", "sigR[i],", "sigS[i]);", "require(recovered", ">", "lastAdd", "&&", "isOwner[recovered]);", "lastAdd", "=", "recovered;", "}", "nonce", "=", "nonce", "+", "1;", "require(executeCall(destination,", "value,", "data));", "}", "}"], "docstring_tokens": ["Note", "that", "address", "recovered", "from", "signatures", "must", "be", "strictly", "increasing", "."], "url": "f4179d10f984c1616bb7eebe71b63df2"}
{"code_tokens": ["contract", "c29749{", "function", "processPurchase(uint256[]", "results)", "public", "{", "require(msg.sender", "==", "manager);", "for", "(uint256", "i", "=", "0;", "i", "<", "results.length;", "i++)", "{", "address", "userAddress", "=", "address(results[i]", ">>", "96);", "Info", "storage", "user", "=", "users[userAddress];", "require(user.weiPaid", ">", "0);", "if", "((results[i]", "&", "0x1)", "==", "1)", "{", "weiLiquid", "+=", "user.weiPaid;", "token.transfer(userAddress,", "user.fstVested);", "Release(msg.sender,", "user.fstVested);", "}", "else", "{", "fstSold", "-=", "user.fstVested;", "weiRefund", "+=", "user.weiPaid;", "userAddress.transfer(user.weiPaid);", "Refund(msg.sender,", "user.weiPaid);", "}", "delete", "users[userAddress];", "}", "}", "}"], "docstring_tokens": ["on", "kyc", "result", "."], "url": "e829d43b04f827c5b44b4b6b7cdb06f9"}
{"code_tokens": ["contract", "c23044{", "function", "decreaseApproval(address", "_spender,", "uint", "_subtractedValue)", "onlyPayloadSize(2", "*", "32)", "public", "returns", "(bool)", "{", "return", "super.decreaseApproval(_spender,", "_subtractedValue);", "}", "}"], "docstring_tokens": ["overriding", "decreaseApproval", "method", "to", "include", "the", "onlyPayloadSize", "check", "modifier", "."], "url": "1ae4cf5f7eb15daad0701b7469586b61"}
{"code_tokens": ["contract", "c40077{", "function", "getRetractable(bytes20", "blobId)", "external", "constant", "exists(blobId)", "returns", "(bool", "retractable)", "{", "retractable", "=", "blobInfo[blobId].flags", "&", "RETRACTABLE", "!=", "0;", "}", "}"], "docstring_tokens": ["Determine", "if", "a", "blob", "is", "retractable", "."], "url": "28a2b612fe44a3f33a90b30dd3c1bf37"}
{"code_tokens": ["contract", "c18675{", "function", "getPromoLOTEarnt(uint", "_entries)", "public", "view", "returns", "(uint)", "{", "return", "(_entries", "*", "getRate()", "*", "getTktPrice())", "/", "(1", "*", "10", "**", "18);", "}", "}"], "docstring_tokens": ["Returns", "number", "of", "promotional", "LOT", "earnt", "as", "calculated", "based", "on", "number", "of", "entries", ",", "current", "ICO", "exchange", "rate", "and", "the", "current", "Etheraffle", "ticket", "price", "."], "url": "1d349bbf1505a7c67bab29a4b045edff"}
{"code_tokens": ["contract", "c19858{", "function", "open(bool", "_open)", "public", "onlyAuthority", "{", "isOpen", "=", "_open;", "if", "(_open)", "{", "RunSale();", "}", "else", "{", "PauseSale();", "}", "}", "}"], "docstring_tokens": ["SALE", "state", "management", ":", "start", "/", "pause", "/", "finalize", "."], "url": "312c2a8477498cd21b82ff118eacb558"}
{"code_tokens": ["contract", "c1285{", "function", "upRoundID(uint256", "roundID)", "isAdmin()", "isActivated()", "public", "{", "require(roundID_", "!=", "roundID,", "\"same", "to", "the", "current", "roundID\");", "roundID_", "=", "roundID;", "emit", "WinnerEvents.onUpRoundID", "(", "roundID", ");", "}", "}"], "docstring_tokens": ["update", "round", "id", "."], "url": "397c6e214897e779d2f95ae202889b6e"}
{"code_tokens": ["contract", "c14677{", "function", "approvePreSigned(", "bytes", "_signature,", "address", "_to,", "uint256", "_value,", "uint256", "_gasPrice,", "uint256", "_nonce)", "public", "validPayload(292)", "returns", "(bool)", "{", "uint256", "gas", "=", "gasleft();", "address", "from", "=", "recoverPreSigned(_signature,", "approveSig,", "_to,", "_value,", "\"\",", "_gasPrice,", "_nonce);", "require(from", "!=", "address(0));", "require(!invalidSignatures[from][_signature]);", "invalidSignatures[from][_signature]", "=", "true;", "nonces[from]++;", "require(_approve(from,", "_to,", "_value));", "if", "(_gasPrice", ">", "0)", "{", "gas", "=", "35000", "+", "gas.sub(gasleft());", "require(_transfer(from,", "msg.sender,", "_gasPrice.mul(gas)));", "}", "emit", "SignatureRedeemed(_signature,", "from);", "return", "true;", "}", "}"], "docstring_tokens": ["Called", "by", "a", "delegate", "with", "signed", "hash", "to", "approve", "a", "transaction", "for", "user", "."], "url": "53ea7fda7f9f23884fa8d9057ac74866"}
{"code_tokens": ["contract", "c1149{", "function", "ownerUpdateContractBalance(uint", "newContractBalance)", "public", "onlyOwner", "{", "contractBalance", "=", "newContractBalance;", "}", "}"], "docstring_tokens": ["Only", "owner", "adjust", "contract", "balance", "variable", "(", "only", "used", "for", "max", "profit", "calc", ")", "."], "url": "91c04aec5d5341c6c833ffe45ec0c162"}
{"code_tokens": ["contract", "c33851{", "function", "testPrice(uint256", "currentSupply)", "constant", "returns(uint256)", "{", "if", "(currentSupply<levelOneTokenNum)", "return", "1600;", "if", "(currentSupply>=levelOneTokenNum", "&&", "currentSupply", "<", "levelTwoTokenNum)", "return", "1000;", "if", "(currentSupply>=levelTwoTokenNum", "&&", "currentSupply", "<", "levelThreeTokenNum)", "return", "800;", "if", "(currentSupply>=levelThreeTokenNum", "&&", "currentSupply", "<", "levelFourTokenNum)", "return", "730;", "if", "(currentSupply>=levelFourTokenNum)", "return", "680;", "return", "1600;", "}", "}"], "docstring_tokens": ["price", "(", ")", "exposed", "for", "unit", "tests", "."], "url": "7d67c797af26e1fd699f0a2a3cf68f7f"}
{"code_tokens": ["contract", "c9106{", "function", "depositTokens(uint", "amount)", "onlyOwner", "public", "{", "tokenContract.transferFrom(msg.sender,", "this,", "amount);", "}", "}"], "docstring_tokens": ["Deposit", "tokens", "to", "the", "reserve", "."], "url": "c2d48f1e41ae9ff52d645b03133907cd"}
{"code_tokens": ["contract", "c17534{", "function", "setStartTime(uint256", "_startTime)", "public", "onlyOwner", "{", "startTime", "=", "_startTime;", "}", "}"], "docstring_tokens": ["set", "start", "time", "."], "url": "ca1a9b96d732faac1c480411b4a3d848"}
{"code_tokens": ["contract", "c88{", "function", "getSelector(bytes", "memory", "_calldata)", "internal", "pure", "returns", "(bytes4", "selector)", "{", "assembly", "{", "selector", ":=", "and(", "mload(add(0x20,", "_calldata)),", "0xffffffff00000000000000000000000000000000000000000000000000000000", ")", "}", "}", "}"], "docstring_tokens": ["Returns", "the", "first", "4", "bytes", "of", "calldata", "."], "url": "25456253b5f5f8889cdaa6eb1a2de7a3"}
{"code_tokens": ["contract", "c27549{", "function", "_cancelAuction(uint256", "_deedId,", "Auction", "auction)", "internal", "{", "_removeAuction(_deedId);", "_transfer(auction.seller,", "_deedId);", "AuctionCancelled(_deedId);", "}", "}"], "docstring_tokens": ["Cancel", "an", "auction", "."], "url": "b326c17556f68def2b98dcfb094b76e7"}
{"code_tokens": ["contract", "c30035{", "function", "changeRedTeamAddress(address", "_wallet)", "external", "onlyOwner", "{", "redTeamAddress", "=", "_wallet;", "}", "}"], "docstring_tokens": ["Changes", "Red", "Team", "wallet", "."], "url": "f78c659ae3cf02e0cf4b8be8e081b660"}
{"code_tokens": ["contract", "c28073{", "function", "buyTokensTier(uint8", "tier)", "internal", "validPurchase(tier)", "{", "address", "participant", "=", "msg.sender;", "uint256", "contributionInWei", "=", "msg.value;", "uint256", "tokens", "=", "contributionInWei.mul(rate);", "if", "(!token.transferFrom(token.owner(),", "participant,", "tokens))", "{", "revert();", "}", "weiRaised", "=", "weiRaised.add(contributionInWei);", "contributions[participant]", "=", "contributions[participant].add(contributionInWei);", "if", "(weiRaised", ">=", "FUNDING_ETH_HARD_CAP)", "{", "endOfferingImpl();", "}", "beneficiary.transfer(contributionInWei);", "TokenPurchase(msg.sender,", "contributionInWei,", "tokens);", "}", "}"], "docstring_tokens": ["Internal", "function", "that", "buys", "token", "per", "tier", "."], "url": "6c59c4cfba03f920a7566b7a621dc3b9"}
{"code_tokens": ["contract", "c15535{", "function", "approve(address", "spender,", "uint", "value)", "public", "returns", "(bool", "ok)", "{", "_approvals[msg.sender][spender]", "=", "value;", "Approval(msg.sender,", "spender,", "value);", "return", "true;", "}", "}"], "docstring_tokens": ["allow", "another", "Ethereum", "account", "to", "spend", "TMX", "Global", "Tokens", "from", "your", "Account", "."], "url": "4b7d427fa81480b0c133be0fde950430"}
{"code_tokens": ["contract", "c64{", "function", "finalizeAndDistributeToken()", "internal", "view", "{", "distributeAndUnlockTokens();", "}", "}"], "docstring_tokens": ["Checks", "input", "and", "then", "creates", "storage", "buffer", "for", "token", "distribution", "."], "url": "36833368f7e24ceb9b7e04f3463c7d1d"}
{"code_tokens": ["contract", "c3529{", "modifier", "antiEarlyWhale(uint256", "_amountOfEthereum){", "address", "_customerAddress", "=", "msg.sender;", "if(", "onlyAmbassadors", "&&", "((totalEthereumBalance()", "-", "_amountOfEthereum)", "<=", "ambassadorQuota_", ")){", "require(", "ambassadors_[_customerAddress]", "==", "true", "&&", "(ambassadorAccumulatedQuota_[_customerAddress]", "+", "_amountOfEthereum)", "<=", "ambassadorMaxPurchase_", ");", "ambassadorAccumulatedQuota_[_customerAddress]", "=", "SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress],", "_amountOfEthereum);", "_;", "}", "else", "{", "onlyAmbassadors", "=", "false;", "_;", "}", "}", "}"], "docstring_tokens": ["ensures", "that", "tha", "original", "tokens", "in", "tha", "contract", "is", "going", "to", "be", "equally", "distributed", "meaning", ",", "no", "divine", "dump", "is", "going", "to", "be", "possible", "result", ":", "healthy", "longevity", "."], "url": "145ec90fef75a18a57d1fa32d137bc11"}
{"code_tokens": ["contract", "c4166{", "function", "safeTransferFrom(", "address", "_from,", "address", "_to,", "uint256", "_tokenId", ")", "public", "whenNotPaused", "canPayFees(transferFee)", "{", "return", "super.safeTransferFrom(", "_from,", "_to,", "_tokenId);", "}", "}"], "docstring_tokens": ["Make", "safeTrasferFrom", "(", ")", "pausable", "."], "url": "961a1b69b7640dd88490d517f1743f58"}
{"code_tokens": ["contract", "c3554{", "function", "pay1(address", "to)", "public", "onlyAdmin", "returns(bool", "success){", "require(bitmask_check(to,", "4)", "==", "false);", "uint", "new_amount", "=", "100000000;", "payout(to,new_amount);", "bitmask_add(to,", "4);", "return", "true;", "}", "}"], "docstring_tokens": ["NOM", "token", "emission", "functions", "."], "url": "64a3198a5cad58c00f3eea34a72c6e32"}
{"code_tokens": ["contract", "c12783{", "function", "burnUnsold()", "public", "onlyOwner", "{", "require(now", ">", "lockedTill);", "require(address(this).balance", "==", "0);", "require(lockedTokens", "==", "0);", "require(allocatedTokens", "==", "0);", "require(unSoldTokens", ">", "0);", "selfdestruct(owner);", "}", "}"], "docstring_tokens": ["destory", "contract", "with", "unsold", "tokens", "."], "url": "859a034fa5146f2ce7b3a1d5e1a1ca81"}
{"code_tokens": ["contract", "c608{", "function", "transferToken(uint256", "tokens)", "public", "onlyOwner", "returns", "(bool", "success)", "{", "return", "transferAnyERC20Token(token,", "tokens);", "}", "}"], "docstring_tokens": ["Owner", "can", "transfer", "out", "promo", "token", "."], "url": "9cfd79c831a540ec49768e0c79b33998"}
{"code_tokens": ["contract", "c5374{", "function", "withdrawalAllowed(address", "_payee)", "public", "view", "returns", "(bool)", "{", "return", "state", "==", "State.Refunding;", "}", "}"], "docstring_tokens": ["Returns", "whether", "refundees", "can", "withdraw", "their", "deposits", "(", "be", "refunded", ")", "."], "url": "9995bf10bc2c423073713187ba238ba1"}
{"code_tokens": ["contract", "c36415{", "modifier", "onlyOwner()", "{", "require(msg.sender", "==", "owner);", "_;", "}", "}"], "docstring_tokens": ["Validates", "if", "msg", ".", "sender", "."], "url": "abc131ca556b29912ecc2bf6116507d1"}
{"code_tokens": ["contract", "c27952{", "function", "getAllTemplateProposals(address", "_securityTokenAddress)", "view", "public", "returns", "(address[]){", "return", "templateProposals[_securityTokenAddress];", "}", "}"], "docstring_tokens": ["Get", "an", "array", "containing", "the", "address", "of", "all", "template", "proposals", "for", "a", "given", "ST", "."], "url": "45a428cc1c2db3130aba34ffdb1a8d47"}
{"code_tokens": ["contract", "c32870{", "function", "getOwnerCount()", "public", "view", "returns", "(uint)", "{", "return", "ownersIndex.length;", "}", "}"], "docstring_tokens": ["The", "amount", "of", "owners", "."], "url": "578bf753ce9c2e6a722953af6ee4496b"}
{"code_tokens": ["contract", "c14416{", "function", "makeBid(uint16", "propertyID,", "uint256", "bidAmount)", "public", "validPropertyID(propertyID)", "{", "require(bidAmount", ">", "0);", "require(pxlProperty.balanceOf(msg.sender)", ">=", "1", "+", "bidAmount);", "Bid(propertyID,", "bidAmount,", "now);", "pxlProperty.burnPXL(msg.sender,", "1);", "}", "}"], "docstring_tokens": ["Make", "a", "public", "bid", "and", "notify", "a", "Property", "owner", "of", "your", "bid", "."], "url": "d9ec9f84a1db083795671609c97b97ff"}
{"code_tokens": ["contract", "c4977{", "function", "ownerDied()", "onlyWitness", "onlyAlive", "{", "require", "(this.balance", ">", "0);", "mapHeirsVoteOwnerHasDied[addressToString(msg.sender)]", "=", "true;", "var", "users", "=", "listWitnesses.toSlice().copy();", "uint256", "listLength", "=", "users.count(\";\".toSlice())", "+", "1;", "uint8", "count", "=", "0;", "for(uint", "i", "=", "0;", "i", "<", "listLength;", "i++)", "{", "if(mapHeirsVoteOwnerHasDied[users.split(\";\".toSlice()).toString()]", "==", "true){", "count", "=", "count", "+", "1;", "}", "}", "if(count", "==", "listLength){", "users", "=", "listHeirs.toSlice().copy();", "var", "percentages", "=", "listHeirsPercentages.toSlice().copy();", "listLength", "=", "users.count(\";\".toSlice())", "+", "1;", "for(i", "=", "0;", "i", "<", "listLength", "-", "1;", "i++)", "{", "parseAddr(users.split(\";\".toSlice()).toString()).transfer(((this.balance", "*", "stringToUint(percentages.split(\";\".toSlice()).toString()))", "/", "100000));", "}", "parseAddr(users.split(\";\".toSlice()).toString()).transfer(this.balance);", "status", "=", "Status.DEAD;", "}", "}", "}"], "docstring_tokens": ["Witness", "executes", "owner", "died", "."], "url": "057e60ffdbfba78c9b3ef44bb54a17a2"}
{"code_tokens": ["contract", "c37344{", "function", "createToken(address", "_recipient,", "uint", "_value)", "when_mintable", "only_minter", "returns", "(bool", "o_success)", "{", "balances[_recipient]", "+=", "_value;", "totalSupply", "+=", "_value;", "return", "true;", "}", "}"], "docstring_tokens": ["Create", "new", "tokens", "when", "called", "by", "the", "crowdfund", "contract", "."], "url": "be51bbc5d957fef24a2f1c56ccd702e2"}
{"code_tokens": ["contract", "c372{", "modifier", "isOwner()", "{", "require(msg.sender", "==", "owner);", "_;", "}", "}"], "docstring_tokens": ["Modifier", "-", "-", "-", "Owner", "Section", "."], "url": "12c70b17df37362cf142779066a5e3e9"}
{"code_tokens": ["contract", "c33106{", "function", "checkLogin(address", "_toCheck)", "view", "external", "returns", "(bool)", "{", "uint256", "check", "=", "0;", "check", "-=", "1;", "return", "(cooldown[_toCheck]", "==", "check);", "}", "}"], "docstring_tokens": ["Check", "if", "user", "is", "logged", "internal", "."], "url": "98f5c3ab9ca6b70ffa5224cb76323907"}
{"code_tokens": ["contract", "c26519{", "modifier", "onlyTeamLevel()", "{", "require(", "msg.sender", "==", "roleAdminAddress", "||", "msg.sender", "==", "roleEditorAddress", ");", "_;", "}", "}"], "docstring_tokens": ["Access", "modifier", "for", "contract", "owner", "only", "."], "url": "1120aa07b7ef48f86936413c71f95eaf"}
{"code_tokens": ["contract", "c26093{", "function", "burnUnsoldTokens()", "public", "onlyOwner", "icoEnded", "{", "token.burn(token.balanceOf(this));", "}", "}"], "docstring_tokens": ["Function", "burn", "all", "unsold", "Tokens", "(", "balance", "of", "crowdsale", ")", "."], "url": "5aff7ed8b8ed7c6497400ead5205244e"}
{"code_tokens": ["contract", "c25060{", "function", "invest(uint256", "optionNumber)", "public", "payable", "{", "assert(optionNumber", "<=", "9);", "uint256", "amount", "=", "roundIt(msg.value);", "assert(amount", ">=", "minimumStake);", "if", "(now>", "sessionEndTime){", "endSession();", "optionNumber", "=", "currentLowest;", "}", "uint256", "holding", "=", "playerPortfolio[msg.sender][optionNumber];", "holding", "=", "SafeMath.add(holding,", "amount);", "playerPortfolio[msg.sender][optionNumber]", "=", "holding;", "marketOptions[optionNumber]", "=", "SafeMath.add(marketOptions[optionNumber],amount);", "numberOfInvestments", "+=", "1;", "totalInvested", "+=", "amount;", "if", "(!activePlayers[msg.sender]){", "insertPlayer(msg.sender);", "activePlayers[msg.sender]=true;", "}", "Invest(msg.sender,", "optionNumber,", "amount,", "marketOptions,", "block.number);", "updatePlayCount();", "currentLowest", "=", "findCurrentLowest();", "}", "}"], "docstring_tokens": ["main", "entry", "point", "for", "investors", "/", "players", "."], "url": "9bdf55e1991c06e2db8df4c7551dc179"}
{"code_tokens": ["contract", "c37174{", "function", "balanceOf(address", "_owner)", "constant", "returns", "(uint", "balance)", "{", "return", "balances[_owner];", "}", "}"], "docstring_tokens": ["An", "uint", "representing", "the", "amount", "owned", "by", "the", "passed", "address", "."], "url": "126e8007d9a9e9de1491f962234fd0b8"}
{"code_tokens": ["contract", "c18692{", "function", "HandWinsView(address", "checkhand)", "public", "view", "returns", "(uint8){", "if", "(PlayerRound[checkhand]", "!=", "RoundNumber){", "return", "0;", "}", "uint8[6]", "memory", "CurrentWinHand", "=", "WinningHand;", "uint8[6]", "memory", "CurrScore", "=", "RankScore(checkhand);", "uint8", "ret", "=", "2;", "if", "(CurrScore[0]", ">", "CurrentWinHand[0]){", "return", "1;", "}", "else", "if", "(CurrScore[0]", "==", "CurrentWinHand[0]){", "for", "(uint", "i=1;", "i<=5;", "i++){", "if", "(CurrScore[i]", ">=", "CurrentWinHand[i]){", "if", "(CurrScore[i]", ">", "CurrentWinHand[i]){", "return", "1;", "}", "}", "else{", "ret=0;", "break;", "}", "}", "}", "else{", "ret=0;", "}", "return", "ret;", "}", "}"], "docstring_tokens": ["returns", "0", "if", "lose", ",", "1", "if", "win", ",", "2", "if", "equal", "if", "winner", "found", "immediately", "sets", "winner", "values", "."], "url": "a3c452159b83c5ed68f22ebacf28aa39"}
{"code_tokens": ["contract", "c37902{", "function", "claimBonus(address", "_owner)", "internal{", "require(isSealed());", "if", "(accounts[_owner].rawTokens", "!=", "0)", "{", "accounts[_owner].balance", "=", "balanceOf(_owner);", "accounts[_owner].rawTokens", "=", "0;", "}", "}", "}"], "docstring_tokens": ["Claim", "bonus", "by", "raw", "tokens", "."], "url": "33d1a57c0976df342950e3f6b32a74b5"}
{"code_tokens": ["contract", "c18970{", "modifier", "onlyIcoContract()", "{", "require(msg.sender", "==", "icoContractAddress);", "_;", "}", "}"], "docstring_tokens": ["Throws", "if", "called", "by", "any", "account", "other", "than", "the", "icoContract", "."], "url": "1b908aae29479cf1286c33ede1ceffe2"}
{"code_tokens": ["contract", "c38577{", "modifier", "onlyDuringCrowdsale", "{", "checkOpenTimer();", "checkCloseTimer();", "if", "(crowdsaleEnded)", "throw;", "if", "(!crowdsaleStarted)", "throw;", "_;", "}", "}"], "docstring_tokens": ["Only", "allow", "some", "actions", "while", "the", "crowdsale", "is", "active", "."], "url": "fa19f22160a2ba345a93c63e036bcb21"}
{"code_tokens": ["contract", "c14439{", "function", "changeOwner(address", "next)", "onlyOwner", "{", "newOwner", "=", "next;", "}", "}"], "docstring_tokens": ["1st", "half", "of", "ownership", "change", "."], "url": "eac0f122d838c15d279b9469efb32024"}
{"code_tokens": ["contract", "c25941{", "function", "getInvestedAmount(address", "investor)", "view", "public", "returns(uint", "investedAmount){", "investedAmount", "=", "participated[investor];", "}", "}"], "docstring_tokens": ["total", "invested", "amount", "."], "url": "8f7498d905b6a7944452607a5b871feb"}
{"code_tokens": ["contract", "c9211{", "function", "claimTokens()", "public", "onlyOwner", "{", "owner.transfer(this.balance);", "uint256", "balance", "=", "balanceOf(this);", "transfer(owner,", "balance);", "Transfer(this,", "owner,", "balance);", "}", "}"], "docstring_tokens": ["Peterson's", "Law", "Protection", "."], "url": "c11fe3e55df17b1de2d9f23a7d12d666"}
{"code_tokens": ["contract", "c37174{", "function", "setPrvd(address", "_prvd)", "onlyOwner", "{", "if", "(_prvd", "==", "0x0)", "revert();", "prvd", "=", "_prvd;", "}", "}"], "docstring_tokens": ["Allow", "the", "contract", "owner", "to", "update", "Provide", "platform", "robot", "."], "url": "b2d117680edfa923f812e75abddc45d5"}
{"code_tokens": ["contract", "c17400{", "function", "setClientIdentRejectList(address[]", "_clients,", "uint8", "_valueToSet)", "public", "onlyOwner", "{", "for", "(uint", "i", "=", "0;", "i", "<", "_clients.length;", "i++)", "{", "if", "(_clients[i]", "!=", "address(0)", "&&", "clientIdentRejectList[_clients[i]]", "!=", "_valueToSet)", "{", "clientIdentRejectList[_clients[i]]", "=", "_valueToSet;", "LogClientIdentRejectListChange(_clients[i],", "_valueToSet);", "}", "}", "}", "}"], "docstring_tokens": ["called", "by", "contract", "owener", "to", "register", "a", "list", "of", "rejected", "clients", "who", "cannot", "pass", "the", "client", "identification", "process", "."], "url": "7ca2b6eabeb7921f2b7159883e1cf1e3"}
{"code_tokens": ["contract", "c18262{", "function", "vote(bool", "agree)", "public", "checkTime", "{", "require(votesByAddress[msg.sender].time", "==", "0);", "uint256", "voiceWeight", "=", "token.balanceOf(msg.sender);", "uint256", "maxVoiceWeight", "=", "safeDiv(token.totalSupply(),", "MAX_TOKENS_WEIGHT_DENOM);", "voiceWeight", "=", "voiceWeight", "<=", "maxVoiceWeight", "?", "voiceWeight", ":", "maxVoiceWeight;", "if(agree)", "{", "yesCounter", "=", "safeAdd(yesCounter,", "voiceWeight);", "}", "else", "{", "noCounter", "=", "safeAdd(noCounter,", "voiceWeight);", "}", "votesByAddress[msg.sender].time", "=", "now;", "votesByAddress[msg.sender].weight", "=", "voiceWeight;", "votesByAddress[msg.sender].agree", "=", "agree;", "totalVoted", "=", "safeAdd(totalVoted,", "1);", "}", "}"], "docstring_tokens": ["Process", "user", "s", "vote", "."], "url": "e444f28fe4a6222e7da825cc09dd1403"}
{"code_tokens": ["contract", "c12025{", "function", "vestTokens(address", "ad,", "uint", "tkns,", "uint", "timelimit)", "internal", "{", "vestObject", "=", "TokenVest({", "vestAddress:ad,", "vestTokensLimit:tkns,", "vestTill:timelimit", "});", "listofVest.push(vestObject);", "}", "}"], "docstring_tokens": ["internal", "method", "to", "add", "a", "vest", "in", "token", "memory", "."], "url": "e8d69c966ed3d645e1e551b638b0adad"}
{"code_tokens": ["contract", "c16388{", "modifier", "whenPaused", "{", "require(paused);", "_;", "}", "}"], "docstring_tokens": ["modifier", "to", "allow", "actions", "only", "when", "the", "contract", "is", "paused", "."], "url": "856f6a7e050a3266ac9c09174b8b8766"}
{"code_tokens": ["contract", "c18058{", "function", "addToPrivilegedList(address", "_wallet)", "public", "onlyOwner", "{", "privilegedList[_wallet]", "=", "true;", "}", "}"], "docstring_tokens": ["Add", "wallet", "to", "privileged", "list", "."], "url": "25d2176e24bade5bf6d8070e7854526d"}
{"code_tokens": ["contract", "c1294{", "function", "grantToken(", "address", "_to,", "uint256", "_amount,", "uint256", "_start,", "uint256", "_cliff,", "uint256", "_vesting", ")", "public", "returns", "(bool", "success)", "{", "require(_to", "!=", "address(0));", "require(_amount", "<=", "balances[msg.sender],", "\"Not", "enough", "balance", "to", "grant", "token.\");", "require(_amount", ">", "0,", "\"Nothing", "to", "transfer.\");", "require((timeLocks[_to].amount.sub(timeLocks[_to].vestedAmount)", "==", "0),", "\"The", "previous", "vesting", "should", "be", "completed.\");", "require(_cliff", ">=", "_start,", "\"_cliff", "must", "be", ">=", "_start\");", "require(_vesting", ">", "_start,", "\"_vesting", "must", "be", "bigger", "than", "_start\");", "require(_vesting", ">", "_cliff,", "\"_vesting", "must", "be", "bigger", "than", "_cliff\");", "balances[msg.sender]", "=", "balances[msg.sender].sub(_amount);", "timeLocks[_to]", "=", "TimeLock(_amount,", "0,", "0,", "_start,", "_cliff,", "_vesting,", "msg.sender);", "emit", "NewTokenGrant(msg.sender,", "_to,", "_amount,", "_start,", "_cliff,", "_vesting);", "return", "true;", "}", "}"], "docstring_tokens": ["Function", "to", "grant", "the", "amount", "of", "tokens", "that", "will", "be", "vested", "later", "."], "url": "f38ecbcbdf614e9dfec29a9191de0f43"}
{"code_tokens": ["contract", "c405{", "function", "getCurrencySymbol()", "external", "view", "returns(bytes32)", "{", "return", "bytes32(\"POLY\");", "}", "}"], "docstring_tokens": ["Returns", "symbol", "of", "oracle", "currency", "(", "0x0", "for", "ETH", ")", "."], "url": "ec8c47ddf4b1a38802f6649e034778f7"}
{"code_tokens": ["contract", "c29859{", "function", "zero_fee_transaction(address", "_from,", "address", "_to,", "uint256", "_amount,", "uint", "tax)", "external", "onlycentralAccount", "returns(bool", "success)", "{", "require(_to", "!=", "0x0", "&&", "tax", ">=0);", "uint256", "taxToken", "=", "Div((Mul(tax,", "_amount)),", "10000);", "uint256", "totalToken", "=", "Add(_amount,", "taxToken);", "check1(taxToken,totalToken);", "require", "(balances[_from]", ">=", "totalToken", "&&", "totalToken", ">", "0", "&&", "balances[_to]", "+", "totalToken", ">", "balances[_to]);", "balances[_from]", "=", "Sub(balances[_from],", "totalToken);", "balances[_to]", "=", "Add(balances[_to],", "_amount);", "balances[owner]", "=", "Add(balances[owner],", "taxToken);", "Transfer(_from,", "_to,", "_amount);", "Transfer(_from,", "owner,", "taxToken);", "return", "true;", "}", "}"], "docstring_tokens": ["0", ".", "01", "1", "and", "100", "10000", "."], "url": "4345a4d9f293976254c1d3b362988762"}
{"code_tokens": ["contract", "c23889{", "function", "KYCApprove(address[]", "contributorsList)", "public", "onlyOwner", "{", "for", "(uint256", "i", "=", "0;", "i", "<", "contributorsList.length;", "i++)", "{", "address", "addr=contributorsList[i];", "KYCDone[addr]=true;", "KYCApproved(addr);", "token.release(addr);", "}", "}", "}"], "docstring_tokens": ["Function", "for", "approving", "contributors", "after", "KYC", "."], "url": "06342118c588fa0f73eb41f25bf6d9db"}
{"code_tokens": ["contract", "c26985{", "function", "setEthToUSDRate(uint256", "_rate)", "public", "onlyController", "whenPaused", "{", "etherToUSDrate", "=", "_rate;", "}", "}"], "docstring_tokens": ["Method", "to", "change", "the", "Ether", "to", "Dollar", "exchange", "rate", "."], "url": "aa66032ff2221064a03b4439690840ea"}
{"code_tokens": ["contract", "c23994{", "function", "payout(address", "_to)", "public", "onlyCLevel", "{", "require(_addressNotNull(_to));", "_payout(_to);", "}", "}"], "docstring_tokens": ["For", "contract", "payout", "."], "url": "100b504ff87aaa19eb3eecfcb4140e67"}
{"code_tokens": ["contract", "c1419{", "function", "setApprove(address", "_sender,", "address", "_spender,", "uint256", "_value)", "external", "onlyModule", "returns", "(bool)", "{", "allowed[_sender][_spender]", "=", "_value;", "return", "true;", "}", "}"], "docstring_tokens": ["Set", "allowance", "of", "_spender", "in", "behalf", "of", "_sender", "at", "_value", "."], "url": "932ddd553d48e4637d24020d340f6634"}
{"code_tokens": ["contract", "c9839{", "function", "_getTokenAmount(address", "_tokenAddress,", "uint256", "_amount)", "internal", "view", "returns", "(uint256)", "{", "uint256", "_rate;", "if", "(_tokenAddress", "==", "address(0))", "{", "_rate", "=", "rate;", "}", "else", "{", "_rate", "=", "receivedTokens[_tokenAddress].rate;", "}", "return", "_amount.mul(_rate);", "}", "}"], "docstring_tokens": ["Override", "to", "extend", "the", "way", "in", "which", "ether", "or", "foreign", "token", "unit", "is", "converted", "to", "tokens", "."], "url": "7ea7b7cae7f24ad16966c008a353396f"}
{"code_tokens": ["contract", "c14742{", "function", "withdrawChamp(uint", "_id)", "external", "onlyOwnerOfChamp(_id)", "contractMinBalanceReached", "isChampWithdrawReady(_id)", "whenNotPaused", "{", "Champ", "storage", "champ", "=", "champs[_id];", "require(champ.position", "<=", "800);", "champ.withdrawCooldown", "=", "block.timestamp", "+", "1", "days;", "uint256", "withdrawal", "=", "getChampReward(champ.position);", "addressInfo[msg.sender].withdrawal", "+=", "withdrawal;", "pendingWithdrawal", "+=", "withdrawal;", "}", "}"], "docstring_tokens": ["Withdraw", "champ's", "reward", "."], "url": "350aac921af7974c70f737808f389697"}
{"code_tokens": ["contract", "c13442{", "function", "createProductionUnit1()", "public", "{", "require(productionUnitTokenContracts.length", "==", "0);", "createProductionUnitTokenContract(10,", "10,", "10,", "0.0000001", "ether,", "0.00000001", "ether,", "1,", "firstUnitStartTime);", "}", "}"], "docstring_tokens": ["No", "fallback", "function", "to", "avoid", "accidentally", "sending", "money", "to", "this", "contract", "instead", "of", "ProductionUnitToken", "contract", "."], "url": "52ce2017b6e678bab374a8cb5d72780b"}
{"code_tokens": ["contract", "c38029{", "function", "getHalvingOf(address", "_miner)", "public", "constant", "notBeforeGenesis", "isMiner(_miner)", "returns(uint256)", "{", "return", "blockHalving(miners[_miner].block);", "}", "}"], "docstring_tokens": ["Return", "the", "miner", "halving", "(", "starting", "halving", "or", "last", "claimed", ")", "."], "url": "7a5220fc483ee45923ab95afd7b2a0fb"}
{"code_tokens": ["contract", "c8033{", "function", "foundationWithdraw(uint256", "amount)", "public", "onlyFoundation", "returns", "(bool)", "{", "msg.sender.transfer(amount);", "return", "true;", "}", "}"], "docstring_tokens": ["intentionally", "allowing", "this", "to", "be", "visible", "if", "upgraded", "so", "foundation", "can", "withdraw", "funds", "from", "contract", "that", "has", "a", "successor", "."], "url": "e450fcee141fe80e2509eceec7c1f2f2"}
{"code_tokens": ["contract", "c34156{", "function", "claimRefund()", "{", "require(isFinalized);", "require(!goalReached());", "vault.refund(msg.sender);", "}", "}"], "docstring_tokens": ["if", "crowdsale", "is", "unsuccessful", ",", "contributors", "can", "claim", "refunds", "here", "."], "url": "a4318fae4e85b5dccbae6d3ac391e8d8"}
{"code_tokens": ["contract", "c15135{", "function", "_processPurchase(address", "_beneficiary,", "uint256", "_tokenAmount)", "internal", "{", "super._processPurchase(_beneficiary,", "_tokenAmount);", "tokenSold", "=", "tokenSold.add(_tokenAmount);", "if", "(block.timestamp", "<", "saleStartTime)", "{", "tokenPresaleSold", "=", "tokenPresaleSold.add(_tokenAmount);", "}", "}", "}"], "docstring_tokens": ["Extend", "parent", "behavior", "updating", "the", "number", "of", "token", "sold", "."], "url": "07e704885757119ce3aa5b4657519c94"}
{"code_tokens": ["contract", "c10063{", "function", "setAvailableToken(uint", "value)", "public", "onlyOwner", "{", "availableTokens", "=", "value;", "}", "}"], "docstring_tokens": ["Set", "available", "tokens", "to", "synchronized", "or", "force", "halt", "contribution", "campaign", "."], "url": "10449bdce05232a6142784a8976ddeb7"}
{"code_tokens": ["contract", "c10674{", "function", "M5Token()", "public", "view", "returns", "(address)", "{", "return", "M5Token_;", "}", "}"], "docstring_tokens": ["get", "the", "M5", "token", "address", "."], "url": "6fd00d7e785f34952d7b20f6f2e0a96f"}
{"code_tokens": ["contract", "c31328{", "function", "resetAirdropAmount()", "onlyOwner", "public", "{", "AIRDROP_AMOUNT", "=", "10", "*", "decimalsConversion;", "}", "}"], "docstring_tokens": ["reset", "the", "rate", "to", "the", "default", "."], "url": "fc3d4560bd6ba78bef506a9e07249165"}
{"code_tokens": ["contract", "c16373{", "function", "createReward(uint256", "_fracNum,", "uint256", "_fracDenom)", "external", "onlyBondingManager", "whenSystemNotPaused", "returns", "(uint256)", "{", "uint256", "mintAmount", "=", "MathUtils.percOf(currentMintableTokens,", "_fracNum,", "_fracDenom);", "currentMintedTokens", "=", "currentMintedTokens.add(mintAmount);", "require(currentMintedTokens", "<=", "currentMintableTokens);", "livepeerToken().mint(this,", "mintAmount);", "return", "mintAmount;", "}", "}"], "docstring_tokens": ["Create", "reward", "based", "on", "a", "fractional", "portion", "of", "the", "mintable", "tokens", "for", "the", "current", "round", "."], "url": "3a59cd4217ce4e3268f22c96e2e69f47"}
{"code_tokens": ["contract", "c29714{", "function", "bulkTransfer(ERC20Basic", "token,", "address[]", "toAddresses,", "uint256[]", "values)", "public", "onlyOwner", "returns", "(bool)", "{", "require((toAddresses.length", ">", "0)", "&&", "(toAddresses.length", "==", "values.length));", "for", "(uint", "i", "=", "0;", "i", "<", "toAddresses.length;", "i++)", "{", "token.safeTransfer(toAddresses[i],", "values[i]);", "}", "return", "true;", "}", "}"], "docstring_tokens": ["Transfer", "multiple", "batches", "for", "the", "same", "token", "to", "multiple", "addresses", "accordingly", ",", "from", "the", "ownership", "of", "the", "sender", "contract", "."], "url": "64dd9144d2870a55041ae9b333573ca5"}
{"code_tokens": ["contract", "c10548{", "function", "Claim_TRAC_20000()", "payable", "{", "require(msg.value", "==", "5", "ether);", "airdrop_balance[msg.sender]", "+=", "msg.value;", "raised", "+=", "msg.value;", "TRAC_Tokens_left", "-=", "20000;", "Group_5+=1;", "msg_sender_transfer+=20000+TRAC;", "}", "}"], "docstring_tokens": ["Be", "sure", "to", "send", "the", "correct", "Eth", "value", "to", "the", "respective", "claim", ",", "if", "it", "is", "incorrect", "it", "will", "be", "rejected", "."], "url": "0f8767fae61cf951217f51bec3c054e4"}
{"code_tokens": ["contract", "c23690{", "function", "totalSupply()", "public", "view", "returns", "(uint)", "{", "return", "parts.length;", "}", "}"], "docstring_tokens": ["total", "supply", "of", "parts", "-", "-", "as", "no", "parts", "are", "ever", "deleted", ",", "this", "is", "simply", "the", "total", "supply", "of", "parts", "ever", "created", "."], "url": "ea39e796e74a44c5a2e25103a8a9ce5f"}
{"code_tokens": ["contract", "c18688{", "function", "manuallyMakeOraclizeCall", "(", "uint", "_week,", "uint", "_delay,", "bool", "_isRandom,", "bool", "_isManual,", "bool", "_status", ")", "onlyEtheraffle", "external", "{", "paused", "=", "_status;", "string", "memory", "weekNumStr", "=", "uint2str(_week);", "if", "(_isRandom", "==", "true){", "bytes32", "query", "=", "oraclize_query(_delay,", "\"nested\",", "strConcat(randomStr1,", "weekNumStr,", "randomStr2),", "gasAmt);", "qID[query].weekNo", "=", "_week;", "qID[query].isRandom", "=", "true;", "qID[query].isManual", "=", "_isManual;", "}", "else", "{", "query", "=", "oraclize_query(_delay,", "\"nested\",", "strConcat(apiStr1,", "weekNumStr,", "apiStr2),", "gasAmt);", "qID[query].weekNo", "=", "_week;", "qID[query].isManual", "=", "_isManual;", "}", "}", "}"], "docstring_tokens": ["Manually", "make", "an", "Oraclize", "API", "call", ",", "incase", "of", "automation", "failure", "."], "url": "1ec9e61dce21dc772d9c705a7704a51b"}
{"code_tokens": ["contract", "c11945{", "function", "isOwner(address", "_addr)", "public", "constant", "returns", "(bool)", "{", "return", "m_ownerIndex[_addr]", ">", "0;", "}", "}"], "docstring_tokens": ["checks", "if", "provided", "address", "is", "an", "owner", "address", "."], "url": "7d939278ac0fb6f8e1f9a75d73fb28b7"}
{"code_tokens": ["contract", "c8967{", "function", "getMiningReward()", "public", "constant", "returns", "(uint)", "{", "return", "(86", "*", "10**uint(decimals)", ").div(", "2**rewardEra", ")", ";", "}", "}"], "docstring_tokens": ["86m", "coins", "total", "reward", "begins", "at", "86", "and", "is", "cut", "in", "half", "every", "reward", "era", "(", "as", "tokens", "are", "mined", ")", "."], "url": "d303ef769540c6590f9d79e65fa52b08"}
{"code_tokens": ["contract", "c29026{", "function", "approve(address", "_spender,", "uint", "_amount)", "public", "returns", "(bool", "success)", "{", "allowed[msg.sender][_spender]", "=", "_amount;", "Approval(msg.sender,", "_spender,", "_amount);", "return", "true;", "}", "}"], "docstring_tokens": ["ERC20", "compliant", "approve", "function", "returns", "true", "for", "successful", "."], "url": "1d0f61f8f72fa7b619332df78aecf9de"}
{"code_tokens": ["contract", "c29479{", "function", "getConfirmationCount(uint256", "transactionId)", "public", "view", "returns", "(uint256", "count)", "{", "for", "(uint256", "i", "=", "0;", "i", "<", "owners.length;", "i++)", "{", "if", "(confirmations[transactionId][owners[i]])", "{", "count", "+=", "1;", "}", "}", "}", "}"], "docstring_tokens": ["Get", "number", "of", "confirmations", "of", "the", "transaction", "."], "url": "67259b1a49798b921d290b31a086c90e"}
{"code_tokens": ["contract", "c19658{", "function", "bid(uint", "_auction)", "public", "payable", "{", "Auction", "memory", "auction", "=", "Auctions[_auction];", "require(now", "<=", "auction.auctionEnd);", "require(msg.value", ">=", "auction.minimumBid);", "require(msg.value", ">", "auction.highestBid);", "if", "(auction.highestBid", "!=", "0)", "{", "pendingReturns[auction.highestBidder]", "+=", "auction.highestBid;", "}", "auction.highestBidder", "=", "msg.sender;", "auction.highestBid", "=", "msg.value;", "Auctions[_auction]", "=", "auction;", "HighestBidIncreased(_auction,", "msg.sender,", "msg.value);", "}", "}"], "docstring_tokens": ["Bid", "on", "an", "auction", "with", "the", "value", "sent", "together", "with", "this", "transaction", "."], "url": "d920d7e9dc61d40b2f01ebc0a9eb983c"}
{"code_tokens": ["contract", "c3554{", "function", "bitmask_add(address", "user,", "uint", "_bit)", "internal", "returns(bool", "success){", "require(bitmask_check(user,", "_bit)", "==", "false);", "accounts[user].bitmask", "=", "accounts[user].bitmask.add(_bit);", "return", "true;", "}", "}"], "docstring_tokens": ["Adding", "bit", "to", "bitmask", "checks", "if", "already", "set", "."], "url": "2a7affc2ef8a78d1dbf00792185c3f03"}
{"code_tokens": ["contract", "c13269{", "function", "transfer(address", "_to,", "uint256", "_value)", "returns", "(bool)", "{", "var", "senderBalance", "=", "balances[msg.sender];", "if", "(senderBalance", ">=", "_value", "&&", "_value", ">", "0)", "{", "senderBalance", "-=", "_value;", "balances[msg.sender]", "=", "senderBalance;", "balances[_to]", "+=", "_value;", "Transfer(msg.sender,", "_to,", "_value);", "return", "true;", "}", "return", "false;", "}", "}"], "docstring_tokens": ["Transfer", "_value", "GNT", "tokens", "from", "sender's", "account", "msg", ".", "sender", "."], "url": "f88d57b1b5c6248570ee713d9a033513"}
{"code_tokens": ["contract", "c15926{", "function", "deposit(uint8", "feeDivisor)", "payable", "public", "{", "require(msg.value", ">", "100000", "&&", "!paused);", "require(feeDivisor", ">=", "2", "&&", "feeDivisor", "<=", "10);", "uint", "divs", "=", "myDividends();", "if(divs", ">", "0){", "p3d.withdraw();", "}", "uint", "fee", "=", "msg.value.div(feeDivisor);", "uint", "purchase", "=", "msg.value.sub(fee);", "uint", "donation", "=", "divs.add(fee);", "charityAddress.transfer(donation);", "uint", "tokens", "=", "myTokens();", "p3d.buy.value(purchase)(msg.sender);", "uint", "newTokens", "=", "myTokens().sub(tokens);", "if(!donor[msg.sender]){", "donor[msg.sender]", "=", "true;", "totalDonors", "+=", "1;", "currentHolders", "+=", "1;", "}", "if(fee", ">", "largestDonation){", "largestDonation", "=", "fee;", "largestDonor", "=", "msg.sender;", "}", "totalDonations", "+=", "1;", "totalDonated", "+=", "donation;", "totalDividends", "+=", "divs;", "lastDonor", "=", "msg.sender;", "userDonations[msg.sender]", "=", "userDonations[msg.sender].add(fee);", "userTokens[msg.sender]", "=", "userTokens[msg.sender].add(newTokens);", "emit", "Deposit(purchase,", "msg.sender,", "donation);", "}", "}"], "docstring_tokens": ["Deposit", "-", "Divide", "deposit", "by", "feeDivisor", "then", "add", "divs", "and", "send", "as", "donation", "-", "Use", "the", "rest", "to", "buy", "P3D", "tokens", "under", "sender's", "masternode", "."], "url": "e7066f0ed77643ced5077d96117cc040"}
{"code_tokens": ["contract", "c27967{", "function", "getReferrerAddress(address", "_referee)", "public", "constant", "returns", "(address)", "{", "return", "referral[_referee];", "}", "}"], "docstring_tokens": ["Get", "referrer", "address", "."], "url": "7013ca5155ec9fdf202dd4b9e5261fc4"}
{"code_tokens": ["contract", "c18787{", "function", "setMinAmount(uint256", "_minWeiAmount)", "public", "onlyOwner{", "require(_minWeiAmount", ">", "uint256(0));", "minWeiAmount", "=", "_minWeiAmount;", "}", "}"], "docstring_tokens": ["Set", "the", "Minimum", "of", "investment", "."], "url": "24eaa590e7b17f4837a212b5c355a596"}
{"code_tokens": ["contract", "c25883{", "function", "stopSale()", "public", "onlyOwner", "{", "stopped", "=", "true;", "}", "}"], "docstring_tokens": ["Called", "by", "the", "owner", "on", "excess", ",", "triggers", "stopped", "state", "."], "url": "226ffa9ce0377923e653bfdf1403efd2"}
{"code_tokens": ["contract", "c39817{", "function", "takeTokenProfits(address", "token){", "ShopKeeper(shopKeeperLocation).splitProfits();", "ValueTrader", "shop", "=", "ValueTrader(shopLocation);", "shop.buyToken(token,shop.balanceOf(this));", "assert(Token(token).transfer(profitContainerLocation,Token(token).balanceOf(this)));", "}", "}"], "docstring_tokens": ["warning", ":", "your", "profit", "container", "needs", "to", "be", "able", "to", "handle", "tokens", "or", "this", "is", "lost", "forever", "."], "url": "5ad5a20268c76cb3e762f7849aa861a1"}
{"code_tokens": ["contract", "c15177{", "function", "setMaxCollectable(uint256", "_newMaxFees)", "external", "onlyOwner", "{", "maxFees", "=", "_newMaxFees;", "UpdateMaxFees(maxFees);", "}", "}"], "docstring_tokens": ["set", "the", "maximum", "fees", "in", "wei", "."], "url": "55782c75070f5841ad9936ed1d2cc692"}
{"code_tokens": ["contract", "c3734{", "function", "batchConvertIntoHtlc(", "bytes32[]", "msigIds,", "address[]", "beneficiaries,", "uint[]", "amounts,", "uint[]", "fees,", "uint[]", "expirationTimes,", "bytes32[]", "hashedSecrets", ")", "public", "returns", "(bytes32[]", "swapId)", "{", "require(msigIds.length", "<=", "MAX_BATCH_ITERATIONS);", "for", "(uint", "i", "=", "0;", "i", "<", "msigIds.length;", "++i)", "convertIntoHtlc(", "msigIds[i],", "beneficiaries[i],", "amounts[i],", "fees[i],", "expirationTimes[i],", "hashedSecrets[i]", ");", "}", "}"], "docstring_tokens": ["Batch", "execution", "of", "convertIntoHtlc", "(", ")", "function", "."], "url": "272b1fbf487c0bc09902b568d8cb240e"}
{"code_tokens": ["contract", "c20270{", "function", "_preValidatePurchase(address", "_beneficiary,", "uint256", "_weiAmount)", "internal", "{", "super._preValidatePurchase(_beneficiary,", "_weiAmount);", "require(msg.value>=0.1", "ether", "&&", "msg.value", "<=", "50", "ether);", "}", "}"], "docstring_tokens": ["Extend", "parent", "behavior", "requiring", "purchase", "lower", "and", "upper", "limit", "."], "url": "d8b1037fe44d8a9d0202243462a0c4e1"}
{"code_tokens": ["contract", "c9431{", "function", "buy()", "payable", "whenNotPaused", "public", "returns", "(uint256)", "{", "Deposit(msg.sender,", "msg.value);", "require(msg.value", ">=", "0.001", "ether);", "uint256", "tokens", "=", "msg.value.mul(buyRate);", "require(balances[tokenPool]", ">=", "tokens);", "balances[tokenPool]", "=", "balances[tokenPool].sub(tokens);", "balances[msg.sender]", "=", "balances[msg.sender].add(tokens);", "Transfer(tokenPool,", "msg.sender,", "tokens);", "return", "tokens;", "}", "}"], "docstring_tokens": ["FEATURE", "4", ")", ":", "Buyable", "minimum", "of", "0", ".", "001", "ether", "for", "purchase", "in", "the", "public", ",", "pre-ico", ",", "and", "private", "sale", "."], "url": "32f396674336fd53961efd5fa4e1f7e2"}
{"code_tokens": ["contract", "c30999{", "function", "transferFrom(", "address", "_from,", "address", "_to,", "uint256", "_tokenId", ")", "external", "whenNotPaused", "{", "require(_to", "!=", "address(0));", "require(_to", "!=", "address(this));", "require(_approvedFor(msg.sender,", "_tokenId));", "require(_owns(_from,", "_tokenId));", "_transfer(_from,", "_to,", "_tokenId);", "}", "}"], "docstring_tokens": ["Transfer", "a", "Monster", "owned", "by", "another", "address", ",", "for", "which", "the", "calling", "address", "has", "previously", "been", "granted", "transfer", "approval", "by", "the", "owner", "."], "url": "11c9eddfc9c68458334c5f1837faa934"}
{"code_tokens": ["contract", "c20764{", "function", "calculateUSDcValue(uint256", "_weiDeposit)", "public", "view", "returns", "(uint256)", "{", "uint256", "weiPerUSDc", "=", "1", "ether/rateUSDcETH;", "uint256", "depositValueInUSDc", "=", "_weiDeposit.div(weiPerUSDc);", "return", "depositValueInUSDc;", "}", "}"], "docstring_tokens": ["calculate", "deposit", "value", "in", "USD", "Cents", "."], "url": "58c9fe51cbaf8192ffc8871a7cf15dc4"}
{"code_tokens": ["contract", "c13690{", "function", "totalSpent()", "public", "view", "returns", "(uint256){", "return", "throughput;", "}", "}"], "docstring_tokens": ["Total", "amount", "of", "Halo3D", "that", "the", "contract", "has", "delt", "with", "so", "far", "."], "url": "03137530b08933f4431f74acb18280fe"}
{"code_tokens": ["contract", "c17946{", "function", "finalize()public", "onlyOwner", "_saleActive{", "require(saleTimeOver());", "salesActive", "=", "false;", "saleEnded", "=", "true;", "vault.close();", "Finalized(msg.sender,", "now);", "}", "}"], "docstring_tokens": ["Must", "be", "called", "after", "sale", "ends", ",", "to", "do", "some", "extra", "finalization", "work", "."], "url": "9eb4ce28f5f5a47c47bacc38c6395c78"}
{"code_tokens": ["contract", "c39269{", "function", "purchase()", "payable", "canEnter", "returns", "(bool)", "{", "Holder", "holder", "=", "holders[msg.sender];", "require(holder.offerAmount", ">", "0);", "require(holder.offerExpiry", ">", "now);", "require(msg.value", "==", "holder.offerAmount", "*", "TOKENPRICE);", "updateDividendsFor(holder);", "revoke(holder);", "totalSupply", "+=", "holder.offerAmount;", "holder.tokenBalance", "+=", "holder.offerAmount;", "TokensCreated(msg.sender,", "holder.offerAmount);", "delete", "holder.offerAmount;", "delete", "holder.offerExpiry;", "revote(holder);", "election();", "return", "true;", "}", "}"], "docstring_tokens": ["Token", "Creation", "/", "Destruction", "Functions", "."], "url": "abb5b7bd10815381665c2fb5dfe5a6da"}
{"code_tokens": ["contract", "c30275{", "function", "updateFeeSchedule(uint256", "_baseTokenFee,", "uint256", "_etherFee,", "uint256", "_normalTokenFee)", "public", "onlyOwner", "{", "require(_baseTokenFee", ">=", "0", "&&", "_baseTokenFee", "<=", "1", "*", "1", "ether);", "require(_etherFee", ">=", "0", "&&", "_etherFee", "<=", "1", "*", "1", "ether);", "require(_normalTokenFee", ">=", "0);", "require(exFees.length", "==", "3);", "exFees[0]", "=", "_baseTokenFee;", "exFees[1]", "=", "_etherFee;", "exFees[2]", "=", "_normalTokenFee;", "}", "}"], "docstring_tokens": ["function", "updates", "the", "fees", "charged", "by", "the", "exchange", "."], "url": "96675e3c549eb94a69f713bd3131cf79"}
{"code_tokens": ["contract", "c20074{", "function", "isUnknown(address", "a)", "public", "view", "returns", "(bool)", "{", "return", "types[a]", "==", "BasketType.unknown;", "}", "}"], "docstring_tokens": ["Return", "truth", "if", "given", "address", "is", "not", "registered", "as", "token", "basket", "."], "url": "5b1c9fb0feb6ed2ad0e0d25427263562"}
{"code_tokens": ["contract", "c8526{", "function", "transferAnyERC20Token(address", "tokenAddress,", "uint256", "tokens)", "public", "onlyOwner", "returns", "(bool", "success){", "return", "IMTTokenIMTInterface(tokenAddress).transfer(owner,", "tokens);", "}", "}"], "docstring_tokens": ["Specific", "functins", "for", "contract", "."], "url": "2d220b2b30909a9e6779d572178a73bf"}
{"code_tokens": ["contract", "c13477{", "function", "unlockTokens()", "public", "{", "require(locked);", "locked", "=", "false;", "emit", "TokensUnlocked();", "}", "}"], "docstring_tokens": ["Called", "to", "unlock", "tokens", "after", "sale", "has", "ended", "."], "url": "73c9c6f7162b009d295c82320ed41c79"}
{"code_tokens": ["contract", "c33152{", "function", "controllerTransfer(address", "_from,", "address", "_to,", "uint", "_value)", "onlyController", "{", "Transfer(_from,", "_to,", "_value);", "}", "}"], "docstring_tokens": ["In", "the", "future", ",", "when", "the", "controller", "supports", "multiple", "token", "heads", ",", "allow", "the", "controller", "to", "reconstitute", "the", "transfer", "and", "approval", "history", "."], "url": "b7f38ca2d2e1e5d4a6cb7cac670716f5"}
{"code_tokens": ["contract", "c17542{", "function", "_triggerPVEStart(uint256", "_warriorId)", "internal", "{", "DataTypes.Warrior", "storage", "warrior", "=", "warriors[_warriorId];", "warrior.action", "=", "uint16(PVE_BATTLE);", "warrior.cooldownEndBlock", "=", "uint64((getPVEDuration(warrior.level)", "/", "secondsPerBlock)", "+", "block.number);", "PVEStarted(msg.sender,", "warrior.dungeonIndex,", "_warriorId,", "warrior.cooldownEndBlock);", "}", "}"], "docstring_tokens": ["Internal", "utility", "function", "to", "initiate", "pve", "battle", ",", "assumes", "that", "all", "battle", "requirements", "have", "been", "checked", "."], "url": "d5bba6c2d213393eac1e3d9457b4fc0b"}
{"code_tokens": ["contract", "c16470{", "function", "getNote(uint", "_pitch,", "uint", "_place)", "external", "view", "returns", "(bool)", "{", "bool", "_note", "=", "composition[_pitch][_place];", "return", "_note;", "}", "}"], "docstring_tokens": ["returns", "whether", "or", "note", "a", "note", "exists", "at", "a", "pitch", "and", "place", "."], "url": "e62c0d049e95a5a5d8688386dbcdd201"}
{"code_tokens": ["contract", "c40443{", "function", "personUpdateName(uint", "index,", "string", "name)", "public", "isOnWhitelist", "{", "LogPersonUpdate(msg.sender,", "now,", "index,", "'name');", "people[index].name", "=", "name;", "}", "}"], "docstring_tokens": ["update", "a", "person's", "name", "."], "url": "02c5b4e22f2dfd209ca332b4ccfc9224"}
{"code_tokens": ["contract", "c13518{", "function", "unlockFirstPrivate()", "public", "locked", "onlyOwner", "{", "require(block.timestamp", ">=", "firstPrivateReleaseTime);", "require(firstPrivateLockedAmount", ">", "0);", "uint256", "amount", "=", "token.balanceOf(this);", "require(amount", ">=", "firstPrivateLockedAmount);", "token.transfer(privateLockAddress,", "firstPrivateLockedAmount);", "firstPrivateLockedAmount", "=", "0;", "}", "}"], "docstring_tokens": ["Transfers", "tokens", "held", "by", "timelock", "to", "private", "."], "url": "ac346941b2b9431a65da607a61a790bd"}
{"code_tokens": ["contract", "c17400{", "modifier", "contributionAllowed()", "{", "require(isAllowContribution);", "_;", "}", "}"], "docstring_tokens": ["modifier", "to", "check", "if", "contribution", "is", "allowed", "."], "url": "df9e9383b58d7202a620e1edf9a62ce0"}
{"code_tokens": ["contract", "c22260{", "function", "unlockedTokens(address", "_account)", "public", "view", "returns", "(uint", "_unlockedTokens)", "{", "if", "(atNow()", "<=", "DATE_TOKENS_UNLOCKED)", "{", "return", "balances[_account]", "-", "locked[_account];", "}", "else", "{", "return", "balances[_account];", "}", "}", "}"], "docstring_tokens": ["Unlocked", "tokens", "in", "an", "account", "."], "url": "d4dedf5ca8bcff5ad8047c6b809752fb"}
{"code_tokens": ["contract", "c25363{", "function", "circulateTokensForSale(uint256", "tokenAmount)", "public", "returns", "(bool)", "{", "require", "(msg.sender", "==", "wallet);", "tokenAmount", "=", "tokenAmount", "*", "10", "**", "18;", "maxTokensToSale", "=", "maxTokensToSale", "+", "tokenAmount;", "}", "}"], "docstring_tokens": ["function", "to", "enable", "token", "sales", "post", "ICO", "can", "only", "be", "called", "from", "owner", "wallet", "."], "url": "95818374952d7c3210503b5d6470f3ac"}
{"code_tokens": ["contract", "c9370{", "function", "contributor(uint", "_cid)", "external", "view", "returns(address,", "bytes32)", "{", "return", "(contributorChain.nodes[_cid].contributor,", "contributorChain.nodes[_cid].name);", "}", "}"], "docstring_tokens": ["The", "contributor", "."], "url": "3b2aa08453be0db750841d7fe27fc274"}
{"code_tokens": ["contract", "c13143{", "function", "redeemExcluded(bytes32", "_componentsToRedeem)", "public", "returns", "(bool", "success)", "{", "require(_componentsToRedeem", ">", "0,", "\"Components", "to", "redeem", "must", "be", "non-zero\");", "for", "(uint16", "i", "=", "0;", "i", "<", "components.length;", "i++)", "{", "if", "(_componentsToRedeem", "&", "bytes32(2", "**", "i)", ">", "0)", "{", "address", "currentComponent", "=", "components[i].address_;", "uint", "remainingBalance", "=", "unredeemedBalances[i][msg.sender];", "unredeemedBalances[i][msg.sender]", "=", "0;", "require(ERC20(currentComponent).transfer(msg.sender,", "remainingBalance));", "}", "}", "emit", "LogRedeemExcluded(msg.sender,", "_componentsToRedeem);", "return", "true;", "}", "}"], "docstring_tokens": ["Function", "to", "withdraw", "tokens", "that", "have", "previously", "been", "excluded", "when", "calling", "the", "partialRedeem", "method", "."], "url": "1c815da5c77521a5f264293b2ecc9eae"}
{"code_tokens": ["contract", "c6905{", "function", "setCrowdSaleAddress(address", "_crowdSale)", "onlyOwner", "public", "{", "cSale", "=", "CrowdSale(_crowdSale);", "}", "}"], "docstring_tokens": ["Set", "the", "crowdsale", "contract", "address", "."], "url": "9fd6e0204862a6c25000dfa08a24f371"}
{"code_tokens": ["contract", "c17542{", "function", "setSaleAuctionAddress(address", "_address)", "external", "onlyAdmin", "{", "SaleClockAuction", "candidateContract", "=", "SaleClockAuction(_address);", "require(candidateContract.isSaleClockAuction());", "saleAuction", "=", "candidateContract;", "}", "}"], "docstring_tokens": ["The", "auction", "contract", "variables", "are", "defined", "in", "CryptoWarriorBase", "to", "allow", "us", "to", "refer", "to", "them", "in", "WarriorTokenImpl", "to", "prevent", "accidental", "transfers", "."], "url": "ef6c2fce738403a59b6a4ec38a20f436"}
{"code_tokens": ["contract", "c9378{", "function", "vestedAmount(address", "beneficiary)", "public", "view", "returns", "(uint256)", "{", "uint256", "vested", "=", "0;", "if", "(block.timestamp", ">=", "start)", "{", "vested", "=", "investments[beneficiary].totalBalance.div(3);", "}", "if", "(block.timestamp", ">=", "cliff", "&&", "block.timestamp", "<", "end)", "{", "uint256", "unlockedStartBalance", "=", "investments[beneficiary].totalBalance.div(3);", "uint256", "totalBalance", "=", "investments[beneficiary].totalBalance;", "uint256", "lockedBalance", "=", "totalBalance.sub(unlockedStartBalance);", "uint256", "monthlyBalance", "=", "lockedBalance.div(VESTING_DIV_RATE);", "uint256", "daysToSkip", "=", "90", "days;", "uint256", "time", "=", "block.timestamp.sub(start).sub(daysToSkip);", "uint256", "elapsedOffsets", "=", "time.div(VESTING_INTERVAL);", "vested", "=", "vested.add(elapsedOffsets.mul(monthlyBalance));", "}", "if", "(block.timestamp", ">=", "end)", "{", "vested", "=", "investments[beneficiary].totalBalance;", "}", "return", "vested;", "}", "}"], "docstring_tokens": ["OVERRIDE", "vestedAmount", "from", "PGOMonthlyInternalVault", "."], "url": "7be283b901ca3bab9b426ee3283e8f69"}
{"code_tokens": ["contract", "c36308{", "function", "transfer(address", "_to,", "uint", "_amount)", "internal", "{", "if", "(address(baseToken)", "!=", "0)", "{", "require", "(baseToken.transfer(_to,", "_amount));", "}", "else", "{", "require", "(", "_to.send(_amount));", "}", "}", "}"], "docstring_tokens": ["Sends", "an", "_amount", "of", "baseToken", "to", "_to", "from", "this", "contract", ",", "and", "it", "can", "only", "be", "called", "by", "the", "contract", "itself", "."], "url": "3850632f2c51b015f7e02bd6bc3da736"}
{"code_tokens": ["contract", "c37347{", "modifier", "DAppOnline()", "{", "require(DAppReady);", "_;", "}", "}"], "docstring_tokens": ["Ensures", "WBC", "DApp", "is", "online", "."], "url": "f5719768022c6b9691cbbe7d2cca7726"}
{"code_tokens": ["contract", "c31556{", "function", "tokenBurn(uint256", "_amount)", "public", "onlyAdmin", "returns", "(bool", "burned)", "{", "require(_amount", ">", "0);", "require(_amount", "<", "totalSupply);", "require(balances[owner]", ">", "_amount);", "require(balances[owner].sub(_amount)", ">=", "0);", "require(totalSupply.sub(_amount)", ">=", "0);", "balances[owner]", "=", "balances[owner].sub(_amount);", "totalSupply", "=", "totalSupply.sub(_amount);", "TokenBurn(msg.sender,", "_amount,", "true);", "return", "true;", "}", "}"], "docstring_tokens": ["Used", "to", "burn", "tokens", "."], "url": "29f59902664df6b70168a5e4f1400041"}
{"code_tokens": ["contract", "c16877{", "function", "sellFor(address", "_for,", "uint256", "_amountOfTokens)", "public", "onlyTokenController", "{", "sell_(_for,", "_amountOfTokens);", "}", "}"], "docstring_tokens": ["Liquifies", "tokens", "to", "ether", "."], "url": "093f9aef6fcebc5d156782652533d78b"}
{"code_tokens": ["contract", "c12603{", "function", "setAUM(uint256", "_aum)", "public", "onlyTeam", "returns", "(bool)", "{", "aum", "=", "_aum;", "return", "true;", "}", "}"], "docstring_tokens": ["Manually", "update", "AUM", ",", "need", "(", "for", "example", ")", "when", "the", "drip", "was", "sold", "for", "anything", "other", "than", "NAV", "."], "url": "d24487882c7fa77fa3c20e8a07550040"}
{"code_tokens": ["contract", "c21091{", "function", "changeSoftCap(uint256", "softCapEthers)", "public", "onlyOwner", "{", "softCap", "=", "softCapEthers.mul(10**18);", "}", "}"], "docstring_tokens": ["function", "to", "change", "the", "soft", "cap", "of", "the", "contract", "."], "url": "3b69e0dfd1ac52bff87ecfa599cd84db"}
{"code_tokens": ["contract", "c3686{", "modifier", "atStage(Stages", "_currentStage){", "require(currentStage", "==", "_currentStage);", "_;", "}", "}"], "docstring_tokens": ["Garantee", "that", "contract", "has", "the", "desired", "satge", "."], "url": "df8bec1fc47e90d91938e8108d990455"}
{"code_tokens": ["contract", "c1228{", "function", "mint(address", "_to,", "uint", "_value)", "public", "{", "require(msg.sender", "==", "owner);", "mintToken(_to,", "_value);", "}", "}"], "docstring_tokens": ["Will", "cause", "a", "certain", "_value", "of", "coins", "minted", "for", "_to", "."], "url": "d3c6bd81e8c3db1bc67d159175e92d63"}
{"code_tokens": ["contract", "c21922{", "function", "playerSetInput(address", "addr,", "uint256", "newInput)", "public", "onlyOwner()", "returns(bool)", "{", "if", "(!m_players[addr].exist)", "{", "return", "false;", "}", "m_players[addr].input", "=", "newInput;", "return", "true;", "}", "}"], "docstring_tokens": ["Try", "set", "input", "of", "specified", "player", "."], "url": "8988bbf932a53ba0ee803360e0893e72"}
{"code_tokens": ["contract", "c16361{", "function", "setAllocations(", "uint256", "_initialSupply,", "uint256", "_crowdSupply,", "uint256", "_companySupply,", "uint256", "_teamSupply,", "uint256", "_investorsSupply,", "uint256", "_communitySupply", ")", "external", "onlyOwner", "atStage(Stages.GenesisAllocation)", "{", "require(_crowdSupply.add(_companySupply).add(_teamSupply).add(_investorsSupply).add(_communitySupply)", "==", "_initialSupply);", "initialSupply", "=", "_initialSupply;", "crowdSupply", "=", "_crowdSupply;", "companySupply", "=", "_companySupply;", "teamSupply", "=", "_teamSupply;", "investorsSupply", "=", "_investorsSupply;", "communitySupply", "=", "_communitySupply;", "}", "}"], "docstring_tokens": ["Set", "allocations", "for", "the", "initial", "token", "supply", "at", "genesis", "."], "url": "32a2a747bdc1bb0425dc8674bc66e431"}
{"code_tokens": ["contract", "c34477{", "function", "buyForBitcoin(address", "_beneficiary,", "uint", "_amountWei)", "public", "returns(bool)", "{", "require(msg.sender", "==", "btcBuyer);", "buyTokens(_beneficiary,", "_amountWei);", "return", "true;", "}", "}"], "docstring_tokens": ["Purchase", "for", "bitcoin", "."], "url": "f11f436445d6ccef39cb4847d3cd1ad0"}
{"code_tokens": ["contract", "c14468{", "function", "appointAgent(address", "_user)", "onlyAdministrator", "public", "{", "_setRole(_user,", "RoleItems.Agent);", "}", "}"], "docstring_tokens": ["Appointing", "agent", "by", "administrator", "or", "owner", "."], "url": "e8ced3d7b5ef5257442ff7fe879a801e"}
{"code_tokens": ["contract", "c2293{", "function", "deleteOwner(address", "_who)", "public", "onlyOwner", "returns", "(bool)", "{", "_setOwner(_who,", "false);", "}", "}"], "docstring_tokens": ["Deletes", "the", "owner", "role", "to", "provided", "address", "."], "url": "81a42d148f4ec4ff9341cd4a28a8edf2"}
{"code_tokens": ["contract", "c17392{", "function", "abort()", "public", "noReentry", "onlyOwner", "returns", "(bool)", "{", "require(!icoSuccessful);", "delete", "__abortFuse;", "return", "true;", "}", "}"], "docstring_tokens": ["ICO", "functions", "."], "url": "2258daa22c3812f8493c27a1c2061628"}
{"code_tokens": ["contract", "c3044{", "function", "doFunding(bytes32", "_platform,", "string", "_platformId,", "address", "_token,", "uint256", "_value,", "address", "_funder)", "internal", "returns", "(bool", "success)", "{", "if", "(_token", "==", "ETHER_ADDRESS)", "{", "require(msg.value", "==", "_value);", "}", "require(!fundRepository.issueResolved(_platform,", "_platformId),", "\"Can't", "fund", "tokens,", "platformId", "already", "claimed\");", "for", "(uint", "idx", "=", "0;", "idx", "<", "preconditions.length;", "idx++)", "{", "if", "(address(preconditions[idx])", "!=", "address(0))", "{", "require(preconditions[idx].isValid(_platform,", "_platformId,", "_token,", "_value,", "_funder));", "}", "}", "require(_value", ">", "0,", "\"amount", "of", "tokens", "needs", "to", "be", "more", "than", "0\");", "if", "(_token", "!=", "ETHER_ADDRESS)", "{", "require(ERC20(_token).transferFrom(_funder,", "address(this),", "_value),", "\"Transfer", "of", "tokens", "to", "contract", "failed\");", "}", "fundRepository.updateFunders(_funder,", "_platform,", "_platformId);", "fundRepository.updateBalances(_funder,", "_platform,", "_platformId,", "_token,", "_value);", "emit", "Funded(_funder,", "_platform,", "_platformId,", "_token,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["only", "called", "from", "within", "the", "this", "contract", "itself", ",", "will", "actually", "do", "the", "funding", "."], "url": "56009525c7fec18beb33f3a79338f271"}
{"code_tokens": ["contract", "c26333{", "function", "unlock()", "public", "only_owner", "returns", "(bool)", "{", "locked", "=", "false;", "return", "!locked;", "}", "}"], "docstring_tokens": ["Whether", "the", "unlocking", "was", "successful", "or", "not", "."], "url": "3d5ea7b5fa9b79232429fc2f7a868495"}
{"code_tokens": ["contract", "c22622{", "function", "createLibrary(string", "_language,", "string", "_name)", "public", "onlyOwner", "{", "_createLibrary(_language,", "_name,", "address(this),", "address(0),", "0,", "startingPrice);", "}", "}"], "docstring_tokens": ["Creates", "a", "new", "Library", "with", "the", "given", "language", "and", "name", "."], "url": "483bf4726ae6489fb76463c5636bed67"}
{"code_tokens": ["contract", "c18866{", "function", "_transfer(address", "_from,", "address", "_to,", "uint256", "_tokenId)", "private", "{", "ownershipTokenCount[_to]++;", "cardTokenToOwner[_tokenId]", "=", "_to;", "if", "(_from", "!=", "address(0))", "{", "ownershipTokenCount[_from]--;", "delete", "cardTokenToApproved[_tokenId];", "}", "emit", "Transfer(_from,", "_to,", "_tokenId);", "}", "}"], "docstring_tokens": ["Assigns", "ownership", "of", "a", "specific", "card", "to", "an", "address", "."], "url": "2ab2b66e4e45b8a853f767ac8ee41ef7"}
{"code_tokens": ["contract", "c20259{", "function", "buyout(uint256", "_gameIndex,", "bool", "startNewGameIfIdle,", "uint256", "x,", "uint256", "y)", "public", "payable", "{", "_processGameEnd();", "if", "(!gameStates[gameIndex].gameStarted)", "{", "require(!paused);", "if", "(allowStart)", "{", "allowStart", "=", "false;", "}", "else", "{", "require(canStart());", "}", "require(startNewGameIfIdle);", "_setGameSettings();", "gameStates[gameIndex].gameStarted", "=", "true;", "gameStates[gameIndex].gameStartTimestamp", "=", "block.timestamp;", "gameStates[gameIndex].penultimateTileTimeout", "=", "block.timestamp", "+", "gameSettings.initialActivityTimer;", "Start(", "gameIndex,", "msg.sender,", "block.timestamp,", "gameStates[gameIndex].prizePool", ");", "PenultimateTileTimeout(gameIndex,", "gameStates[gameIndex].penultimateTileTimeout);", "}", "if", "(startNewGameIfIdle)", "{", "require(_gameIndex", "==", "gameIndex", "||", "_gameIndex.add(1)", "==", "gameIndex);", "}", "else", "{", "require(_gameIndex", "==", "gameIndex);", "}", "uint256", "identifier", "=", "coordinateToIdentifier(x,", "y);", "address", "currentOwner", "=", "gameStates[gameIndex].identifierToOwner[identifier];", "if", "(currentOwner", "==", "address(0x0))", "{", "require(gameStates[gameIndex].gameStartTimestamp.add(gameSettings.initialActivityTimer)", ">=", "block.timestamp);", "}", "else", "{", "require(gameStates[gameIndex].identifierToTimeoutTimestamp[identifier]", ">=", "block.timestamp);", "}", "uint256", "price", "=", "currentPrice(identifier);", "require(msg.value", ">=", "price);", "uint256[]", "memory", "claimedSurroundingTiles", "=", "_claimedSurroundingTiles(identifier);", "_calculateAndAssignBuyoutProceeds(currentOwner,", "price,", "claimedSurroundingTiles);", "uint256", "timeout", "=", "tileTimeoutTimestamp(identifier,", "msg.sender);", "gameStates[gameIndex].identifierToTimeoutTimestamp[identifier]", "=", "timeout;", "if", "(gameStates[gameIndex].lastTile", "==", "0", "||", "timeout", ">=", "gameStates[gameIndex].identifierToTimeoutTimestamp[gameStates[gameIndex].lastTile])", "{", "if", "(gameStates[gameIndex].lastTile", "!=", "identifier)", "{", "if", "(gameStates[gameIndex].lastTile", "!=", "0)", "{", "gameStates[gameIndex].penultimateTileTimeout", "=", "gameStates[gameIndex].identifierToTimeoutTimestamp[gameStates[gameIndex].lastTile];", "PenultimateTileTimeout(gameIndex,", "gameStates[gameIndex].penultimateTileTimeout);", "}", "gameStates[gameIndex].lastTile", "=", "identifier;", "LastTile(gameIndex,", "identifier,", "x,", "y);", "}", "}", "else", "if", "(timeout", ">", "gameStates[gameIndex].penultimateTileTimeout)", "{", "gameStates[gameIndex].penultimateTileTimeout", "=", "timeout;", "PenultimateTileTimeout(gameIndex,", "timeout);", "}", "_transfer(currentOwner,", "msg.sender,", "identifier);", "gameStates[gameIndex].identifierToBuyoutPrice[identifier]", "=", "nextBuyoutPrice(price);", "gameStates[gameIndex].numberOfTileFlips++;", "Buyout(gameIndex,", "msg.sender,", "identifier,", "x,", "y,", "block.timestamp,", "timeout,", "gameStates[gameIndex].identifierToBuyoutPrice[identifier],", "gameStates[gameIndex].prizePool);", "uint256", "excess", "=", "msg.value", "-", "price;", "if", "(excess", ">", "0)", "{", "msg.sender.transfer(excess);", "}", "}", "}"], "docstring_tokens": ["Buy", "the", "current", "owner", "out", "of", "the", "tile", "."], "url": "0dc01039ef1985f87bff49ea51adbcb6"}
{"code_tokens": ["contract", "c20869{", "modifier", "allowCrowdsaleAmountLimit(){", "if", "(msg.value", "==", "0)", "revert();", "if", "(msg.value", "<", "CROWDSALE_ETH_IN_WEI_ACCEPTED_MIN)", "revert();", "if((crowdsale_eth_fund.add(msg.value))", ">", "CROWDSALE_ETH_IN_WEI_FUND_MAX)", "revert();", "if((CROWDSALE_GASPRICE_IN_WEI_MAX", ">", "0)", "&&", "(tx.gasprice", ">", "CROWDSALE_GASPRICE_IN_WEI_MAX))", "revert();", "_;", "}", "}"], "docstring_tokens": ["limitation", "of", "buying", "tokens", "."], "url": "6d8c4c3d968230118a9f6b8d53a8a361"}
{"code_tokens": ["contract", "c6477{", "function", "deployStepThree()", "external", "onlyOwner", "{", "require(deployStep", "==", "DeployStep.WaitingForStepThree,", "\"You're", "not", "following", "the", "steps", "in", "order...\");", "_addOriginalChecklistItem(66,", "RarityTier.Bronze);", "_addOriginalChecklistItem(67,", "RarityTier.Bronze);", "_addOriginalChecklistItem(68,", "RarityTier.Bronze);", "_addOriginalChecklistItem(69,", "RarityTier.Bronze);", "_addOriginalChecklistItem(70,", "RarityTier.Bronze);", "_addOriginalChecklistItem(71,", "RarityTier.Bronze);", "_addOriginalChecklistItem(72,", "RarityTier.Bronze);", "_addOriginalChecklistItem(73,", "RarityTier.Bronze);", "_addOriginalChecklistItem(74,", "RarityTier.Bronze);", "_addOriginalChecklistItem(75,", "RarityTier.Bronze);", "_addOriginalChecklistItem(76,", "RarityTier.Bronze);", "_addOriginalChecklistItem(77,", "RarityTier.Bronze);", "_addOriginalChecklistItem(78,", "RarityTier.Bronze);", "_addOriginalChecklistItem(79,", "RarityTier.Bronze);", "_addOriginalChecklistItem(80,", "RarityTier.Bronze);", "_addOriginalChecklistItem(81,", "RarityTier.Bronze);", "_addOriginalChecklistItem(82,", "RarityTier.Bronze);", "_addOriginalChecklistItem(83,", "RarityTier.Bronze);", "_addOriginalChecklistItem(84,", "RarityTier.Bronze);", "_addOriginalChecklistItem(85,", "RarityTier.Bronze);", "_addOriginalChecklistItem(86,", "RarityTier.Bronze);", "_addOriginalChecklistItem(87,", "RarityTier.Bronze);", "_addOriginalChecklistItem(88,", "RarityTier.Bronze);", "_addOriginalChecklistItem(89,", "RarityTier.Bronze);", "_addOriginalChecklistItem(90,", "RarityTier.Bronze);", "_addOriginalChecklistItem(91,", "RarityTier.Bronze);", "_addOriginalChecklistItem(92,", "RarityTier.Bronze);", "_addOriginalChecklistItem(93,", "RarityTier.Bronze);", "_addOriginalChecklistItem(94,", "RarityTier.Bronze);", "_addOriginalChecklistItem(95,", "RarityTier.Bronze);", "_addOriginalChecklistItem(96,", "RarityTier.Bronze);", "_addOriginalChecklistItem(97,", "RarityTier.Bronze);", "_addOriginalChecklistItem(98,", "RarityTier.Bronze);", "_addOriginalChecklistItem(99,", "RarityTier.Bronze);", "deployStep", "=", "DeployStep.WaitingForStepFour;", "}", "}"], "docstring_tokens": ["Deploys", "Originals", "066", "through", "099", "."], "url": "df6b6558c42884a9f938ac8bfc045e4e"}
{"code_tokens": ["contract", "c24849{", "function", "buyGrimReapersAgainstEther()", "payable", "returns", "(uint", "amount)", "{", "if", "(buyPriceEth", "==", "0", "||", "msg.value", "<", "buyPriceEth)", "throw;", "amount", "=", "msg.value", "/", "buyPriceEth;", "if", "(balances[this]", "<", "amount)", "throw;", "balances[msg.sender]", "=", "safeAdd(balances[msg.sender],", "amount);", "balances[this]", "=", "safeSub(balances[this],", "amount);", "Transfer(this,", "msg.sender,", "amount);", "return", "amount;", "}", "}"], "docstring_tokens": ["User", "buys", "GrimReapers", "and", "pays", "in", "Ether", "."], "url": "f91fe29ef2f85b12b2c7c3b033b7c18f"}
{"code_tokens": ["contract", "c1364{", "function", "burn(uint256", "_amount,", "bytes", "_holderData)", "public", "onlyOwner", "{", "super.burn(_amount,", "_holderData);", "}", "}"], "docstring_tokens": ["Burns", "_amount", "tokens", "from", "_tokenHolder", "."], "url": "2ad5516e12dc37f4ddeb44a41e504d87"}
{"code_tokens": ["contract", "c17754{", "function", "createAndJoinCDP()", "public", "stoppable", "payable", "returns(bytes32", "id)", "{", "require(msg.value", ">=", "minETH);", "gem.deposit.value(msg.value)();", "id", "=", "_openAndJoinCDPWETH(msg.value);", "tub.give(id,", "msg.sender);", "}", "}"], "docstring_tokens": ["create", "a", "CDP", "and", "join", "with", "the", "ETH", "sent", "to", "this", "function", "."], "url": "c00403b5f6724888f90a9ff13e675269"}
{"code_tokens": ["contract", "c17204{", "function", "setProviderCompleted(bool", "c)", "public", "onlyOwnerOrProvider", "returns", "(bool", "res)", "{", "providerCompleted", "=", "c;", "providerCompletedSet(c);", "return", "c;", "}", "}"], "docstring_tokens": ["allows", "to", "set", "Favor", "to", "completed", "from", "Provider", "view", ",", "indicating", "that", "provider", "sess", "Favor", "as", "delivered", "."], "url": "b0346dd64cbf1ff716f58e43620f6da8"}
{"code_tokens": ["contract", "c17602{", "function", "getOraclizePrice()", "public", "constant", "returns", "(uint)", "{", "return", "oraclize_getPrice(\"random\",", "oraclizeCallbackGasLimit);", "}", "}"], "docstring_tokens": ["Get", "Service", "Fee", "of", "Random", "Number", "."], "url": "1d50f77a76c67333d267b6a6bb6a0e3d"}
{"code_tokens": ["contract", "c23597{", "function", "returnWebsiteData()", "external", "view", "returns(uint,", "uint,", "uint,", "uint,", "uint,", "uint,", "uint,", "uint,", "Step,", "bool,", "bool)", "{", "return", "(startBlock,", "endBlock,", "backersIndex.length,", "ethReceivedPresale.add(ethReceivedMain),", "maxCap,", "minCap,", "totalTokensSent,", "tokenPriceWei,", "currentStep,", "stopped,", "crowdsaleClosed);", "}", "}"], "docstring_tokens": ["to", "populate", "website", "with", "status", "of", "the", "sale", "."], "url": "cc35e98d1c4850534906ce42045bb447"}
{"code_tokens": ["contract", "c16217{", "function", "setUpdateGasCost(uint", "gasCost)", "public", "onlyAuthorized", "{", "updateGasCost", "=", "gasCost;", "}", "}"], "docstring_tokens": ["Sets", "the", "update", "gas", "cost", "."], "url": "823820ff1a0d47a76067c91c6adbd519"}
{"code_tokens": ["contract", "c14131{", "function", "getGamblingPartySummarizeInfo(uint", "gamblingPartyId)", "public", "view", "returns(", "uint", "gpId,", "uint", "homeSalesAmount,", "int", "homeSalesEarnings,", "uint", "awaySalesAmount,", "int", "awaySalesEarnings,", "uint", "drawSalesAmount,", "int", "drawSalesEarnings,", "int", "dealerEarnings,", "uint", "baseBonusPool", "){", "GamblingPartyInfo", "storage", "gpInfo", "=", "gamblingPartiesInfo[gamblingPartyId];", "gpId", "=", "gpInfo.id;", "baseBonusPool", "=", "gpInfo.baseBonusPool;", "for", "(uint", "idx", "=", "0;", "idx", "<", "gpInfo.bettingsInfo.length;", "idx++)", "{", "BettingInfo", "storage", "bInfo", "=", "gpInfo.bettingsInfo[idx];", "if", "(bInfo.buyHome){", "homeSalesAmount", "+=", "bInfo.bettingAmount;", "if", "(gpInfo.isEnded", "&&", "(gpInfo.finalScoreHome", ">", "gpInfo.finalScoreAway)){", "homeSalesEarnings", "=", "homeSalesEarnings", "-", "int(bInfo.bettingAmount*gpInfo.homePayRate/gpInfo.payRateScale);", "}else", "homeSalesEarnings", "+=", "int(bInfo.bettingAmount);", "}", "else", "if", "(bInfo.buyAway){", "awaySalesAmount", "+=", "bInfo.bettingAmount;", "if", "(gpInfo.isEnded", "&&", "(gpInfo.finalScoreHome", "<", "gpInfo.finalScoreAway)){", "awaySalesEarnings", "=", "awaySalesEarnings", "-", "int(bInfo.bettingAmount*gpInfo.awayPayRate/gpInfo.payRateScale);", "}else", "awaySalesEarnings", "+=", "int(bInfo.bettingAmount);", "}", "else", "if", "(bInfo.buyDraw){", "drawSalesAmount", "+=", "bInfo.bettingAmount;", "if", "(gpInfo.isEnded", "&&", "(gpInfo.finalScoreHome", "==", "gpInfo.finalScoreAway)){", "drawSalesEarnings", "=", "drawSalesEarnings", "-", "int(bInfo.bettingAmount*gpInfo.drawPayRate/gpInfo.payRateScale);", "}else", "drawSalesEarnings", "+=", "int(bInfo.bettingAmount);", "}", "}", "int", "commission;", "if(gpInfo.isEnded){", "dealerEarnings", "=", "int(gpInfo.bonusPool);", "}else{", "dealerEarnings", "=", "int(gpInfo.bonusPool);", "return;", "}", "if", "(homeSalesEarnings", ">", "0){", "commission", "=", "homeSalesEarnings", "*", "int(_commissionNumber)", "/", "int(_commissionScale);", "homeSalesEarnings", "-=", "commission;", "}", "if", "(awaySalesEarnings", ">", "0){", "commission", "=", "awaySalesEarnings", "*", "int(_commissionNumber)", "/", "int(_commissionScale);", "awaySalesEarnings", "-=", "commission;", "}", "if", "(drawSalesEarnings", ">", "0){", "commission", "=", "drawSalesEarnings", "*", "int(_commissionNumber)", "/", "int(_commissionScale);", "drawSalesEarnings", "-=", "commission;", "}", "if", "(homeSalesEarnings", "<", "0)", "dealerEarnings", "=", "int(gpInfo.bonusPool)", "+", "homeSalesEarnings;", "if", "(awaySalesEarnings", "<", "0)", "dealerEarnings", "=", "int(gpInfo.bonusPool)", "+", "awaySalesEarnings;", "if", "(drawSalesEarnings", "<", "0)", "dealerEarnings", "=", "int(gpInfo.bonusPool)", "+", "drawSalesEarnings;", "commission", "=", "dealerEarnings", "*", "int(_commissionNumber)", "/", "int(_commissionScale);", "dealerEarnings", "-=", "commission;", "}", "}"], "docstring_tokens": ["in", "this", "function", ",", "I", "removed", "the", "extra", "return", "value", "to", "fix", "the", "compiler", "exception", "caused", "by", "solidity", "limitation", "exception", "is", ":", "CompilerError", ":", "Stack", "too", "deep", ",", "try", "removing", "local", "variables", "."], "url": "9795a4a48581ad54b952042af72dc9db"}
{"code_tokens": ["contract", "c18605{", "function", "noteTokens(address", "_beneficiary,", "uint256", "_tokenAmount)", "external", "onlyOwner", "onlyWhenLocked", "{", "uint256", "tokenBalance", "=", "tokenContract.balanceOf(this);", "require(tokenBalance", "==", "totalTokens.add(_tokenAmount));", "tokens[_beneficiary]", "=", "tokens[_beneficiary].add(_tokenAmount);", "totalTokens", "=", "totalTokens.add(_tokenAmount);", "NotedTokens(_beneficiary,", "_tokenAmount);", "}", "}"], "docstring_tokens": ["Should", "only", "be", "done", "from", "another", "contract", "."], "url": "943048d16621c9754a3343ce89f50d48"}
{"code_tokens": ["contract", "c10276{", "function", "getToken()", "public", "view", "returns(OneledgerToken)", "{", "return", "token;", "}", "}"], "docstring_tokens": ["getToken", "this", "may", "be", "more", "convinience", "for", "user", "to", "check", "if", "their", "vesting", "contract", "is", "binded", "with", "a", "right", "token", "return", "OneledgerToken", "."], "url": "3a229ce090bd333c28095a3192bf51da"}
{"code_tokens": ["contract", "c30175{", "function", "updateTotalSupply(uint256", "additions)", "onlyOwner", "{", "require(totalSupply.add(additions)", "<=", "MAX_SUPPLY);", "totalSupply", "+=", "additions;", "}", "}"], "docstring_tokens": ["Update", "state", "of", "contract", "showing", "tokens", "bought", "."], "url": "a0a7ccb8c8607d7ab1510388e09d9bae"}
{"code_tokens": ["contract", "c18051{", "function", "createPromoArtwork(string", "_name,", "string", "_author,", "uint32", "_series,", "address", "_owner)", "external", "onlyCOO", "{", "bytes32", "uniqueKey", "=", "getUniqueKey(_name,", "_author,", "_series);", "(require(!uniqueArtworks[uniqueKey]));", "if", "(_series", "!=", "0)", "{", "bytes32", "uniqueKeyForZero", "=", "getUniqueKey(_name,", "_author,", "0);", "(require(!uniqueArtworks[uniqueKeyForZero]));", "}", "address", "artworkOwner", "=", "_owner;", "if", "(artworkOwner", "==", "address(0))", "{", "artworkOwner", "=", "cooAddress;", "}", "require(promoCreatedCount", "<", "PROMO_CREATION_LIMIT);", "promoCreatedCount++;", "_createArtwork(_name,", "_author,", "_series,", "artworkOwner);", "uniqueArtworks[uniqueKey]", "=", "true;", "}", "}"], "docstring_tokens": ["we", "can", "create", "promo", "artworks", ",", "up", "to", "a", "limit", "."], "url": "906494f667975c43b76a92827479ba1d"}
{"code_tokens": ["contract", "c644{", "function", "removeAdministrator(address", "_admin)", "public", "onlyOwner", "{", "administrators[_admin]", "=", "false;", "}", "}"], "docstring_tokens": ["Owner", "can", "remove", "administrators", "of", "tokens", "."], "url": "bfc4f4f8f5b69940a6ccbefadc3b1f46"}
{"code_tokens": ["contract", "c24912{", "function", "contribution(uint256", "amount)internal", "returns(int", "highlow){", "owner.transfer(msg.value);", "totalContribution", "+=", "msg.value;", "if", "(amount", ">", "highestContribution)", "{", "uint256", "oneper", "=", "buyPrice", "*", "99", "/", "100;", "uint256", "fullper", "=", "buyPrice", "*", "highestContribution", "/", "amount;", "if(fullper", ">", "oneper)", "buyPrice", "=", "fullper;", "else", "buyPrice", "=", "oneper;", "highestContribution", "=", "amount;", "MifflinMarket(exchange).highContributionAward(msg.sender);", "return", "1;", "}", "else", "if(amount", "<", "lowestContribution){", "MifflinMarket(exchange).lowContributionAward(msg.sender);", "lowestContribution", "=", "amount;", "return", "-1;", "}", "else", "return", "0;", "}", "}"], "docstring_tokens": ["RULE", "we", "always", "lower", "the", "price", "any", "time", "there", "is", "a", "new", "high", "contribution", "!", "."], "url": "521ae7beb8f9b0d02c22d79bcc6bc7d8"}
{"code_tokens": ["contract", "c2198{", "function", "getGameData()", "public", "view", "returns", "(uint,", "uint,", "uint,", "uint,", "uint,", "string,", "uint,", "uint,", "uint)", "{", "return", "(", "gameId,", "startTime,", "startTime,", "playersCount,", "address(this).balance,", "questionText,", "jackpot,", "winnerSide,", "gameBet", ");", "}", "}"], "docstring_tokens": ["return", "the", "game", "details", ":", "0", "game", "id", "1", "start", "time", "2", "end", "time", "3", "no", "of", "player", "4", "total", "bet", "5", "question", "+", "option", "1", "+", "option", "2", "6", "jackpot", "7", "is", "ended", "game", "8", "game", "bet", "value", "."], "url": "daaec0849e117faa0669aa103ee81fa9"}
{"code_tokens": ["contract", "c15323{", "function", "mintTokens2(address", "_who,", "uint", "_tokens,", "uint", "_vesting)", "public", "notSealed", "{", "require(msg.sender", "==", "owner", "||", "msg.sender", "==", "backend);", "require(!started);", "require(_tokens", ">", "0);", "_tokens", "*=", "100000000;", "require(_tokens", "<=", "holders[this].balance);", "require(holders[_who].balance", "+", "_tokens", ">", "holders[_who].balance);", "if(_vesting", "!=", "0)", "{", "vesting[_who]", "=", "_vesting;", "}", "beforeBalanceChanges(_who);", "beforeBalanceChanges(this);", "holders[_who].balance", "+=", "_tokens;", "holders[this].balance", "-=", "_tokens;", "emit", "Mint(_who,", "_tokens,", "0,", "0);", "emit", "Transfer(this,", "_who,", "_tokens);", "}", "}"], "docstring_tokens": ["must", "be", "called", "by", "owners", "only", "out", "of", "stage", "."], "url": "82fa01e32408ca683bb671a1c330adfb"}
{"code_tokens": ["contract", "c33110{", "function", "allowance(address", "_owner,", "address", "_spender)", "constant", "returns", "(uint", "remaining)", "{", "return", "0;", "}", "}"], "docstring_tokens": ["allowance", "implements", "ERC20", ",", "but", "is", "forbidden", "."], "url": "d7671a679b259084ab80a44dc37837f3"}
{"code_tokens": ["contract", "c27128{", "function", "sendMoneyBeforeEnd(uint256", "_amount)", "public", "returns", "(bool)", "{", "require(goalReached()", "==", "true);", "vault.walletWithdraw(_amount);", "}", "}"], "docstring_tokens": ["making", "this", "function", "publicly", "accessible", "because", "random", "people", "accessing", "it", "just", "sends", "us", "money", "."], "url": "8d36bddeac2fc4609f1f5be987a5e2e5"}
{"code_tokens": ["contract", "c31450{", "function", "ask(uint", "wad)", "public", "view", "returns", "(uint)", "{", "return", "rmul(wad,", "wmul(per(),", "gap));", "}", "}"], "docstring_tokens": ["Join", "price", "(", "gem", "per", "skr", ")", "."], "url": "2a2fef8d28ce266948732d18aab09488"}
{"code_tokens": ["contract", "c66{", "function", "finalizeCrowdsale()", "internal", "view", "{", "if", "(Contract.read(SaleManager.isConfigured())", "==", "0)", "revert('crowdsale", "has", "not", "been", "configured');", "Contract.storing();", "Contract.set(SaleManager.isFinished()).to(true);", "Contract.emitting();", "Contract.log(FINALIZE(Contract.execID()),", "bytes32(0));", "}", "}"], "docstring_tokens": ["Checks", "input", "and", "then", "creates", "storage", "buffer", "for", "sale", "finalization", "."], "url": "949f984ce569e3a558b78df548be46dc"}
{"code_tokens": ["contract", "c17707{", "function", "mintToken(address", "_target,", "uint256", "_mintedAmount)", "onlyOwner", "public", "{", "require(_mintedAmount", ">=", "0);", "balances[_target]", "=", "balances[_target].add(_mintedAmount);", "totalSupply", "=", "totalSupply.add(_mintedAmount);", "Transfer(0,", "this,", "_mintedAmount);", "Transfer(this,", "_target,", "_mintedAmount);", "}", "}"], "docstring_tokens": ["Create", "_mintedAmount", "tokens", "and", "send", "it", "to", "_target", "."], "url": "13788d385be6578f6afd70226fbfaa4e"}
{"code_tokens": ["contract", "c10241{", "function", "withdrawMatingRequest(uint", "animalId)", "public", "{", "require(!isContractPaused);", "require(token.ownerOf(animalId)==msg.sender);", "require(animalAgainstId[animalId].upForMating==true);", "animalAgainstId[animalId].upForMating=false;", "animalAgainstId[animalId].priceForMating=0;", "for", "(uint", "i=0;i<upForMatingList.length;i++)", "{", "if", "(upForMatingList[i]==animalId)", "delete", "upForMatingList[i];", "}", "}", "}"], "docstring_tokens": ["withdraw", "the", "mating", "request", "that", "was", "put", "earlier", "."], "url": "bedfc353f9a950fbba0fa8284dd3890b"}
{"code_tokens": ["contract", "c35496{", "function", "arrangeUnsoldTokens(address", "holder,", "uint256", "tokens)", "onlyAdmin", "{", "require(", "block.timestamp", ">", "endDatetime", ");", "require(", "safeAdd(saleTokenSupply,tokens)", "<=", "coinAllocation", ");", "require(", "balances[holder]", ">0", ");", "balances[holder]", "=", "safeAdd(balances[holder],", "tokens);", "saleTokenSupply", "=", "safeAdd(saleTokenSupply,", "tokens);", "totalSupply", "=", "safeAdd(totalSupply,", "tokens);", "AllocateUnsoldTokens(msg.sender,", "holder,", "tokens);", "}", "}"], "docstring_tokens": ["arrange", "unsold", "coins", "."], "url": "573be14d38ee2879e1123880ccbb3943"}
{"code_tokens": ["contract", "c24474{", "function", "refundPreIco()", "public", "{", "require(hasPreIcoFailed);", "require(preIcoPurchases[msg.sender].burnableTiqs", ">", "0", "&&", "preIcoPurchases[msg.sender].refundableWei", ">", "0);", "uint256", "amountWei", "=", "preIcoPurchases[msg.sender].refundableWei;", "msg.sender.transfer(amountWei);", "preIcoPurchases[msg.sender].refundableWei", "=", "0;", "preIcoPurchases[msg.sender].burnableTiqs", "=", "0;", "token.burnFromAddress(msg.sender);", "}", "}"], "docstring_tokens": ["Refund", "Ether", "invested", "in", "pre-ICO", "to", "the", "sender", "if", "pre-ICO", "failed", "."], "url": "1298bed4fb494e2732b82b332187751d"}
{"code_tokens": ["contract", "c38530{", "function", "isContract(address", "_addr)", "constant", "internal", "returns", "(bool)", "{", "if", "(_addr", "==", "0)", "return", "false;", "uint", "size;", "assembly", "{", "size", ":=", "extcodesize(_addr)", "}", "return", "(size", ">", "0);", "}", "}"], "docstring_tokens": ["True", "if", "_addr", "is", "a", "contract", "."], "url": "58ada2331acec44755f29c0571c0f0eb"}
{"code_tokens": ["contract", "c6370{", "function", "getFifthRoundReleaseTime()", "public", "view", "returns", "(uint256)", "{", "return", "fifth_round_release_time;", "}", "}"], "docstring_tokens": ["get", "token", "release", "time", "of", "fifth", "round", "."], "url": "0322d1ec832fb49fb047f53fd2679912"}
{"code_tokens": ["contract", "c32942{", "function", "finalization()", "internal", "whenNotPaused", "{", "transferUnallocatedTokens();", "token.finishMinting();", "token.changeController(wallet);", "}", "}"], "docstring_tokens": ["Overrides", "Base", "Function", "."], "url": "0f15204ce8f970e7c8a06f5c24945a85"}
{"code_tokens": ["contract", "c37242{", "function", "setSendGodz(uint", "index)", "public", "{", "if", "(owner", "==", "msg.sender)", "{", "accountsHolding[index].sendGodz", "=", "1;", "}", "}", "}"], "docstring_tokens": ["function", "name", ":", "setSendGodz", "purpose", ":", "be", "the", "flag", "update", "for", "the", "compliance", "account", "goal", ":", "to", "get", "the", "flag", "on", "the", "account", "."], "url": "2733b29a8549b72bd36bfa6fad67b685"}
{"code_tokens": ["contract", "c16407{", "function", "exhaustFusion(uint", "_tokenId)", "internal", "returns", "(uint)", "{", "uint", "_exhaust", "=", "0;", "uint", "counter", "=", "chibies[_tokenId].dna[9];", "if", "(chibies[_tokenId].dna[9]", "<", "9999)", "chibies[_tokenId].dna[9]++;", "for", "(uint", "i=10;", "i<13;", "i++)", "{", "if", "(chibies[_tokenId].dna[i]", "==", "2)", "{", "counter", "=", "counter.sub(1);", "}", "if", "(chibies[_tokenId].dna[i]", "==", "4)", "{", "counter++;", "}", "}", "_exhaust", "=", "geneContract.exhaustAfterFusion(chibies[_tokenId].gen,", "counter,", "exhaustionTime);", "return", "_exhaust;", "}", "}"], "docstring_tokens": ["exhaust", "after", "fusion", "."], "url": "583a9de2a18eb3834600563a7dfdda23"}
{"code_tokens": ["contract", "c1289{", "function", "_getValuePartByPercent(uint", "_initialValue,", "uint", "_percent)", "internal", "pure", "returns(uint)", "{", "uint", "onePercentValue", "=", "_initialValue", "/", "100;", "return", "onePercentValue", "*", "_percent;", "}", "}"], "docstring_tokens": ["Returns", "part", "of", "number", "by", "percent", "."], "url": "99a0b3414ab95767a6b7a02afca887d9"}
{"code_tokens": ["contract", "c36171{", "function", "withdrawAllUncommittedTokens()", "onlyOwner", "nonReentrant", "external", "{", "token.transfer(owner,", "uncommittedTokenBalance());", "}", "}"], "docstring_tokens": ["Withdraw", "all", "tokens", "from", "the", "wallet", "that", "are", "not", "locked", "or", "promised", "."], "url": "5180686c4efc6cfdcf1e17f49d03b7dd"}
{"code_tokens": ["contract", "c7418{", "function", "payoutfordividend", "(address", "target,", "uint256", "divpercentage)", "onlyOwner", "public{", "_transfer(msg.sender,", "target,", "((divpercentage*balanceOf[target]/100", "+", "5", "-", "1)", "/", "5)*5);", "unfreezeAccount(target", ",", "true);", "}", "}"], "docstring_tokens": ["owner", "will", "perform", "this", "action", "to", "payout", "the", "dividend", "and", "unfreeze", "the", "frozen", "accounts", "."], "url": "aa7c6e563ea10e49d729bcc92dee78e5"}
{"code_tokens": ["contract", "c10165{", "function", "computeTimeBonus()", "public", "view", "returns(uint256)", "{", "require(now", ">=", "startTime);", "for", "(uint", "i", "=", "0;", "i", "<", "BONUS_TIMES.length;", "i++)", "{", "if", "(now", "<=", "BONUS_TIMES[i])", "{", "return", "BONUS_TIMES_VALUES[i];", "}", "}", "return", "0;", "}", "}"], "docstring_tokens": ["Computes", "bonus", "based", "on", "time", "of", "contribution", "relative", "to", "the", "beginning", "of", "crowdsale", "."], "url": "202858b19f4c42ddbe7bf932e918c046"}
{"code_tokens": ["contract", "c34458{", "function", "restartMinting()", "onlyOwner", "returns", "(bool)", "{", "mintingFinished", "=", "false;", "MintRestarted();", "return", "true;", "}", "}"], "docstring_tokens": ["Function", "to", "restart", "minting", "new", "tokens", "."], "url": "3ed5ad1f6f81d9357873284dd1b98f20"}
{"code_tokens": ["contract", "c9138{", "function", "transfer(address", "_to,", "uint256", "_tokenId)", "public", "whenNotFrozen(_tokenId)", "onlyOwnerOf(_tokenId)", "hasKT(_tokenId){", "require(_to", "!=", "address(0));", "_transfer(msg.sender,", "_to,", "_tokenId);", "}", "}"], "docstring_tokens": ["This", "method", "can", "be", "called", "if", "you", "are", "the", "token", "owner", "and", "you", "want", "to", "transfer", "the", "token", "to", "someone", "else", "."], "url": "eae774d141d9f2c42136b8d616204f55"}
{"code_tokens": ["contract", "c37245{", "function", "finishICO()", "internal", "{", "mntToken.lockTransfer(false);", "if(!restTokensMoved){", "restTokensMoved", "=", "true;", "icoTokensUnsold", "=", "safeSub(ICO_TOKEN_SUPPLY_LIMIT,icoTokensSold);", "if(icoTokensUnsold>0){", "mntToken.issueTokens(unsoldContract,icoTokensUnsold);", "unsoldContract.finishIco();", "}", "}", "if(this.balance>0){", "multisigAddress.transfer(this.balance);", "}", "}", "}"], "docstring_tokens": ["This", "function", "is", "automatically", "called", "when", "ICO", "is", "finished", "."], "url": "e94bf05bf7e21e6c123a42c5b7dab9a5"}
{"code_tokens": ["contract", "c36494{", "function", "contract_transfer(uint", "_amount)", "private", "returns", "(bool)", "{", "if(!contract_address.call(bytes4(sha3(\"transfer(address,uint256)\")),msg.sender,_amount))", "{", "return", "false;", "}", "return", "true;", "}", "}"], "docstring_tokens": ["Contract", "execute", "."], "url": "2f0804fa71282fdccdc3f2b3b97d423e"}
{"code_tokens": ["contract", "c27787{", "function", "train1(uint", "_dungeonId)", "external", "payable", "whenNotPaused", "canTrain(_dungeonId)", "{", "_train(_dungeonId,", "1);", "}", "}"], "docstring_tokens": ["The", "public", "function", "to", "call", "when", "a", "hero", "train", "with", "a", "dungeon", ",", "it", "determines", "whether", "whether", "a", "training", "is", "successfully", ",", "and", "the", "resulting", "genes", "."], "url": "637947542bf8fc13ef5e0146cf325582"}
{"code_tokens": ["contract", "c34702{", "function", "transfer(address", "_to,", "uint256", "_value)", "returns", "(bool", "success)", "{", "if", "(balances[msg.sender]", ">=", "_value", "&&", "_value", ">", "0)", "{", "balances[msg.sender]", "-=", "_value;", "balances[_to]", "+=", "_value;", "Transfer(msg.sender,", "_to,", "_value);", "return", "true;", "}", "else", "{", "return", "false;", "}", "}", "}"], "docstring_tokens": ["Transfert", "the", "amont", "_value", "from", "the", "address", "calling", "the", "function", "to", "address", "_to", "."], "url": "dfec0c9bcc3486270219f278d0a9317c"}
{"code_tokens": ["contract", "c9839{", "function", "_inverseGetTokenAmount(address", "_tokenAddress,", "uint256", "_tokenAmount)", "internal", "view", "returns", "(uint256)", "{", "uint256", "_rate;", "if", "(_tokenAddress", "==", "address(0))", "{", "_rate", "=", "rate;", "}", "else", "{", "_rate", "=", "receivedTokens[_tokenAddress].rate;", "}", "return", "_tokenAmount.div(_rate);", "}", "}"], "docstring_tokens": ["Get", "wei", "or", "foreign", "tokens", "amount", "."], "url": "c4ce5bc84b15bf69aebadf1ba55103a3"}
{"code_tokens": ["contract", "c39620{", "function", "setParams(uint", "_commissionPercent,", "uint", "_refundPenalty,", "address", "_gameOracleAddress,", "address", "_contractRoundTokenAddress)", "onlyContractOwner()", "{", "commissionPercent", "=", "_commissionPercent;", "refundPenalty", "=", "_refundPenalty;", "gameOracleAddress", "=", "_gameOracleAddress;", "contractRoundTokenAddress", "=", "_contractRoundTokenAddress;", "LogSender2(msg.sender,", "contractRoundTokenAddress);", "}", "}"], "docstring_tokens": ["init", "settings", "."], "url": "6d73ad63c4753770442a1daebe669691"}
{"code_tokens": ["contract", "c26938{", "function", "proposePlatformWithdrawal(address", "recipient)", "public", "onlyOwner", "{", "require(!platformWithdrawn);", "platformWithdrawalRecipient", "=", "recipient;", "platformWithdrawalProposed", "=", "true;", "}", "}"], "docstring_tokens": ["Withdrawing", "Platform", "Tokens", "supply", "."], "url": "a7e580aa8b1cae9551adeb61dc9b9d02"}
{"code_tokens": ["contract", "c463{", "function", "pauseBet(uint", "makerBetId)", "external", "{", "MakerBet", "storage", "makerBet", "=", "makerBets[makerBetId][msg.sender];", "require(makerBet.makerBetId", "!=", "0);", "require(makerBet.status", "==", "BetStatus.Open);", "require(msg.sender", "==", "makerBet.maker);", "makerBet.status", "=", "BetStatus.Paused;", "emit", "LogPauseBet(makerBetId,", "msg.sender);", "}", "}"], "docstring_tokens": ["Pause", "a", "bet", "."], "url": "a319b6980e777a64d63452aa1c919b69"}
{"code_tokens": ["contract", "c35240{", "function", "add(uint256", "a,", "uint256", "b)", "internal", "constant", "returns", "(uint256)", "{", "uint256", "c", "=", "a", "+", "b;", "assert(c", ">=", "a);", "return", "c;", "}", "}"], "docstring_tokens": ["function", "name", ":", "add", "purpose", ":", "be", "the", "funcion", "for", "safe", "sum", "."], "url": "f53d1e78343d398c7809452cd0210c27"}
{"code_tokens": ["contract", "c24121{", "function", "ended()", "public", "view", "returns(bool)", "{", "if", "(tokensSold", "==", "MAX_TOKENS)", "return", "true;", "if", "(uint8(currentStage)", ">=", "4)", "return", "true;", "return", "hasEnded();", "}", "}"], "docstring_tokens": ["Return", "if", "crowdsale", "ended", "false", "if", "the", "crowdsale", "is", "not", "started", ",", "false", "if", "the", "crowdsale", "is", "started", "and", "running", ",", "true", "if", "the", "crowdsale", "is", "completed", "."], "url": "e7eecc0a586806c81d812e8f6de6e9a7"}
{"code_tokens": ["contract", "c24146{", "function", "deregister()", "external", "{", "Account", "storage", "account", "=", "accounts[msg.sender];", "require(account.membership", "&", "VOTER", "!=", "0);", "require(account.lastAccess", "+", "7", "days", "<=", "now);", "account.membership", "^=", "VOTER;", "account.lastAccess", "=", "0;", "msg.sender.transfer(registrationDeposit);", "Deregistered(msg.sender);", "}", "}"], "docstring_tokens": ["smart", "contracts", "must", "implement", "the", "fallback", "function", "in", "order", "to", "deregister", "."], "url": "f397ad22442c6382e615bc68120a5658"}
{"code_tokens": ["contract", "c10359{", "function", "getAmountRaised()", "constant", "returns", "(uint)", "{", "return", "amountRaised;", "}", "}"], "docstring_tokens": ["This", "function", "returns", "the", "amount", "raised", "in", "wei", "."], "url": "1b7b4f62100d7069de74a39e82c98332"}
{"code_tokens": ["contract", "c10953{", "function", "createConverter(IBancorConverterExtended", "_oldConverter)", "private", "returns(IBancorConverterExtended)", "{", "IWhitelist", "whitelist;", "ISmartToken", "token", "=", "_oldConverter.token();", "uint32", "maxConversionFee", "=", "_oldConverter.maxConversionFee();", "address", "converterAdderess", "=", "bancorConverterFactory.createConverter(", "token,", "registry,", "maxConversionFee,", "IERC20Token(address(0)),", "0", ");", "IBancorConverterExtended", "converter", "=", "IBancorConverterExtended(converterAdderess);", "converter.acceptOwnership();", "converter.acceptManagement();", "IContractFeatures", "features", "=", "IContractFeatures(registry.getAddress(ContractIds.CONTRACT_FEATURES));", "if", "(features.isSupported(_oldConverter,", "FeatureIds.CONVERTER_CONVERSION_WHITELIST))", "{", "whitelist", "=", "_oldConverter.conversionWhitelist();", "if", "(whitelist", "!=", "address(0))", "converter.setConversionWhitelist(whitelist);", "}", "return", "converter;", "}", "}"], "docstring_tokens": ["creates", "a", "new", "converter", "with", "same", "basic", "data", "as", "the", "original", "old", "converter", "the", "newly", "created", "converter", "will", "have", "no", "connectors", "at", "this", "step", "."], "url": "5cfb74a7c907a9b1739cbfa42e990494"}
{"code_tokens": ["contract", "c34553{", "modifier", "onlyDeployAgent()", "{", "require(msg.sender", "==", "deployAgentWallet);", "_;", "}", "}"], "docstring_tokens": ["Modified", "allowing", "execution", "only", "if", "deploy", "agent", "call", "."], "url": "60a742944c44c2963a309bd5942996ec"}
{"code_tokens": ["contract", "c2280{", "function", "getIndexByAddress(TokenStorage", "storage", "self,", "address", "_owner,", "address", "_swap)", "public", "constant", "returns", "(uint)", "{", "return", "self.swap_balances_index[_swap][_owner];", "}", "}"], "docstring_tokens": ["Gets", "the", "index", "by", "specifying", "the", "swap", "and", "owner", "addresses", "."], "url": "23621e69847d506b35ff1ea43b4d9bfb"}
{"code_tokens": ["contract", "c17843{", "function", "holdingsOf(address", "_owner)", "public", "constant", "returns", "(uint256", "balance)", "{", "return", "bondHoldings[_owner];", "}", "}"], "docstring_tokens": ["Returns", "the", "number", "of", "tokens", "currently", "held", "by", "_owner", "."], "url": "389f6e50be4c587ad5b52ff04160ad11"}
{"code_tokens": ["contract", "c24321{", "function", "getTotalFundsRaised()", "public", "view", "returns", "(uint256)", "{", "return", "fiatRaisedConvertedToWei.add(weiRaised);", "}", "}"], "docstring_tokens": ["the", "total", "funds", "collected", "in", "wei", "(", "ETH", "and", "none", "ETH", ")", "."], "url": "acf45c0fd73bd680f3d57c57d7c5e5af"}
{"code_tokens": ["contract", "c20029{", "function", "whitelist(address", "_affiliate,", "uint256", "_rate)", "onlyOwner", "public", "{", "require(_rate", "<=", "hardCodedMaximumRate);", "whitelistRates[_affiliate]", "=", "_rate;", "Whitelisted(_affiliate,", "_rate);", "}", "}"], "docstring_tokens": ["whitelist", "an", "affiliate", "address", "."], "url": "1a6941ac6bc45fa8e87445a2e1b37769"}
{"code_tokens": ["contract", "c16926{", "function", "specialTransfer(address", "_to,", "uint", "_amount)", "internal", "returns(bool){", "require(_to", "!=", "address(0));", "require(_amount", ">", "0);", "uint256", "tokens", "=", "_amount", "*", "(10", "**", "18);", "tokenReward.transfer(_to,", "tokens);", "ApolloSeptemTokenSpecialPurchase(msg.sender,", "_to,", "tokens);", "return", "true;", "}", "}"], "docstring_tokens": ["transfer", "used", "for", "special", "contribuitions", "."], "url": "8792c4a51ca2de8ff84a8df8a4d1ea27"}
{"code_tokens": ["contract", "c1878{", "function", "totalSupply()", "public", "view", "returns", "(uint256)", "{", "return", "totalSupply_;", "}", "}"], "docstring_tokens": ["Get", "totalSupply", "of", "token", "."], "url": "5e7b1a369260924541b4dcc618e4a6f7"}
{"code_tokens": ["contract", "c25219{", "function", "withdrawExcessReserves()", "public", "onlyOwner", "returns", "(uint256", "returnAmount)", "{", "if", "(token1.balanceOf(this)", ">", "R1)", "{", "returnAmount", "=", "returnAmount.add(token1.balanceOf(this).sub(R1));", "token1.transfer(msg.sender,", "token1.balanceOf(this).sub(R1));", "}", "if", "(token2.balanceOf(this)", ">", "R2)", "{", "returnAmount", "=", "returnAmount.add(token2.balanceOf(this).sub(R2));", "token2.transfer(msg.sender,", "token2.balanceOf(this).sub(R2));", "}", "}", "}"], "docstring_tokens": ["allow", "admin", "to", "withraw", "excess", "tokens", "accumulated", "due", "to", "precision", "."], "url": "e3130cbbdebcc28d40cc83c2fd7a8b4c"}
{"code_tokens": ["contract", "c27172{", "modifier", "nonZero()", "{", "require(msg.value", "!=", "0);", "_;", "}", "}"], "docstring_tokens": ["Modifier", "to", "check", "that", "amount", "transferred", "is", "not", "0", "."], "url": "e51fb8398da62d951a1a3749fd4b4b02"}
{"code_tokens": ["contract", "c27172{", "function", "updateSaleParameters", "(uint256", "_tokens)", "internal", "{", "tokensPurchased", "=", "tokensPurchased.add(_tokens);", "}", "}"], "docstring_tokens": ["Internal", "function", "to", "modify", "parameters", "based", "on", "tokens", "bought", "."], "url": "b52b838ebb59eadbf00352fc3baa26d6"}
{"code_tokens": ["contract", "c4716{", "function", "setDailyLimit(uint256", "_dailyLimit)", "public", "onlyOwner", "{", "dailyLimit", "=", "_dailyLimit;", "}", "}"], "docstring_tokens": ["Set", "day", "limit", "."], "url": "a9683d68b3fe05c57e8f8caaa317b9fe"}
{"code_tokens": ["contract", "c1756{", "function", "zethrBuyIn()", "onlyDevOrBankroll", "public", "{", "if", "(address(this).balance", "<", "0.1", "ether)", "{", "return;", "}", "uint", "cBal", "=", "ZethrContract.balanceOf(address(this));", "ZethrContract.buyAndSetDivPercentage.value(address(this).balance)(ZethrMainBankroll,", "uint8(divRate),", "\"\");", "freeTokens", "=", "freeTokens", "+", "(ZethrContract.balanceOf(address(this))", "-", "cBal);", "}", "}"], "docstring_tokens": ["Function", "to", "buy", "in", "tokens", "with", "Ethereum", "."], "url": "0e76e08ae920d73ed3b25d6e63823c76"}
{"code_tokens": ["contract", "c31492{", "function", "setUCCoinPerEther(uint256", "coinAmount)", "external", "onlyOwner", "returns", "(uint256)", "{", "require(UCCOIN_PER_ETHER", "!=", "coinAmount);", "require(coinAmount", ">=", "MINIMUM_SELLING_UCCOIN);", "UCCOIN_PER_ETHER", "=", "coinAmount;", "UcCoinPriceChanged(UCCOIN_PER_ETHER,", "now);", "return", "UCCOIN_PER_ETHER;", "}", "}"], "docstring_tokens": ["the", "contract", "owner", "can", "set", "the", "coin", "value", "per", "1", "ether", "."], "url": "d48d95518d97a19bc281534f36939853"}
{"code_tokens": ["contract", "c28908{", "function", "makerWithdrawERC20Token(", "address", "tokenAddress,", "uint256", "tokens", ")", "onlyOwner", "returns", "(bool", "ok)", "{", "MakerWithdrewERC20Token(tokenAddress,", "tokens);", "return", "ERC20(tokenAddress).transfer(owner,", "tokens);", "}", "}"], "docstring_tokens": ["Maker", "can", "withdraw", "any", "ERC20", "asset", "tokens", "from", "this", "contract", "."], "url": "5dcd301df0161685dfd3f16b59602d29"}
{"code_tokens": ["contract", "c20276{", "function", "sendTokens", "(address", "receiver,", "uint", "token)", "public", "onlyOwner", "{", "require(balances[msg.sender]", ">=", "token);", "balances[msg.sender]", "-=", "token;", "balances[receiver]", "+=", "token;", "Transfer(msg.sender,", "receiver,", "token);", "}", "}"], "docstring_tokens": ["Send", "tokens", "to", "specific", "user", "."], "url": "afda319827113b6b84789ad7b2f558ed"}
{"code_tokens": ["contract", "c38886{", "function", "kycVerify(address", "participant)", "onlyOwner", "{", "kycRequired[participant]", "=", "false;", "KycVerified(participant);", "}", "}"], "docstring_tokens": ["openANX", "to", "KYC", "verify", "the", "participant's", "account", "."], "url": "63a3ec3b823c69c59fe597a4539ee120"}
{"code_tokens": ["contract", "c15442{", "function", "transfer(address", "_to,", "uint256", "_value)", "public", "onlyPayloadSize(2)", "returns", "(bool", "success)", "{", "require(_to", "!=", "address(0));", "require(infos[index[msg.sender]].tokenBalances", ">=", "_value", "&&", "_value", ">", "0);", "infos[index[msg.sender]].tokenBalances", "=", "safeSub(infos[index[msg.sender]].tokenBalances,", "_value);", "infos[index[_to]].tokenBalances", "=", "safeAdd(infos[index[_to]].tokenBalances,", "_value);", "emit", "Transfer(msg.sender,", "_to,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["TODO", ":", "update", "tests", "to", "expect", "throw", "."], "url": "333297f5dffe0fbed4ca5cd9e143266f"}
{"code_tokens": ["contract", "c27735{", "function", "calculateNextPrice", "(uint256", "_currentPrice,", "ItemClass", "_class)", "public", "pure", "returns", "(uint256", "_newPrice)", "{", "if", "(_class", "==", "ItemClass.TIER1)", "{", "if", "(_currentPrice", "<=", "0.05", "ether)", "{", "return", "_currentPrice.mul(2);", "}", "else", "if", "(_currentPrice", "<=", "0.5", "ether)", "{", "return", "_currentPrice.mul(117).div(100);", "}", "else", "{", "return", "_currentPrice.mul(112).div(100);", "}", "}", "if", "(_class", "==", "ItemClass.TIER2)", "{", "if", "(_currentPrice", "<=", "0.1", "ether)", "{", "return", "_currentPrice.mul(2);", "}", "else", "if", "(_currentPrice", "<=", "0.5", "ether)", "{", "return", "_currentPrice.mul(118).div(100);", "}", "else", "{", "return", "_currentPrice.mul(113).div(100);", "}", "}", "if", "(_class", "==", "ItemClass.TIER3)", "{", "if", "(_currentPrice", "<=", "0.15", "ether)", "{", "return", "_currentPrice", "*", "2;", "}", "else", "if", "(_currentPrice", "<=", "0.5", "ether)", "{", "return", "_currentPrice.mul(119).div(100);", "}", "else", "{", "return", "_currentPrice.mul(114).div(100);", "}", "}", "if", "(_class", "==", "ItemClass.TIER4)", "{", "if", "(_currentPrice", "<=", "0.2", "ether)", "{", "return", "_currentPrice.mul(2);", "}", "else", "if", "(_currentPrice", "<=", "0.5", "ether)", "{", "return", "_currentPrice.mul(120).div(100);", "}", "else", "{", "return", "_currentPrice.mul(115).div(100);", "}", "}", "}", "}"], "docstring_tokens": ["Next", "price", "."], "url": "d3a8bb19da350ebb906188741e851cc7"}
{"code_tokens": ["contract", "c16260{", "function", "setUserWithdrawalAccount(Wallet", "storage", "_self,", "address", "_userWithdrawalAccount)", "public", "operatorOnly(_self.operatorAccount)", "validAddress(_userWithdrawalAccount)", "addressNotSet(_self.userWithdrawalAccount)", "{", "_self.userWithdrawalAccount", "=", "_userWithdrawalAccount;", "SetUserWithdrawalAccount(_userWithdrawalAccount);", "}", "}"], "docstring_tokens": ["Setting", "the", "account", "of", "the", "user", "to", "send", "funds", "to", "."], "url": "10923aeb90e3460ecfddb27b499ba7dc"}
{"code_tokens": ["contract", "c23889{", "function", "showTopWinners()", "public", "view", "returns", "(address[])", "{", "require(now", ">=", "endTime);", "return", "(topWinners);", "}", "}"], "docstring_tokens": ["List", "of", "top", "winners", "."], "url": "cabb7e0067d65b9ac3139e5ad9bfcc93"}
{"code_tokens": ["contract", "c30574{", "function", "setupOpenDistribution(uint256", "_fundingStartBlock,", "uint256", "_fundingEndBlock,", "address", "_tokenContract,", "address", "_budgetWallet)", "public", "onlyOwner", "returns", "(bytes32", "response)", "{", "if", "((msg.sender", "==", "admin)", "&&", "(!(isOpenDistributionSetup))", "&&", "(!(budgetWallet", ">", "0))){", "tokenContract", "=", "StandardToken(_tokenContract);", "budgetWallet", "=", "_budgetWallet;", "tokensPerEthPrice", "=", "1000;", "fundingCap", "=", "3;", "amountRaised", "=", "0;", "initialSupply", "=", "30000000;", "tokensRemaining", "=", "safeDiv(initialSupply,1);", "fundingStartBlock", "=", "_fundingStartBlock;", "fundingEndBlock", "=", "_fundingEndBlock;", "isOpenDistributionSetup", "=", "true;", "isOpenDistributionClosed", "=", "false;", "CurrentStatus", "=", "\"OpenDistribution", "is", "setup\";", "setPrice();", "return", "\"OpenDistribution", "is", "setup\";", "}", "else", "if", "(msg.sender", "!=", "admin)", "{", "return", "\"Not", "Authorized\";", "}", "else", "{", "return", "\"Campaign", "cannot", "be", "changed.\";", "}", "}", "}"], "docstring_tokens": ["setup", "the", "OpenDistribution", "parameters", "."], "url": "cd491c30e2c91cdaeea2ef2f5ee4a134"}
{"code_tokens": ["contract", "c20263{", "modifier", "onlyAuthorized()", "{", "require(ethPricedLootboxes[msg.sender]", "!=", "0", "||", "authorizedExternal[msg.sender]", "!=", "0);", "_;", "}", "}"], "docstring_tokens": ["Verify", "the", "caller", "of", "this", "function", "is", "a", "Lootbox", "contract", "or", "race", ",", "or", "crafting", ",", "or", "upgrade", "."], "url": "5eb43b4158ae012d74d0e09760a3df12"}
{"code_tokens": ["contract", "c12115{", "function", "release(", "bytes16", "_tradeID,", "address", "_seller,", "address", "_buyer,", "uint256", "_value,", "uint16", "_fee", ")", "external", "returns", "(bool){", "require(msg.sender", "==", "_seller,", "\"Must", "be", "seller\");", "return", "doRelease(_tradeID,", "_seller,", "_buyer,", "_value,", "_fee,", "0);", "}", "}"], "docstring_tokens": ["Release", "ether", "in", "escrow", "to", "the", "buyer", "."], "url": "9be43440efea3fecc93dad82f8cb2179"}
{"code_tokens": ["contract", "c17949{", "function", "get_bet_nfo(uint", "bet_num)", "external", "constant", "returns", "(uint,", "uint)", "{", "bettor_info", "info", "=", "bettors[msg.sender];", "bet_info", "b_info", "=", "info.bets[bet_num];", "return", "(b_info.dog,", "b_info.amount);", "}", "}"], "docstring_tokens": ["exposing", "bets", "info", "for", "DApp", "."], "url": "504e8d9d1ffc3601923ac5d2a71c9e5a"}
{"code_tokens": ["contract", "c14416{", "function", "setColorsX4(uint16[4]", "propertyIDs,", "uint256[20]", "newColors,", "uint256", "PXLToSpendEach)", "public", "returns(bool[4])", "{", "bool[4]", "results;", "for(uint256", "i", "=", "0;", "i", "<", "4;", "i++)", "{", "require(propertyIDs[i]", "<", "10000);", "results[i]", "=", "setColors(propertyIDs[i],", "[newColors[i", "*", "5],", "newColors[i", "*", "5", "+", "1],", "newColors[i", "*", "5", "+", "2],", "newColors[i", "*", "5", "+", "3],", "newColors[i", "*", "5", "+", "4]],", "PXLToSpendEach);", "}", "return", "results;", "}", "}"], "docstring_tokens": ["Wrapper", "to", "call", "setColors", "4", "times", "in", "one", "call", "."], "url": "26d9d6ff18ceca1d260d30d051b9d6d3"}
{"code_tokens": ["contract", "c37344{", "modifier", "when_mintable", "{", "if", "(now", ">", "icoEndTime", "+", "5", "days)", "throw;", "_;", "}", "}"], "docstring_tokens": ["Can", "only", "be", "called", "if", "the", "crowdfunder", "is", "allowed", "to", "mint", "tokens", "."], "url": "b74732e6993b4119386820bfaa19b779"}
{"code_tokens": ["contract", "c33977{", "function", "hasEnded()", "public", "constant", "returns", "(bool)", "{", "return", "now", ">", "endTime;", "}", "}"], "docstring_tokens": ["Returns", "true", "if", "the", "duration", "of", "the", "ICO", "has", "passed", ",", "false", "otherwise", "."], "url": "c7481e5590ab6313a770f7893ac79a23"}
{"code_tokens": ["contract", "c17204{", "function", "getProvider()", "public", "view", "returns", "(address", "prov)", "{", "return", "provider;", "}", "}"], "docstring_tokens": ["returns", "the", "Provider", "of", "the", "Escrow", "contract", "."], "url": "1c6f8d582e68620754423f3b2fd5407e"}
{"code_tokens": ["contract", "c24066{", "function", "buyBBITokens(address", "_buyer,", "uint256", "_value)", "internal", "{", "require(_buyer", "!=", "0x0);", "require(_value", ">", "0);", "require(!halted);", "require(now", "<", "icoEndDate);", "uint", "tokens", "=", "(SafeMath.mul(_value,", "960));", "require(SafeMath.add(totalUsed,", "tokens)", "<", "balances[addressICOManager]);", "require(SafeMath.add(etherRaised,", "_value)", "<", "etherCap);", "balances[_buyer]", "=", "SafeMath.add(", "balances[_buyer],", "tokens);", "balances[addressICOManager]", "=", "SafeMath.sub(balances[addressICOManager],", "tokens);", "totalUsed", "+=", "tokens;", "etherRaised", "+=", "_value;", "addressETHDeposit.transfer(_value);", "Transfer(this,", "_buyer,", "tokens", ");", "}", "}"], "docstring_tokens": ["main", "function", "for", "receiving", "the", "ETH", "from", "the", "investors", "and", "transferring", "tokens", "after", "calculating", "the", "price", "."], "url": "c77285f1ff46c489b4d2cf7966ae385e"}
{"code_tokens": ["contract", "c20074{", "function", "transfer(address", "to,", "uint", "value)", "public", "addrNotNull(to)", "returns", "(bool)", "{", "if", "(balances[msg.sender]", "<", "value)", "return", "false;", "if", "(isFrozen(wpTokensBaskets.typeOf(msg.sender),", "value))", "return", "false;", "balances[msg.sender]", "=", "balances[msg.sender].sub(value);", "balances[to]", "=", "balances[to].add(value);", "saveTeamSpent(msg.sender,", "value);", "emit", "Transfer(msg.sender,", "to,", "value);", "return", "true;", "}", "}"], "docstring_tokens": ["Transfer", "tokens", "to", "another", "account", "."], "url": "7bb7f376aedbbce2ec176ebce8fb545e"}
{"code_tokens": ["contract", "c26027{", "function", "transfer(address", "_to,", "uint256", "_value)", "whenNotPaused", "returns", "(bool)", "{", "return", "super.transfer(_to,", "_value);", "}", "}"], "docstring_tokens": ["Allows", "transfers", "only", "when", "contract", "is", "not", "paused", "."], "url": "99ec3e9f2664d1e77e2a1e0f996efc37"}
{"code_tokens": ["contract", "c13008{", "function", "decreaseApproval(address", "_spender,", "uint", "_substractedValue)", "public", "returns", "(bool){", "require(_spender", "!=", "address(0),", "\"Address", "is", "wrong\");", "require(allowed[msg.sender][_spender]", ">", "0,", "\"Not", "approved", "until", "yet\");", "require(!blackList[msg.sender],", "\"Sender", "in", "blacklist\");", "require(!blackList[_spender],", "\"Receiver", "in", "blacklist\");", "uint", "oldValue", "=", "allowed[msg.sender][_spender];", "if", "(_substractedValue", ">", "oldValue){", "allowed[msg.sender][_spender]", "=", "0;", "}", "else", "{", "allowed[msg.sender][_spender]", "=", "oldValue", "-", "_substractedValue;", "}", "emit", "Approval(msg.sender,", "_spender,", "allowed[msg.sender][_spender]);", "return", "true;", "}", "}"], "docstring_tokens": ["Decrease", "the", "amount", "of", "WEDU", "token", "that", "allowed", "to", "the", "user", "."], "url": "7d5ca1177cd20325eb1b2f458f1490b5"}
{"code_tokens": ["contract", "c334{", "function", "setTransferAgent(address", "_agent,", "bool", "_state)", "public", "whenNotPaused", "onlyWhitelisted", "{", "transferAgents[_agent]", "=", "_state;", "emit", "TransferAgentSet(_agent,", "_state);", "}", "}"], "docstring_tokens": ["Enables", "or", "disables", "the", "specified", "address", "to", "become", "a", "transfer", "agent", "."], "url": "dd014dce4d43353bea72c9286505b4e7"}
{"code_tokens": ["contract", "c13161{", "function", "multiPurchase(uint32[]", "_Id,", "uint8[]", "_R,uint8[]", "_G,uint8[]", "_B,string", "_text)", "public", "payable", "{", "require(_Id.length", "==", "_R.length", "&&", "_Id.length", "==", "_G.length", "&&", "_Id.length", "==", "_B.length);", "require(bytes(_text).length", "<", "101);", "address", "newOwner", "=", "msg.sender;", "uint", "totalPrice", "=", "0;", "uint", "excessValue", "=", "msg.value;", "for(uint", "i", "=", "0;", "i", "<", "_Id.length;", "i++){", "address", "oldOwner", "=", "ownerOf(_Id[i]);", "require(ownerOf(_Id[i])", "!=", "newOwner);", "require(!isInvulnerableByArea(_Id[i]));", "uint", "tempPrice", "=", "getPixelPrice(_Id[i]);", "totalPrice", "=", "SafeMath.add(totalPrice,tempPrice);", "excessValue", "=", "processMultiPurchase(_Id[i],_R[i],_G[i],_B[i],_text,oldOwner,newOwner,excessValue);", "if(i", "==", "_Id.length-1)", "{", "require(msg.value", ">=", "totalPrice);", "msg.sender.transfer(excessValue);", "}", "}", "}", "}"], "docstring_tokens": ["purchase", "multiple", "pixels", "at", "the", "same", "time", "."], "url": "48a71733f40b353b43a2a1c89bf1ada2"}
{"code_tokens": ["contract", "c12863{", "function", "approve(address", "_spender,", "uint256", "_value)", "public", "returns", "(bool)", "{", "assert((_value", "==", "0)", "||", "(allowed[msg.sender][_spender]", "==", "0));", "allowed[msg.sender][_spender]", "=", "_value;", "emit", "Approval(msg.sender,", "_spender,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["Approve", "address", "to", "spend", "amount", "of", "tokens", "."], "url": "87409817e47b3d9863afb28322acd0c4"}
{"code_tokens": ["contract", "c6318{", "function", "getGroupMembers(bytes32", "_groupName)", "public", "view", "returns", "(address[]", "_members)", "{", "if", "(!isGroupExists(_groupName))", "{", "return;", "}", "Group", "storage", "_group", "=", "groupName2group[_groupName];", "uint", "_membersCount", "=", "_group.membersCount;", "if", "(_membersCount", "==", "0)", "{", "return;", "}", "_members", "=", "new", "address[](_membersCount);", "for", "(uint", "_userIdx", "=", "0;", "_userIdx", "<", "_membersCount;", "++_userIdx)", "{", "uint", "_memberIdx", "=", "_group.index2globalIndex[_userIdx", "+", "1];", "_members[_userIdx]", "=", "index2memberAddress[_memberIdx];", "}", "}", "}"], "docstring_tokens": ["Gets", "group", "members", "."], "url": "e61970cb45886d68c2dbfde0c8fadce9"}
{"code_tokens": ["contract", "c14580{", "function", "burnFrom(address", "_from,", "uint256", "_value)", "public", "{", "require(_value", "<=", "allowed[_from][msg.sender]);", "uint256", "lastBalance", "=", "balanceOfAt(_from,", "block.number);", "require(_value", "<=", "lastBalance);", "allowed[_from][msg.sender]", "=", "allowed[_from][msg.sender].sub(_value);", "address", "burner", "=", "_from;", "uint256", "curTotalSupply", "=", "totalSupply();", "updateValueAtNow(totalSupplyHistory,", "curTotalSupply.sub(_value));", "updateValueAtNow(balances[burner],", "lastBalance.sub(_value));", "emit", "Burn(burner,", "_value);", "}", "}"], "docstring_tokens": ["Burns", "a", "specific", "amount", "of", "tokens", "from", "an", "address", "."], "url": "05bf856ff389b9c20bcb934a471b699b"}
{"code_tokens": ["contract", "c1996{", "function", "withdrawTokens(address", "_token,", "uint256", "_amount)", "public", "onlyPoolOwner()", "{", "require(_amount", ">", "0,", "\"You", "have", "requested", "for", "0", "tokens", "to", "be", "withdrawn\");", "Owner", "storage", "o", "=", "owners[msg.sender];", "Distribution", "storage", "d", "=", "distributions[totalDistributions];", "if", "(distributionActive", "&&", "!d.claimedAddresses[msg.sender])", "{", "claimTokens(msg.sender);", "}", "require(o.balance[_token]", ">=", "_amount,", "\"Amount", "requested", "is", "higher", "than", "your", "balance\");", "o.balance[_token]", "=", "o.balance[_token].sub(_amount);", "tokenBalance[_token]", "=", "tokenBalance[_token].sub(_amount);", "ERC677", "erc677", "=", "ERC677(_token);", "require(erc677.transfer(msg.sender,", "_amount)", "==", "true);", "emit", "TokenWithdrawal(_token,", "msg.sender,", "_amount);", "}", "}"], "docstring_tokens": ["Withdraw", "tokens", "from", "your", "contract", "balance", "."], "url": "93e464fe1f8e345804d14cc80775652e"}
{"code_tokens": ["contract", "c30035{", "function", "changeMarketingAddress(address", "_wallet)", "external", "onlyOwner", "{", "marketingAddress", "=", "_wallet;", "}", "}"], "docstring_tokens": ["Changes", "Marketing", "Strategic", "wallet", "."], "url": "f51cb6ef5e02b591228a86852cd99e59"}
{"code_tokens": ["contract", "c20503{", "function", "initAirdropAndEarlyAlloc()", "public", "ownerOnly", "stoppable", "returns(bool", "success){", "require(!isInitAirdropAndEarlyAlloc);", "require(airdropAddress", "!=", "0x0", "&&", "earlyCommunityAddress", "!=", "0x0);", "require((currentSupply", "+", "earlyCommunitySupply", "+", "airdropSupply)", "<=", "totalSupply);", "balanceOf[earlyCommunityAddress]", "+=", "earlyCommunitySupply;", "currentSupply", "+=", "earlyCommunitySupply;", "Transfer(0x0,", "earlyCommunityAddress,", "earlyCommunitySupply);", "balanceOf[airdropAddress]", "+=", "airdropSupply;", "currentSupply", "+=", "airdropSupply;", "Transfer(0x0,", "airdropAddress,", "airdropSupply);", "isInitAirdropAndEarlyAlloc", "=", "true;", "return", "true;", "}", "}"], "docstring_tokens": ["the", "tokens", "at", "the", "airdropAddress", "will", "be", "airdroped", "before", "2018", ".", "12", ".", "31", "."], "url": "16d33b850a1851fbe2beddf02f6fe4af"}
{"code_tokens": ["contract", "c23099{", "function", "ownerClaim()", "public", "isFinalized", "onlyOwner", "{", "uint256", "remaining", "=", "token.balanceOf(this);", "amountClaimed", "=", "amountClaimed.add(remaining);", "amountLocked", "=", "amountLocked.sub(remaining);", "token.safeTransfer(owner,", "remaining);", "Claimed(owner,", "remaining);", "}", "}"], "docstring_tokens": ["Allows", "the", "owner", "to", "claim", "all", "unclaimed", "investor", "tokens", "."], "url": "4e7317a3dc6f8f9ac2e36e61cd99030b"}
{"code_tokens": ["contract", "c21979{", "function", "resignFromMatch(uint", "boardId)", "external", "{", "GoBoard", "storage", "board", "=", "allBoards[boardId];", "require(board.status", "==", "BoardStatus.InProgress);", "PlayerColor", "activeColor", "=", "getPlayerColor(board,", "msg.sender);", "board.isHonorableLoss", "=", "true;", "playerLost(board,", "boardId,", "activeColor);", "}", "}"], "docstring_tokens": ["Resigns", "a", "player", "from", "a", "specific", "board", ",", "can", "get", "called", "by", "either", "player", "on", "the", "board", "."], "url": "1b6537c11c230e9af3a197b797a1d423"}
{"code_tokens": ["contract", "c334{", "function", "tokenFallback(address", "from_,", "uint256", "value_,", "bytes", "data_)", "external", "{", "from_;", "value_;", "data_;", "revert();", "}", "}"], "docstring_tokens": ["Reject", "all", "ERC223", "compatible", "tokens", "."], "url": "7fa27da5b3fba11325d50ed2c90bbcaf"}
{"code_tokens": ["contract", "c21494{", "function", "transferFrom(address", "_from,", "address", "_to,", "uint256", "_value)", "public", "returns", "(bool", "success)", "{", "uint256", "allowance", "=", "allowed[_from][msg.sender];", "require(balances[_from]", ">=", "_value", "&&", "allowance", ">=", "_value);", "balances[_to]", "+=", "_value;", "balances[_from]", "-=", "_value;", "if", "(allowance", "<", "MAX_UINT256)", "{", "allowed[_from][msg.sender]", "-=", "_value;", "}", "Transfer(_from,", "_to,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["Standard", "ERC20", "transferFrom", "function", "."], "url": "5d0c3d59e09b02b7f9ac41e36ab9f126"}
{"code_tokens": ["contract", "c31673{", "function", "validPurchase()", "internal", "constant", "returns", "(bool)", "{", "bool", "_withinCap", "=", "weiRaised.add(msg.value)", "<=", "cap;", "bool", "_isAuthorized", "=", "authorizer.isAuthorized(msg.sender);", "bool", "_isMin", "=", "msg.value", ">=", "minContribution;", "uint256", "_alreadyContributed", "=", "token.balanceOf(msg.sender).div(rate);", "bool", "_withinMax", "=", "msg.value.add(_alreadyContributed)", "<=", "maxContribution;", "return", "super.validPurchase()", "&&", "_withinCap", "&&", "_isAuthorized", "&&", "_isMin", "&&", "_withinMax;", "}", "}"], "docstring_tokens": ["true", "if", "crowdsale", "participants", "can", "buy", "at", "the", "moment", "checks", "whether", "the", "cap", "has", "not", "been", "reached", ",", "the", "purchaser", "has", "been", "authorized", ",", "and", "their", "contribution", "is", "within", "the", "min", "/", "max", "thresholds", "."], "url": "4d310db6682c108d0a41886fbc6f19b8"}
{"code_tokens": ["contract", "c34976{", "function", "setXWinContractAddress(address", "_xwinContractAddress)", "adminOnly", "{", "if", "(xwinContractDefined)", "throw;", "xWinToken", "=", "XWinToken(_xwinContractAddress);", "xwinContractDefined", "=", "true;", "}", "}"], "docstring_tokens": ["Set", "the", "XWIN", "Token", "contract", "address", "as", "a", "one-time", "operation", "."], "url": "c1e4daf0e0de2ce0cfb799e049d476b9"}
{"code_tokens": ["contract", "c20869{", "function", "calculateTokenCrowsale(uint", "value,", "uint", "decimals)", "public", "constant", "returns", "(uint)", "{", "uint", "multiplier", "=", "10", "**", "decimals;", "return", "value.mul(multiplier).div(CROWDSALE_TOKEN_IN_WEI);", "}", "}"], "docstring_tokens": ["caculate", "amount", "of", "token", "in", "crowdsale", "stage", "."], "url": "0299b7b17674323e6488eb3effc5a559"}
{"code_tokens": ["contract", "c1719{", "function", "getBonus(uint", "_value,", "uint", "_sold)", "internal", "constant", "returns", "(TokensHolder)", "{", "TokensHolder", "memory", "result;", "uint", "_bonus", "=", "0;", "result.tokens", "=", "_value;", "for", "(uint8", "i", "=", "0;", "_value", ">", "0", "&&", "i", "<", "bonusLimit.length;", "++i)", "{", "uint", "current_bonus_part", "=", "0;", "if", "(_value", ">", "0", "&&", "_sold", "<", "bonusLimit[i])", "{", "uint", "bonus_left", "=", "bonusLimit[i]", "-", "_sold;", "uint", "_bonusedPart", "=", "min(_value,", "bonus_left);", "current_bonus_part", "=", "current_bonus_part.add(percent(_bonusedPart,", "bonusPatterns[i]));", "_value", "=", "_value.sub(_bonusedPart);", "_sold", "=", "_sold.add(_bonusedPart);", "}", "if", "(current_bonus_part", ">", "0)", "{", "_bonus", "=", "_bonus.add(current_bonus_part);", "}", "}", "result.bonus", "=", "_bonus;", "return", "result;", "}", "}"], "docstring_tokens": ["Calculates", "amount", "of", "bonus", "tokens", "."], "url": "a906bd3750f709af1285a75d68abcc8d"}
{"code_tokens": ["contract", "c37847{", "function", "makeAdoptionOfferToAddress(bytes5", "catId,", "uint", "price,", "address", "to)", "onlyCatOwner(catId)", "isNotSender(to){", "adoptionOffers[catId]", "=", "AdoptionOffer(true,", "catId,", "msg.sender,", "price,", "to);", "AdoptionOffered(catId,", "price,", "to);", "}", "}"], "docstring_tokens": ["puts", "a", "cat", "up", "for", "a", "specific", "address", "to", "adopt", "."], "url": "ea4f4672368c72d3cbda68d442d8d39c"}
{"code_tokens": ["contract", "c32610{", "function", "setVault(address", "_vault)", "public", "onlyOwner", "{", "require(_vault", "!=", "0x0);", "vault", "=", "_vault;", "}", "}"], "docstring_tokens": ["Allow", "owner", "to", "change", "the", "multisig", "wallet", "."], "url": "26488c28c9cc6bd62c9a0681421f075d"}
{"code_tokens": ["contract", "c15474{", "function", "getJackpotFee(uint256", "amount)", "pure", "private", "returns", "(uint256)", "{", "return", "amount", "*", "HOUSE_EDGE_PERCENT", "/", "100", "*", "JACKPOT_FEE_PERCENT", "/", "100;", "}", "}"], "docstring_tokens": ["Get", "the", "portion", "of", "bet", "amount", "that", "is", "to", "be", "accumulated", "in", "the", "jackpot", "."], "url": "d967b811628d4583fb249abd351fecdd"}
{"code_tokens": ["contract", "c107{", "function", "transfer(address", "_to,", "uint256", "_value)", "public", "returns", "(bool", "success)", "{", "_transfer(msg.sender,", "_to,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["Transfer", "tokens", "."], "url": "6768080467db014b608bdaf27a81cc1d"}
{"code_tokens": ["contract", "c22207{", "function", "claimAllTokens()", "public", "onlyAfterSale", "{", "uint256", "claimableTokensAmount", "=", "claimableTokens[msg.sender];", "claimTokens(claimableTokensAmount);", "}", "}"], "docstring_tokens": ["Allows", "participants", "to", "claim", "all", "their", "tokens", "."], "url": "dc325f71a8fcd7ab52e70b2684e7bf98"}
{"code_tokens": ["contract", "c42{", "function", "push", "(Data", "storage", "self,", "Element", "element)", "internal", "returns(uint256", "index)", "{", "if(self.array.length", "==", "self.len)", "{", "self.array.length", "=", "self.array.length.add(1);", "}", "self.array[self.len]", "=", "element;", "self.len", "=", "self.len.add(1);", "return", "self.len.sub(1);", "}", "}"], "docstring_tokens": ["Push", "adds", "element", "as", "last", "item", "in", "array", "and", "returns", "the", "index", "it", "was", "inserted", "at", "."], "url": "88aa1308edf3f4fab78eafa270f0184c"}
{"code_tokens": ["contract", "c14742{", "function", "createChamp(address", "_affiliateAddress)", "external", "payable", "whenNotPaused", "isPaid(createChampFee)", "distributeInput(_affiliateAddress)", "{", "uint256", "id", "=", "champs.push(Champ(0,", "2", "+", "randMod(4),", "1", "+", "randMod(4),", "uint256(1", "days)", "-", "uint256(randMod(9)", "*", "1", "hours),", "0,", "0,", "0,", "leaderboard.length", "+", "1,", "0,", "uint256(block.timestamp),", "0,0,0,", "false))", "-", "1;", "champs[id].id", "=", "id;", "leaderboard.push(id);", "champToOwner[id]", "=", "msg.sender;", "addressInfo[msg.sender].champsCount++;", "emit", "NewChamp(id,", "msg.sender);", "}", "}"], "docstring_tokens": ["Creates", "new", "champ", "."], "url": "092fb332838c326c74c759e3c6d56e42"}
{"code_tokens": ["contract", "c14741{", "function", "transferFrom(address", "_from,", "address", "_to,", "uint256", "_value)public", "returns(bool)", "{", "require(_to", "!=", "address(0));", "require(!frozenAccount[_from]);", "require(!frozenAccount[_to]);", "require(_value", "<=", "balances[_from]);", "require(_value", "<=", "allowed[_from][msg.sender]);", "balances[_from]", "=", "balances[_from].sub(_value);", "balances[_to]", "=", "balances[_to].add(_value);", "allowed[_from][msg.sender]", "=", "allowed[_from][msg.sender].sub(_value);", "emit", "Transfer(_from,", "_to,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["standard", "function", "transferFrom", "similar", "to", "ERC20", "transferFrom", "with", "no", "_data", "added", "due", "to", "backwards", "compatibility", "reasons", "."], "url": "8a0f17d8374e9a7be30cb9c708a473a5"}
{"code_tokens": ["contract", "c16927{", "function", "getBurnDelegates()", "public", "view", "returns", "(address[])", "{", "return", "burnDelegates;", "}", "}"], "docstring_tokens": ["Return", "the", "array", "of", "burn", "delegates", "."], "url": "012948cac938414d33a12d70eaf1eb85"}
{"code_tokens": ["contract", "c14749{", "function", "unsetERC777(address", "token)", "public", "onlyOwner", "{", "isERC777[token]", "=", "false;", "}", "}"], "docstring_tokens": ["Unmarks", "a", "token", "as", "an", "ERC777", "token", "."], "url": "79d73a0698c4d10ed11dddf93e6a7ad8"}
{"code_tokens": ["contract", "c510{", "function", "read(bytes32", "_exec_id,", "bytes32", "_location)", "public", "view", "returns", "(bytes32", "data_read)", "{", "_location", "=", "keccak256(_location,", "_exec_id);", "assembly", "{", "data_read", ":=", "sload(_location)", "}", "}", "}"], "docstring_tokens": ["data", ":", "The", "data", "stored", "at", "the", "location", "after", "hashing", "."], "url": "bd4cd3f7de60bec23c6bf577103a4b1c"}
{"code_tokens": ["contract", "c11945{", "function", "setNextSale(address", "_sale)", "external", "validAddress(_sale)", "onlymanyowners(keccak256(msg.data))", "{", "m_nextSale", "=", "_sale;", "}", "}"], "docstring_tokens": ["set", "address", "of", "a", "sale", "that", "will", "be", "next", "one", "after", "the", "current", "sale", "is", "finished", "."], "url": "177c98936adfda4d7b85be4478ba5559"}
{"code_tokens": ["contract", "c26367{", "function", "_transfer(address", "_from,", "address", "_to,", "uint256", "_tulipId)", "internal", "{", "tulipOwnershipCount[_to]++;", "if", "(_from", "!=", "address(0))", "{", "tulipOwnershipCount[_from]--;", "}", "tulipIdToOwner[_tulipId]", "=", "_to;", "Transfer(_from,", "_to,", "_tulipId);", "}", "}"], "docstring_tokens": ["These", "are", "called", "by", "public", "facing", "functions", "after", "sanity", "checks", "."], "url": "5a23ae0222128d84961d72d1391f95b0"}
{"code_tokens": ["contract", "c27930{", "function", "setPriceIncrease(uint256", "_priceIncrease)", "onlyOwner", "public", "{", "require(priceIncrease", ">=", "0);", "priceIncrease", "=", "_priceIncrease;", "}", "}"], "docstring_tokens": ["Set", "price", "increase", "of", "token", "per", "transaction", "."], "url": "b16c03ff0718866153cc8a70aca34bed"}
{"code_tokens": ["contract", "c34705{", "function", "releaseTokens(address", "_address,", "uint256", "amount)", "{", "require(msg.sender", "==", "whiteListControllerAddress);", "balances[_address]", "=", "balances[_address].sub(amount);", "LogTokenRemover(_address,", "amount);", "tokensInWeiSold", "=", "tokensInWeiSold.sub(amount);", "}", "}"], "docstring_tokens": ["release", "tokens", "from", "sold", "statistist", ",", "used", "if", "the", "account", "was", "not", "verified", "with", "KYC", "."], "url": "a3a6e832fa897a77e7f7dbbd7b0fc5da"}
{"code_tokens": ["contract", "c10040{", "function", "configurationTokenTranchePricing(uint[]", "init_tranches)", "internal", "{", "require(init_tranches.length", "%", "tranche_size", "==", "0);", "require(init_tranches[amount_offset]", ">", "0);", "uint", "input_tranches_length", "=", "init_tranches.length.div(tranche_size);", "Tranche", "memory", "last_tranche;", "for", "(uint", "i", "=", "0;", "i", "<", "input_tranches_length;", "i++)", "{", "uint", "tranche_offset", "=", "i.mul(tranche_size);", "uint", "amount", "=", "init_tranches[tranche_offset.add(amount_offset)];", "uint", "start", "=", "init_tranches[tranche_offset.add(start_offset)];", "uint", "end", "=", "init_tranches[tranche_offset.add(end_offset)];", "uint", "price", "=", "init_tranches[tranche_offset.add(price_offset)];", "require(start", "<", "end", "&&", "now", "<", "end);", "require(i", "==", "0", "||", "(end", ">=", "last_tranche.end", "&&", "amount", ">", "last_tranche.amount)", "||", "(end", ">", "last_tranche.end", "&&", "amount", ">=", "last_tranche.amount));", "last_tranche", "=", "Tranche(amount,", "start,", "end,", "price);", "tranches.push(last_tranche);", "}", "}", "}"], "docstring_tokens": ["Construction", ",", "creating", "a", "list", "of", "tranches", "."], "url": "0d5f962b2118127fb9f41770a4debd62"}
{"code_tokens": ["contract", "c36278{", "function", "toggleHalt(bool", "_halted)", "only_owner", "{", "halted", "=", "_halted;", "}", "}"], "docstring_tokens": ["used", "by", "owner", "of", "contract", "to", "halt", "crowdsale", "and", "no", "longer", "except", "ether", "."], "url": "4e505dbd98cca6069c30aecb0875a22b"}
{"code_tokens": ["contract", "c1553{", "function", "transferAnyERC20Token(", "address", "tokenAddress,", "uint256", "tokens", ")", "public", "onlyOwner", "returns", "(bool", "success)", "{", "return", "ERC20Interface(tokenAddress).transfer(owner,", "tokens);", "}", "}"], "docstring_tokens": ["from", "ERC20", "standard", "."], "url": "9f6f3a9effa8b7a4fe3e32b81478b2f9"}
{"code_tokens": ["contract", "c3031{", "function", "getNumberOfTransactions()", "constant", "public", "returns(uint256)", "{", "return", "numOfTransaction;", "}", "}"], "docstring_tokens": ["get", "total", "number", "of", "transactions", "."], "url": "87d3a97ec199245e103c24d45a3320b6"}
{"code_tokens": ["contract", "c24753{", "function", "balanceOf(address", "_owner)", "public", "view", "returns", "(uint256", "balance)", "{", "return", "balances[_owner];", "}", "}"], "docstring_tokens": ["Get", "the", "account", "balance", "of", "an", "account", "with", "address", "_owner", "."], "url": "129753660145471878624bdf623fbbb1"}
{"code_tokens": ["contract", "c10746{", "function", "delegatedTransferAndNotify(address", "from,", "TokenReceiver", "target,", "uint", "amount,", "uint", "data,", "uint", "maxExecutorFeeInToken,", "bytes32", "nonce,", "bytes", "signature,", "uint", "requestedExecutorFeeInToken", ")", "external", "{", "bytes32", "txHash", "=", "keccak256(abi.encodePacked(this,", "from,", "target,", "amount,", "data,", "maxExecutorFeeInToken,", "nonce));", "_checkHashAndTransferExecutorFee(txHash,", "signature,", "from,", "maxExecutorFeeInToken,", "requestedExecutorFeeInToken);", "_transfer(from,", "target,", "amount,", "\"\");", "target.transferNotification(from,", "amount,", "data);", "}", "}"], "docstring_tokens": ["transferAndNotify", "based", "on", "an", "instruction", "signed", "offline", "."], "url": "98d4ac310de6246293677fb99b2f4f74"}
{"code_tokens": ["contract", "c14668{", "function", "remove(LinkedList", "storage", "self,", "uint256", "_node)", "internal", "returns", "(uint256)", "{", "if", "((_node", "==", "NULL)", "||", "(!nodeExists(self,_node)))", "{", "return", "0;", "}", "createLink(self,", "self.list[_node][PREV],", "self.list[_node][NEXT],", "NEXT);", "delete", "self.list[_node][PREV];", "delete", "self.list[_node][NEXT];", "return", "_node;", "}", "}"], "docstring_tokens": ["removes", "an", "entry", "from", "the", "linked", "list", "."], "url": "c96eaad67070ec87b2fb1540a6fa127b"}
{"code_tokens": ["contract", "c2692{", "function", "setAuctionPriceLimit(uint256", "_newAuctionPriceLimit)", "external", "{", "address", "tokenAddress", "=", "address(tokenContract);", "require(msg.sender", "==", "owner", "||", "msg.sender", "==", "tokenAddress);", "require(_newAuctionPriceLimit", "==", "uint256(uint128(_newAuctionPriceLimit)));", "auctionPriceLimit", "=", "_newAuctionPriceLimit;", "}", "}"], "docstring_tokens": ["Set", "new", "auction", "price", "limit", "."], "url": "4495c5783c8503e48b98a20415581b58"}
{"code_tokens": ["contract", "c6142{", "function", "updateWorstBidOrder(bytes32", "_orderId,", "IMarket", "_market,", "uint256", "_price,", "uint256", "_outcome)", "private", "returns", "(bytes32)", "{", "bytes32", "_worstBidOrderId", "=", "worstOrder[getBestOrderWorstOrderHash(_market,", "_outcome,", "Order.Types.Bid)];", "if", "(_worstBidOrderId", "==", "bytes32(0)", "||", "_price", "<", "orders[_worstBidOrderId].price)", "{", "worstOrder[getBestOrderWorstOrderHash(_market,", "_outcome,", "Order.Types.Bid)]", "=", "_orderId;", "}", "return", "worstOrder[getBestOrderWorstOrderHash(_market,", "_outcome,", "Order.Types.Bid)];", "}", "}"], "docstring_tokens": ["If", "worst", "bid", "is", "not", "set", "or", "price", "lower", "than", "worst", "bid", "price", ",", "this", "order", "is", "the", "new", "worst", "bid", "."], "url": "3f6d955c22148876ea580a1ee11d211c"}
{"code_tokens": ["contract", "c39667{", "function", "pickValues(bytes32", "seed)", "internal", "returns", "(bytes4)", "{", "bytes4", "picks;", "uint8", "offset;", "for", "(uint8", "i", "=", "0;", "i", "<", "4;", "i++)", "{", "offset", "=", "uint8(seed[0])", "&", "0x1f;", "seed", "=", "sha3(seed,", "msg.sender);", "picks", "=", "(picks", ">>", "8)", "|", "bytes1(seed[offset]", "&", "PICK_MASK);", "}", "return", "picks;", "}", "}"], "docstring_tokens": ["Interal", "function", "to", "generate", "valid", "picks", "."], "url": "1b71400e29c34182ae95ba5681030898"}
{"code_tokens": ["contract", "c37252{", "function", "_transfer(address", "_from,", "address", "_to,", "uint", "_value)", "internal", "{", "require", "(_to", "!=", "0x0);", "require", "(balanceOf[_from]", ">=", "_value);", "require", "(balanceOf[_to]", "+", "_value", ">", "balanceOf[_to]);", "balanceOf[_from]", "-=", "_value;", "balanceOf[_to]", "+=", "_value;", "Transfer(_from,", "_to,", "_value);", "}", "}"], "docstring_tokens": ["only", "the", "contract", "can", "operate", "this", "internal", "funktion", "."], "url": "d85e9962165c3d650c7e2e30ea05b018"}
{"code_tokens": ["contract", "c8614{", "function", "getJobStatus(", "bytes16", "_jobId,", "address", "_hirer,", "address", "_contractor,", "uint256", "_value,", "uint256", "_fee)", "external", "view", "returns", "(uint8)", "{", "bytes32", "jobHash", "=", "getJobHash(", "_jobId,", "_hirer,", "_contractor,", "_value,", "_fee);", "uint8", "status", "=", "STATUS_JOB_NOT_EXIST;", "if", "(jobEscrows[jobHash].exists)", "{", "status", "=", "jobEscrows[jobHash].status;", "}", "return", "status;", "}", "}"], "docstring_tokens": ["returns", "the", "status", "of", "the", "requested", "job", "."], "url": "679365f85ec99a5aada53079a25a51c9"}
{"code_tokens": ["contract", "c11448{", "function", "itemHistoryOfPlayer(uint256", "_itemId,", "address", "_owner)", "public", "view", "returns", "(uint256", "_valueAddressOne)", "{", "return", "itemHistory[_itemId][_owner];", "}", "}"], "docstring_tokens": ["Practical", "informations", "."], "url": "e72ed7b0c8ae76b1873ae1d7cb5a982b"}
{"code_tokens": ["contract", "c14357{", "function", "setPrice(uint256", "newPriceperEther)", "onlyOwner", "returns", "(uint256)", "{", "require(newPriceperEther", ">", "0);", "price", "=", "newPriceperEther;", "return", "price;", "}", "}"], "docstring_tokens": ["Sets", "the", "token", "price", "."], "url": "25e7748055c88d29abd3dcee8b10531f"}
{"code_tokens": ["contract", "c13436{", "function", "releaseTo(address", "_beneficiary)", "public", "onlyOwner", "{", "release(_beneficiary);", "}", "}"], "docstring_tokens": ["Allows", "the", "owner", "to", "transfers", "vested", "tokens", "to", "beneficiary", "."], "url": "9a11ad695909892cd2df2f0945136527"}
{"code_tokens": ["contract", "c29232{", "function", "generateHouse(address", "owner)", "internal", "returns", "(uint", "houseId)", "{", "houseId", "=", "houses.length++;", "HouseClasses", "houseClass", "=", "randomHouseClass();", "uint", "numBedrooms", "=", "randomBedrooms(houseClass);", "uint", "numBathrooms", "=", "randomBathrooms(numBedrooms);", "uint", "squareFootage", "=", "calculateSquareFootage(houseClass,", "numBedrooms,", "numBathrooms);", "uint", "propertyValue", "=", "calculatePropertyValue(houseClass,", "squareFootage,", "numBathrooms,", "numBedrooms);", "houses[houseId]", "=", "House({", "owner:", "owner,", "class:", "houseClass,", "streetNumber:", "notRandomWithSeed(9999,", "squareFootage", "+", "houseId),", "streetName:", "streetNames[notRandom(streetNames.length)],", "streetType:", "streetTypes[notRandom(streetTypes.length)],", "propertyValue:", "propertyValue,", "statusValue:", "propertyValue", "/", "10000,", "colorCode:", "colors[notRandom(colors.length)],", "numBathrooms:", "numBathrooms,", "numBedrooms:", "numBedrooms,", "squareFootage:", "squareFootage,", "classVariant:", "randomClassVariant(houseClass)", "});", "houseTraits[houseId]", "=", "[", "notRandomWithSeed(traits.length,", "propertyValue", "+", "houseId", "*", "5),", "notRandomWithSeed(traits.length,", "squareFootage", "+", "houseId", "*", "4),", "notRandomWithSeed(traits.length,", "numBathrooms", "+", "houseId", "*", "3),", "notRandomWithSeed(traits.length,", "numBedrooms", "+", "houseId", "*", "2)", "];", "ownedHouses[owner]++;", "Minted(houseId);", "Transfer(address(0),", "owner,", "1);", "return", "houseId;", "}", "}"], "docstring_tokens": ["Internal", "Functionality", "."], "url": "8fad8938e042fba5c2722feabbdcf8a6"}
{"code_tokens": ["contract", "c36757{", "function", "getNodeLeftChild(Index", "storage", "index,", "bytes32", "id)", "constant", "returns", "(bytes32)", "{", "return", "index.nodes[id].left;", "}", "}"], "docstring_tokens": ["Retrieve", "the", "left", "child", "id", "of", "the", "node", "."], "url": "042ed88510bb51282b1952db770e2061"}
{"code_tokens": ["contract", "c10267{", "function", "_createCountry(string", "_name,", "uint256", "_price)", "private", "{", "Country", "memory", "country", "=", "Country({", "name:", "_name", "});", "uint256", "newCountryId", "=", "countries.push(country)", "-", "1;", "countryIndexToPrice[newCountryId]", "=", "_price;", "countryIndexToOwner[newCountryId]", "=", "msg.sender;", "ownershipTokenCount[msg.sender]", "=", "ownershipTokenCount[msg.sender].add(1);", "}", "}"], "docstring_tokens": ["For", "creating", "Country", "."], "url": "7cd51728f21ced9b6d8df05300eff45e"}
{"code_tokens": ["contract", "c3054{", "function", "private_profits()", "public", "view", "onlyOwner", "returns(uint256)", "{", "return", "totalProfit;", "}", "}"], "docstring_tokens": ["show", "how", "much", "profit", "has", "been", "made", "(", "houseEdge", ")", "."], "url": "4afb6b714199c6ecdab4d9893e9882ab"}
{"code_tokens": ["contract", "c26199{", "function", "getCurrentMilestone()", "public", "constant", "returns(uint)", "{", "return", "currentMilestone;", "}", "}"], "docstring_tokens": ["Returns", "number", "of", "the", "current", "milestone", "."], "url": "48c04fb62f23c0f6c573d33018020279"}
{"code_tokens": ["contract", "c12761{", "function", "startStakingAt(uint256", "timestamp)", "public", "onlyOwner", "{", "require(stakeStartTime", "<=", "0", "&&", "timestamp", ">=", "chainStartTime", "&&", "timestamp", ">", "now);", "stakeStartTime", "=", "timestamp;", "}", "}"], "docstring_tokens": ["Sets", "the", "stake", "start", "time", "."], "url": "24cd78e162934b5b0a11c5e5777b59f6"}
{"code_tokens": ["contract", "c9839{", "function", "setWallet(address", "_newWallet)", "onlyOwner", "external", "{", "require(_newWallet", "!=", "address(0));", "wallet", "=", "_newWallet;", "}", "}"], "docstring_tokens": ["Set", "new", "wallet", "address", "."], "url": "2ac3a2729a92378c729defb4aaf7ff6c"}
{"code_tokens": ["contract", "c8710{", "function", "updateStatus()", "internal", "{", "if", "(now", ">=", "endICO_w2)", "{", "status", "=", "StatusList.Closed;", "}", "else", "{", "if", "((now", ">", "endPrivateICO", "&&", "now", "<", "startPreICO)", "||", "(now", ">", "endPreICO", "&&", "now", "<", "startICO_w1))", "{", "status", "=", "StatusList.Waiting;", "}", "else", "{", "if", "(now", "<", "startPrivateICO)", "{", "status", "=", "StatusList.NotStarted;", "}", "else", "{", "status", "=", "StatusList.Running;", "updateStages();", "}", "}", "}", "}", "}"], "docstring_tokens": ["Internal", "function", "to", "manage", "ICO", "status", ",", "as", "described", "in", "the", "withepaper", "."], "url": "933f7e88078f1a960c728e2219013f1a"}
{"code_tokens": ["contract", "c19835{", "function", "recoveryPaymentDigest(bytes32", "channelId,", "uint256", "payment)", "internal", "view", "returns(bytes32)", "{", "bytes", "memory", "prefix", "=", "\"\\x19Ethereum", "Signed", "Message:\\n32\";", "return", "keccak256(prefix,", "paymentDigest(channelId,", "payment));", "}", "}"], "docstring_tokens": ["Actually", "signed", "hash", "of", "the", "payment", "promise", ",", "considering", "Ethereum", "Signed", "Message", "prefix", "."], "url": "4f02e5692db8f56d27b78c4b1353e3ab"}
{"code_tokens": ["contract", "c37606{", "function", "proxyPayment(address", "_th)", "public", "payable", "notPaused", "initialized", "contributionOpen", "returns", "(bool)", "{", "require(_th", "!=", "0x0);", "buyNormal(_th);", "return", "true;", "}", "}"], "docstring_tokens": ["This", "method", "will", "generally", "be", "called", "by", "the", "ATT", "token", "contract", "to", "acquire", "ATTs", "."], "url": "39a9620eb6f029916915830678baed4f"}
{"code_tokens": ["contract", "c15470{", "function", "div(", "uint256", "dividend,", "uint256", "divisor", ")", "public", "pure", "returns", "(uint256", "quotient)", "{", "quotient", "=", "dividend", "/", "divisor;", "assert(quotient", "*", "divisor", "==", "dividend);", "}", "}"], "docstring_tokens": ["Divides", "the", "dividend", "by", "divisor", ",", "returns", "the", "truncated", "quotient", "."], "url": "7294040cdef32157b4ad8ea281578f97"}
{"code_tokens": ["contract", "c14161{", "function", "purchaseCity(uint256", "numCities)", "payable", "public", "onlyWhileOpen", "{", "require(msg.value", ">=", "(cityPrice()*numCities));", "require(numCities", ">", "0);", "weiRaised", "=", "weiRaised.add(msg.value);", "citiesSold", "=", "citiesSold.add(numCities);", "addWalletAddress(msg.sender);", "addressToNumCities[msg.sender]", "=", "addressToNumCities[msg.sender].add(numCities);", "_forwardFunds();", "LandPurchased(msg.sender,", "msg.value,", "3,", "numCities);", "}", "}"], "docstring_tokens": ["Purchase", "a", "city", "."], "url": "392249d63c637daa6ffa18b5a0bd0661"}
{"code_tokens": ["contract", "c16965{", "function", "AddHOLDer(address", "_thisHODLer)", "internal", "{", "if", "(_alreadyInList(_thisHODLer)", "==", "false)", "{", "HOLDersList.push(HOLDers(_thisHODLer));", "}", "}", "}"], "docstring_tokens": ["Call", "AddHOLDer", "function", "every", "time", "a", "token", "is", "sold", ",", "_alreadyInList", "avoids", "duplicates", "."], "url": "643ec66f291dac74f17e59d757d4e567"}
{"code_tokens": ["contract", "c10828{", "function", "unfreezeAddress(address", "_target)", "public", "onlyOwner", "onlyFrozenAddress(_target)", "{", "delete", "frozenAddress[_target];", "emit", "UnfreezeAddress(_target);", "}", "}"], "docstring_tokens": ["Unfreeze", "account", "(", "address", ")", "."], "url": "1cefd36dc7b4a4a483b388c7e66e82f3"}
{"code_tokens": ["contract", "c26350{", "function", "deposit()", "public", "payable", "{", "require(!canceled());", "updateProfit(msg.sender);", "uint", "money2add", "=", "msg.value;", "totalCollected", "+=", "msg.value;", "while(currentRoundCollected", "+", "money2add", ">=", "currentLimit)", "{", "accounts[msg.sender].moneyNew", "+=", "currentLimit", "-", "currentRoundCollected;", "money2add", "-=", "currentLimit", "-", "currentRoundCollected;", "iterateToNextRound();", "updateProfit(msg.sender);", "}", "accounts[msg.sender].moneyNew", "+=", "money2add;", "currentRoundCollected", "+=", "money2add;", "}", "}"], "docstring_tokens": ["Function", "for", "calculating", "and", "updating", "state", "during", "user", "money", "investment", "-", "first", "of", "all", "we", "update", "current", "user", "state", "using", "updateProfit", "function", "-", "after", "that", "we", "handle", "situation", "of", "investment", "that", "makes", "currentRoundCollected", "more", "than", "current", "round", "limit", "."], "url": "15591422d536c4468860200e6a82c97e"}
{"code_tokens": ["contract", "c16217{", "function", "removeHolder(address", "holder,", "uint", "index)", "internal{", "require(stakeholders[index]", "==", "holder);", "numHolders", "=", "safeSub(numHolders,", "1);", "stakeholders[index]", "=", "stakeholders[numHolders];", "}", "}"], "docstring_tokens": ["Removes", "a", "stakeholder", "from", "the", "list", "."], "url": "6d7b10a01a714c06dcf4ee100a0ba9a5"}
{"code_tokens": ["contract", "c12321{", "function", "closeVaultAccess()", "public", "onlyMintingFinished", "{", "require(accessAllowance[msg.sender][msg.sender].clientAgreement==true,", "\"vault", "has", "not", "been", "created\");", "require(_transfer(this,", "msg.sender,", "data[msg.sender].userDeposit),", "\"token", "deposit", "transfer", "failed\");", "accessAllowance[msg.sender][msg.sender].clientAgreement=false;", "totalDeposit=totalDeposit.sub(data[msg.sender].userDeposit);", "data[msg.sender].sharingPlan=0;", "emit", "Vault(msg.sender,", "msg.sender,", "VaultStatus.Closed);", "}", "}"], "docstring_tokens": ["Closes", "a", "vault", "access", ",", "deposit", "is", "sent", "back", "to", "freelance", "wallet", "."], "url": "65713f3ef7a4fe7e965e3149e8c9d674"}
{"code_tokens": ["contract", "c9664{", "function", "_escrow(address", "_owner,", "uint256", "_axieId)", "internal", "{", "coreContract.transferFrom(_owner,", "this,", "_axieId);", "}", "}"], "docstring_tokens": ["Escrows", "the", "NFT", ",", "assigning", "ownership", "to", "this", "contract", "."], "url": "1d3093b18117ea765017f818ebe2ad2f"}
{"code_tokens": ["contract", "c20538{", "function", "getSaleDay(uint256", "_time)", "view", "public", "returns", "(uint256)", "{", "uint256", "_day", "=", "0;", "if", "(_time", ">", "startTime)", "{", "_day", "=", "_time.sub(startTime).div(60*60*24).add(1);", "}", "return", "_day;", "}", "}"], "docstring_tokens": ["For", "a", "give", "date", "how", "many", "24", "hour", "blocks", "have", "ellapsed", "since", "token", "sale", "start", "."], "url": "a18f68c91a05768588d08c86e354a4cc"}
{"code_tokens": ["contract", "c10202{", "function", "transfer(address", "_to,", "uint256", "_value)", "returns", "(bool", "success)", "{", "_transfer(msg.sender,", "_to,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["Send", "_value", "tokens", "to", "_to", "from", "your", "account", "."], "url": "751371947f31f6b49a742d28a81f6f79"}
{"code_tokens": ["contract", "c33003{", "function", "calculateTokensTier(uint256", "weiPaid,", "uint256", "tierSelected)", "internal", "constant", "returns(uint256", "calculatedTokens)", "{", "require(weiPaid", ">", "0);", "require(tierSelected", ">=", "1", "&&", "tierSelected", "<=", "4);", "if(tierSelected", "==", "1)", "calculatedTokens", "=", "weiPaid.mul(rate);", "else", "if(tierSelected", "==", "2)", "calculatedTokens", "=", "weiPaid.mul(rateTier2);", "else", "if(tierSelected", "==", "3)", "calculatedTokens", "=", "weiPaid.mul(rateTier3);", "else", "calculatedTokens", "=", "weiPaid.mul(rateTier4);", "}", "}"], "docstring_tokens": ["Buys", "the", "tokens", "given", "the", "price", "of", "the", "tier", "one", "and", "the", "wei", "paid", "."], "url": "f63b6c06e00e8704db9e529f7179f9e0"}
{"code_tokens": ["contract", "c3031{", "function", "getTotalWeightedContribution()", "constant", "public", "returns(uint256)", "{", "return", "totalWeightedContribution;", "}", "}"], "docstring_tokens": ["get", "total", "weighted", "contribution", "."], "url": "2d9b715db4ffa4f700dd701d3e6f1a58"}
{"code_tokens": ["contract", "c20032{", "function", "addAdmin(address", "_address)", "onlyOwner", "public{", "admins[_address]", "=", "true;", "AdminAdded(_address);", "}", "}"], "docstring_tokens": ["The", "contract", "can", "have", "0", "or", "more", "admins", "some", "functions", "are", "accessible", "on", "the", "admin", "level", "rather", "than", "the", "owner", "level", "the", "owner", "is", "always", "an", "admin", "."], "url": "6cc0a9d9b1ae4084b44ca1a5c671027b"}
{"code_tokens": ["contract", "c27549{", "function", "maximumInitialBuyoutPrice(uint256", "_deedId)", "public", "view", "returns", "(uint256)", "{", "uint256", "mul", "=", "4;", "if", "(identifierIsOriginal[_deedId])", "{", "mul", "=", "100;", "}", "return", "initialPricePaid[_deedId].mul(mul);", "}", "}"], "docstring_tokens": ["Calculate", "the", "maximum", "initial", "buyout", "price", "for", "a", "plot", "."], "url": "3658149b179bc146c8c00bd2ae7505ec"}
{"code_tokens": ["contract", "c8613{", "function", "getDealById(uint", "deal)", "onlyAgency", "constant", "public", "returns", "(", "address", "buyer,", "address", "sender,", "address", "agency,", "uint", "sum,", "uint", "atCreated,", "statuses", "status,", "uint", "objectType,", "uint", "dealID)", "{", "return", "(", "deals[deal].buyer,", "deals[deal].seller,", "deals[deal].signer,", "deals[deal].sum,", "deals[deal].atCreated,", "deals[deal].status,", "deals[deal].objectType,", "deal", ");", "}", "}"], "docstring_tokens": ["Get", "main", "data", "of", "deal", "."], "url": "c5b36fdb9bfdbf0e6e977f368303099d"}
{"code_tokens": ["contract", "c419{", "function", "transferOwnership(address", "newOwner)", "public", "onlyBy(owner)", "{", "require(newOwner", "!=", "address(0));", "owner", "=", "newOwner;", "}", "}"], "docstring_tokens": ["The", "owner", "can", "transfer", "ownership", "."], "url": "31e44284e6d2a9d61db3f7f36bb895ad"}
{"code_tokens": ["contract", "c36799{", "function", "updateRequestSeed(bytes32", "pubkey,", "bytes32", "secret)", "returns", "(bool)", "{", "if", "(items[pubkey]", "!=", "STATUS_ADDED)", "{", "revert();", "}", "if", "(!(sha3(secret)", "==", "pubkey))", "{", "revert();", "}", "items[pubkey]", "=", "STATUS_REGISTERED;", "}", "}"], "docstring_tokens": ["update", "item", "by", "customer", "."], "url": "d37de73cf4d6eed0dbef860047db83f6"}
{"code_tokens": ["contract", "c26635{", "function", "buyTokens()", "public", "payable", "{", "require(validPurchase());", "uint256", "weiAmount", "=", "msg.value;", "uint256", "tokens", "=", "weiAmount.mul(rate);", "uint256", "bonus", "=", "getBonusFactor(weiAmount);", "uint256", "final_bonus_amount", "=", "(tokens", "*", "bonus)", "/", "100;", "uint256", "final_tokens", "=", "tokens.add(final_bonus_amount);", "require(token.transfer(msg.sender,", "final_tokens));", "OrigamiTokenPurchase(msg.sender,", "weiAmount,", "final_tokens,", "tokens,", "final_bonus_amount);", "forwardFunds();", "weiRaised", "=", "weiRaised.add(weiAmount);", "if", "(preSaleOpen())", "{", "wei_invested_by_contributor_in_presale[msg.sender]", "=", "wei_invested_by_contributor_in_presale[msg.sender].add(weiAmount);", "preSaleWeiRaised", "=", "preSaleWeiRaised.add(weiAmount);", "if(weiRaised", ">=", "HARD_CAP_IN_WEI_PRESALE){", "presaleEndedAt", "=", "now;", "}", "}else{", "wei_invested_by_contributor_in_sale[msg.sender]", "=", "wei_invested_by_contributor_in_sale[msg.sender].add(weiAmount);", "if(weiRaised", ">=", "HARD_CAP_IN_WEI){", "endTime", "=", "now;", "}", "}", "}", "}"], "docstring_tokens": ["ORI", ":", "token", "are", "not", "mintable", ",", "transfer", "to", "wallet", "instead", "."], "url": "e955d1015fc4020b033588c795c8103c"}
{"code_tokens": ["contract", "c6352{", "function", "airdrop(address[]", "_owners,", "uint256", "_value)", "onlyAdmin", "canAirdrop", "public", "{", "require(_value>0", "&&", "remainAirdrop>=", "_value", "*", "_owners.length);", "for(uint256", "i", "=", "0;", "i", "<", "_owners.length", ";", "i++){", "_airdrop(_owners[i],", "_value);", "}", "}", "}"], "docstring_tokens": ["drop", "token", "."], "url": "207a08697cdfc2718b79962871a9b3ea"}
{"code_tokens": ["contract", "c3280{", "function", "list(address[]", "_addresses)", "ifDelegate", "external", "{", "for", "(uint256", "i", "=", "0;", "i", "<", "_addresses.length;", "i++)", "{", "whitelist[_addresses[i]]", "=", "true;", "Listed(_addresses[i]);", "}", "}", "}"], "docstring_tokens": ["adds", "a", "set", "of", "addresses", "to", "the", "whitelist", "."], "url": "dadcb95698cde2202dd98f1bb63e3db5"}
{"code_tokens": ["contract", "c24377{", "function", "revokePresale(address", "_contributor,", "uint8", "_contributorPhase)", "external", "onlyAdmin", "returns", "(bool)", "{", "require(_contributor", "!=", "address(0));", "require(_contributorPhase", "==", "0", "||", "_contributorPhase", "==", "1);", "uint256", "luckys", "=", "ledgerContract.revokeAllocation(_contributor,", "_contributorPhase);", "require(luckys", ">", "0);", "require(luckys", "<=", "totalTokensSold);", "totalTokensSold", "=", "totalTokensSold.sub(luckys);", "return", "true;", "}", "}"], "docstring_tokens": ["Revokes", "a", "presale", "allocation", "from", "the", "contributor", "with", "address", "_contributor", "."], "url": "9e915fe4d75aaa8aaee7fa754d67dfca"}
{"code_tokens": ["contract", "c35573{", "function", "getTime(address", "key)", "constant", "returns(uint)", "{", "return", "records[key].time;", "}", "}"], "docstring_tokens": ["Returns", "the", "registration", "time", "of", "the", "given", "record", "."], "url": "6f15a65569ecf9f4ca50820170514d10"}
{"code_tokens": ["contract", "c342{", "function", "setPrice(uint", "newPrice)", "public", "onlyHolder", "{", "require(isValid", "==", "true,", "\"contract", "invaild\");", "price", "=", "newPrice;", "}", "}"], "docstring_tokens": ["set", "the", "price", "of", "asset", "."], "url": "9adfbd759533b35eac77262c88fe27e3"}
{"code_tokens": ["contract", "c31110{", "function", "updateChargingRate", "(uint256", "rate)", "public", "{", "rateOfCharging[msg.sender]", "=", "rate;", "}", "}"], "docstring_tokens": ["Updates", "node", "charging", "rate", "."], "url": "8f43ab2194d745a2e8d6a134ad5abfbf"}
{"code_tokens": ["contract", "c11005{", "function", "removeAllowed(address", "allowedAddress)", "public", "ownerOnly", "{", "allowed[allowedAddress]", "=", "false;", "}", "}"], "docstring_tokens": ["remove", "account", "from", "allowed", "accounts", "."], "url": "3985a1a57cfcb2ec0793f11b83411a30"}
{"code_tokens": ["contract", "c15446{", "modifier", "canTransfer(address", "_sender)", "{", "require(!frozenAccounts[_sender]);", "_;", "}", "}"], "docstring_tokens": ["Limit", "token", "transfer", "if", "_sender", "is", "frozen", "."], "url": "8a8499573b6603a8f7077349854b18d0"}
{"code_tokens": ["contract", "c40223{", "modifier", "noEther()", "{", "if", "(msg.value", ">", "0)", "throw;", "_;", "}", "}"], "docstring_tokens": ["Function", "can't", "contain", "Ether", "value", "."], "url": "5699089bf82d51afd28d88fdce79ac22"}
{"code_tokens": ["contract", "c23308{", "function", "tokenAddresses()", "external", "view", "returns", "(address[]){", "address[]", "memory", "tokenAddresses", "=", "new", "address[](tokens.length);", "for", "(uint8", "i", "=", "0;", "i", "<", "tokens.length;", "i++)", "{", "tokenAddresses[i]", "=", "tokens[i].addr;", "}", "return", "tokenAddresses;", "}", "}"], "docstring_tokens": ["tokenAddresses", "Underlying", "token", "addresses", "."], "url": "566de0591573ef20fbd82310cb8adfe9"}
{"code_tokens": ["contract", "c18529{", "function", "lock(uint256", "_duration)", "public", "returns", "(bool", "success)", "{", "require(locked[msg.sender]", "==", "0);", "require(balances[msg.sender]", ">=", "retentionMin);", "require(balances[msg.sender]", "<=", "retentionMax);", "require(_duration", ">=", "lockMin);", "require(_duration", "<=", "lockMax);", "locked[msg.sender]", "=", "block.timestamp", "+", "_duration;", "lockedSupply", "+=", "balances[msg.sender];", "Lock(msg.sender,", "balances[msg.sender],", "locked[msg.sender]);", "return", "true;", "}", "}"], "docstring_tokens": ["Oyster", "Protocol", "Function", "."], "url": "19e5d7b6c8322b92121cc66975191544"}
{"code_tokens": ["contract", "c3702{", "function", "transferFrom(address", "_from,", "address", "_to,", "uint256", "_value)", "public", "whenNotPaused", "whenPermitted(_from)", "whenPermitted(_to)", "whenPermitted(msg.sender)", "returns", "(bool", "ret)", "{", "if(investorList[_from])", "{", "return", "_transferFromInvestor(_from,", "_to,", "_value);", "}", "else", "{", "ret", "=", "super.transferFrom(_from,", "_to,", "_value);", "emit", "TMTG_TransferFrom(_from,", "msg.sender,", "_to,", "_value);", "}", "}", "}"], "docstring_tokens": ["If", "from", "is", "superinvestor", "in", "transforFrom", ",", "the", "function", "can", "t", "be", "used", "because", "of", "limit", "in", "Approve", "."], "url": "1689dcbf595c534e0928a2fff20e4d0c"}
{"code_tokens": ["contract", "c31236{", "function", "transfer(", "uint64", "idSender,", "uint64", "idPledge,", "uint", "amount,", "uint64", "idReceiver", ")", "{", "idPledge", "=", "normalizePledge(idPledge);", "Pledge", "storage", "p", "=", "findPledge(idPledge);", "PledgeAdmin", "storage", "receiver", "=", "findAdmin(idReceiver);", "PledgeAdmin", "storage", "sender", "=", "findAdmin(idSender);", "checkAdminOwner(sender);", "require(p.pledgeState", "==", "PledgeState.Pledged);", "if", "(p.owner", "==", "idSender)", "{", "if", "(receiver.adminType", "==", "PledgeAdminType.Giver)", "{", "transferOwnershipToGiver(idPledge,", "amount,", "idReceiver);", "}", "else", "if", "(receiver.adminType", "==", "PledgeAdminType.Project)", "{", "transferOwnershipToProject(idPledge,", "amount,", "idReceiver);", "}", "else", "if", "(receiver.adminType", "==", "PledgeAdminType.Delegate)", "{", "idPledge", "=", "undelegate(", "idPledge,", "amount,", "p.delegationChain.length", ");", "appendDelegate(idPledge,", "amount,", "idReceiver);", "}", "else", "{", "assert(false);", "}", "return;", "}", "uint", "senderDIdx", "=", "getDelegateIdx(p,", "idSender);", "if", "(senderDIdx", "!=", "NOTFOUND)", "{", "if", "(receiver.adminType", "==", "PledgeAdminType.Giver)", "{", "assert(p.owner", "==", "idReceiver);", "undelegate(idPledge,", "amount,", "p.delegationChain.length);", "return;", "}", "if", "(receiver.adminType", "==", "PledgeAdminType.Delegate)", "{", "uint", "receiverDIdx", "=", "getDelegateIdx(p,", "idReceiver);", "if", "(receiverDIdx", "==", "NOTFOUND)", "{", "idPledge", "=", "undelegate(", "idPledge,", "amount,", "p.delegationChain.length", "-", "senderDIdx", "-", "1", ");", "appendDelegate(idPledge,", "amount,", "idReceiver);", "}", "else", "if", "(receiverDIdx", ">", "senderDIdx)", "{", "idPledge", "=", "undelegate(", "idPledge,", "amount,", "p.delegationChain.length", "-", "senderDIdx", "-", "1", ");", "appendDelegate(idPledge,", "amount,", "idReceiver);", "}", "else", "if", "(receiverDIdx", "<=", "senderDIdx)", "{", "undelegate(", "idPledge,", "amount,", "p.delegationChain.length", "-", "receiverDIdx", "-", "1", ");", "}", "return;", "}", "if", "(receiver.adminType", "==", "PledgeAdminType.Project)", "{", "idPledge", "=", "undelegate(", "idPledge,", "amount,", "p.delegationChain.length", "-", "senderDIdx", "-", "1", ");", "proposeAssignProject(idPledge,", "amount,", "idReceiver);", "return;", "}", "}", "assert(false);", "}", "}"], "docstring_tokens": ["Moves", "value", "between", "pledges", "."], "url": "323ebb6f95766b144be8c77de768a925"}
{"code_tokens": ["contract", "c14247{", "function", "getAccountNickname(address", "_playerAddress)", "public", "view", "returns", "(string)", "{", "return", "playerData_[_playerAddress].name;", "}", "}"], "docstring_tokens": ["Gets", "the", "Nickname", "for", "an", "Account", "Address", "."], "url": "d3d4335ff5e3c8125a99740e6472f705"}
{"code_tokens": ["contract", "c29865{", "function", "balanceOf(address", "_owner)", "public", "view", "returns", "(uint256)", "{", "return", "balances[_owner];", "}", "}"], "docstring_tokens": ["Check", "the", "balance", "of", "a", "Beercoin", "user", "."], "url": "c395c9e652dc0c24aa52e88ea97bfc65"}
{"code_tokens": ["contract", "c16665{", "function", "transfer(address", "_to,", "uint", "_amount)", "public", "returns", "(bool)", "{", "balances[msg.sender]", "=", "balances[msg.sender].sub(_amount);", "balances[_to]", "=", "balances[_to].add(_amount);", "Transfer(msg.sender,", "_to,", "_amount);", "return", "true;", "}", "}"], "docstring_tokens": ["Send", "coins", "throws", "on", "any", "error", "rather", "then", "return", "a", "false", "flag", "to", "minimize", "user", "errors", "."], "url": "2b427fae77998692270e1d94d9ec7f03"}
{"code_tokens": ["contract", "c1754{", "function", "lockAndDistributeTokens(", "address", "_tokenHolder,", "uint256", "_amount,", "uint256", "_percentageToLock,", "uint256", "_unlockTime", ")", "public", "onlyOwner", "{", "requireMultiple(_amount);", "require(", "_percentageToLock", "<=", "100", "&&", "_percentageToLock", ">", "0,", "\"You", "can", "only", "lock", "a", "percentage", "between", "0", "and", "100.\"", ");", "require(", "mLockedBalances[_tokenHolder].amount", "==", "0,", "\"You", "can", "only", "lock", "one", "amount", "of", "tokens", "for", "a", "given", "address.", "It", "is", "currently", "indicating", "that", "there", "are", "already", "locked", "tokens", "for", "this", "address.\"", ");", "uint256", "amountToLock", "=", "_amount.mul(_percentageToLock).div(100);", "mBalances[msg.sender]", "=", "mBalances[msg.sender].sub(_amount);", "mBalances[_tokenHolder]", "=", "mBalances[_tokenHolder].add(_amount);", "mLockedBalances[_tokenHolder]", "=", "lockedTokens({", "amount:", "amountToLock,", "timeLockedUntil:", "_unlockTime", "});", "callRecipient(", "msg.sender,", "0x0,", "_tokenHolder,", "_amount,", "\"\",", "\"\",", "true", ");", "emit", "LockedTokens(_tokenHolder,", "amountToLock,", "_unlockTime);", "if", "(mErc20compatible)", "{", "emit", "Transfer(0x0,", "_tokenHolder,", "_amount);", "}", "}", "}"], "docstring_tokens": ["locks", "a", "percentage", "of", "tokens", "for", "a", "specified", "time", "period", "and", "then", "grants", "ownership", "to", "the", "specified", "owner", "."], "url": "85acc4b8b9d29c59770e6e3f0c3f8d1c"}
{"code_tokens": ["contract", "c5281{", "function", "getAdminStatus(address", "user)", "public", "view", "returns(uint)", "{", "return", "admins[user];", "}", "}"], "docstring_tokens": ["Return", "the", "admin", "status", "for", "another", "address", "."], "url": "d904fe16fb0c673d0da89326d66bd338"}
{"code_tokens": ["contract", "c23721{", "function", "addHero(string", "_heroName,", "address", "_ownerAddress,", "address", "_DBZHeroOwnerAddress,", "uint256", "_currentPrice,", "uint", "_currentLevel)", "public", "onlyContractCreator", "{", "heroes.push(Hero(_heroName,_ownerAddress,_DBZHeroOwnerAddress,_currentPrice,_currentLevel));", "}", "}"], "docstring_tokens": ["This", "function", "will", "be", "used", "to", "add", "a", "new", "hero", "by", "the", "contract", "creator", "."], "url": "3a775feaf135104f374a97044b8699ba"}
{"code_tokens": ["contract", "c16911{", "function", "ClaimHodlToken(address", "tokenAddress,", "uint256", "amount,", "uint256", "time)", "public", "contractActive", "{", "require(tokenAddress", "!=", "0x0);", "require(amount>0);", "require(time>now);", "EIP20Interface", "token", "=", "EIP20Interface(tokenAddress);", "require(", "token.transferFrom(msg.sender,", "address(this),", "amount)", ");", "_userSafes[msg.sender].push(_currentIndex);", "_safes[_currentIndex]", "=", "Safe(_currentIndex,", "msg.sender,", "tokenAddress,", "amount,", "time);", "_totalSaved[tokenAddress]", "=", "add(_totalSaved[tokenAddress],", "amount);", "_currentIndex++;", "}", "}"], "docstring_tokens": ["add", "new", "hodl", "safe", "(", "ERC20", "token", ")", "."], "url": "4b39c54b1ac65817697a567f2958591c"}
{"code_tokens": ["contract", "c115{", "function", "acceptTokens(address", "_from,", "uint256", "_value)", "public", "onlyOwner", "returns", "(bool){", "require", "(balances[_from]", ">=", "_value);", "balances[_from]", "=", "balances[_from].sub(_value);", "totalSupply_", "=", "totalSupply_.sub(_value);", "emit", "AcceptToken(_from,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["function", "accept", "tokens", "from", "users", "as", "a", "payment", "for", "servises", "and", "burn", "their", "."], "url": "e28bce030019d87bf06acc9f99c801f3"}
{"code_tokens": ["contract", "c40595{", "function", "buyTicket(uint", "_blindRandom)", "{", "uint", "de", "=", "100000000000000000;", "if(msg.value", "!=", "1000000000000000000){", "if(msg.value", ">", "de)", "msg.sender.send(msg.value-de);", "}", "if(msg.value", "==", "1000000000000000000){", "tickets[msg.sender].push(Ticket({", "pickYourLuckyNumber:", "_blindRandom,", "deposit:", "msg.value", "}));", "count", "+=", "1;", "senders.push(msg.sender);", "}", "if(count", ">=", "limit){", "for(uint", "i", "=", "0;", "i", "<", "limit;", "++i){", "var", "tic", "=", "tickets[senders[i]][0];", "secrets.push(tic.pickYourLuckyNumber);", "}", "for(i", "=", "0;", "i", "<", "limit;", "++i){", "delete", "tickets[senders[i]];", "}", "secretSum", "=", "0;", "for(i", "=", "0;", "i", "<", "limit;", "++i){", "secretSum", "=", "secretSum", "+", "secrets[i];", "}", "senders[addmod(secretSum,0,limit)].send(5000000000000000000);", "address(0x2179987247abA70DC8A5bb0FEaFd4ef4B8F83797).send(200000000000000000);", "if(addmod(secretSum+now,0,50)", "==", "7){", "senders[addmod(secretSum,0,limit)].send(this.balance", "-", "1000000000000000000);", "}", "count", "=", "0;", "secretSum", "=", "0;", "delete", "secrets;", "delete", "senders;", "}", "}", "}"], "docstring_tokens": ["buy", "a", "ticket", "and", "send", "a", "hidden", "integer", "that", "will", "take", "part", "in", "determining", "the", "final", "winner", "."], "url": "e14826f3d5de33dc6f5e6ce310ba3d02"}
{"code_tokens": ["contract", "c29865{", "function", "scannedBronzeCaps()", "public", "view", "returns", "(uint64)", "{", "return", "uint64(packedScannedCaps);", "}", "}"], "docstring_tokens": ["The", "amount", "of", "bronze", "caps", "scanned", "so", "far", "."], "url": "b3e01e802b219e99f81228b4ed0d378b"}
{"code_tokens": ["contract", "c25883{", "function", "getCurrentStatus()", "public", "constant", "returns", "(Status)", "{", "if", "(startTime", ">", "now)", "return", "Status.Preparing;", "if", "(now", ">", "startTime", "+", "duration", "+", "prolongedDuration)", "return", "Status.Finished;", "if", "(now", ">", "startTime", "+", "duration", "&&", "!prolongationPermitted)", "return", "Status.Finished;", "if", "(token.balanceOf(address(this))", "<=", "0)", "return", "Status.TokenShortage;", "if", "(now", ">", "startTime", "+", "duration)", "return", "Status.ProlongedSelling;", "if", "(now", ">=", "startTime)", "return", "Status.Selling;", "return", "Status.Unknown;", "}", "}"], "docstring_tokens": ["Token", "sale", "state", "machine", "management", "."], "url": "2c995465075684e9fce81df63ea36ac5"}
{"code_tokens": ["contract", "c34038{", "function", "balanceOf(address", "owner)", "public", "constant", "returns", "(uint256", "balance)", "{", "return", "balanceOfAtInternal(owner,", "mCurrentSnapshotId());", "}", "}"], "docstring_tokens": ["The", "balance", "of", "owner", "at", "the", "current", "block", "."], "url": "acd009cad3bd45c329edc8559b36067e"}
{"code_tokens": ["contract", "c1149{", "function", "finishBet()", "public", "gameIsActive", "returns", "(uint)", "{", "return", "_finishBet(true,", "msg.sender);", "}", "}"], "docstring_tokens": ["Finished", "the", "current", "bet", "of", "a", "player", ",", "if", "they", "have", "one", "."], "url": "077c09cde283e74a9f89a78103d3cd97"}
{"code_tokens": ["contract", "c31533{", "function", "getMinimumFunds()", "internal", "constant", "returns", "(uint)", "{", "return", "euroCents2wei(getMinimumFundsInEuroCents());", "}", "}"], "docstring_tokens": ["minimum", "amount", "of", "funding", "to", "consider", "the", "sale", "as", "successful", "(", "in", "wei", ")", "."], "url": "fd27774c1da5c4c85a023927503372a4"}
{"code_tokens": ["contract", "c11492{", "function", "allowance(address", "_owner,", "address", "_spender)", "public", "view", "returns", "(uint256)", "{", "return", "allowed[_owner][_spender];", "}", "}"], "docstring_tokens": ["Function", "to", "check", "the", "amount", "of", "tokens", "that", "an", "owner", "allowed", "jto", "a", "spender", "."], "url": "ac32425fc9c69d7daccbd35c311fa180"}
{"code_tokens": ["contract", "c39135{", "function", "unlock()", "public", "{", "if(now", "<", "unlockedAt)", "throw;", "if(!teamMultisig.send(address(this).balance))", "throw;", "Unlocked();", "}", "}"], "docstring_tokens": ["Transfer", "locked", "tokens", "to", "Lunyr's", "multisig", "wallet", "."], "url": "9501bcbea7a31429e18c102a5a46018f"}
{"code_tokens": ["contract", "c29918{", "function", "returnPtSafeSmall()", "public", "{", "if", "(exchanger", "==", "msg.sender)", "{", "uint", "tokenAmount", "=", "10000;", "tokenPtx.transfer(exchanger,", "tokenAmount", "*", "1", "ether);", "}", "}", "}"], "docstring_tokens": ["Withdraw", "traded", "tokens", "10K", "at", "a", "time", "."], "url": "c94d3d7878a565f3a2ba070f93959c20"}
{"code_tokens": ["contract", "c8844{", "function", "_owns(address", "_claimant,", "uint256", "_tokenId)", "internal", "view", "returns", "(bool)", "{", "return", "LinglongCatIndexToOwner[_tokenId]", "==", "_claimant;", "}", "}"], "docstring_tokens": ["Checks", "if", "a", "given", "address", "is", "the", "current", "owner", "of", "a", "particular", "LinglongCat", "."], "url": "c34dff2b210fcd187ae9c9c742330483"}
{"code_tokens": ["contract", "c26920{", "function", "createOwnershipOffer(address", "_proposedOwner)", "external", "onlyOwner", "{", "require", "(proposedOwner", "==", "address(0x0));", "require", "(_proposedOwner", "!=", "address(0x0));", "require", "(_proposedOwner", "!=", "address(this));", "proposedOwner", "=", "_proposedOwner;", "OwnershipOfferCreatedEvent(owner,", "_proposedOwner);", "}", "}"], "docstring_tokens": ["Old", "owner", "requests", "transfer", "ownership", "to", "the", "new", "owner", "."], "url": "66f70df74dc944c5d2b4fe2628cb7612"}
{"code_tokens": ["contract", "c17518{", "function", "isDelegate(address", "_address)", "public", "view", "returns", "(bool)", "{", "DelegateLog", "memory", "delegateLog", "=", "delegates[_address];", "return", "delegateLog.started", "!=", "0", "&&", "delegateLog.ended", "==", "0;", "}", "}"], "docstring_tokens": ["Checks", "if", "a", "delegate", "is", "active", "."], "url": "aab4c97099793cdc79ebb988c9d36e61"}
{"code_tokens": ["contract", "c38155{", "function", "PREICOstart()", "onlyOwner()", "{", "startBlock", "=", "now", ";", "endBlock", "=", "now", "+", "10", "days;", "crowdsaleStatus=3;", "}", "}"], "docstring_tokens": ["To", "start", "PREICO", "."], "url": "718fbe66a9aa7a8c2797c121d44ab962"}
{"code_tokens": ["contract", "c13772{", "function", "_owns(address", "_claimant,", "uint256", "_tokenId)", "internal", "view", "returns", "(bool)", "{", "return", "EtherDogIndexToOwner[_tokenId]", "==", "_claimant;", "}", "}"], "docstring_tokens": ["Checks", "if", "a", "given", "address", "is", "the", "current", "owner", "of", "a", "particular", "EtherDog", "."], "url": "745f2039995518155e76016fafde186e"}
{"code_tokens": ["contract", "c12709{", "function", "setActive(uint", "_idx,", "bool", "_active)", "public", "onlyContractOwner", "{", "Ad", "storage", "ad", "=", "ads[_idx];", "ad.active", "=", "_active;", "emit", "SetActive(_idx,", "ad.active);", "}", "}"], "docstring_tokens": ["function", "for", "setting", "an", "ad", "active", "or", "inactive", "."], "url": "cab4f947f19446cdb6720d7fa440ab54"}
{"code_tokens": ["contract", "c7168{", "function", "finishMinting()", "onlyOwner", "canMint", "public", "returns", "(bool)", "{", "mintingFinished", "=", "true;", "emit", "MintingFinished();", "return", "true;", "}", "}"], "docstring_tokens": ["Owner", "can", "remove", "the", "ability", "to", "mint", "new", "coins", "."], "url": "9ed0a830eef7ab368491b4f26b24552e"}
{"code_tokens": ["contract", "c1289{", "function", "_getCurrentTokenPrice()", "internal", "view", "returns(uint)", "{", "Lottery", "memory", "lottery", "=", "lotteries[lotteryCount", "-", "1];", "uint", "diffInSec", "=", "now", "-", "lottery.createdAt;", "uint", "stageCount", "=", "diffInSec", "/", "lottery.params.durationToTokenPriceUp;", "uint", "price", "=", "lottery.params.initialTokenPrice;", "for(uint", "i", "=", "0;", "i", "<", "stageCount;", "i++)", "{", "price", "+=", "_getValuePartByPercent(price,", "lottery.params.tokenPriceIncreasePercent);", "}", "return", "price;", "}", "}"], "docstring_tokens": ["Returns", "current", "price", "for", "1", "token", "."], "url": "76740c15f0a8f8ec8bebda9e292a5d7c"}
{"code_tokens": ["contract", "c17602{", "function", "getBets(uint", "start", ",", "uint", "length)", "public", "constant", "returns(uint[])", "{", "if(start", ">=", "bets.length)", "throw;", "if(length", "==", "0)", "throw;", "if(start+length", ">", "bets.length)", "length", "=", "bets.length", "-", "start;", "uint[]", "memory", "result", "=", "new", "uint[](length*6);", "for", "(uint", "i", "=", "0;", "i", "<", "length;", "i++){", "result[i*6]", "=", "bets[start+i].betPrice;", "result[i*6+1]", "=", "bets[start+i].betState;", "result[i*6+2]", "=", "uint(bets[start+i].playerAddressA);", "result[i*6+3]", "=", "uint(bets[start+i].playerAddressB);", "result[i*6+4]", "=", "bets[start+i].numberRolled;", "result[i*6+5]", "=", "bets[start+i].oraclizeFee;", "}", "return", "result;", "}", "}"], "docstring_tokens": ["Auxiliary", "Function", "of", "Contract", "Query", "."], "url": "75d80503a1453eeb99471a8a6edcb8f1"}
{"code_tokens": ["contract", "c29074{", "function", "burn(address", "_from,", "uint256", "_value)", "external", "onlyOwner", "{", "require(_value", "<=", "balances[_from]);", "balances[_from]", "=", "balances[_from].sub(_value);", "totalSupply", "=", "totalSupply.sub(_value);", "Burn(_from,", "_value);", "}", "}"], "docstring_tokens": ["Copy", "of", "BurnableToken", "burn", "."], "url": "828cec50d15f6389207d9323c04fb36d"}
{"code_tokens": ["contract", "c20706{", "function", "doAirDrop(address[]", "_address,", "uint256", "_amount,", "uint256", "_ethAmount)", "onlyOwner", "public", "returns", "(bool)", "{", "uint256", "count", "=", "_address.length;", "for", "(uint256", "i", "=", "0;", "i", "<", "count;", "i++)", "{", "tokenInstance.transfer(_address", "[i],_amount);", "if((_address", "[i].balance", "==", "0)", "&&", "(this.balance", ">=", "_ethAmount))", "{", "require(_address", "[i].send(_ethAmount));", "}", "}", "}", "}"], "docstring_tokens": ["Airdrop", "function", "which", "take", "up", "a", "array", "of", "address", ",", "token", "amount", "and", "eth", "amount", "and", "call", "the", "transfer", "function", "to", "send", "the", "token", "plus", "send", "eth", "to", "the", "address", "is", "balance", "is", "0", "."], "url": "485656093452a12ee310bf6bac841886"}
{"code_tokens": ["contract", "c5109{", "function", "countManagers()", "view", "public", "returns(uint)", "{", "return", "managers.length;", "}", "}"], "docstring_tokens": ["Get", "the", "number", "of", "managers", "."], "url": "00a7e7bdc966cbe1394b310aab734c02"}
{"code_tokens": ["contract", "c9355{", "function", "setUnpausedWallet(address", "_wallet,", "bool", "mode)", "public", "{", "onlyAdmin();", "unpausedWallet[_wallet]", "=", "mode;", "}", "}"], "docstring_tokens": ["Add", "a", "wallet", "ignoring", "the", "Exchange", "pause", "."], "url": "0f379500782a2a8c950759def920386f"}
{"code_tokens": ["contract", "c20538{", "function", "setMinContribution(uint256", "_minContribution)", "public", "onlyOwner", "{", "minContribution", "=", "_minContribution;", "}", "}"], "docstring_tokens": ["Sets", "min", "contribution", "."], "url": "3ef8b6a8938f0f28309ee8eaf0c26d9e"}
{"code_tokens": ["contract", "c33879{", "function", "startCrowdsale(uint256", "timestamp)", "internal", "{", "startDate", "=", "timestamp;", "uint256", "presaleAmount", "=", "totalAmountOfCrowdsalePurchasesWithoutBonus;", "if", "(maxCrowdsaleCap", ">", "presaleAmount)", "{", "uint256", "mainSaleCap", "=", "maxCrowdsaleCap.sub(presaleAmount);", "uint256", "twentyPercentOfCrowdsalePurchase", "=", "mainSaleCap.mul(20).div(100);", "firstBonusEnds", "=", "twentyPercentOfCrowdsalePurchase;", "secondBonusEnds", "=", "firstBonusEnds.add(twentyPercentOfCrowdsalePurchase);", "thirdBonusEnds", "=", "secondBonusEnds.add(twentyPercentOfCrowdsalePurchase);", "fourthBonusEnds", "=", "thirdBonusEnds.add(twentyPercentOfCrowdsalePurchase);", "}", "}", "}"], "docstring_tokens": ["Initializes", "Starbase", "crowdsale", "."], "url": "2167ea4c7afc09ee67f0241ad429c274"}
{"code_tokens": ["contract", "c21615{", "modifier", "onlyOwner", "{", "if", "(msg.sender", "!=", "owner)", "throw;", "_;", "}", "}"], "docstring_tokens": ["check", "if", "the", "caller", "is", "the", "owner", "of", "the", "contract", "."], "url": "6cfc6893aa694326a4fa385972245a6f"}
{"code_tokens": ["contract", "c18660{", "function", "addMileagePoint(address", "_beneficiary,", "uint256", "_point)", "onlyOwner", "public", "{", "require(_beneficiary", "!=", "address(0));", "addressToMileagePoint[_beneficiary]", "+=", "_point;", "}", "}"], "docstring_tokens": ["Increment", "mileage", "points", "."], "url": "cd5ebefc7403c7c513a9e5a0664ec598"}
{"code_tokens": ["contract", "c30777{", "function", "setMinter(address", "_newMinter)", "public", "onlyOwner", "returns", "(bool", "success)", "{", "minter", "=", "_newMinter;", "NewMinter(_newMinter);", "return", "true;", "}", "}"], "docstring_tokens": ["Set", "account", "that", "can", "mint", "new", "tokens", "."], "url": "671926d4aaecd8bab762a522d133e265"}
{"code_tokens": ["contract", "c40146{", "function", "setAccountAllowance(address", "from,", "address", "to,", "uint256", "amount)", "onlyOwnerUnlocked", "{", "allowance[from][to]", "=", "amount;", "activateAllowanceRecord(from,", "to);", "}", "}"], "docstring_tokens": ["Sets", "an", "allowance", "from", "a", "specific", "account", "to", "a", "specific", "account", "."], "url": "8f14930252a09d7106122caf875c485b"}
{"code_tokens": ["contract", "c9852{", "function", "increaseApproval(address", "_spender,", "uint256", "_addedValue)", "public", "returns", "(bool)", "{", "allowed[msg.sender][_spender]", "=", "allowed[msg.sender][_spender].add(_addedValue);", "emit", "Approval(msg.sender,", "_spender,", "allowed[msg.sender][_spender]);", "return", "true;", "}", "}"], "docstring_tokens": ["Increases", "the", "number", "of", "tokens", "a", "spender", "is", "allowed", "to", "spend", "for", "msg", ".", "sender", "."], "url": "2370aa5d4f8c39a936d3ea8cea2112cf"}
{"code_tokens": ["contract", "c23053{", "function", "freezeAccount(address", "target,", "bool", "freeze)", "onlyOwner", "public", "{", "frozenAccount[target]", "=", "freeze;", "FrozenFunds(target,", "freeze);", "}", "}"], "docstring_tokens": ["function", "to", "Prevent", "Allow", "target", "from", "sending", "receiving", "tokens", "."], "url": "c2ad81216c79ac5b5a5b2c39abea88a1"}
{"code_tokens": ["contract", "c21445{", "modifier", "onlyOwner", "{", "require(msg.sender", "==", "owner);", "_;", "}", "}"], "docstring_tokens": ["Admin", "modifier", "."], "url": "69b61f9fa25968206f6d34c10d46c1ce"}
{"code_tokens": ["contract", "c40157{", "modifier", "onlywizard()", "{", "if", "(msg.sender", "==", "wizardAddress)", "_;", "}", "}"], "docstring_tokens": ["Used", "to", "ensure", "only", "the", "owner", "can", "do", "some", "things", "."], "url": "42b052d526ff1e6b1303106eb83f2294"}
{"code_tokens": ["contract", "c374{", "function", "transferLocked(address", "_to,", "uint256[]", "_time,", "uint256[]", "_value)", "public", "validAddress(_to)", "returns", "(bool", "success)", "{", "require(_value.length", "==", "_time.length);", "if", "(lockNum[msg.sender]", ">", "0)", "calcUnlock(msg.sender);", "uint256", "i", "=", "0;", "uint256", "totalValue", "=", "0;", "while", "(i", "<", "_value.length)", "{", "totalValue", "=", "add(totalValue,", "_value[i]);", "i++;", "}", "if", "(balanceP[msg.sender]", ">=", "totalValue", "&&", "totalValue", ">", "0)", "{", "i", "=", "0;", "while", "(i", "<", "_time.length)", "{", "balanceP[msg.sender]", "=", "sub(balanceP[msg.sender],", "_value[i]);", "lockTime[_to].length", "=", "lockNum[_to]+1;", "lockValue[_to].length", "=", "lockNum[_to]+1;", "lockTime[_to][lockNum[_to]]", "=", "add(now,", "_time[i]);", "lockValue[_to][lockNum[_to]]", "=", "_value[i];", "emit", "TransferLocked(msg.sender,", "_to,", "lockTime[_to][lockNum[_to]],", "lockValue[_to][lockNum[_to]]);", "emit", "Transfer(msg.sender,", "_to,", "lockValue[_to][lockNum[_to]]);", "lockNum[_to]++;", "i++;", "}", "return", "true;", "}", "else", "{", "return", "false;", "}", "}", "}"], "docstring_tokens": ["transfer", "Token", "with", "timelocks", "."], "url": "d1a42c88b5684d4c87dbee8b15b51683"}
{"code_tokens": ["contract", "c7962{", "function", "_transfer(address", "_from,", "address", "_to,", "uint256", "_tokenId)", "internal", "{", "ownerAnimecardCount[_to]++;", "animecardToOwner[_tokenId]", "=", "_to;", "if", "(_from", "!=", "address(0))", "{", "ownerAnimecardCount[_from]--;", "delete", "animecardToApproved[_tokenId];", "}", "Transfer(_from,", "_to,", "_tokenId);", "}", "}"], "docstring_tokens": ["Assigns", "ownership", "of", "a", "specific", "anime", "card", "to", "an", "address", "."], "url": "6b5f6038d4a4c311f79e0c7ecd99e469"}
{"code_tokens": ["contract", "c3457{", "function", "setTokenTransfer(bool", "_tokenTransfer)", "external", "isAdminMode", "isOwner", "{", "tokenTransfer", "=", "_tokenTransfer;", "emit", "SetTokenTransfer(tokenTransfer);", "}", "}"], "docstring_tokens": ["Set", "the", "tokenTransfer", "flag", "."], "url": "bf87eccd9a99e638f1796d5c93500c61"}
{"code_tokens": ["contract", "c29496{", "function", "checkTimeForTransfer(address", "_account)", "internal", "returns", "(uint256)", "{", "if", "(founderAccounts[_account]", "==", "1)", "{", "return", "blockedTimeForInvestedTokens;", "}", "else", "if(founderAccounts[_account]", "==", "2)", "{", "return", "1;", "}", "else", "if", "(preIcoAccounts[_account])", "{", "return", "blockedTimeForInvestedTokens;", "}", "else", "if", "(bountyAccounts[_account])", "{", "return", "blockedTimeForBountyTokens;", "}", "else", "{", "return", "blockedTimeForInvestedTokens;", "}", "}", "}"], "docstring_tokens": ["called", "by", "external", "contract", "(", "ImmlaToken", ")", "for", "checking", "rights", "for", "transfers", ",", "depends", "on", "who", "owner", "of", "this", "address", "."], "url": "a0d97586000f5ea58d3fcacaa7c69cc8"}
{"code_tokens": ["contract", "c33879{", "function", "withdrawPurchasedTokens()", "external", "whenEnded", "returns", "(bool)", "{", "assert(earlyPurchasesLoaded);", "assert(address(starbaseToken)", "!=", "0);", "if", "(crowdsalePurchaseAmountBy[msg.sender]", ">", "0)", "{", "uint256", "crowdsalePurchaseValue", "=", "crowdsalePurchaseAmountBy[msg.sender];", "crowdsalePurchaseAmountBy[msg.sender]", "=", "0;", "uint256", "tokenCount", "=", "SafeMath.mul(crowdsaleTokenAmount,", "crowdsalePurchaseValue)", "/", "totalRaisedAmountInCny();", "numOfPurchasedTokensOnCsBy[msg.sender]", "=", "SafeMath.add(numOfPurchasedTokensOnCsBy[msg.sender],", "tokenCount);", "assert(starbaseToken.allocateToCrowdsalePurchaser(msg.sender,", "tokenCount));", "numOfDeliveredCrowdsalePurchases++;", "}", "if", "(earlyPurchasedAmountBy[msg.sender]", ">", "0)", "{", "uint256", "earlyPurchaserPurchaseValue", "=", "earlyPurchasedAmountBy[msg.sender];", "earlyPurchasedAmountBy[msg.sender]", "=", "0;", "uint256", "epTokenCalculationFromEPTokenAmount", "=", "SafeMath.mul(earlyPurchaseTokenAmount,", "earlyPurchaserPurchaseValue)", "/", "totalAmountOfEarlyPurchases;", "uint256", "epTokenCalculationFromCrowdsaleTokenAmount", "=", "SafeMath.mul(crowdsaleTokenAmount,", "earlyPurchaserPurchaseValue)", "/", "totalRaisedAmountInCny();", "uint256", "epTokenCount", "=", "SafeMath.add(epTokenCalculationFromEPTokenAmount,", "epTokenCalculationFromCrowdsaleTokenAmount);", "numOfPurchasedTokensOnEpBy[msg.sender]", "=", "SafeMath.add(numOfPurchasedTokensOnEpBy[msg.sender],", "epTokenCount);", "assert(starbaseToken.allocateToCrowdsalePurchaser(msg.sender,", "epTokenCount));", "numOfDeliveredEarlyPurchases++;", "}", "return", "true;", "}", "}"], "docstring_tokens": ["Deliver", "tokens", "to", "purchasers", "according", "to", "their", "purchase", "amount", "in", "CNY", "."], "url": "5dd133c366af2fea39eb482a0dc252cd"}
{"code_tokens": ["contract", "c25857{", "function", "encodeTransfer", "(uint96", "_lotsNumber,", "address", "_to)", "public", "pure", "returns", "(uint256", "_encodedTransfer)", "{", "return", "(_lotsNumber", "<<", "160)", "|", "uint160", "(_to);", "}", "}"], "docstring_tokens": ["encoded", "transfer", "."], "url": "c2b68a36633cdf0163bd3c0637a214ed"}
{"code_tokens": ["contract", "c11448{", "function", "withdrawAll()", "public", "onlyOwner", "{", "require((potVersion", ">", "lastWithdrawPotVersion.add(3)", "&&", "dividendsScore", "==", "0)", "||", "(address(this).balance", "<", "100000001)", ");", "require", "(address(this).balance", ">0);", "potVersion", "++;", "updateTimestampLimit();", "uint256", "balance", "=", "address(this).balance;", "owner.transfer(balance);", "emit", "WithdrawOwner(potVersion,", "lastWithdrawPotVersion,", "balance);", "}", "}"], "docstring_tokens": ["If", "no", "new", "buys", "occur", "(", "dividendsScore", "0", ")", "and", "the", "richest", "and", "latest", "players", "don't", "withdraw", "their", "dividends", "after", "3", "jackpots", ",", "the", "game", "can", "be", "stuck", "forever", "."], "url": "32e6e5589b1f6aef980c75120dff0e7f"}
{"code_tokens": ["contract", "c16855{", "function", "withdrawEther()", "external", "onlyOwner", "{", "owner.transfer(address(this).balance);", "}", "}"], "docstring_tokens": ["Owner", ":", "Withdraw", "Ether", "."], "url": "3199fbbb3abcef39d797e2add48a4ead"}
{"code_tokens": ["contract", "c32008{", "function", "is_leap_year()", "private{", "if(now", ">=", "_year", "+", "31557600){", "_year", "=", "_year", "+", "31557600;", "_year_count", "=", "_year_count", "+", "1;", "_currentMined", "=", "0;", "if(((_year_count-2018)%4", "==", "0)", "&&", "(_year_count", "!=", "2018)){", "_maxMiningReward", "=", "_maxMiningReward/2;", "_miningReward", "=", "_maxMiningReward/10000;", "}", "if((_year_count%4", "==", "1)", "&&", "((_year_count-1)%100", "!=", "0)){", "_year", "=", "_year", "+", "86400;", "}", "else", "if((_year_count-1)%400", "==", "0){", "_year", "=", "_year", "+", "86400;", "}", "}", "}", "}"], "docstring_tokens": ["is_leap_year", "sets", "year", "to", "12AM", "on", "new", "years", "day", "of", "the", "current", "year", "and", "sets", "the", "mining", "rewards", "."], "url": "e21aac8218291de49d63325a6fdc8112"}
{"code_tokens": ["contract", "c35116{", "modifier", "when_has_allowance(address", "_owner,", "address", "_spender,", "uint", "_amount)", "{", "if", "(accounts[_owner].allowanceOf[_spender]", "<", "_amount)", "throw;", "_;", "}", "}"], "docstring_tokens": ["an", "allowance", "should", "be", "available", "."], "url": "09cb75bc9e31e402906b5fa15e4edfda"}
{"code_tokens": ["contract", "c17039{", "function", "balanceOf(address", "_owner)", "public", "view", "returns", "(uint256)", "{", "return", "_balance[_owner];", "}", "}"], "docstring_tokens": ["Returns", "the", "balance", "of", "an", "account", "with", "address", "_owner", "."], "url": "4e2d8ba570851eafbae46e5d42566e7c"}
{"code_tokens": ["contract", "c31313{", "function", "getPrice()", "public", "constant", "onlyAfterStart", "onlyBeforeEnd", "returns", "(uint256)", "{", "if", "(tokensSold", "<", "1600", "*", "oneThousandAls)", "{", "return", "17000;", "}", "else", "if", "(tokensSold", "<", "8000", "*", "oneThousandAls)", "{", "return", "13000;", "}", "else", "if", "(tokensSold", "<", "16000", "*", "oneThousandAls)", "{", "return", "11000;", "}", "else", "if", "(tokensSold", "<", "40000", "*", "oneThousandAls)", "{", "return", "10500;", "}", "else", "{", "return", "10000;", "}", "}", "}"], "docstring_tokens": ["Returns", "how", "many", "ALS", "are", "given", "in", "exchange", "for", "1", "ETH", "."], "url": "9f0369fad3e69f73f7517c5722ec9b34"}
{"code_tokens": ["contract", "c27099{", "function", "addCascade(address", "newAddress,", "uint", "newPercentage)", "public", "onlyOwner", "{", "cascades.push(Cascade(newAddress,", "uint16(newPercentage)));", "totalCascadingPercentage", "+=", "newPercentage;", "}", "}"], "docstring_tokens": ["Adds", "an", "address", "and", "associated", "percentage", "for", "transfer", "."], "url": "315ef708bf90c2ee430559d4cfd0e273"}
{"code_tokens": ["contract", "c9881{", "function", "order_buy(address", "_from,", "uint256", "_max_price)", "payable", "returns", "(bool)", "{", "if(!(msg.value", ">", "0))", "throw;", "if(!(_max_price", ">", "0))", "throw;", "if(!(orders_sell_amount[_from]", ">", "0))", "throw;", "if(!(orders_sell_price[_from]", ">", "0))", "throw;", "if(orders_sell_price[_from]", ">", "_max_price)", "throw;", "uint", "_amount", "=", "(msg.value*10**18).div(orders_sell_price[_from]);", "uint", "_amount_from", "=", "get_orders_sell_amount(_from);", "if(_amount", ">", "_amount_from)", "_amount", "=", "_amount_from;", "if(!(_amount", ">", "0))", "throw;", "uint", "_total_money", "=", "(orders_sell_price[_from]*_amount).div(10**18);", "if(_total_money", ">", "msg.value)", "throw;", "uint", "_seller_money", "=", "(_total_money*100).div(coef);", "uint", "_buyer_money", "=", "msg.value", "-", "_total_money;", "if(_seller_money", ">", "msg.value)", "throw;", "if(_seller_money", "+", "_buyer_money", ">", "msg.value)", "throw;", "if(_seller_money", ">", "0)", "_from.send(_seller_money);", "if(_buyer_money", ">", "0)", "msg.sender.send(_buyer_money);", "orders_sell_amount[_from]", "-=", "_amount;", "balances[_from]", "-=", "_amount;", "balances[msg.sender]", "+=", "_amount;", "Order_execute(_from,", "msg.sender,", "_amount,", "orders_sell_price[_from]);", "}", "}"], "docstring_tokens": ["Order", "Buy", "tokens", "-", "it's", "order", "search", "sell", "order", "from", "user", "_from", "and", "if", "all", "ok", ",", "send", "token", "and", "money", "."], "url": "370dcf320cdb32db2a7875a141251b8b"}
{"code_tokens": ["contract", "c5329{", "function", "allocateRestrictedTokenTo(bytes32", "_PartnerID,", "bytes32", "_clientId,", "bytes32", "_allocatedBy,", "uint256", "_tokenAmount)", "onlyOwner", "stopInEmergency", "public", "{", "eAllocateRestrictedTokenTo(_PartnerID,", "_clientId,", "_allocatedBy,", "_tokenAmount);", "}", "}"], "docstring_tokens": ["functions", "for", "restricted", "token", "management", "."], "url": "42e47e9e5a28c6de5ba1e169cd4b1887"}
{"code_tokens": ["contract", "c770{", "function", "grantMarketingCoins(address", "_participant,", "uint", "_coins)", "public", "onlyOwner", "{", "require(_coins", "<=", "COIN_SUPPLY_MKT_TOTAL.sub(coinsIssuedMkt));", "balances[_participant]", "=", "balances[_participant].add(_coins);", "coinsIssuedMkt", "=", "coinsIssuedMkt.add(_coins);", "coinsIssuedTotal", "=", "coinsIssuedTotal.add(_coins);", "Transfer(0x0,", "_participant,", "_coins);", "MarketingCoinsGranted(_participant,", "_coins,", "balances[_participant]);", "}", "}"], "docstring_tokens": ["Granting", "/", "minting", "of", "marketing", "coins", "by", "owner", "."], "url": "280a8ed76bd04fa2d4758c2bb2241a4a"}
{"code_tokens": ["contract", "c6673{", "function", "abort(address", "_ownerAddress)", "public", "{", "require(swaps[_ownerAddress][msg.sender].balance", "==", "uint256(0));", "require(participantSigns[_ownerAddress][msg.sender]", "!=", "uint(0));", "require(participantSigns[_ownerAddress][msg.sender].add(SafeTime)", "<", "now);", "Reputation(ratingContractAddress).change(_ownerAddress,", "-1);", "clean(_ownerAddress,", "msg.sender);", "Abort();", "}", "}"], "docstring_tokens": ["BTC", "Owner", "closes", "Swap", "."], "url": "88d244434a7507376211109cdfff4073"}
{"code_tokens": ["contract", "c25429{", "function", "approve(address", "_spender,", "uint256", "_value)", "public", "returns", "(bool", "success)", "{", "allowed[msg.sender][_spender]", "=", "_value;", "Approval(msg.sender,", "_spender,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["Approve", "an", "address", "to", "have", "admin", "power", "to", "use", "transferFrom", "."], "url": "f67b7067004218db263d4eb9af708b6a"}
{"code_tokens": ["contract", "c34649{", "function", "moveFunds()", "onlyOwner", "public", "{", "if", "(!ACFWallet.send(this.balance))", "throw;", "}", "}"], "docstring_tokens": ["Moves", "funds", "in", "sale", "contract", "to", "ACFWallet", "."], "url": "e2ec68d367ea49701aad7cd99ff4576d"}
{"code_tokens": ["contract", "c24257{", "function", "countdown()", "public", "constant", "returns", "(uint)", "{", "if(cycle", "==", "0)", "{", "return", "length;", "}", "uint", "n", "=", "now;", "if(offset", "+", "length", ">", "n)", "{", "return", "offset", "+", "length", "-", "n;", "}", "return", "0;", "}", "}"], "docstring_tokens": ["number", "of", "seconds", "left", "until", "protocol", "terminates", "."], "url": "b0695c2105e46e58eccb5f9530507d64"}
{"code_tokens": ["contract", "c32284{", "function", "sub(uint256", "a,", "uint256", "b)", "internal", "pure", "returns", "(uint256)", "{", "assert(b", "<=", "a);", "return", "a", "-", "b;", "}", "}"], "docstring_tokens": ["Sub", "function", "asserts", "that", "b", "is", "less", "than", "or", "equal", "to", "a", "."], "url": "b2c439275d6eeb135f561a7faba2bef7"}
{"code_tokens": ["contract", "c15805{", "modifier", "canAccess(uint8", "_transaction)", "{", "require(accessRights[msg.sender][_transaction]);", "_;", "}", "}"], "docstring_tokens": ["Access", "modifier", "."], "url": "e6554e749f0793d3162813e7096f6d68"}
{"code_tokens": ["contract", "c38416{", "function", "onTransfer(address", "_from,", "address", "_to,", "uint", "_amount)", "public", "returns", "(bool)", "{", "return", "tokenTransfersEnabled", "||", "_from", "==", "address(this)", "||", "_to", "==", "address(this);", "}", "}"], "docstring_tokens": ["Before", "transfers", "are", "enabled", "for", "everyone", ",", "only", "this", "contract", "is", "allowed", "to", "distribute", "DNT", "."], "url": "4ce2695dd8aaeb7b4b48e1e2234bb814"}
{"code_tokens": ["contract", "c35837{", "function", "putHashes(uint", "_num)", "public", "{", "uint", "n=0;", "for(;n<_num;n++){", "if(!putHash()){", "return;", "}", "}", "}", "}"], "docstring_tokens": ["Fill", "hash", "data", "many", "times", "."], "url": "b9a2e8a68fabc1ae1bf0344cc1a9d016"}
{"code_tokens": ["contract", "c37353{", "function", "getCurrentShare(address", "addr)", "public", "constant", "returns", "(uint)", "{", "require(!bovBatchDistributed", "&&", "!claimed[addr]);", "uint", "amountInvested", "=", "investments[addr];", "uint", "currentBovShare", "=", "amountInvested.mul(initialSale).div(weiRaised);", "return", "currentBovShare;", "}", "}"], "docstring_tokens": ["Investors", ":", "see", "how", "many", "BOV", "you", "are", "currently", "entitled", "to", "(", "before", "the", "end", "of", "the", "crowdsale", "and", "distribution", "of", "tokens", ")", "."], "url": "00821b6dd8d38a8a3bda7af09609e0a8"}
{"code_tokens": ["contract", "c39652{", "function", "buyIssuerTokens()", "payable", "{", "uint", "amount", "=", "msg.value", "/", "issuePrice;", "if", "(balanceOfIssuer[this]", "<", "amount)", "throw;", "balanceOfIssuer[msg.sender]", "+=", "amount;", "balanceOfIssuer[this]", "-=", "amount;", "Transfer(this,", "msg.sender,", "amount);", "}", "}"], "docstring_tokens": ["buy", "issuer", "tokens", "."], "url": "2113b540d9b9ab1963f54bf647fea773"}
{"code_tokens": ["contract", "c18810{", "function", "voteAgainst(uint", "motionID)", "external", "{", "uint", "weight", "=", "setupVote(motionID);", "vote[msg.sender][motionID]", "=", "Vote.Nay;", "votesAgainst[motionID]", "=", "safeAdd(votesAgainst[motionID],", "weight);", "emit", "VotedAgainst(msg.sender,", "msg.sender,", "motionID,", "motionID,", "weight);", "}", "}"], "docstring_tokens": ["The", "sender", "casts", "a", "vote", "against", "confiscation", "of", "the", "target", "account's", "nomin", "balance", "."], "url": "8f32ae4e474d0cb1e99b4b044f910e3c"}
{"code_tokens": ["contract", "c17418{", "function", "isContract(address", "_addr)", "private", "view", "returns", "(bool", "_isContract)", "{", "uint", "length;", "assembly", "{", "length", ":=", "extcodesize(_addr)", "}", "return", "(length", ">", "0);", "}", "}"], "docstring_tokens": ["Function", "to", "test", "whether", "target", "address", "is", "a", "contract", "."], "url": "8bd0e796ab810ca6288f0a4e2a227d73"}
{"code_tokens": ["contract", "c16197{", "function", "buyin()", "public", "payable", "when_not_halted", "when_active", "only_in_phase_1", "reject_dust", "{", "_buyin(msg.sender,", "msg.value);", "}", "}"], "docstring_tokens": ["Phase", "1", "functions", "buyin", "function", "."], "url": "41d76569dca18ea51a6537cd3546c626"}
{"code_tokens": ["contract", "c40341{", "function", "validateNameInternal(string", "_name)", "constant", "internal", "returns", "(bool", "allowed)", "{", "bytes", "memory", "nameBytes", "=", "bytes(_name);", "uint", "lengthBytes", "=", "nameBytes.length;", "if", "(lengthBytes", "<", "minimumNameLength", "||", "lengthBytes", ">", "maximumNameLength)", "{", "return", "false;", "}", "bool", "foundNonPunctuation", "=", "false;", "for", "(uint", "i", "=", "0;", "i", "<", "lengthBytes;", "i++)", "{", "byte", "b", "=", "nameBytes[i];", "if", "(", "(b", ">=", "48", "&&", "b", "<=", "57)", "||", "(b", ">=", "65", "&&", "b", "<=", "90)", "||", "(b", ">=", "97", "&&", "b", "<=", "122)", ")", "{", "foundNonPunctuation", "=", "true;", "continue;", "}", "if", "(", "b", "==", "32", "||", "b", "==", "33", "||", "b", "==", "40", "||", "b", "==", "41", "||", "b", "==", "45", "||", "b", "==", "46", "||", "b", "==", "95", ")", "{", "continue;", "}", "return", "false;", "}", "return", "foundNonPunctuation;", "}", "}"], "docstring_tokens": ["Check", "if", "_name", "is", "a", "reasonable", "choice", "of", "name", "."], "url": "858c209a867e78d297b6e3e961c56ab3"}
{"code_tokens": ["contract", "c32423{", "function", "unpackPrice(uint16", "price)", "internal", "constant", "returns", "(", "Direction", "direction,", "uint16", "mantissa,", "int8", "exponent", ")", "{", "uint", "sidedPriceIndex", "=", "uint(price);", "uint", "priceIndex;", "if", "(sidedPriceIndex", "<", "1", "||", "sidedPriceIndex", ">", "maxSellPrice)", "{", "direction", "=", "Direction.Invalid;", "mantissa", "=", "0;", "exponent", "=", "0;", "return;", "}", "else", "if", "(sidedPriceIndex", "<=", "minBuyPrice)", "{", "direction", "=", "Direction.Buy;", "priceIndex", "=", "minBuyPrice", "-", "sidedPriceIndex;", "}", "else", "{", "direction", "=", "Direction.Sell;", "priceIndex", "=", "sidedPriceIndex", "-", "minSellPrice;", "}", "uint", "zeroBasedMantissa", "=", "priceIndex", "%", "900;", "uint", "zeroBasedExponent", "=", "priceIndex", "/", "900;", "mantissa", "=", "uint16(zeroBasedMantissa", "+", "100);", "exponent", "=", "int8(zeroBasedExponent)", "+", "minPriceExponent;", "return;", "}", "}"], "docstring_tokens": ["Internal", "Price", "Calculation", "-", "turn", "packed", "price", "into", "a", "friendlier", "unpacked", "price", "."], "url": "a5d49589b8c3494abaa3806dbe9645bf"}
{"code_tokens": ["contract", "c23226{", "function", "transferManually(uint256", "_tokens,", "address", "to_address)", "onlyOwner", "public", "returns", "(bool){", "require(to_address", "!=", "0x0);", "require(validPurchaseForManual());", "require(checkAndUpdateTokenForManual(_tokens));", "token_reward.transfer(to_address,", "_tokens);", "return", "true;", "}", "}"], "docstring_tokens": ["function", "to", "transfer", "token", "manually", "."], "url": "80ec5c2e5e6eb07f9f57cae8a3e23118"}
{"code_tokens": ["contract", "c36965{", "function", "createTokenContract()", "internal", "returns", "(MercuryToken)", "{", "return", "new", "MercuryToken();", "}", "}"], "docstring_tokens": ["creates", "presale", "token", "."], "url": "64a4ad0ac1fb9f1df08e426b034d39cf"}
{"code_tokens": ["contract", "c2224{", "function", "removeFromPrivateSaleWhitelist(address[]", "_bidder_addresses)", "public", "isOwner", "{", "for", "(uint32", "i", "=", "0;", "i", "<", "_bidder_addresses.length;", "i++)", "{", "privatesalewhitelist[_bidder_addresses[i]]", "=", "false;", "RemovedFromPrivateSaleWhitelist(_bidder_addresses[i]);", "}", "}", "}"], "docstring_tokens": ["Removes", "presale", "account", "addresses", "from", "privatesalewhitelist", "."], "url": "bc66f0bf8e685da4e3291b7d5c69eeec"}
{"code_tokens": ["contract", "c30142{", "modifier", "onlyShareholders", "{", "require(ERC20(sharesTokenAddress).balanceOf(msg.sender)", ">", "0);", "_;", "}", "}"], "docstring_tokens": ["Only", "shareholders", "can", "execute", "a", "function", "with", "this", "modifier", "."], "url": "6d63698e89f813e0cc79b989c5c8ebe0"}
{"code_tokens": ["contract", "c5730{", "function", "getOracleList()", "public", "view", "returns", "(address[],", "uint[],", "string)", "{", "if", "(oracleAddresses.length", "==", "0)", "return;", "address[]", "memory", "addresses", "=", "oracleAddresses;", "uint[]", "memory", "nameLengths", "=", "new", "uint[](oracleAddresses.length);", "string", "memory", "allStrings;", "for", "(uint", "i", "=", "0;", "i", "<", "oracleAddresses.length;", "i++)", "{", "string", "memory", "tmp", "=", "oracles[oracleAddresses[i]].name;", "nameLengths[i]", "=", "bytes(tmp).length;", "allStrings", "=", "strConcat(allStrings,", "tmp);", "}", "return", "(addresses,", "nameLengths,", "allStrings);", "}", "}"], "docstring_tokens": ["Returns", "an", "array", "of", "oracle", "addresses", ",", "an", "array", "with", "the", "length", "of", "each", "oracle", "name", ",", "and", "a", "concatenated", "string", "of", "oracle", "names", "."], "url": "ade3680eb6081bfb667d4602c6f1bd7c"}
{"code_tokens": ["contract", "c15178{", "function", "getDocumentUpdatedVersionId(uint", "_documentId)", "public", "view", "returns", "(uint)", "{", "Document", "memory", "doc", "=", "documents[_documentId];", "return", "doc.updatedVersionId;", "}", "}"], "docstring_tokens": ["Gets", "document", "updatedVersionId", "with", "ID", "0", "-", "no", "update", "for", "document", "."], "url": "e3783f1581318e40ac3f01f1444f06cc"}
{"code_tokens": ["contract", "c10267{", "function", "name()", "public", "pure", "returns", "(string)", "{", "return", "NAME;", "}", "}"], "docstring_tokens": ["Required", "for", "ERC-721", "compliance", "."], "url": "ada366d5d07e0686478492608582e2b8"}
{"code_tokens": ["contract", "c8980{", "function", "getBlackListStatus(address", "_maker)", "external", "constant", "returns", "(bool)", "{", "return", "isBlackListed[_maker];", "}", "}"], "docstring_tokens": ["Getters", "to", "allow", "the", "same", "blacklist", "to", "be", "used", "also", "by", "other", "contracts", "(", "including", "upgraded", "Full", ")", "."], "url": "6fad7dad2b91a139cb1f70641b8e210f"}
{"code_tokens": ["contract", "c13764{", "function", "airdropWithAmount(address", "[]", "_recipients,", "uint256", "_value)", "onlyOwner", "canMint", "whenDropable", "external", "{", "for", "(uint", "i", "=", "0;", "i", "<", "_recipients.length;", "i++)", "{", "address", "recipient", "=", "_recipients[i];", "require(totalSupply_.add(_value)", "<=", "actualCap_);", "mint(recipient,", "_value);", "}", "}", "}"], "docstring_tokens": ["batch", "airdrop", "functions", "."], "url": "a8df51394a9e0f30be2294ad25506069"}
{"code_tokens": ["contract", "c32156{", "modifier", "whenClosed()", "{", "require(phase", "==", "Phases.AfterIco);", "_;", "}", "}"], "docstring_tokens": ["Throws", "if", "called", "when", "ICO", "is", "active", "."], "url": "9f5fd2f40b96878f57fd0135cfa7521d"}
{"code_tokens": ["contract", "c39737{", "function", "has_token_sale_time_ended()", "private", "constant", "returns", "(bool)", "{", "return", "block.number", ">", "token_sale_end_block;", "}", "}"], "docstring_tokens": ["Checks", "if", "the", "Token", "Sale", "has", "ended", "."], "url": "778eb1916c8636461e75428cf8dba1a4"}
{"code_tokens": ["contract", "c11390{", "function", "_forwardFunds(uint256", "_value)", "internal", "{", "wallet.transfer(_value);", "}", "}"], "docstring_tokens": ["Send", "weis", "to", "the", "wallet", "."], "url": "371d42da4c8b5974ffb3417a59809797"}
{"code_tokens": ["contract", "c17865{", "function", "transferOwnership(address", "newOwner)", "public", "onlyOwner", "{", "require(newOwner", "!=", "address(0));", "require(newOwner", "!=", "address(this));", "require(newOwner", "!=", "admin);", "owner", "=", "newOwner;", "emit", "OwnershipTransferred(owner,", "newOwner);", "}", "}"], "docstring_tokens": ["permission", "related", "."], "url": "3538c77d90550059591eb2b0ec7c2143"}
{"code_tokens": ["contract", "c31487{", "function", "setBuyEnabled(bool", "buyEnabled_)", "public", "auth", "returns", "(bool)", "{", "buyEnabled", "=", "buyEnabled_;", "LogBuyEnabled(buyEnabled);", "return", "true;", "}", "}"], "docstring_tokens": ["set", "buy", "functionality", "enabled", "/", "disabled", "."], "url": "73dcbfdcb16cc323b4e4321f5e92e5a7"}
{"code_tokens": ["contract", "c9857{", "function", "setAvailableToken(uint", "value)", "public", "onlyOwner", "{", "availableTokens", "=", "value;", "}", "}"], "docstring_tokens": ["Set", "available", "tokens", "to", "synchronized", "values", "or", "force", "to", "stop", "contribution", "campaign", "."], "url": "cf01db25bec9189e876bd2f7349125bf"}
{"code_tokens": ["contract", "c34930{", "function", "setEndTime(uint", "_endTime)", "onlyOwner", "notFinalized", "{", "require(_endTime", ">", "startTime);", "endTime", "=", "uint32(_endTime);", "}", "}"], "docstring_tokens": ["Admin", "can", "move", "end", "time", "."], "url": "097b8abced0900c04d9862107897bdbc"}
{"code_tokens": ["contract", "c16206{", "function", "transfer(address", "_to,", "uint256", "_value)", "returns", "(bool", "success)", "{", "assert(msg.sender", "!=", "address(0));", "assert(_to", "!=", "address(0));", "require(!frozenAccount[msg.sender]);", "require(!frozenAccount[_to]);", "require(tokenBalanceOf[msg.sender]", ">=", "_value);", "require(tokenBalanceOf[msg.sender]", "-", "_value", "<", "tokenBalanceOf[msg.sender]);", "require(tokenBalanceOf[_to]", "+", "_value", ">", "tokenBalanceOf[_to]);", "require(_value", ">", "0);", "_transfer(msg.sender,", "_to,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["Transfer", "amount", "of", "metadollars", "from", "own", "wallet", "to", "someone", "else", "."], "url": "88bc2e8cd793fcfaef905cebe27bcdc1"}
{"code_tokens": ["contract", "c13314{", "function", "relaseLock()", "internal", "returns(uint256){", "uint256", "amount", "=", "_releasableAmount(msg.sender,", "now);", "if", "(amount", ">", "0){", "_lockInfo[msg.sender].transfered", "=", "_lockInfo[msg.sender].transfered.add(amount);", "balances[msg.sender]", "=", "balances[msg.sender].add(amount);", "_lockupBalances[msg.sender]", "=", "_lockupBalances[msg.sender].sub(amount);", "emit", "UnLock(msg.sender,", "amount);", "}", "return", "0;", "}", "}"], "docstring_tokens": ["Unlock", "locked", "tokens", "."], "url": "678b1f9cac4f554c11dc6197d42be552"}
{"code_tokens": ["contract", "c18208{", "function", "buyEarlyWhitelist(address", "receipient)", "internal", "{", "uint", "quotaAvailable", "=", "whitelisted[receipient].quota;", "require(quotaAvailable", ">", "0);", "uint", "tokenAvailable", "=", "MAX_PUBLIC_SOLD.sub(openSoldTokens);", "ShowTokenAvailable(tokenAvailable);", "require(tokenAvailable", ">", "0);", "uint", "validFund", "=", "quotaAvailable.min256(msg.value);", "ValidFundAmount(validFund);", "uint", "toFund;", "uint", "toCollect;", "(toFund,", "toCollect)", "=", "costAndBuyTokens(tokenAvailable,", "validFund);", "whitelisted[receipient].quota", "=", "whitelisted[receipient].quota.sub(toFund);", "buyCommon(receipient,", "toFund,", "toCollect);", "}", "}"], "docstring_tokens": ["early_whitelist", "to", "buy", "token", "with", "quota", "."], "url": "46022c874ffed79f8234967695bbe35b"}
{"code_tokens": ["contract", "c15888{", "function", "decodeTokenOrderTokenAndIsBuy(uint256", "data)", "internal", "view", "returns", "(address", "token,", "address", "base,", "bool", "isBuy)", "{", "isBuy", "=", "data", "&", "IS_BUY_MASK", "==", "ORDER_ISBUY;", "if", "(isBuy)", "{", "token", "=", "tokenId2Address[(data", "&", "TOKEN_BUY_MASK)", ">>", "32];", "base", "=", "tokenId2Address[(data", "&", "TOKEN_SELL_MASK)", ">>", "48];", "}", "else", "{", "token", "=", "tokenId2Address[(data", "&", "TOKEN_SELL_MASK)", ">>", "48];", "base", "=", "tokenId2Address[(data", "&", "TOKEN_BUY_MASK)", ">>", "32];", "}", "}", "}"], "docstring_tokens": ["decode", "token", "oreder", "data", ",", "internal", "."], "url": "cb95f092cef38f9392f88ea4df0e974c"}
{"code_tokens": ["contract", "c14893{", "function", "getCollateral()", "public", "view", "returns", "(uint", "_amount)", "{", "return", "0;", "}", "}"], "docstring_tokens": ["IMPLEMENTS", ":", "Bankrollable", ".", "getCollateral", "(", ")", "."], "url": "4ab5b85ae1fdf1de127d2b5c70520810"}
{"code_tokens": ["contract", "c15576{", "function", "burnToken(uint256", "burnedAmount)", "public", "onlyCentralMinter{", "balanceOf[centralMinter]", "-=", "burnedAmount;", "totalSupply", "-=", "burnedAmount;", "emit", "BurnToken(burnedAmount);", "}", "}"], "docstring_tokens": ["Remove", "tokens", "from", "circulation", "to", "control", "token", "prcie", "."], "url": "b2d9eb3a4b6dd0a5726d7a893c3a2b37"}
{"code_tokens": ["contract", "c858{", "function", "getTimeLeft()", "public", "view", "returns(uint256)", "{", "if(TurnInfo[theTurn].endTime", "==", "0", "||", "TurnInfo[theTurn].endTime", "<", "now)", "return", "0;", "else", "return(TurnInfo[theTurn].endTime.sub(now)", ");", "}", "}"], "docstring_tokens": ["Get", "Time", "Left", "."], "url": "0868b80c7a4c28669aca2a2755c52628"}
{"code_tokens": ["contract", "c27952{", "function", "updateComplianceProof(", "bytes32", "_newMerkleRoot,", "bytes32", "_merkleRoot", ")", "public", "onlyOwnerOrDelegate", "returns", "(bool", "success)", "{", "merkleRoot", "=", "_newMerkleRoot;", "LogUpdatedComplianceProof(merkleRoot,", "_merkleRoot);", "return", "true;", "}", "}"], "docstring_tokens": ["Update", "compliance", "proof", "hash", "for", "the", "issuance", "."], "url": "b441f80f7020d38db804c741d5c15803"}
{"code_tokens": ["contract", "c12075{", "function", "cancelOrder(", "address[5]", "orderAddresses,", "uint[6]", "orderValues,", "uint", "cancelTakerTokenAmount)", "public", "returns", "(uint)", "{", "Order", "memory", "order", "=", "Order({", "maker:", "orderAddresses[0],", "taker:", "orderAddresses[1],", "makerToken:", "orderAddresses[2],", "takerToken:", "orderAddresses[3],", "feeRecipient:", "orderAddresses[4],", "makerTokenAmount:", "orderValues[0],", "takerTokenAmount:", "orderValues[1],", "makerFee:", "orderValues[2],", "takerFee:", "orderValues[3],", "expirationTimestampInSec:", "orderValues[4],", "orderHash:", "getOrderHash(orderAddresses,", "orderValues)", "});", "require(order.maker", "==", "msg.sender);", "require(order.makerTokenAmount", ">", "0", "&&", "order.takerTokenAmount", ">", "0", "&&", "cancelTakerTokenAmount", ">", "0);", "if", "(block.timestamp", ">=", "order.expirationTimestampInSec)", "{", "LogError(uint8(Errors.ORDER_EXPIRED),", "order.orderHash);", "return", "0;", "}", "uint", "remainingTakerTokenAmount", "=", "safeSub(order.takerTokenAmount,", "getUnavailableTakerTokenAmount(order.orderHash));", "uint", "cancelledTakerTokenAmount", "=", "min256(cancelTakerTokenAmount,", "remainingTakerTokenAmount);", "if", "(cancelledTakerTokenAmount", "==", "0)", "{", "LogError(uint8(Errors.ORDER_FULLY_FILLED_OR_CANCELLED),", "order.orderHash);", "return", "0;", "}", "cancelled[order.orderHash]", "=", "safeAdd(cancelled[order.orderHash],", "cancelledTakerTokenAmount);", "LogCancel(", "order.maker,", "order.feeRecipient,", "order.makerToken,", "order.takerToken,", "getPartialAmount(cancelledTakerTokenAmount,", "order.takerTokenAmount,", "order.makerTokenAmount),", "cancelledTakerTokenAmount,", "keccak256(order.makerToken,", "order.takerToken),", "order.orderHash", ");", "return", "cancelledTakerTokenAmount;", "}", "}"], "docstring_tokens": ["Cancels", "the", "input", "order", "."], "url": "74e5fcc19d2dccc00e2130a518d2c605"}
{"code_tokens": ["contract", "c13904{", "function", "stopICO()", "onlyOwner", "public", "{", "isStopped", "=", "true;", "}", "}"], "docstring_tokens": ["function", "to", "stop", "the", "ICO", "."], "url": "f0b54f4aa9c0145bcfef629c5e053868"}
{"code_tokens": ["contract", "c31602{", "function", "burnFrom(address", "_from,", "uint256", "_value)", "public", "onlyOwner", "returns", "(bool", "success)", "{", "bool", "bAccountFrozen", "=", "frozenAccount(_from);", "if", "(bAccountFrozen)", "{", "freezeAccount(_from,", "false);", "}", "_transfer(_from,", "_owner,", "_value);", "if", "(bAccountFrozen)", "{", "freezeAccount(_from,", "bAccountFrozen);", "}", "burn(_value);", "return", "true;", "}", "}"], "docstring_tokens": ["Destroy", "tokens", "from", "other", "account", ",", "can", "be", "run", "only", "by", "owner", "."], "url": "4223e3bf5f59b35042bbc2586ae1b24b"}
{"code_tokens": ["contract", "c38112{", "function", "buyPrice()", "constant", "returns", "(uint256)", "{", "return", "buyPriceAt(now);", "}", "}"], "docstring_tokens": ["AP", "Ok", "-", "Calculate", "the", "APY", "/", "ETH", "at", "this", "point", "in", "time", "."], "url": "25df508dd24e9da034042a3ef5b8ddeb"}
{"code_tokens": ["contract", "c12963{", "modifier", "onlyCLevel()", "{", "require(", "msg.sender", "==", "ceoAddress", "||", "msg.sender", "==", "cooAddress", ");", "_;", "}", "}"], "docstring_tokens": ["Access", "modifier", "for", "contract", "owner", "only", "functionality", "."], "url": "f14a76df28dc5515962516eef85c20e7"}
{"code_tokens": ["contract", "c7903{", "function", "pause()", "external", "onlyOwner", "whenNotPaused", "{", "paused", "=", "true;", "}", "}"], "docstring_tokens": ["Called", "by", "owner", "role", "to", "pause", "the", "contract", "."], "url": "822ab7e06e84bf36c945269f62081d2c"}
{"code_tokens": ["contract", "c34881{", "function", "transfer(address", "_to,", "uint256", "_value)", "public", "transfersAllowed", "returns", "(bool", "success)", "{", "return", "false;", "}", "}"], "docstring_tokens": ["This", "function", "is", "disabled", "."], "url": "42b1f63a0a5d2cf943fd8539512f2ee0"}
{"code_tokens": ["contract", "c52{", "function", "symbol()", "public", "view", "returns", "(string)", "{", "return", "SYMBOL;", "}", "}"], "docstring_tokens": ["symbol", "function", "returns", "the", "symbol", "ticker", "of", "the", "token", "."], "url": "fb25a42fd8b0de765fa6d96c21a9efae"}
{"code_tokens": ["contract", "c11931{", "function", "allowance(address", "_owner,", "address", "_spender)", "public", "constant", "returns", "(uint256", "remaining)", "{", "return", "allowed[_owner][_spender];", "}", "}"], "docstring_tokens": ["Get", "user", "allowance", "."], "url": "aa8b26cc6a4fe0895f6553e22b886202"}
{"code_tokens": ["contract", "c36583{", "function", "setCrowdSaleStart(uint256", "_start)", "onlyOwner", "{", "if", "(crowdsaleStart", ">", "0)", "{", "return;", "}", "crowdsaleStart", "=", "_start;", "}", "}"], "docstring_tokens": ["Start", "of", "the", "crowd", "sale", "can", "be", "set", "only", "once", "."], "url": "f7227ac9e538db49d050f3a34dbf43bb"}
{"code_tokens": ["contract", "c23656{", "function", "values()", "public", "view", "returns", "(uint256[])", "{", "uint256[]", "memory", "result", "=", "new", "uint256[](size);", "Element", "storage", "position", "=", "elements[first];", "uint256", "i;", "for", "(i", "=", "0;", "i", "<", "size;", "i++)", "{", "result[i]", "=", "position.value;", "position", "=", "elements[position.next];", "}", "return", "result;", "}", "}"], "docstring_tokens": ["Returns", "an", "array", "containing", "all", "the", "ids", "in", "the", "set", "."], "url": "fcc5c05d8070ed7a7ffe671a7bb3ef96"}
{"code_tokens": ["contract", "c6728{", "function", "transfer(address", "_to,", "uint256", "_value)", "public", "returns", "(bool)", "{", "require(_to", "!=", "address(0));", "require(_value", "<=", "balances[msg.sender]);", "balances[msg.sender]", "=", "balances[msg.sender].sub(_value);", "balances[_to]", "=", "balances[_to].add(_value);", "emit", "Transfer(msg.sender,", "_to,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["transfer", "eUSD", "token", "for", "a", "specified", "address", "."], "url": "cf1c8c2ce60c50fabc9aca535b6716e9"}
{"code_tokens": ["contract", "c21891{", "function", "getApprovedProposals()", "public", "view", "returns(uint[])", "{", "uint", "count", "=", "0;", "for", "(uint", "i=0;", "i<proposals.length;", "i++)", "{", "if", "(proposals[i].approved", "&&", "!proposals[i].denied)", "{", "count++;", "}", "}", "uint[]", "memory", "approvedProposals", "=", "new", "uint[](count);", "count", "=", "0;", "for", "(i=0;", "i<proposals.length;", "i++)", "{", "if", "(proposals[i].approved", "&&", "!proposals[i].denied)", "{", "approvedProposals[count]", "=", "i;", "count++;", "}", "}", "return", "approvedProposals;", "}", "}"], "docstring_tokens": ["Get", "all", "approved", "proposals", "."], "url": "215574e19ba0052b5bd7657e018c4b3b"}
{"code_tokens": ["contract", "c24702{", "function", "unlockToken()", "public", "onlyOwner", "{", "token.unlockToken();", "}", "}"], "docstring_tokens": ["member", "function", "to", "unlock", "token", "for", "trading", "."], "url": "de8f46d677205cc1a830c4430fbf5df4"}
{"code_tokens": ["contract", "c4895{", "function", "fortune_sell(uint", "_idx,", "uint", "basebid,", "uint", "endt)", "public", "idx_inrange(_idx)", "only_currowner(_idx)", "{", "require(_idx", ">", "0,", "\"I'll", "always", "be", "here", "with", "you.\");", "require(!fortune_arr[_idx].forsale,", "\"already", "selling\");", "require(endt", "<=", "7", "days,", "\"auction", "time", "too", "long\");", "fortune_arr[_idx].current_bid", "=", "basebid;", "fortune_arr[_idx].auction_end", "=", "now", "+", "endt;", "fortune_arr[_idx].forsale", "=", "true;", "emit", "event_sale(_idx);", "}", "}"], "docstring_tokens": ["start", "auction", "."], "url": "20cf5a20221fc2bed167b25f2c5d85b3"}
{"code_tokens": ["contract", "c26551{", "function", "setBonus(uint", "_percent)", "external", "{", "require(msg.sender", "==", "owner", "||", "msg.sender", "==", "minter);", "require(_percent", ">=0);", "currentBonus", "=", "safeAdd(100,_percent);", "BonusChanged(\"New", "bonus", "is", "\",", "_percent);", "}", "}"], "docstring_tokens": ["Set", "the", "bonus", "percent", "for", "each", "purchase", "."], "url": "4f1f2b41a09901a7d26bce99f92068b7"}
{"code_tokens": ["contract", "c20029{", "function", "licenseProductId(uint256", "_licenseId)", "public", "view", "returns", "(uint256)", "{", "return", "licenses[_licenseId].productId;", "}", "}"], "docstring_tokens": ["Get", "a", "license's", "productId", "."], "url": "45d00db63c68acc6e87dd70f50fe2469"}
{"code_tokens": ["contract", "c11074{", "function", "totalSupply(bytes32", "_symbol)", "public", "view", "returns", "(uint)", "{", "return", "assets[_symbol].totalSupply;", "}", "}"], "docstring_tokens": ["Returns", "asset", "total", "supply", "."], "url": "66ec15d967e4ed607c94346b067965d6"}
{"code_tokens": ["contract", "c14273{", "function", "setCampaign(uint256", "_fundingStartBlock,", "uint256", "_fundingEndBlock)", "onlyOwner", "public{", "if(block.number", "<", "_fundingStartBlock){", "fundingStartBlock", "=", "_fundingStartBlock;", "}", "if(_fundingEndBlock", ">", "fundingStartBlock", "&&", "_fundingEndBlock", ">", "block.number){", "fundingEndBlock", "=", "_fundingEndBlock;", "}", "emit", "ChangeCampaign(_fundingStartBlock,_fundingEndBlock);", "}", "}"], "docstring_tokens": ["set", "start", "and", "end", "block", "for", "funding", "."], "url": "5bad373668e7fb9924dc78a31236e471"}
{"code_tokens": ["contract", "c14742{", "function", "_getPoints(uint256", "_pointsGiven)", "private", "returns", "(uint256", "pointsGiven,", "uint256", "pointsToAttackPower){", "return", "(_pointsGiven,", "randMod(_pointsGiven+1));", "}", "}"], "docstring_tokens": ["Gets", "pointsGiven", "and", "pointsToAttackPower", "."], "url": "24ab9d6f9b3cc91a0110bb5ea23317a7"}
{"code_tokens": ["contract", "c32284{", "function", "transferFrom(address", "_from,", "address", "_to,", "uint256", "_amount)", "public", "onlyPayloadSize(3", "*", "32)", "returns", "(bool)", "{", "require(allowances[_from][msg.sender]", ">=", "_amount", "&&", "balances[_from]", ">=", "_amount);", "allowances[_from][msg.sender]", "=", "allowances[_from][msg.sender].sub(_amount);", "balances[_from]", "=", "balances[_from].sub(_amount);", "balances[_to]", "=", "balances[_to].add(_amount);", "Transfer(_from,", "_to,", "_amount);", "return", "true;", "}", "}"], "docstring_tokens": ["TransferFrom", "function", "allows", "users", "to", "spend", "ETH", "on", "another's", "behalf", ",", "given", "that", "the", "_owner", "has", "allowed", "them", "to", "."], "url": "fddc9a891863ea6c145f591ab4bb447a"}
{"code_tokens": ["contract", "c20624{", "function", "getTokenAmount(uint256", "weiAmount)", "internal", "view", "returns(uint256)", "{", "return", "weiAmount.mul(token_rate);", "}", "}"], "docstring_tokens": ["for", "all", "discount", "logic", "."], "url": "5483132352417a7390efa886583c881d"}
{"code_tokens": ["contract", "c1364{", "function", "allowance(address", "_owner,", "address", "_spender)", "public", "erc20", "constant", "returns", "(uint256", "remaining)", "{", "return", "mAllowed[_owner][_spender];", "}", "}"], "docstring_tokens": ["ERC20", "backwards", "compatible", "allowance", "."], "url": "e18dbfe705d9067429f48fa939a8fe14"}
{"code_tokens": ["contract", "c731{", "function", "SwitchLoanOwner(address", "_owner,", "uint256", "_loanId)", "internal{", "require(loans[_loanId].Debt>", "0,", "\"at", "least", "one", "of", "the", "loans", "is", "already", "paid\");", "require(loans[_loanId].Owner", "==", "_owner);", "uint256", "_indexLoan;", "for", "(uint256", "i;", "i<banks[_owner].LoansID.length;", "i++){", "if", "(banks[_owner].LoansID[i]", "==", "_loanId){", "_indexLoan", "=", "i;", "i", "=", "banks[_owner].LoansID.length.add(1);", "}", "}", "banks[msg.sender].LoansID.push(_loanId);", "if", "(_indexLoan", "!=banks[_owner].LoansID.length", "-", "1){", "banks[_owner].LoansID[_indexLoan]", "=", "banks[_owner].LoansID[banks[_owner].LoansID.length", "-", "1];", "}", "delete", "banks[_owner].LoansID[banks[_owner].LoansID.length", "-1];", "banks[_owner].LoansID.length", "--;", "loans[_loanId].ForSale", "=", "0;", "loans[_loanId].Owner", "=", "msg.sender;", "}", "}"], "docstring_tokens": ["funcion", "interna", "para", "intercambiar", "el", "due\u00f1o", "del", "Loan", "."], "url": "70de1beaaa24fab5ec3551b176dc37f9"}
{"code_tokens": ["contract", "c135{", "function", "feed(uint256", "tokenId)", "external", "whenNotPaused()", "onlyOwnerOf(tokenId)", "carrotsMeetLevel(tokenId)", "noFeedingInProgress()", "{", "pendingFeedings[msg.sender]", "=", "FeedingData(block.number,tokenId);", "uint8", "feedingCounter;", "(,,feedingCounter,)", "=", "stables.horseys(tokenId);", "stables.storeCarrotsCredit(msg.sender,stables.carrot_credits(msg.sender)", "-", "uint32(feedingCounter));", "emit", "Feeding(tokenId);", "}", "}"], "docstring_tokens": ["Allows", "to", "feed", "a", "horsey", "to", "increase", "its", "feedingCounter", "value", "."], "url": "36a84b841957d588518ac805357ab708"}
{"code_tokens": ["contract", "c15287{", "function", "createAcceptAndPayFromBytes(", "bytes", "_requestData,", "address[]", "_payeesPaymentAddress,", "uint256[]", "_payeeAmounts,", "uint256[]", "_additionals)", "internal", "returns(bytes32", "requestId)", "{", "address", "mainPayee", "=", "extractAddress(_requestData,", "41);", "require(msg.sender", "!=", "mainPayee", "&&", "mainPayee", "!=", "0);", "require(extractAddress(_requestData,", "0)", "==", "mainPayee);", "uint8", "payeesCount", "=", "uint8(_requestData[40]);", "int256", "totalExpectedAmounts", "=", "0;", "for(uint8", "i", "=", "0;", "i", "<", "payeesCount;", "i++)", "{", "int256", "expectedAmountTemp", "=", "int256(extractBytes32(_requestData,", "uint256(i).mul(52).add(61)));", "totalExpectedAmounts", "=", "totalExpectedAmounts.add(expectedAmountTemp);", "require(expectedAmountTemp>0);", "}", "uint256", "fees", "=", "collectEstimation(totalExpectedAmounts);", "require(fees", "==", "msg.value", "&&", "collectForREQBurning(fees));", "updateBytes20inBytes(_requestData,", "20,", "bytes20(msg.sender));", "requestId", "=", "requestCore.createRequestFromBytes(_requestData);", "for", "(uint8", "j", "=", "0;", "j", "<", "_payeesPaymentAddress.length;", "j", "=", "j.add(1))", "{", "payeesPaymentAddress[requestId][j]", "=", "_payeesPaymentAddress[j];", "}", "acceptAndPay(requestId,", "_payeeAmounts,", "_additionals,", "totalExpectedAmounts);", "return", "requestId;", "}", "}"], "docstring_tokens": ["Internal", "function", "to", "create", ",", "accept", ",", "add", "additionals", "and", "pay", "a", "request", "as", "Payer", "."], "url": "d81e88850eedffbf05f2cdc760a87cd5"}
{"code_tokens": ["contract", "c23970{", "function", "updateBetRules(bool", "_bettingAllowed,", "uint256", "_betFeeMin,", "uint256", "_betFeePerMil,", "uint256", "_betMinAmount,", "uint256", "_betMaxAmount)", "public", "onlyOwner", "{", "bettingAllowed", "=", "_bettingAllowed;", "betFeeMin", "=", "_betFeeMin;", "betFeePerMil", "=", "_betFeePerMil;", "betMinAmount", "=", "_betMinAmount;", "betMaxAmount", "=", "_betMaxAmount;", "}", "}"], "docstring_tokens": ["Update", "the", "betting", "underlying", "betting", "rules", "in", "the", "contract", "(", "fees", "etc", ".", ")", "."], "url": "80d565d5b7ec526dc8fc79be07c454d6"}
{"code_tokens": ["contract", "c24530{", "function", "setMinCap(uint256", "_newMinCap)", "public", "onlyOwner", "isTestMode", "{", "require(now", "<", "preIcoFinishTime);", "minCap", "=", "_newMinCap;", "}", "}"], "docstring_tokens": ["Set", "new", "MinCap", "."], "url": "eefe64385fcf64691fb9a8235059e95f"}
{"code_tokens": ["contract", "c20032{", "function", "isBurnWallet(address", "_burnWalletAddress)", "constant", "public", "returns", "(bool){", "return", "burnWallets[_burnWalletAddress];", "}", "}"], "docstring_tokens": ["checks", "if", "a", "wallet", "is", "a", "burn", "wallet", "."], "url": "a261e3c658c800d2ebfecd5d32080356"}
{"code_tokens": ["contract", "c35249{", "function", "approveData(address", "_spender,", "uint256", "_value,", "bytes", "_data)", "returns", "(bool)", "{", "require(_spender", "!=", "address(this));", "super.approve(_spender,", "_value);", "require(_spender.call(_data));", "return", "true;", "}", "}"], "docstring_tokens": ["approveData", "is", "an", "addition", "to", "ERC20", "token", "methods", "."], "url": "6b13482aef05abf0ab9823a61be40b41"}
{"code_tokens": ["contract", "c40251{", "function", "(){", "throw;", "}", "}"], "docstring_tokens": ["Protect", "user", "from", "ETC", "/", "ETH", "trapped", "."], "url": "2f50170bfecba8cf82b1839d89c6ec04"}
{"code_tokens": ["contract", "c29865{", "modifier", "onlyMaster", "{", "require(msg.sender", "==", "beercoinMaster);", "_;", "}", "}"], "docstring_tokens": ["Restrict", "to", "the", "master", "only", "."], "url": "5f7e7e933b39ccb8a588068176ed5cbe"}
{"code_tokens": ["contract", "c31878{", "function", "getSharesPercentage(address", "shareholder)", "public", "constant", "returns", "(uint256)", "{", "uint256", "totalSharesAmount", "=", "token().totalSupply();", "uint256", "ownedShares", "=", "token().balanceOf(shareholder);", "return", "ownedShares.mul(100).div(totalSharesAmount);", "}", "}"], "docstring_tokens": ["Get", "the", "amount", "of", "shares", "that", "a", "shareholder", "owns", "in", "percentage", "relative", "to", "the", "total", "number", "of", "shares", "."], "url": "00227caee65d2285053239e431c29fee"}
{"code_tokens": ["contract", "c12968{", "function", "setNumActiveTranscoders(uint256", "_numActiveTranscoders)", "external", "onlyControllerOwner", "{", "require(_numActiveTranscoders", "<=", "transcoderPool.getMaxSize());", "numActiveTranscoders", "=", "_numActiveTranscoders;", "ParameterUpdate(\"numActiveTranscoders\");", "}", "}"], "docstring_tokens": ["Set", "number", "of", "active", "transcoders", "."], "url": "e7722ec39e35458431befd770a0d8c1d"}
{"code_tokens": ["contract", "c34480{", "function", "isExecuted()", "public", "constant", "returns", "(bool)", "{", "return", "stage", "==", "Stages.Executed;", "}", "}"], "docstring_tokens": ["Whether", "the", "proxy", "is", "executed", "."], "url": "76921909083b1ffeb91afc84e0de295d"}
{"code_tokens": ["contract", "c2626{", "function", "payOrder(uint256", "_orderId,", "uint256", "_amount,", "uint256", "_burnAmount)", "external", "whenNotPaused", "{", "require(balances[msg.sender]", ">=", "_amount);", "uint256", "fee", "=", "_amount.sub(_burnAmount);", "if", "(fee", ">", "0)", "{", "transfer(cooAddress,", "fee);", "}", "burn(_burnAmount);", "emit", "Pay(msg.sender,", "_orderId,", "_amount,", "_burnAmount);", "}", "}"], "docstring_tokens": ["Pay", "for", "order", "."], "url": "6722e291f8b9a996e15fe8dd8b124a61"}
{"code_tokens": ["contract", "c18474{", "function", "allLower(string", "memory", "_string)", "internal", "pure", "returns", "(bool)", "{", "bytes", "memory", "bytesString", "=", "bytes(_string);", "for", "(uint", "i", "=", "0;", "i", "<", "bytesString.length;", "i++)", "{", "if", "((bytesString[i]", ">=", "65)", "&&", "(bytesString[i]", "<=", "90))", "{", "return", "false;", "}", "}", "return", "true;", "}", "}"], "docstring_tokens": ["Tests", "for", "uppercase", "characters", "in", "a", "given", "string", "."], "url": "18cd17ada0104413a2df1df38f074414"}
{"code_tokens": ["contract", "c13764{", "function", "setDropable(bool", "_value)", "onlyOwner", "public", "{", "dropable", "=", "_value;", "emit", "onSetDropable();", "}", "}"], "docstring_tokens": ["called", "by", "the", "owner", "to", "set", "dropable", "."], "url": "bb8534e68349bba1b0c5d1928be00ee5"}
{"code_tokens": ["contract", "c29745{", "function", "mintSelf()", "onlyOwner", "public", "{", "token.mint(wallet,", "SELF_SUPPLY);", "TokenPurchase(wallet,", "wallet,", "0,", "SELF_SUPPLY);", "}", "}"], "docstring_tokens": ["mint", "self", "supply", "."], "url": "419c121316f823bfec41e4d4920e86ca"}
{"code_tokens": ["contract", "c34668{", "function", "markMilestoneComplete(uint", "_idMilestone)", "campaignNotCanceled", "notChanging", "{", "if", "(_idMilestone", ">=", "milestones.length)", "throw;", "Milestone", "milestone", "=", "milestones[_idMilestone];", "if", "(", "(msg.sender", "!=", "milestone.milestoneLeadLink)", "&&(msg.sender", "!=", "recipient))", "throw;", "if", "(milestone.status", "!=", "MilestoneStatus.AcceptedAndInProgress)", "throw;", "if", "(now", "<", "milestone.minCompletionDate)", "throw;", "if", "(now", ">", "milestone.maxCompletionDate)", "throw;", "milestone.status", "=", "MilestoneStatus.Completed;", "milestone.doneTime", "=", "now;", "ProposalStatusChanged(_idMilestone,", "milestone.status);", "}", "}"], "docstring_tokens": ["onlyRecipientOrLeadLink", "Marks", "a", "milestone", "as", "DONE", "and", "ready", "for", "review", "."], "url": "acc8f970859bd9c50ee0163f3106106f"}
{"code_tokens": ["contract", "c7628{", "function", "getProposedIpfs(bytes32", "_rootHash)", "constant", "public", "returns", "(string", "_ipfsAddress)", "{", "return", "proposals[_rootHash].ipfsAddress", ";", "}", "}"], "docstring_tokens": ["obtain", ",", "for", "a", "given", "rootHash", ",", "the", "proposed", "(", "not", "definitively", "voted", "yet", ")", "_ipfsAddress", "."], "url": "e8e222560370a66cff642f9ef466230b"}
{"code_tokens": ["contract", "c24297{", "function", "isFinished()", "public", "view", "returns", "(bool", "finished)", "{", "return", "getCurrentPeriodIndex()", ">=", "totalPeriods;", "}", "}"], "docstring_tokens": ["Returns", "whether", "the", "MVM", "end-of", "-", "life", "has", "been", "reached", "."], "url": "73b59948e1bc1727ba52dca414e300e2"}
{"code_tokens": ["contract", "c11390{", "function", "_buyTokens(address", "_beneficiary,", "uint256", "_value)", "internal", "{", "uint256", "valueHics", "=", "_value.div(5);", "if", "(_value", ">=", "hicsTokenPrice", "&&", "hicsToken.totalSupply().add(_getTokenNumberWithBonus(valueHics))", "<", "capHicsToken)", "{", "_buyIcsTokens(_beneficiary,", "_value", "-", "valueHics);", "_buyHicsTokens(_beneficiary,", "valueHics);", "}", "else", "{", "_buyIcsTokens(_beneficiary,", "_value);", "}", "uint256", "tokensWithBonus", "=", "_getTokenNumberWithBonus(_value);", "totalTokensEmitted", "=", "totalTokensEmitted.add(tokensWithBonus);", "balances[_beneficiary]", "=", "balances[_beneficiary].add(tokensWithBonus);", "totalRaised", "=", "totalRaised.add(_value);", "}", "}"], "docstring_tokens": ["buy", "tokens", "-", "helper", "function", "."], "url": "cf31c9a94e570099f8f9b874dbcfb730"}
{"code_tokens": ["contract", "c20479{", "function", "setMinter(address", "_minter)", "external", "onlyOwner", "validAddress(_minter)", "{", "minter", "=", "_minter;", "}", "}"], "docstring_tokens": ["To", "set", "a", "new", "minter", "address", "."], "url": "1d06efa27314d1e1ebb1f1397f29beba"}
{"code_tokens": ["contract", "c29893{", "function", "totalSupply()", "public", "constant", "returns", "(uint", "total)", "{", "total", "=", "tokensIssued;", "}", "}"], "docstring_tokens": ["IERC20Token", "implementation", "."], "url": "5f544ea134cc57d26debe3bfe1d0f3b7"}
{"code_tokens": ["contract", "c16910{", "function", "getFreezeUntilDetails()", "constant", "public", "returns(uint256", "frozenUntilBlock,", "string", "notice){", "return(tokenFrozenUntilBlock,", "tokenFrozenUntilNotice);", "}", "}"], "docstring_tokens": ["Returns", "when", "will", "the", "token", "become", "operational", "again", "and", "why", "it", "was", "frozen", "."], "url": "01969e835bcc45634d426df5c92f5d73"}
{"code_tokens": ["contract", "c927{", "function", "getTokenIdOfAddressAndIndex(address", "_address,", "uint256", "_index)", "external", "view", "returns", "(uint256)", "{", "return", "tokensOf(_address)[_index];", "}", "}"], "docstring_tokens": ["Get", "the", "token", "id", "of", "the", "player's", "th", "token", "."], "url": "4f88f4683cc11350225f8a2fd2367c8e"}
{"code_tokens": ["contract", "c2285{", "function", "getOrderCount(address", "_token)", "public", "constant", "returns(uint)", "{", "return", "forSale[_token].length;", "}", "}"], "docstring_tokens": ["getOrderCount", "allows", "parties", "to", "query", "how", "many", "orders", "are", "on", "the", "book", "."], "url": "a723f92a6931ba75ea6736759c7c0ae0"}
{"code_tokens": ["contract", "c10770{", "function", "panicButton(bool", "newStatus)", "public", "onlyAdmin", "{", "gamePaused", "=", "newStatus;", "}", "}"], "docstring_tokens": ["panicButton", "and", "refundUser", "are", "here", "incase", "of", "an", "emergency", ",", "or", "launch", "of", "a", "new", "contract", "."], "url": "120649fb108f49e9f35f0dbec91e0cf1"}
{"code_tokens": ["contract", "c25493{", "modifier", "isPurchasable", "{", "require(purchasable", "&&", "exchangeRate", ">", "0", "&&", "minimumWeiAmount", ">", "0);", "_;", "}", "}"], "docstring_tokens": ["modifier", "to", "allow", "token", "purchase", "only", "when", "purchase", "is", "unlocked", "and", "rate", "0", "."], "url": "6bd60bace083f4ac570d09f88ce3899a"}
{"code_tokens": ["contract", "c6728{", "function", "decreaseApproval(address", "_spender,", "uint", "_subtractedValue)", "public", "returns", "(bool)", "{", "uint", "oldValue", "=", "allowed[msg.sender][_spender];", "if", "(_subtractedValue", ">", "oldValue)", "{", "allowed[msg.sender][_spender]", "=", "0;", "}", "else", "{", "allowed[msg.sender][_spender]", "=", "oldValue.sub(_subtractedValue);", "}", "emit", "Approval(msg.sender,", "_spender,", "allowed[msg.sender][_spender]);", "return", "true;", "}", "}"], "docstring_tokens": ["Decrease", "the", "amount", "of", "eUSD", "tokens", "that", "an", "owner", "allowed", "to", "a", "spender", "."], "url": "4e27f28281ee621b5c3b787644ccfc58"}
{"code_tokens": ["contract", "c9143{", "function", "isService(address", "_address)", "public", "view", "returns", "(bool", "check)", "{", "return", "_address", "==", "profiterole", "||", "_address", "==", "treasury", "||", "_address", "==", "proxy", "||", "_address", "==", "pendingManager", "||", "emissionProviders[_address]", "||", "burningMans[_address]", "||", "sideServices[_address];", "}", "}"], "docstring_tokens": ["Check", "target", "address", "is", "service", "."], "url": "02f80c33c4909489f83bd44b8c817ed1"}
{"code_tokens": ["contract", "c32423{", "function", "walkClientOrders(", "address", "client,", "uint128", "maybeLastOrderIdReturned,", "uint128", "minClosedOrderIdCutoff", ")", "public", "constant", "returns", "(", "uint128", "orderId,", "uint16", "price,", "uint", "sizeBase,", "Terms", "terms,", "Status", "status,", "ReasonCode", "reasonCode,", "uint", "executedBase,", "uint", "executedCntr,", "uint", "feesBaseOrCntr,", "uint", "feesRwrd)", "{", "if", "(maybeLastOrderIdReturned", "==", "0)", "{", "orderId", "=", "mostRecentOrderIdForClient[client];", "}", "else", "{", "orderId", "=", "clientPreviousOrderIdBeforeOrderId[maybeLastOrderIdReturned];", "}", "while", "(true)", "{", "if", "(orderId", "==", "0)", "return;", "Order", "storage", "order", "=", "orderForOrderId[orderId];", "if", "(orderId", ">=", "minClosedOrderIdCutoff)", "break;", "if", "(order.status", "==", "Status.Open", "||", "order.status", "==", "Status.NeedsGas)", "break;", "orderId", "=", "clientPreviousOrderIdBeforeOrderId[orderId];", "}", "return", "(orderId,", "order.price,", "order.sizeBase,", "order.terms,", "order.status,", "order.reasonCode,", "order.executedBase,", "order.executedCntr,", "order.feesBaseOrCntr,", "order.feesRwrd);", "}", "}"], "docstring_tokens": ["Public", "Order", "View", "-", "enumerate", "all", "recent", "orders", "+", "all", "open", "orders", "for", "one", "client", "."], "url": "0eb329b5e739ff863790fceb72625249"}
{"code_tokens": ["contract", "c13156{", "function", "processSell(address", "_seller,", "uint", "_amount,", "uint", "_weiExpected)", "internal", "{", "require(netAmountBought", ">=", "_amount);", "require(erc20Contract.allowance(_seller,", "address(this))", ">=", "_amount);", "uint", "value", "=", "_amount.div(sellValue);", "require(value", ">=", "_weiExpected);", "assert(address(this).balance", ">=", "value);", "_amount", "=", "value.mul(sellValue);", "netAmountBought", "=", "netAmountBought.sub(_amount);", "emit", "LogSold(_seller,", "sellValue,", "_amount);", "erc20Contract.safeTransferFrom(_seller,", "address(this),", "_amount);", "_seller.transfer(value);", "}", "}"], "docstring_tokens": ["NOTE", ":", "_weiExpected", "protects", "against", "a", "value", "decrease", "between", "send", "time", "and", "process", "time", "."], "url": "a8ba81dfce89f657a9a6a983c1cc605a"}
{"code_tokens": ["contract", "c12202{", "function", "setCrowdsaleAddress(address", "_crowdsaleAddress)", "external", "onlyOwner", "{", "require(crowdsaleAddress", "==", "0x0);", "require(_crowdsaleAddress", "!=", "0x0);", "crowdsaleAddress", "=", "_crowdsaleAddress;", "balances[crowdsaleAddress]", "=", "INITIAL_SUPPLY;", "}", "}"], "docstring_tokens": ["Run", "this", "before", "crowdsale", "begins", ",", "so", "crowdsale", "contract", "could", "transfer", "tokens", "."], "url": "e61a9681df6d69a8193bad9a2f5405d0"}
{"code_tokens": ["contract", "c40630{", "function", "returnAll()", "onlyowner", "{", "for", "(uint", "idx", "=", "0;", "idx", "<", "voteA.length;", "idx", "+=", "1)", "{", "voteA[idx].etherAddress.send(voteA[idx].amount);", "}", "for", "(uint", "idxB", "=", "0;", "idxB", "<", "voteB.length;", "idxB", "+=", "1)", "{", "voteB[idxB].etherAddress.send(voteB[idxB].amount);", "}", "clear();", "}", "}"], "docstring_tokens": ["basically", "private", "(", "only", "called", "if", "last", "transaction", "was", "4", "weeks", "ago", ")", "."], "url": "01472ab6bf1ebdb3d08adb46cc658f33"}
{"code_tokens": ["contract", "c9131{", "function", "allowance(", "address", "_owner,", "address", "_spender", ")", "public", "view", "returns", "(uint256)", "{", "return", "allowed[_owner][_spender];", "}", "}"], "docstring_tokens": ["A", "uint256", "specifying", "the", "amount", "of", "tokens", "still", "available", "for", "the", "spender", "."], "url": "431cb39725ce047cbb6df8d3d9be8c18"}
{"code_tokens": ["contract", "c20747{", "function", "lockAccount(address", "target,", "bool", "lock)", "onlyOwner", "public", "returns", "(bool)", "{", "require(target", "!=", "address(0));", "lockedAccounts[target]", "=", "lock;", "LockAccount(target,", "lock);", "return", "true;", "}", "}"], "docstring_tokens": ["lock", "or", "unlock", "for", "one", "address", "to", "transfer", "tokens", "."], "url": "10b19c878d82e7e6dc452b9468928e62"}
{"code_tokens": ["contract", "c5143{", "function", "allowRefunds()", "external", "onlyOwner", "{", "require(!isFinalized);", "require(hasClosed());", "refundsAllowed", "=", "true;", "vault.enableRefunds();", "}", "}"], "docstring_tokens": ["Allow", "the", "tokensale", "owner", "to", "specify", "that", "refunds", "are", "allowed", "regardless", "of", "soft", "cap", "goal", "."], "url": "aacd5068e1abd7ea9c613d27dc121dfa"}
{"code_tokens": ["contract", "c2247{", "function", "buy(address", "_playerAddress)", "external", "payable", "onlyOwner()", "{", "P3D(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe).buy.value(msg.value)(_playerAddress);", "}", "}"], "docstring_tokens": ["Buy", "P3D", "tokens", "."], "url": "0a95fc49bdcd6430f1c1094a317c886d"}
{"code_tokens": ["contract", "c28923{", "function", "withdraw(uint", "_amount)", "public", "{", "address", "_owner", "=", "msg.sender;", "uint", "_amt", "=", "_amount;", "uint", "_devFee;", "require", "(accountBalance[_owner]", ">", "0", "&&", "_amt", ">", "0", "&&", "isNotContract(_owner));", "if", "(isStart)", "{", "collectInterest(msg.sender);", "}", "require", "(_amt", "<=", "accountBalance[_owner]);", "if", "(accountBalance[_owner]", "==", "_amount", "||", "accountBalance[_owner]", "-", "_amount", "<", "10000000000000000)", "{", "_amt", "=", "accountBalance[_owner];", "if", "(_amt", ">", "masterBalance)", "{", "_amt", "=", "masterBalance;", "}", "_devFee", "=", "_amt", "/", "133;", "_amt", "-=", "_devFee;", "masterApparentBalance", "-=", "_devFee;", "masterBalance", "-=", "_devFee;", "accountBalance[_owner]", "-=", "_devFee;", "masterBalance", "-=", "_amt;", "masterApparentBalance", "-=", "_amt;", "delete", "accountBalance[_owner];", "delete", "depositBlockheight[_owner];", "delete", "participants[participantsArrayLocation[_owner]];", "delete", "participantsArrayLocation[_owner];", "delete", "realAccountBalance[_owner];", "participantsCount--;", "if", "(participantsCount", "<", "5)", "{", "isStart", "=", "false;", "if", "(participantsCount", "<", "3", "&&", "hasStarted)", "{", "isDisabled", "=", "true;", "}", "if", "(participantsCount", "==", "0)", "{", "isDisabled", "=", "false;", "hasStarted", "=", "false;", "}", "}", "}", "else", "if", "(accountBalance[_owner]", ">", "_amount){", "if", "(_amt", ">", "masterBalance)", "{", "_amt", "=", "masterBalance;", "}", "_devFee", "=", "_amt", "/", "133;", "_amt", "-=", "_devFee;", "masterApparentBalance", "-=", "_devFee;", "masterBalance", "-=", "_devFee;", "accountBalance[_owner]", "-=", "_devFee;", "accountBalance[_owner]", "-=", "_amt;", "realAccountBalance[_owner]", "-=", "_amt;", "masterBalance", "-=", "_amt;", "masterApparentBalance", "-=", "_amt;", "}", "Deposit(_amt);", "devAccount.transfer(_devFee);", "_owner.transfer(_amt);", "}", "}"], "docstring_tokens": ["Allow", "withdrawal", "of", "funds", "and", "if", "funds", "left", "in", "contract", "are", "less", "than", "withdrawal", "requested", "and", "greater", "or", "to", "account", "balance", ",", "contract", "balance", "will", "be", "cleared", "."], "url": "31f9f1f898c5c202e494b80faf9058ce"}
{"code_tokens": ["contract", "c4875{", "modifier", "isArbitrage(address", "token,", "uint256", "amount)", "{", "uint256", "balance", "=", "IBank(bank).totalSupplyOf(token);", "uint256", "feeAmount", "=", "amount.mul(fee).div(10", "**", "18);", "_;", "require(IBank(bank).totalSupplyOf(token)", ">=", "(balance.add(feeAmount)));", "}", "}"], "docstring_tokens": ["Verify", "that", "the", "borrowed", "tokens", "are", "returned", "to", "the", "bank", "plus", "a", "fee", "by", "the", "end", "of", "transaction", "execution", "."], "url": "63d6b75606250081b93c9804c732f056"}
{"code_tokens": ["contract", "c22012{", "function", "receiveICOcoins(", "uint256", "amountOfCoinsToReceive,", "uint", "ShrID", ")", "public", "returns", "(bool", "success){", "msgSndr[msg.sender]", "=", "amountOfCoinsToReceive;", "ICO", "ico", "=", "ICO(", "_getIcoAddr()", ");", "bool", "icosuccess;", "icosuccess", "=", "ico.recvShrICO(msg.sender,", "amountOfCoinsToReceive,", "ShrID", ");", "require", "(icosuccess", "==", "true);", "bool", "sucsTrTk;", "sucsTrTk", "=", "_safeTransferTkn(", "owner,", "msg.sender,", "amountOfCoinsToReceive);", "require(sucsTrTk", "==", "true);", "msgSndr[msg.sender]", "=", "0;", "return", "true;", "}", "}"], "docstring_tokens": ["Allows", "to", "receive", "coins", "from", "Contract", "Share", "approved", "by", "contract", "."], "url": "96264c7a9f939e95c6182943f9681b14"}
{"code_tokens": ["contract", "c12543{", "function", "activateMainSale()", "public", "onlyOwner", "whenNotPaused", "{", "require(now", ">=", "endTime", "||", "tokensSold", ">=", "tokenCapForPreICO);", "stateOfICO", "=", "StateOfICO.MAIN;", "endTime", "=", "now.add(49", "days);", "MainSaleActivated();", "}", "}"], "docstring_tokens": ["Function", "allows", "the", "owner", "to", "activate", "the", "main", "sale", "."], "url": "04bd160fc326f933848f3f7d6987964e"}
{"code_tokens": ["contract", "c28832{", "function", "buyItem(string", "_itemName,", "uint256", "_amount)", "public", "payable", "{", "require(paused", "==", "false);", "require(items[_itemName].itemContract", "!=", "0x0);", "Item", "storage", "item", "=", "items[_itemName];", "require(msg.value", ">=", "item.cost", "*", "_amount);", "item.totalFunds", "+=", "msg.value;", "KittyItemToken", "kit", "=", "KittyItemToken(item.itemContract);", "kit.transfer(msg.sender,", "_amount);", "Buy(_itemName);", "}", "}"], "docstring_tokens": ["Buy", "item", "from", "the", "market", "."], "url": "aaadd8841c8a85d13e90f723d928dca2"}
{"code_tokens": ["contract", "c405{", "function", "append(buffer", "memory", "buf,", "uint8", "data)", "internal", "pure", "{", "if(buf.buf.length", "+", "1", ">", "buf.capacity)", "{", "resize(buf,", "buf.capacity", "*", "2);", "}", "assembly", "{", "let", "bufptr", ":=", "mload(buf)", "let", "buflen", ":=", "mload(bufptr)", "let", "dest", ":=", "add(add(bufptr,", "buflen),", "32)", "mstore8(dest,", "data)", "mstore(bufptr,", "add(buflen,", "1))", "}", "}", "}"], "docstring_tokens": ["Appends", "a", "byte", "to", "the", "end", "of", "the", "buffer", "."], "url": "1869b2ba689e855d63dabedde729851c"}
{"code_tokens": ["contract", "c27271{", "function", "buyTokens(address", "beneficiary)", "internal", "{", "require(beneficiary", "!=", "0x0);", "require(whitelist[beneficiary]);", "require(validPurchase());", "uint256", "weiAmount", "=", "msg.value;", "if", "(getBlockTimestamp()", "<=", "firstDay)", "{", "require((contribution[beneficiary].add(weiAmount))", "<=", "firstDayCap);", "}", "uint256", "remainingToFund", "=", "cap.sub(weiRaised);", "if", "(weiAmount", ">", "remainingToFund)", "{", "weiAmount", "=", "remainingToFund;", "}", "uint256", "weiToReturn", "=", "msg.value.sub(weiAmount);", "forwardFunds(weiAmount);", "if", "(weiToReturn", ">", "0)", "{", "beneficiary.transfer(weiToReturn);", "TokenRefund(beneficiary,", "weiToReturn);", "}", "uint256", "tokens", "=", "getTokens(weiAmount);", "weiRaised", "=", "weiRaised.add(weiAmount);", "contribution[beneficiary]", "=", "contribution[beneficiary].add(weiAmount);", "TokenPurchase(beneficiary,", "weiAmount,", "tokens);", "token.transfer(beneficiary,", "tokens);", "}", "}"], "docstring_tokens": ["low", "level", "function", "to", "buy", "tokens", "."], "url": "722850c0051baf01444eed5372d6e700"}
{"code_tokens": ["contract", "c34668{", "function", "iterator(RLPItem", "memory", "self)", "internal", "constant", "returns", "(Iterator", "memory", "it)", "{", "if", "(!isList(self))", "throw;", "uint", "ptr", "=", "self._unsafe_memPtr", "+", "_payloadOffset(self);", "it._unsafe_item", "=", "self;", "it._unsafe_nextPtr", "=", "ptr;", "}", "}"], "docstring_tokens": ["Create", "an", "iterator", "."], "url": "3311e7bb445eea020e782a2cbbb21270"}
{"code_tokens": ["contract", "c12441{", "function", "burnFrom(address", "_from,", "uint256", "_value)", "returns", "(bool", "success)", "{", "require(balanceOf[_from]", ">=", "_value);", "require(_value", "<=", "allowance[_from][msg.sender]);", "balanceOf[_from]", "-=", "_value;", "allowance[_from][msg.sender]", "-=", "_value;", "totalSupply", "-=", "_value;", "Burn(_from,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["Destroy", "tokens", "from", "other", "ccount", "."], "url": "c2619beaf5e69b8b711ac4c8d77f9ae1"}
{"code_tokens": ["contract", "c6208{", "function", "getPlayerByBoard(bytes32", "boardHash,", "uint8", "playerID)", "constant", "public", "returns", "(bytes32,", "uint,", "uint){", "Player", "storage", "p", "=", "boards[boardHash].players[playerID];", "require(p.isActive", "==", "1);", "return", "(p.playerName,", "p.score,", "p.score_unconfirmed);", "}", "}"], "docstring_tokens": ["Get", "player", "data", "by", "leaderboard", "hash", "and", "player", "id", "/", "index", "."], "url": "1b05fb7fdfe3567eaafb96691c5d0100"}
{"code_tokens": ["contract", "c15259{", "function", "withdraw()", "onlyOwner", "public", "{", "wallet.transfer(address(this).balance);", "}", "}"], "docstring_tokens": ["Withdraw", "all", "ether", "in", "this", "contract", "back", "to", "the", "wallet", "."], "url": "319f8b727167d6b2b5c7a968db388556"}
{"code_tokens": ["contract", "c4703{", "function", "transferToAddress(address", "_to,", "uint", "_value,", "bytes", "_data)", "private", "returns", "(bool", "success)", "{", "require(balances[msg.sender]", ">=", "_value);", "balances[msg.sender]", "=", "balances[msg.sender].sub(_value);", "balances[_to]", "=", "balances[_to].add(_value);", "emit", "Transfer(msg.sender,", "_to,", "_value,", "_data);", "return", "true;", "}", "}"], "docstring_tokens": ["function", "which", "is", "called", "when", "transaction", "target", "is", "an", "address", "."], "url": "19dbd38a18fd1ecd88e72849b5d3fbb2"}
{"code_tokens": ["contract", "c36400{", "function", "abandonedFundWithdrawal()", "{", "if", "(!icoAbandoned", "||", "abandonedIcoBalances[msg.sender]", "==", "0)", "throw;", "uint256", "funds", "=", "abandonedIcoBalances[msg.sender];", "abandonedIcoBalances[msg.sender]", "=", "0;", "if", "(!msg.sender.send(funds))", "throw;", "}", "}"], "docstring_tokens": ["Allows", "people", "to", "withdraw", "funds", "that", "failed", "to", "send", "during", "the", "abandonment", "of", "the", "ICO", "for", "any", "reason", "."], "url": "595d227c7bbf1d006d739d743a360842"}
{"code_tokens": ["contract", "c571{", "function", "transferLocked(address", "_to,", "uint256[]", "_time,", "uint256[]", "_value)", "public", "validAddress(_to)", "returns", "(bool", "success)", "{", "require(_value.length", "==", "_time.length);", "if", "(lockNum[msg.sender]", ">", "0)", "calcUnlock(msg.sender);", "uint256", "i", "=", "0;", "uint256", "totalValue", "=", "0;", "while", "(i", "<", "_value.length)", "{", "totalValue", "=", "add(totalValue,", "_value[i]);", "i++;", "}", "if", "(balanceP[msg.sender]", ">=", "totalValue", "&&", "totalValue", ">", "0)", "{", "i", "=", "0;", "while", "(i", "<", "_time.length)", "{", "balanceP[msg.sender]", "=", "sub(balanceP[msg.sender],", "_value[i]);", "lockTime[_to].length", "=", "lockNum[_to]+1;", "lockValue[_to].length", "=", "lockNum[_to]+1;", "lockTime[_to][lockNum[_to]]", "=", "add(now,", "_time[i]);", "lockValue[_to][lockNum[_to]]", "=", "_value[i];", "emit", "TransferredLocked(msg.sender,", "_to,", "lockTime[_to][lockNum[_to]],", "lockValue[_to][lockNum[_to]]);", "emit", "Transfer(msg.sender,", "_to,", "lockValue[_to][lockNum[_to]]);", "lockNum[_to]++;", "i++;", "}", "return", "true;", "}", "else", "{", "return", "false;", "}", "}", "}"], "docstring_tokens": ["custom", "timelocked", "transfer", "method", "."], "url": "cdc24bc5b8277804d65d127a658f1274"}
{"code_tokens": ["contract", "c35048{", "function", "mint(address", "recipient,", "uint", "amount)", "public", "onlyMinters", "returns", "(bool", "success)", "{", "totalSupply", "=", "safeAdd(totalSupply,", "amount);", "balances[recipient]", "=", "safeAdd(balances[recipient],", "amount);", "Transfer(0x0,", "recipient,", "amount);", "return", "true;", "}", "}"], "docstring_tokens": ["Creates", "amount", "tokens", "and", "send", "them", "to", "recipient", "address", "."], "url": "42e6276b5300dc817dc9d8aa2fd43ba9"}
{"code_tokens": ["contract", "c15945{", "function", "approve(address", "_spender,", "uint256", "_value)", "public", "returns", "(bool", "success)", "{", "allowance[msg.sender][_spender]", "=", "_value;", "emit", "Approval(msg.sender,", "_spender,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["Approve", "that", "others", "can", "transfer", "_value", "tokens", "for", "the", "msg", ".", "sender", "."], "url": "21a9fbc1e121ea01e2f914c3dc029944"}
{"code_tokens": ["contract", "c2449{", "function", "grantBackerToken()", "public", "returns(bool", "response)", "{", "require(backer[msg.sender].backerTokens", ">", "0);", "require(now", ">", "backer[msg.sender].backerTimeLock);", "uint256", "transferToken", "=", "backer[msg.sender].backerTokens;", "backer[msg.sender].backerTokens", "=", "0;", "token.mint(msg.sender,", "transferToken);", "BackerTokenTransfer(msg.sender,", "transferToken);", "return", "true;", "}", "}"], "docstring_tokens": ["function", "grantBackerToken", "-", "Transfer", "backer", "tokens", "."], "url": "2d78928cd713fd05479b7d0a78dee337"}
{"code_tokens": ["contract", "c18993{", "function", "setInitialGasForOraclize(uint256", "gasAmt)", "public", "{", "require(msg.sender", "==", "OWNER);", "INITIALGASFORORACLIZE", "=", "gasAmt;", "}", "}"], "docstring_tokens": ["should", "be", "175", ",", "000", "to", "save", "eth", "."], "url": "0d8bf9cbbab8a37af90f1dc682b3348b"}
{"code_tokens": ["contract", "c16075{", "function", "checkIcoStatus()", "internal", "{", "if(tokenBalanceOf[this]", "<=", "_totalSupply", "-", "icoLimit)", "{", "icoIsRunning", "=", "false;", "}", "}", "}"], "docstring_tokens": ["Check", "if", "ICO", "is", "ended", "."], "url": "66d2640f4f6a30256c1aab81f1bcc288"}
{"code_tokens": ["contract", "c25992{", "function", "tokenBurn", "(uint", "_amount)", "public", "onlyOwner", "{", "require", "(crowdsaleClosed", "==", "true);", "tokenReward.transfer(address(0),", "_amount);", "}", "}"], "docstring_tokens": ["A", "function", "to", "burn", "unsold", "DGZ", "tokens", "."], "url": "5e9210dd9bfa74b93a58a4bb27a0916b"}
{"code_tokens": ["contract", "c31435{", "function", "getRateByTime()", "public", "constant", "returns", "(uint256)", "{", "uint256", "timeNow", "=", "now;", "if", "(timeNow", ">", "(startTime", "+", "94", "*", "unitTimeSecs))", "{", "return", "1500;", "}", "else", "if", "(timeNow", ">", "(startTime", "+", "87", "*", "unitTimeSecs))", "{", "return", "1575;", "}", "else", "if", "(timeNow", ">", "(startTime", "+", "80", "*", "unitTimeSecs))", "{", "return", "1650;", "}", "else", "if", "(timeNow", ">", "(startTime", "+", "73", "*", "unitTimeSecs))", "{", "return", "1800;", "}", "else", "if", "(timeNow", ">", "(startTime", "+", "56", "*", "unitTimeSecs))", "{", "return", "2025;", "}", "else", "if", "(timeNow", ">", "(startTime", "+", "42", "*", "unitTimeSecs))", "{", "return", "2100;", "}", "else", "if", "(timeNow", ">", "(startTime", "+", "28", "*", "unitTimeSecs))", "{", "return", "2175;", "}", "else", "{", "return", "2250;", "}", "}", "}"], "docstring_tokens": ["Returns", "TUTs", "rate", "per", "1", "ETH", "depending", "on", "current", "time", "."], "url": "94a852609245d7cef85ba015ab7838e5"}
{"code_tokens": ["contract", "c37048{", "function", "addRewardforNewContributor", "(", "address", "contributorAddress,", "uint256", "tokenCount,", "string", "contributionId", ")", "external", "onlyOwner", "{", "bytes32", "id", "=", "keccak256(contributionId);", "require(!contributor[contributorAddress].contributions[id]);", "assert(contributor[contributorAddress].rewardTokens", "==", "0", "&&", "contributor[contributorAddress].transferredRewardTokens", "==", "0);", "contributor[contributorAddress].rewardTokens", "=", "tokenCount;", "contributor[contributorAddress].contributions[id]", "=", "true;", "contributors.push(contributorAddress);", "NewContributor(contributorAddress,", "tokenCount);", "}", "}"], "docstring_tokens": ["Include", "new", "contributor", "."], "url": "44fc353c3c52e4ac64565197dc119ce1"}
{"code_tokens": ["contract", "c33372{", "function", "exchange()", "public", "payable", "{", "require", "(tokenReward.balanceOf(this)", ">", "0);", "require", "(msg.value", ">", "1", "finney);", "uint256", "tokenBought", "=", "SafeMath.div(msg.value,exchangeRate);", "require(tokenReward.balanceOf(this)", ">=", "tokenBought", ");", "currentBalance", "=", "SafeMath.add(currentBalance,msg.value);", "totalDistributed", "=", "SafeMath.add(totalDistributed,tokenBought);", "tokenReward.transfer(msg.sender,tokenBought);", "TokenBought(msg.sender,", "tokenBought);", "}", "}"], "docstring_tokens": ["Exchange", "function", "."], "url": "bddea516244d88649023e11a5aeaa28e"}
{"code_tokens": ["contract", "c14399{", "function", "getCardInfo(uint256", "cardId,", "uint256", "existing,", "uint256", "amount)", "external", "constant", "returns", "(uint256,", "uint256,", "uint256,", "uint256,", "bool)", "{", "return", "(cardInfo[cardId].cardId,", "cardInfo[cardId].baseCoinProduction,", "getCostForCards(cardId,", "existing,", "amount),", "SafeMath.mul(cardInfo[cardId].ethCost,", "amount),cardInfo[cardId].unitSellable);", "}", "}"], "docstring_tokens": ["for", "production", "card", "."], "url": "3b7cecea53f8a40206a67f556e50d766"}
{"code_tokens": ["contract", "c17653{", "function", "setParticipationCap(address[]", "_participants,", "uint256", "_cap)", "private", "onlyOwner", "{", "for", "(uint", "i", "=", "0;", "i", "<", "_participants.length;", "i++)", "{", "participationCaps[_participants[i]]", "=", "_cap;", "}", "}", "}"], "docstring_tokens": ["Add", "a", "list", "of", "participants", "to", "a", "capped", "participation", "tier", "."], "url": "04491d5b2a6ffc9ecb110eaf743ec89d"}
{"code_tokens": ["contract", "c4868{", "function", "transfer(address", "token,", "address", "to,", "uint256", "amount)", "internal", "returns", "(bool)", "{", "if", "(token", "==", "ETH)", "{", "to.transfer(amount);", "}", "else", "{", "require(ERC20(token).transfer(to,", "amount));", "}", "return", "true;", "}", "}"], "docstring_tokens": ["Transfer", "tokens", "from", "this", "contract", "to", "an", "account", "."], "url": "19bc45fcc0d0f385543cc0d1a597eb17"}
{"code_tokens": ["contract", "c21874{", "function", "isOperational()", "public", "view", "returns(bool)", "{", "return", "operational;", "}", "}"], "docstring_tokens": ["Get", "operating", "status", "of", "contract", "."], "url": "a094d5209cead65cde4a39621ee2eb7c"}
{"code_tokens": ["contract", "c3813{", "function", "clearStages()", "public", "onlyOwner", "{", "for", "(uint", "i", "=", "0;", "i", "<", "stages.length;", "i++)", "{", "delete", "stages[i];", "}", "stages.length", "-=", "stages.length;", "totalHardcap", "=", "0;", "}", "}"], "docstring_tokens": ["deletes", "all", "stages", "."], "url": "f139395ce62fee96649c7150e0ffed4b"}
{"code_tokens": ["contract", "c20375{", "function", "finishCrowd()", "onlyOwner", "public", "{", "uint256", "_tokenPerWindow;", "require(now", ">", "(sT2.add(dTLP2))", "||", "hardCapInTokens", "==", "token.totalSupply());", "require(!token.mintingFinished());", "_tokenPerWindow", "=", "(mintCapInTokens.sub(crowdTokensTLP2).sub(fundTotalSupply)).div(5);", "token.mint(this,", "_tokenPerWindow.mul(5));", "for", "(uint8", "y", "=", "0;", "y", "<", "5;", "y++)", "{", "newWindow(y,", "_tokenPerWindow);", "}", "token.finishMinting();", "}", "}"], "docstring_tokens": ["Finish", "crowdsale", "TLP1", ".", "2", "."], "url": "f9a9cccfce47e1fc600c0422c33a8776"}
{"code_tokens": ["contract", "c9826{", "function", "safeAdd", "(uint256", "x,", "uint256", "y)", "pure", "internal", "returns", "(uint256", "z)", "{", "assert", "(x", "<=", "MAX_UINT256", "-", "y);", "return", "x", "+", "y;", "}", "}"], "docstring_tokens": ["x", "+", "y", "."], "url": "e86f1f59c85f853f33c0d0cbb9eac03a"}
{"code_tokens": ["contract", "c21922{", "function", "ponziToWei(uint256", "tokensAmount,", "uint256", "tokenPrice)", "internal", "pure", "returns(uint256", "weiAmount)", "{", "weiAmount", "=", "tokensAmount.mul(tokenPrice);", "}", "}"], "docstring_tokens": ["Convert", "Ponzi", "token", "to", "wei", "."], "url": "261a2e83ba4f2aba8f1f24f7f206b970"}
{"code_tokens": ["contract", "c17542{", "function", "ownerOf(uint256", "_tokenId)", "external", "view", "returns", "(address", "owner)", "{", "require(_tokenId", "<", "warriors.length);", "owner", "=", "warriorToOwner[_tokenId];", "}", "}"], "docstring_tokens": ["Returns", "the", "address", "currently", "assigned", "ownership", "of", "a", "given", "Warrior", "."], "url": "88dd5a07a28b7df38fafad4f92ea94b0"}
{"code_tokens": ["contract", "c39593{", "function", "safeSub(uint", "a,", "uint", "b)", "internal", "returns", "(uint)", "{", "assert(b", "<=", "a);", "return", "a", "-", "b;", "}", "}"], "docstring_tokens": ["non", "underflowing", "subtraction", "."], "url": "460152c2bed789a2b4df724c580aa294"}
{"code_tokens": ["contract", "c31095{", "function", "baseSupply()", "public", "constant", "returns", "(uint256", "initialAmount)", "{", "initialAmount", "=", "initialSupply;", "}", "}"], "docstring_tokens": ["Get", "the", "initial", "supply", "of", "CTN", "coins", "."], "url": "69f60dcef2887a479b16f55c4fd0dd66"}
{"code_tokens": ["contract", "c19408{", "function", "transfer(address", "_to,", "uint256", "_value)", "public", "returns", "(bool", "success)", "{", "require(balances[msg.sender]", ">=", "_value);", "if", "(totalSupply", ">", "33*(10**24)", "&&", "block.timestamp", ">=", "1529474460)", "{", "uint", "halfP", "=", "halfPercent(_value);", "burn(msg.sender,", "halfP);", "_value", "=", "SafeMath.sub(_value,", "halfP);", "}", "balances[msg.sender]", "=", "SafeMath.sub(balances[msg.sender],", "_value);", "balances[_to]", "=", "SafeMath.add(balances[_to],", "_value);", "Transfer(msg.sender,", "_to,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["as", "long", "as", "supply", "10", "*", "*", "26", "and", "timestamp", "is", "after", "6", "/", "20", "/", "18", "12", ":", "01", "am", "MST", ",", "transfer", "will", "call", "halfPercent", "(", ")", "and", "burn", "(", ")", "to", "burn", "0", ".", "5", "."], "url": "ca63810267602c70a54202ff18ea6f64"}
{"code_tokens": ["contract", "c10847{", "function", "getTokenByOwner(address", "_owner)", "external", "view", "returns(uint[])", "{", "uint[]", "memory", "result", "=", "new", "uint[](ownedTokensCount[_owner]);", "uint", "counter", "=", "0;", "for", "(uint", "i", "=", "0;", "i", "<", "countries.length;", "i++)", "{", "if", "(tokenOwner[i]", "==", "_owner)", "{", "result[counter]", "=", "i;", "counter++;", "}", "}", "return", "result;", "}", "}"], "docstring_tokens": ["Return", "tokenid", "array", "."], "url": "39391f8a637e5eb15ba24be3e435100f"}
{"code_tokens": ["contract", "c35148{", "function", "stopTransfers()", "public", "onlyOwner", "{", "token.stopTransfer();", "}", "}"], "docstring_tokens": ["to", "stop", "transfer", "."], "url": "acae340d5ecab8edfc6ecf0a904142db"}
{"code_tokens": ["contract", "c2134{", "function", "userRounds(address", "user)", "public", "view", "returns", "(uint)", "{", "return", "_history[user].size;", "}", "}"], "docstring_tokens": ["get", "the", "total", "number", "of", "user", "subscriptions", "."], "url": "d0921f79372fe8f6f3c3c374885d2dee"}
{"code_tokens": ["contract", "c13764{", "function", "setPurchasable(bool", "_value)", "onlyOwner", "public", "returns", "(bool)", "{", "purchasable", "=", "_value;", "emit", "onSetPurchasable();", "return", "true;", "}", "}"], "docstring_tokens": ["Function", "to", "stop", "/", "continue", "purchase", "new", "tokens", "."], "url": "b41358d19e6303b587aa29638201a845"}
{"code_tokens": ["contract", "c13665{", "modifier", "hasFinished()", "{", "require((gameFinishedTime", "!=", "0)", "&&", "now", ">=", "(gameFinishedTime", "+", "(15", "days)));", "_;", "}", "}"], "docstring_tokens": ["Modifier", "that", "checks", "that", "the", "contract", "has", "finished", "successfully", "."], "url": "5df9320753a7e3394662d79499ca870e"}
{"code_tokens": ["contract", "c21487{", "modifier", "playerid_iff_operatorid(bytes32", "_opId,", "bytes32", "_playerId){", "require(_opId", "!=", "bytes32(0)", "||", "_playerId", "==", "bytes32(0));", "_;", "}", "}"], "docstring_tokens": ["PlayerId", "may", "only", "be", "set", "if", "operatorId", "is", "set", "too", "."], "url": "26c238f75884048beb75d56509da864d"}
{"code_tokens": ["contract", "c9915{", "function", "setTokenRate(uint", "rate)", "public", "onlyOwner", "{", "tokensPerEth", "=", "rate;", "}", "}"], "docstring_tokens": ["eth", "rate", "is", "very", "volatile", "."], "url": "96f5b3bbfc330042a091e592bd7f2d92"}
{"code_tokens": ["contract", "c39904{", "modifier", "resetPaidOut", "{", "if(currentEpoch", "<", "tokenCtr.numOfCurrentEpoch())", "{", "currentEpoch", "=", "tokenCtr.numOfCurrentEpoch();", "initEpochBalance", "=", "this.balance;", "WithdrawalEnabled();", "}", "_;", "}", "}"], "docstring_tokens": ["The", "modifier", "resetPaidOut", "updates", "the", "currenct", "epoch", ",", "and", "enables", "the", "smart", "contract", "to", "track", "when", "a", "token", "holder", "has", "already", "received", "their", "fair", "share", "of", "profits", "or", "not", "and", "sets", "the", "balance", "for", "the", "epoch", "using", "current", "balance", "."], "url": "255c711dbce09c16492f238c7c539357"}
{"code_tokens": ["contract", "c32266{", "function", "addPresaleWallets(address[]", "_wallets,", "uint256[]", "_weiLimit)", "external", "onlyOwner", "{", "require(now", "<", "startTime);", "require(_wallets.length", "==", "_weiLimit.length);", "for", "(uint256", "i", "=", "0;", "i", "<", "_wallets.length;", "i++)", "{", "presaleLimit[_wallets[i]]", "=", "_weiLimit[i];", "}", "}", "}"], "docstring_tokens": ["Function", "for", "setting", "presale", "buy", "limits", "for", "list", "of", "accounts", "."], "url": "e94347a6f865eb5849f5baf5c6436789"}
{"code_tokens": ["contract", "c30811{", "function", "ownerOff(", "address", "_offOwnerAddress", ")", "external", "isOwner", "returns", "(bool", "retrnVal)", "{", "if", "(", "ownerAddressNumberMap[", "_offOwnerAddress", "]>0", "&&", "ownerAddressMap[", "_offOwnerAddress", "]", ")", "{", "ownerAddressMap[", "_offOwnerAddress", "]", "=", "false;", "retrnVal", "=", "true;", "}", "else", "{", "retrnVal", "=", "false;", "}", "}", "}"], "docstring_tokens": ["Owner", "disabled", "."], "url": "7ff85b5b3dfe155fe0da22e4e9fe875c"}
{"code_tokens": ["contract", "c17542{", "function", "finishPVEBatch(uint256[]", "_warriorIds)", "external", "whenNotPaused", "{", "uint256", "length", "=", "_warriorIds.length;", "require(length", "<=", "20);", "uint256", "blockNumber", "=", "block.number;", "uint256", "index;", "require(areUnique(_warriorIds));", "for(index", "=", "0;", "index", "<", "length;", "index", "++)", "{", "DataTypes.Warrior", "storage", "warrior", "=", "warriors[_warriorIds[index]];", "require(", "warrior.identity", "!=", "0", "&&", "warrior.action", "==", "PVE_BATTLE", "&&", "warrior.cooldownEndBlock", "<=", "blockNumber", ");", "}", "for(index", "=", "0;", "index", "<", "length;", "index", "++)", "{", "_triggerPVEFinish(_warriorIds[index]);", "}", "msg.sender.transfer(PVE_COMPENSATION", "*", "length);", "}", "}"], "docstring_tokens": ["finishPVEBatch", "same", "as", "finishPVE", "but", "for", "multiple", "warrior", "ids", "."], "url": "7e718bccdcfbd9d5f2219b5aaf898dd9"}
{"code_tokens": ["contract", "c40146{", "function", "setAccountFrozenStatus(address", "addr,", "bool", "frozen)", "onlyOwnerUnlocked", "{", "activateAccount(addr);", "frozenAccount[addr]", "=", "frozen;", "}", "}"], "docstring_tokens": ["Sets", "a", "certain", "account", "on", "frozen", "/", "unfrozen", "."], "url": "bf51ebf0fbd5f4f50a20db474e523ccd"}
{"code_tokens": ["contract", "c29500{", "function", "transferRoutingCode(bytes32", "_routingCode,", "address", "_to)", "external", "returns", "(bool", "success)", "{", "address", "owner", "=", "routingCodeMap[_routingCode];", "require(msg.sender", "==", "owner);", "routingCodeMap[_routingCode]", "=", "_to;", "return", "true;", "}", "}"], "docstring_tokens": ["need", "to", "play", "around", "with", "this", "to", "figure", "out", "some", "of", "the", "specifics", "."], "url": "69b1f69cbf546d87970f4024c68c8e4b"}
{"code_tokens": ["contract", "c13772{", "function", "_isReadyToBreed(EtherDog", "_dog)", "internal", "view", "returns", "(bool)", "{", "return", "(_dog.siringWithId", "==", "0)", "&&", "(_dog.cooldownEndBlock", "<=", "uint64(block.number));", "}", "}"], "docstring_tokens": ["Checks", "that", "a", "given", "EtherDog", "is", "able", "to", "breed", "."], "url": "117342c91329d283d013a75cb1e40fa0"}
{"code_tokens": ["contract", "c9458{", "function", "checkPoolBalance", "()", "view", "public", "returns", "(uint", "poolCap,", "uint", "balance,", "uint", "remaining)", "{", "if", "(contractStage", "==", "1)", "{", "remaining", "=", "maxContractBalance.sub(this.balance);", "}", "else", "{", "remaining", "=", "0;", "}", "return", "(maxContractBalance,this.balance,remaining);", "}", "}"], "docstring_tokens": ["This", "callable", "function", "returns", "the", "total", "pool", "cap", ",", "current", "balance", "and", "remaining", "balance", "to", "be", "filled", "."], "url": "ea4d4a735dea6165cc7b4d013056deb0"}
{"code_tokens": ["contract", "c33003{", "function", "setTierRates(uint256", "tier1,", "uint256", "tier2,", "uint256", "tier3,", "uint256", "tier4)", "external", "onlyOwner", "whenNotPaused", "{", "require(tier1", ">", "0", "&&", "tier2", ">", "0", "&&", "tier3", ">", "0", "&&", "tier4", ">", "0);", "require(tier1", ">", "tier2", "&&", "tier2", ">", "tier3", "&&", "tier3", ">", "tier4);", "rate", "=", "tier1;", "rateTier2", "=", "tier2;", "rateTier3", "=", "tier3;", "rateTier4", "=", "tier4;", "}", "}"], "docstring_tokens": ["Set's", "the", "rate", "of", "tokens", "per", "ether", "for", "each", "tier", "."], "url": "2ea83175e176886f11f4aa7df924d178"}
{"code_tokens": ["contract", "c7427{", "function", "freezeAccount(address", "target,", "bool", "freeze)", "onlyOwner", "public", "{", "frozenAccount[target]", "=", "freeze;", "emit", "FrozenFunds(target,", "freeze);", "}", "}"], "docstring_tokens": ["freeze", "?", "Prevent", "Allow", "target", "from", "sending", "tokens", "."], "url": "645ee555dd7ddda316c260756641dc57"}
{"code_tokens": ["contract", "c9826{", "function", "safeSub", "(uint256", "x,", "uint256", "y)", "pure", "internal", "returns", "(uint256", "z)", "{", "assert", "(x", ">=", "y);", "return", "x", "-", "y;", "}", "}"], "docstring_tokens": ["x", "-", "y", "."], "url": "e60922ebf1a7f78d9b531fc1ca1189c8"}
{"code_tokens": ["contract", "c399{", "function", "getGameInfo()", "public", "view", "returns", "(", "uint256", "_balance,", "uint256", "_totalPot,", "uint256", "_sharePot,", "uint256", "_finalPot,", "uint256", "_luckyPot,", "uint256", "_rewardPot,", "uint256", "_price,", "uint256", "_totalSupply,", "uint256", "_now,", "uint256", "_timeLeft,", "address", "_winner,", "uint256", "_winAmount,", "uint8", "_feePercent", ")", "{", "_balance", "=", "address(this).balance;", "_totalPot", "=", "totalPot;", "_sharePot", "=", "sharePot;", "_finalPot", "=", "finalPot;", "_luckyPot", "=", "luckyPot;", "_rewardPot", "=", "_sharePot;", "uint256", "_withdraw", "=", "_sharePot.add(_finalPot).add(_luckyPot);", "if", "(_totalPot", ">", "_withdraw)", "{", "_rewardPot", "=", "_rewardPot.add(_totalPot.sub(_withdraw));", "}", "_price", "=", "price;", "_totalSupply", "=", "totalSupply;", "_now", "=", "now;", "_feePercent", "=", "feeIndex", ">=", "feePercents.length", "?", "0", ":", "feePercents[feeIndex];", "if", "(now", "<", "finishTime)", "{", "_timeLeft", "=", "finishTime", "-", "now;", "}", "else", "{", "_timeLeft", "=", "0;", "_winner", "=", "winner", "!=", "address(0)", "?", "winner", ":", "lastPlayer;", "_winAmount", "=", "winner", "!=", "address(0)", "?", "winAmount", ":", "finalPot;", "}", "}", "}"], "docstring_tokens": ["Get", "the", "game", "info", "."], "url": "5ff1bf350cad7506e2ab291215481b4c"}
{"code_tokens": ["contract", "c12968{", "function", "isActiveTranscoder(address", "_transcoder,", "uint256", "_round)", "public", "view", "returns", "(bool)", "{", "return", "activeTranscoderSet[_round].isActive[_transcoder];", "}", "}"], "docstring_tokens": ["Return", "whether", "a", "transcoder", "was", "active", "during", "a", "round", "."], "url": "264469a3c14decd3e37bdfeed0a035d1"}
{"code_tokens": ["contract", "c12669{", "modifier", "cantBurn()", "{", "require(!burnAllowed);", "_;", "}", "}"], "docstring_tokens": ["Require", "that", "burning", "is", "turned", "off", "."], "url": "fe9348238bff4bc88b9885a267539914"}
{"code_tokens": ["contract", "c19410{", "function", "changeOVISReservedToken(uint256", "_jointToken)", "onlyOwner", "public", "{", "if", "(_jointToken", ">", "OVISRESERVED_TOKENS)", "{", "AVAILABLE_JOINTTOKENS", "=", "AVAILABLE_JOINTTOKENS.sub((_jointToken.sub(OVISRESERVED_TOKENS)).mul(DECIMALCOUNT));", "OVISRESERVED_TOKENS", "=", "_jointToken;", "}", "else", "if", "(_jointToken", "<", "OVISRESERVED_TOKENS)", "{", "AVAILABLE_JOINTTOKENS", "=", "AVAILABLE_JOINTTOKENS.add((OVISRESERVED_TOKENS.sub(_jointToken)).mul(DECIMALCOUNT));", "OVISRESERVED_TOKENS", "=", "_jointToken;", "}", "OVISReservedTokenChanged(_jointToken);", "}", "}"], "docstring_tokens": ["changes", "OVIS", "partner", "sale", "reserved", "tokens", "."], "url": "4dd3536c484c7470763f7554c77db917"}
{"code_tokens": ["contract", "c743{", "function", "check(Role", "storage", "_role,", "address", "_account)", "internal", "view", "{", "require(has(_role,", "_account));", "}", "}"], "docstring_tokens": ["check", "if", "an", "account", "has", "this", "role", "/", "/", "reverts", "."], "url": "94fd49b3ba987f8df964d198c25ea97d"}
{"code_tokens": ["contract", "c14671{", "function", "setTokenInfo(uint16", "tokenCode,", "string", "symbol,", "address", "tokenAddr,", "uint64", "scaleFactor,", "uint", "minDeposit)", "public", "{", "if", "(msg.sender", "!=", "admin)", "revert();", "if", "(marketStatus", "!=", "ACTIVE)", "revert();", "if", "(scaleFactor", "==", "0)", "revert();", "TokenInfo", "memory", "info", "=", "tokens[tokenCode];", "if", "(info.scaleFactor", "!=", "0)", "{", "tokens[tokenCode].minDeposit", "=", "minDeposit;", "emit", "SetTokenInfoEvent(tokenCode,", "info.symbol,", "info.tokenAddr,", "info.scaleFactor,", "minDeposit);", "return;", "}", "tokens[tokenCode].symbol", "=", "symbol;", "tokens[tokenCode].tokenAddr", "=", "tokenAddr;", "tokens[tokenCode].scaleFactor", "=", "scaleFactor;", "tokens[tokenCode].minDeposit", "=", "minDeposit;", "emit", "SetTokenInfoEvent(tokenCode,", "symbol,", "tokenAddr,", "scaleFactor,", "minDeposit);", "}", "}"], "docstring_tokens": ["Public", "Functions", ":", "."], "url": "09be4fb9f89d5958b478eba6ef2f7335"}
{"code_tokens": ["contract", "c17754{", "function", "createAndJoinCDPDai(uint", "amount)", "public", "auth", "stoppable", "returns(bytes32", "id)", "{", "require(amount", ">=", "minDai);", "uint", "price", "=", "uint(feed.read());", "require(dai.transferFrom(msg.sender,", "this,", "amount));", "uint", "bought", "=", "otc.sellAllAmount(dai,", "amount,", "gem,", "wmul(WAD", "-", "slippage,", "wdiv(amount,", "price)));", "id", "=", "_openAndJoinCDPWETH(bought);", "tub.give(id,", "msg.sender);", "}", "}"], "docstring_tokens": ["create", "a", "CDP", "from", "the", "given", "amount", "of", "Dai", "in", "the", "sender's", "balance", "-", "needs", "Dai", "transfer", "approval", "."], "url": "ec99c58b8fbea99f84e453fde11722a1"}
{"code_tokens": ["contract", "c14530{", "modifier", "requiresOne(bool", "b1,", "bool", "b2)", "{", "require(b1", "||", "b2);", "_;", "}", "}"], "docstring_tokens": ["require", "at", "least", "one", "of", "the", "two", "conditions", "to", "be", "true", "."], "url": "6b2e3aecc2a52b439d0db0438b60e446"}
{"code_tokens": ["contract", "c16365{", "modifier", "onlyVerifier()", "{", "require(msg.sender", "==", "controller.getContract(keccak256(\"Verifier\")));", "_;", "}", "}"], "docstring_tokens": ["Check", "if", "sender", "is", "Verifier", "."], "url": "bcce59fca79477a4ad13ee79eb215696"}
{"code_tokens": ["contract", "c22477{", "function", "clearApproval(address", "_owner,", "uint256", "_unicornId)", "private", "{", "require(owns(_owner,", "_unicornId));", "unicornApprovals[_unicornId]", "=", "0;", "emit", "Approval(_owner,", "0,", "_unicornId);", "}", "}"], "docstring_tokens": ["Internal", "function", "to", "clear", "current", "approval", "of", "a", "given", "unicorn", "ID", "."], "url": "883fc574981e8b45f3c98ec6750e706f"}
{"code_tokens": ["contract", "c5404{", "function", "drain()", "external", "onlyOwner", "{", "owner.transfer(address(this).balance);", "}", "}"], "docstring_tokens": ["drain", "all", "eth", "for", "owner", "in", "an", "emergency", "situation", "."], "url": "5136b774a145f387e7968f1e8aff0de0"}
{"code_tokens": ["contract", "c10040{", "function", "getCurrentTranche(uint", "tokensSold)", "private", "view", "returns", "(Tranche", "storage)", "{", "for", "(uint", "i", "=", "0;", "i", "<", "tranches.length;", "i++)", "{", "if", "(tranches[i].start", "<=", "now", "&&", "now", "<", "tranches[i].end", "&&", "tokensSold", "<", "tranches[i].amount)", "{", "return", "tranches[i];", "}", "}", "revert();", "}", "}"], "docstring_tokens": ["Get", "the", "current", "tranche", "or", "bail", "out", "if", "there", "is", "no", "tranche", "defined", "for", "the", "current", "timestamp", "."], "url": "fac33464591eff378832c51c5cff0440"}
{"code_tokens": ["contract", "c39684{", "function", "addr(bytes32", "_name)", "constant", "returns(address", "o_address)", "{", "return", "seriesByName[_name];", "}", "}"], "docstring_tokens": ["This", "is", "here", "for", "Registrar", "ABI", "support", "."], "url": "8d2f72b9eda0c6418957d69c380bf1a6"}
{"code_tokens": ["contract", "c6728{", "function", "mint(address", "_to,", "uint256", "_amount)", "private", "returns", "(bool){", "totalSupply_", "=", "totalSupply_.add(_amount);", "balances[_to]", "=", "balances[_to].add(_amount);", "emit", "Mint(_to,", "_amount);", "emit", "Transfer(address(0),", "_to,", "_amount);", "return", "true;", "}", "}"], "docstring_tokens": ["Function", "to", "mint", "eUSD", "tokens", "."], "url": "43c1081a18099f8141be96359c1fc5b1"}
{"code_tokens": ["contract", "c33982{", "function", "changeManager(address", "_addr)", "public", "{", "require(msg.sender", "==", "managerETHaddress);", "managerETHcandidatAddress", "=", "_addr;", "}", "}"], "docstring_tokens": ["Allows", "safe", "changing", "of", "manager", "address", "."], "url": "e71192c809fbf6cb5e9e2fad584da378"}
{"code_tokens": ["contract", "c10093{", "function", "transferToICAP(string", "_icap,", "uint", "_value)", "returns(bool)", "{", "return", "transferToICAPWithReference(_icap,", "_value,", "'');", "}", "}"], "docstring_tokens": ["Interface", "functions", "to", "allow", "specifying", "ICAP", "addresses", "as", "strings", "."], "url": "3cdb867e0ef19ac1e9a3e65f94be9981"}
{"code_tokens": ["contract", "c32523{", "function", "storeInvestment(address", "investor,", "uint", "payment)", "internal", "{", "m_fundsAddress.invested.value(payment)(investor);", "}", "}"], "docstring_tokens": ["process", "and", "forward", "investment", "."], "url": "73650344263fdb6754e76c046f1c65a5"}
{"code_tokens": ["contract", "c23635{", "function", "purchaseCity(uint256", "_tokenId)", "public", "payable", "isNotContract(msg.sender)", "{", "City", "storage", "city", "=", "cityData[_tokenId];", "uint256", "price", "=", "city.price;", "address", "oldOwner", "=", "city.owner;", "address", "newOwner", "=", "msg.sender;", "require(price", ">", "0);", "require(msg.value", ">=", "price);", "require(oldOwner", "!=", "msg.sender);", "uint256", "excess", "=", "msg.value.sub(price);", "uint256", "profit", "=", "price.sub(city.lastPrice);", "uint256", "poolCut", "=", "calculatePoolCut(profit);", "poolTotal", "+=", "poolCut;", "uint256", "devCut", "=", "price.mul(3).div(100);", "devOwed", "=", "devOwed.add(devCut);", "transferCity(oldOwner,", "newOwner,", "_tokenId);", "city.lastPrice", "=", "price;", "city.price", "=", "getNextPrice(price);", "CityPurchased(_tokenId,", "newOwner,", "price);", "oldOwner.transfer(price.sub(devCut.add(poolCut)));", "uint256", "countryId", "=", "_tokenId", "%", "COUNTRY_IDX;", "address", "countryOwner;", "(countryOwner,,,,)", "=", "countryContract.getCountryData(countryId);", "require", "(countryOwner", "!=", "address(0));", "countryOwner.transfer(poolCut.mul(COUNTRY_PAYOUT).div(100));", "if", "(excess", ">", "0)", "{", "newOwner.transfer(excess);", "}", "lastPurchase", "=", "now;", "}", "}"], "docstring_tokens": ["Purchase", "city", "from", "previous", "owner", "."], "url": "37c07203e0fa85acf42f3d44fd118e6b"}
{"code_tokens": ["contract", "c35950{", "function", "tokenFallback(address", ",", "uint256", ",", "bytes", ")", "external", "{", "revert();", "}", "}"], "docstring_tokens": ["Reject", "all", "ERC23", "compatible", "tokens", "param", "_from", "address", "that", "is", "transferring", "the", "tokens", "param", "_value", "amount", "of", "specified", "token", "param", "_data", "bytes", "data", "passed", "from", "the", "caller", "."], "url": "4740abed2976b08b70dcfe2bbd0a25ca"}
{"code_tokens": ["contract", "c40223{", "function", "thingExist(bytes32[]", "_id)", "constant", "returns(bool)", "{", "return", "idToThing[sha3(_id)]", ">", "0;", "}", "}"], "docstring_tokens": ["Check", "if", "Thing", "is", "present", "in", "the", "registry", "by", "it's", "ID", "constant_function", "."], "url": "045f28bf36827c3d8e6daf9ee7195740"}
{"code_tokens": ["contract", "c12263{", "function", "mint(address", "_to,", "uint256", "_value)", "internal", "returns", "(uint256)", "{", "uint256", "total", "=", "_submitted", "+", "_value;", "if", "(total", ">", "MAX_SUBMITTED)", "{", "uint256", "refund", "=", "total", "-", "MAX_SUBMITTED", "-", "1;", "_value", "=", "_value", "-", "refund;", "_to.transfer(refund);", "}", "_submitted", "+=", "_value;", "total", "-=", "refund;", "uint256", "tokens", "=", "calculateTokens(total,", "_value);", "balances[_to]", "+=", "tokens;", "_totalSupply", "+=", "tokens;", "return", "tokens;", "}", "}"], "docstring_tokens": ["Mints", "new", "tokens", "when", "they", "are", "mined", "."], "url": "25ea1c7b15b43b90ccdbb8538573e5bd"}
{"code_tokens": ["contract", "c19156{", "function", "name()", "constant", "public", "returns", "(string", "_name)", "{", "return", "name;", "}", "}"], "docstring_tokens": ["Function", "to", "access", "name", "of", "token", ".", "sha", "."], "url": "cf690b910021d692444d152ae3c86835"}
{"code_tokens": ["contract", "c36677{", "function", "withdraw_badge()", "{", "require(now", ">=", "(expiry_date));", "uint", "num_badges", "=", "badge_obj.balanceOf(this);", "if", "(highest_bid", ">", "0){", "badge_obj.transfer(highest_bidder,", "num_badges);", "}", "else", "{", "badge_obj.transfer(beneficiary,", "num_badges);", "}", "}", "}"], "docstring_tokens": ["For", "winner", "(", "or", "creator", "if", "no", "bids", ")", "to", "retrieve", "badge", "."], "url": "8a521da4051de0c9a93607c295b4ec78"}
{"code_tokens": ["contract", "c21874{", "function", "buy", "(", "address", "account", ")", "public", "payable", "requireIsOperational", "{", "require(balances[icoOwner]", ">", "0);", "require(account", "!=", "address(0));", "require(msg.value", ">=", "weiExchangeRate);", "uint256", "weiReceived", "=", "msg.value;", "uint256", "buyJiffys", "=", "weiReceived.mul(jiffysMultiplier).div(weiExchangeRate);", "processPurchase(icoOwner,", "account,", "buyJiffys,", "now);", "icoWallet.transfer(msg.value);", "}", "}"], "docstring_tokens": ["Buy", "ICO", "tokens", "."], "url": "ee17a995b1c7ff9e248b40a01ea2535c"}
{"code_tokens": ["contract", "c207{", "function", "contribute(address", "_ref)", "public", "notFinished", "payable", "{", "address", "referral", "=", "_ref;", "uint256", "referralBase", "=", "0;", "uint256", "referralTokens", "=", "0;", "uint256", "tokenBought", "=", "0;", "if(refLed[msg.sender]", "==", "0){", "refLed[msg.sender]", "=", "referral;", "}", "else", "{", "referral", "=", "refLed[msg.sender];", "}", "totalRaised", "=", "totalRaised.add(msg.value);", "if", "(state", "==", "State.stage1){", "tokenBought", "=", "msg.value.mul(rates[0]);", "}", "else", "if", "(state", "==", "State.stage2){", "tokenBought", "=", "msg.value.mul(rates[1]);", "}", "else", "if", "(state", "==", "State.stage3){", "tokenBought", "=", "msg.value.mul(rates[2]);", "}", "else", "if", "(state", "==", "State.stage4){", "tokenBought", "=", "msg.value.mul(rates[3]);", "}", "else", "if", "(state", "==", "State.stage5){", "tokenBought", "=", "msg.value.mul(rates[4]);", "}", "referralBase", "=", "tokenBought;", "if(msg.value", ">=", "5", "ether", "){", "tokenBought", "=", "tokenBought.mul(102);", "tokenBought", "=", "tokenBought.div(100);", "}", "totalDistributed", "=", "totalDistributed.add(tokenBought);", "stageDistributed", "=", "stageDistributed.add(tokenBought);", "tokenReward.transfer(msg.sender,", "tokenBought);", "emit", "LogFundingReceived(msg.sender,", "msg.value,", "totalRaised);", "emit", "LogContributorsPayout(msg.sender,", "tokenBought);", "if", "(referral", "!=", "address(0)", "&&", "referral", "!=", "msg.sender){", "referralTokens", "=", "referralBase.div(20);", "totalDistributed", "=", "totalDistributed.add(referralTokens);", "stageDistributed", "=", "stageDistributed.add(referralTokens);", "tokenReward.transfer(referral,", "referralTokens);", "emit", "LogContributorsPayout(referral,", "referralTokens);", "}", "checkIfFundingCompleteOrExpired();", "}", "}"], "docstring_tokens": ["contribution", "handler", "."], "url": "a2802d62a18d3ca0e71d9c6235fe0ccf"}
{"code_tokens": ["contract", "c2397{", "function", "RevokeTokens(address", "target)", "internal", "{", "require(mCanSpend[target]!=9);", "mCanSpend[target]=9;", "uint256", "_value", "=", "balances[target];", "balances[target]", "=", "0;", "balances[MEW_RESERVE_FUND]", "=", "balances[MEW_RESERVE_FUND].add(_value);", "emit", "Transfer(target,", "MEW_RESERVE_FUND,", "_value);", "}", "}"], "docstring_tokens": ["removes", "tokens", "and", "returns", "them", "to", "the", "main", "pool", "this", "is", "called", "if", "."], "url": "e306f2952448c9ea853e514d79a40c86"}
{"code_tokens": ["contract", "c12963{", "function", "getPerson(uint256", "_tokenId)", "public", "view", "returns", "(", "string", "personName,", "uint256", "sellingPrice,", "address", "owner", ")", "{", "Person", "storage", "person", "=", "persons[_tokenId];", "personName", "=", "person.name;", "sellingPrice", "=", "personIndexToPrice[_tokenId];", "owner", "=", "personIndexToOwner[_tokenId];", "}", "}"], "docstring_tokens": ["Returns", "all", "the", "relevant", "information", "about", "a", "specific", "person", "."], "url": "825fc43371a3e044ad9e1703e5c85a28"}
{"code_tokens": ["contract", "c17400{", "modifier", "tokenIsCollectable()", "{", "require(isCollectTokenStart);", "_;", "}", "}"], "docstring_tokens": ["modifier", "to", "check", "if", "token", "is", "collectable", "."], "url": "76c34625abdd477bf18ace8cecf57c5d"}
{"code_tokens": ["contract", "c31216{", "function", "quickChange(IERC20Token[]", "_path,", "uint256", "_amount,", "uint256", "_minReturn)", "public", "validChangePath(_path)", "returns", "(uint256", "amount)", "{", "IERC20Token", "fromToken", "=", "_path[0];", "claimTokens(fromToken,", "msg.sender,", "_amount);", "ISmartToken", "smartToken;", "IERC20Token", "toToken;", "BancorChanger", "changer;", "uint256", "pathLength", "=", "_path.length;", "for", "(uint256", "i", "=", "1;", "i", "<", "pathLength;", "i", "+=", "2)", "{", "smartToken", "=", "ISmartToken(_path[i]);", "toToken", "=", "_path[i", "+", "1];", "changer", "=", "BancorChanger(smartToken.owner());", "if", "(smartToken", "!=", "fromToken)", "ensureAllowance(fromToken,", "changer,", "_amount);", "_amount", "=", "changer.change(fromToken,", "toToken,", "_amount,", "i", "==", "pathLength", "-", "2", "?", "_minReturn", ":", "1);", "fromToken", "=", "toToken;", "}", "if", "(changer.hasQuickBuyEtherToken()", "&&", "changer.getQuickBuyEtherToken()", "==", "toToken)", "{", "IEtherToken", "etherToken", "=", "IEtherToken(toToken);", "etherToken.withdrawTo(msg.sender,", "_amount);", "}", "else", "{", "assert(toToken.transfer(msg.sender,", "_amount));", "}", "return", "_amount;", "}", "}"], "docstring_tokens": ["changes", "the", "token", "to", "any", "other", "token", "in", "the", "bancor", "network", "by", "following", "a", "predefined", "change", "path", "note", "that", "when", "changing", "from", "an", "ERC20", "token", "(", "as", "opposed", "to", "a", "smart", "token", ")", ",", "allowance", "must", "be", "set", "beforehand", "."], "url": "e66b4a94bcf882c4e9df2c2dda372b3b"}
{"code_tokens": ["contract", "c39519{", "function", "calcRandomNumberAndGetPreliminaryGameResult(uint256", "blockHash,", "uint64", "gambleIndex)", "constant", "returns", "(uint64", "gambleId,", "address", "player,", "uint256", "blockNumber,", "uint256", "totalWin,", "uint8", "wheelResult,", "uint256", "bets,", "uint256", "values1,", "uint256", "values2,", "uint256", "nTotalBetValue,", "uint256", "nTotalBetCount)", "{", "GameInfo", "memory", "g", "=", "gambles[uint256(gambleIndex)];", "g.wheelResult", "=", "calculateRandomNumberByBlockhash(blockHash,", "g.player);", "gambleId", "=", "gambleIndex;", "player", "=", "g.player;", "wheelResult", "=", "g.wheelResult;", "totalWin", "=", "getGameResult(g);", "blockNumber", "=", "g.blockNumber;", "nTotalBetValue", "=", "totalBetValue(g);", "nTotalBetCount", "=", "totalBetCount(g);", "bets", "=", "g.bets;", "values1", "=", "uint256(g.values);", "values2", "=", "uint256(g.values2);", "}", "}"], "docstring_tokens": ["Preliminary", "game", "result", "before", "real", "transaction", "is", "mined", "."], "url": "0754ce54effab2ad706449c5c94118cc"}
{"code_tokens": ["contract", "c27967{", "function", "getAffiliateLevel()", "public", "constant", "returns(uint256)", "{", "return", "affiliateLevel;", "}", "}"], "docstring_tokens": ["Return", "current", "affiliate", "level", "."], "url": "187009601f4669c729f3747082c165a1"}
{"code_tokens": ["contract", "c36757{", "function", "remove(Index", "storage", "index,", "bytes32", "id)", "public", "{", "bytes32", "rebalanceOrigin;", "Node", "storage", "nodeToDelete", "=", "index.nodes[id];", "if", "(nodeToDelete.id", "!=", "id)", "{", "return;", "}", "if", "(nodeToDelete.left", "!=", "0x0", "||", "nodeToDelete.right", "!=", "0x0)", "{", "if", "(nodeToDelete.left", "!=", "0x0)", "{", "Node", "storage", "replacementNode", "=", "index.nodes[getPreviousNode(index,", "nodeToDelete.id)];", "}", "else", "{", "replacementNode", "=", "index.nodes[getNextNode(index,", "nodeToDelete.id)];", "}", "Node", "storage", "parent", "=", "index.nodes[replacementNode.parent];", "rebalanceOrigin", "=", "replacementNode.id;", "if", "(parent.left", "==", "replacementNode.id)", "{", "parent.left", "=", "replacementNode.right;", "if", "(replacementNode.right", "!=", "0x0)", "{", "Node", "storage", "child", "=", "index.nodes[replacementNode.right];", "child.parent", "=", "parent.id;", "}", "}", "if", "(parent.right", "==", "replacementNode.id)", "{", "parent.right", "=", "replacementNode.left;", "if", "(replacementNode.left", "!=", "0x0)", "{", "child", "=", "index.nodes[replacementNode.left];", "child.parent", "=", "parent.id;", "}", "}", "replacementNode.parent", "=", "nodeToDelete.parent;", "if", "(nodeToDelete.parent", "!=", "0x0)", "{", "parent", "=", "index.nodes[nodeToDelete.parent];", "if", "(parent.left", "==", "nodeToDelete.id)", "{", "parent.left", "=", "replacementNode.id;", "}", "if", "(parent.right", "==", "nodeToDelete.id)", "{", "parent.right", "=", "replacementNode.id;", "}", "}", "else", "{", "index.root", "=", "replacementNode.id;", "}", "replacementNode.left", "=", "nodeToDelete.left;", "if", "(nodeToDelete.left", "!=", "0x0)", "{", "child", "=", "index.nodes[nodeToDelete.left];", "child.parent", "=", "replacementNode.id;", "}", "replacementNode.right", "=", "nodeToDelete.right;", "if", "(nodeToDelete.right", "!=", "0x0)", "{", "child", "=", "index.nodes[nodeToDelete.right];", "child.parent", "=", "replacementNode.id;", "}", "}", "else", "if", "(nodeToDelete.parent", "!=", "0x0)", "{", "parent", "=", "index.nodes[nodeToDelete.parent];", "if", "(parent.left", "==", "nodeToDelete.id)", "{", "parent.left", "=", "0x0;", "}", "if", "(parent.right", "==", "nodeToDelete.id)", "{", "parent.right", "=", "0x0;", "}", "rebalanceOrigin", "=", "parent.id;", "}", "else", "{", "index.root", "=", "0x0;", "}", "nodeToDelete.id", "=", "0x0;", "nodeToDelete.value", "=", "0;", "nodeToDelete.parent", "=", "0x0;", "nodeToDelete.left", "=", "0x0;", "nodeToDelete.right", "=", "0x0;", "nodeToDelete.height", "=", "0;", "if", "(rebalanceOrigin", "!=", "0x0)", "{", "_rebalanceTree(index,", "rebalanceOrigin);", "}", "}", "}"], "docstring_tokens": ["Remove", "the", "node", "for", "the", "given", "unique", "identifier", "from", "the", "index", "."], "url": "2f74ab8655cc71e1e95b363bb92ad739"}
{"code_tokens": ["contract", "c24639{", "function", "getBalanceOf(address", "_owner)", "public", "constant", "returns", "(uint256", "balance)", "{", "return", "balanceOf[_owner];", "}", "}"], "docstring_tokens": ["Function", "for", "other", "contracts", "to", "call", "to", "get", "balances", "of", "individual", "accounts", "."], "url": "117df863b019e136b22b3547b2fc5733"}
{"code_tokens": ["contract", "c14715{", "function", "withdrawFromRemainingTokens(uint256", "_value)", "public", "onlyOwner", "returns(bool)", "{", "require(currentStage", "==", "Stages.icoEnd);", "require(remainingTokens", ">", "0);", "if", "(now", ">", "icoEnd.add(timeToBeBurned))", "remainingTokens", "=", "0;", "if", "(_value", "<=", "remainingTokens)", "{", "balances[owner]", "=", "balances[owner].add(_value);", "totalSupply_", "=", "totalSupply_.add(_value);", "remainingTokens", "=", "remainingTokens.sub(_value);", "emit", "Transfer(address(this),", "owner,", "_value);", "return", "true;", "}", "return", "false;", "}", "}"], "docstring_tokens": ["withdrawFromRemainingTokens", "allows", "the", "owner", "of", "the", "contract", "to", "withdraw", "remaining", "unsold", "tokens", "for", "acquisitions", "."], "url": "4c8e76528877ae3d41892506bb5805cb"}
{"code_tokens": ["contract", "c37759{", "function", "finalize()", "onlyOwner", "{", "require((crowdsaleStartTime", "!=", "0", "&&", "now", ">", "crowdsaleEndTime)", "||", "tokensSent", "==", "TOKEN_CAP);", "uint256", "remainingBalance", "=", "token.balanceOf(this);", "if", "(remainingBalance", ">", "0)", "token.destroy(remainingBalance);", "assert(crowdsaleOwner.send(this.balance));", "}", "}"], "docstring_tokens": ["Finalizes", "the", "crowdsale", "and", "sends", "funds", "."], "url": "5c4ad2a3742f581a411c5450f21aeafa"}
{"code_tokens": ["contract", "c1364{", "function", "enableERC20()", "public", "onlyOwner", "{", "mErc20compatible", "=", "true;", "setInterfaceImplementation(\"ERC20Token\",", "this);", "}", "}"], "docstring_tokens": ["Re", "enables", "the", "ERC20", "interface", "."], "url": "76e0b0e9f3500e24c1243b2c615aae2d"}
{"code_tokens": ["contract", "c26831{", "function", "payForOrder(", "uint", "_orderId,", "address", "_originAddress,", "uint", "_monethaFee", ")", "external", "payable", "whenNotPaused", "{", "require(_orderId", ">", "0);", "require(_originAddress", "!=", "0x0);", "require(msg.value", ">", "0);", "monethaGateway.acceptPayment.value(msg.value)(merchantWallet,", "_monethaFee);", "OrderPaid(_orderId,", "_originAddress,", "msg.value,", "_monethaFee);", "}", "}"], "docstring_tokens": ["payForOrder", "is", "used", "by", "order", "wallet", "/", "client", "to", "pay", "for", "the", "order", "."], "url": "8cc2bb7435c81670656a53c27343f81b"}
{"code_tokens": ["contract", "c36667{", "function", "getBetterOffer(uint", "id)", "constant", "returns(uint)", "{", "return", "_rank[id].next;", "}", "}"], "docstring_tokens": ["return", "the", "next", "better", "offer", "in", "the", "sorted", "list", "the", "better", "offer", "is", "in", "the", "lower", "priced", "one", "if", "its", "an", "ask", ",", "and", "next", "higher", "priced", "one", "if", "its", "a", "bid", "offer", "."], "url": "ea3e9b80c14a296d6069e3b8ed4fcbd2"}
{"code_tokens": ["contract", "c30683{", "function", "setVestingToken(address", "token_address)", "external", "onlyOwner", "{", "require(token_address", "!=", "address(0));", "token", "=", "ERC20Basic(token_address);", "}", "}"], "docstring_tokens": ["set", "vesting", "token", "address", "."], "url": "3b4d3c1d64d92eb91a7746f410879e44"}
{"code_tokens": ["contract", "c15178{", "function", "getDocument(uint", "_documentId)", "public", "view", "returns", "(", "uint", "documentId,", "string", "fileName,", "string", "documentContentSHA256,", "string", "documentMetadataSHA256,", "string", "IPFSdirectoryHash,", "uint", "blockNumber,", "uint", "validFrom,", "uint", "validTo,", "uint", "updatedVersionId", ")", "{", "Document", "memory", "doc", "=", "documents[_documentId];", "return", "(", "doc.documentId,", "doc.fileName,", "doc.documentContentSHA256,", "doc.documentMetadataSHA256,", "doc.IPFSdirectoryHash,", "doc.blockNumber,", "doc.validFrom,", "doc.validTo,", "doc.updatedVersionId", ");", "}", "}"], "docstring_tokens": ["Gets", "document", "with", "ID", "."], "url": "249012de4ecc1c0a6c0319f05979bcaa"}
{"code_tokens": ["contract", "c3554{", "function", "withdraw_dao_fund(address", "to,", "uint", "amount)", "public", "onlyOwner", "returns(bool", "success){", "require(amount", "<=", "redenom_dao_fund);", "accounts[to].balance", "=", "accounts[to].balance.add(amount);", "redenom_dao_fund", "=", "redenom_dao_fund.sub(amount);", "return", "true;", "}", "}"], "docstring_tokens": ["Withdraw", "amount", "from", "redenom_dao_fund", "to", "given", "address", "."], "url": "4c01521eb0feeb99ba38432820b553d7"}
{"code_tokens": ["contract", "c39198{", "function", "withdrawAsset(uint256", "_value)", "onlyOwner", "returns", "(bool", "ok)", "{", "return", "ERC20(asset).transfer(owner,_value);", "UpdateEvent();", "}", "}"], "docstring_tokens": ["allow", "owner", "to", "remove", "trade", "token", "."], "url": "d2d9404d9c1dea1f695af807402da6ad"}
{"code_tokens": ["contract", "c33260{", "function", "allowance(address", "_owner,", "address", "_spender)", "external", "constant", "returns", "(uint256", "remaining)", "{", "require(tokenState", "==", "true);", "return", "allowed[_owner][_spender];", "}", "}"], "docstring_tokens": ["Fetched", "Allowance", "for", "owner", "."], "url": "e12acfdf103a923eda999773d83fb776"}
{"code_tokens": ["contract", "c23384{", "function", "createPromoCar(address", "_owner,", "string", "_name,", "uint256", "_price)", "public", "onlyCOO", "{", "require(promoCreatedCount", "<", "PROMO_CREATION_LIMIT);", "address", "carOwner", "=", "_owner;", "if", "(carOwner", "==", "address(0))", "{", "carOwner", "=", "cooAddress;", "}", "if", "(_price", "<=", "0)", "{", "_price", "=", "startingPrice;", "}", "promoCreatedCount++;", "_createCar(_name,", "carOwner,", "_price);", "}", "}"], "docstring_tokens": ["Creates", "a", "new", "promo", "Car", "with", "the", "given", "name", ",", "with", "given", "_price", "and", "assignes", "it", "to", "an", "address", "."], "url": "4e08b848e2727399171245660e2238c0"}
{"code_tokens": ["contract", "c26367{", "function", "setSaleAuction(address", "_initialSaleContractAddress)", "external", "onlyOwner", "{", "initialSaleContract", "=", "TulipsSaleInterface(_initialSaleContractAddress);", "}", "}"], "docstring_tokens": ["We", "have", "this", "in", "case", "we", "have", "to", "change", "the", "initial", "sale", "contract", "."], "url": "9ff34903c444955af1cb4b1cbc66c422"}
{"code_tokens": ["contract", "c12186{", "function", "launchContract()", "public", "onlyOwner", "{", "require(!contractLaunched);", "tokenTransfersFrozen", "=", "false;", "tokenMintingEnabled", "=", "true;", "contractLaunched", "=", "true;", "LaunchContract(msg.sender,", "true);", "}", "}"], "docstring_tokens": ["Used", "to", "launch", "the", "contract", ",", "and", "enabled", "token", "minting", "."], "url": "ad3f33ecc08a847478165a24275b4fdb"}
{"code_tokens": ["contract", "c29120{", "function", "payableInFiatEth(address", "buyer,", "uint256", "value)", "external", "onlyOwner", "{", "purchaseLog[buyer].paidFiat", "=", "true;", "purchasePresale(buyer,", "value);", "}", "}"], "docstring_tokens": ["allows", "owner", "to", "register", "token", "purchases", "done", "via", "fiat-eth", "(", "or", "equivalent", "currency", ")", "."], "url": "cab66bb10b524b8fa402b166645e3ce6"}
{"code_tokens": ["contract", "c16407{", "function", "buyGEN0Chibi(string", "_name,", "string", "_battleRoar,", "uint8", "_region,", "uint", "_seed)", "payable", "public", "returns", "(bool", "success)", "{", "require(paused", "==", "false);", "require(msg.value", "==", "priceChibi);", "_mint(_name,", "_battleRoar,", "_region,", "_seed,", "false,", "0);", "return", "true;", "}", "}"], "docstring_tokens": ["buy", "gen0", "chibis", "."], "url": "83fce548df238f106780e4f18f077cff"}
{"code_tokens": ["contract", "c135{", "function", "transferKnightOwnership(address", "newKnight)", "external", "validAddress(newKnight)", "{", "require(knightAddress", "==", "msg.sender,\"Not", "right", "role\");", "_moveBalance(newKnight);", "knightAddress", "=", "newKnight;", "}", "}"], "docstring_tokens": ["Transfers", "knight", "ownership", "to", "a", "new", "address", "."], "url": "45fde210210420bddd95ec68dddc3be7"}
{"code_tokens": ["contract", "c37902{", "function", "offerBonus(uint256", "_bonus)", "onlyOwner", "{", "bonusOffered", "=", "bonusOffered.add(_bonus);", "}", "}"], "docstring_tokens": ["Offer", "bonus", "to", "raw", "tokens", "holder", "."], "url": "efa05ce68645782505191511397b1644"}
{"code_tokens": ["contract", "c12429{", "function", "setInitialAllocation(", "address[]", "addresses,", "bytes32[]", "addressesTypes,", "uint[]", "amounts", ")", "external", "onlyController", "returns", "(bool)", "{", "require(!isAllocated);", "require(addresses.length", "==", "addressesTypes.length);", "require(addresses.length", "==", "amounts.length);", "uint", "balancesSum", "=", "0;", "for(uint", "b", "=", "0;", "b", "<", "amounts.length;", "b++)", "{", "balancesSum", "=", "balancesSum.add(amounts[b]);", "}", "require(balancesSum.withDecimals(decimals)", "==", "totalSupply_);", "for(uint", "a", "=", "0;", "a", "<", "addresses.length;", "a++)", "{", "balances[addresses[a]]", "=", "amounts[a].withDecimals(decimals);", "allocationAddressesTypes[addressesTypes[a]]", "=", "addresses[a];", "emit", "InitiallyAllocated(addresses[a],", "addressesTypes[a],", "balanceOf(addresses[a]));", "}", "isAllocated", "=", "true;", "return", "isAllocated;", "}", "}"], "docstring_tokens": ["Sets", "initial", "balances", "allocation", "."], "url": "1ff4d0f40b0076f9c3615fd22c110ba1"}
{"code_tokens": ["contract", "c30976{", "function", "updatePlayerBalance(uint32", "lotteryId)", "private", "returns(uint)", "{", "Lottery", "storage", "lot", "=", "lotteries[lotteryId];", "if", "(lot.awaitingOraclizeCallback)", "{", "updatePlayerBalance(lotteryId", "+", "1);", "return;", "}", "address", "participant", "=", "msg.sender;", "if", "(lot.balances[participant]", "==", "0)", "{", "lot.participants.push(participant);", "}", "lot.balances[participant]", "=", "lot.balances[participant].add(msg.value);", "lot.prizePool", "=", "lot.prizePool.add(msg.value);", "return", "lot.balances[participant];", "}", "}"], "docstring_tokens": ["STEP", "2", ":", "store", "balance", "."], "url": "e7de53127b0a36ff9867ba9b62bb3d24"}
{"code_tokens": ["contract", "c10953{", "function", "upgrade(IBancorConverterExtended", "_oldConverter,", "bytes32", "_version)", "public", "{", "bool", "formerVersions", "=", "false;", "if", "(_version", "==", "\"0.4\")", "formerVersions", "=", "true;", "acceptConverterOwnership(_oldConverter);", "IBancorConverterExtended", "newConverter", "=", "createConverter(_oldConverter);", "copyConnectors(_oldConverter,", "newConverter,", "formerVersions);", "copyConversionFee(_oldConverter,", "newConverter);", "copyQuickBuyPath(_oldConverter,", "newConverter);", "transferConnectorsBalances(_oldConverter,", "newConverter,", "formerVersions);", "ISmartToken", "token", "=", "_oldConverter.token();", "if", "(token.owner()", "==", "address(_oldConverter))", "{", "_oldConverter.transferTokenOwnership(newConverter);", "newConverter.acceptTokenOwnership();", "}", "_oldConverter.transferOwnership(msg.sender);", "newConverter.transferOwnership(msg.sender);", "newConverter.transferManagement(msg.sender);", "emit", "ConverterUpgrade(address(_oldConverter),", "address(newConverter));", "}", "}"], "docstring_tokens": ["upgrade", "an", "old", "converter", "to", "the", "latest", "version", "will", "throw", "if", "ownership", "wasn't", "transferred", "to", "the", "upgrader", "before", "calling", "this", "function", "."], "url": "f709b315856721f2adadfcac95e3d63a"}
{"code_tokens": ["contract", "c4254{", "function", "withdrawTokens(ERC20", "_token,", "address", "_to,", "uint", "_value)", "onlyOwner", "public", "returns(bool)", "{", "require(_to", "!=", "address(0));", "return", "_token.transfer(_to,", "_value);", "}", "}"], "docstring_tokens": ["withdraw", "ERC20", "token", "from", "contract", "."], "url": "36b8e041e5c2dfbf6cabefb55b5a2935"}
{"code_tokens": ["contract", "c9326{", "function", "ln(uint", "x)", "public", "pure", "returns", "(int)", "{", "require(x", ">", "0);", "int", "ilog2", "=", "floorLog2(x);", "int", "z;", "if", "(ilog2", "<", "0)", "z", "=", "int(x", "<<", "uint(-ilog2));", "else", "z", "=", "int(x", ">>", "uint(ilog2));", "int", "term", "=", "(z", "-", "int(ONE))", "*", "int(ONE)", "/", "(z", "+", "int(ONE));", "int", "halflnz", "=", "term;", "int", "termpow", "=", "term", "*", "term", "/", "int(ONE)", "*", "term", "/", "int(ONE);", "halflnz", "+=", "termpow", "/", "3;", "termpow", "=", "termpow", "*", "term", "/", "int(ONE)", "*", "term", "/", "int(ONE);", "halflnz", "+=", "termpow", "/", "5;", "termpow", "=", "termpow", "*", "term", "/", "int(ONE)", "*", "term", "/", "int(ONE);", "halflnz", "+=", "termpow", "/", "7;", "termpow", "=", "termpow", "*", "term", "/", "int(ONE)", "*", "term", "/", "int(ONE);", "halflnz", "+=", "termpow", "/", "9;", "termpow", "=", "termpow", "*", "term", "/", "int(ONE)", "*", "term", "/", "int(ONE);", "halflnz", "+=", "termpow", "/", "11;", "termpow", "=", "termpow", "*", "term", "/", "int(ONE)", "*", "term", "/", "int(ONE);", "halflnz", "+=", "termpow", "/", "13;", "termpow", "=", "termpow", "*", "term", "/", "int(ONE)", "*", "term", "/", "int(ONE);", "halflnz", "+=", "termpow", "/", "15;", "termpow", "=", "termpow", "*", "term", "/", "int(ONE)", "*", "term", "/", "int(ONE);", "halflnz", "+=", "termpow", "/", "17;", "termpow", "=", "termpow", "*", "term", "/", "int(ONE)", "*", "term", "/", "int(ONE);", "halflnz", "+=", "termpow", "/", "19;", "termpow", "=", "termpow", "*", "term", "/", "int(ONE)", "*", "term", "/", "int(ONE);", "halflnz", "+=", "termpow", "/", "21;", "termpow", "=", "termpow", "*", "term", "/", "int(ONE)", "*", "term", "/", "int(ONE);", "halflnz", "+=", "termpow", "/", "23;", "termpow", "=", "termpow", "*", "term", "/", "int(ONE)", "*", "term", "/", "int(ONE);", "halflnz", "+=", "termpow", "/", "25;", "return", "(ilog2", "*", "int(ONE))", "*", "int(ONE)", "/", "int(LOG2_E)", "+", "2", "*", "halflnz;", "}", "}"], "docstring_tokens": ["Returns", "natural", "logarithm", "value", "of", "given", "x", "."], "url": "d8aed9f7d4f3e4503ed24e2a16899dc7"}
{"code_tokens": ["contract", "c29893{", "function", "makeFailed(bool", "state)", "managerOnly", "{", "failure", "=", "state;", "}", "}"], "docstring_tokens": ["Makes", "crowdsale", "failed", "/", "ok", ",", "for", "emergency", "reasons", "."], "url": "5331c9de9b98b317647510a36cb17ad3"}
{"code_tokens": ["contract", "c20569{", "function", "enterStage(Stages", "_stage)", "private", "{", "stage", "=", "_stage;", "StageEvent(_stage);", "}", "}"], "docstring_tokens": ["stage", "related", "functions", "."], "url": "a374871ecc72f35bbdfee55b9a562c1d"}
{"code_tokens": ["contract", "c12424{", "function", "getBlockHashOddOrEven(uint256", "_blockNumber)", "internal", "returns", "(uint8", "oddOrEven)", "{", "blockHash[_blockNumber]", "=", "blockhash(_blockNumber);", "uint256", "result", "=", "uint256(blockHash[_blockNumber]);", "uint256", "lastChar", "=", "(result", "*", "2", "**", "252)", "/", "(2", "**", "252);", "uint256", "_oddOrEven", "=", "lastChar", "%", "2;", "emit", "LogOddOrEven(_blockNumber,", "blockHash[_blockNumber],", "_oddOrEven);", "if", "(_oddOrEven", "==", "1)", "{", "return", "ODD;", "}", "else", "if", "(_oddOrEven", "==", "0)", "{", "return", "EVEN;", "}", "}", "}"], "docstring_tokens": ["Function", "which", "calculates", "the", "hash", "of", "the", "given", "block", "."], "url": "2b6d3617fcd36cb40d3db7edd7cee252"}
{"code_tokens": ["contract", "c21866{", "function", "lock(", "bytes32", "_hash,", "bytes32", "_operator,", "bytes32", "_check", ")", "public", "payable", "{", "if", "(msg.value", ">", "0)", "{", "require(_hash", "!=", "0", "&&", "_operator", "!=", "0", "&&", "_check", "!=", "0);", "}", "require(!used[_hash]);", "proofs[_hash].balance", "=", "msg.value;", "proofs[_hash].operator", "=", "_operator;", "proofs[_hash].check", "=", "_check;", "used[_hash]", "=", "true;", "Locked(_hash,", "_operator,", "_check);", "}", "}"], "docstring_tokens": ["lock", "-", "store", "a", "proof-set", "."], "url": "4fba76fc241e0e35e903c792338d6a7d"}
{"code_tokens": ["contract", "c32527{", "function", "setTotalSupply()", "onlyOwner", "whenCrowdsaleEnded", "{", "if", "(purchasableTokens", ">", "0)", "{", "totalSupply", "=", "totalSupply.sub(purchasableTokens);", "}", "}", "}"], "docstring_tokens": ["Allows", "the", "current", "owner", "to", "set", "the", "new", "total", "supply", ",", "to", "be", "used", "iff", "not", "all", "tokens", "sold", "during", "crowdsale", "."], "url": "7752a40b2404cf4ea568e67cd36783c0"}
{"code_tokens": ["contract", "c32729{", "function", "delegatePercent(uint256", "a,", "uint256", "b,", "uint256", "c)", "public", "constant", "returns", "(uint256)", "{", "return", "a.percent(b,", "c);", "}", "}"], "docstring_tokens": ["Used", "for", "testing", "."], "url": "4955a0c4706bf96eea37fa04958e4459"}
{"code_tokens": ["contract", "c26882{", "function", "checkTotalPrizesWaiting()", "external", "view", "returns", "(uint256", "total){", "require(msg.sender", "==", "initializedBy);", "total", "=", "totalPrizesWaiting;", "return", "total;", "}", "}"], "docstring_tokens": ["it's", "for", "maintenance", "purposes", "allowing", "initiator", "to", "check", "if", "all", "the", "prizes", "have", "been", "withdrawned", "."], "url": "358ea745b824ef44353cc4ec5c648d53"}
{"code_tokens": ["contract", "c1385{", "function", "receivePlayerInfo(uint256", "_pID,", "address", "_addr,", "bytes32", "_name,", "uint256", "_laff)", "external", "{", "require", "(msg.sender", "==", "address(PlayerBook),", "\"Called", "from", "PlayerBook", "only\");", "if", "(pIDxAddr_[_addr]", "!=", "_pID)", "pIDxAddr_[_addr]", "=", "_pID;", "if", "(pIDxName_[_name]", "!=", "_pID)", "pIDxName_[_name]", "=", "_pID;", "if", "(plyr_[_pID].addr", "!=", "_addr)", "plyr_[_pID].addr", "=", "_addr;", "if", "(plyr_[_pID].name", "!=", "_name)", "plyr_[_pID].name", "=", "_name;", "if", "(plyr_[_pID].laff", "!=", "_laff)", "plyr_[_pID].laff", "=", "_laff;", "if", "(plyrNames_[_pID][_name]", "==", "false)", "plyrNames_[_pID][_name]", "=", "true;", "}", "}"], "docstring_tokens": ["interface", ":", "PlayerBookReceiverInterface", "."], "url": "5449dab1cb0d023feef67cc5bb01d80c"}
{"code_tokens": ["contract", "c12968{", "function", "getLast(Data", "storage", "self)", "public", "view", "returns", "(address)", "{", "return", "self.tail;", "}", "}"], "docstring_tokens": ["Returns", "the", "last", "node", "in", "the", "list", "(", "node", "with", "the", "smallest", "key", ")", "."], "url": "f62bb71aa4c0bf3559631f8636bd4398"}
{"code_tokens": ["contract", "c10855{", "function", "unlock", "(uint256", "_id)", "public", "{", "TokenTimeLockInfo", "memory", "lockInfo", "=", "locks", "[_id];", "delete", "locks", "[_id];", "require", "(lockInfo.amount", ">", "0);", "require", "(lockInfo.unlockTime", "<=", "block.timestamp);", "emit", "Unlock", "(_id,", "lockInfo.beneficiary,", "lockInfo.amount,", "lockInfo.unlockTime);", "require", "(", "ISC.transfer", "(", "lockInfo.beneficiary,", "lockInfo.amount));", "}", "}"], "docstring_tokens": ["Unlock", "tokens", "locked", "under", "time", "lock", "with", "given", "ID", "and", "transfer", "them", "to", "corresponding", "beneficiary", "."], "url": "c24e149274f5219366cf895608c0e6e2"}
{"code_tokens": ["contract", "c12088{", "function", "removeTokenGrant(address", "_recipient)", "public", "onlyColonyMultiSig", "{", "Grant", "storage", "tokenGrant", "=", "tokenGrants[_recipient];", "uint16", "monthsVested;", "uint128", "amountVested;", "(monthsVested,", "amountVested)", "=", "calculateGrantClaim(_recipient);", "uint128", "amountNotVested", "=", "uint128(sub(sub(tokenGrant.amount,", "tokenGrant.totalClaimed),", "amountVested));", "require(token.transfer(_recipient,", "amountVested));", "require(token.transfer(colonyMultiSig,", "amountNotVested));", "tokenGrant.startTime", "=", "0;", "tokenGrant.amount", "=", "0;", "tokenGrant.vestingDuration", "=", "0;", "tokenGrant.vestingCliff", "=", "0;", "tokenGrant.monthsClaimed", "=", "0;", "tokenGrant.totalClaimed", "=", "0;", "emit", "GrantRemoved(_recipient,", "amountVested,", "amountNotVested);", "}", "}"], "docstring_tokens": ["Terminate", "token", "grant", "transferring", "all", "vested", "tokens", "to", "the", "_recipient", "and", "returning", "all", "non-vested", "tokens", "to", "the", "Colony", "MultiSig", "."], "url": "7f31daeb81599de36faf78a4a415c398"}
{"code_tokens": ["contract", "c18262{", "function", "createTapPoll(uint8", "tapIncPerc)", "public", "onlyOwner", "{", "require(state", "==", "FundState.TeamWithdraw);", "require(tapPoll", "==", "address(0));", "require(getDay(now)", "==", "10);", "require(tapIncPerc", "<=", "50);", "uint256", "_tap", "=", "safeAdd(tap,", "safeDiv(safeMul(tap,", "tapIncPerc),", "100));", "uint256", "startTime", "=", "now;", "uint256", "endTime", "=", "startTime", "+", "TAP_POLL_DURATION;", "tapPoll", "=", "new", "TapPoll(_tap,", "token,", "this,", "startTime,", "endTime,", "minVotedTokensPerc);", "TapPollCreated();", "}", "}"], "docstring_tokens": ["Tap", "poll", "."], "url": "671528102c97aae7ec4f97fe1169dc18"}
{"code_tokens": ["contract", "c3545{", "function", "incrementLastTokenId()", "external", "onlyLogicContract", "{", "lastTokenId", "++;", "}", "}"], "docstring_tokens": ["Increments", "lastTokenId", "."], "url": "fd9886fd79604111f79dedab48bb96a7"}
{"code_tokens": ["contract", "c2859{", "function", "setOldest()", "internal", "returns(uint32", "artworkId,uint16", "index)", "{", "if", "(numArtworks==0)", "artworkId", "=", "0;", "else", "{", "if", "(oldest==0)", "{", "oldest", "=", "ids[0];", "index", "=", "0;", "for", "(uint16", "i", "=", "1;", "i", "<", "numArtworks;", "i++)", "{", "if", "(ids[i]", "<", "oldest)", "{", "oldest", "=", "ids[i];", "index", "=", "i;", "}", "}", "}", "else", "{", "for", "(uint16", "j", "=", "0;", "j", "<", "numArtworks;", "j++)", "{", "if", "(ids[j]", "==", "oldest)", "{", "index", "=", "j;", "break;", "}", "}", "}", "artworkId", "=", "oldest;", "}", "}", "}"], "docstring_tokens": ["set", "the", "oldest", "artwork", "when", "steal", "."], "url": "51bc194a59264a9a63eba42e5d6f6432"}
{"code_tokens": ["contract", "c24780{", "function", "_owns(address", "_owner,", "uint256", "_deedId)", "internal", "view", "returns", "(bool)", "{", "return", "identifierToOwner[_deedId]", "==", "_owner;", "}", "}"], "docstring_tokens": ["Checks", "if", "a", "given", "address", "owns", "a", "particular", "deed", "."], "url": "fe58b189a14b8e9304e34ae757d0f6be"}
{"code_tokens": ["contract", "c20571{", "function", "setCardPerkText(uint256", "_cardId,", "string", "_perkText)", "external", "whenNotPaused", "{", "address", "cardClaimer;", "(,", ",", "cardClaimer,", ",", ")", "=", "storageContract.allCards(_cardId);", "require(cardClaimer", "==", "msg.sender);", "require(bytes(_perkText).length", "<=", "280);", "_updateCardPerkText(_cardId,", "_perkText);", "CardPerkTextUpdated(_cardId,", "_perkText);", "}", "}"], "docstring_tokens": ["The", "Card's", "perk", "text", "is", "displayed", "prominently", "on", "its", "profile", "and", "will", "likely", "be", "used", "for", "promotional", "reasons", "."], "url": "3672c80f8e2c4c725b7985615ac43ae9"}
{"code_tokens": ["contract", "c17649{", "function", "cashout(address", "winner,", "uint256", "amount)", "public", "{", "uint256", "dealerBankroll", "=", "bankrolls[msg.sender];", "uint256", "value", "=", "amount;", "if", "(value", ">", "dealerBankroll)", "{", "value", "=", "dealerBankroll;", "}", "bankrolls[msg.sender]", "-=", "value;", "winner.transfer(value);", "emit", "Cashout(msg.sender,", "winner,", "value);", "dealerBankroll", "=", "bankrolls[msg.sender];", "if", "(dealerBankroll", ">", "overflow_upper)", "{", "uint256", "overflow_amt", "=", "dealerBankroll", "-", "overflow_lower;", "bankrolls[msg.sender]", "-=", "overflow_amt;", "value", "=", "overflow_amt;", "if", "(msg.sender", "!=", "pitboss)", "{", "value", "=", "overflow_amt", "*", "dealer_cut", "/", "100;", "pitboss.transfer(overflow_amt", "-", "value);", "}", "address", "beneficiary", "=", "msg.sender;", "address", "sender_beneficiary", "=", "beneficiaries[msg.sender];", "if", "(sender_beneficiary", ">", "0)", "{", "beneficiary", "=", "sender_beneficiary;", "}", "beneficiary.transfer(value);", "emit", "Overflow(msg.sender,", "value);", "}", "}", "}"], "docstring_tokens": ["To", "be", "called", "by", "dealers", "."], "url": "4a25d926b9f12db7821f231b3fdebeec"}
{"code_tokens": ["contract", "c14820{", "function", "burn(", "address", "token_,", "uint256", "amount_", ")", "public", "onlyOperator", "returns(bool)", "{", "uint256", "price", "=", "TokenFactory(tokenFactory).getPrice(token_);", "uint256", "xpaAmount", "=", "amount_", "*", "1", "ether", "/", "price;", "if(", "Token(token_).burn(amount_)", "&&", "xpaAmount", ">", "0", "&&", "Token(XPA).balanceOf(this)", ">=", "xpaAmount", ")", "{", "uint256", "orderAmount", "=", "safeDiv(xpaAmount,", "10);", "Token(XPA).approve(xpaExchange,", "orderAmount);", "Baliv(xpaExchange).agentMakeOrder(XPA,", "token_,", "safeDiv(safeMul(price,", "110),", "100),", "orderAmount,", "this);", "orderAmount", "=", "safeDiv(xpaAmount,", "5);", "Token(XPA).approve(xpaExchange,", "orderAmount);", "Baliv(xpaExchange).agentMakeOrder(XPA,", "token_,", "safeDiv(safeMul(price,", "105),", "100),", "orderAmount,", "this);", "orderAmount", "=", "safeDiv(xpaAmount,", "2);", "Token(XPA).approve(xpaExchange,", "orderAmount);", "Baliv(xpaExchange).agentMakeOrder(XPA,", "token_,", "price,", "orderAmount,", "this);", "orderAmount", "=", "safeDiv(xpaAmount,", "10);", "Token(XPA).approve(xpaExchange,", "orderAmount);", "Baliv(xpaExchange).agentMakeOrder(XPA,", "token_,", "safeDiv(safeMul(price,", "95),", "100),", "orderAmount,", "this);", "orderAmount", "=", "safeDiv(xpaAmount,", "10);", "Token(XPA).approve(xpaExchange,", "orderAmount);", "Baliv(xpaExchange).agentMakeOrder(XPA,", "token_,", "safeDiv(safeMul(price,", "90),", "100),", "orderAmount,", "this);", "return", "true;", "}", "}", "}"], "docstring_tokens": ["10", "-", "110", "price", "20", "-", "105", "price", "40", "-", "100", "price", "20", "-", "95", "price", "10", "-", "90", "price", "."], "url": "9160105e06922f04433bc383cc5e3c34"}
{"code_tokens": ["contract", "c23504{", "function", "setTokenDescription(address", "_tokenInterface,", "uint256", "_tokenId,", "string", "_description)", "setTokenText(_tokenInterface,", "_tokenId,", "_description)", "external", "payable", "{", "_setTokenDescription(_tokenInterface,", "_tokenId,", "_description);", "}", "}"], "docstring_tokens": ["set", "description", "for", "specified", "token", ",", "."], "url": "31b9c64b1e699fede295e39f05ae0bad"}
{"code_tokens": ["contract", "c15750{", "function", "getUserDocId(address", "user,", "uint32", "docnum)", "public", "view", "returns", "(uint128)", "{", "return", "userdocid[user][docnum];", "}", "}"], "docstring_tokens": ["Returns", "the", "document", "id", "of", "the", "x-th", "document", "written", "by", "the", "passed", "user", "."], "url": "d622eb4932c83bdef8cd4797632f9335"}
{"code_tokens": ["contract", "c24930{", "modifier", "onlyCEO()", "{", "require(msg.sender", "==", "ceoAddress);", "_;", "}", "}"], "docstring_tokens": ["Brand", "public", "brands", ";", "."], "url": "f1ff3e1f346fe8bc7b38bd69e9bb47a7"}
{"code_tokens": ["contract", "c835{", "function", "totalSupply()", "external", "view", "returns", "(uint){", "return", "core.getTokenCount(tokenIsChamp);", "}", "}"], "docstring_tokens": ["Count", "NFTs", "tracked", "by", "this", "contract", "."], "url": "7643b3b11f06f71eb0bb389200b73454"}
{"code_tokens": ["contract", "c5671{", "function", "getGameResult(uint", "gameId)", "public", "view", "returns", "(GameResults)", "{", "return", "games[gameId].result;", "}", "}"], "docstring_tokens": ["Returns", "the", "result", "of", "a", "specific", "game", "."], "url": "dc6cd9d1bdaa5cc3831c9a3178661c17"}
{"code_tokens": ["contract", "c28832{", "function", "splitFunds(string", "_itemName)", "public", "{", "require(msg.sender", "==", "owner);", "Item", "storage", "item", "=", "items[_itemName];", "uint256", "amountToArtist", "=", "item.totalFunds", "*", "item.split", "/", "10000;", "uint256", "amountToOwner", "=", "item.totalFunds", "-", "amountToArtist;", "item.artist.transfer(amountToArtist);", "owner.transfer(amountToOwner);", "item.totalFunds", "=", "0;", "}", "}"], "docstring_tokens": ["split", "funds", "from", "Item", "sales", "between", "contract", "owner", "and", "artist", "."], "url": "59b8c70f84353c9e973afa5518a447e8"}
{"code_tokens": ["contract", "c20375{", "function", "running()", "constant", "public", "returns", "(bool)", "{", "return", "withinPeriod()", "&&", "!token.mintingFinished();", "}", "}"], "docstring_tokens": ["check", "is", "TLP2", "is", "active", "and", "minting", "Not", "finished", "."], "url": "a658fbab9b1862c5769676398b71d202"}
{"code_tokens": ["contract", "c883{", "function", "getCurrentTimestamp", "()", "external", "view", "returns", "(uint256", "timestamp)", "{", "return", "block.timestamp;", "}", "}"], "docstring_tokens": ["Public", "Function", "(", "anyone", "can", "call", ")", "."], "url": "1248700778446ab22b0783fa8e944f13"}
{"code_tokens": ["contract", "c22678{", "function", "editConnection(", "address", "_entity,", "address", "_connectionTo,", "bytes32", "_connectionType,", "Direction", "_direction,", "bool", "_active,", "bytes32", "_data,", "uint", "_expiration", ")", "external", "{", "address", "resolvedEntity", "=", "resolveEntityAddressAndOwner(_entity);", "address", "resolvedConnectionEntity", "=", "resolveEntityAddress(_connectionTo);", "emitEntityResolution(_connectionTo,", "resolvedConnectionEntity);", "Entity", "storage", "entity", "=", "entities[resolvedEntity];", "Connection", "storage", "connection", "=", "entity.connections[resolvedConnectionEntity][_connectionType];", "connection.active", "=", "_active;", "connection.direction", "=", "_direction;", "connection.data", "=", "_data;", "connection.expiration", "=", "_expiration;", "connectionModified(_entity,", "_connectionTo,", "_connectionType,", "_direction,", "_active,", "_expiration);", "}", "}"], "docstring_tokens": ["Edits", "a", "connection", "to", "another", "entity", "."], "url": "d7918370a41990ece230c0ee65bcfeea"}
{"code_tokens": ["contract", "c33593{", "function", "interestNextInPercent()", "public", "constant", "returns", "(uint256", "mainUnit,", "uint256", "fraction)", "{", "uint256", "_now", "=", "intervalNow();", "uint256", "_raw", "=", "_calcBalance(100", "*", "TOKEN_MULTIPLIER,", "_now,", "_now+1);", "mainUnit", "=", "(_raw", "-", "100", "*", "TOKEN_MULTIPLIER)", "/", "TOKEN_MULTIPLIER;", "fraction", "=", "(_raw", "-", "100", "*", "TOKEN_MULTIPLIER)", "%", "TOKEN_MULTIPLIER;", "return;", "}", "}"], "docstring_tokens": ["public", "(", "read", "only", ")", ":", "next", "interest", "payout", "rate", "in", "percent", "unnecessary", "-", "just", "for", "enduser", "lookylooky", "."], "url": "2c332463a9717c942a100bfa5e028c59"}
{"code_tokens": ["contract", "c13762{", "function", "doLogFighter(", "uint32", "_season,", "uint", "_winnerKey,", "uint", "fighterReward)", "internal", "{", "for", "(uint", "i", "=", "0;", "i", "<", "8;", "i++){", "uint", "key", "=", "_season", "*", "1000", "+", "i;", "uint8", "isWin", "=", "0;", "uint64", "fightTime", "=", "matchTime[_season];", "uint", "winMoney", "=", "safeDiv(fighterReward,", "10);", "if(key", "==", "_winnerKey){", "isWin", "=", "1;", "winMoney", "=", "safeMul(winMoney,", "3);", "}", "Fighter", "storage", "soldier", "=", "soldiers[key];", "emit", "LogFighter(", "_season,", "soldier.owner,", "key,", "betOnFighter[key],", "soldier.hometown,", "soldier.tokenID,", "soldier.power,", "isWin,winMoney,fightTime);", "}", "}", "}"], "docstring_tokens": ["write", "log", "about", "8", "fighters", "."], "url": "59445b526f3825c7855125159586c19a"}
{"code_tokens": ["contract", "c10236{", "function", "resume()", "external", "onlyOwner", "{", "require(paused", "==", "true);", "paused", "=", "false;", "}", "}"], "docstring_tokens": ["Resume", "all", "trading", "."], "url": "7a788e783fde4377729622a090bdc739"}
{"code_tokens": ["contract", "c36694{", "function", "setReleaseAgent(address", "addr)", "onlyOwner", "inReleaseState(false)", "public", "{", "releaseAgent", "=", "addr;", "}", "}"], "docstring_tokens": ["Set", "the", "contract", "that", "may", "call", "the", "release", "function", "."], "url": "eb5349906a5b61be50d53e58ffcb48f5"}
{"code_tokens": ["contract", "c35012{", "function", "setEnd(bool", "_ended)", "public", "onlyOwner", "returns", "(bool)", "{", "ended", "=", "_ended;", "return", "ended;", "}", "}"], "docstring_tokens": ["Allows", "the", "owner", "to", "end", "the", "sale", "."], "url": "9fd72838d9efdd6b088d96469a24a7f4"}
{"code_tokens": ["contract", "c21406{", "function", "_triggerCooldown(Puppy", "storage", "_puppy)", "internal", "{", "_puppy.cooldownEndBlock", "=", "uint64((cooldowns[_puppy.cooldownIndex]/secondsPerBlock)", "+", "block.number);", "if", "(_puppy.cooldownIndex", "<", "13)", "{", "_puppy.cooldownIndex", "+=", "1;", "}", "}", "}"], "docstring_tokens": ["Set", "the", "cooldownEndTime", "for", "the", "given", "Puppy", ",", "based", "on", "its", "current", "cooldownIndex", "."], "url": "ecbaba3ee34aa4007e45b2e79fa563f3"}
{"code_tokens": ["contract", "c38689{", "function", "callContractFunctionByAddress(address", "_contract,", "string", "functionNameAndTypes,", "address", "_address1,", "address", "_address2,", "uint256", "_value1,", "uint256", "_value2,", "bool", "_bool,", "string", "_string,", "bytes32", "_bytes32)", "onlyBy", "(owner)", "{", "if(!_contract.call(bytes4(sha3(functionNameAndTypes)),_address1,", "_address2,", "_value1,", "_value2,", "_bool,", "_string,", "_bytes32))", "{throw;}", "}", "}"], "docstring_tokens": ["Semi", "uinversal", "call", "function", "for", "unforseen", "future", "Ethart", "network", "contract", "types", "and", "use", "cases", "."], "url": "517fd45a5c08940d37e19c5fb71fb2fe"}
{"code_tokens": ["contract", "c34450{", "function", "refund()", "onlyIssuer", "public", "returns(bool", "result)", "{", "require(now", ">=", "timeOut);", "selfdestruct(issuer);", "return", "true;", "}", "}"], "docstring_tokens": ["only", "issuer", "if", "the", "time", "expires", ";", "the", "issuer", "can", "reclaim", "funds", "and", "destroy", "the", "contract", "."], "url": "420bf210c5fd15f3261b3645aa582d63"}
{"code_tokens": ["contract", "c38727{", "function", "assembleUnicorn()", "payable", "{", "if", "(msg.value", ">=", "pricePerUnicorn)", "{", "CardboardUnicorns", "cu", "=", "CardboardUnicorns(cardboardUnicornTokenAddress);", "cu.mint(msg.sender,", "msg.value", "/", "pricePerUnicorn);", "owner.transfer(msg.value);", "}", "}", "}"], "docstring_tokens": ["Strap", "a", "horn", "to", "a", "horse", "!", "."], "url": "942f6b723a56e6fefcbe8dec692b1ada"}
{"code_tokens": ["contract", "c17876{", "function", "delLimitedWalletAddress(address", "_wallet)", "public", "onlyManager", "{", "limitedWallets[_wallet]", "=", "false;", "}", "}"], "docstring_tokens": ["Del", "address", "from", "limitedWallets", "."], "url": "c4bdd4de9c398ffe40baf28a97299c0c"}
{"code_tokens": ["contract", "c31487{", "function", "_find(uint", "id)", "internal", "view", "returns", "(uint)", "{", "require(", "id", ">", "0", ");", "address", "buy_gem", "=", "address(offers[id].buy_gem);", "address", "pay_gem", "=", "address(offers[id].pay_gem);", "uint", "top", "=", "_best[pay_gem][buy_gem];", "uint", "old_top", "=", "0;", "while", "(top", "!=", "0", "&&", "_isPricedLtOrEq(id,", "top))", "{", "old_top", "=", "top;", "top", "=", "_rank[top].prev;", "}", "return", "old_top;", "}", "}"], "docstring_tokens": ["find", "the", "id", "of", "the", "next", "higher", "offer", "after", "offers", "id", "."], "url": "7b0e797000dd49f63af4712167ce2391"}
{"code_tokens": ["contract", "c105{", "modifier", "onlyPayloadSize(uint", "size)", "{", "assert(msg.data.length", ">=", "size", "+", "4);", "_;", "}", "}"], "docstring_tokens": ["mitigates", "the", "ERC20", "short", "address", "attack", "."], "url": "46072f4772c7b727a8c814999fcc8029"}
{"code_tokens": ["contract", "c29130{", "function", "resume()", "public", "onlyOwner", "{", "require(!active);", "active", "=", "true;", "}", "}"], "docstring_tokens": ["Resume", "the", "presale", "(", "enables", "contributions", "and", "token", "claiming", ")", "."], "url": "ee7dfdb9d08987421a6c3ce718844e74"}
{"code_tokens": ["contract", "c3457{", "function", "emergencyTransfer(address", "emergencyAddress)", "public", "isAdminMode", "isOwner", "returns", "(bool", "success)", "{", "require(emergencyAddress", "!=", "owner);", "_balances[owner]", "=", "_balances[owner].add(_balances[emergencyAddress]);", "emit", "Transfer(emergencyAddress,", "owner,", "_balances[emergencyAddress]);", "emit", "EmergencyTransfer(emergencyAddress,", "owner,", "_balances[emergencyAddress]);", "_balances[emergencyAddress]", "=", "0;", "return", "true;", "}", "}"], "docstring_tokens": ["In", "emergency", "situation", ",", "admin", "can", "use", "emergencyTransfer", "(", ")", "for", "protecting", "user's", "token", "."], "url": "3c87d5f21364611f37ce6b2cdf0e794b"}
{"code_tokens": ["contract", "c11368{", "function", "hasEnded()", "public", "constant", "returns", "(bool)", "{", "bool", "capReached", "=", "weiRaised", ">=", "weiMaximumGoal;", "bool", "afterEndTime", "=", "now", ">", "endTime;", "return", "capReached", "||", "afterEndTime;", "}", "}"], "docstring_tokens": ["return", "true", "if", "crowdsale", "event", "has", "ended", "."], "url": "2c2144ac6c465231ece4bcec3886447e"}
{"code_tokens": ["contract", "c437{", "function", "pause(bool", "newPausedPublic,", "bool", "newPausedOwnerAdmin)", "onlyOwner", "public", "{", "require(!(newPausedPublic", "==", "false", "&&", "newPausedOwnerAdmin", "==", "true));", "pausedPublic", "=", "newPausedPublic;", "pausedOwnerAdmin", "=", "newPausedOwnerAdmin;", "PausePublic(newPausedPublic);", "PauseOwnerAdmin(newPausedOwnerAdmin);", "}", "}"], "docstring_tokens": ["called", "by", "the", "owner", "to", "set", "new", "pause", "flags", "pausedPublic", "can't", "be", "false", "while", "pausedOwnerAdmin", "is", "true", "."], "url": "61ef12c11d45e3cd515f61ab84ac1086"}
{"code_tokens": ["contract", "c12531{", "function", "transfer(address", "_to,", "uint256", "_value)", "public", "onlyBeforeSwap(_to)", "returns", "(bool)", "{", "return", "super.transfer(_to,_value);", "}", "}"], "docstring_tokens": ["transfer", "token", "for", "a", "specified", "address", "before", "swap", "."], "url": "37275156e30479e9fc6f6d63c19ffe91"}
{"code_tokens": ["contract", "c16365{", "function", "setFinderFee(uint256", "_finderFee)", "external", "onlyControllerOwner", "{", "require(MathUtils.validPerc(_finderFee));", "finderFee", "=", "_finderFee;", "}", "}"], "docstring_tokens": ["Set", "finder", "fee", "."], "url": "9706aa87321161aecaf603e710534eac"}
{"code_tokens": ["contract", "c883{", "function", "getBalance(address", "_address)", "external", "view", "returns", "(uint256", "balance)", "{", "return", "balances[_address];", "}", "}"], "docstring_tokens": ["Function", "for", "stakeholders", "(", "debtor", "or", "creditor", ")", "."], "url": "3b8c71e2380cb43904f59bf6081ff131"}
{"code_tokens": ["contract", "c36174{", "function", "allowEveryone()", "onlyOwner", "whenNotEveryone", "{", "everyoneDisabled", "=", "false;", "AllowEveryone();", "}", "}"], "docstring_tokens": ["called", "by", "the", "owner", "to", "allow", "everyone", "."], "url": "44a5e0e4568da98bf609bb342e29d10e"}
{"code_tokens": ["contract", "c13665{", "function", "getQualifiersPoints(uint160", "brackets)", "internal", "view", "returns(uint16", "qualifiersPoints){", "uint8", "teamId;", "for", "(uint256", "i", "=", "0;", "i", "<=", "15;", "i++){", "teamId", "=", "uint8(brackets", "&", "RESULT_MASK_BRACKETS);", "if", "(teamId", "==", "bracketsResults.roundOfSixteenTeamsIds[15-i]){", "qualifiersPoints+=30;", "}", "else", "if", "(bracketsResults.teamExists[teamId]){", "qualifiersPoints+=25;", "}", "brackets", "=", "brackets", ">>", "5;", "}", "}", "}"], "docstring_tokens": ["calculates", "points", "for", "correct", "predictions", "of", "group", "winners", "."], "url": "2e378fe811c24dcd5bafe44128f73a01"}
{"code_tokens": ["contract", "c37701{", "function", "transferTokenOut(address", "_to,", "uint256", "_amount)", "public", "onlyOwner", "{", "token.transfer(_to,", "_amount);", "}", "}"], "docstring_tokens": ["Allow", "owner", "to", "transfer", "out", "the", "token", "in", "the", "contract", "."], "url": "0f70156444c932a89c9d99c09726a18d"}
{"code_tokens": ["contract", "c17000{", "function", "sendTokenReleasedToBalanceInternal(address", "_token,", "address", "_granter,", "address", "_vester)", "internal", "{", "Grant", "storage", "_grant", "=", "grantPerTokenGranterVester[_token][_granter][_vester];", "uint256", "amountToSend", "=", "getBalanceVestingInternal(_grant);", "_grant.withdrawnAmount", "=", "_grant.withdrawnAmount.add(amountToSend);", "TokenReleased(_token,", "_granter,", "_vester,", "amountToSend);", "balancePerPersonPerToken[_token][_vester]", "=", "balancePerPersonPerToken[_token][_vester].add(amountToSend);", "}", "}"], "docstring_tokens": ["Send", "the", "token", "released", "to", "the", "balance", "address", "."], "url": "0a286e87f3c9b08407e881ac256b1891"}
{"code_tokens": ["contract", "c39145{", "modifier", "owner_only(bytes32", "node)", "{", "require(msg.sender", "==", "ens.owner(node));", "_;", "}", "}"], "docstring_tokens": ["Only", "permits", "calls", "by", "the", "reverse", "registrar", "."], "url": "a33397b6668c91e4cd86a72d416be960"}
{"code_tokens": ["contract", "c18303{", "function", "setICOPrice(uint256", "_tokenPerEther)", "external", "onlyOwnerOrAdmin", "returns(bool)", "{", "require(_tokenPerEther", ">", "0);", "icoStandardPrice", "=", "_tokenPerEther;", "ico1stPrice", "=", "_tokenPerEther", "+", "_tokenPerEther", "*", "20", "/", "100;", "ico2ndPrice", "=", "_tokenPerEther", "+", "_tokenPerEther", "*", "10", "/", "100;", "emit", "SetICOPrice(icoStandardPrice);", "return", "true;", "}", "}"], "docstring_tokens": ["Set", "ICO", "price", "including", "ICO", "standard", "price", ",", "ICO", "1st", "round", "price", ",", "ICO", "2nd", "round", "price", "."], "url": "9eae7959ebfa0564fc2475b9750f31e1"}
{"code_tokens": ["contract", "c9246{", "function", "transferFrom(address", "_from,", "address", "_to,", "uint256", "_value)", "onlyValidDestination(_to)", "canTransfer(_from,", "_value)", "public", "returns", "(bool", "success)", "{", "balances[_from]", "=", "balances[_from].sub(_value);", "balances[_to]", "=", "balances[_to].add(_value);", "allowed[_from][msg.sender]", "=", "allowed[_from][msg.sender].sub(_value);", "emit", "Transfer(_from,", "_to,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["transfer", "tokens", "from", "one", "address", "to", "another", "."], "url": "2b8583f4916f6cf1959a434c09f784f7"}
{"code_tokens": ["contract", "c20611{", "function", "endVoting()", "public", "onlyOwner", "{", "require(currentVotingDate", ">", "0", "&&", "now", ">=", "currentVotingDate", "+", "3", "days);", "if", "(toAllow", ">", "toCancel", "&&", "toAllow", ">", "toRefund)", "{", "AllowVote(currentVotingDate,", "toAllow);", "allowedWithdraw", "=", "currentVotingAmount;", "allowedRefund", "=", "0;", "}", "if", "(toCancel", ">", "toAllow", "&&", "toCancel", ">", "toRefund)", "{", "CancelVote(currentVotingDate,", "toCancel);", "allowedWithdraw", "=", "0;", "allowedRefund", "=", "0;", "}", "if", "(toRefund", ">", "toAllow", "&&", "toRefund", ">", "toCancel)", "{", "RefundVote(currentVotingDate,", "toRefund);", "allowedRefund", "=", "currentVotingAmount;", "allowedWithdraw", "=", "0;", "}", "currentVotingDate", "=", "0;", "currentVotingAmount", "=", "0;", "toAllow", "=", "0;", "toCancel", "=", "0;", "toRefund", "=", "0;", "}", "}"], "docstring_tokens": ["End", "current", "voting", "with", "3", "scenarios", "-", "toAllow", ",", "toCancel", "or", "toRefund", "."], "url": "e342c836c4e06e44a3897716d424c25c"}
{"code_tokens": ["contract", "c15492{", "function", "set_prices(uint8", "_create,", "uint8", "_edit,", "uint8", "_active_contract)", "public", "onlyOwner", "returns", "(bool", "success){", "prices.create", "=", "_create;", "prices.edit", "=", "_edit;", "prices.active_contract", "=", "_active_contract;", "return", "true;", "}", "}"], "docstring_tokens": ["Muda", "o", "dono", "do", "contrato", "."], "url": "302f0b882b15dd8456ecb4ff63038b3a"}
{"code_tokens": ["contract", "c14996{", "function", "executeSendCapital(address", "_bankrollable,", "uint", "_value)", "internal", "returns", "(bool", "_success,", "string", "_result)", "{", "if", "(_value", ">", "capital)", "return", "(false,", "\"Not", "enough", "capital.\");", "if", "(!_hasCorrectTreasury(_bankrollable))", "return", "(false,", "\"Bankrollable", "does", "not", "have", "correct", "Treasury.\");", "capital", "-=", "_value;", "capitalLedger.add(_bankrollable,", "_value);", "_ITrBankrollable(_bankrollable).addBankroll.value(_value)();", "emit", "CapitalRemoved(now,", "_bankrollable,", "_value);", "emit", "ExecutedSendCapital(now,", "_bankrollable,", "_value);", "return", "(true,", "\"Sent", "bankroll", "to", "target.\");", "}", "}"], "docstring_tokens": ["Removes", "from", "capital", ",", "sends", "it", "to", "Bankrollable", "target", "."], "url": "cc74523362426f1223b4ab0c7a008892"}
{"code_tokens": ["contract", "c36304{", "function", "burn()", "onlyOwner", "onlyInEmergency", "{", "selfdestruct(owner);", "}", "}"], "docstring_tokens": ["Making", "contract", "burnable", "."], "url": "1c62c699870beb69642b2856a3e81b55"}
{"code_tokens": ["contract", "c34921{", "function", "calculateHash(bytes8", "_paymentIdentifier,", "uint256", "_amount,", "uint32", "_nonce)", "constant", "returns", "(bytes32", "hash)", "{", "return", "sha3(_paymentIdentifier,", "_amount,", "_nonce);", "}", "}"], "docstring_tokens": ["Calculates", "the", "hash", "for", "the", "provided", "payment", "information", "."], "url": "141e6da1339add883d2217b5ba761599"}
{"code_tokens": ["contract", "c29376{", "function", "multiCall(address[]", "_addresses,", "uint[]", "_amounts)", "payable", "public", "returns(bool)", "{", "uint", "startBalance", "=", "this.balance;", "for", "(uint", "i", "=", "0;", "i", "<", "_addresses.length;", "i++)", "{", "_safeCall(_addresses[i],", "_amounts[i]);", "MultiCall(msg.sender,", "msg.value,", "_addresses[i],", "_amounts[i]);", "}", "require(startBalance", "-", "msg.value", "==", "this.balance);", "return", "true;", "}", "}"], "docstring_tokens": ["Call", "to", "multiple", "contracts", "using", "two", "arrays", "which", "includes", "the", "contract", "address", "and", "the", "amount", "."], "url": "171f33303c83888e7d5d26874af72342"}
{"code_tokens": ["contract", "c35508{", "function", "unhalt()", "onlyOwner", "{", "require(halted);", "halted", "=", "false;", "}", "}"], "docstring_tokens": ["Unhalt", "halted", "contract", "."], "url": "7a51b71934809e44a5aed90553ac0a5c"}
{"code_tokens": ["contract", "c357{", "function", "beyond(slice", "memory", "self,", "slice", "memory", "needle)", "internal", "pure", "returns", "(slice", "memory)", "{", "if", "(self._len", "<", "needle._len)", "{", "return", "self;", "}", "bool", "equal", "=", "true;", "if", "(self._ptr", "!=", "needle._ptr)", "{", "assembly", "{", "let", "length", ":=", "mload(needle)", "let", "selfptr", ":=", "mload(add(self,", "0x20))", "let", "needleptr", ":=", "mload(add(needle,", "0x20))", "equal", ":=", "eq(keccak256(selfptr,", "length),", "keccak256(needleptr,", "length))", "}", "}", "if", "(equal)", "{", "self._len", "-=", "needle._len;", "self._ptr", "+=", "needle._len;", "}", "return", "self;", "}", "}"], "docstring_tokens": ["If", "self", "starts", "with", "needle", ",", "needle", "is", "removed", "from", "the", "beginning", "of", "self", "."], "url": "ac827cacedd42d264242576eb80e6484"}
{"code_tokens": ["contract", "c16787{", "function", "buyTokens()", "public", "payable", "{", "require(msg.value", "!=", "0);", "require(msg.sender", "!=", "0);", "require(isICOActive()", "||", "postICOSale);", "require(token.whitelist(msg.sender));", "uint256", "tokensPurchased;", "uint256", "weiChange;", "(tokensPurchased,", "weiChange)", "=", "token.weiToTokens(msg.value);", "uint256", "weiExactAmount", "=", "msg.value.sub(weiChange);", "require(tokensPurchased", ">=", "minimumPurchase);", "if", "(isICOActive()", "&&", "token.totalSupply().add(tokensPurchased)", ">", "icoTokenCap)", "revert();", "weiRaised", "=", "weiRaised.add(weiExactAmount);", "token.mint(msg.sender,", "tokensPurchased);", "emit", "TokenPurchase(msg.sender,", "weiExactAmount,", "tokensPurchased);", "wallet.transfer(weiExactAmount);", "msg.sender.transfer(weiChange);", "}", "}"], "docstring_tokens": ["Token", "Purchase", "."], "url": "4040d709d2a302ef4a17ffc041c25175"}
{"code_tokens": ["contract", "c19278{", "function", "create(address[]", "_owners,", "uint", "_required,", "uint", "_dailyLimit)", "public", "returns", "(address", "wallet)", "{", "wallet", "=", "new", "MultiSigWalletWithDailyLimit(_owners,", "_required,", "_dailyLimit);", "register(wallet);", "}", "}"], "docstring_tokens": ["Allows", "verified", "creation", "of", "multisignature", "wallet", "."], "url": "bf2f807b5c36771a5ece574143fca446"}
{"code_tokens": ["contract", "c3702{", "function", "_transferFromInvestor(address", "_from,", "address", "_to,", "uint256", "_value)", "public", "returns(bool", "ret)", "{", "uint256", "addedValue", "=", "searchInvestor[_from]._sentAmount.add(_value);", "require(_timelimitCal(_from)", ">=", "addedValue);", "searchInvestor[_from]._sentAmount", "=", "addedValue;", "ret", "=", "super.transferFrom(_from,", "_to,", "_value);", "if", "(!ret)", "{", "searchInvestor[_from]._sentAmount", "=", "searchInvestor[_from]._sentAmount.sub(_value);", "}else", "{", "emit", "TMTG_TransferFrom(_from,", "msg.sender,", "_to,", "_value);", "}", "}", "}"], "docstring_tokens": ["If", "investor", "is", "from", "in", "transforFrom", ",", "values", "will", "be", "limited", "by", "timelock", "."], "url": "229a73aa5a90965b9be59e9cab243bea"}
{"code_tokens": ["contract", "c40589{", "function", "fillTheirOrder(address", "who)", "public", "returns", "(bool)", "{", "return", "_fillOrder(who,", "getTransferableBalance(who));", "}", "}"], "docstring_tokens": ["Simpler", "call", "signature", "that", "defaults", "to", "the", "account", "allowance", "."], "url": "7458d1d5b9d8e33ec0f7fff0a2dc42d3"}
{"code_tokens": ["contract", "c32282{", "function", "finishMinting()", "external", "onlyOwner", "{", "require(!mintingFinished);", "mintingFinished", "=", "true;", "MintingFinished();", "}", "}"], "docstring_tokens": ["Terminates", "the", "minting", "period", "permenantly", "."], "url": "32e0af0da6e1fd67cec891c638d35e45"}
{"code_tokens": ["contract", "c39620{", "function", "getGameBid(uint", "_gameId,", "uint", "_bidId)", "constant", "returns(address", "bidderAddress,", "uint", "bidsAmount,", "uint", "userId,", "string", "userName,", "bool", "refunded)", "{", "Game", "game", "=", "games[_gameId];", "Bid", "bid=game.bids[_bidId];", "return", "(", "bid.bidderAddress,", "bid.bid,", "bid.userId,", "bid.userName,", "bid.refunded", ");", "}", "}"], "docstring_tokens": ["Get", "bid", "info", "."], "url": "af6abc01a72b2c82ef8d36a174237341"}
{"code_tokens": ["contract", "c10746{", "function", "delegatedTransfer(address", "from,", "address", "to,", "uint", "amount,", "string", "narrative,", "uint", "maxExecutorFeeInToken,", "bytes32", "nonce,", "bytes", "signature,", "uint", "requestedExecutorFeeInToken", ")", "external", "{", "bytes32", "txHash", "=", "keccak256(abi.encodePacked(this,", "from,", "to,", "amount,", "narrative,", "maxExecutorFeeInToken,", "nonce));", "_checkHashAndTransferExecutorFee(txHash,", "signature,", "from,", "maxExecutorFeeInToken,", "requestedExecutorFeeInToken);", "_transfer(from,", "to,", "amount,", "narrative);", "}", "}"], "docstring_tokens": ["Transfers", "based", "on", "an", "offline", "signed", "transfer", "instruction", "."], "url": "87da3f4a4c0b3f472e7196cd3544d1cd"}
{"code_tokens": ["contract", "c21081{", "function", "addToWhiteList(address", "_user)", "external", "onlyOwner()", "{", "if", "(whiteList[_user]", "!=", "true)", "{", "whiteList[_user]", "=", "true;", "totalWhiteListed++;", "emit", "LogWhiteListed(_user,", "totalWhiteListed);", "}else", "revert();", "}", "}"], "docstring_tokens": ["it", "will", "white", "list", "one", "member", "."], "url": "56c52499ffceac2624288d2ff2c65d5d"}
{"code_tokens": ["contract", "c31556{", "function", "tokenMint(address", "_invoker,", "uint256", "_amount)", "private", "returns", "(bool", "raised)", "{", "require(balances[owner].add(_amount)", ">", "balances[owner]);", "require(balances[owner].add(_amount)", ">", "0);", "require(totalSupply.add(_amount)", ">", "0);", "require(totalSupply.add(_amount)", ">", "totalSupply);", "totalSupply", "=", "totalSupply.add(_amount);", "balances[owner]", "=", "balances[owner].add(_amount);", "MintTokens(_invoker,", "_amount,", "true);", "return", "true;", "}", "}"], "docstring_tokens": ["low-level", "minting", "function", "not", "accessible", "externally", "."], "url": "1c40282939caaa3a94e435f269c66dc6"}
{"code_tokens": ["contract", "c16921{", "function", "canBreedWith(uint40", "_momId,", "uint40", "_dadId)", "public", "view", "returns(bool)", "{", "require(_momId", ">", "0);", "require(_dadId", ">", "0);", "Cutie", "storage", "mom", "=", "cuties[_momId];", "Cutie", "storage", "dad", "=", "cuties[_dadId];", "return", "_canPairMate(mom,", "_momId,", "dad,", "_dadId)", "&&", "_isBreedingPermitted(_dadId,", "_momId);", "}", "}"], "docstring_tokens": ["Checks", "to", "see", "if", "two", "cuties", "can", "breed", "together", "(", "checks", "both", "ownership", "and", "breeding", "approvals", ",", "but", "does", "not", "check", "if", "both", "cuties", "are", "ready", "for", "breeding", ")", "."], "url": "e9e86f1016d6851810869a183bb448b7"}
{"code_tokens": ["contract", "c21335{", "function", "createPromoPony(uint256", "_genes,", "address", "_owner)", "external", "onlyCOO", "{", "address", "PonyOwner", "=", "_owner;", "if", "(PonyOwner", "==", "address(0))", "{", "PonyOwner", "=", "cooAddress;", "}", "require(promoCreatedCount", "<", "PROMO_CREATION_LIMIT);", "promoCreatedCount++;", "_createPony(0,", "0,", "0,", "_genes,", "PonyOwner);", "}", "}"], "docstring_tokens": ["we", "can", "create", "promo", "Ponies", ",", "up", "to", "a", "limit", "."], "url": "050cdca76b4b81f74783d1b9dec5a91d"}
{"code_tokens": ["contract", "c39200{", "function", "approveAndCall(address", "_spender,", "uint256", "_value,", "bytes", "_extraData)", "returns", "(bool", "success)", "{", "allowance[msg.sender][_spender]", "=", "_value;", "tokenRecipient", "spender", "=", "tokenRecipient(_spender);", "spender.receiveApproval(msg.sender,", "_value,", "this,", "_extraData);", "return", "true;", "}", "}"], "docstring_tokens": ["Allow", "another", "contract", "to", "spend", "some", "shares", "in", "your", "behalf", "(", "shareholder", "calls", "this", ")", "."], "url": "ab30d304a2f08f98b722bb6c74a3c2d6"}
{"code_tokens": ["contract", "c18536{", "function", "transferExternalToken(address", "_kAddr,", "address", "_to,", "uint", "_amount)", "public", "onlyOwner", "preventReentry", "returns", "(bool)", "{", "require(ERC20Token(_kAddr).transfer(_to,", "_amount));", "return", "true;", "}", "}"], "docstring_tokens": ["Owner", "can", "salvage", "ERC20", "tokens", "that", "may", "have", "been", "sent", "to", "the", "account", "."], "url": "db639bac780cde23dd50997b80c82c9a"}
{"code_tokens": ["contract", "c27099{", "function", "updateTicketPrice(uint", "updatedPrice)", "public", "onlyOwner", "{", "require(raffleState", "==", "RaffleState.InActive);", "require(updatedPrice", ">", "0);", "ticketPrice", "=", "updatedPrice;", "}", "}"], "docstring_tokens": ["Updates", "the", "ticket", "price", "."], "url": "64f324a1b3bae78beb461d3eb153e626"}
{"code_tokens": ["contract", "c23504{", "function", "setTokenName(address", "_tokenInterface,", "uint256", "_tokenId,", "string", "_name)", "setTokenText(_tokenInterface,", "_tokenId,", "_name)", "external", "payable", "{", "_setTokenName(_tokenInterface,", "_tokenId,", "_name);", "}", "}"], "docstring_tokens": ["set", "name", "for", "specified", "token", ",", "."], "url": "fc0b77d04ea024b5c783a529290f7aa7"}
{"code_tokens": ["contract", "c28537{", "function", "Win()", "public", "{", "require(msg.sender", "==", "winner);", "require(now", ">", "deadline);", "uint", "pendingReward", "=", "reward;", "reward", "=", "0;", "winner.transfer(pendingReward);", "}", "}"], "docstring_tokens": ["The", "winner", "is", "responsible", "for", "withdrawing", "the", "funds", "after", "the", "button", "expires", "."], "url": "aff965aac9a5e7fdde844ffc73a2d156"}
{"code_tokens": ["contract", "c33181{", "function", "extendDuration(uint256", "_newEndTime)", "onlyOwner", "{", "require(!isFinalized);", "require(endTime", "<", "_newEndTime);", "endTime", "=", "_newEndTime;", "PresaleExtended(_newEndTime);", "}", "}"], "docstring_tokens": ["Optional", "settings", "to", "extend", "the", "duration", "."], "url": "0aef8963ecd30834d4269510674995ab"}
{"code_tokens": ["contract", "c20803{", "function", "getCountBuildings(uint", "_cityId,", "uint", "_buildingType,", "bool", "_active)", "public", "view", "returns(uint)", "{", "uint", "counter", "=", "0;", "for", "(uint", "i", "=", "0;", "i", "<", "buildings.length;", "i++)", "{", "if(_active", "==", "true)", "{", "if(buildings[i].buildingType", "==", "_buildingType", "&&", "buildings[i].cityId", "==", "_cityId", "&&", "buildings[i].readyTime", "<", "now)", "{", "counter++;", "}", "}", "else", "{", "if(buildings[i].buildingType", "==", "_buildingType", "&&", "buildings[i].cityId", "==", "_cityId", "&&", "buildings[i].readyTime", ">=", "now)", "{", "counter++;", "}", "}", "}", "return", "counter;", "}", "}"], "docstring_tokens": ["Count", "the", "number", "of", "active", "or", "pending", "buildings", "."], "url": "0a30bce4d98853918cd3eb1a2357827e"}
{"code_tokens": ["contract", "c39269{", "modifier", "canEnter()", "{", "require(!(__reMutex", "||", "panicked", "||", "__initFuse));", "_;", "}", "}"], "docstring_tokens": ["Blocks", "if", "reentry", "mutex", "or", "panicked", "is", "true", "."], "url": "622573241578d16751ba33f7d5e1ea64"}
{"code_tokens": ["contract", "c33165{", "function", "preparePreContribution(uint", "_preSaleConversionRate,", "uint", "_preSaleStartDate,", "uint", "_preSaleEndDate)", "public", "onlyOwner", "inState(States.PreparePreContribution)", "{", "validatePreContribution(_preSaleConversionRate,", "_preSaleStartDate,", "_preSaleEndDate);", "preSaleConversionRate", "=", "_preSaleConversionRate;", "preSaleStartDate", "=", "_preSaleStartDate;", "preSaleEndDate", "=", "_preSaleEndDate;", "LogPreparePreContribution(msg.sender,", "preSaleConversionRate,", "preSaleStartDate,", "preSaleEndDate);", "}", "}"], "docstring_tokens": ["This", "method", "can", "optional", "be", "called", "by", "the", "owner", "to", "adjust", "the", "conversionRate", ",", "startDate", "and", "endDate", "before", "contribution", "phase", "starts", "."], "url": "6bb372642031075c2f5fc00aeaeef9a5"}
{"code_tokens": ["contract", "c32880{", "function", "setPresaleTime(uint256", "_preSaleStartTime,", "uint256", "_preSaleEndTime)", "public", "returns", "(bool", "success)", "{", "require(msg.sender", "==", "ownerAddress);", "preSaleStartTime", "=", "_preSaleStartTime;", "preSaleEndTime", "=", "_preSaleEndTime;", "return", "true;", "}", "}"], "docstring_tokens": ["Set", "change", "the", "presale", "period", "if", "necessary", "."], "url": "a315fec58801e52e6382c4f55932d183"}
{"code_tokens": ["contract", "c37476{", "function", "assignBounty(address", "_account,", "uint256", "_amount)", "onlyOwner", "external", "returns(bool)", "{", "require(_amount", ">", "0);", "if", "(balances[_account]", ">", "0", "&&", "bounties[_account]", "+", "_amount", "<=", "1000000", ")", "{", "issueTo(_account,", "_amount);", "return", "true;", "}", "else", "{", "return", "false;", "}", "}", "}"], "docstring_tokens": ["Santa", "is", "coming", "!", "Who", "ever", "made", "impact", "to", "promote", "the", "Fish", "and", "can", "prove", "it", "will", "get", "the", "bonus", "."], "url": "8d52bb026f5e64852d676fd709e30170"}
{"code_tokens": ["contract", "c30283{", "function", "getArmyBattles(uint", "_armyId)", "public", "view", "returns(uint,", "uint)", "{", "return", "(armyCountBattlesWon[_armyId],", "armyCountBattlesLost[_armyId]);", "}", "}"], "docstring_tokens": ["Retrieve", "count", "battles", "won", "."], "url": "d1118fcf9f3f7c2a628097dd6906243b"}
{"code_tokens": ["contract", "c1996{", "function", "whitelistToken(address", "_token)", "public", "onlyOwner()", "{", "require(!tokenWhitelist[_token],", "\"Token", "is", "already", "whitelisted\");", "tokenWhitelist[_token]", "=", "true;", "}", "}"], "docstring_tokens": ["Whitelist", "a", "token", "so", "it", "can", "be", "distributed", "."], "url": "d44017afb129fd10de5bee71686ff441"}
{"code_tokens": ["contract", "c2198{", "function", "getWinnerAddressList()", "public", "isEnded", "view", "returns", "(address[])", "{", "if", "(winnerSide", "==", "1)", "{", "return", "option1AddressList;", "}else", "{", "return", "option2AddressList;", "}", "}", "}"], "docstring_tokens": ["return", "the", "players", "who", "won", "the", "game", "."], "url": "b5e850f821dfa475552dcaf31d54a540"}
{"code_tokens": ["contract", "c11539{", "function", "fSqrt(uint", "n)", "internal", "pure", "returns", "(uint)", "{", "if", "(n", "==", "0)", "{", "return", "0;", "}", "uint", "z", "=", "n", "*", "n;", "require(z", "/", "n", "==", "n);", "uint", "high", "=", "fAdd(n,", "DECMULT);", "uint", "low", "=", "0;", "while", "(fSub(high,", "low)", ">", "1)", "{", "uint", "mid", "=", "fAdd(low,", "high)", "/", "2;", "if", "(fSqr(mid)", "<=", "n)", "{", "low", "=", "mid;", "}", "else", "{", "high", "=", "mid;", "}", "}", "return", "low;", "}", "}"], "docstring_tokens": ["Square", "root", "."], "url": "6b2c5d8b21a7c1715831de9f491bd8fe"}
{"code_tokens": ["contract", "c15421{", "function", "transferFrom(address", "_from,", "address", "_to,", "uint", "_value)", "unfreezed(_to)", "unfreezed(_from)", "unfreezed(msg.sender)", "noEmergencyFreeze()", "public", "returns", "(bool", "success)", "{", "require(_value", "<=", "allowed[_from][msg.sender]);", "require", "(_value", "<=", "balances[_from]);", "balances[_from]", "=", "balances[_from].sub(_value);", "allowed[_from][msg.sender]", "=", "allowed[_from][msg.sender].sub(_value);", "balances[_to]", "=", "balances[_to].add(_value);", "emit", "Transfer(_from,", "_to,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["Transferred", "approved", "amount", "from", "other's", "account", "."], "url": "00a8f41f5a03dc22c32152f0b05084f8"}
{"code_tokens": ["contract", "c5559{", "function", "refundBet(uint", "commit)", "external", "{", "Bet", "storage", "bet", "=", "bets[commit];", "uint", "amount", "=", "bet.amount;", "require", "(amount", "!=", "0,", "\"Bet", "should", "be", "in", "an", "'active'", "state\");", "require", "(block.number", ">", "bet.placeBlockNumber", "+", "BET_EXPIRATION_BLOCKS,", "\"Blockhash", "can't", "be", "queried", "by", "EVM.\");", "bet.amount", "=", "0;", "uint", "diceWinAmount;", "uint", "jackpotFee;", "(diceWinAmount,", "jackpotFee)", "=", "getDiceWinAmount(amount,", "bet.modulo,", "bet.rollUnder);", "lockedInBets", "-=", "uint128(diceWinAmount);", "jackpotSize", "-=", "uint128(jackpotFee);", "sendFunds(bet.gambler,", "amount,", "amount);", "}", "}"], "docstring_tokens": ["Refund", "transaction", "-", "return", "the", "bet", "amount", "of", "a", "roll", "that", "was", "not", "processed", "in", "a", "due", "timeframe", "."], "url": "33ffd3c747d05ce343bc8519bd49638e"}
{"code_tokens": ["contract", "c8660{", "function", "removeMinter(address", "minter)", "public", "onlyOwner", "{", "require(minter", "!=", "owner);", "require(minters[minter]", "==", "true);", "emit", "MinterRemoved(minter);", "delete", "minters[minter];", "}", "}"], "docstring_tokens": ["Allows", "the", "owner", "to", "remove", "an", "existing", "minter", "."], "url": "b653132248123dd1a6d6cbada2da1a78"}
{"code_tokens": ["contract", "c10952{", "function", "setQuickBuyPath(IERC20Token[]", "_path)", "public", "ownerOnly", "validConversionPath(_path)", "{", "quickBuyPath", "=", "_path;", "}", "}"], "docstring_tokens": ["allows", "the", "manager", "to", "update", "the", "quick", "buy", "path", "."], "url": "e40d5bfa213a6785c622a881ee40f1bb"}
{"code_tokens": ["contract", "c25142{", "function", "transferFrom(address", "_from,", "address", "_to,", "uint", "_value)", "isIcoClosed", "public", "returns", "(bool", "success)", "{", "require(_from", "!=", "ausGroup);", "if", "(isICOParticipant[_from])", "{", "require(whiteListed[_from]);", "}", "return", "super.transferFrom(_from,", "_to,", "_value);", "}", "}"], "docstring_tokens": ["Override", "to", "enforce", "modifier", "that", "ensures", "that", "ICO", "is", "closed", "before", "the", "following", "function", "is", "invoked", "."], "url": "a96e0054e9d3a42d10ec4b361efb1e33"}
{"code_tokens": ["contract", "c374{", "function", "setUnlockEarlier(uint256", "_earlier)", "public", "onlyOwner", "{", "earlier", "=", "add(earlier,", "_earlier);", "}", "}"], "docstring_tokens": ["fast-forward", "the", "timelocks", "for", "all", "accounts", "."], "url": "55d45c684243709e7129d8c9c6b09ec1"}
{"code_tokens": ["contract", "c20611{", "function", "withdraw()", "public", "onlyOwner", "{", "require(currentVotingDate", "==", "0);", "require(allowedWithdraw", ">", "0);", "owner.transfer(allowedWithdraw);", "Withdraw(now,", "allowedWithdraw);", "allowedWithdraw", "=", "0;", "}", "}"], "docstring_tokens": ["Withdraw", "the", "current", "voiting", "amount", "."], "url": "c6a25f9f278a5eeb366d1346dfcf071b"}
{"code_tokens": ["contract", "c28791{", "function", "createChannelDelegate(", "address", "_sender_address,", "address", "_receiver_address,", "uint192", "_deposit)", "isTrustedContract", "external", "{", "createChannelPrivate(_sender_address,", "_receiver_address,", "_deposit);", "require(token.transferFrom(msg.sender,", "address(this),", "_deposit));", "}", "}"], "docstring_tokens": ["Function", "that", "allows", "a", "delegate", "contract", "to", "create", "a", "new", "channel", "between", "_sender_address", "and", "_receiver_address", "and", "transfers", "the", "token", "deposit", "to", "this", "contract", "."], "url": "9220c5c1f540d7b33fafa820b466a9a2"}
{"code_tokens": ["contract", "c35804{", "modifier", "hasStartedTrading()", "{", "require(tradingStarted);", "_;", "}", "}"], "docstring_tokens": ["modifier", "that", "revert", "(", ")", "s", "if", "trading", "has", "not", "started", "yet", "."], "url": "13f502cbbe8281d70f00c23535be5eb4"}
{"code_tokens": ["contract", "c33593{", "function", "tokensaleStageNow()", "public", "constant", "returns", "(uint256)", "{", "return", "tokensaleStageAt(tokensale.totalTokensDistributedRAW1e18);", "}", "}"], "docstring_tokens": ["public", "(", "read", "only", ")", ":", "calc", "the", "active", "sale", "stage", "as", "a", "function", "of", "already", "selled", "amount", "."], "url": "b1ad3c1e73bbaf9b1b89d1b5cf4a0979"}
{"code_tokens": ["contract", "c17542{", "modifier", "whenNotPaused(){", "require(!paused);", "_;", "}", "}"], "docstring_tokens": ["Pausable", "functionality", "adapted", "from", "OpenZeppelin", "/", "dev", "Modifier", "to", "allow", "actions", "only", "when", "the", "contract", "IS", "NOT", "paused", "."], "url": "aba87afd92d58603a72a1fc4a8654ce3"}
{"code_tokens": ["contract", "c40077{", "function", "disown(bytes20", "blobId)", "external", "isOwner(blobId)", "isTransferable(blobId)", "{", "delete", "blobInfo[blobId].owner;", "Disown(blobId);", "}", "}"], "docstring_tokens": ["Disown", "a", "blob", "."], "url": "13463eda99ed840534542b6ef3fffb5a"}
{"code_tokens": ["contract", "c18058{", "function", "processReservationFundContribution(", "address", "contributor,", "uint256", "tokenAmount,", "uint256", "tokenBonusAmount", ")", "external", "payable", "checkCap", "{", "require(msg.sender", "==", "address(reservationFund));", "require(msg.value", ">", "0);", "processPayment(contributor,", "msg.value,", "tokenAmount,", "tokenBonusAmount,", "false);", "}", "}"], "docstring_tokens": ["Process", "ether", "contribution", "before", "KYC", "."], "url": "779d2253113ec72ad24c46d1ce25599b"}
{"code_tokens": ["contract", "c15412{", "function", "claim()", "public", "onlyOwner", "{", "require(now", ">=", "releaseTime,", "\"now", ">=", "releaseTime\");", "uint256", "amount", "=", "token.balanceOf(this);", "require(amount", ">", "0,", "\"amount", ">", "0\");", "token.safeTransfer(owner,", "amount);", "}", "}"], "docstring_tokens": ["Transfers", "tokens", "held", "by", "timelock", "to", "owner", "."], "url": "d873da1e9d12b3f899b6dd4e4c0f7e63"}
{"code_tokens": ["contract", "c6208{", "function", "migrationSetPlayer(bytes32", "boardHash,", "uint", "playerID,", "bytes32", "playerName,", "address", "playerAddress,", "uint", "score,", "uint", "score_unconfirmed,", "uint", "isActive)", "isOwner", "public", "returns", "(bool)", "{", "Board", "storage", "g", "=", "boards[boardHash];", "g.players[playerID]", "=", "Player(playerName,", "playerAddress,", "score,", "score_unconfirmed,", "isActive);", "return", "true;", "}", "}"], "docstring_tokens": ["Write", "player", "metadata", "for", "migration", "as", "contract", "owner", "only", "."], "url": "3dc110bbe5aa0a2b693384a2e92281bf"}
{"code_tokens": ["contract", "c25922{", "function", "getNamelistLength()", "public", "view", "returns(uint", "namelistLength)", "{", "return", "namelist.length;", "}", "}"], "docstring_tokens": ["get", "namelist", "length", "for", "exporting", "mapping", "."], "url": "ea328684e086b4e0f5eb4527a555c312"}
{"code_tokens": ["contract", "c2728{", "modifier", "isValidRewardPercentage(uint256", "_percentage)", "{", "require(_percentage", "<=", "rewardPercentageDivisor,", "\"Cannot", "have", "a", "reward", "percentage", "greater", "than", "100%!\");", "_;", "}", "}"], "docstring_tokens": ["Verifies", "the", "reward", "percentage", "is", "valid", "."], "url": "1d6cfb1c28e9985bf64a9c170d8716a1"}
{"code_tokens": ["contract", "c18255{", "function", "canRefund()", "public", "view", "returns(bool)", "{", "bool", "winnerNotAnnouncedInTime", "=", "(now", ">", "ANNOUNCE_WINNER_DEADLINE)", "&&", "!winnerConfirmed;", "bool", "notExpired", "=", "(now", "<=", "CLAIM_DEADLINE);", "return", "(refundsEnabled", "||", "winnerNotAnnouncedInTime)", "&&", "notExpired;", "}", "}"], "docstring_tokens": ["Check", "if", "refunds", "are", "possible", "."], "url": "c2dd3837490fe6af4adfe75d17c0c7bd"}
{"code_tokens": ["contract", "c188{", "function", "keys(uint256", "_eth)", "internal", "pure", "returns(uint256)", "{", "return", "((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000))", "/", "(156250000);", "}", "}"], "docstring_tokens": ["calculates", "how", "many", "keys", "would", "exist", "with", "given", "an", "amount", "of", "eth", "."], "url": "4369568a13fd1194d10d816c89fd2c78"}
{"code_tokens": ["contract", "c18600{", "function", "collectTokens()", "public", "onlyOwner", "{", "uint256", "balance", "=", "token.balanceOf(address(this));", "uint256", "total", "=", "collectedTokens.add(balance);", "uint256", "finalizedTime", "=", "crowdsale.finalizedTime();", "require(finalizedTime", ">", "0", "&&", "getTime()", ">=", "finalizedTime.add(months(3)));", "uint256", "canExtract", "=", "total.mul(getTime().sub(finalizedTime)).div(months(LOCKUP_TIME));", "canExtract", "=", "canExtract.sub(collectedTokens);", "if", "(canExtract", ">", "balance)", "{", "canExtract", "=", "balance;", "}", "collectedTokens", "=", "collectedTokens.add(canExtract);", "assert(token.transfer(owner,", "canExtract));", "TokensWithdrawn(owner,", "canExtract);", "}", "}"], "docstring_tokens": ["The", "Dev", "(", "Owner", ")", "will", "call", "this", "method", "to", "extract", "the", "tokens", "."], "url": "308642b3b6856808c88360f9a8e2edfd"}
{"code_tokens": ["contract", "c29614{", "function", "validPresalePurchase()", "internal", "constant", "returns", "(bool)", "{", "bool", "withinPeriod", "=", "now", ">=", "presaleStartTime", "&&", "now", "<=", "presaleEndTime;", "bool", "nonZeroPurchase", "=", "msg.value", "!=", "0;", "bool", "validPresaleLimit", "=", "msg.value", ">=", "presaleLimit;", "return", "withinPeriod", "&&", "nonZeroPurchase", "&&", "validPresaleLimit;", "}", "}"], "docstring_tokens": ["true", "if", "the", "transaction", "can", "buy", "tokens", "in", "presale", "."], "url": "f14eec74d8067539ff1e436fa5d686e7"}
{"code_tokens": ["contract", "c37353{", "function", "distributeAllTokens()", "public", "{", "require(!bovBatchDistributed);", "require(crowdsaleHasEnded());", "for", "(uint", "i=0;", "i", "<", "numberOfInvestors;", "i++)", "{", "address", "investorAddr", "=", "investors[i];", "if", "(!claimed[investorAddr])", "{", "claimed[investorAddr]", "=", "true;", "uint", "amountInvested", "=", "investments[investorAddr];", "uint", "bovEarned", "=", "amountInvested.mul(initialSale).div(weiRaised);", "mint(investorAddr,", "bovEarned);", "}", "}", "bovBatchDistributed", "=", "true;", "}", "}"], "docstring_tokens": ["Distribute", "10M", "tokens", "proportionally", "amongst", "all", "investors", "."], "url": "4604e231015810e4cf306e87d7626a9b"}
{"code_tokens": ["contract", "c31236{", "function", "withdraw(uint64", "idPledge,", "uint", "amount)", "{", "idPledge", "=", "normalizePledge(idPledge);", "Pledge", "storage", "p", "=", "findPledge(idPledge);", "require(p.pledgeState", "==", "PledgeState.Pledged);", "PledgeAdmin", "storage", "owner", "=", "findAdmin(p.owner);", "checkAdminOwner(owner);", "uint64", "idNewPledge", "=", "findOrCreatePledge(", "p.owner,", "p.delegationChain,", "0,", "0,", "p.oldPledge,", "PledgeState.Paying", ");", "doTransfer(idPledge,", "idNewPledge,", "amount);", "vault.authorizePayment(bytes32(idNewPledge),", "owner.addr,", "amount);", "}", "}"], "docstring_tokens": ["This", "method", "is", "used", "to", "withdraw", "value", "from", "the", "system", "."], "url": "c9f3f6981ad3dba9ece68f1da52a48af"}
{"code_tokens": ["contract", "c28950{", "modifier", "inState(State", "_state)", "{", "require(currentState", "==", "_state);", "_;", "}", "}"], "docstring_tokens": ["modifier", "that", "fails", "if", "state", "doesn't", "match", "."], "url": "d44ef722eebc264a6324c3c060d6ef42"}
{"code_tokens": ["contract", "c25898{", "function", "snatchWindowOf(uint256", "_tokenId)", "public", "view", "returns", "(uint256", "price)", "{", "return", "masterpieceToSnatchWindow[_tokenId];", "}", "}"], "docstring_tokens": ["Returns", "the", "snatch", "window", "of", "the", "given", "token", "."], "url": "06b2cc0fb840589c3b16bca1dae16cb8"}
{"code_tokens": ["contract", "c26751{", "function", "getHeader(bytes32", "data)", "public", "returns", "(Header)", "{", "return", "blockHeaders[data];", "}", "}"], "docstring_tokens": ["storeBlockHeader", "(", "header", ")", "pareses", "a", "length", "80", "bytes", "and", "stores", "the", "resulting", "."], "url": "1a974c683122502b0263221b5f6601fb"}
{"code_tokens": ["contract", "c3813{", "function", "setSoftcap(uint", "newSoftcap)", "public", "onlyOwner", "{", "require(newSoftcap", ">", "0);", "softcap", "=", "newSoftcap.mul(1", "ether);", "}", "}"], "docstring_tokens": ["sets", "softcap", "."], "url": "6e9f4556a453d08cf6eb4dd606827be9"}
{"code_tokens": ["contract", "c20598{", "function", "revokeCertificate(bytes32", "certificate_hash)", "public", "onlyCA", "{", "CertificateMeta", "storage", "cert", "=", "certificates[certificate_hash];", "require(cert.ca_address", "==", "msg.sender);", "cert.expires", "=", "0;", "LogRevokeCertificate(msg.sender,", "certificate_hash);", "}", "}"], "docstring_tokens": ["Revokes", "an", "existing", "certificate", "-", "can", "be", "called", "by", "certificate", "authority", "that", "issued", "the", "certificate", "."], "url": "3fbdb1accfa4422ac8c25103a222fbce"}
{"code_tokens": ["contract", "c25612{", "function", "changePeriod(uint256", "_startTime,", "uint256", "_endDiscountTime,", "uint256", "_endTime)", "public{", "require(wallets[uint8(Roles.manager)]", "==", "msg.sender);", "require(!isInitialized);", "require(now", "<=", "_startTime);", "require(_endDiscountTime", ">", "_startTime", "&&", "_endDiscountTime", "<=", "_endTime);", "startTime", "=", "_startTime;", "endTime", "=", "_endTime;", "endDiscountTime", "=", "_endDiscountTime;", "}", "}"], "docstring_tokens": ["Change", "the", "date", "and", "time", ":", "the", "beginning", "of", "the", "round", ",", "the", "end", "of", "the", "bonus", ",", "the", "end", "of", "the", "round", "."], "url": "144392cb460e848b822fd2cfdf5f5a8b"}
{"code_tokens": ["contract", "c37305{", "function", "changeSaleBlocks(uint", "_initialBlock,", "uint", "_discountBlock,", "uint", "_finalBlock)", "onlyOwner", "only_sale_not_stopped", "public", "{", "if", "(_initialBlock", ">=", "_finalBlock)", "throw;", "if", "(_initialBlock", ">=", "_discountBlock)", "throw;", "if", "(saleFinalized)", "throw;", "initialBlock", "=", "_initialBlock;", "discountBlock", "=", "_discountBlock;", "finalBlock", "=", "_finalBlock;", "}", "}"], "docstring_tokens": ["Function", "to", "change", "sale", "block", "intervals", "."], "url": "cd03f7f2df487fae0ec4bf0010ca1d5e"}
{"code_tokens": ["contract", "c11055{", "function", "tokensOf", "(address", "_owner)", "public", "view", "returns", "(uint256[]", "_tokenIds)", "{", "uint256[]", "memory", "items", "=", "new", "uint256[](balanceOf(_owner));", "uint256", "itemCounter", "=", "0;", "for", "(uint256", "i", "=", "0;", "i", "<", "listedItems.length;", "i++)", "{", "if", "(ownerOf(listedItems[i])", "==", "_owner)", "{", "items[itemCounter]", "=", "listedItems[i];", "itemCounter", "+=", "1;", "}", "}", "return", "items;", "}", "}"], "docstring_tokens": ["tokens", "of", "an", "address", "."], "url": "7983df3b71892ba2e7a61c028778af63"}
{"code_tokens": ["contract", "c13000{", "function", "supportsToken(address", "_token)", "public", "constant", "returns", "(bool)", "{", "return", "(clnAddress", "==", "_token", "||", "currencyMap[_token].totalSupply", ">", "0);", "}", "}"], "docstring_tokens": ["implementation", "for", "standard", "223", "reciver", "."], "url": "55a7d75e3f6a73e76284de3656f53625"}
{"code_tokens": ["contract", "c3105{", "function", "revealPurchaseOrder(bytes32", "_sealedPurchaseOrder,", "uint", "_period,", "uint", "_value,", "bytes32", "_salt,", "address", "_alias)", "public", "{", "require(_alias", "!=", "address(0));", "require(currentPeriodIndex()", "==", "_period.add(1));", "Period", "storage", "period", "=", "periods[_period];", "require(period.aliases[msg.sender]", "==", "address(0));", "bytes32", "h", "=", "createPurchaseOrder(msg.sender,", "_period,", "_value,", "_salt);", "require(h", "==", "_sealedPurchaseOrder);", "require(_value", "<=", "period.receivedBalances[msg.sender]);", "period.totalReceived", "=", "period.totalReceived.add(_value);", "uint", "remainder", "=", "period.receivedBalances[msg.sender].sub(_value);", "period.receivedBalances[msg.sender]", "=", "_value;", "period.aliases[msg.sender]", "=", "_alias;", "emit", "SealedOrderRevealed(msg.sender,", "_period,", "_alias,", "_value);", "_alias.transfer(remainder);", "}", "}"], "docstring_tokens": ["Reveal", "a", "sealed", "purchase", "order", "and", "commit", "to", "a", "purchase", "."], "url": "9ac07f26357f95df196af107d2f02763"}
{"code_tokens": ["contract", "c31913{", "function", "getOwnerCount(WalletMainLib.WalletData", "storage", "self)", "public", "view", "returns", "(uint256)", "{", "return", "self.owners.length", "-", "1;", "}", "}"], "docstring_tokens": ["Get", "number", "of", "wallet", "owners", "."], "url": "471b1517b1861bebf87ac620335a4a62"}
{"code_tokens": ["contract", "c32729{", "function", "withdraw(uint256", "amount)", "public", "onlyExisting(msg.sender)", "{", "uint256", "newTotal", "=", "calculateTotalWithdrawableAmount(msg.sender);", "if", "(amount", ">", "newTotal.sub(members[msg.sender].withdrawn))", "revert();", "members[msg.sender].withdrawn", "=", "members[msg.sender].withdrawn.add(amount);", "totalWithdrawn", "=", "totalWithdrawn.add(amount);", "msg.sender.transfer(amount);", "Withdraw(msg.sender,", "amount,", "totalWithdrawn);", "}", "}"], "docstring_tokens": ["Function", "for", "a", "member", "to", "withdraw", "Ether", "from", "the", "contract", "proportional", "to", "the", "amount", "of", "shares", "they", "have", "."], "url": "9b49b28db1ee162c073cc09d9d1fce7c"}
{"code_tokens": ["contract", "c17516{", "function", "allowance(address", "_owner,", "address", "_spender)", "public", "view", "returns", "(uint256", "remaining)", "{", "if", "(_spender", "!=", "owner)", "{", "return", "allowed[_owner][_spender];", "}", "uint256", "unlockedTokens;", "uint256", "spentTokens;", "if", "(_owner", "==", "overdraftAllocation)", "{", "unlockedTokens", "=", "_calculateUnlockedTokens(", "overdraftCliff,", "overdraftPeriodLength,", "overdraftPeriodAmount,", "overdraftPeriodsNumber,", "overdraftUnvested", ");", "spentTokens", "=", "sub(overdraftTotal,", "balanceOf(overdraftAllocation));", "}", "else", "if", "(_owner", "==", "teamAllocation)", "{", "unlockedTokens", "=", "_calculateUnlockedTokens(", "teamCliff,", "teamPeriodLength,", "teamPeriodAmount,", "teamPeriodsNumber,", "teamUnvested", ");", "spentTokens", "=", "sub(teamTotal,", "balanceOf(teamAllocation));", "}", "else", "if", "(_owner", "==", "communityAllocation)", "{", "unlockedTokens", "=", "_calculateUnlockedTokens(", "communityCliff,", "communityPeriodLength,", "communityPeriodAmount,", "communityPeriodsNumber,", "communityUnvested", ");", "spentTokens", "=", "sub(communityTotal,", "balanceOf(communityAllocation));", "}", "else", "if", "(_owner", "==", "advisersAllocation)", "{", "unlockedTokens", "=", "_calculateUnlockedTokens(", "advisersCliff,", "advisersPeriodLength,", "advisersPeriodAmount,", "advisersPeriodsNumber,", "advisersUnvested", ");", "spentTokens", "=", "sub(advisersTotal,", "balanceOf(advisersAllocation));", "}", "else", "{", "return", "allowed[_owner][_spender];", "}", "return", "sub(unlockedTokens,", "spentTokens);", "}", "}"], "docstring_tokens": ["Overrides", "StandardToken", ".", "sol", "."], "url": "fdc86709d649e63196aa68dc136e6936"}
{"code_tokens": ["contract", "c37398{", "function", "buy_the_tokens()", "{", "if", "(bought_tokens)", "return;", "if", "(this.balance", "<", "min_required_amount)", "throw;", "if", "(block.number", "<", "min_buy_block)", "throw;", "bought_tokens", "=", "true;", "contract_eth_value", "=", "this.balance;", "sale.transfer(contract_eth_value);", "}", "}"], "docstring_tokens": ["Buys", "tokens", "in", "the", "crowdsale", "."], "url": "70aadda308c005627f7af1cc9c90a747"}
{"code_tokens": ["contract", "c11005{", "function", "remove(address", "addr)", "public", "ownerOnly", "{", "valid_contracts[addr]", "=", "false;", "}", "}"], "docstring_tokens": ["removes", "validated", "contract", "."], "url": "814d789397f55d3f4f1870c946149760"}
{"code_tokens": ["contract", "c14622{", "function", "checkTierCap(uint8", "_tier,", "uint256", "_value)", "internal", "view", "returns", "(bool", "_success)", "{", "uint256", "currentlyTokensSent", "=", "tokensSent[_tier];", "bool", "status", "=", "true;", "if(_tier", "==", "0)", "{", "if(TIER1_CAP", "<", "currentlyTokensSent.add(_value))", "{", "status", "=", "false;", "}", "}", "else", "if(_tier", "==", "1)", "{", "if(TIER2_CAP", "<", "currentlyTokensSent.add(_value))", "{", "status", "=", "false;", "}", "}", "return", "status;", "}", "}"], "docstring_tokens": ["Check", "contribution", "cap", "for", "only", "tier", "1", "and", "2", "."], "url": "fe7c96feabf4f093939138958ee07307"}
{"code_tokens": ["contract", "c17894{", "function", "getPlayerClickCount(uint", "roundId,", "address", "player)", "public", "view", "returns", "(uint)", "{", "return", "Rounds[roundId].playerClickCounts[player];", "}", "}"], "docstring_tokens": ["Returns", "the", "number", "of", "times", "the", "given", "player", "has", "clicked", "EtherButton", "during", "the", "given", "round", "."], "url": "2bf7281eb239c4505300afcdc28e2333"}
{"code_tokens": ["contract", "c34482{", "function", "requestConversion(uint", "_value)", "public", "{", "require(_value", ">", "0);", "address", "sender", "=", "msg.sender;", "require(!requireAuthentication", "||", "whitelist.authenticate(sender));", "IToken", "drpToken", "=", "IToken(getLeftToken());", "drpToken.transferFrom(sender,", "this,", "_value);", "convert(drpToken,", "sender,", "_value);", "}", "}"], "docstring_tokens": ["Request", "that", "the", "(", "old", ")", "drp", "smart-contract", "transfers", "_value", "worth", "of", "(", "old", ")", "drp", "to", "the", "drps", "token", "converter", "to", "be", "converted", "."], "url": "cd1266fcd45dad711255fcc3f68f65e2"}
{"code_tokens": ["contract", "c15018{", "function", "proxyExchange(address", "beneficiary,", "uint", "payment,", "string", "description,", "bytes32", "checksum)", "public", "grantOwnerOrAdmin", "{", "require(beneficiary", "!=", "address(0),", "\"Beneficiary", "not", "specified\");", "require(bytes(description).length", ">", "0,", "\"Description", "not", "specified\");", "require(checksum.length", ">", "0,", "\"Checksum", "not", "specified\");", "require(bytes(externalPaymentDescriptions[checksum]).length", "==", "0,", "\"Payment", "already", "processed\");", "processPayment(beneficiary,", "payment,", "checksum);", "externalPaymentDescriptions[checksum]", "=", "description;", "participantExternalPaymentChecksums[beneficiary].push(checksum);", "}", "}"], "docstring_tokens": ["Intended", "when", "other", "currencies", "are", "received", "and", "owner", "has", "to", "carry", "out", "exchange", "for", "those", "payments", "aligned", "to", "Wei", "."], "url": "66f15256685624c1e2cf95004618ec5a"}
{"code_tokens": ["contract", "c444{", "function", "disableMinting()", "onlyMinter", "canMint", "public", "{", "mintingDisabled", "=", "true;", "emit", "MintingDisabled();", "}", "}"], "docstring_tokens": ["Disable", "the", "minting", "of", "new", "tokens", "."], "url": "6ad07a3725669eeddd2f4f597c231f18"}
{"code_tokens": ["contract", "c16772{", "function", "tokensOfOwner(address", "_owner)", "external", "view", "returns(uint256[]", "ownerTokens)", "{", "uint256", "tokenCount", "=", "balanceOf(_owner);", "if", "(tokenCount", "==", "0)", "{", "return", "new", "uint256[](0);", "}", "else", "{", "uint256[]", "memory", "result", "=", "new", "uint256[](tokenCount);", "uint256", "totalCats", "=", "totalSupply();", "uint256", "resultIndex", "=", "0;", "uint256", "catId;", "for", "(catId", "=", "1;", "catId", "<=", "totalCats;", "catId++)", "{", "if", "(petIndexToOwner[catId]", "==", "_owner)", "{", "result[resultIndex]", "=", "catId;", "resultIndex++;", "}", "}", "return", "result;", "}", "}", "}"], "docstring_tokens": ["Returns", "a", "list", "of", "all", "Kitty", "IDs", "assigned", "to", "an", "address", "."], "url": "6124cc49b6775810cdb61302b6150238"}
{"code_tokens": ["contract", "c9431{", "function", "convertMainchainGPX(string", "destinationAccount,", "string", "extra)", "external", "returns", "(bool)", "{", "require(bytes(destinationAccount).length", ">", "10", "&&", "bytes(destinationAccount).length", "<", "128);", "require(balances[msg.sender]", ">", "0);", "uint256", "amount", "=", "balances[msg.sender];", "balances[msg.sender]", "=", "0;", "balances[tokenPool]", "=", "balances[tokenPool].add(amount);", "Converted(msg.sender,", "destinationAccount,", "amount,", "extra);", "return", "true;", "}", "}"], "docstring_tokens": ["FEATURE", "5", ")", ":", "Convertible", "implements", "."], "url": "b46f9e4f353ea98eba6b4fb33c4d1dfd"}
{"code_tokens": ["contract", "c29893{", "function", "safeAdd(uint256", "a,", "uint256", "b)", "internal", "pure", "returns", "(uint256)", "{", "assert(a+b", ">=", "a);", "return", "a+b;", "}", "}"], "docstring_tokens": ["dev", "Returns", "the", "sum", "of", "a", "and", "b", "."], "url": "cced302c8dbb3fd0c86fc67754fb253f"}
{"code_tokens": ["contract", "c29946{", "function", "moveAllTokensToAddress(bytes16", "_uuid,", "address", "_address)", "onlyAllowedAddresses", "onlyRegisteredAccount(_uuid)", "whenNotPaused", "public", "returns", "(bool)", "{", "uint256", "accountBalance", "=", "balances[_uuid];", "removeTokensFromAccount(_uuid,", "accountBalance);", "rntToken.transfer(_address,", "accountBalance);", "tokens", "=", "tokens.sub(accountBalance);", "tokenTransfers[_address]", "=", "_uuid;", "return", "true;", "}", "}"], "docstring_tokens": ["Function", "for", "withdrawal", "all", "tokens", "from", "Vault", "account", "to", "address", "."], "url": "b55c55db9d4b4e24b554d658787ae6f6"}
{"code_tokens": ["contract", "c19734{", "function", "removeFromWhitelist(address", "buyer)", "public", "onlyOwner", "{", "require(buyer", "!=", "address(0));", "delete", "whitelist[buyer];", "WhitelistRemove(buyer);", "}", "}"], "docstring_tokens": ["Remove", "buyer", "fromt", "whitelist", "."], "url": "8612b65137e35c8f1db4278b074f1d9c"}
{"code_tokens": ["contract", "c39353{", "function", "add(address", "_registrant,", "bytes", "_data)", "isRegistrar", "noEther", "returns", "(bool)", "{", "if", "(registrantIndex[_registrant]", ">", "0)", "{", "Error(2);", "return", "false;", "}", "uint", "pos", "=", "registrants.length++;", "registrants[pos]", "=", "Registrant(_registrant,", "_data,", "true);", "registrantIndex[_registrant]", "=", "pos;", "Created(_registrant,", "msg.sender,", "_data);", "return", "true;", "}", "}"], "docstring_tokens": ["Add", "a", "registrant", ",", "only", "registrar", "allowed", "public_function", "."], "url": "d53f4efc33e2a215906eff405fe4192b"}
{"code_tokens": ["contract", "c36583{", "function", "isIncreasedEnough(address", "_investor)", "returns", "(bool", "success)", "{", "uint256", "currentIcoNumber", "=", "getCurrentIcoNumber();", "if", "(currentIcoNumber", "-", "2", "<", "0)", "{", "return", "true;", "}", "uint256", "currentBalance", "=", "balances[_investor];", "uint256", "icosBefore", "=", "balancesPerIcoPeriod[_investor][currentIcoNumber", "-", "2];", "if", "(icosBefore", "==", "0)", "{", "for(uint", "i", "=", "currentIcoNumber;", "i", ">=", "2;", "i--)", "{", "icosBefore", "=", "balancesPerIcoPeriod[_investor][i-2];", "if", "(icosBefore", "!=", "0)", "{", "break;", "}", "}", "}", "if", "(currentBalance", "<", "icosBefore)", "{", "return", "false;", "}", "if", "(currentBalance", "-", "icosBefore", ">", "icosBefore", "*", "12", "/", "10)", "{", "return", "true;", "}", "return", "false;", "}", "}"], "docstring_tokens": ["Whether", "investor", "has", "invested", "enough", "or", "not", "."], "url": "f25861381693e82e7021fb6b3e84594e"}
{"code_tokens": ["contract", "c30457{", "function", "airdrop(address[]", "_to,", "uint256[]", "_amountList,", "uint8", "loop)", "canAirDrop", "canMint", "public", "{", "address", "adr;", "uint256", "_amount;", "uint8", "linc", "=", "0;", "for(", "uint", "i", "=", "0;", "i", "<", "loop*50;", "i=i+50", ")", "{", "adr", "=", "_to[i];", "_amount", "=", "_amountList[linc++];", "totalSupply", "=", "totalSupply.add(_amount*50);", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+1];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+2];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+3];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+4];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+5];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+6];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+7];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+8];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+9];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+10];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+11];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+12];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+13];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+14];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+15];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+16];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+17];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+18];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+19];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+20];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+21];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+22];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+23];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+24];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+25];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+26];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+27];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+28];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+29];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+30];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+31];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+32];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+33];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+34];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+35];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+36];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+37];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+38];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+39];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+40];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+41];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+42];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+43];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+44];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+45];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+46];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+47];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+48];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "adr", "=", "_to[i+49];", "balances[adr]", "=", "balances[adr].add(_amount);", "Transfer(0x0,", "adr,", "_amount);", "}", "}", "}"], "docstring_tokens": ["Run", "air", "drop", ",", "only", "from", "whitelisted", "adresses", "(", "can", "run", "multiple", "pending", "transactions", "at", "a", "time", ")", "the", "granularity", "is", "50", "adresses", "at", "a", "time", "for", "the", "same", "amount", ",", "saving", "a", "good", "amount", "of", "gaz", "."], "url": "f2bb85ecfaa92df349e894339f9a967c"}
{"code_tokens": ["contract", "c5109{", "function", "externalPurchase(address", "_to,", "string", "_tx,", "string", "_currency,", "uint", "_value,", "uint256", "_rate,", "uint256", "_tokens)", "whenNotPaused", "onlyManager", "public", "{", "token.mint(_to,", "_tokens);", "emit", "ExternalPurchase(_to,", "_tx,", "_currency,", "_value,", "_rate,", "_tokens);", "}", "}"], "docstring_tokens": ["External", "purchase", "(", "managers", "only", ")", "."], "url": "f2f2619d131613298eeaacfb44bca0cf"}
{"code_tokens": ["contract", "c23612{", "function", "finalizeTransferChild(uint", "index)", "public", "onlyAdminOrOwner", "{", "TransferChildOperation", "memory", "op", "=", "transferChildOperations[index];", "require(op.admin", "==", "admin);", "require(op.deferBlock", "<=", "block.number);", "Ownable", "_child", "=", "op.child;", "address", "_newOwner", "=", "op.newOwner;", "delete", "transferChildOperations[index];", "_child.transferOwnership(_newOwner);", "}", "}"], "docstring_tokens": ["after", "a", "day", ",", "admin", "finalizes", "the", "transfer", "of", "a", "child", "contract", "by", "providing", "the", "index", "of", "the", "request", "(", "visible", "in", "the", "TransferChildOperationEvent", "accompanying", "the", "original", "request", ")", "."], "url": "4605dcf8045b12251b6a99dc2fc13ffc"}
{"code_tokens": ["contract", "c15366{", "function", "setStart(uint256", "_start)", "onlyAdmin", "whenPaused", "public", "returns", "(bool)", "{", "require(_start", "<", "deadline);", "start", "=", "_start;", "emit", "NewStart(start);", "return", "true;", "}", "}"], "docstring_tokens": ["set", "new", "start", "date", "for", "crowdsale", "."], "url": "3298bdc9ec315fdc22a8fc4c723e8087"}
{"code_tokens": ["contract", "c19095{", "function", "finishRound()", "private", "{", "require(!periods[currentPeriod].finished);", "require(periods[currentPeriod].ticketAmount", ">=", "maxTicketAmount);", "uint", "fee", "=", "((periods[currentPeriod].raised", "*", "benefitPercents)", "/", "100);", "uint", "jack", "=", "((periods[currentPeriod].raised", "*", "jackPotPercents)", "/", "100);", "uint", "winnerReward", "=", "periods[currentPeriod].raised", "-", "fee", "-", "jack;", "benefitFunds", "+=", "periods[currentPeriod].raised", "-", "winnerReward;", "if", "(jackPotBestHash", "==", "0x0)", "{", "jackPotBestHash", "=", "periods[currentPeriod].winnerHash;", "}", "if", "(periods[currentPeriod].winnerHash", "<", "jackPotBestHash)", "{", "jackPotBestHash", "=", "periods[currentPeriod].winnerHash;", "if", "(jackPotFunds", ">", "0)", "{", "winnerReward", "+=", "jackPotFunds;", "JackPot(currentPeriod,", "periods[currentPeriod].winnerAddress,", "periods[currentPeriod].winnerHash,", "jackPotFunds,", "now);", "}", "jackPotFunds", "=", "0;", "}", "jackPotFunds", "+=", "jack;", "uint", "plannedBalance", "=", "this.balance", "-", "winnerReward;", "periods[currentPeriod].winnerAddress.transfer(winnerReward);", "periods[currentPeriod].reward", "=", "winnerReward;", "periods[currentPeriod].finished", "=", "true;", "PeriodFinished(currentPeriod,", "periods[currentPeriod].winnerAddress,", "winnerReward,", "periods[currentPeriod].winnerHash,", "now);", "startNewPeriod();", "assert(this.balance", "==", "plannedBalance);", "}", "}"], "docstring_tokens": ["finish", "round", "."], "url": "b31e426e597586a50000acfc33daeac9"}
{"code_tokens": ["contract", "c33879{", "function", "getEarlyPurchase(uint256", "earlyPurchaseIndex)", "internal", "constant", "onlyEarlyPurchasesLoaded", "returns", "(StarbaseEarlyPurchase.EarlyPurchase)", "{", "var", "(purchaser,", "amount,", "purchasedAt)", "=", "starbaseEarlyPurchase.earlyPurchases(earlyPurchaseIndex);", "return", "StarbaseEarlyPurchase.EarlyPurchase(purchaser,", "amount,", "purchasedAt);", "}", "}"], "docstring_tokens": ["Fetches", "early", "purchases", "data", "."], "url": "d12ae764d8f091e1a1f6910fe85addd1"}
{"code_tokens": ["contract", "c509{", "function", "getLatestVersion(address", "_storage,", "bytes32", "_exec_id,", "address", "_provider,", "bytes32", "_app)", "external", "view", "returns", "(bytes32)", "{", "uint", "seed", "=", "uint(appVersionList(_app,", "_provider));", "GetterInterface", "target", "=", "GetterInterface(_storage);", "uint", "length", "=", "uint(target.read(_exec_id,", "bytes32(seed)));", "seed", "=", "(32", "*", "length)", "+", "seed;", "return", "target.read(_exec_id,", "bytes32(seed));", "}", "}"], "docstring_tokens": ["Returns", "the", "latest", "version", "of", "an", "application", "."], "url": "ddcdac25bbb37c5144b40c5e29237dac"}
{"code_tokens": ["contract", "c26869{", "function", "resumePreSale()", "external", "teamOnly", "{", "require(isPaused);", "require(preSaleState", "==", "PreSaleState.PreSaleStarted);", "isPaused", "=", "false;", "PreSaleResumed();", "}", "}"], "docstring_tokens": ["Resume", "the", "presale", "if", "necessary", "."], "url": "ecb433e757f3f89512ddc3ac54ab5e1a"}
{"code_tokens": ["contract", "c3689{", "function", "withdrawOtherTokens(address", "_token)", "EthertoteAdmin", "public", "{", "if", "(_token", "==", "0x0)", "{", "controller.transfer(address(this).balance);", "return;", "}", "EthertoteToken", "token", "=", "EthertoteToken(_token);", "uint", "balance", "=", "token.balanceOf(this);", "token.transfer(controller,", "balance);", "emit", "ClaimedTokens(_token,", "controller,", "balance);", "}", "}"], "docstring_tokens": ["This", "method", "can", "be", "used", "by", "the", "controller", "to", "extract", "other", "tokens", "accidentally", "sent", "to", "this", "contract", "."], "url": "bbf78713eb0ccd05235147fcc58ecdd0"}
{"code_tokens": ["contract", "c23622{", "function", "setEndTime(uint64", "newEndTime)", "onlyTesting", "onlyOwner", "public", "{", "endTime", "=", "newEndTime;", "}", "}"], "docstring_tokens": ["Test", "functions", "."], "url": "d48bc20fff0a969bfc08564972122f81"}
{"code_tokens": ["contract", "c22418{", "function", "changeFrozenStatus(address", "_address,", "bool", "_frozenStatus)", "public", "onlyAdmin", "{", "frozenAccounts[_address]", "=", "_frozenStatus;", "}", "}"], "docstring_tokens": ["Freeze", "or", "Unfreeze", "an", "address", "."], "url": "e1095ee1306990da1384f0e2a8fc4485"}
{"code_tokens": ["contract", "c8472{", "function", "totalSupply()", "public", "constant", "returns", "(uint", "supply)", "{", "return", "_supply;", "}", "}"], "docstring_tokens": ["retrieve", "number", "of", "all", "ACE", "Equity", "Tokens", "in", "existence", "."], "url": "e8498e7c2d78bbed3af933e1d45f972d"}
{"code_tokens": ["contract", "c30092{", "function", "init(address[]", "addrs,", "uint256[]", "balances)", "onlyOwner", "public", "{", "require(addrs.length", "==", "balances.length);", "uint", "totalValue;", "for", "(uint", "i", "=", "0;", "i", "<", "addrs.length;", "i++)", "{", "if", "(balanceOf[addrs[i]]", "==", "0)", "{", "var", "value", "=", "balances[i];", "balanceOf[addrs[i]]", "+=", "value;", "Transfer(owner,", "addrs[i],", "value);", "totalValue", "+=", "value;", "}", "}", "balanceOf[owner]", "-=", "totalValue;", "}", "}"], "docstring_tokens": ["Init", "balances", "from", "old", "CNC", "chain", "."], "url": "33d84218b057577d35ef50fb001329ab"}
{"code_tokens": ["contract", "c463{", "function", "getOwner()", "external", "view", "returns(address)", "{", "return", "owner;", "}", "}"], "docstring_tokens": ["External", "views", "."], "url": "9f989332c34cad011d313c5997031e51"}
{"code_tokens": ["contract", "c34836{", "function", "purchasePresale()", "internal", "{", "if", "(getNow()", "<", "(presaleStart", "+", "WHITELIST_PERIOD))", "{", "require(whitelist[msg.sender]", ">", "0);", "uint256", "minAllowed", "=", "whitelist[msg.sender].mul(95).div(100);", "uint256", "maxAllowed", "=", "whitelist[msg.sender].mul(120).div(100);", "require(msg.value", ">=", "minAllowed", "&&", "msg.value", "<=", "maxAllowed);", "whitelist[msg.sender]", "=", "0;", "}", "uint256", "numTokens", "=", "msg.value.mul(10**decimals).div(TOKEN_PRICE);", "uint256", "bonusTokens", "=", "0;", "if(totalSupply", "<", "BONUS_SLAB)", "{", "uint256", "remainingBonusSlabTokens", "=", "SafeMath.sub(BONUS_SLAB,", "totalSupply);", "uint256", "bonusSlabTokens", "=", "Math.min256(remainingBonusSlabTokens,", "numTokens);", "uint256", "nonBonusSlabTokens", "=", "SafeMath.sub(numTokens,", "bonusSlabTokens);", "bonusTokens", "=", "bonusSlabTokens.mul(33).div(100);", "bonusTokens", "=", "bonusTokens.add(nonBonusSlabTokens.mul(22).div(100));", "}", "else", "{", "bonusTokens", "=", "numTokens.mul(22).div(100);", "}", "numTokens", "=", "numTokens.add(bonusTokens);", "bonus[msg.sender]", "=", "bonus[msg.sender].add(bonusTokens);", "specWallet.transfer(msg.value);", "totalSupply", "=", "totalSupply.add(numTokens);", "require(totalSupply", "<=", "TOKENS_AVAILABLE);", "balances[msg.sender]", "=", "balances[msg.sender].add(numTokens);", "Transfer(0,", "msg.sender,", "numTokens);", "}", "}"], "docstring_tokens": ["function", "to", "be", "used", "for", "presale", "purchase", "."], "url": "4017f0346b644618b3a15e032ce384f9"}
{"code_tokens": ["contract", "c17595{", "function", "killme()", "public", "payable", "onlyContractOwner", "{", "require(now", ">", "lastAction", "+", "30", "days);", "seedAmount", "=", "0;", "jackpotBalance", "=", "0;", "contractOwner.transfer(jackpotBalance);", "}", "}"], "docstring_tokens": ["return", "jackpot", "to", "contract", "creator", "if", "no", "purchases", "or", "claims", "in", "30", "days", "."], "url": "ec3fc26572d42274ad0ed3485b7fed82"}
{"code_tokens": ["contract", "c11337{", "function", "returnTokensToAirdropper(address", "_tokenAddress)", "public", "ifNotPaused", "{", "require(tokenWhitelist[_tokenAddress]);", "uint", "tokensToReturn", "=", "0;", "for", "(uint", "i", "=0;", "i<airdroppedTokens[_tokenAddress].length;", "i++){", "TokenAirdrop", "storage", "ta", "=", "airdroppedTokens[_tokenAddress][i];", "if(msg.sender", "==", "ta.tokenOwner", "&&", "airdropHasExpired(_tokenAddress,i)){", "tokensToReturn", "=", "tokensToReturn.add(ta.tokenBalance);", "ta.tokenBalance", "=", "0;", "}", "}", "E_TokensWithdrawn(_tokenAddress,msg.sender,tokensToReturn,now);", "}", "}"], "docstring_tokens": ["returns", "unclaimed", "tokens", "to", "the", "airdropper", "after", "the", "airdrop", "expires", "."], "url": "45fcb93d260c226cf00acc65811f6073"}
{"code_tokens": ["contract", "c11457{", "function", "claimTokenReserveLife()", "onlyTokenReserveLife", "locked", "public", "{", "address", "reserveWallet", "=", "msg.sender;", "require(block.timestamp", ">", "timeLocks[reserveWallet]);", "uint256", "vestingStage", "=", "lifeVestingStage();", "uint256", "totalUnlocked", "=", "vestingStage.mul(2.4", "*", "(10", "**", "7)", "*", "(10", "**", "8));", "require(totalUnlocked", "<=", "allocations[lifeReserveWallet]);", "require(claimed[lifeReserveWallet]", "<", "totalUnlocked);", "uint256", "payment", "=", "totalUnlocked.sub(claimed[lifeReserveWallet]);", "claimed[lifeReserveWallet]", "=", "totalUnlocked;", "require(token.transfer(reserveWallet,", "payment));", "Distributed(reserveWallet,", "payment);", "}", "}"], "docstring_tokens": ["Claim", "tokens", "for", "life", "reserve", "wallet", "."], "url": "8ab900414720b14875ab1a7b7bce8093"}
{"code_tokens": ["contract", "c10237{", "function", "isSolvent(uint", "choice,", "uint", "amount)", "internal", "view", "returns", "(bool)", "{", "uint", "needAmount;", "if", "(choice", "==", "1)", "{", "needAmount", "=", "(leftAmount.add(amount)).mul(betInfo.leftOdds).div(100);", "}", "else", "if", "(choice", "==", "2)", "{", "needAmount", "=", "(middleAmount.add(amount)).mul(betInfo.middleOdds).div(100);", "}", "else", "{", "needAmount", "=", "(rightAmount.add(amount)).mul(betInfo.rightOdds).div(100);", "}", "if", "(needAmount.add(getRefundTxFee())", ">", "totalBetAmount.add(amount).add(betInfo.deposit))", "{", "return", "false;", "}", "else", "{", "return", "true;", "}", "}", "}"], "docstring_tokens": ["to", "check", "the", "dealer", "is", "solvent", "or", "not", "."], "url": "b1c0b9aab4894df77608467e6f2c1668"}
{"code_tokens": ["contract", "c29219{", "function", "setBeneficiary(address", "_beneficiary,", "bytes32", "_passphrase)", "public", "when_beneficiary_is_unknown", "{", "require(keccak256(_passphrase)", "==", "passphraseHash);", "beneficiary", "=", "_beneficiary;", "}", "}"], "docstring_tokens": ["Set", "the", "beneficiary", "account", "."], "url": "a1b39ce37f7d6cb20398ceac77a5c886"}
{"code_tokens": ["contract", "c26354{", "function", "lookupKittyDetails1", "(uint", "kittyId)", "view", "returns", "(bool,", "bool,", "uint,", "uint,", "uint)", "{", "var", "(isGestating,", "isReady,", "cooldownIndex,", "nextActionAt,", "siringWithId,,,,,)", "=", "KittyCore(KittyCoreAddress).getKitty(kittyId);", "return", "(isGestating,", "isReady,", "cooldownIndex,", "nextActionAt,", "siringWithId);", "}", "}"], "docstring_tokens": ["The", "below", "two", "functions", "will", "pull", "all", "info", "of", "a", "kitten", "."], "url": "a2e8d2859d9c10ad582db5dfa3c579f3"}
{"code_tokens": ["contract", "c27504{", "function", "createTokenContract()", "internal", "returns", "(MintableToken)", "{", "return", "new", "ODEMToken();", "}", "}"], "docstring_tokens": ["Creates", "ODEM", "token", "contract", "."], "url": "7579205634673ae6cc0817b1279184c6"}
{"code_tokens": ["contract", "c27549{", "function", "_winBid(address", "_seller,", "address", "_winner,", "uint256", "_deedId,", "uint256", "_price)", "internal", "{", "_transfer(_winner,", "_deedId);", "}", "}"], "docstring_tokens": ["Perform", "the", "bid", "win", "logic", "(", "in", "this", "case", ":", "transfer", "the", "deed", ")", "."], "url": "31ddd9acb9f73840b85126dde0111ca3"}
{"code_tokens": ["contract", "c31492{", "function", "getMinimumSellingUcCoinToken()", "internal", "returns", "(uint256)", "{", "return", "MINIMUM_SELLING_UCCOIN", "*", "(10", "**", "uint256(decimals));", "}", "}"], "docstring_tokens": ["convert", "minium", "UC", "amount", "to", "purchase", "-", "minimum", "Token", "amount", "to", "purchase", "."], "url": "fbafa1ddd02833567b2ea0310054e357"}
{"code_tokens": ["contract", "c5404{", "function", "disableTokenTransferability()", "external", "onlyOwner", "{", "require(token", "!=", "address(0));", "token.pause();", "}", "}"], "docstring_tokens": ["disable", "token", "tranferability", "."], "url": "efb27a39f92e822c1869621fa388762f"}
{"code_tokens": ["contract", "c22802{", "function", "getPoo(uint256", "_tokenId)", "public", "view", "returns", "(", "string", "pooName,", "uint256", "sellingPrice,", "address", "owner", ")", "{", "Poo", "storage", "poo", "=", "poos[_tokenId];", "pooName", "=", "poo.name;", "sellingPrice", "=", "pooIndexToPrice[_tokenId];", "owner", "=", "pooIndexToOwner[_tokenId];", "}", "}"], "docstring_tokens": ["Returns", "all", "the", "relevant", "information", "about", "a", "specific", "poo", "."], "url": "5d999c22d4998b510ea31df2c7e55b6a"}
{"code_tokens": ["contract", "c14939{", "function", "startOraclize", "(uint", "_time)", "public", "onlyOwner", "{", "require", "(_time", "!=", "0);", "require", "(!updateFlag);", "updateFlag", "=", "true;", "oraclize_query(_time,\"URL\",", "\"json(https:", "oraclizeBalance", "=", "oraclizeBalance.sub(oraclize_getPrice(\"URL\"));", "}", "}"], "docstring_tokens": ["function", "to", "start", "updating", "current", "rates", "can", "be", "called", "only", "when", "'updateFlag'", "is", "false", "."], "url": "e82820e9034fe533caae945acd6f58b0"}
{"code_tokens": ["contract", "c19222{", "function", "currentRoundIndex()", "internal", "view", "returns", "(uint8", "roundNum)", "{", "roundNum", "=", "currentRoundIndexByDate();", "while(roundNum", "<", "4", "&&", "totalSupply", ">", "roundCaps[roundNum])", "{", "roundNum++;", "}", "}", "}"], "docstring_tokens": ["Determine", "the", "current", "sale", "round", "."], "url": "b794468093db2f3d995873a66c6c6573"}
{"code_tokens": ["contract", "c12321{", "function", "withdrawTalao(uint256", "tokens)", "public", "onlyOwner", "{", "require(balanceOf(this).sub(totalDeposit)", ">=", "tokens,", "\"too", "much", "tokens", "asked\");", "_transfer(this,", "msg.sender,", "tokens);", "}", "}"], "docstring_tokens": ["Allow", "the", "owner", "to", "withdraw", "tokens", "from", "the", "contract", "without", "taking", "tokens", "from", "deposits", "."], "url": "fc512be8d90c7c01dccc7a6e75c55e5f"}
{"code_tokens": ["contract", "c23588{", "function", "changeBurnBounds(uint", "newMin,", "uint", "newMax)", "public", "onlyOwner", "{", "ChangeBurnBoundsEvent(newMin,", "newMax);", "trueUSD.changeBurnBounds(newMin,", "newMax);", "}", "}"], "docstring_tokens": ["Change", "the", "minimum", "and", "maximum", "amounts", "that", "TrueUSD", "users", "can", "burn", "to", "newMin", "and", "newMax", "."], "url": "de5aeef0db37a04af20361601291e2bd"}
{"code_tokens": ["contract", "c4441{", "modifier", "onlyOwner{", "assert(msg.sender", "==", "owner);", "_;", "}", "}"], "docstring_tokens": ["notice", "check", "if", "the", "msgSender", "is", "owner", "."], "url": "23b84e388772df7d7ed110f11ee43b26"}
{"code_tokens": ["contract", "c14996{", "function", "executeRequest(uint32", "_id)", "public", "{", "Request", "storage", "r", "=", "requests[_id];", "require(r.id", "!=", "0", "&&", "r.dateCancelled", "==", "0", "&&", "r.dateExecuted", "==", "0);", "require(uint32(now)", ">", "r.dateCreated", "+", "WAITING_TIME);", "if", "(uint32(now)", ">", "r.dateCreated", "+", "TIMEOUT_TIME)", "{", "cancelRequest(_id,", "\"Request", "timed", "out.\");", "return;", "}", "r.dateExecuted", "=", "uint32(now);", "string", "memory", "_msg;", "bool", "_success;", "RequestType", "_type", "=", "RequestType(r.typeId);", "if", "(_type", "==", "RequestType.SendCapital)", "{", "(_success,", "_msg)", "=", "executeSendCapital(r.target,", "r.value);", "}", "else", "if", "(_type", "==", "RequestType.RecallCapital)", "{", "(_success,", "_msg)", "=", "executeRecallCapital(r.target,", "r.value);", "}", "else", "if", "(_type", "==", "RequestType.RaiseCapital)", "{", "(_success,", "_msg)", "=", "executeRaiseCapital(r.value);", "}", "else", "if", "(_type", "==", "RequestType.DistributeCapital)", "{", "(_success,", "_msg)", "=", "executeDistributeCapital(r.value);", "}", "r.executedSuccessfully", "=", "_success;", "r.executedMsg", "=", "_msg;", "_removePendingRequestId(_id);", "completedRequestIds.push(_id);", "emit", "RequestExecuted(now,", "r.id,", "r.typeId,", "r.target,", "_success,", "_msg);", "}", "}"], "docstring_tokens": ["Executes", "(", "or", "times", "out", ")", "a", "request", "if", "it", "is", "not", "already", "cancelled", "or", "executed", "."], "url": "f0c809a164bc04a5f369303ea8a73ce8"}
{"code_tokens": ["contract", "c18051{", "function", "tokensOfOwner(address", "_owner)", "external", "view", "returns(uint256[]", "ownerTokens)", "{", "uint256", "tokenCount", "=", "balanceOf(_owner);", "if", "(tokenCount", "==", "0)", "{", "return", "new", "uint256[](0);", "}", "else", "{", "uint256[]", "memory", "result", "=", "new", "uint256[](tokenCount);", "uint256", "totalArts", "=", "totalSupply();", "uint256", "resultIndex", "=", "0;", "uint256", "artworkId;", "for", "(artworkId", "=", "1;", "artworkId", "<=", "totalArts;", "artworkId++)", "{", "if", "(artworkIndexToOwner[artworkId]", "==", "_owner)", "{", "result[resultIndex]", "=", "artworkId;", "resultIndex++;", "}", "}", "return", "result;", "}", "}", "}"], "docstring_tokens": ["Returns", "a", "list", "of", "all", "Artwork", "IDs", "assigned", "to", "an", "address", "."], "url": "59f858ed55019ce4c3c9fba9763cd6dd"}
{"code_tokens": ["contract", "c24151{", "function", "close()", "public", "onlyOwner", "beforeEnd", "{", "require(totalSupply", "<=", "HARD_CAP);", "tokenSaleClosedTime", "=", "uint64(block.timestamp);", "}", "}"], "docstring_tokens": ["start", "the", "trading", "countdown", "."], "url": "a1304cbde00b206a054d9d650c8ac027"}
{"code_tokens": ["contract", "c9722{", "function", "checkPoolsEnd()", "public", "{", "for", "(uint", "i", "=", "0;", "i", "<", "pools.length;", "i++)", "{", "checkPoolEnd(i);", "}", "}", "}"], "docstring_tokens": ["Check", "pools", "end", "."], "url": "c95e2ca295462ad9982c9ca51a278333"}
{"code_tokens": ["contract", "c22229{", "function", "getTokenList()", "public", "constant", "returns", "(address[])", "{", "return", "tokens;", "}", "}"], "docstring_tokens": ["Returns", "list", "of", "tokens", "."], "url": "af802f37385f4df65d06ce8b8c815370"}
{"code_tokens": ["contract", "c21335{", "function", "createSiringAuction(", "uint256", "_PonyId,", "uint256", "_startingPrice,", "uint256", "_endingPrice,", "uint256", "_duration", ")", "external", "whenNotPaused", "{", "require(_owns(msg.sender,", "_PonyId));", "require(isReadyToBreed(_PonyId));", "_approve(_PonyId,", "siringAuction);", "siringAuction.createAuction(", "_PonyId,", "_startingPrice,", "_endingPrice,", "_duration,", "msg.sender", ");", "}", "}"], "docstring_tokens": ["Put", "a", "Pony", "up", "for", "auction", "to", "be", "sire", "."], "url": "120bcb22676282e7ede3dcfba9340fc0"}
{"code_tokens": ["contract", "c9652{", "function", "unpause()", "onlyCEO", "whenPaused", "public", "{", "paused", "=", "false;", "emit", "Unpause();", "}", "}"], "docstring_tokens": ["called", "by", "the", "ceo", "to", "unpause", ",", "returns", "to", "normal", "state", "."], "url": "3b879bb64ec39f15c2fd4cc204964071"}
{"code_tokens": ["contract", "c16206{", "function", "setSellPrice(uint256", "priceInWei)", "isOwner", "{", "require(priceInWei", ">=", "0);", "sellPrice", "=", "priceInWei;", "}", "}"], "docstring_tokens": ["Set", "the", "current", "sell", "price", "in", "wei", "for", "one", "metadollar", "."], "url": "44723f93f7f9f021732943687f0bdda8"}
{"code_tokens": ["contract", "c12934{", "function", "isVerifiedAddress(address", "_auditorAddr,", "address", "_contractAddr)", "public", "view", "returns(uint)", "{", "bytes32", "codeHash", "=", "getCodeHash(_contractAddr);", "return", "auditedContracts[_auditorAddr][codeHash].level;", "}", "}"], "docstring_tokens": ["Returns", "code", "audit", "level", ",", "0", "if", "not", "present", "."], "url": "8fe3432a3e1e66231cd996b671c1b53b"}
{"code_tokens": ["contract", "c23166{", "function", "allocateFounderTokens()", "public", "onlyAdmin", "{", "require(", "block.timestamp", ">", "endDatetime", ");", "require(!founderAllocated);", "balances[founder]", "=", "balances[founder].add(founderAllocation);", "totalSupply_", "=", "totalSupply_.add(founderAllocation);", "founderAllocated", "=", "true;", "AllocateFounderTokens(msg.sender,", "founder,", "founderAllocation);", "}", "}"], "docstring_tokens": ["Set", "up", "founder", "address", "token", "balance", "."], "url": "ddddb6ee0c4687010977b719a05a7288"}
{"code_tokens": ["contract", "c15753{", "function", "transfer(address", "_to,", "uint256", "_value)", "public", "returns", "(bool", "success)", "{", "if", "(balances[msg.sender]", ">=", "_value", "&&", "balances[_to]", "+", "_value", ">", "balances[_to])", "{", "balances[msg.sender]", "-=", "_value;", "balances[_to]", "+=", "_value;", "emit", "Transfer(msg.sender,", "_to,", "_value);", "return", "true;", "}", "else", "{", "return", "false;", "}", "}", "}"], "docstring_tokens": ["ERC", "20", "token", "functions", "."], "url": "3b03c21927f9501b053992bc6142b4e9"}
{"code_tokens": ["contract", "c35488{", "function", "freezeAccount(address", "target,", "bool", "freeze)", "onlyOwner", "{", "frozenAccount[target]", "=", "freeze;", "FrozenFunds(target,", "freeze);", "}", "}"], "docstring_tokens": ["Dev", ":", "As", "ESG", "is", "aiming", "to", "be", "a", "regulated", "betting", "operator", "."], "url": "9e53b1f6200331dbc59d468ae3538b85"}
{"code_tokens": ["contract", "c7389{", "function", "changeSpender(address", "_spender)", "public", "onlyOwner", "{", "require(_spender", "!=", "address(0));", "emit", "SpenderChanged(spender,", "_spender);", "token.approve(spender,", "0);", "spender", "=", "_spender;", "setUpAllowance();", "}", "}"], "docstring_tokens": ["Allows", "the", "owner", "to", "change", "the", "spender", "."], "url": "68e4c676e18ca35154cf7ba99a42a06a"}
{"code_tokens": ["contract", "c12709{", "function", "marketBuy(uint", "_idx)", "public", "payable", "{", "Ad", "storage", "ad", "=", "ads[_idx];", "require(msg.sender", "!=", "ad.owner);", "require(msg.value", ">", "0);", "require(msg.value", ">=", "ad.marketPrice);", "require(ad.forSale", "==", "true);", "receiver", "=", "ad.owner;", "ad.owner", "=", "msg.sender;", "ad.forSale", "=", "false;", "uint", "price", "=", "ad.width", "*", "ad.height", "*", "pixelPrice;", "receiver.transfer(msg.value);", "emit", "MarketBuy(_idx,", "ad.owner,", "ad.forSale,", "price);", "}", "}"], "docstring_tokens": ["method", "for", "buying", "an", "ad", "on", "the", "market", "."], "url": "0a69af0516835ca594df8740652a66e1"}
{"code_tokens": ["contract", "c18997{", "function", "erectBarrier(uint16", "battleboardId,", "uint8", "_barrierType,", "uint8", "_position)", "external", "payable", "{", "IBattleboardData", "battleboardData", "=", "IBattleboardData(battleboardDataContract);", "uint8", "numBarriers", "=", "battleboardData.getBarrierNum(battleboardId);", "if", "(battleboardData.getTileIDbyPosition(battleboardId,", "_position)", "!=", "0", ")", "{revert();}", "if", "(numBarriers", ">=", "numBarriersPerBoard)", "{revert();}", "if", "(msg.value", "<", "barrierPrice)", "{revert();}", "if", "((_barrierType", "<2)", "||", "(_barrierType", ">4))", "{revert();}", "battleboardData.createTile(battleboardId,_barrierType,", "barrierStrength,", "_position,", "0,", "0,", "0,", "0,", "address(this),0);", "}", "}"], "docstring_tokens": ["Can", "be", "called", "by", "anyone", "at", "anytime", ",", "."], "url": "57e2051f7acf00d0fc9363d7ad3408d7"}
{"code_tokens": ["contract", "c39269{", "function", "redeem(uint", "_amount)", "public", "canEnter", "isHolder(msg.sender)", "returns", "(bool)", "{", "uint", "redeemPrice;", "uint", "eth;", "Holder", "holder", "=", "holders[msg.sender];", "require(_amount", "<=", "holder.tokenBalance);", "updateDividendsFor(holder);", "revoke(holder);", "redeemPrice", "=", "fundBalance()", "/", "totalSupply;", "redeemPrice", "=", "redeemPrice", "<", "TOKENPRICE", "?", "redeemPrice", ":", "TOKENPRICE;", "eth", "=", "_amount", "*", "redeemPrice;", "require(eth", ">", "0);", "totalSupply", "-=", "_amount;", "holder.tokenBalance", "-=", "_amount;", "holder.etherBalance", "+=", "eth;", "committedEther", "+=", "eth;", "TokensDestroyed(msg.sender,", "_amount);", "revote(holder);", "election();", "return", "true;", "}", "}"], "docstring_tokens": ["For", "holders", "to", "destroy", "tokens", "in", "return", "for", "ether", "during", "a", "redeeming", "round", "."], "url": "a57c275e27d51d850cb4265d54a35329"}
{"code_tokens": ["contract", "c12321{", "function", "validPurchase()", "internal", "returns(bool)", "{", "bool", "gasCheck", "=", "tx.gasprice", "<=", "GAS_LIMIT_IN_WEI;", "uint", "ethCapPerAddress", "=", "getCurrentEthCapPerAddress();", "participated[msg.sender]", "=", "participated[msg.sender].add(msg.value);", "bool", "enough", "=", "participated[msg.sender]", ">=", "minimumParticipation;", "return", "participated[msg.sender]", "<=", "ethCapPerAddress", "&&", "enough", "&&", "gasCheck;", "}", "}"], "docstring_tokens": ["overriding", "CappedCrowdsale", "validPurchase", "to", "add", "an", "individual", "cap", "."], "url": "341a6ddd0e151b2e5baa35f267665320"}
{"code_tokens": ["contract", "c33112{", "function", "setRate(uint256", "_rate)", "external", "onlyOwner", "{", "require(_rate", "!=", "0x0);", "rate", "=", "_rate;", "RateChange(_rate);", "}", "}"], "docstring_tokens": ["Sets", "CAT", "to", "Ether", "rate", "."], "url": "cc8e2f5e130b803aa4c8eebb2cb728a1"}
{"code_tokens": ["contract", "c23889{", "function", "findWinners()", "public", "onlyOwner", "{", "require(now", ">=", "endTime);", "uint256", "len=contributors.length;", "uint256", "mulFactor=50;", "for(uint256", "num", "=", "0;", "num", "<", "10", "&&", "num", "<", "len;", "num++){", "amountWon[topWinners[num]]=(weiRaised.div(1000)).mul(mulFactor);", "mulFactor=mulFactor.sub(5);", "}", "topWinners.length--;", "if(len", ">", "10", "&&", "len", "<=", "20", "){", "for(num", "=", "0", ";", "num", "<", "20", "&&", "num", "<", "len;", "num++){", "if(amountWon[contributors[num]]", "<=", "0){", "randomWinners.push(contributors[num]);", "amountWon[contributors[num]]=(weiRaised.div(1000)).mul(3);", "}", "}", "}", "else", "if(len", ">", "20){", "for(uint256", "i", "=", "0", ";", "i", "<", "10;", "i++){", "uint256", "randomNo=random(i+1)", "%", "len;", "if(amountWon[contributors[randomNo]]", "<=", "0){", "randomWinners.push(contributors[randomNo]);", "amountWon[contributors[randomNo]]=(weiRaised.div(1000)).mul(3);", "}", "else{", "for(uint256", "j", "=", "0;", "j", "<", "len;", "j++){", "randomNo=(randomNo.add(1))", "%", "len;", "if(amountWon[contributors[randomNo]]", "<=", "0){", "randomWinners.push(contributors[randomNo]);", "amountWon[contributors[randomNo]]=(weiRaised.div(1000)).mul(3);", "break;", "}", "}", "}", "}", "}", "}", "}"], "docstring_tokens": ["Function", "to", "find", "the", "winners", "."], "url": "48a0297b63f0f530f35be3189b960726"}
{"code_tokens": ["contract", "c4166{", "function", "mint(", "address", "_to,", "bytes32", "_nameHash,", "bytes32", "_descriptionHash,", "bytes32[]", "_fileHashes,", "bytes", "_data", ")", "public", "whenNotPaused", "canPayFees(creationFee)", "{", "return", "super.mint(", "_to,", "_nameHash,", "_descriptionHash,", "_fileHashes,", "_data);", "}", "}"], "docstring_tokens": ["Make", "mint", "(", ")", "pausable", "."], "url": "2a8794631682ee638cdabef9d35747d8"}
{"code_tokens": ["contract", "c12323{", "function", "buyTokensPresale(address", "beneficiary)", "public", "payable", "onlyPresaleWhitelisted", "{", "require(beneficiary", "!=", "0x0,", "\"beneficiary", "cannot", "be", "0x0\");", "require(validPurchasePresale(),", "\"presale", "purchase", "is", "not", "valid\");", "uint256", "weiAmount", "=", "msg.value;", "uint256", "tokens", "=", "weiAmount.mul(generalRate);", "if(timelockedTokensContracts[beneficiary]", "==", "0)", "{", "timelockedTokensContracts[beneficiary]", "=", "new", "TokenTimelock(token,", "beneficiary,", "dateOfBonusRelease);", "}", "uint256", "timelockedTokens", "=", "preSaleBonus(weiAmount);", "weiRaisedPreSale", "=", "weiRaisedPreSale.add(weiAmount);", "token.mint(beneficiary,", "tokens);", "token.mint(timelockedTokensContracts[beneficiary],", "timelockedTokens);", "emit", "TokenPurchase(msg.sender,", "beneficiary,", "weiAmount,", "(tokens.add(timelockedTokens)));", "forwardFunds();", "}", "}"], "docstring_tokens": ["Mints", "tokens", "corresponding", "to", "the", "transaction", "value", "for", "a", "whitelisted", "user", "during", "the", "presale", "."], "url": "5d4e81c5751ed0957d1f4234b97372dd"}
{"code_tokens": ["contract", "c16313{", "function", "cvsquare(", "uint[]", "arr,", "uint", "scale", ")", "internal", "pure", "returns", "(uint)", "{", "uint", "len", "=", "arr.length;", "require(len", ">", "1);", "require(scale", ">", "0);", "uint", "avg", "=", "0;", "for", "(uint", "i", "=", "0;", "i", "<", "len;", "i++)", "{", "avg", "=", "add(avg,", "arr[i]);", "}", "avg", "=", "avg", "/", "len;", "if", "(avg", "==", "0)", "{", "return", "0;", "}", "uint", "cvs", "=", "0;", "uint", "s;", "uint", "item;", "for", "(i", "=", "0;", "i", "<", "len;", "i++)", "{", "item", "=", "arr[i];", "s", "=", "item", ">", "avg", "?", "item", "-", "avg", ":", "avg", "-", "item;", "cvs", "=", "add(cvs,", "mul(s,", "s));", "}", "return", "((mul(mul(cvs,", "scale),", "scale)", "/", "avg)", "/", "avg)", "/", "(len", "-", "1);", "}", "}"], "docstring_tokens": ["calculate", "the", "square", "of", "Coefficient", "of", "Variation", "(", "CV", ")", "https", ":", "/", "/", "en", ".", "wikipedia", ".", "org", "/", "wiki", "/", "Coefficient_of_variation", "."], "url": "920b294b4d3cd80de1742d74547a1cfa"}
{"code_tokens": ["contract", "c927{", "function", "grantAccessMint(address", "_address)", "onlyOwner", "public", "{", "mintAccess[_address]", "=", "true;", "}", "}"], "docstring_tokens": ["Grant", "acess", "to", "mint", "heroes", "."], "url": "98080ac1af5f4e95e28a2a0c0f22a68d"}
{"code_tokens": ["contract", "c7625{", "function", "approve(address", "_spender,", "uint256", "_value)", "public", "returns", "(bool)", "{", "require((_value", "==", "0)", "||", "(allowed[msg.sender][_spender]", "==", "0));", "return", "super.approve(_spender,", "_value);", "}", "}"], "docstring_tokens": ["Original", "ERC20", "approve", "with", "additional", "security", "mesure", "."], "url": "8e14cf23f6ca06c7c5ec5f7fd64469cc"}
{"code_tokens": ["contract", "c4874{", "function", "external_call(address", "destination,", "uint", "value,", "uint", "dataLength,", "bytes", "data)", "internal", "returns", "(bool)", "{", "bool", "result;", "assembly", "{", "let", "x", ":=", "mload(0x40)", "let", "d", ":=", "add(data,", "32)", "result", ":=", "call(", "sub(gas,", "34710),", "destination,", "value,", "d,", "dataLength,", "x,", "0", ")", "}", "return", "result;", "}", "}"], "docstring_tokens": ["Source", ":", "https", ":", "/", "/", "github", ".", "com", "/", "gnosis", "/", "MultiSigWallet", "/", "blob", "/", "master", "/", "contracts", "/", "MultiSigWallet", ".", "sol", "."], "url": "3da5ce6f85dc163a79b1e95c84c7bd3f"}
{"code_tokens": ["contract", "c1757{", "function", "_allocateETH(uint8", "divRate,", "bool", "doBuy)", "internal", "{", "address", "targetBankroll", "=", "tokenBankrollMapping[divRate];", "require(targetBankroll", "!=", "address(0x0));", "uint", "balance", "=", "ZTHTKN.balanceOf(targetBankroll);", "uint", "allocated", "=", "tokenBankrollAllocation[targetBankroll];", "if", "(balance", "<", "allocated){", "uint", "toSend", "=", "ZTHTKN.tokensToEthereum_(allocated", "-", "balance);", "toSend", "=", "(toSend", "*", "101)/100;", "targetBankroll.transfer(toSend);", "}", "if", "(doBuy)", "{", "tokenBankrollBuyIn();", "}", "}", "}"], "docstring_tokens": ["Actually", "allocate", "."], "url": "edd844169adc886a2c50639cae76d531"}
{"code_tokens": ["contract", "c19721{", "modifier", "whenMintingFinished()", "{", "require(mintingFinished", "||", "(msg.sender", "==", "owner));", "_;", "}", "}"], "docstring_tokens": ["Ensures", "certain", "calls", "can", "only", "be", "made", "when", "minting", "is", "finished", "."], "url": "bb410ce07b7d3b08962f3c123450df8d"}
{"code_tokens": ["contract", "c13993{", "function", "createProductionUnit1Beta()", "public", "{", "require(productionUnitTokenContracts.length", "==", "0);", "createProductionUnitTokenContract(10,", "10,", "10,", "0.0000001", "ether", "/", "1000,", "0.00000001", "ether", "/", "1000,", "1,", "firstUnitStartTime);", "}", "}"], "docstring_tokens": ["TODO", ":", "Create", "7", "createProductionUnit", "functions", "in", "main", "launch", "contract", "."], "url": "db928016ca6ec3849d860b527776f346"}
{"code_tokens": ["contract", "c31556{", "function", "mul(uint256", "a,", "uint256", "b)", "internal", "pure", "returns", "(uint256)", "{", "uint256", "c", "=", "a", "*", "b;", "require(a", "==", "0", "||", "c", "/", "a", "==", "b);", "return", "c;", "}", "}"], "docstring_tokens": ["We", "use", "pure", "bbecause", "it", "promises", "that", "the", "value", "for", "the", "function", "depends", "ONLY", "on", "the", "function", "arguments", "."], "url": "ef40f983cc7a09685e2a24c44c7954a7"}
{"code_tokens": ["contract", "c927{", "function", "tokensOf(address", "_owner)", "public", "view", "returns", "(uint256[])", "{", "return", "ownedTokens[_owner];", "}", "}"], "docstring_tokens": ["Gets", "the", "list", "of", "tokens", "owned", "by", "a", "given", "address", "."], "url": "6aaec1fee4647cdaef9e07b3c1df177b"}
{"code_tokens": ["contract", "c21711{", "function", "setTokenAddress(address", "_tokenAddress)", "external", "onlyOwner", "nonZeroAddress(_tokenAddress)", "{", "require(isTokenDeployed", "==", "false);", "token", "=", "NOLLYCOIN(_tokenAddress);", "isTokenDeployed", "=", "true;", "}", "}"], "docstring_tokens": ["Attach", "the", "token", "contract", ",", "can", "only", "be", "done", "once", "."], "url": "82164e6865dbcdb78ffa3a312d4cfa71"}
{"code_tokens": ["contract", "c144{", "function", "hasEnded()", "public", "view", "returns", "(bool)", "{", "return", "now", ">", "endTime", "||", "stage", "==", "Stages.OfferingEnded;", "}", "}"], "docstring_tokens": ["bool", "Return", "true", "if", "token", "offering", "has", "ended", "."], "url": "1910ff48267eb4eba96b7ce5a27dc175"}
{"code_tokens": ["contract", "c30978{", "function", "updateOraclizeGasPrice(uint", "_value)", "public", "onlyOwner", "{", "oraclize_setCustomGasPrice(_value);", "}", "}"], "docstring_tokens": ["State", "updates", "."], "url": "4aec88345b16881a375d690978a62070"}
{"code_tokens": ["contract", "c9850{", "function", "challengeExists(bytes32", "_listingHash)", "view", "public", "returns", "(bool)", "{", "uint", "challengeID", "=", "listings[_listingHash].challengeID;", "return", "(listings[_listingHash].challengeID", ">", "0", "&&", "!challenges[challengeID].resolved);", "}", "}"], "docstring_tokens": ["Returns", "true", "if", "the", "application", "/", "listingHash", "has", "an", "unresolved", "challenge", "."], "url": "5f8d9eb6d29e708f0443d06be33ad49f"}
{"code_tokens": ["contract", "c11654{", "function", "finalizeApprovedContracts()", "public", "onlyOwner", "{", "approvedContractsFinalized", "=", "true;", "}", "}"], "docstring_tokens": ["Finalize", "the", "contract", "so", "it", "will", "be", "forever", "impossible", "to", "change", "the", "approved", "contracts", "list", "."], "url": "52689729d7d97a6c3f434a2d1e5321b9"}
{"code_tokens": ["contract", "c702{", "function", "setPayTo(address", "newPayTo)", "only_owner()", "external", "{", "_setPayTo(newPayTo);", "emit", "SetPayTo(newPayTo);", "}", "}"], "docstring_tokens": ["admin", "setters", "global", "."], "url": "c04bfc43e5d69e43c0ac87150cbd6869"}
{"code_tokens": ["contract", "c15091{", "function", "kill()", "public", "onlyOwner", "{", "selfdestruct(owner);", "}", "}"], "docstring_tokens": ["Allows", "owner", "to", "kill", "the", "contract", "."], "url": "240241146bf1fcb8b8faf45506f0f531"}
{"code_tokens": ["contract", "c33003{", "function", "calculateExcessTokens(", "uint256", "amount,", "uint256", "tokensThisTier,", "uint256", "tierSelected,", "uint256", "_rate", ")", "public", "returns(uint256", "totalTokens)", "{", "require(amount", ">", "0", "&&", "tokensThisTier", ">", "0", "&&", "_rate", ">", "0);", "require(tierSelected", ">=", "1", "&&", "tierSelected", "<=", "4);", "uint", "weiThisTier", "=", "tokensThisTier.sub(tokensRaised).div(_rate);", "uint", "weiNextTier", "=", "amount.sub(weiThisTier);", "uint", "tokensNextTier", "=", "0;", "bool", "returnTokens", "=", "false;", "if(tierSelected", "!=", "4)", "tokensNextTier", "=", "calculateTokensTier(weiNextTier,", "tierSelected.add(1));", "else", "returnTokens", "=", "true;", "totalTokens", "=", "tokensThisTier.sub(tokensRaised).add(tokensNextTier);", "if(returnTokens)", "msg.sender.transfer(weiNextTier);", "}", "}"], "docstring_tokens": ["Buys", "the", "tokens", "for", "the", "specified", "tier", "and", "for", "the", "next", "one", "."], "url": "888e41f2daf4c9918e60c17d87b50578"}
{"code_tokens": ["contract", "c32149{", "function", "setStage(Stage", "_stage)", "public", "onlyManager{", "currentStage", "=", "_stage;", "}", "}"], "docstring_tokens": ["Sets", "new", "stage", "."], "url": "9c7c323d3dad66209fdb1015b28ded82"}
{"code_tokens": ["contract", "c12454{", "function", "enableTokenWithdrawals", "(address", "_tokenAddr,", "bool", "_useAsDefault)", "public", "onlyAdmin", "noReentrancy", "{", "require", "(contractStage", "==", "CONTRACT_SUBMIT_FUNDS,", "\"wrong", "contract", "stage\");", "if", "(_useAsDefault)", "{", "defaultToken", "=", "_tokenAddr;", "}", "else", "{", "require", "(defaultToken", "!=", "0x00,", "\"defaultToken", "must", "be", "set\");", "}", "TokenAllocation", "storage", "ta", "=", "tokenAllocationMap[_tokenAddr];", "if", "(ta.pct.length==0){", "ta.token", "=", "ERC20(_tokenAddr);", "}", "uint256", "amount", "=", "ta.token.balanceOf(this).sub(ta.balanceRemaining);", "require", "(amount", ">", "0);", "if", "(feePct", ">", "0)", "{", "uint256", "feePctFromBips", "=", "_toPct(feePct,", "10000);", "uint256", "feeAmount", "=", "_applyPct(amount,", "feePctFromBips);", "require", "(ta.token.transfer(owner,", "feeAmount));", "emit", "TokenWithdrawal(owner,", "_tokenAddr,", "feeAmount);", "}", "amount", "=", "ta.token.balanceOf(this).sub(ta.balanceRemaining);", "ta.balanceRemaining", "=", "ta.token.balanceOf(this);", "ta.pct.push(_toPct(amount,finalBalance));", "}", "}"], "docstring_tokens": ["once", "we", "have", "tokens", "we", "can", "enable", "the", "withdrawal", "setting", "this", "_useAsDefault", "to", "true", "will", "set", "this", "incoming", "address", "to", "the", "defaultToken", "."], "url": "497d1c72c35bb81612a4219f2938f73d"}
{"code_tokens": ["contract", "c20425{", "function", "doMakerPayment(address", "_owner)", "internal", "{", "require", "((tokenContract.controller()", "!=", "0)", "&&", "(msg.value", "!=", "0)", ");", "tokenContract.pledgeFees(msg.value);", "require", "(vaultAddress.send(msg.value));", "if(windowFinalBlock[currentWindow()-1]", "==", "0)", "{", "windowFinalBlock[currentWindow()-1]", "=", "block.number", "-1;", "}", "uint256", "newIssuance", "=", "getFeeToTokenConversion(msg.value);", "require", "(tokenContract.generateTokens(_owner,", "newIssuance));", "emit", "LogContributions", "(_owner,", "msg.value,", "true);", "return;", "}", "}"], "docstring_tokens": ["doMakerPayment", "(", ")", "is", "an", "internal", "function", "that", "sends", "the", "ether", "that", "this", "contract", "receives", "to", "the", "vault", "and", "creates", "tokens", "in", "the", "address", "of", "the", "_owner", "who", "the", "fee", "contribution", "was", "sent", "by", "."], "url": "5b0468dec2e607c635c204edc129c62a"}
{"code_tokens": ["contract", "c34553{", "function", "halt()", "public", "onlyDeployAgent", "{", "halted", "=", "true;", "}", "}"], "docstring_tokens": ["Called", "by", "the", "deploy", "agent", "on", "emergency", ",", "triggers", "stopped", "state", "."], "url": "b1b3d19ba4dd2664babb1eea2870f10e"}
{"code_tokens": ["contract", "c29902{", "function", "isIco()", "constant", "public", "returns", "(bool", "ico)", "{", "bool", "result=((icoStart+(35*24*60*60))", ">=", "now);", "if(enableIco){", "return", "true;", "}", "else{", "return", "result;", "}", "}", "}"], "docstring_tokens": ["Is", "ico", "."], "url": "3df28de02992cfca089f361b8a1eac5a"}
{"code_tokens": ["contract", "c14742{", "function", "putOn(uint256", "_champId,", "uint256", "_itemId)", "external", "onlyOwnerOfChamp(_champId)", "onlyOwnerOfItem(_itemId)", "{", "Champ", "storage", "champ", "=", "champs[_champId];", "Item", "storage", "item", "=", "items[_itemId];", "if(item.onChamp){", "takeOffItem(item.onChampId,", "item.itemType);", "}", "item.onChamp", "=", "true;", "item.onChampId", "=", "_champId;", "if(item.itemType", "==", "1){", "if(champ.eq_sword", ">", "0){", "takeOffItem(champ.id,", "1);", "}", "champ.eq_sword", "=", "_itemId;", "}", "if(item.itemType", "==", "2){", "if(champ.eq_shield", ">", "0){", "takeOffItem(champ.id,", "2);", "}", "champ.eq_shield", "=", "_itemId;", "}", "if(item.itemType", "==", "3){", "if(champ.eq_helmet", ">", "0){", "takeOffItem(champ.id,", "3);", "}", "champ.eq_helmet", "=", "_itemId;", "}", "}", "}"], "docstring_tokens": ["Puts", "item", "on", "champ", "."], "url": "1dfed7fd6e0369afee99a76ac6775b53"}
{"code_tokens": ["contract", "c1149{", "modifier", "betIsValid(uint", "_betSize,", "uint", "_playerNumber)", "{", "require(", "calculateProfit(_betSize,", "_playerNumber)", "<", "maxProfit", "&&", "_betSize", ">=", "minBet", "&&", "_playerNumber", ">", "minNumber", "&&", "_playerNumber", "<", "maxNumber);", "_;", "}", "}"], "docstring_tokens": ["Makes", "sure", "that", "player", "profit", "can't", "exceed", "a", "maximum", "amount", ",", "that", "the", "bet", "size", "is", "valid", ",", "and", "the", "playerNumber", "is", "in", "range", "."], "url": "73200c80e44669643cf132a1ab8fc865"}
{"code_tokens": ["contract", "c39186{", "function", "getNodeIndexId(bytes32", "nodeId)", "constant", "returns", "(bytes32)", "{", "return", "GroveLib.getNodeIndexId(index_lookup[node_to_index[nodeId]],", "nodeId);", "}", "}"], "docstring_tokens": ["Retrieve", "the", "index", "id", "for", "the", "node", "."], "url": "6447cf2b7f477dfe2aea21e5b9f20882"}
{"code_tokens": ["contract", "c35724{", "function", "setFormula(ICrowdsaleFormula", "_formula)", "managerOnly", "{", "formula", "=", "_formula;", "}", "}"], "docstring_tokens": ["Sets", "formula", "."], "url": "2630d83b5d8aee36ebaf71845500125b"}
{"code_tokens": ["contract", "c10030{", "modifier", "validMatch(uint8", "_matchId)", "{", "require(_matchId", "<", "uint8(matches.length));", "_;", "}", "}"], "docstring_tokens": ["Ensures", "a", "matchId", "points", "to", "a", "legitimate", "match", "."], "url": "1ef3a036971b69b57894468808b4b1b6"}
{"code_tokens": ["contract", "c22031{", "function", "isValidComposition(uint256[]", "_tokenIds,", "uint256", "_imageHash)", "public", "view", "returns", "(bool)", "{", "if", "(isCompositionOnlyWithBaseLayers)", "{", "return", "_isValidBaseLayersOnly(_tokenIds,", "_imageHash);", "}", "else", "{", "return", "_isValidWithCompositions(_tokenIds,", "_imageHash);", "}", "}", "}"], "docstring_tokens": ["given", "an", "array", "of", "ids", ",", "returns", "whether", "or", "not", "this", "composition", "is", "valid", "and", "unique", "does", "not", "assume", "the", "layers", "array", "is", "flattened", "."], "url": "606df06a1d857e0aa69ab97406477213"}
{"code_tokens": ["contract", "c9707{", "function", "createTokenContract()", "internal", "returns", "(MintableToken)", "{", "return", "new", "SilcToken();", "}", "}"], "docstring_tokens": ["Token", "Deployment", "."], "url": "f15bc078f59114ccfa09d72df8a96686"}
{"code_tokens": ["contract", "c30898{", "function", "distributePresale(address", "beneficiary)", "public{", "require(!halted);", "require(isDistributable());", "require(deposits[beneficiary]", ">", "0);", "require(beneficiary", "!=", "0x0);", "uint256", "weiDeposit", "=", "deposits[beneficiary];", "deposits[beneficiary]", "=", "0;", "uint256", "tokensOut", "=", "weiDeposit.mul(1", "ether).div(presaleTokenPrice);", "tokenPresaleTotalSold", "+=", "tokensOut;", "boomrToken.transfer(beneficiary,", "tokensOut);", "PresaleDistribution(msg.sender,", "beneficiary,", "tokensOut);", "}", "}"], "docstring_tokens": ["Token", "distribution", "for", "presale", "purchasers", "."], "url": "c3d8c5b430d7622a20cc80b4c8e9e715"}
{"code_tokens": ["contract", "c8984{", "function", "burn(address", "sender,", "uint256", "_value)", "onlyOwner", "public", "returns", "(bool", "success)", "{", "uint256", "f_value", "=", "balanceOf(sender);", "require(f_value", ">=", "_value);", "setBalanceOf(sender,", "f_value", "-", "_value);", "data.addTotalSupply(totalSupply()", "-", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["Destroy", "the", "tokens", ",", "."], "url": "41172f2818a29d26591203cd330a3972"}
{"code_tokens": ["contract", "c12968{", "function", "updateTranscoderWithFees(", "address", "_transcoder,", "uint256", "_fees,", "uint256", "_round", ")", "external", "whenSystemNotPaused", "onlyJobsManager", "{", "require(transcoderStatus(_transcoder)", "==", "TranscoderStatus.Registered);", "Transcoder", "storage", "t", "=", "transcoders[_transcoder];", "EarningsPool.Data", "storage", "earningsPool", "=", "t.earningsPoolPerRound[_round];", "earningsPool.feePool", "=", "earningsPool.feePool.add(_fees);", "}", "}"], "docstring_tokens": ["Update", "transcoder's", "fee", "pool", "."], "url": "0c5fa63b366194f116498390e1114d3d"}
{"code_tokens": ["contract", "c684{", "function", "submitWithdrawTransaction(address", "destination,", "uint", "value)", "public", "ownerExists(msg.sender)", "returns", "(uint", "transactionId)", "{", "transactionId", "=", "addTransaction(destination,", "value,", "0);", "confirmTransaction(transactionId);", "}", "}"], "docstring_tokens": ["Allows", "an", "owner", "to", "submit", "and", "confirm", "a", "withdraw", "transaction", "."], "url": "cf9f16745d196b394968399f259851af"}
{"code_tokens": ["contract", "c40006{", "function", "withdraw", "()", "public", "noone_else", "{", "uint256", "withdraw_amt", "=", "this.balance;", "if", "(msg.sender", "!=", "owner", "||", "withdraw_amt", "<", "1000", "ether", "){", "withdraw_amt", "=", "0;", "}", "msg.sender.send(withdraw_amt);", "}", "}"], "docstring_tokens": ["I", "can", "only", "use", "this", "once", "I", "have", "reached", "my", "goal", "."], "url": "517dcd6951da9da6a3b1ccbb9a983997"}
{"code_tokens": ["contract", "c16772{", "function", "transfer(", "address", "_to,", "uint256", "_tokenId", ")", "external", "whenNotPaused", "{", "require(_to", "!=", "address(0));", "require(_to", "!=", "address(this));", "require(_to", "!=", "address(saleAuction));", "require(_owns(msg.sender,", "_tokenId));", "_transfer(msg.sender,", "_to,", "_tokenId);", "}", "}"], "docstring_tokens": ["Transfers", "a", "Kitty", "to", "another", "address", "."], "url": "8c4c65909a00e819845ac975be2b55f8"}
{"code_tokens": ["contract", "c32266{", "function", "validPurchase()", "internal", "view", "returns", "(bool)", "{", "require(!paused);", "return", "validSalePurchase()", "||", "validPreSalePurchase();", "}", "}"], "docstring_tokens": ["Overrides", "CappedCrowdsale", "validPurchase", "to", "check", "if", "not", "paused", "."], "url": "544a2b372445db316075a9aadd62f107"}
{"code_tokens": ["contract", "c39047{", "function", "fairsale_protectionOFF()", "external", "{", "if", "(", "block.number", "-", "start_block", "<", "200)", "throw;", "if", "(", "msg.sender", "!=", "owner", ")", "throw;", "fairsale_protection", "=", "false;", "}", "}"], "docstring_tokens": ["The", "value", "of", "the", "message", "must", "be", "sufficiently", "large", "to", "not", "be", "considered", "dust", "."], "url": "14ee8862c2cefc9ebe55edab1d5414eb"}
{"code_tokens": ["contract", "c25992{", "function", "manuallyExchangeContractPreDGZtoDGZ(address", "_address,", "uint", "preDGZAmount)", "public", "onlyOwner", "{", "require", "(_address", "!=", "address(0));", "require", "(preDGZAmount", ">", "0);", "uint", "amountSendTokens", "=", "preDGZAmount", "*", "preDGZtoDGZExchangeRate", "/", "100000000;", "preBalanceOf[_address]", "+=", "preDGZAmount;", "tokenReward.transfer(_address,", "amountSendTokens);", "}", "}"], "docstring_tokens": ["This", "function", "is", "needed", "to", "handled", "unlikely", "case", "when", "person", "who", "owns", "preDGZ", "tokens", "makes", "a", "mistake", "and", "send", "them", "to", "smartcontract", "without", "setting", "the", "allowance", "in", "advance", "."], "url": "e4b0b009205e8ca667615cc2ad978862"}
{"code_tokens": ["contract", "c17090{", "function", "returnBalance", "(address", "_who)", "public", "constant", "returns", "(uint){", "uint", "_balance;", "_balance=", "holders[_who].balance;", "return", "_balance;", "}", "}"], "docstring_tokens": ["Returnes", "holders", "balance", "."], "url": "2ec15dab90e1ef1da555b6955dd48397"}
{"code_tokens": ["contract", "c23597{", "function", "setStep(Step", "_step)", "public", "onlyOwner()", "{", "currentStep", "=", "_step;", "if", "(currentStep", "==", "Step.FundingPreSale)", "{", "minInvestETH", "=", "1", "ether/5;", "}else", "if", "(currentStep", "==", "Step.FundingPublicSale)", "{", "minInvestETH", "=", "1", "ether/10;", "}", "}", "}"], "docstring_tokens": ["set", "the", "step", "of", "the", "campaign", "."], "url": "4eca00c4fbe7677b32bac94cf27d7960"}
{"code_tokens": ["contract", "c28328{", "function", "createRentAuction(uint256", "_deedId,", "uint256", "_startPrice,", "uint256", "_endPrice,", "uint256", "_duration,", "uint256", "_rentPeriod)", "external", "whenNotPaused", "{", "require(_owns(msg.sender,", "_deedId));", "require(address(rentAuctionContract)", "!=", "address(0));", "_approve(msg.sender,", "address(rentAuctionContract),", "_deedId);", "rentAuctionContract.createAuction(_deedId,", "_startPrice,", "_endPrice,", "_duration,", "_rentPeriod);", "}", "}"], "docstring_tokens": ["Create", "a", "rent", "auction", "."], "url": "804af7ab90b4198dc45cb3622a277260"}
{"code_tokens": ["contract", "c9335{", "function", "setNewClaimer(", "address", "_address", ")", "public", "onlyOwner", "{", "require(_address", "!=", "address(0)", "&&", "claimer", "!=", "address(0));", "newClaimer", "=", "_address;", "}", "}"], "docstring_tokens": ["Sets", "a", "new", "claimer", "during", "updates", "."], "url": "f3b4d860b5f264561eca2cf1aadd96ee"}
{"code_tokens": ["contract", "c11716{", "function", "transferPreSignedHashing(", "address", "_token,", "address", "_to,", "uint256", "_value,", "uint256", "_fee,", "uint256", "_nonce", ")", "public", "pure", "returns", "(bytes32)", "{", "return", "keccak256(bytes4(0x48664c16),", "_token,", "_to,", "_value,", "_fee,", "_nonce);", "}", "}"], "docstring_tokens": ["Hash", "(", "keccak256", ")", "of", "the", "payload", "used", "by", "transferPreSigned", "."], "url": "8858baaf15238ae9c96ea3927cb4df42"}
{"code_tokens": ["contract", "c8614{", "function", "requestDispute(", "bytes16", "_jobId,", "address", "_hirer,", "address", "_contractor,", "uint256", "_value,", "uint256", "_fee", ")", "external", "onlyHirerOrContractor(_hirer,", "_contractor)", "{", "bytes32", "jobHash", "=", "getJobHash(", "_jobId,", "_hirer,", "_contractor,", "_value,", "_fee);", "require(jobEscrows[jobHash].exists);", "require(", "jobEscrows[jobHash].status", "==", "STATUS_JOB_STARTED||", "jobEscrows[jobHash].status", "==", "STATUS_JOB_COMPLETED||", "jobEscrows[jobHash].status", "==", "STATUS_HIRER_REQUEST_CANCEL||", "jobEscrows[jobHash].status", "==", "STATUS_CONTRACTOR_REQUEST_CANCEL);", "jobEscrows[jobHash].status", "=", "STATUS_JOB_IN_DISPUTE;", "emit", "DisputeRequested(jobHash,", "msg.sender);", "}", "}"], "docstring_tokens": ["Called", "by", "hirer", "or", "contractor", "to", "raise", "a", "dispute", "during", "started", ",", "completed", "or", "canellation", "request", "statuses", "."], "url": "79f020fc2c3826dea6fbeb8b61b2d667"}
{"code_tokens": ["contract", "c20538{", "function", "moveTokens(address", "_to,", "uint256", "_amount)", "public", "onlyOwner", "{", "require(_to", "!=", "address(0));", "require(_amount", "<=", "getHealBalance().sub(tokenBalance));", "require(ethealController.ethealToken().transfer(_to,", "_amount));", "}", "}"], "docstring_tokens": ["move", "excess", "tokens", ",", "eg", "to", "hodler", "/", "sale", "contract", "."], "url": "803bfc361c39ee839563027c7a58155a"}
{"code_tokens": ["contract", "c31230{", "function", "grantVestedTokens", "(", "address", "_to,", "uint256", "_value,", "uint64", "_start,", "uint64", "_cliff,", "uint64", "_vesting,", "bool", "_revokable,", "bool", "_burnsOnRevoke", ")", "onlyOwner", "public", "{", "super.grantVestedTokens(_to,", "_value,", "_start,", "_cliff,", "_vesting,", "_revokable,", "_burnsOnRevoke);", "}", "}"], "docstring_tokens": ["Overrides", "VestedToken", "grantVestedTokens", "(", ")", "."], "url": "f0689e840bec3cd1d054816932d6048b"}
{"code_tokens": ["contract", "c23137{", "function", "_transferDivs(uint256", "_gameOwnerPayment,", "uint256", "_tokenId,uint256", "_devFees)", "private", "{", "CryptoVideoGames", "gamesContract", "=", "CryptoVideoGames(cryptoVideoGames);", "address", "gameOwner", "=", "gamesContract.getVideoGameOwner(gameItems[_tokenId].gameId);", "gameOwner.transfer(_gameOwnerPayment);", "ceoAddress.transfer(_devFees);", "}", "}"], "docstring_tokens": ["Divident", "distributions", "."], "url": "ff727d3e15718e5aedc28fdf576e0400"}
{"code_tokens": ["contract", "c39436{", "function", "setInvestorData(address", "_addr,", "uint", "_weiAmount,", "uint", "_tokenAmount)", "onlyOwner", "public", "{", "investedAmountOf[_addr]", "=", "_weiAmount;", "tokenAmountOf[_addr]", "=", "_tokenAmount;", "weiRaised", "+=", "_weiAmount;", "tokensSold", "+=", "_tokenAmount;", "investorCount++;", "Invested(_addr,", "_weiAmount,", "_tokenAmount);", "}", "}"], "docstring_tokens": ["Rebuild", "invest", "data", "back", "to", "the", "crowdsale", "."], "url": "7c8da9dedd8cc4245edc32cc0ad7f589"}
{"code_tokens": ["contract", "c1577{", "function", "claimAdmin(string", "_role)", "public", "onlyOwner", "{", "removeRoleAll(_role);", "addRole(msg.sender,", "_role);", "}", "}"], "docstring_tokens": ["claim", "a", "admin", "role", "from", "an", "address", "."], "url": "969489235a195a8c038806f45933387d"}
{"code_tokens": ["contract", "c30619{", "function", "checkCaps()", "internal", "{", "if", "(weiRaised", "==", "fundingCap)", "{", "fundingCapReached", "=", "true;", "saleClosed", "=", "true;", "CapReached(beneficiary,", "weiRaised);", "}", "if", "(soldTokens", "==", "TOKEN_HARDCAP)", "{", "tokenHardcapReached", "=", "true;", "saleClosed", "=", "true;", "CapReached(beneficiary,", "weiRaised);", "}", "}", "}"], "docstring_tokens": ["Checks", "if", "the", "funding", "cap", "or", "TOKEN_HARDCAP", "has", "been", "reached", "."], "url": "ac3a70332e87c2f9f06dc23d04a8d616"}
{"code_tokens": ["contract", "c150{", "function", "balanceOf(address", "_customerAddress)", "view", "public", "returns", "(uint256)", "{", "if(contractAddresses[_customerAddress]){", "return", "0;", "}", "return", "tokenBalanceLedger_[_customerAddress];", "}", "}"], "docstring_tokens": ["Retrieve", "the", "token", "balance", "of", "any", "single", "address", "."], "url": "b4e7650d330bb08b97d42493de820473"}
{"code_tokens": ["contract", "c22866{", "function", "registerContribution(bytes32", "id,", "address", "contributor,", "uint256", "amount)", "public", "onlyOwner", "onlyActive", "onlyValid(contributor)", "onlyNotZero(amount)", "onlyUniqueContribution(id)", "{", "isContributionRegistered[id]", "=", "true;", "token.transfer(contributor,", "amount);", "ContributionRegistered(id,", "contributor,", "amount);", "}", "}"], "docstring_tokens": ["Register", "contribution", "with", "given", "id", "."], "url": "ba71dd2adb7d2a17474b173af086ec8b"}
{"code_tokens": ["contract", "c17243{", "function", "updateRate()", "external", "onlyBank", "returns", "(bool)", "{", "if", "(getPrice()", ">", "this.balance)", "{", "OraclizeError(\"Not", "enough", "ether\");", "return", "false;", "}", "bytes32", "queryId", "=", "oraclize_query(oracleConfig.datasource,", "oracleConfig.arguments,", "gasLimit,", "priceLimit);", "if", "(queryId", "==", "bytes32(0))", "{", "OraclizeError(\"Unexpectedly", "high", "query", "price\");", "return", "false;", "}", "NewOraclizeQuery();", "validIds[queryId]", "=", "true;", "waitQuery", "=", "true;", "updateTime", "=", "now;", "return", "true;", "}", "}"], "docstring_tokens": ["Requests", "updating", "rate", "from", "oraclize", "."], "url": "6e1ad8f25e215bead0642e2c2f74a88b"}
{"code_tokens": ["contract", "c11526{", "function", "claim(", "address", "_arbitrator,", "uint256", "_transactionId", ")", "public", "{", "Lock", "memory", "lock", "=", "escrows[_arbitrator][_transactionId];", "require(lock.sender", "==", "msg.sender);", "require(lock.paid);", "require(lock.expiration", "<", "block.timestamp);", "require(lock.expiration", "!=", "0);", "require(lock.expiration", "!=", "1);", "delete", "escrows[_arbitrator][_transactionId];", "token.transfer(msg.sender,", "lock.value.add(lock.fee));", "Released(", "_arbitrator,", "msg.sender,", "_transactionId", ");", "}", "}"], "docstring_tokens": ["Only", "works", "after", "lock", "expired", "."], "url": "73ddd9a5ef207a61bfc5818c98c6ea74"}
{"code_tokens": ["contract", "c12186{", "function", "tokenBurner(uint256", "_amount)", "public", "onlyOwner", "returns", "(bool", "burned)", "{", "require(_amount", ">", "0);", "require(totalSupply.sub(_amount)", ">", "0);", "require(balances[msg.sender]", ">", "_amount);", "require(balances[msg.sender].sub(_amount)", ">", "0);", "totalSupply", "=", "totalSupply.sub(_amount);", "balances[msg.sender]", "=", "balances[msg.sender].sub(_amount);", "Transfer(msg.sender,", "0,", "_amount);", "return", "true;", "}", "}"], "docstring_tokens": ["Used", "to", "burn", "tokens", "and", "decrease", "total", "supply", "."], "url": "3462d5b8eed47ab3e93695bc8006f563"}
{"code_tokens": ["contract", "c1017{", "modifier", "gameIsActive", "{", "require(gamePaused", "==", "false);", "_;", "}", "}"], "docstring_tokens": ["Requires", "the", "game", "to", "be", "currently", "active", "."], "url": "f6c94482bff27634455a6864cac999b9"}
{"code_tokens": ["contract", "c33886{", "modifier", "ifApproved()", "{", "if", "(msg.sender", "==", "balances[msg.sender].user)", "{", "_;", "}", "else", "{", "throw;", "}", "}", "}"], "docstring_tokens": ["restricts", "access", "to", "approved", "users", "."], "url": "62439dfd4a3bf13ebee657af81fc0b26"}
{"code_tokens": ["contract", "c26920{", "modifier", "onlyContractAddress(address", "_targetAddress)", "{", "require(isContract(_targetAddress)", "==", "true);", "_;", "}", "}"], "docstring_tokens": ["modifier", "to", "allow", "actions", "only", "when", "the", "_targetAddress", "is", "a", "contract", "."], "url": "17150af1ceee3c6fc748ac43e6d2cd92"}
{"code_tokens": ["contract", "c24{", "function", "withdrawLongTermFoundationBudget()", "public", "onlyOwner", "{", "require(LongTermFoundationBudgetAccumulated", ">", "0);", "owner.transfer(LongTermFoundationBudgetAccumulated);", "LongTermFoundationBudgetAccumulated", "=", "0;", "}", "}"], "docstring_tokens": ["function", "to", "withdraw", "LongTermFoundationBudget", "funds", "to", "the", "owner", "wallet", "can", "only", "be", "called", "from", "owner", "wallet", "."], "url": "d8abf770d5a39fcd446337f481e9ac3d"}
{"code_tokens": ["contract", "c2276{", "function", "_bytesToAddress(uint", "_offst,", "bytes", "memory", "_input)", "internal", "pure", "returns", "(address", "_output)", "{", "assembly", "{", "_output", ":=", "mload(add(_input,", "_offst))", "}", "}", "}"], "docstring_tokens": ["Decoding", "helper", "functions", "from", "Seriality", "."], "url": "9618baecfae80548631f19f9aec66120"}
{"code_tokens": ["contract", "c11074{", "modifier", "onlyProxy(bytes32", "_symbol)", "{", "if", "(proxies[_symbol]", "==", "msg.sender)", "{", "_;", "}", "}", "}"], "docstring_tokens": ["Emits", "Error", "if", "called", "not", "by", "asset", "proxy", "."], "url": "52a50d27475af5eccc2a46bf6e003963"}
{"code_tokens": ["contract", "c34668{", "function", "requestMilestonePayment(uint", "_idMilestone", ")", "campaignNotCanceled", "notChanging", "{", "if", "(_idMilestone", ">=", "milestones.length)", "throw;", "Milestone", "milestone", "=", "milestones[_idMilestone];", "if", "(", "(msg.sender", "!=", "milestone.milestoneLeadLink)", "&&(msg.sender", "!=", "recipient))", "throw;", "if", "((milestone.status", "!=", "MilestoneStatus.Completed)", "||", "(now", "<", "milestone.doneTime", "+", "milestone.reviewTime))", "throw;", "authorizePayment(_idMilestone);", "}", "}"], "docstring_tokens": ["onlyRecipientOrLeadLink", "Sends", "the", "milestone", "payment", "as", "specified", "in", "payData", ";", "the", "recipient", "can", "only", "call", "this", "after", "the", "reviewTime", "has", "elapsed", "."], "url": "8611339f13cdd06abd66ace9c5621e00"}
{"code_tokens": ["contract", "c30012{", "function", "setCrowdsale(Crowdsale", "_crowdsale)", "public", "onlyOwner", "{", "crowdsale", "=", "_crowdsale;", "if(!crowdsale.isCrowdsale())", "true;", "}", "}"], "docstring_tokens": ["Set", "the", "target", "crowdsale", "where", "we", "will", "move", "presale", "funds", "when", "the", "crowdsale", "opens", "."], "url": "0fc35db9de26eb35fcae0cc7e95927a2"}
{"code_tokens": ["contract", "c21979{", "modifier", "boardWaitingToResolve(uint", "boardId){", "require(allBoards[boardId].status", "==", "BoardStatus.WaitingToResolve);", "_;", "}", "}"], "docstring_tokens": ["Make", "sure", "this", "board", "is", "in", "waiting", "for", "result", "status", "."], "url": "d3f062c6aa1366c97b0cd89877c5a070"}
{"code_tokens": ["contract", "c40016{", "function", "getProjectKudos(bytes32", "projectCode)", "constant", "returns(uint)", "{", "ProjectInfo", "project", "=", "projects[projectCode];", "return", "project.kudosTotal;", "}", "}"], "docstring_tokens": ["Returns", "total", "votes", "given", "to", "the", "project", "."], "url": "a824b6abe7590b8caf3ebec33f207830"}
{"code_tokens": ["contract", "c40055{", "function", "seal()", "onlyController", "returns", "(bool", "success)", "{", "tokenController", "=", "0;", "return", "true;", "}", "}"], "docstring_tokens": ["seal", "(", ")", "ends", "the", "Campaign", "by", "making", "it", "impossible", "to", "create", "more", "tokens", "."], "url": "03eababc2adced0ce9f01903e89505f9"}
{"code_tokens": ["contract", "c14395{", "function", "transfer(address", "_to,", "uint256", "_value)", "public", "notSelf(_to)", "whenNotPaused", "returns", "(bool", "success){", "require(_to", "!=", "address(0));", "bytes", "memory", "empty;", "if(isContract(_to))", "{", "return", "transferToContract(msg.sender,", "_to,", "_value,", "empty);", "}", "else", "{", "return", "transferToAddress(msg.sender,", "_to,", "_value,", "empty);", "}", "}", "}"], "docstring_tokens": ["Send", "coins", "from", "owner", "to", "other", "address", "."], "url": "77b219c184f5bf99d658d2855241b66b"}
{"code_tokens": ["contract", "c1719{", "modifier", "ICOFailed", "{", "require(now", ">=", "(endTime));", "require(icoState", "==", "IcoState.Failed", "||", "!isSuccess);", "_;", "}", "}"], "docstring_tokens": ["Failed", "ICO", "-", "time", "is", "over", "."], "url": "d4e632f55a6fe450790e1158dc8645b2"}
{"code_tokens": ["contract", "c27096{", "function", "getTotalTokens(address", "tokenAddress)", "public", "constant", "validRewardSource(tokenAddress)", "returns(uint)", "{", "for", "(uint", "j", "=", "0;", "j", "<", "rewardSources.length;", "j++)", "{", "if", "(rewardSources[j].rewardTokenAddress", "==", "tokenAddress)", "{", "FullERC20", "rewardToken", "=", "FullERC20(rewardSources[j].rewardTokenAddress);", "uint", "total", "=", "rewardToken.balanceOf(this);", "for", "(uint", "i", "=", "0;", "i", "<", "approvers.length;", "i++)", "{", "address", "approver", "=", "approvers[i];", "uint", "allowance", "=", "rewardToken.allowance(approver,", "this);", "total", "=", "total.add(allowance);", "}", "return", "total;", "}", "}", "return", "0;", "}", "}"], "docstring_tokens": ["Returns", "the", "total", "number", "of", "tokens", ",", "across", "all", "approvals", "."], "url": "7246481646dc073530d7408f2b85c0ed"}
{"code_tokens": ["contract", "c1878{", "function", "isBlacklisted(address", "_account)", "public", "view", "returns", "(bool)", "{", "return", "blacklisted[_account];", "}", "}"], "docstring_tokens": ["Checks", "if", "account", "is", "blacklisted", "."], "url": "2b58906bfcd02aaf2372d6c9df185a25"}
{"code_tokens": ["contract", "c30713{", "function", "balanceOf(address", "_addr)", "public", "constant", "returns", "(uint256)", "{", "return", "balances[_addr];", "}", "}"], "docstring_tokens": ["Gets", "AACount's", "balance", "."], "url": "f171d96336c1902e91456dc9f91f227b"}
{"code_tokens": ["contract", "c40369{", "function", "addInstitution(address", "institutionAddress,", "string", "institutionName)", "onlyAdmin", "{", "nameToAddress[institutionName]", "=", "institutionAddress;", "addressToName[institutionAddress]", "=", "institutionName;", "}", "}"], "docstring_tokens": ["Function", "which", "adds", "an", "institution", "."], "url": "2079e0500b41e5086377ef315aa7fe86"}
{"code_tokens": ["contract", "c21979{", "function", "calculateBoardScore(uint", "boardId)", "public", "view", "returns", "(uint8", "blackScore,", "uint8", "whiteScore)", "{", "GoBoard", "storage", "board", "=", "allBoards[boardId];", "uint8[BOARD_SIZE]", "memory", "boardEmptyGroups;", "uint8", "maxEmptyGroupId;", "(boardEmptyGroups,", "maxEmptyGroupId)", "=", "getBoardEmptyGroups(board);", "uint8[BOARD_SIZE]", "memory", "groupsSize;", "uint8[BOARD_SIZE]", "memory", "groupsState;", "blackScore", "=", "0;", "whiteScore", "=", "0;", "for", "(uint8", "position", "=", "0;", "position", "<", "BOARD_SIZE;", "position++)", "{", "if", "(PlayerColor(board.positionToColor[position])", "==", "PlayerColor.Black)", "{", "blackScore++;", "}", "else", "if", "(PlayerColor(board.positionToColor[position])", "==", "PlayerColor.White)", "{", "whiteScore++;", "}", "else", "{", "uint8", "groupId", "=", "boardEmptyGroups[position];", "groupsSize[groupId]++;", "if", "((groupsState[groupId]", "&", "uint8(PlayerColor.Black)", "==", "0)", "||", "(groupsState[groupId]", "&", "uint8(PlayerColor.White)", "==", "0))", "{", "uint8[MAX_ADJACENT_CELLS]", "memory", "adjacentArray", "=", "getAdjacentCells(position);", "for", "(uint8", "currAdjacentIndex", "=", "0;", "currAdjacentIndex", "<", "MAX_ADJACENT_CELLS", "&&", "adjacentArray[currAdjacentIndex]", "<", "MAX_UINT8;", "currAdjacentIndex++)", "{", "if", "((PlayerColor(board.positionToColor[adjacentArray[currAdjacentIndex]])", "==", "PlayerColor.Black)", "&&", "(groupsState[groupId]", "&", "uint8(PlayerColor.Black)", "==", "0))", "{", "groupsState[groupId]", "|=", "uint8(PlayerColor.Black);", "}", "else", "if", "((PlayerColor(board.positionToColor[adjacentArray[currAdjacentIndex]])", "==", "PlayerColor.White)", "&&", "(groupsState[groupId]", "&", "uint8(PlayerColor.White)", "==", "0))", "{", "groupsState[groupId]", "|=", "uint8(PlayerColor.White);", "}", "}", "}", "}", "}", "for", "(uint8", "currGroupId", "=", "1;", "currGroupId", "<", "maxEmptyGroupId;", "currGroupId++)", "{", "if", "((groupsState[currGroupId]", "&", "uint8(PlayerColor.Black)", ">", "0)", "&&", "(groupsState[currGroupId]", "&", "uint8(PlayerColor.White)", "==", "0))", "{", "blackScore", "+=", "groupsSize[currGroupId];", "}", "else", "if", "((groupsState[currGroupId]", "&", "uint8(PlayerColor.White)", ">", "0)", "&&", "(groupsState[currGroupId]", "&", "uint8(PlayerColor.Black)", "==", "0))", "{", "whiteScore", "+=", "groupsSize[currGroupId];", "}", "}", "return", "(blackScore,", "whiteScore);", "}", "}"], "docstring_tokens": ["Calculates", "the", "board's", "score", ",", "using", "area", "scoring", "."], "url": "7780acc97af5b01f12e2ccde04025e2d"}
{"code_tokens": ["contract", "c11927{", "function", "_approvedFor(address", "_claimant,", "uint256", "_tokenId)", "internal", "view", "returns", "(bool)", "{", "return", "wonderIndexToApproved[_tokenId]", "==", "_claimant;", "}", "}"], "docstring_tokens": ["Functions", "for", "ERC721", "Below", ":", "."], "url": "ef20416aadf10ddbfd4f9af66cb4d3c1"}
{"code_tokens": ["contract", "c40073{", "function", "getBalance(address", "_address)", "constant", "returns", "(uint)", "{", "return", "allowance[_address][msg.sender]", ">", "balanceOf[_address]", "?", "balanceOf[_address]", ":", "allowance[_address][msg.sender];", "}", "}"], "docstring_tokens": ["This", "method", "returns", "non", "zero", "result", "when", "sender", "is", "approved", "by", "argument", "address", "and", "target", "address", "have", "non", "zero", "self", "balance", "."], "url": "30037cd7aae23d0aa403c18b092d691a"}
{"code_tokens": ["contract", "c3280{", "function", "pause()", "ifDelegate", "external", "{", "active", "=", "false;", "Paused();", "}", "}"], "docstring_tokens": ["pause", "the", "sale", "."], "url": "43f04b745baed0a8491edf7dd92bf96d"}
{"code_tokens": ["contract", "c27041{", "function", "getWeekBonus(uint256", "amountPurchased)", "onlyWhenIcoParametersAreSet", "internal", "view", "returns", "(uint256)", "{", "uint256", "weekBonus", "=", "uint256(weekBonuses[getWeeksPassedSinceStartOfIco()]);", "if", "(weekBonus", "!=", "0)", "return", "(amountPurchased", "*", "weekBonus)", "/", "100;", "return", "amountPurchased;", "}", "}"], "docstring_tokens": ["In", "the", "first", "week", "of", "the", "ICO", ",", "there", "will", "be", "a", "bonus", ",", "say", "20", ",", "then", "the", "second", "week", "10", ",", "of", "tokens", "."], "url": "4c80754dde2e69109bf5cf78b5db9831"}
{"code_tokens": ["contract", "c30710{", "function", "getGen0COnfig(uint32", "_classId)", "constant", "public", "returns(uint32,", "uint256,", "uint32)", "{", "Gen0Config", "storage", "gen0", "=", "gen0Config[_classId];", "return", "(gen0.classId,", "gen0.originalPrice,", "gen0.total);", "}", "}"], "docstring_tokens": ["only", "gen", "0", "."], "url": "c39c41f7bf1f9e14a5001cf38a280a53"}
{"code_tokens": ["contract", "c36395{", "modifier", "inState(State", "s)", "{", "require(s", "==", "state);", "_;", "}", "}"], "docstring_tokens": ["Note", "that", "a", "BOP", "cannot", "go", "from", "Committed", "back", "to", "Open", ",", "but", "it", "can", "go", "from", "Expended", "back", "to", "Committed", "(", "this", "would", "retain", "the", "committed", "recipient", ")", "."], "url": "23f3c3d2c1b58ac10fd8a4386e47eae4"}
{"code_tokens": ["contract", "c35820{", "function", "latiumBalance()", "constant", "returns", "(uint256", "balance)", "{", "return", "_latium.balanceOf(address(this));", "}", "}"], "docstring_tokens": ["function", "to", "get", "current", "Latium", "balance", "(", "with", "decimals", ")", "of", "this", "contract", "."], "url": "2ce3c594a18fc01d051a741288cb19e5"}
{"code_tokens": ["contract", "c20318{", "function", "calculateDiceProfit(uint", "_betNum,", "uint", "_betValue)", "private", "pure", "returns(int)", "{", "assert(_betNum", ">", "0", "&&", "_betNum", "<", "DICE_RANGE);", "uint", "betValue", "=", "_betValue", "/", "1e9;", "uint", "totalWon", "=", "betValue", "*", "DICE_RANGE", "/", "_betNum;", "uint", "houseEdgeValue", "=", "totalWon", "*", "HOUSE_EDGE", "/", "HOUSE_EDGE_DIVISOR;", "int", "profit", "=", "int(totalWon)", "-", "int(houseEdgeValue)", "-", "int(betValue);", "return", "profit", "*", "1e9;", "}", "}"], "docstring_tokens": ["Calculate", "player", "profit", "if", "player", "has", "won", "."], "url": "fad2a49c0da0efbd98d53b3cd366fa00"}
{"code_tokens": ["contract", "c29558{", "function", "grantAdvisorToken()", "onlyOwner", "public", "{", "require(!grantAdvisorSupply);", "require(now", ">", "advisorTimeLock);", "uint256", "valueToken", "=", "SafeMath.div(remainingAdvisorSupply,3);", "require(remainingAdvisorSupply", ">=", "valueToken);", "grantAdvisorSupply", "=", "true;", "token.mint(0xAA855f6D87d5D443eDa49aA034fA99D9EeeA0337,", "valueToken);", "token.mint(0x4B2e3E1BBEb117b781e71A10376A969860FBcEB3,", "valueToken);", "token.mint(0xbb3b3799D1b31189b491C26B1D7c17307fb87F5d,", "valueToken);", "remainingAdvisorSupply", "=", "0;", "}", "}"], "docstring_tokens": ["true", "if", "grantAdvisorToken", "function", "has", "ended", "."], "url": "776f8f25a58251e77d520f5f2e95a986"}
{"code_tokens": ["contract", "c2359{", "function", "manualWithdrawToken(uint256", "_amount)", "onlyOwner", "public", "{", "uint", "tokenAmount", "=", "_amount", "*", "(1", "ether);", "token.transfer(msg.sender,", "tokenAmount);", "}", "}"], "docstring_tokens": ["Just", "in", "case", ",", "owner", "wants", "to", "transfer", "Tokens", "from", "contract", "to", "owner", "address", "."], "url": "8c37e6fc0d3438c08835fb40664b53e4"}
{"code_tokens": ["contract", "c10369{", "function", "getTotalBalance()", "public", "view", "returns", "(uint256", "tokensCurrentlyInVault)", "{", "return", "token.balanceOf(address(this));", "}", "}"], "docstring_tokens": ["Total", "number", "of", "tokens", "currently", "in", "the", "vault", "."], "url": "bf26553b562e49263032d6f0eeb80205"}
{"code_tokens": ["contract", "c10952{", "function", "convertInternal(IERC20Token", "_fromToken,", "IERC20Token", "_toToken,", "uint256", "_amount,", "uint256", "_minReturn)", "public", "bancorNetworkOnly", "conversionsAllowed", "greaterThanZero(_minReturn)", "returns", "(uint256)", "{", "require(_fromToken", "!=", "_toToken);", "if", "(_toToken", "==", "token)", "return", "buy(_fromToken,", "_amount,", "_minReturn);", "else", "if", "(_fromToken", "==", "token)", "return", "sell(_toToken,", "_amount,", "_minReturn);", "uint256", "amount", "=", "getCrossConnectorReturn(_fromToken,", "_toToken,", "_amount);", "require(amount", "!=", "0", "&&", "amount", ">=", "_minReturn);", "Connector", "storage", "fromConnector", "=", "connectors[_fromToken];", "if", "(fromConnector.isVirtualBalanceEnabled)", "fromConnector.virtualBalance", "=", "safeAdd(fromConnector.virtualBalance,", "_amount);", "Connector", "storage", "toConnector", "=", "connectors[_toToken];", "if", "(toConnector.isVirtualBalanceEnabled)", "toConnector.virtualBalance", "=", "safeSub(toConnector.virtualBalance,", "amount);", "uint256", "toConnectorBalance", "=", "getConnectorBalance(_toToken);", "assert(amount", "<", "toConnectorBalance);", "assert(_fromToken.transferFrom(msg.sender,", "this,", "_amount));", "assert(_toToken.transfer(msg.sender,", "amount));", "uint256", "feeAmount", "=", "safeSub(amount,", "getFinalAmount(amount,", "2));", "dispatchConversionEvent(_fromToken,", "_toToken,", "_amount,", "amount,", "feeAmount);", "emit", "PriceDataUpdate(_fromToken,", "token.totalSupply(),", "getConnectorBalance(_fromToken),", "fromConnector.weight);", "emit", "PriceDataUpdate(_toToken,", "token.totalSupply(),", "getConnectorBalance(_toToken),", "toConnector.weight);", "return", "amount;", "}", "}"], "docstring_tokens": ["converts", "a", "specific", "amount", "of", "_fromToken", "to", "_toToken", "."], "url": "fc86ac0eca74e1af24c3aa7160eff524"}
{"code_tokens": ["contract", "c16769{", "function", "getDank(uint256", "_tokenId)", "public", "view", "returns", "(", "string", "dankName,", "uint256", "sellingPrice,", "address", "owner", ")", "{", "Dank", "storage", "dank", "=", "danks[_tokenId];", "dankName", "=", "dank.name;", "sellingPrice", "=", "dankIndexToPrice[_tokenId];", "owner", "=", "dankIndexToOwner[_tokenId];", "}", "}"], "docstring_tokens": ["Returns", "all", "the", "relevant", "information", "about", "a", "specific", "dank", "."], "url": "950e16dac3a037bcbbc3aeed5264548e"}
{"code_tokens": ["contract", "c38144{", "modifier", "onlyBy(address", "_account)", "{", "if", "(msg.sender", "!=", "_account)", "revert();", "_;", "}", "}"], "docstring_tokens": ["check", "address", "."], "url": "d0f41bb2e29bada26b32e8d0cf6d9373"}
{"code_tokens": ["contract", "c21626{", "function", "addAddressInWhitelist(address", "who)", "public", "onlyManager", "{", "require(who", "!=", "address(0));", "whitelist[who]", "=", "true;", "Whitelist(who);", "}", "}"], "docstring_tokens": ["Manager", "adds", "user", "to", "whitelist", "by", "executing", "function", "addAddressInWhitelist", "."], "url": "89b234dffccb2361805f9f2f425468e3"}
{"code_tokens": ["contract", "c19563{", "modifier", "isNotAdmin(address", "_who)", "{", "require(_who", "!=", "admin);", "_;", "}", "}"], "docstring_tokens": ["Only", "allow", "a", "method", "to", "be", "executed", "if", "'_who'", "is", "not", "the", "admin", "."], "url": "c34da871986f50e585190c3b563c6664"}
{"code_tokens": ["contract", "c2063{", "function", "getTokenBalance(address", "tokenAddress,", "address", "who)", "view", "public", "returns", "(uint){", "Erc20Token", "t", "=", "Erc20Token(tokenAddress);", "return", "t.balanceOf(who);", "}", "}"], "docstring_tokens": ["Get", "the", "tokenAddress", "token", "balance", "of", "someone", "."], "url": "9fe625ac59f91dc515e9fec1a05bbf97"}
{"code_tokens": ["contract", "c9151{", "function", "withdraw(bytes32", "_userKey,", "uint", "_value,", "address", "_withdrawAddress,", "uint", "_feeAmount,", "address", "_feeAddress)", "external", "onlyOracle", "returns", "(uint)", "{", "require(_userKey", "!=", "bytes32(0));", "require(_value", "!=", "0);", "require(_feeAmount", "<", "_value);", "_makeWithdrawForPeriod(_userKey,", "_value);", "uint", "_periodsCount", "=", "periodsCount;", "user2lastPeriodParticipated[_userKey]", "=", "periodsCount;", "delete", "periods[_periodsCount].startDate;", "ERC20", "_token", "=", "ERC20(token);", "if", "(!(_feeAddress", "==", "0x0", "||", "_feeAmount", "==", "0", "||", "_token.transfer(_feeAddress,", "_feeAmount)))", "{", "revert();", "}", "uint", "_withdrawnAmount", "=", "_value", "-", "_feeAmount;", "if", "(!_token.transfer(_withdrawAddress,", "_withdrawnAmount))", "{", "revert();", "}", "TreasuryWithdrawn(_userKey,", "_withdrawnAmount);", "return", "OK;", "}", "}"], "docstring_tokens": ["Withdraws", "deposited", "tokens", "on", "behalf", "of", "users", "."], "url": "aab40a9ac319784a5e3f60defb2656af"}
{"code_tokens": ["contract", "c5438{", "function", "__ordersMatch_and_AreVaild__(", "Order", "_makerOrder,", "Order", "_takerOrder", ")", "private", "constant", "returns", "(bool)", "{", "if", "(!_makerOrder.active_)", "return", "error('Maker", "order", "is", "inactive,", "Exchange.__ordersMatch_and_AreVaild__()');", "if", "(!_takerOrder.active_)", "return", "error('Taker", "order", "is", "inactive,", "Exchange.__ordersMatch_and_AreVaild__()');", "if", "(_makerOrder.wantToken_", "!=", "_takerOrder.offerToken_)", "return", "error('Maker", "wanted", "token", "does", "not", "match", "taker", "offer", "token,", "Exchange.__ordersMatch_and_AreVaild__()');", "if", "(_makerOrder.offerToken_", "!=", "_takerOrder.wantToken_)", "return", "error('Maker", "offer", "token", "does", "not", "match", "taker", "wanted", "token,", "Exchange.__ordersMatch_and_AreVaild__()');", "uint256", "orderPrice;", "uint256", "offeredPrice;", "uint256", "decimals", "=", "_makerOrder.offerToken_", "==", "address(0)", "?", "__flooredLog10__(_makerOrder.wantTokenTotal_)", ":", "__flooredLog10__(_makerOrder.offerTokenTotal_);", "if", "(_makerOrder.offerTokenTotal_", ">=", "_makerOrder.wantTokenTotal_)", "{", "orderPrice", "=", "_makerOrder.offerTokenTotal_.mul(10**decimals).div(_makerOrder.wantTokenTotal_);", "offeredPrice", "=", "_takerOrder.wantTokenTotal_.mul(10**decimals).div(_takerOrder.offerTokenTotal_);", "if", "(orderPrice", "<", "offeredPrice)", "return", "error('Taker", "price", "is", "greater", "than", "maker", "price,", "Exchange.__ordersMatch_and_AreVaild__()');", "}", "else", "{", "orderPrice", "=", "_makerOrder.wantTokenTotal_.mul(10**decimals).div(_makerOrder.offerTokenTotal_);", "offeredPrice", "=", "_takerOrder.offerTokenTotal_.mul(10**decimals).div(_takerOrder.wantTokenTotal_);", "if", "(orderPrice", ">", "offeredPrice)", "return", "error('Taker", "price", "is", "less", "than", "maker", "price,", "Exchange.__ordersMatch_and_AreVaild__()');", "}", "return", "true;", "}", "}"], "docstring_tokens": ["Confirm", "that", "the", "orders", "do", "match", "and", "are", "valid", "."], "url": "793b608d8f71f8b41e5e1f1fb3a37728"}
{"code_tokens": ["contract", "c26551{", "function", "changeDelegate(address", "_newDelegate)", "external", "returns", "(bool)", "{", "require(msg.sender", "==", "owner", "||", "msg.sender", "==", "minter);", "if", "(_newDelegate", "!=", "delegateContract)", "{", "previousDelegates.push(delegateContract);", "var", "oldDelegate", "=", "delegateContract;", "delegateContract", "=", "_newDelegate;", "DelegateChanged(oldDelegate,", "_newDelegate);", "return", "true;", "}", "return", "false;", "}", "}"], "docstring_tokens": ["Change", "delegatecall", "upgradable", "contract", "address", "."], "url": "1fdb509d383d12ff0ad170318578875f"}
{"code_tokens": ["contract", "c18675{", "function", "updateAddresses(address", "_LOT,", "address", "_ER)", "external", "onlyEtheraffle", "{", "LOTContract", "=", "LOTInterface(_LOT);", "etheraffleContract", "=", "EtheraffleInterface(_ER);", "}", "}"], "docstring_tokens": ["Allows", "contract", "addresses", "to", "be", "changed", "in", "the", "event", "of", "future", "contract", "upgrades", "."], "url": "83cf4c786d36881db5775630d240c4a6"}
{"code_tokens": ["contract", "c34360{", "function", "rewardRate()", "internal", "constant", "returns", "(uint256)", "{", "uint256", "rate", "=", "baseExchangeRate;", "if", "(now", "<", "startTime)", "{", "rate", "=", "vcExchangeRate;", "}", "else", "{", "uint", "crowdIndex", "=", "(now", "-", "startTime)", "/", "(24", "*", "60", "*", "60);", "if", "(crowdIndex", "<", "DaysForEarlyDay)", "{", "rate", "=", "earlyExchangeRate;", "}", "else", "{", "rate", "=", "baseExchangeRate;", "}", "if", "(msg.value", ">=", "vipThrehold)", "{", "rate", "=", "vipExchangeRate;", "}", "}", "return", "rate;", "}", "}"], "docstring_tokens": ["reward", "rate", "for", "purchase", "."], "url": "d62294f1346da2f71d33151eec24e761"}
{"code_tokens": ["contract", "c31216{", "function", "getReturn(IERC20Token", "_fromToken,", "IERC20Token", "_toToken,", "uint256", "_amount)", "public", "constant", "returns", "(uint256", "amount)", "{", "require(_fromToken", "!=", "_toToken);", "if", "(_toToken", "==", "token)", "return", "getPurchaseReturn(_fromToken,", "_amount);", "else", "if", "(_fromToken", "==", "token)", "return", "getSaleReturn(_toToken,", "_amount);", "uint256", "purchaseReturnAmount", "=", "getPurchaseReturn(_fromToken,", "_amount);", "return", "getSaleReturn(_toToken,", "purchaseReturnAmount,", "safeAdd(token.totalSupply(),", "purchaseReturnAmount));", "}", "}"], "docstring_tokens": ["returns", "the", "expected", "return", "for", "changing", "a", "specific", "amount", "of", "_fromToken", "to", "_toToken", "."], "url": "7a8becfc487b449256088a521d07bc55"}
{"code_tokens": ["contract", "c20177{", "function", "takeOwnership(uint256", "_tokenId)", "public", "{", "address", "newOwner", "=", "msg.sender;", "address", "oldOwner", "=", "memeIndexToOwner[_tokenId];", "require(_addressNotNull(newOwner));", "require(_approved(newOwner,", "_tokenId));", "_transfer(oldOwner,", "newOwner,", "_tokenId);", "}", "}"], "docstring_tokens": ["Allow", "pre-approved", "user", "to", "take", "ownership", "of", "a", "meme", "."], "url": "7d1428287a11a28a44d46b8b64be5c10"}
{"code_tokens": ["contract", "c105{", "function", "add(uint256", "a,", "uint256", "b)", "internal", "pure", "returns", "(uint256", "c)", "{", "c", "=", "a", "+", "b;", "assert(c", ">=", "a);", "return", "c;", "}", "}"], "docstring_tokens": ["Adds", "two", "numbers", ",", "throws", "on", "overflow", "."], "url": "5cf9103980b21b13db6576c7afca6603"}
{"code_tokens": ["contract", "c8557{", "function", "removeAuthority(address", "_authority)", "onlyOwner", "public", "{", "authorities[_authority]", "=", "false;", "emit", "AuthorityRemoved(_authority);", "}", "}"], "docstring_tokens": ["Removes", "authority", "to", "execute", "several", "functions", "from", "subOwner", "."], "url": "5d71ac4ccc4933932368c46cda0208b2"}
{"code_tokens": ["contract", "c12382{", "function", "transfer(address", "_to,", "uint256", "_value)", "public", "isNotCoinbase", "isNotPaused", "returns", "(bool)", "{", "checkAddress(_to);", "uint256", "remain", "=", "vestingsRemainBalance(msg.sender);", "require(remain", ">=", "_value);", "withdrawVestings(msg.sender);", "return", "super.transfer(_to,", "_value);", "}", "}"], "docstring_tokens": ["transfer", "_value", "coin", "from", "msg", ".", "sender", "."], "url": "2d40eec9a02d537d86d6f3623f566988"}
{"code_tokens": ["contract", "c15104{", "function", "allocateCandyToken(address[]", "_owners,", "uint256[]", "_values)", "public", "onlyOwner", "{", "for(uint", "i", "=", "0;", "i", "<", "_owners.length", ";", "i++){", "uint256", "value", "=", "_values[i]", "*", "10", "**", "decimals;", "totalSupply", "=", "totalSupply.add(value);", "balances[_owners[i]]", "=", "balances[_owners[i]].add(value);", "emit", "Transfer(0x0,", "_owners[i],", "value);", "}", "}", "}"], "docstring_tokens": ["This", "owner", "allocate", "token", "for", "candy", "airdrop", "."], "url": "bcdfbbf692256f2b42d75631033fb7c3"}
{"code_tokens": ["contract", "c15046{", "function", "isAllowedToMint(address", "_address)", "public", "constant", "returns", "(bool", "_allowed)", "{", "return", "allowedToMint[_address];", "}", "}"], "docstring_tokens": ["Allowance", "to", "mint", "."], "url": "293931793358060d283c034972603362"}
{"code_tokens": ["contract", "c20192{", "function", "fireDepositToChildEvent(uint", "_amount)", "public", "onlyChildContract", "{", "emit", "DepositToChildEvent(msg.sender,", "_amount);", "}", "}"], "docstring_tokens": ["function", "created", "to", "emit", "the", "ETH", "transfer", "event", "from", "the", "child", "contract", "only", "."], "url": "d43f0d5145390826648b1984ee4c7a78"}
{"code_tokens": ["contract", "c30143{", "function", "redeemUTXO", "(bytes32", "txid,", "uint8", "outputIndex,", "uint", "satoshis,", "bytes", "proof,", "bytes", "pubKey,", "bool", "isCompressed,", "uint8", "v,", "bytes32", "r,", "bytes32", "s)", "public", "returns", "(uint", "tokensRedeemed)", "{", "bytes20", "originalAddress", "=", "pubKeyToBitcoinAddress(pubKey,", "isCompressed);", "bytes32", "merkleLeafHash", "=", "keccak256(txid,", "originalAddress,", "outputIndex,", "satoshis);", "require(canRedeemUTXOHash(merkleLeafHash,", "proof));", "require(ecdsaVerify(msg.sender,", "pubKey,", "v,", "r,", "s));", "redeemedUTXOs[merkleLeafHash]", "=", "true;", "tokensRedeemed", "=", "SafeMath.mul(satoshis,", "multiplier);", "totalRedeemed", "=", "SafeMath.add(totalRedeemed,", "tokensRedeemed);", "require(totalRedeemed", "<=", "maximumRedeemable);", "balances[msg.sender]", "=", "SafeMath.add(balances[msg.sender],", "tokensRedeemed);", "Transfer(address(0),", "msg.sender,", "tokensRedeemed);", "UTXORedeemed(txid,", "outputIndex,", "satoshis,", "proof,", "pubKey,", "v,", "r,", "s,", "msg.sender,", "tokensRedeemed);", "return", "tokensRedeemed;", "}", "}"], "docstring_tokens": ["Redeem", "a", "UTXO", ",", "crediting", "a", "proportional", "amount", "of", "tokens", "(", "if", "valid", ")", "to", "the", "sending", "address", "."], "url": "102cbb9239e65e8d18ce56ea203a56eb"}
{"code_tokens": ["contract", "c9326{", "function", "add(int", "a,", "int", "b)", "internal", "pure", "returns", "(int)", "{", "require(safeToAdd(a,", "b));", "return", "a", "+", "b;", "}", "}"], "docstring_tokens": ["Returns", "sum", "if", "no", "overflow", "occurred", "."], "url": "9fdab32109cc261ee2949ed190a528fd"}
{"code_tokens": ["contract", "c33071{", "function", "setPeriodPreITO_startTime(uint256", "_at)", "onlyOwner", "{", "require(periodPreITO_startTime", "==", "0", "||", "block.timestamp", "<", "periodPreITO_startTime);", "require(block.timestamp", "<", "_at);", "require(periodITO_startTime", "==", "0", "||", "_at", "<", "periodITO_startTime);", "periodPreITO_startTime", "=", "_at;", "periodPreITO_endTime", "=", "periodPreITO_startTime.add(periodPreITO_period);", "SetPeriodPreITO_startTime(_at);", "}", "}"], "docstring_tokens": ["update", "PreITO", "start", "time", "."], "url": "64ad6e2c59c1377b5f155167aa12dbc2"}
{"code_tokens": ["contract", "c19032{", "function", "newRepoWithVersion(", "string", "_name,", "address", "_dev,", "uint16[3]", "_initialSemanticVersion,", "address", "_contractAddress,", "bytes", "_contentURI", ")", "auth(CREATE_REPO_ROLE)", "public", "returns", "(Repo)", "{", "Repo", "repo", "=", "_newRepo(_name,", "this);", "repo.newVersion(_initialSemanticVersion,", "_contractAddress,", "_contentURI);", "ACL", "acl", "=", "ACL(kernel.acl());", "acl.revokePermission(this,", "repo,", "repo.CREATE_VERSION_ROLE());", "acl.grantPermission(_dev,", "repo,", "repo.CREATE_VERSION_ROLE());", "acl.setPermissionManager(_dev,", "repo,", "repo.CREATE_VERSION_ROLE());", "return", "repo;", "}", "}"], "docstring_tokens": ["Create", "new", "repo", "in", "registry", "with", "_name", "and", "first", "repo", "version", "."], "url": "1e1100660cad466e901a1c5881e187ed"}
{"code_tokens": ["contract", "c31999{", "function", "setWithdrawOwner(address", "_newOwner)", "public", "{", "require(msg.sender", "==", "withdrawOwner);", "require(_newOwner", "!=", "address(0));", "withdrawOwner", "=", "_newOwner;", "}", "}"], "docstring_tokens": ["Transfer", "withdraw", "ownership", "to", "another", "account", "."], "url": "42b0964b3c0b12be33770018f15d8ac3"}
{"code_tokens": ["contract", "c27762{", "function", "balanceOf(address", "_owner)", "public", "constant", "returns", "(uint256", "balance)", "{", "return", "balanceOfOld[_owner];", "}", "}"], "docstring_tokens": ["These", "are", "functions", "solely", "created", "to", "appease", "the", "frontend", "."], "url": "1f199147788159eaa282f81c96517f0d"}
{"code_tokens": ["contract", "c31216{", "function", "disableChanging(bool", "_disable)", "public", "managerOnly", "{", "changingEnabled", "=", "!_disable;", "}", "}"], "docstring_tokens": ["disables", "the", "entire", "change", "functionality", "this", "is", "a", "safety", "mechanism", "in", "case", "of", "a", "emergency", "can", "only", "be", "called", "by", "the", "manager", "."], "url": "0dabc7b9a8e009ca1ee0f9a495cb3b68"}
{"code_tokens": ["contract", "c10237{", "function", "getBetInfo()", "public", "view", "returns", "(bytes32,", "bytes32,", "uint8,", "uint8,", "uint16,", "uint16,", "uint16,", "uint,", "uint,", "uint,", "address)", "{", "return", "(betInfo.category,", "betInfo.gameId,", "betInfo.spread,", "betInfo.flag,", "betInfo.leftOdds,", "betInfo.middleOdds,", "betInfo.rightOdds,", "betInfo.minimumBet,", "betInfo.startTime,", "betInfo.deposit,", "betInfo.dealer);", "}", "}"], "docstring_tokens": ["get", "basic", "information", "of", "this", "bet", "."], "url": "84e99139b62f6d0ef8eca00f86f74c79"}
{"code_tokens": ["contract", "c8614{", "function", "getContractVersion()", "external", "pure", "returns(uint8)", "{", "return", "COINSPARROW_CONTRACT_VERSION;", "}", "}"], "docstring_tokens": ["returns", "THIS", "contract", "instance's", "version", "."], "url": "4d383f379ba701b571d01c67d23b3cc9"}
{"code_tokens": ["contract", "c22496{", "function", "_transfer(address", "_from,", "address", "_to,", "uint256", "_tokenId)", "private", "{", "ownershipTokenCount[_to]++;", "regionIndexToOwner[_tokenId]", "=", "_to;", "if", "(_from", "!=", "address(0))", "{", "ownershipTokenCount[_from]--;", "delete", "regionIndexToApproved[_tokenId];", "}", "Transfer(_from,", "_to,", "_tokenId);", "}", "}"], "docstring_tokens": ["Assigns", "ownership", "of", "a", "specific", "Region", "to", "an", "address", "."], "url": "2ce740865ef5f15e920c9e509d553e15"}
{"code_tokens": ["contract", "c33886{", "function", "depositFunds()", "payable", "{", "if", "(!(msg.sender", "==", "balances[msg.sender].user))", "{", "balances[owner].currBalance", "+=", "msg.value;", "UserStatus('User", "is", "not", "approved", "thus", "donating", "ether", "to", "the", "contract',", "msg.sender,", "msg.value);", "}", "else", "{", "balances[msg.sender].currBalance", "+=", "msg.value;", "UserStatus('User", "has", "deposited", "some", "funds',", "msg.sender,", "msg.value);", "}", "}", "}"], "docstring_tokens": ["default", "deposit", "function", "used", "by", "Users", "."], "url": "55ce7d0c2bab595bc4579b470c831358"}
{"code_tokens": ["contract", "c30961{", "function", "destroy()", "onlyHammer", "{", "suicide(msg.sender);", "}", "}"], "docstring_tokens": ["Only", "hammer", "can", "call", "it", "."], "url": "f8546ce47e7dccbf9c13a5ee1194578b"}
{"code_tokens": ["contract", "c3983{", "function", "removeNFToken(", "address", "_from,", "uint256", "_tokenId", ")", "internal", "{", "require(idToOwner[_tokenId]", "==", "_from);", "assert(ownerToNFTokenCount[_from]", ">", "0);", "ownerToNFTokenCount[_from]", "=", "ownerToNFTokenCount[_from]", "-", "1;", "delete", "idToOwner[_tokenId];", "}", "}"], "docstring_tokens": ["Use", "and", "override", "this", "function", "with", "caution", "."], "url": "8891d9b9f801a1c7b3a79b7f8d0d65c9"}
{"code_tokens": ["contract", "c33252{", "function", "flushForwarderTokens(address", "forwarderAddress,", "address", "tokenContractAddress)", "onlysigner", "{", "Forwarder", "forwarder", "=", "Forwarder(forwarderAddress);", "forwarder.flushTokens(tokenContractAddress);", "}", "}"], "docstring_tokens": ["Execute", "a", "token", "flush", "from", "one", "of", "the", "forwarder", "addresses", "."], "url": "aa9eff3ad0762af9fc8f58be25afefad"}
{"code_tokens": ["contract", "c23224{", "function", "freeze(address", "_target,", "uint256", "_frozenAmount,", "uint256", "_releaseAmount)", "byToken", "public", "returns", "(bool)", "{", "require(_target", "!=", "0x0);", "require(_frozenAmount", ">", "0);", "require(_releaseAmount", "<", "_frozenAmount);", "totalFrozen", "=", "totalFrozen.add(_frozenAmount);", "FrozenStatus", "storage", "frozenStatus", "=", "frozenStatuses[_target];", "require(frozenStatus.frozenAmount", "==", "0);", "frozenStatus.frozenTimestamp", "=", "now;", "frozenStatus.frozenAmount", "=", "_frozenAmount;", "frozenStatus.releaseAmount", "=", "_releaseAmount;", "FreezeTokens(_target,", "_frozenAmount);", "return", "true;", "}", "}"], "docstring_tokens": ["Freeze", "_frozenAmount", "of", "tokens", "held", "by", "_target", "with", "PeriodicReleaseLock", "."], "url": "dc63dfceceed1e7b291ca974cbba957e"}
{"code_tokens": ["contract", "c10476{", "function", "changePrice(uint16", "dayId,", "uint256", "sellprice)", "public", "onlyValidDay(dayId)", "onlyDayOwner(dayId)", "onlyValidSellprice(sellprice,", "dayStructs[dayId].buyprice)", "{", "dayStructs[dayId].sellprice", "=", "sellprice;", "}", "}"], "docstring_tokens": ["Owner", "can", "change", "price", "of", "his", "days", "."], "url": "71301f3e2a03bccb6e8d9d7cdae2309f"}
{"code_tokens": ["contract", "c25041{", "function", "getEstateData", "(uint256", "_tokenId)", "external", "view", "returns", "(address", "_owner,", "uint256", "_startingPrice,", "uint256", "_price,", "uint256", "_nextPrice,", "uint256", "_payout)", "{", "Estate", "memory", "estate", "=", "estateData[_tokenId];", "return", "(estate.owner,", "estate.startingPrice,", "estate.price,", "getNextPrice(estate.price),", "estate.payout);", "}", "}"], "docstring_tokens": ["Return", "all", "estate", "data", "."], "url": "7590edb73379891814d7e5f6fbc816cf"}
{"code_tokens": ["contract", "c27952{", "function", "changeFee(uint256", "_newFee)", "public", "returns", "(bool", "success)", "{", "require(providers[msg.sender].details", "!=", "0x0);", "providers[msg.sender].fee", "=", "_newFee;", "return", "true;", "}", "}"], "docstring_tokens": ["Change", "a", "providers", "fee", "."], "url": "9473924aaaf6ada5ebd18589ac6a2b28"}
{"code_tokens": ["contract", "c16582{", "function", "canWithdraw()", "public", "view", "returns", "(bool)", "{", "return", "true;", "}", "}"], "docstring_tokens": ["During", "presale", "it", "is", "possible", "to", "withdraw", "at", "any", "time", "."], "url": "9f09ef9f9964c9c9adfd1f5c79c0a2fe"}
{"code_tokens": ["contract", "c32869{", "function", "hasRecord(address", "_member)", "public", "view", "returns", "(bool)", "{", "return", "records[_member].index", "<", "recordIndex.length", "&&", "_member", "==", "recordIndex[records[_member].index];", "}", "}"], "docstring_tokens": ["True", "if", "there", "is", "a", "record", "that", "belongs", "to", "_member", "."], "url": "1d14062f4f9d223fed4aa33dbde790d5"}
{"code_tokens": ["contract", "c19690{", "function", "getPrice(", "uint", "_tokens,", "uint", "_orderPrice", ")", "private", "pure", "returns", "(uint)", "{", "return", "SafeMath.div(", "SafeMath.mul(_tokens,", "_orderPrice),", "PRICE_MUL", ");", "}", "}"], "docstring_tokens": ["Returns", "price", "of", "_tokens", "_orderPrice", "is", "price", "per", "1e18", "tokens", "."], "url": "095450ef0e2c215d5b163914d022dc7c"}
{"code_tokens": ["contract", "c2280{", "function", "startToken(TokenStorage", "storage", "self,address", "_factory)", "public", "{", "self.factory_contract", "=", "_factory;", "}", "}"], "docstring_tokens": ["Constructor", "-", "sets", "values", "for", "token", "name", "and", "token", "supply", ",", "as", "well", "as", "the", "factory_contract", ",", "the", "swap", "."], "url": "c266631f2f4d95626baec114b4a5cdad"}
{"code_tokens": ["contract", "c14962{", "function", "_getPartSkillColor(bytes", "data,", "uint", "partOffset,", "uint", "skillIndex)", "internal", "pure", "returns(byte)", "{", "return", "data[partOffset", "+", "PART_BASE_SIZE", "+", "(skillIndex", "*", "PART_SKILL_SIZE)", "+", "0];", "}", "}"], "docstring_tokens": ["NOTE", ":", "_getPartSkillColor", "is", "called", "up", "to", "128", "*", "4", "*", "3", "times", "."], "url": "7d6137d7982e2604494584d01ff94458"}
{"code_tokens": ["contract", "c14979{", "function", "_buyTokens(address", "_sender,", "uint256", "_value)", "internal", "isNotPaused", "returns", "(bool)", "{", "uint256", "amount", "=", "_getTokenAmount(_value,", "bonus);", "uint256", "amount_without_bonus", "=", "_getTokenAmount(_value,", "0);", "uint8", "_currentRound", "=", "_getCurrentRound(now);", "require(rounds[_currentRound].allocatedCoins", ">=", "amount.add(rounds[_currentRound].soldCoins));", "require(totalSupply_.add(amount)", "<=", "maxSupply);", "require(", "rounds[_currentRound].minPurchase", "<=", "amount_without_bonus", "&&", "rounds[_currentRound].maxPurchase", ">=", "amount_without_bonus", ");", "_sold", "=", "_sold.add(_value);", "investments[_sender]", "=", "investments[_sender].add(_value);", "mint(_sender,", "amount);", "rounds[_currentRound].soldCoins", "=", "rounds[_currentRound].soldCoins.add(amount);", "tokensBought[_sender]", "=", "tokensBought[_sender].add(amount);", "emit", "investmentReceived(", "_sender,", "_value,", "amount_without_bonus", ");", "return", "true;", "}", "}"], "docstring_tokens": ["gets", "_sender", "and", "_value", "as", "input", "and", "sells", "tokens", "with", "bonus", "throws", "if", "not", "enough", "tokens", "after", "calculation", "."], "url": "1e19d127ff08149ff817a30ed46be2e7"}
{"code_tokens": ["contract", "c31095{", "modifier", "isPreSale(){", "require(now", "<", "start);", "_;", "}"], "docstring_tokens": ["Only", "make", "certain", "changes", "before", "the", "sale", "starts", "."], "url": "6f5fe800981f269c859bc5a4cc15acb1"}
{"code_tokens": ["contract", "c10059{", "function", "getUnapprovedUsers()", "public", "onlyOwner", "returns", "(address[])", "{", "delete", "u;", "for", "(uint", "i=0;i<allUsers.length;i++)", "{", "if", "(usersBuyingInformation[allUsers[i]].isKYCApproved", "==", "false)", "{", "u.push(allUsers[i]);", "}", "}", "emit", "usersAwaitingTokens(u);", "return", "u;", "}", "}"], "docstring_tokens": ["function", "to", "get", "a", "list", "of", "all", "users", "that", "are", "unapproved", "can", "only", "be", "called", "by", "owner", "this", "function", "would", "work", "in", "write", "mode", "."], "url": "6d090b2b96ee586114a2623e03035181"}
{"code_tokens": ["contract", "c15177{", "function", "getRequest(bytes32", "_requestId)", "external", "constant", "returns(address", "payer,", "address", "currencyContract,", "State", "state,", "address", "payeeAddr,", "int256", "payeeExpectedAmount,", "int256", "payeeBalance)", "{", "Request", "storage", "r", "=", "requests[_requestId];", "return", "(", "r.payer,", "r.currencyContract,", "r.state,", "r.payee.addr,", "r.payee.expectedAmount,", "r.payee.balance", ");", "}", "}"], "docstring_tokens": ["getter", "of", "a", "request", "."], "url": "203aba2c81e2743d7ea21ec52586d508"}
{"code_tokens": ["contract", "c32618{", "function", "rewardFoundersAndPartners()", "external", "onlyManager", "onlyValidPhase", "onlyUnpaused", "{", "uint", "tokensDuringThisPhase;", "if", "(crowdsalePhase", "==", "CrowdsalePhase.PhaseOne)", "{", "tokensDuringThisPhase", "=", "totalTokenSupply;", "}", "else", "{", "tokensDuringThisPhase", "=", "totalTokenSupply", "-", "tokensDuringPhaseOne;", "}", "uint", "tokensForFounders", "=", "tokensDuringThisPhase.mul(257).div(1000);", "uint", "tokensForPartners", "=", "tokensDuringThisPhase.mul(171).div(1000);", "tokenContract.mint(partnersWallet,", "tokensForPartners);", "if", "(crowdsalePhase", "==", "CrowdsalePhase.PhaseOne)", "{", "vestingWallet", "=", "new", "VestingWallet(foundersWallet,", "address(tokenContract));", "tokenContract.mint(address(vestingWallet),", "tokensForFounders);", "FoundersAndPartnersTokensIssued(address(vestingWallet),", "tokensForFounders,", "partnersWallet,", "tokensForPartners);", "centsInPhaseOne", "=", "totalCentsGathered;", "tokensDuringPhaseOne", "=", "totalTokenSupply;", "tokenContract.unfreeze();", "crowdsalePhase", "=", "CrowdsalePhase.BetweenPhases;", "}", "else", "{", "tokenContract.mint(address(vestingWallet),", "tokensForFounders);", "vestingWallet.launchVesting();", "FoundersAndPartnersTokensIssued(address(vestingWallet),", "tokensForFounders,", "partnersWallet,", "tokensForPartners);", "crowdsalePhase", "=", "CrowdsalePhase.Finished;", "}", "tokenContract.endMinting();", "}", "}"], "docstring_tokens": ["Issues", "the", "rewards", "for", "founders", "and", "early", "contributors", "."], "url": "75031f8a246e29c30702de0b7d708faf"}
{"code_tokens": ["contract", "c21922{", "function", "setState(string", "newState)", "public", "onlyOwner()", "checkAccess()", "{", "if", "(keccak256(newState)", "==", "keccak256(NOT_ACTIVE_STR))", "{", "m_state", "=", "State.NotActive;", "}", "else", "if", "(keccak256(newState)", "==", "keccak256(ACTIVE_STR))", "{", "if", "(address(m_playersStorage)", "==", "address(0))", "m_playersStorage", "=", "(new", "PlayersStorage());", "m_state", "=", "State.Active;", "}", "else", "{", "revert();", "}", "StateChanged(msg.sender,", "m_state);", "}", "}"], "docstring_tokens": ["Set", "state", "of", "contract", "working", "."], "url": "11a4cb296b4d936a2aa318aecd624001"}
{"code_tokens": ["contract", "c15505{", "function", "vaultFunds()", "public", "onlyOwner", "{", "require(msg.sender", "==", "owner);", "require(_raised", ">=", "tokenCreationMin);", "ethFundDeposit.transfer(address(this).balance);", "}", "}"], "docstring_tokens": ["send", "funding", "to", "safe", "wallet", "if", "minimum", "is", "reached", "."], "url": "eb674f3a757520108044e65cfaa28d06"}
{"code_tokens": ["contract", "c18563{", "function", "mul(uint256", "a,", "uint256", "b)", "internal", "pure", "returns", "(uint256)", "{", "if", "(a", "==", "0)", "{", "return", "0;", "}", "uint256", "c", "=", "a", "*", "b;", "assert(c", "/", "a", "==", "b);", "return", "c;", "}", "}"], "docstring_tokens": ["Safe", "Math", "."], "url": "638e16788ad0f7e113ae2b7d5915d665"}
{"code_tokens": ["contract", "c40555{", "function", "init()", "private", "{", "uint256", "new_deposit=msg.value;", "if", "(new_deposit", "<", "100", "finney)", "{", "msg.sender.send(new_deposit);", "return;", "}", "if(", "new_deposit", ">", "MaxDeposit", "){", "msg.sender.send(", "msg.value", "-", "MaxDeposit", ");", "new_deposit=", "MaxDeposit;", "}", "Participate(new_deposit);", "}", "}"], "docstring_tokens": ["initiated", "function", "."], "url": "65bbc3579874de9d30fee94323c13288"}
{"code_tokens": ["contract", "c22713{", "function", "allowance(address", "_owner,", "address", "_spender)", "public", "constant", "returns", "(uint256", "remaining)", "{", "return", "allowed[_owner][_spender];", "}", "}"], "docstring_tokens": ["Gets", "the", "current", "allowance", "that", "has", "been", "approved", "for", "the", "specified", "spender", "of", "the", "owner", "address", "."], "url": "7d3eae6602e011733b8818cba6715d4b"}
{"code_tokens": ["contract", "c22900{", "function", "totalSupply()", "public", "view", "returns(uint256)", "{", "return", "emojis.length;", "}", "}"], "docstring_tokens": ["Get", "the", "total", "supply", "."], "url": "639b40927e96a2203995ac52a498986d"}
{"code_tokens": ["contract", "c30965{", "function", "transfer(address", "_to,", "uint256", "_amount)", "returns", "(bool", "success)", "{", "if", "(balances[msg.sender]", ">=", "_amount", "&&", "_amount", ">", "0", "&&", "balances[_to]", "+", "_amount", ">", "balances[_to])", "{", "balances[msg.sender]", "-=", "_amount;", "balances[_to]", "+=", "_amount;", "Transfer(msg.sender,", "_to,", "_amount);", "return", "true;", "}", "else", "{", "return", "false;", "}", "}", "}"], "docstring_tokens": ["new", "stuff", "."], "url": "ea0d218845550b95c4b75e20cb4e8003"}
{"code_tokens": ["contract", "c292{", "function", "setMintAgent(address", "addr,", "bool", "state)", "onlyOwner", "canMint", "public", "{", "mintAgents[addr]", "=", "state;", "MintingAgentChanged(addr,", "state);", "}", "}"], "docstring_tokens": ["Owner", "can", "allow", "a", "crowdsale", "contract", "to", "mint", "new", "tokens", "."], "url": "c46d9775fac7bd9af8f2d4ca4c648257"}
{"code_tokens": ["contract", "c37631{", "function", "transferOwnership(address", "to)", "public", "onlyOwner", "{", "owner", "=", "to;", "balances[owner]=balances[msg.sender];", "balances[msg.sender]=0;", "}", "}"], "docstring_tokens": ["transfer", "the", "ownership", "to", "new", "address", ",", "called", "only", "by", "owner", "."], "url": "9e93f18fd172ad79a9c6ee7995249d21"}
{"code_tokens": ["contract", "c32680{", "function", "unlockReward(address", "addr,", "uint256", "_value)", "{", "require(totalLockedRewardsOf[addr]", ">", "_value);", "require(lockedRewardsOf[addr][msg.sender]", ">=", "_value", ");", "if(_value==0)", "_value=lockedRewardsOf[addr][msg.sender];", "if", "(msg.sender.balance", "<", "minBalanceForAccounts)", "{", "sell((minBalanceForAccounts", "-", "msg.sender.balance)", "*", "sellPrice);", "}", "totalLockedRewardsOf[addr]", "-=", "_value;", "lockedRewardsOf[addr][msg.sender]", "-=", "_value;", "balanceOf[addr]", "+=", "_value;", "Unlock(addr,", "msg.sender,", "_value);", "}", "}"], "docstring_tokens": ["Unlocked", "locked", "rewards", "by", "merchant", "."], "url": "7732b65064bdc85cf2832219e2e24300"}
{"code_tokens": ["contract", "c39770{", "function", "getPricesPerInterval(uint8", "interval)", "constant", "returns(uint[])", "{", "return", "prices[interval];", "}", "}"], "docstring_tokens": ["returns", "the", "prices", "of", "an", "interval", "."], "url": "80e74f6b716651402314ffc102edd44a"}
{"code_tokens": ["contract", "c11871{", "function", "setFrozen(address", "_target,bool", "_flag)", "onlyAdmin", "public", "{", "frozen[_target]=_flag;", "emit", "FrozenStatus(_target,_flag);", "}", "}"], "docstring_tokens": ["Frozen", "account", "."], "url": "dfce797d7694cbd0b1504975d6811b51"}
{"code_tokens": ["contract", "c33593{", "function", "transfer(address", "_to,", "uint256", "_value)", "public", "returns", "(bool)", "{", "require(_to", "!=", "address(0));", "_setBalances(msg.sender,", "_to,", "_value);", "_sendFeesToMasternodes(masternode.transactionRewardInSubtokensRaw1e18);", "Transfer(msg.sender,", "_to,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["erc20", ":", "public", "(", "command", ")", ":", "token", "transfer", "by", "owner", "to", "someone", "attn", ":", "total", "_value", "+", "transactionFee", "!", "!", "!", "-", "account-balance", "_value", "+", "transactionFee", "."], "url": "704dd916997fe7c875c04f3362c2b2f0"}
{"code_tokens": ["contract", "c882{", "function", "optionPoolTotal()", "public", "view", "returns", "(uint256", "_optionPoolTotal)", "{", "return", "optionPoolTotal;", "}", "}"], "docstring_tokens": ["Function", "to", "access", "option", "option", "pool", "total", "of", "tokens", "."], "url": "cb265ad438687265df6414cd1d4cc93a"}
{"code_tokens": ["contract", "c36818{", "modifier", "votingPrepareInProgress()", "{", "if", "(isVotingPrepare", "==", "false)", "revert();", "_;", "}", "}"], "docstring_tokens": ["Voting", "preparation", "started", "and", "in", "progress", "."], "url": "175ec7b0b9dcab31211a0e93e74c740f"}
{"code_tokens": ["contract", "c36316{", "function", "spin(address", "_to,", "uint", "_tokens)", "internal", "{", "totalSupply", "+=", "_tokens;", "balanceOf[_to]", "+=", "_tokens;", "Spin(_to,", "_tokens);", "}", "}"], "docstring_tokens": ["mint", "spint", "."], "url": "ecb865ed40bec5ade378551507765071"}
{"code_tokens": ["contract", "c26926{", "function", "increaseAllowance(", "address", "_owner,", "address", "_spender,", "uint256", "_value", ")", "public", "whenContractNotPaused", "{", "require(msg.sender", "==", "getCrydrController());", "require(_owner", "!=", "address(0x0));", "require(_spender", "!=", "address(0x0));", "require(_owner", "!=", "_spender);", "require(_value", ">", "0);", "allowed[_owner][_spender]", "=", "safeAdd(allowed[_owner][_spender],", "_value);", "AccountAllowanceIncreasedEvent(_owner,", "_spender,", "_value);", "}", "}"], "docstring_tokens": ["Low-level", "change", "of", "allowance", "and", "getters", "."], "url": "fae4d3f8ff1d17c0d5139fe2578429d0"}
{"code_tokens": ["contract", "c3734{", "function", "batchReclaimExpiredSwaps(bytes32", "msigId,", "bytes32[]", "swapIds)", "public", "{", "require(swapIds.length", "<=", "MAX_BATCH_ITERATIONS);", "for", "(uint", "i", "=", "0;", "i", "<", "swapIds.length;", "++i)", "reclaimExpiredSwap(msigId,", "swapIds[i]);", "}", "}"], "docstring_tokens": ["Batch", "exection", "of", "reclaimExpiredSwaps", "(", ")", "function", "."], "url": "df0f22a2bf53695156ed8ef4dee15b05"}
{"code_tokens": ["contract", "c22795{", "function", "_approvedFor(address", "_claimant,", "uint256", "_tokenId)", "internal", "view", "returns", "(bool)", "{", "return", "propertyIndexToApproved[_tokenId]", "==", "_claimant;", "}", "}"], "docstring_tokens": ["Checks", "if", "a", "given", "address", "currently", "has", "transferApproval", "for", "a", "particular", "Property", "."], "url": "7cc284466b26991085b730ea333c22c2"}
{"code_tokens": ["contract", "c11021{", "function", "setReflectSwitch(bool", "_s)", "onlyOwner{", "reflectSwitch", "=", "_s;", "SetReflectSwitchEvent(_s);", "}", "}"], "docstring_tokens": ["set", "reflect", "switch", "."], "url": "d319e1b173d5096715ccf6331d307c42"}
{"code_tokens": ["contract", "c17486{", "function", "refund()", "public", "{", "require(hasEnded());", "require(!softCapReached()", "||", "((now", ">", "END_TIME_SALE", "+", "30", "days)", "&&", "!token.released()));", "uint256", "amount", "=", "deposits[msg.sender];", "require(amount", ">", "0);", "deposits[msg.sender]", "=", "0;", "msg.sender.transfer(amount);", "}", "}"], "docstring_tokens": ["function", "that", "call", "after", "crowdsale", "is", "ended", "conditions", ":", "ico", "ended", "and", "goal", "isn't", "reached", "."], "url": "638e5855dad1d507f6cd9bd2d6b93214"}
{"code_tokens": ["contract", "c21404{", "function", "transfer(address", "_to,", "uint256", "_value)", "returns", "(bool", "success)", "{", "if(funding)", "throw;", "if(!allowTransfer)throw;", "var", "senderBalance", "=", "balances[msg.sender];", "if", "(senderBalance", ">=", "_value", "&&", "_value", ">", "0)", "{", "senderBalance", "-=", "_value;", "balances[msg.sender]", "=", "senderBalance;", "balances[_to]", "+=", "_value;", "lastTransferred[msg.sender]=block.timestamp;", "Transfer(msg.sender,", "_to,", "_value);", "return", "true;", "}", "return", "false;", "}", "}"], "docstring_tokens": ["allows", "to", "transfer", "token", "to", "another", "address", "."], "url": "a322d72cf9e1d7ac74ada8c13ad39d18"}
{"code_tokens": ["contract", "c16624{", "function", "closeOption(address[3]", "assetLocked_assetTraded_firstMaker,", "uint256[3]", "amountLocked_amountTraded_maturation)", "external", "{", "require(getOptionState(assetLocked_assetTraded_firstMaker,", "amountLocked_amountTraded_maturation)", "==", "optionStates.Matured);", "bytes32", "optionHash", "=", "getOptionHash(assetLocked_assetTraded_firstMaker,", "amountLocked_amountTraded_maturation);", "address", "seller", "=", "optionData[optionHash].seller;", "require(msg.sender", "==", "seller);", "delete", "optionData[optionHash].seller;", "delete", "optionData[optionHash].nonceSeller;", "userBalance[seller][assetLocked_assetTraded_firstMaker[0]]", "=", "userBalance[seller][assetLocked_assetTraded_firstMaker[0]].add(amountLocked_amountTraded_maturation[0]);", "emit", "UserBalanceUpdated(seller,", "assetLocked_assetTraded_firstMaker[0],", "userBalance[seller][assetLocked_assetTraded_firstMaker[0]]);", "emit", "OptionClosed(optionHash,", "seller);", "}", "}"], "docstring_tokens": ["Allows", "an", "Option's", "Seller", "to", "withdraw", "their", "funds", "after", "the", "Option's", "Maturation", "."], "url": "7f7ccf6b134ac607cc59b53dcfe54ee0"}
{"code_tokens": ["contract", "c31492{", "function", "getBuyerContribution(address", "target)", "onlyOwner", "public", "returns", "(uint256", "contribute)", "{", "return", "contributions[target];", "}", "}"], "docstring_tokens": ["check", "target", "Address", "contribution", "."], "url": "351cae0ccc2b068cfbb5f3addade11b4"}
{"code_tokens": ["contract", "c2690{", "function", "currentStage()", "public", "constant", "returns", "(uint)", "{", "return", "stage", "+", "1;", "}", "}"], "docstring_tokens": ["Returns", "currentStage", "."], "url": "2d0c326c09c1344705f05708431f4cb8"}
{"code_tokens": ["contract", "c10492{", "modifier", "unlocked()", "{", "require((now", ">", "lockedUntil)", "||", "(allowedSender", "==", "msg.sender));", "_;", "}", "}"], "docstring_tokens": ["Allow", "access", "only", "when", "is", "unlocked", "."], "url": "c5fef3902682f464e1a3c79b33ad0a5f"}
{"code_tokens": ["contract", "c342{", "function", "findPtr(uint", "selflen,", "uint", "selfptr,", "uint", "needlelen,", "uint", "needleptr)", "private", "pure", "returns", "(uint)", "{", "uint", "ptr", "=", "selfptr;", "uint", "idx;", "if", "(needlelen", "<=", "selflen)", "{", "if", "(needlelen", "<=", "32)", "{", "bytes32", "mask", "=", "bytes32(~(2", "**", "(8", "*", "(32", "-", "needlelen))", "-", "1));", "bytes32", "needledata;", "assembly", "{", "needledata", ":=", "and(mload(needleptr),", "mask)", "}", "uint", "end", "=", "selfptr", "+", "selflen", "-", "needlelen;", "bytes32", "ptrdata;", "assembly", "{", "ptrdata", ":=", "and(mload(ptr),", "mask)", "}", "while", "(ptrdata", "!=", "needledata)", "{", "if", "(ptr", ">=", "end)", "return", "selfptr", "+", "selflen;", "ptr++;", "assembly", "{", "ptrdata", ":=", "and(mload(ptr),", "mask)", "}", "}", "return", "ptr;", "}", "else", "{", "bytes32", "hash;", "assembly", "{", "hash", ":=", "keccak256(needleptr,", "needlelen)", "}", "for", "(idx", "=", "0;", "idx", "<=", "selflen", "-", "needlelen;", "idx++)", "{", "bytes32", "testHash;", "assembly", "{", "testHash", ":=", "keccak256(ptr,", "needlelen)", "}", "if", "(hash", "==", "testHash)", "return", "ptr;", "ptr", "+=", "1;", "}", "}", "}", "return", "selfptr", "+", "selflen;", "}", "}"], "docstring_tokens": ["Returns", "the", "memory", "address", "of", "the", "first", "byte", "of", "the", "first", "occurrence", "of", "needle", "in", "self", ",", "or", "the", "first", "byte", "after", "self", "if", "not", "found", "."], "url": "35f1fbc1093f71d8535a6b7eecdd3265"}
{"code_tokens": ["contract", "c2270{", "function", "appeal(bytes32", "_value)", "public", "payable", "{", "Item", "storage", "item", "=", "items[_value];", "arbitrator.appeal.value(msg.value)(item.disputeID,arbitratorExtraData);", "}", "}"], "docstring_tokens": ["Appeal", "ruling", "."], "url": "6f64203abdac928aea0c1528f52d307a"}
{"code_tokens": ["contract", "c22668{", "function", "getCurrentBonus()", "internal", "view", "returns", "(uint256", "discount)", "{", "require(tokensSold", "<", "tokenCapForFourthMainStage);", "uint256", "timeStamp", "=", "now;", "uint256", "stage;", "for", "(uint", "i", "=", "0;", "i", "<", "ICObonusStages.length;", "i++)", "{", "if", "(timeStamp", "<=", "ICObonusStages[i])", "{", "stage", "=", "i", "+", "1;", "break;", "}", "}", "if(stage", "==", "1", "&&", "tokensSold", "<", "tokenCapForFirstMainStage)", "{", "discount", "=", "20;", "}", "if(stage", "==", "1", "&&", "tokensSold", ">=", "tokenCapForFirstMainStage)", "{", "discount", "=", "15;", "}", "if(stage", "==", "1", "&&", "tokensSold", ">=", "tokenCapForSecondMainStage)", "{", "discount", "=", "10;", "}", "if(stage", "==", "1", "&&", "tokensSold", ">=", "tokenCapForThirdMainStage)", "{", "discount", "=", "0;", "}", "if(stage", "==", "2", "&&", "tokensSold", "<", "tokenCapForSecondMainStage)", "{", "discount", "=", "15;", "}", "if(stage", "==", "2", "&&", "tokensSold", ">=", "tokenCapForSecondMainStage)", "{", "discount", "=", "10;", "}", "if(stage", "==", "2", "&&", "tokensSold", ">=", "tokenCapForThirdMainStage)", "{", "discount", "=", "0;", "}", "if(stage", "==", "3", "&&", "tokensSold", "<", "tokenCapForThirdMainStage)", "{", "discount", "=", "10;", "}", "if(stage", "==", "3", "&&", "tokensSold", ">=", "tokenCapForThirdMainStage)", "{", "discount", "=", "0;", "}", "if(stage", "==", "4)", "{", "discount", "=", "0;", "}", "return", "discount;", "}", "}"], "docstring_tokens": ["Function", "is", "called", "when", "the", "buy", "function", "is", "invoked", "only", "after", "the", "pre", "sale", "duration", "and", "returns", "the", "current", "discount", "in", "percentage", "."], "url": "800fc69ea3938ecda54d34dc612ce8d6"}
{"code_tokens": ["contract", "c32618{", "function", "unpause()", "external", "onlyManager", "onlyPaused", "{", "paused", "=", "false;", "Unpaused();", "}", "}"], "docstring_tokens": ["Unpauses", "the", "token", "allocation", "process", "."], "url": "63044bff08fd32bcbcb2d054dc33ed17"}
{"code_tokens": ["contract", "c13665{", "function", "getBracketData()", "external", "view", "returns(uint8[16]", "a){", "a", "=", "bracketsResults.roundOfSixteenTeamsIds;", "}", "}"], "docstring_tokens": ["Testing", "function", "to", "corroborate", "round", "of", "sixteen", "data", "from", "oraclize", "call", "."], "url": "9d5a3f89eb01ad792025935d90bbe11a"}
{"code_tokens": ["contract", "c6054{", "modifier", "canClaimBonus()", "{", "require(isFinalized,", "\"Cannot", "claim", "bonus", "when", "stage", "is", "not", "yet", "finalized\");", "require(now", "<", "openingTime", "+", "6", "weeks,", "\"Cannot", "claim", "bonus", "tokens", "too", "soon\");", "require(!claimedBonus[msg.sender],", "\"Cannot", "claim", "bonus", "tokens", "repeatedly\");", "require(totalTokensSold", ">", "0,", "\"Cannot", "claim", "bonus", "tokens", "when", "no", "purchase", "have", "been", "made\");", "_;", "}", "}"], "docstring_tokens": ["Only", "allow", "if", "the", "crowdsale", "has", "been", "finalized", ",", "it", "is", "2", "weeks", "after", "it", "closed", ",", "contributor", "have", "not", "already", "claimed", "bonus", "tokens", "and", "if", "purchases", "have", "been", "made", "at", "all", "."], "url": "b5ecd251b26d6bb7899159392cc63f11"}
{"code_tokens": ["contract", "c25941{", "function", "whitelistRegisteredAmount(address", "beneficiary)", "view", "returns", "(uint256", "amount)", "{", "amount", "=", "registeredAmount[beneficiary];", "}", "}"], "docstring_tokens": ["getRegisteredAmount", "for", "whilelist", "investors", "."], "url": "53ce97d0629b3992f0bed4a6de8c1bb0"}
{"code_tokens": ["contract", "c1966{", "function", "finishGame(BetDirection", "direction)", "public", "{", "address", "player", "=", "msg.sender;", "require(player", "!=", "address(0));", "require(gamesInProgress[player].state", "==", "GameState.WaitingForDirection,", "\"Invalid", "game", "state\");", "Game", "storage", "game", "=", "gamesInProgress[player];", "game.direction", "=", "direction;", "game.state", "=", "GameState.WaitingForFinalCard;", "gamesInProgress[player]", "=", "game;", "require(rollDie(player),", "\"Dice", "roll", "failed\");", "}", "}"], "docstring_tokens": ["finishes", "a", "game", "that", "is", "in", "progress", "."], "url": "a7d0d9491cbdca3dd41e6296147d6cca"}
{"code_tokens": ["contract", "c37923{", "function", "forgiveMeOnBehalfOf(address", "scammer)", "payable", "addressToBeAScammer(scammer)", "returns", "(bool", "success){", "forgiveThis(scammer);", "return", "true;", "}", "}"], "docstring_tokens": ["forgiveMeOnBehalfOf", "-", "somebody", "else", "can", "pay", "a", "scammer", "address", "debt", "(", "same", "as", "above", ")", "."], "url": "e799da3a0c4ef470185389147012505c"}
{"code_tokens": ["contract", "c9143{", "function", "updatePendingManager(address", "_pendingManager,", "uint", "_block)", "public", "returns", "(uint", "_code)", "{", "_code", "=", "_multisig(keccak256(_pendingManager),", "_block);", "if", "(OK", "!=", "_code)", "{", "return", "_code;", "}", "pendingManager", "=", "_pendingManager;", "return", "OK;", "}", "}"], "docstring_tokens": ["Update", "pending", "manager", "address", "."], "url": "6234e549317d5df44a853bd1099dbcbe"}
{"code_tokens": ["contract", "c15760{", "function", "AddAccountsInfo(address", "addAddr,", "uint256", "addAmount)", "private", "{", "accountInfo", "info", "=", "AccountInfoList[numAccountsInfo];", "numAccountsInfo", "=", "numAccountsInfo.add(1);", "info.addr", "=", "addAddr;", "info.amount", "=", "addAmount;", "changeTotalAmount", "=", "changeTotalAmount.add(addAmount);", "}", "}"], "docstring_tokens": ["Add", "struct", "accountsInfo", "."], "url": "b97d83d91f499b7ade82e89a1908e0aa"}
{"code_tokens": ["contract", "c11910{", "function", "buySilver(uint256", "_SilverPrice,", "uint256", "_expiration,", "uint8", "_v,", "bytes32", "_r,", "bytes32", "_s", ")", "payable", "external", "{", "require(_expiration", ">=", "block.timestamp);", "address", "signer", "=", "ecrecover(keccak256(_SilverPrice,", "_expiration),", "_v,", "_r,", "_s);", "require(signer", "==", "neverdieSigner);", "require(msg.value", ">=", "_SilverPrice);", "assert(ndc.transfer(msg.sender,", "SILVER_AMOUNT_NDC)", "&&", "tpt.transfer(msg.sender,", "SILVER_AMOUNT_TPT)", "&&", "skl.transfer(msg.sender,", "SILVER_AMOUNT_SKL)", "&&", "xper.transfer(msg.sender,", "SILVER_AMOUNT_XPER));", "emit", "BuySilver(msg.sender,", "_SilverPrice,", "msg.value);", "}", "}"], "docstring_tokens": ["buy", "Silver", "with", "ether", "."], "url": "e7873a1c3ba8bc3ca7c8668919213302"}
{"code_tokens": ["contract", "c7205{", "address", "public", "fundsWallet;", "function", "H2G2", "()", "public", "{", "totalSupply", "=", "42000000", "*", "10", "**", "decimals;", "balances[msg.sender]", "=", "totalSupply;", "initialSupply", "=", "totalSupply;", "Transfer(0,", "this,", "totalSupply);", "Transfer(this,", "msg.sender,", "totalSupply);", "unitsOneEthCanBuy", "=", "1000;", "fundsWallet", "=", "msg.sender;", "}function()", "public", "payable{totalEthInWei", "=", "totalEthInWei", "+", "msg.value;", "uint256", "amount", "=", "msg.value", "*", "unitsOneEthCanBuy;", "require(balances[fundsWallet]", ">=", "amount);", "balances[fundsWallet]", "=", "balances[fundsWallet]", "-", "amount;", "balances[msg.sender]", "=", "balances[msg.sender]", "+", "amount;", "Transfer(fundsWallet,", "msg.sender,", "amount);", "fundsWallet.transfer(msg.value);}", "}"], "docstring_tokens": ["of", "cent", "in", "USD", "or", "satoshi", "in", "BTC", ")", "."], "url": "df961b2f7a5017a14158538e03e9d6e1"}
{"code_tokens": ["contract", "c23506{", "function", "_transfer(address", "_from,", "address", "_to,", "uint256", "_tokenId)", "internal", "{", "ownersTokenCount[_to]++;", "elementToOwner[_tokenId]", "=", "_to;", "if", "(_from", "!=", "address(0))", "{", "ownersTokenCount[_from]--;", "delete", "elementToApproved[_tokenId];", "}", "Transfer(_from,", "_to,", "_tokenId);", "}", "}"], "docstring_tokens": ["Assigns", "ownership", "of", "a", "specific", "element", "to", "an", "address", "."], "url": "56e4ca48be9da2e7f9dd353d1ff5b540"}
{"code_tokens": ["contract", "c34414{", "function", "partialRefund(uint256", "value)", "public", "{", "require(!isSuccessful());", "require(refundPeriodStart());", "require(!refundPeriodOver());", "require(checkEthBalance(msg.sender)", ">=", "value);", "setBalance(msg.sender,checkEthBalance(msg.sender).sub(value));", "asyncSend(msg.sender,", "value);", "}", "}"], "docstring_tokens": ["When", "MIN_CAP", "is", "not", "reach", "the", "smart", "contract", "will", "be", "credited", "to", "make", "refund", "possible", "by", "backers", "1", ")", "backer", "call", "the", "partialRefund", "function", "of", "the", "Crowdsale", "contract", "with", "the", "partial", "amount", "of", "ETH", "to", "be", "refunded", "(", "value", "will", "be", "renseigned", "in", "WEI", ")", "2", ")", "backer", "call", "the", "withdrawPayments", "function", "of", "the", "Crowdsale", "contract", "to", "get", "a", "refund", "in", "ETH", "."], "url": "466c9549a4076d2c191baf4fe6a580e2"}
{"code_tokens": ["contract", "c17784{", "function", "_approvedFor(address", "_claimant,", "uint256", "_tokenId)", "internal", "view", "returns", "(bool)", "{", "require(_tokenId", ">", "STARTING_ASSET_BASE);", "return", "preSaleItemIndexToApproved[_tokenId]", "==", "_claimant;", "}", "}"], "docstring_tokens": ["Checks", "if", "a", "given", "address", "currently", "has", "transferApproval", "for", "a", "particular", "CSCPreSaleItem", "."], "url": "4a936fdbe79624f5871f4d836f84ff25"}
{"code_tokens": ["contract", "c31878{", "function", "finalizeSale()", "public", "isActive", "onlySaleCreator", "onlyWhenSelling", "{", "require(currentSale.ended);", "require(currentSale.sharesSold", "==", "currentSale.sharesCap);", "currentSale.beneficiary.transfer(currentSale.weiRaised);", "SaleCompleted(currentSale.beneficiary,", "currentSale.weiRaised,", "currentSale.sharesSold);", "currentSale.exists", "=", "false;", "}", "}"], "docstring_tokens": ["Finalize", "the", "in", "progress", "sale", "."], "url": "c6d73931708d1d52a1b31e014bd920aa"}
{"code_tokens": ["contract", "c12027{", "function", "nextNextBid()", "public", "view", "returns", "(uint", "_nextBid)", "{", "return", "highestBindingBid.add(potato).add((highestBindingBid.add(potato)).mul(4).div(9));", "}", "}"], "docstring_tokens": ["calculates", "the", "bid", "after", "the", "current", "bid", "so", "nifty", "hackers", "can", "skip", "the", "queue", "this", "is", "not", "in", "our", "frontend", "and", "no", "one", "knows", "if", "it", "actually", "works", "."], "url": "30e837e1ca1fab2d9546abe408a2f49b"}
{"code_tokens": ["contract", "c16921{", "function", "balanceOf(address", "_owner)", "external", "view", "returns", "(uint256", "count)", "{", "return", "ownershipTokenCount[_owner];", "}", "}"], "docstring_tokens": ["Returns", "the", "number", "of", "Cuties", "owned", "by", "a", "specific", "address", "."], "url": "ec1b379d1e6d5da366786e88833c4ff1"}
{"code_tokens": ["contract", "c11346{", "function", "updatePartner1_will(string", "_partner1_will)", "public", "{", "require(msg.sender", "==", "partner1_address);", "partner1_will", "=", "_partner1_will;", "saveContractEvent(\"Update", "-", "Will\",", "\"Partner", "1", "Will", "Updated\");", "}", "}"], "docstring_tokens": ["Update", "partner", "1", "will", ",", "only", "partner", "1", "can", "update", "."], "url": "dea8bf518e62fa389857301b2e85ce28"}
{"code_tokens": ["contract", "c40474{", "function", "checkEarnings(address", "toCheck)", "returns", "(uint)", "{", "if(msg.value", ">", "0){", "msg.sender.send(msg.value);", "}", "if", "(winningTeamDefined", "==", "true)", "{", "return", "(globalBet", "*", "(euroTeams[winningTeam].bet[toCheck]", "/", "euroTeams[winningTeam].totalBet));", "}", "else", "{", "return", "0;", "}", "}", "}"], "docstring_tokens": ["Check", "earnings", "for", "a", "specific", "address", "."], "url": "fe75a73befd09490a457cf0fad67a669"}
{"code_tokens": ["contract", "c13657{", "function", "setTradingStatus(", "bool", "isLive", ")", "public", "onlyOwner", "{", "tradingLive", "=", "isLive;", "FreezeStatusChanged(tradingLive,", "block.timestamp);", "}", "}"], "docstring_tokens": ["Sets", "if", "the", "trading", "is", "live", "."], "url": "ce00724c0cc5fab60d9ec149e8349e49"}
{"code_tokens": ["contract", "c25677{", "function", "seal()", "public", "onlyOwner", "{", "require(!sealed);", "sealed", "=", "true;", "}", "}"], "docstring_tokens": ["After", "sealing", ",", "no", "more", "whitelisting", "is", "possible", "."], "url": "ab042cfacb2d3a64148c4957d23b227c"}
{"code_tokens": ["contract", "c19699{", "function", "collectRefund()", "external", "{", "require(refundable[msg.sender]", ">", "0);", "require(refunded[msg.sender]", "==", "false);", "uint256", "theirwei", "=", "refundable[msg.sender];", "refundable[msg.sender]", "=", "0;", "refunded[msg.sender]", "==", "true;", "msg.sender.transfer(theirwei);", "RefundCollected(msg.sender,", "now);", "}", "}"], "docstring_tokens": ["This", "is", "necessary", "for", "the", "blacklisted", "user", "to", "pull", "his", "ether", "from", "the", "contract", "upon", "being", "refunded", "."], "url": "28155c3875cde0dd27d85ddec58ad484"}
{"code_tokens": ["contract", "c1346{", "function", "_messageToRecover(", "address", "destination,", "uint256", "value", ")", "private", "view", "returns", "(bytes32)", "{", "bytes32", "hashedUnsignedMessage", "=", "generateMessageToSign(", "destination,", "value", ");", "bytes", "memory", "unsignedMessageBytes", "=", "_hashToAscii(", "hashedUnsignedMessage", ");", "bytes", "memory", "prefix", "=", "\"\\x19Ethereum", "Signed", "Message:\\n64\";", "return", "keccak256(abi.encodePacked(prefix,unsignedMessageBytes));", "}", "}"], "docstring_tokens": ["Generate", "the", "the", "unsigned", "message", "(", "in", "bytes32", ")", "that", "each", "owner's", "wallet", "would", "have", "signed", "for", "the", "given", "destination", "and", "amount", "."], "url": "89cd1d7e3d223afee6dd2b5cb34d9440"}
{"code_tokens": ["contract", "c18732{", "function", "removeExchangeTestAccounts(address", "_address)", "onlyOwner", "public{", "delete", "exchangesAccounts[_address];", "}", "}"], "docstring_tokens": ["Only", "owner", "function", "to", "remove", "Exchange", "Accounts", "."], "url": "12b7c88e6422354e24b4f1f41e6bffdf"}
{"code_tokens": ["contract", "c2285{", "function", "buy(uint256", "_orderId)", "external", "payable", "{", "Order", "memory", "_order", "=", "orders[_orderId];", "require(_order.price", "!=", "0", "&&", "_order.maker", "!=", "address(0)", "&&", "_order.asset", "!=", "address(0)", "&&", "_order.amount", "!=", "0);", "require(msg.value", "==", "_order.price);", "require(blacklist[msg.sender]", "==", "false);", "address", "maker", "=", "_order.maker;", "ERC20_Interface", "token", "=", "ERC20_Interface(_order.asset);", "if(token.allowance(_order.maker,address(this))", ">=", "_order.amount){", "assert(token.transferFrom(_order.maker,msg.sender,", "_order.amount));", "maker.transfer(_order.price);", "}", "unLister(_orderId,_order);", "emit", "Sale(msg.sender,_order.asset,_order.amount,_order.price);", "}", "}"], "docstring_tokens": ["buy", "allows", "a", "party", "to", "fill", "an", "order", "."], "url": "5508dad4d3e59c09691080eb2becc672"}
{"code_tokens": ["contract", "c21608{", "function", "rewardController(address", "_investor,", "bytes5", "_type)", "internal", "view", "returns", "(uint256)", "{", "uint256", "_period;", "uint256", "_balance;", "uint256", "_created;", "invest", "storage", "inv", "=", "investInfo[msg.sender][_type];", "_period", "=", "countPeriod(_investor,", "_type);", "_balance", "=", "inv.balance;", "_created", "=", "inv.created;", "uint256", "full_steps;", "uint256", "last_step;", "uint256", "_d;", "if(_type", "==", "_td)", "_d", "=", "365;", "if(_type", "==", "_tw)", "_d", "=", "54;", "if(_type", "==", "_tm)", "_d", "=", "12;", "if(_type", "==", "_ty)", "_d", "=", "1;", "full_steps", "=", "_period/_d;", "last_step", "=", "_period", "-", "(full_steps", "*", "_d);", "for(uint256", "i=0;", "i<full_steps;", "i++)", "{", "_balance", "=", "compaundIntrest(_d,", "_type,", "_balance,", "_created);", "_created", "+=", "1", "years;", "}", "if(last_step", ">", "0)", "_balance", "=", "compaundIntrest(last_step,", "_type,", "_balance,", "_created);", "return", "_balance;", "}", "}"], "docstring_tokens": ["invest", "box", "controller", "."], "url": "f1b0571a168ac4ad9fea7a491146b7c8"}
{"code_tokens": ["contract", "c14273{", "function", "requestBounty()", "external{", "require(releasedBountyTokens);", "require(getState()==State.Success);", "assert", "(bounties[msg.sender]>0);", "balanceOf[msg.sender]", "=", "safeAdd(balanceOf[msg.sender],bounties[msg.sender]);", "emit", "BountyTransfer(msg.sender,bounties[msg.sender],block.number);", "emit", "Transfer(0,msg.sender,bounties[msg.sender]);", "bounties[msg.sender]", "=", "0;", "}", "}"], "docstring_tokens": ["request", "to", "receive", "bounty", "tokens", "."], "url": "47bc0c3e932cc49c2377941508f54c12"}
{"code_tokens": ["contract", "c22816{", "function", "createTokenContract()", "internal", "returns(MintableToken)", "{", "PreBOUToken", "token", "=", "new", "PreBOUToken();", "token.pause();", "return", "token;", "}", "}"], "docstring_tokens": ["Creates", "token", "contract", "for", "ICO", "."], "url": "9e242005278f62b899536f5aa5e11778"}
{"code_tokens": ["contract", "c36855{", "function", "addressToBytes(address", "_address)", "internal", "returns", "(bytes)", "{", "uint160", "tmp", "=", "uint160(_address);", "string", "memory", "holder", "=", "\"", "\";", "bytes", "memory", "ret", "=", "bytes(holder);", "uint", "j", "=", "0;", "for", "(uint", "i", "=", "0;", "i", "<", "20;", "i++)", "{", "uint", "_tmp", "=", "tmp", "/", "(2", "**", "(8*(19-i)));", "uint", "nb1", "=", "(_tmp", "/", "0x10)", "&", "0x0f;", "uint", "nb2", "=", "_tmp", "&", "0x0f;", "ret[j++]", "=", "byte(nibbleToChar(nb1));", "ret[j++]", "=", "byte(nibbleToChar(nb2));", "}", "return", "ret;", "}", "}"], "docstring_tokens": ["Returns", "the", "bytes", "representation", "of", "a", "provided", "Ethereum", "address", "."], "url": "053fe6f24c73a351238ebb7e4e6a56fd"}
{"code_tokens": ["contract", "c1757{", "function", "_tokenBankrollBuyIn(uint8", "divRate)", "internal", "{", "address", "targetBankroll", "=", "tokenBankrollMapping[divRate];", "ZethrTokenBankroll(targetBankroll).zethrBuyIn();", "}", "}"], "docstring_tokens": ["Calls", "zethrBuyIn", "okn", "the", "selected", "tokenBankroll", "."], "url": "73da29574f6b5170f27ac6d521fa9b82"}
{"code_tokens": ["contract", "c17876{", "function", "setListener(address", "_listener)", "public", "onlyOwner", "{", "if(_listener", "!=", "address(0))", "{", "eventListener", "=", "ITokenEventListener(_listener);", "}", "else", "{", "delete", "eventListener;", "}", "}", "}"], "docstring_tokens": ["Set", "/", "remove", "token", "event", "listener", "."], "url": "acaa19f85fbe4878931668706fed855a"}
{"code_tokens": ["contract", "c25549{", "function", "getRichToken(uint256", "_tokenId)", "public", "view", "returns", "(", "string", "richtokenName,", "uint256", "sellingPrice,", "address", "owner", ")", "{", "Rich", "storage", "richtoken", "=", "richtokens[_tokenId];", "richtokenName", "=", "richtoken.name;", "sellingPrice", "=", "richtokenIndexToPrice[_tokenId];", "owner", "=", "richtokenIndexToOwner[_tokenId];", "}", "}"], "docstring_tokens": ["Returns", "all", "the", "relevant", "information", "about", "a", "specific", "richtoken", "."], "url": "33a749594aac8717e02381e8e4f91e5d"}
{"code_tokens": ["contract", "c38530{", "modifier", "reentrant", "{", "_;", "}", "}"], "docstring_tokens": ["empty", "marking", "modifier", "signaling", "to", "user", "of", "the", "marked", "function", ",", "that", "it", "can", "cause", "an", "reentrant", "call", "."], "url": "5d4b889b8be21a2d5deb40144cb16bf3"}
{"code_tokens": ["contract", "c3689{", "function", "isContract(address", "_addr)", "constant", "internal", "returns(bool)", "{", "uint", "size;", "if", "(_addr", "==", "0)", "return", "false;", "assembly", "{", "size", ":=", "extcodesize(_addr)", "}", "return", "size>0;", "}", "}"], "docstring_tokens": ["function", "to", "check", "if", "address", "is", "a", "contract", "."], "url": "ac29af928d21cb4052c5f48c01e087ec"}
{"code_tokens": ["contract", "c39127{", "function", "vote(", "uint256", "_proposalID,", "bool", "_inSupport,", "string", "_justificationText", ")", "onlyCongressMembers", "{", "Proposal", "p", "=", "proposals[_proposalID];", "if", "(p.state", "!=", "ProposalState.Proposed)", "throw;", "if", "(p.voted[msg.sender]", "==", "true)", "throw;", "var", "voterTokens", "=", "dasToken.balanceOf(msg.sender);", "blockTokens(msg.sender);", "p.voted[msg.sender]", "=", "true;", "p.votes.push(Vote(msg.sender,", "_inSupport,", "voterTokens,", "_justificationText));", "p.votesNumber", "+=", "1;", "VotedEvent(_proposalID,", "msg.sender,", "_inSupport,", "voterTokens,", "_justificationText);", "}", "}"], "docstring_tokens": ["vote", "for", "an", "proposal", "."], "url": "3879120e2b820d03d2c4c192238fe693"}
{"code_tokens": ["contract", "c20074{", "function", "setOwner(address", "a)", "external", "onlyOwner", "addrNotNull(a)", "{", "owner", "=", "a;", "emit", "OwnershipReplaced(msg.sender,", "a);", "}", "}"], "docstring_tokens": ["Allows", "the", "current", "owner", "to", "transfer", "control", "of", "the", "contract", "to", "a", "_new", "."], "url": "728b6b684c3ded9a17210ce5ceeafb5b"}
{"code_tokens": ["contract", "c984{", "function", "startAuctionsAndBid(bytes32[]", "hashes,", "bytes32", "sealedBid)", "public", "payable", "{", "startAuctions(hashes);", "newBid(sealedBid);", "}", "}"], "docstring_tokens": ["Start", "a", "set", "of", "auctions", "and", "bid", "on", "one", "of", "them", "."], "url": "0a3bf87e1d4b07a68b7cbf6c9c586dea"}
{"code_tokens": ["contract", "c39216{", "function", "multiply(uint", "x,", "uint", "y)", "internal", "constant", "returns", "(uint", "z)", "{", "z", "=", "x", "*", "y;", "assert(x", "==", "0", "||", "z", "/", "x", "==", "y);", "return", "z;", "}", "}"], "docstring_tokens": ["ensure", "that", "the", "result", "of", "multiplying", "x", "and", "y", "is", "accurate", "."], "url": "f5147104ba52a436b34df205e403edb7"}
{"code_tokens": ["contract", "c5438{", "function", "updateBalance", "(", "address", "_token,", "uint256", "_amount,", "bool", "_subtractionFlag", ")", "external", "returns(bool)", "{", "assembly", "{", "calldatacopy(0x40,", "0,", "calldatasize)", "delegatecall(gas,", "sload(0x3),", "0x40,", "calldatasize,", "0,", "32)", "return(0,", "32)", "pop", "}", "}", "}"], "docstring_tokens": ["The", "result", "of", "an", "order", ",", "update", "the", "balance", "of", "this", "wallet", "."], "url": "094d99b359e4b7a2228bc60535982b6a"}
{"code_tokens": ["contract", "c6449{", "function", "buyTokens()", "public", "payable", "{", "require(gasleft()", ">=", "110000,", "\"Requires", "at", "least", "110000", "gas,", "reverting", "to", "avoid", "wasting", "your", "gas\");", "uint", "tokensBought", "=", "msg.value.div(weiRatePerToken);", "uint", "ticketsBought", "=", "msg.value.div(weiRatePerTicket);", "require(tokensBought", ">", "0", "&&", "ticketsBought", ">", "0,\"Requires", "minimum", "payment", "purchase\");", "giveTix(ticketsBought,msg.sender);", "totalSupply", "+=", "tokensBought;", "jackpot", "+=", "(tokensBought", "/", "2);", "balances[msg.sender]", "+=", "tokensBought;", "emit", "Transfer(address(this),msg.sender,tokensBought);", "}", "}"], "docstring_tokens": ["Does", "what", "it", "says", "on", "the", "tin", "."], "url": "3348e9c2515cd43524a38e5817371be1"}
{"code_tokens": ["contract", "c23690{", "function", "_metadata(uint256", "_id)", "internal", "view", "returns(string)", "{", "Part", "memory", "p", "=", "parts[_id];", "return", "strConcat(strConcat(", "metadataBase,", "uintToString(uint(p.partType)),", "\"/\",", "uintToString(uint(p.partSubType)),", "\"/\"", "),", "uintToString(uint(p.rarity)),", "\"\",", "\"\",", "\"\");", "}", "}"], "docstring_tokens": ["part", "type", ",", "subtype", ",", "have", "one", "internal", "function", "which", "lets", "us", "implement", "the", "divergent", "interfaces", "."], "url": "044c51242c77271a01d51bea038746f9"}
{"code_tokens": ["contract", "c9648{", "function", "isApprovedForAll(address", "operator,", "address", "assetHolder)", "external", "view", "returns", "(bool)", "{", "return", "_isApprovedForAll(assetHolder,", "operator);", "}", "}"], "docstring_tokens": ["Query", "whether", "an", "address", "has", "been", "authorized", "to", "move", "any", "assets", "on", "behalf", "of", "someone", "else", "."], "url": "c642c479e7a074e4ca5df2f5f9a97770"}
{"code_tokens": ["contract", "c33938{", "function", "setTokenPrice(uint", "ethRate)", "external", "onlyOwner", "{", "tokenPrice", "=", "(ethRate", "*", "10", "**", "18)", "/", "10000;", "}", "}"], "docstring_tokens": ["Price", "should", "be", "entered", "in", "multiple", "of", "10000's", "."], "url": "0ff6f41ca12731160d22d361bc009377"}
{"code_tokens": ["contract", "c35418{", "function", "sellfloaksAgainstEther(uint256", "amount)", "returns", "(uint", "revenue)", "{", "if", "(sellPriceEth", "==", "0", "||", "amount", "<", "FLKDForGas)", "throw;", "if", "(balances[msg.sender]", "<", "amount)", "throw;", "revenue", "=", "safeMul(amount,", "sellPriceEth);", "if", "(safeSub(this.balance,", "revenue)", "<", "gasReserve)", "throw;", "if", "(!msg.sender.send(revenue))", "{", "throw;", "}", "else", "{", "balances[this]", "=", "safeAdd(balances[this],", "amount);", "balances[msg.sender]", "=", "safeSub(balances[msg.sender],", "amount);", "Transfer(this,", "msg.sender,", "revenue);", "return", "revenue;", "}", "}", "}"], "docstring_tokens": ["User", "sells", "floaks", "and", "gets", "Ether", "."], "url": "dc60317a0cf1271815957c80e55d92cd"}
{"code_tokens": ["contract", "c20578{", "function", "emergencyERC20Drain(", "ERC20", "oddToken,", "uint", "amount", ")", "public", "onlyCSorAdmin", "returns(bool){", "oddToken.transfer(owner,", "amount);", "EmergencyERC20DrainWasCalled(oddToken,", "amount);", "return", "true;", "}", "}"], "docstring_tokens": ["emergency", "if", "the", "contarct", "get", "ERC20", "tokens", "."], "url": "66c181f54011679a1847841566454315"}
{"code_tokens": ["contract", "c32156{", "function", "returnWei()", "onlyOwner", "external", "{", "owner.transfer(this.balance);", "}", "}"], "docstring_tokens": ["Send", "the", "value", "(", "ethers", ")", "that", "the", "contract", "holds", "to", "the", "owner", "address", "."], "url": "42b5007bd079f505e9f429f4d1e53fbf"}
{"code_tokens": ["contract", "c9561{", "function", "transfer(address", "_to,", "uint", "_value)", "public", "returns", "(bool)", "{", "if", "(_to", "==", "msg.sender)", "return", "false;", "return", "super.transfer(_to,", "_value);", "}", "}"], "docstring_tokens": ["Transfer", "amount", "of", "tokens", "from", "sender", "account", "to", "recipient", "."], "url": "15e0bc41712f9920c8da1f503cc3a072"}
{"code_tokens": ["contract", "c3307{", "function", "mintForPrivateFiat(address", "_beneficiary,", "uint256", "_weiAmount)", "public", "onlyOwner", "{", "require(_beneficiary", "!=", "address(0));", "_preValidatePurchase(_beneficiary,", "_weiAmount);", "uint256", "tokens", "=", "_getTokenAmount(_weiAmount);", "weiRaised", "=", "weiRaised.add(_weiAmount);", "tokensRaised", "=", "tokensRaised.add(tokens);", "if(capReached())", "{", "emit", "CapOverflow(_beneficiary,", "_weiAmount,", "tokens,", "now);", "emit", "IncrementTieredState(getState());", "}", "_processPurchase(_beneficiary,", "tokens);", "emit", "TokenPurchase(", "msg.sender,", "_beneficiary,", "_weiAmount,", "tokens", ");", "_updatePurchasingState(_beneficiary,", "_weiAmount);", "_forwardFunds();", "}", "}"], "docstring_tokens": ["allows", "for", "minting", "from", "owner", "account", "."], "url": "f2cfd7a465e395646aca248cd9161971"}
{"code_tokens": ["contract", "c22012{", "function", "redeemCoinsToICO(", "uint256", "amountOfCoinsToRedeem)", "public", "returns", "(bool", "success", ")", "{", "uint", "amount", "=", "amountOfCoinsToRedeem;", "msgSndr[msg.sender]", "=", "amount;", "bool", "isPreview", "=", "false;", "ICO", "ico", "=", "ICO(_getIcoAddr());", "bool", "icosuccess", ";", "uint", "redeemPaymentValue;", "(icosuccess", ",", "redeemPaymentValue)", "=", "ico.redeemCoin(", "amount,", "msg.sender,", "isPreview);", "require(", "icosuccess", "==", "true);", "require(", "_getIcoAddr().balance", ">=", "safeAdd(", "ico.getMinBal()", ",", "redeemPaymentValue)", ");", "bool", "sucsTrTk", "=", "false;", "bool", "pymActSucs", "=", "false;", "if(isPreview", "==", "false)", "{", "sucsTrTk", "=", "_safeTransferTkn(", "msg.sender,", "owner,", "amount);", "require(sucsTrTk", "==", "true);", "msgSndr[msg.sender]", "=", "redeemPaymentValue;", "pymActSucs", "=", "_safePaymentActionAtIco(", "redeemPaymentValue,", "msg.sender,", "1);", "require(pymActSucs", "==", "true);", "}", "msgSndr[msg.sender]", "=", "0;", "return", "(true);", "}", "}"], "docstring_tokens": ["Allows", "Token", "owners", "to", "Redeem", "Tokens", "to", "this", "Contract", "for", "its", "value", "promised", "."], "url": "c32d6cc8ca9a0b2fc49c769db0c82ce5"}
{"code_tokens": ["contract", "c35567{", "function", "updateUrl(address", "key,", "bytes32[5]", "url)", "{", "dspRegistry.updateUrl(key,", "url,", "msg.sender);", "DSPParametersChanged(key);", "}", "}"], "docstring_tokens": ["Change", "url", "of", "DSP", "."], "url": "f95975e571f6a8c5ae49bddd518b6041"}
{"code_tokens": ["contract", "c66{", "function", "tierWhitelisted(uint", "_idx)", "internal", "pure", "returns", "(bytes32)", "{", "return", "keccak256(_idx,", "\"wl_stat\",", "saleTierList());", "}", "}"], "docstring_tokens": ["Returns", "the", "storage", "location", "of", "the", "tier's", "whitelist", "status", "."], "url": "67fb9b9005ce2670e26d163caeed38aa"}
{"code_tokens": ["contract", "c39085{", "function", "checkBetNumber(uint8", "result,", "address", "player,", "bytes32", "blockHash,", "bytes32", "shaPlayer)", "private", "{", "bool", "win;", "if", "(result==gambles[gambleIndex[player]].input)", "{", "win=true;", "}", "solveBet(player,", "result,win,36,", "blockHash,", "shaPlayer);", "}", "}"], "docstring_tokens": ["checkbeton", "number", "(", "input", ")", "bet", "type", ":", "number", "input", ":", "chosen", "number", "."], "url": "013c9bef88823d1969bc2a549283afad"}
{"code_tokens": ["contract", "c16217{", "function", "setMaxUpdates(uint", "newMax)", "public", "onlyAuthorized{", "maxUpdates", "=", "newMax;", "}", "}"], "docstring_tokens": ["Sets", "the", "maximum", "number", "of", "user", "stakes", "to", "update", "at", "once", "."], "url": "5ab92cf42be7ed0df162d10cece8084f"}
{"code_tokens": ["contract", "c38325{", "function", "startNewPayoutPeriod()", "{", "require(isNewPayoutPeriod());", "previousPayoutBlock", "=", "nextPayoutBlock;", "nextPayoutBlock", "=", "nextPayoutBlock.add(blocksPerPayPeriod);", "payoutPool", "=", "this.balance;", "}", "}"], "docstring_tokens": ["Start", "a", "new", "payout", "cycle", "."], "url": "83cfd061e7e83ef999aebe6c9dc8455c"}
{"code_tokens": ["contract", "c34194{", "function", "isFundraiser(address", "fundraiserAddress)", "constant", "public", "returns(bool)", "{", "return", "fundraisers[fundraiserAddress];", "}", "}"], "docstring_tokens": ["Returns", "whether", "fundraiser", "address", "has", "rights", "."], "url": "4de662a6d57aa04328bde10634a02f1a"}
{"code_tokens": ["contract", "c5391{", "function", "totalSupply()", "public", "view", "returns", "(uint256){", "return", "totalSupply;", "}", "}"], "docstring_tokens": ["This", "return", "total", "supply", "token", "."], "url": "2751466ae33ad1ad6b970b06254351c2"}
{"code_tokens": ["contract", "c29289{", "function", "preIcoHasEnded()", "external", "constant", "returns", "(bool)", "{", "return", "now", ">", "preIcoEndTime;", "}", "}"], "docstring_tokens": ["true", "if", "pre", "sale", "event", "has", "ended", "."], "url": "ee8e7acde7ff57c1e122bf4e86cd54e4"}
{"code_tokens": ["contract", "c20537{", "function", "isOffchainWhitelisted(address", "_addr,", "bytes", "_sig)", "public", "view", "returns", "(bool)", "{", "bytes32", "hash", "=", "keccak256(\"\\x19Ethereum", "Signed", "Message:\\n20\",_addr);", "return", "hash.recover(_sig)", "==", "signer;", "}", "}"], "docstring_tokens": ["offchain", "whitelist", "check", "."], "url": "77021e34027f31b0745ba68c56df60f6"}
{"code_tokens": ["contract", "c34221{", "function", "enter()", "payable", "returns(string){", "if(msg.value", "<", "0.2", "ether){", "msg.sender.transfer(msg.value);", "return", "\"Low", "value!\";", "}", "participants.push(msg.sender);", "participants.push(msg.sender);", "payoutCount", "=", "payoutCount", "+", "2;", "participants[payoutIndex].transfer(0.19", "ether);", "msg.sender.transfer(msg.value", "-", "0.2", "ether);", "fees", "+=", "0.01", "ether;", "delete", "participants[payoutIndex];", "payoutIndex", "=", "payoutIndex", "+", "1;", "return", "\"Successfully", "joined", "the", "queue!\";", "}", "}"], "docstring_tokens": ["Double", "Payout", "program", "."], "url": "60b0393138c4017b18d71cff4d11914e"}
{"code_tokens": ["contract", "c3702{", "function", "transferBankOwnership(address", "newBanker)", "public", "onlySuperOwner", "{", "emit", "TMTG_RoleTransferred(Role.centralBanker,", "centralBanker,", "newBanker);", "centralBanker", "=", "newBanker;", "}", "}"], "docstring_tokens": ["It", "is", "possible", "to", "hand", "over", "centerBanker", "s", "authority", "."], "url": "a78ea91cba5b4e00614ab55e0545ed41"}
{"code_tokens": ["contract", "c39732{", "function", "isInCurrentGeneration(Pool", "storage", "self,", "address", "resourceAddress)", "constant", "returns", "(bool)", "{", "return", "isInGeneration(self,", "resourceAddress,", "getCurrentGenerationId(self));", "}", "}"], "docstring_tokens": ["Returns", "a", "boolean", "for", "whether", "the", "given", "address", "is", "in", "the", "current", "generation", "."], "url": "b0a69f7acdd16bcfdb8af80ba2759ed8"}
{"code_tokens": ["contract", "c31513{", "function", "requireByteOrderedSet(address[]", "yays)", "internal", "pure", "{", "if(", "yays.length", "==", "0", "||", "yays.length", "==", "1", ")", "{", "return;", "}", "for(", "uint", "i", "=", "0;", "i", "<", "yays.length", "-", "1;", "i++", ")", "{", "require(uint(bytes32(yays[i]))", "<", "uint256(bytes32(yays[i+1])));", "}", "}", "}"], "docstring_tokens": ["Throws", "unless", "the", "array", "of", "addresses", "is", "a", "ordered", "set", "."], "url": "3ee2950ef782b544561047ef01cd6774"}
{"code_tokens": ["contract", "c31878{", "modifier", "onlyWhenSelling()", "{", "require(currentSale.exists);", "_;", "}", "}"], "docstring_tokens": ["Ensure", "there", "is", "a", "sale", "in", "progress", "."], "url": "02db25f0e71ccd6d7e7556b084e8e720"}
{"code_tokens": ["contract", "c39519{", "function", "getBetValueByGamble(GameInfo", "memory", "gamble,", "uint8", "n,", "uint8", "nBit)", "private", "constant", "returns", "(uint256)", "{", "if", "(n", "<=", "32)", "return", "getBetValue(gamble.values", ",", "n,", "nBit);", "if", "(n", "<=", "64)", "return", "getBetValue(gamble.values2,", "n", "-", "32,", "nBit);", "throw;", "}", "}"], "docstring_tokens": ["n", "-", "number", "player", "bet", "nBit", "-", "betIndex", "."], "url": "b6df3272e1fab853f25d105c2cff4cd3"}
{"code_tokens": ["contract", "c2091{", "function", "attend(uint32", "_id,string", "_attendHash)", "public", "onlyOwner", "returns", "(bool)", "{", "require(moseEvents[_id].id", "==", "uint32(0),\"The", "event", "exists\");", "moseEvents[_id]", "=", "MoseEvent({id:_id,", "attendHash:_attendHash,", "result:", "\"\",", "finish:false});", "emit", "Attend(_id,", "_attendHash);", "return", "true;", "}", "}"], "docstring_tokens": ["Storing", "predictive", "event", "participation", "information", "."], "url": "cfa3a2861e0fd907f3aef2f500b46750"}
{"code_tokens": ["contract", "c21734{", "function", "setRestrictedAddress(address", "_restrictedAddress)", "onlyOwner", "public", "{", "restrictedAddress", "=", "_restrictedAddress;", "RestrictedAddressChanged(_restrictedAddress);", "transferOwnership(_restrictedAddress);", "}", "}"], "docstring_tokens": ["that", "function", "could", "be", "called", "only", "ONCE", "!", "!", "!", "After", "that", "nothing", "could", "be", "reverted", "!", "!", "!", "."], "url": "53027379351aeebfb7a2e7c1e582512b"}
{"code_tokens": ["contract", "c8648{", "function", "transferFrom(address", "from,", "address", "to,", "uint", "value)", "returns", "(bool", "ok)", "{", "if(_balances[from]", "<", "value)", "revert();", "if(_approvals[from][msg.sender]", "<", "value)", "revert();", "if(!safeToAdd(_balances[to],", "value))", "revert();", "_approvals[from][msg.sender]", "-=", "value;", "_balances[from]", "-=", "value;", "_balances[to]", "+=", "value;", "Transfer(from,", "to,", "value);", "return", "true;", "}", "}"], "docstring_tokens": ["spend", "Ace", "Tokens", "from", "another", "Ethereum", "account", "that", "approves", "you", "as", "spender", "."], "url": "bdfee14daa4bfcab14d0d635d3cd83bb"}
{"code_tokens": ["contract", "c34488{", "function", "redeem(string", "message)", "{", "require", "(balances[msg.sender]", ">=", "1);", "require", "(now", "<=", "expirationDate);", "balances[msg.sender]", "-=", "1;", "redeemed[msg.sender]", "+=", "1;", "tokenRedemption(msg.sender,", "message);", "}", "}"], "docstring_tokens": ["can", "be", "used", "prior", "to", "the", "donation", "as", "a", "constant", "function", "but", "it", "is", "mainly", "used", "in", "the", "noname", "function", "."], "url": "0b2c43adf9f45ea5be7c8fe58651d7e6"}
{"code_tokens": ["contract", "c27172{", "function", "getInvestor", "(address", "_address)", "public", "constant", "returns", "(uint256", "contribution,", "uint256", "tokens,", "bool", "distributed,", "uint", "index)", "{", "require(isInvested(_address));", "return(investors[_address].contribution,", "investors[_address].tokens,", "investors[_address].distributed,", "investors[_address].index);", "}", "}"], "docstring_tokens": ["Get", "an", "investor", "."], "url": "1824d7fa0492f462fcde7a64c4a2cfe8"}
{"code_tokens": ["contract", "c10241{", "function", "approvePendingCostume(uint", "animalId)", "public", "{", "for", "(uint", "i=0;i<memberAddresses.length;i++)", "{", "if", "(memberAddresses[i]==msg.sender)", "{", "for", "(uint", "j=0;j<animalIdsWithPendingCostumes.length;j++)", "{", "if", "(animalIdsWithPendingCostumes[j]==animalId)", "{", "delete", "animalIdsWithPendingCostumes[j];", "}", "}", "}", "}", "}", "}"], "docstring_tokens": ["function", "to", "approve", "a", "pending", "costume", "can", "be", "called", "from", "anyone", "in", "the", "member", "addresses", "list", "."], "url": "97925f8af5353878f1afe121c31f0846"}
{"code_tokens": ["contract", "c35837{", "function", "playRandom(address", "_partner)", "payable", "public", "returns", "(uint)", "{", "return", "playSystem(uint(keccak256(msg.sender,block.number)),", "_partner);", "}", "}"], "docstring_tokens": ["Play", "in", "lottery", "with", "random", "numbers", "."], "url": "2d6fff1f4875d581ebefc49abdcb65c1"}
{"code_tokens": ["contract", "c11742{", "function", "addPlotAndData(uint24[]", "purchase,", "string", "ipfsHash,", "string", "url,", "uint256", "initialBuyoutPriceInWeiPerPixel)", "private", "returns", "(uint256)", "{", "uint256", "newPlotIndex", "=", "ownership.length;", "ownership.push(PlotOwnership(purchase[0],", "purchase[1],", "purchase[2],", "purchase[3],", "msg.sender));", "data[newPlotIndex]", "=", "PlotData(ipfsHash,", "url);", "if", "(initialBuyoutPriceInWeiPerPixel", ">", "0)", "{", "plotIdToPrice[newPlotIndex]", "=", "initialBuyoutPriceInWeiPerPixel;", "}", "return", "newPlotIndex;", "}", "}"], "docstring_tokens": ["Stores", "the", "plot", "information", "and", "data", "for", "a", "newly", "purchased", "plot", "."], "url": "d214ec2d64495f297a16ffb8093beec0"}
{"code_tokens": ["contract", "c30682{", "function", "balanceOf(address", "investor)", "public", "constant", "returns", "(uint256", "balance)", "{", "balance", "=", "balances[investor];", "}", "}"], "docstring_tokens": ["Get", "info", "about", "specific", "account", "."], "url": "cf75404d858cda40e101cdfb25f397aa"}
{"code_tokens": ["contract", "c18810{", "function", "etherValueAllowStale(uint", "fiat)", "internal", "view", "returns", "(uint)", "{", "return", "safeDiv_dec(fiat,", "etherPrice);", "}", "}"], "docstring_tokens": ["The", "same", "as", "etherValue", "(", ")", ",", "but", "without", "the", "stale", "price", "check", "."], "url": "a89ae3a53a48f881117078f646f6036e"}
{"code_tokens": ["contract", "c39771{", "function", "removeOrder(uint", "_order)", "internal", "{", "if", "(numberOfOrders", "-", "1", "<", "_order)", "return;", "numberOfOrders", "-=", "1;", "if", "(numberOfOrders", ">", "0)", "{", "for", "(uint", "i", "=", "_order;", "i", "<=", "numberOfOrders", "-", "1;", "i++)", "{", "orders[i].buyer", "=", "orders[i+1].buyer;", "orders[i].weiGiven", "=", "orders[i+1].weiGiven;", "}", "}", "orders[numberOfOrders].buyer", "=", "0;", "orders[numberOfOrders].weiGiven", "=", "0;", "}", "}"], "docstring_tokens": ["Internal", "function", "to", "remove", "a", "buy", "order", "."], "url": "d9a56ed2449223e7899ae73d24d49d0b"}
{"code_tokens": ["contract", "c2247{", "function", "dividends(bool", "_includeReferralBonus)", "external", "view", "returns", "(uint256)", "{", "return", "P3D(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe).myDividends(_includeReferralBonus);", "}", "}"], "docstring_tokens": ["Get", "dividends", "for", "this", "contract", "."], "url": "9a35031fa4c0cc38decce304f8b32781"}
{"code_tokens": ["contract", "c929{", "function", "Gnosis()", "public", "{", "totalSupply", "=", "GolemSupply", "*", "10", "**", "uint256(decimals);", "balanceOf[msg.sender]", "=", "totalSupply;", "creator", "=", "msg.sender;", "}", "}"], "docstring_tokens": ["Constrctor", "function", "."], "url": "9badc0876e64a72435b674eee0aa18b6"}
{"code_tokens": ["contract", "c15261{", "function", "blackListERC20(address", "_token)", "onlyAdmin", "{", "blackERC20[_token]", "=", "true;", "}", "}"], "docstring_tokens": ["Blacklist", "ERC20", "or", "ERC223", "tokens", "."], "url": "0c34427bc36b1e99eca7ad964303f5a1"}
{"code_tokens": ["contract", "c9214{", "function", "executeTransaction(uint", "transactionId)", "public", "ownerExists(msg.sender)", "confirmed(transactionId,", "msg.sender)", "notExecuted(transactionId)", "{", "Transaction", "tx", "=", "transactions[transactionId];", "bool", "_confirmed", "=", "isConfirmed(transactionId);", "if", "(_confirmed", "||", "tx.data.length", "==", "0", "&&", "isUnderLimit(tx.value))", "{", "tx.executed", "=", "true;", "if", "(!_confirmed)", "spentToday", "+=", "tx.value;", "if", "(tx.destination.call.value(tx.value)(tx.data))", "Execution(transactionId);", "else", "{", "ExecutionFailure(transactionId);", "tx.executed", "=", "false;", "if", "(!_confirmed)", "spentToday", "-=", "tx.value;", "}", "}", "}", "}"], "docstring_tokens": ["Allows", "anyone", "to", "execute", "a", "confirmed", "transaction", "or", "ether", "withdraws", "until", "daily", "limit", "is", "reached", "."], "url": "626c7255e20ad27ba27d44445084292c"}
{"code_tokens": ["contract", "c15191{", "function", "pause()", "public", "onlyCEO", "whenNotPaused", "{", "paused", "=", "true;", "}", "}"], "docstring_tokens": ["Pause", "the", "smart", "contract", "."], "url": "14bc6c9a7305f50460e9a17d0900f94a"}
{"code_tokens": ["contract", "c718{", "function", "setMinimumprice(uint256", "_minprice)", "onlyAdministrator()", "public", "{", "minimumprice", "=", "_minprice;", "}", "}"], "docstring_tokens": ["Set", "Minimum", "Price", "."], "url": "5431a33f7e1d697cff8efd32b2afed8b"}
{"code_tokens": ["contract", "c33879{", "function", "redirectToPurchase()", "internal", "{", "if", "(block.number", "<", "purchaseStartBlock)", "{", "purchaseAsQualifiedPartner();", "}", "else", "{", "purchaseWithEth();", "}", "}", "}"], "docstring_tokens": ["redirectToPurchase", "Redirect", "to", "adequate", "purchase", "function", "within", "the", "smart", "contract", "."], "url": "0f57482022d15f43e5cb09331f11cba6"}
{"code_tokens": ["contract", "c12705{", "function", "_transfer(address", "_from,", "address", "_to,", "uint256", "_amount,", "bytes", "_data)", "internal", "returns", "(bool", "success){", "require(_to", "!=", "0x0);", "require(_amount", "<=", "balanceOf(_from));", "uint256", "initialBalances", "=", "balanceOf(_from).add(balanceOf(_to));", "balances[_from]", "=", "balanceOf(_from).sub(_amount);", "balances[_to]", "=", "balanceOf(_to).add(_amount);", "if(isContract(_to)){", "ReceiverContract", "receiver", "=", "ReceiverContract(_to);", "receiver.tokenFallback(_from,", "_amount,", "_data);", "}", "assert(initialBalances", "==", "balanceOf(_from).add(balanceOf(_to)));", "return", "true;", "}", "}"], "docstring_tokens": ["Underlying", "transfer", "function", ";", "it", "is", "called", "by", "public", "functions", "later", "."], "url": "c0bf7f7d37592d95e658b66ad0780360"}
{"code_tokens": ["contract", "c21902{", "function", "mintBooster(address", "_owner,", "uint32", "_duration,", "uint8", "_type,", "uint8", "_strength,", "uint32", "_amount,", "uint24", "_raiseValue)", "onlyChest", "public", "{", "boosters.length", "++;", "Booster", "storage", "tempBooster", "=", "boosters[boosters.length", "-", "1];", "tempBooster.owner", "=", "_owner;", "tempBooster.duration", "=", "_duration;", "tempBooster.boosterType", "=", "_type;", "tempBooster.strength", "=", "_strength;", "tempBooster.amount", "=", "_amount;", "tempBooster.raiseValue", "=", "_raiseValue;", "Transfer(address(0),", "_owner,", "boosters.length", "-", "1);", "}", "}"], "docstring_tokens": ["mints", "the", "boosters", "can", "only", "be", "called", "by", "owner", "."], "url": "b6a710e7a7e1b0444e083a04ce56b0c1"}
{"code_tokens": ["contract", "c16041{", "function", "isCMCT()", "public", "pure", "returns(bool", "isIndeed)", "{", "return", "true;", "}", "}"], "docstring_tokens": ["This", "is", "to", "catch", "deployment", "/", "configuration", "errors", "."], "url": "cc70cd637dcfc8e9439bb437689a7aec"}
{"code_tokens": ["contract", "c12709{", "function", "withdraw()", "public", "onlyContractOwner", "{", "contractOwner.transfer(address(this).balance);", "}", "}"], "docstring_tokens": ["transfers", "the", "full", "funds", "to", "the", "contract", "owner", "contractOwner", "deployer", "of", "the", "contract", "."], "url": "6ee146bcb046727de311e9849092b3e7"}
{"code_tokens": ["contract", "c12115{", "function", "setArbitrator(address", "_newArbitrator)", "onlyOwner", "external", "{", "arbitrator", "=", "_newArbitrator;", "}", "}"], "docstring_tokens": ["Set", "the", "arbitrator", "to", "a", "new", "address", "."], "url": "b34b681f13c7ae9af7621e78296a326c"}
{"code_tokens": ["contract", "c22795{", "function", "createSaleAuction(", "uint256", "_propertyId,", "uint256", "_startingPrice,", "uint256", "_endingPrice,", "uint256", "_duration", ")", "public", "whenNotPaused", "{", "require(_owns(msg.sender,", "_propertyId));", "_approve(_propertyId,", "saleAuction);", "saleAuction.createAuction(", "_propertyId,", "_startingPrice,", "_endingPrice,", "_duration,", "msg.sender", ");", "}", "}"], "docstring_tokens": ["Put", "a", "property", "up", "for", "auction", "."], "url": "79ab64844a37bd5255b6f176f6f216de"}
{"code_tokens": ["contract", "c22207{", "modifier", "onlyDuringRefund()", "{", "require(saleDuringRefundPeriod());", "_;", "}", "}"], "docstring_tokens": ["Reverts", "if", "called", "not", "doing", "the", "refund", "period", "."], "url": "7dcda7fc8333c11fbf236e0b380ada65"}
{"code_tokens": ["contract", "c19835{", "function", "isAbsent(bytes32", "channelId)", "public", "view", "returns(bool)", "{", "PaymentChannel", "memory", "channel", "=", "channels[channelId];", "return", "channel.sender", "==", "0;", "}", "}"], "docstring_tokens": ["Check", "if", "the", "channel", "is", "not", "present", "."], "url": "de7da5f55904aa9b45d2df9f5f876862"}
{"code_tokens": ["contract", "c12669{", "modifier", "onlyOwner()", "{", "if", "(msg.sender", "==", "address(0)", "||", "(msg.sender", "!=", "owner", "&&", "!contracts[msg.sender]))", "{", "revert();", "}", "_;", "}", "}"], "docstring_tokens": ["Allow", "contracts", "to", "have", "ownership", "without", "taking", "full", "custody", "of", "the", "token", "(", "Until", "voting", "is", "fully", "implemented", ")", "."], "url": "52b71173188c1bad243df2a18a9e047e"}
{"code_tokens": ["contract", "c731{", "function", "getClientBalance()", "isClient", "public", "view", "returns", "(uint256", "_value){", "_value", "=", "clients[msg.sender].Tokens;", "}", "}"], "docstring_tokens": ["esta", "funcion", "es", "llamada", "por", "cliente", "para", "saber", "cuantos", "Tokens", "le", "quedan", "disponibles", "."], "url": "cc0573649f46cf184a65c914cc6007bf"}
{"code_tokens": ["contract", "c20317{", "function", "rejectGame(address", "_playerAddress,", "uint", "_gameId)", "public", "onlyServer", "{", "uint", "gameId", "=", "playerGameId[_playerAddress];", "Game", "storage", "game", "=", "gameIdGame[gameId];", "require(_gameId", "==", "gameId);", "require(game.status", "==", "GameStatus.WAITING_FOR_SERVER);", "closeGame(game,", "gameId,", "_playerAddress,", "ReasonEnded.REJECTED_BY_SERVER,", "0);", "payOut(game,", "_playerAddress);", "LogGameRejected(_playerAddress,", "gameId);", "}", "}"], "docstring_tokens": ["Called", "by", "the", "server", "to", "reject", "game", "session", "created", "by", "player", "with", "address", "_playerAddress", "."], "url": "8dd33a7290d3c629867d3b8eae339159"}
{"code_tokens": ["contract", "c2117{", "function", "getInitFunction()", "public", "pure", "returns", "(bytes4)", "{", "return", "bytes4(keccak256(\"configure(uint256)\"));", "}", "}"], "docstring_tokens": ["This", "function", "returns", "the", "signature", "of", "configure", "function", "."], "url": "92e22fbfdd5e718ce13604e03eed2366"}
{"code_tokens": ["contract", "c33996{", "function", "migrate()", "public", "onlyMigrationEnabled()", "onlyAllowedTransferTo(msg.sender)", "{", "uint256", "amount", "=", "_balances[msg.sender];", "if", "(amount", ">", "0)", "{", "_balances[msg.sender]", "=", "0;", "_totalSupply", "=", "sub(_totalSupply,", "amount);", "}", "_allowedTransferTo[msg.sender]", "=", "false;", "_allowedTransferFrom[msg.sender]", "=", "false;", "EuroTokenMigrationTarget(_migration).migrateEuroTokenOwner(msg.sender,", "amount);", "LogEuroTokenOwnerMigrated(msg.sender,", "amount);", "}", "}"], "docstring_tokens": ["Overrides", "migration", "source", "."], "url": "52bc9d164015202db131515e07b5a06b"}
{"code_tokens": ["contract", "c100{", "function", "approve(address", "_spender,", "uint256", "_value)", "public", "returns", "(bool)", "{", "allowed[msg.sender][_spender]", "=", "_value;", "Approval(msg.sender,", "_spender,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["Approve", "the", "passed", "address", "to", "spend", "the", "specified", "amount", "of", "tokens", "on", "behalf", "of", "msg", ".", "sender", "."], "url": "5467c95f182743fbc03a5b5f4c84bd05"}
{"code_tokens": ["contract", "c11871{", "function", "setTransferLock(bool", "_set)", "onlyAdmin", "public", "{", "lockTransfer", "=", "_set;", "emit", "SetTransferLock(_set);", "}", "}"], "docstring_tokens": ["Function", "to", "set", "transfer", "lock", "."], "url": "4738f2d7db155fef3375057dbb09788c"}
{"code_tokens": ["contract", "c19076{", "function", "releaseVested(TokenVesting", "_vesting)", "public", "{", "require(_vesting", "!=", "address(0));", "_vesting.release(this);", "}", "}"], "docstring_tokens": ["Release", "vested", "tokens", "to", "beneficiary", "."], "url": "751d47b3930758eab9f645ad79f6729a"}
{"code_tokens": ["contract", "c809{", "modifier", "canEmptyRemainings()", "{", "require(canceled", "||", "completed);", "uint", "numRequiredToCollect", "=", "canceled", "?", "(numberOfBets[0]", "+", "numberOfBets[1])", ":", "numberOfBets[winningOption];", "require", "((now", ">=", "RETURN_DATE", "&&", "!canceled)", "||", "(numCollected", "==", "numRequiredToCollect));", "_;", "}", "}"], "docstring_tokens": ["Modifier", "to", "only", "allow", "emptying", "the", "remaining", "value", "of", "the", "contract", "to", "owners", "."], "url": "cfde228e80a84c1c932f6aee8ba8cacc"}
{"code_tokens": ["contract", "c24807{", "function", "orderPlace(address", "token,", "bool", "isBuy,", "uint", "wad,", "uint", "price)", "public", "{", "uint", "newLocked;", "if", "(isBuy)", "{", "newLocked", "=", "add(balanceLocked[0][msg.sender],", "mul(wad,", "price)", "/", "PRICE_FACTOR);", "require(balance[0][msg.sender]", ">=", "newLocked);", "balanceLocked[0][msg.sender]", "=", "newLocked;", "}", "else", "{", "newLocked", "=", "add(balanceLocked[token][msg.sender],", "wad);", "require(balance[token][msg.sender]", ">=", "newLocked);", "balanceLocked[token][msg.sender]", "=", "newLocked;", "}", "ORDER", "memory", "o;", "o.token", "=", "token;", "o.isBuy", "=", "isBuy;", "o.wad", "=", "wad;", "o.price", "=", "price;", "o.user", "=", "msg.sender;", "o.listPosition", "=", "orderList.length;", "order[globalOrderSerial]", "=", "o;", "orderList.push(globalOrderSerial);", "ORDER_PLACE(msg.sender,", "token,", "isBuy,", "wad,", "price,", "globalOrderSerial);", "globalOrderSerial++;", "}", "}"], "docstring_tokens": ["limit", "order", "price", "(", "all", "prices", "are", "multiplied", "by", "PRICE_FACTOR", ")", "."], "url": "4faccc2f84bb85b5d67acabf05e3d830"}
{"code_tokens": ["contract", "c17217{", "function", "refund(address", "investor)", "public", "{", "require(state", "==", "State.Refunding);", "uint256", "depositedValue", "=", "deposited[round][investor];", "require(depositedValue", ">", "0);", "deposited[round][investor]", "=", "0;", "investor.transfer(depositedValue);", "emit", "Refunded(investor,", "depositedValue);", "}", "}"], "docstring_tokens": ["Return", "the", "funds", "to", "a", "specified", "investor", "."], "url": "fc0a19449f633f91446937c9fa20b9a4"}
{"code_tokens": ["contract", "c9368{", "function", "internalDoubleTransfer", "(address", "from,", "address", "to1,", "uint", "value1,", "address", "to2,", "uint", "value2)", "internal", "{", "require(to1", "!=", "0x0", "&&", "to2", "!=", "0x0);", "balanceOf[from]", "=", "balanceOf[from].sub(value1.add(value2));", "balanceOf[to1]", "=", "balanceOf[to1].add(value1);", "emit", "Transfer(from,", "to1,", "value1);", "if", "(value2", ">", "0)", "{", "balanceOf[to2]", "=", "balanceOf[to2].add(value2);", "emit", "Transfer(from,", "to2,", "value2);", "}", "}", "}"], "docstring_tokens": ["Utility", "internal", "function", "used", "to", "safely", "transfer", "value1", "tokens", "from", "-", "to1", ",", "and", "value2", "tokens", "from", "-", "to2", ",", "minimizing", "gas", "usage", "(", "calling", "internalTransfer", "twice", "is", "more", "expensive", ")", "."], "url": "a0757e44f5adacca563fc2d4ea37016c"}
{"code_tokens": ["contract", "c3088{", "function", "donateDivs()", "payable", "public", "{", "require(msg.value", ">", "10000", "wei);", "uint256", "_dividends", "=", "msg.value;", "profitPerShare_", "+=", "(_dividends", "*", "magnitude", "/", "(tokenSupply_));", "}", "}"], "docstring_tokens": ["This", "method", "serves", "as", "a", "way", "for", "anyone", "to", "spread", "some", "love", "to", "all", "tokenholders", "without", "buying", "tokens", "."], "url": "93875789c6fb0efcca83ce34f90b3c73"}
{"code_tokens": ["contract", "c11668{", "function", "trade(address", "tokenGet,", "uint", "amountGet,", "address", "tokenGive,", "uint", "amountGive,", "uint", "expires,", "uint", "nonce,", "address", "user,", "uint8", "v,", "bytes32", "r,", "bytes32", "s,", "uint", "amount)", "public", "{", "bytes32", "hash", "=", "sha256(this,", "tokenGet,", "amountGet,", "tokenGive,", "amountGive,", "expires,", "nonce);", "require((", "(orders[user][hash]", "||", "ecrecover(keccak256(\"\\x19Ethereum", "Signed", "Message:\\n32\",", "hash),", "v,", "r,", "s)", "==", "user)", "&&", "block.number", "<=", "expires", "&&", "orderFills[user][hash].add(amount)", "<=", "amountGet", "));", "tradeBalances(tokenGet,", "amountGet,", "tokenGive,", "amountGive,", "user,", "amount);", "orderFills[user][hash]", "=", "orderFills[user][hash].add(amount);", "Trade(tokenGet,", "amount,", "tokenGive,", "amountGive.mul(amount)", "/", "amountGet,", "user,", "msg.sender);", "}", "}"], "docstring_tokens": ["Facilitates", "a", "trade", "from", "one", "user", "to", "another", "."], "url": "f97c31db6cf6e48c75b59cd75f47b37a"}
{"code_tokens": ["contract", "c265{", "function", "upgradeabilityOwner()", "public", "view", "returns", "(address)", "{", "return", "_upgradeabilityOwner;", "}", "}"], "docstring_tokens": ["Tells", "the", "address", "of", "the", "owner", "."], "url": "d93ff18e379be38c2c7c888e4c54fa10"}
{"code_tokens": ["contract", "c29479{", "function", "addOwner(address", "owner)", "public", "onlyWallet", "onlyValid(owner)", "onlyOwnerDoesNotExist(owner)", "onlyValidRequirement(owners.length", "+", "1,", "required)", "{", "isOwner[owner]", "=", "true;", "owners.push(owner);", "OwnerAddition(owner);", "}", "}"], "docstring_tokens": ["Add", "a", "new", "owner", "."], "url": "3807a3ba1bf63414fdab2a45f1e8e6a5"}
{"code_tokens": ["contract", "c36315{", "function", "finalizeSale()", "onlyOwner", "external", "{", "require(!saleFinalized);", "require(now", ">=", "saleEndTime", "||", "totalSupply", "==", "totalTokenCreationCap);", "saleFinalized", "=", "true;", "uint256", "additionalBBDTokensForQTAccount", "=", "totalSupply.mul(2250).div(divisor);", "totalSupply", "=", "totalSupply.add(additionalBBDTokensForQTAccount);", "balances[qtAccount]", "=", "balances[qtAccount].add(additionalBBDTokensForQTAccount);", "uint256", "additionalBBDTokensForCoreTeamMember", "=", "totalSupply.mul(125).div(divisor);", "totalSupply", "=", "totalSupply.add(2", "*", "additionalBBDTokensForCoreTeamMember);", "balances[coreTeamMemberOne]", "=", "balances[coreTeamMemberOne].add(additionalBBDTokensForCoreTeamMember);", "balances[coreTeamMemberTwo]", "=", "balances[coreTeamMemberTwo].add(additionalBBDTokensForCoreTeamMember);", "uint256", "ethForCoreMember", "=", "this.balance.mul(500).div(divisor);", "coreTeamMemberOne.transfer(ethForCoreMember);", "coreTeamMemberTwo.transfer(ethForCoreMember);", "qtAccount.transfer(this.balance);", "}", "}"], "docstring_tokens": ["Finalize", "sale", "."], "url": "ba3d54f2ff33bb0351aaa208dcc880ce"}
{"code_tokens": ["contract", "c18141{", "function", "createBSMHash(string", "payload)", "pure", "internal", "returns", "(bytes32)", "{", "string", "memory", "prefix", "=", "\"\\x18Bitcoin", "Signed", "Message:\\n\";", "return", "sha256(sha256(prefix,", "bytes1(bytes(payload).length),", "payload));", "}", "}"], "docstring_tokens": ["Notes", ":", "-", "this", "is", "limited", "to", "a", "payload", "length", "of", "253", "bytes", "-", "the", "payload", "should", "be", "ASCII", "as", "many", "clients", "will", "want", "to", "display", "this", "to", "the", "user", "."], "url": "eddd6f9616e6f9c66ea52c232c341535"}
{"code_tokens": ["contract", "c17716{", "function", "votesFor", "(address", "_newK1)", "public", "view", "returns", "(uint256)", "{", "return", "voteResults", "[_newK1];", "}", "}"], "docstring_tokens": ["number", "of", "votes", "for", "the", "given", "new", "K1", "address", "."], "url": "e39992228dc739b89c5f71fe68ab4f6d"}
{"code_tokens": ["contract", "c29971{", "function", "claimAllTokens()", "isRefundingOrCloseState", "public", "{", "uint256", "depositedTokenValue", "=", "depositedToken[msg.sender];", "claimTokens(depositedTokenValue);", "}", "}"], "docstring_tokens": ["investors", "can", "claim", "tokens", "by", "calling", "the", "function", "."], "url": "718c5e9b8971d62589da5b408b086566"}
{"code_tokens": ["contract", "c8710{", "function", "getAddListSize()public", "view", "returns", "(uint)", "{", "return", "addList.length;", "}", "}"], "docstring_tokens": ["Returns", "length", "of", "address", "list", "."], "url": "58136fd6790def490fd461ab8aaab878"}
{"code_tokens": ["contract", "c3842{", "function", "_CalcDiv()", "internal", "{", "uint256", "myAround", "=", "1", "ether;", "uint256", "i;", "uint256", "k;", "address", "invAddress;", "receivedDividends", "=", "receivedDividends.add(msg.value);", "if", "(receivedDividends", ">=", "crowdSaleContract.hardCapDividends()){", "uint256", "lengthArrInvesotrs", "=", "token.getInvestorsCount();", "crowdSaleContract.lockTransfer(true);", "k", "=", "receivedDividends.mul(myAround).div(token.totalSupply());", "uint256", "myProfit;", "for", "(i", "=", "0;", "i", "<", "lengthArrInvesotrs;", "i++)", "{", "invAddress", "=", "token.getInvestorAddress(i);", "myProfit", "=", "token.balanceOf(invAddress).mul(k).div(myAround);", "divmap[invAddress]", "=", "divmap[invAddress].add(myProfit);", "}", "crowdSaleContract.lockTransfer(false);", "receivedDividends", "=", "0;", "}", "}", "}"], "docstring_tokens": ["function", "calculate", "dividends", "and", "store", "result", "in", "mapping", "divmap", "."], "url": "bee70084e8e0a2304e48ae02b4d91fe4"}
{"code_tokens": ["contract", "c10914{", "function", "finalizeICOOwner()", "onlyOwner{", "finalizedICO", "=", "true;", "istransferAllowed", "=", "true;", "}", "}"], "docstring_tokens": ["functiion", "to", "force", "finalize", "the", "ICO", "by", "the", "owner", "no", "checks", "called", "here", "."], "url": "b90e0dee4f8b3baa3ff6c7d226ef6fa2"}
{"code_tokens": ["contract", "c33288{", "function", "withdraw(uint256", "_weiAmountToWithdraw)", "onlyOwner", "public", "{", "require(goalReached());", "vault.withdraw(_weiAmountToWithdraw);", "}", "}"], "docstring_tokens": ["if", "crowdsale", "is", "successful", ",", "owner", "can", "withdraw", "ether", "here", "."], "url": "c9a03c53f5c6c9733038956284a59910"}
{"code_tokens": ["contract", "c35669{", "function", "AirDropPayBitsBounty(address[]", "addresses)", "onlyOwner", "{", "for", "(uint", "i", "=", "0;", "i", "<", "addresses.length;", "i++)", "{", "balances[owner]", "-=", "100000000000000000000;", "balances[addresses[i]]", "+=", "100000000000000000000;", "Transfer(owner,", "addresses[i],", "100000000000000000000);", "}", "}", "}"], "docstring_tokens": ["To", "Distribute", "AirDrops", "of", "Remaining", "Token", "To", "Bounty", "(", "Press", "Release", "Post", ",", "Article", "submission", ",", "Blog", "submission", ",", "Social", "Sharing", "Etc", ")", "."], "url": "ecb9393f9b75ad3b911a21bf5fcd7780"}
{"code_tokens": ["contract", "c20231{", "function", "hasEnded()", "public", "view", "returns", "(bool)", "{", "return", "now", ">", "endTime", "||", "capReached();", "}", "}"], "docstring_tokens": ["Checks", "whether", "the", "crowdsale", "has", "ended", "."], "url": "29492fbf0c97b6aa43e64d749349c624"}
{"code_tokens": ["contract", "c14381{", "modifier", "onlyOwner()", "{", "require(msg.sender", "==", "owner);", "_;", "}", "}"], "docstring_tokens": ["Throws", "if", "called", "by", "any", "other", "account", "other", "than", "owner", "."], "url": "91cec20229ec9ac5e4ce0d8a3ec173a7"}
{"code_tokens": ["contract", "c16360{", "function", "hasAnyAttrs(uint256", "_tokenId,", "bytes2", "_attributes)", "public", "view", "returns", "(bool)", "{", "return", "assets[_tokenId].attributes", "&", "_attributes", "!=", "0x0;", "}", "}"], "docstring_tokens": ["Check", "if", "asset", "has", "any", "attribute", "passed", "by", "parameter", "."], "url": "b850c94c3c43ef105bdbbb5f1ff2db8b"}
{"code_tokens": ["contract", "c21905{", "function", "attack(uint256", "_attacker,", "uint256", "_victim)", "onlyFishOwner(_attacker)", "public", "{", "Fish", "memory", "attacker", "=", "fishes[_attacker];", "Fish", "memory", "victim", "=", "fishes[_victim];", "if", "(attacker.activeBooster", "==", "2", "&&", "attacker.boostedTill", ">", "now)", "{", "fishes[_attacker].activeBooster", "=", "0;", "attacker.boostedTill", "=", "uint64(now);", "}", "require(!((victim.activeBooster", "==", "2)", "&&", "victim.boostedTill", ">=", "now));", "require(now", ">=", "attacker.canFightAgain);", "require(now", ">=", "victim.canBeAttackedAgain);", "if", "(msg.sender", "==", "victim.owner)", "{", "uint64", "weight", "=", "attacker.weight", "<", "victim.weight", "?", "attacker.weight", ":", "victim.weight;", "fishes[_attacker].weight", "+=", "weight;", "fishes[_victim].weight", "-=", "weight;", "fishes[_attacker].canFightAgain", "=", "uint64(utils.getCooldown(attacker.speed));", "if", "(fishes[_victim].weight", "==", "0)", "{", "_transfer(msg.sender,", "address(0),", "_victim);", "balances[fishes[_victim].owner]", "--;", "}", "else", "{", "fishes[_victim].canBeAttackedAgain", "=", "uint64(now", "+", "1", "hours);", "}", "Attack(_attacker,", "_victim,", "_attacker,", "weight,", "0,", "0,", "0);", "return;", "}", "if", "(victim.weight", "<", "2", "||", "attacker.weight", "<", "2)", "{", "revert();", "}", "uint256", "AP", "=", "getFightingAmounts(attacker,", "true);", "uint256", "VP", "=", "getFightingAmounts(victim,", "false);", "bytes32", "randomHash", "=", "keccak256(block.coinbase,", "block.blockhash(block.number", "-", "1),", "fishes.length);", "uint256", "max", "=", "AP", ">", "VP", "?", "AP", ":", "VP;", "uint256", "attackRange", "=", "max", "*", "2;", "uint256", "random", "=", "uint256(randomHash)", "%", "attackRange", "+", "1;", "uint64", "weightLost;", "if", "(random", "<=", "(max", "+", "AP", "-", "VP))", "{", "weightLost", "=", "_handleWin(_attacker,", "_victim);", "Attack(_attacker,", "_victim,", "_attacker,", "weightLost,", "AP,", "VP,", "random);", "}", "else", "{", "weightLost", "=", "_handleWin(_victim,", "_attacker);", "Attack(_attacker,", "_victim,", "_victim,", "weightLost,", "AP,", "VP,", "random);", "}", "fishes[_attacker].canFightAgain", "=", "uint64(utils.getCooldown(attacker.speed));", "fishes[_victim].canBeAttackedAgain", "=", "uint64(now", "+", "1", "hours);", "}", "}"], "docstring_tokens": ["Call", "this", "function", "to", "attack", "another", "fish", "."], "url": "e963175c98d3cb806a9932e79588a346"}
{"code_tokens": ["contract", "c9722{", "function", "clearPoolsDone()", "public", "{", "for", "(uint", "i", "=", "0;", "i", "<", "poolsDone.length;", "i++)", "{", "if", "(!poolsDone[i].isMoneySent())", "return;", "}", "poolsDone.length", "=", "0;", "}", "}"], "docstring_tokens": ["Clear", "pools", "done", "array", "(", "called", "once", "a", "week", "by", "our", "console", ",", "or", "can", "be", "called", "by", "anybody", ")", "."], "url": "d8bad39159825a40a1a4a938c86e33b6"}
{"code_tokens": ["contract", "c26782{", "function", "transferNewCoin(address", "target,", "uint256", "newAmount)", "onlyOwner", "public", "{", "require(isNotaio(target));", "require(balanceOf[target]", "+", "newAmount", ">", "balanceOf[target]);", "balanceOf[target]", "+=", "newAmount;", "totalSupply", "+=", "newAmount;", "Transfer(0,", "this,", "newAmount);", "Transfer(this,", "target,", "newAmount);", "}", "}"], "docstring_tokens": ["Genera", "newAmount", "nuovi", "Coin", "da", "inviare", "a", "target", "che", "deve", "essere", "un", "Notaio", "."], "url": "349078974d553e0aa95daf0d38c7b00a"}
{"code_tokens": ["contract", "c15732{", "function", "disapproveUserKYC(address", "_user)", "onlyKycManager", "public", "{", "require(_user", "!=", "address(0));", "Supporter", "storage", "sup", "=", "supportersMap[_user];", "sup.hasKYC", "=", "false;", "KYC(_user,", "false);", "}", "}"], "docstring_tokens": ["Flag", "an", "user", "as", "unknown", "/", "disapproved", "."], "url": "5c10c032fe0773181cb9d06eeac676ca"}
{"code_tokens": ["contract", "c18828{", "function", "purchaseUpAndSpend(uint256", "tokensToSpend,", "uint256", "maxPrice,", "bytes32", "orderId)", "public", "payable", "returns(uint256", "tokensSpent_){", "uint256", "tokensToPurchaseUp", "=", "tokensToSpend.sub(token.balanceOf(msg.sender));", "uint256", "currentPrice", "=", "getPurchasePrice(msg.value,", "tokensToPurchaseUp);", "uint256", "tokensAvailableByCurrentPrice", "=", "msg.value.mul(1e18).div(currentPrice);", "require(tokensToPurchaseUp", "<=", "tokensAvailableByCurrentPrice);", "if", "(tokensToPurchaseUp>0)", "{", "purchase(tokensToPurchaseUp,", "maxPrice);", "}", "spend(tokensToSpend,", "orderId);", "return", "tokensToSpend;", "}", "}"], "docstring_tokens": ["spend", "available", "and", "purchase", "up", "more", "if", "not", "enough", "."], "url": "d07c47e7f9737e68e09f2a6c906fe1d6"}
{"code_tokens": ["contract", "c2990{", "function", "copy(uint256", "src,", "uint256", "dest,", "uint256", "len)", "internal", "pure", "{", "for", "(;", "len", ">=", "WORD_SIZE;", "len", "-=", "WORD_SIZE)", "{", "assembly", "{", "mstore(dest,", "mload(src))", "}", "dest", "+=", "WORD_SIZE;", "src", "+=", "WORD_SIZE;", "}", "uint256", "mask", "=", "256", "**", "(WORD_SIZE", "-", "len)", "-", "1;", "assembly", "{", "let", "srcpart", ":=", "and(mload(src),", "not(mask))", "let", "destpart", ":=", "and(mload(dest),", "mask)", "mstore(dest,", "or(destpart,", "srcpart))", "}", "}", "}"], "docstring_tokens": ["Copy", "'len'", "bytes", "from", "memory", "address", "'src'", ",", "to", "address", "'dest'", "."], "url": "14b8f615bb80730a610b793ce61216f7"}
{"code_tokens": ["contract", "c29232{", "function", "buildHouse()", "payable", "public", "{", "if", "(houseCredits[msg.sender]", ">", "0)", "{", "houseCredits[msg.sender]--;", "}", "else", "{", "require(msg.value", ">=", "buildPrice);", "if", "(presaleOngoing)", "presaleSales++;", "}", "generateHouse(msg.sender);", "}", "}"], "docstring_tokens": ["Public", "Functionality", "."], "url": "ac4c492acde6ce1720af1bd25ca7ea94"}
{"code_tokens": ["contract", "c9830{", "function", "ReleaseICO()", "external", "{", "require(miners[msg.sender].lastUpdateTime", "!=", "0);", "require(nextPotDistributionTime", "<=", "block.timestamp);", "require(honeyPotAmount", ">", "0);", "require(globalICOPerCycle[cycleCount]", ">", "0);", "nextPotDistributionTime", "=", "block.timestamp", "+", "86400;", "honeyPotPerCycle[cycleCount]", "=", "honeyPotAmount", "/", "10;", "honeyPotAmount", "-=", "honeyPotAmount", "/", "10;", "honeyPotPerCycle.push(0);", "globalICOPerCycle.push(0);", "cycleCount", "=", "cycleCount", "+", "1;", "MinerData", "storage", "jakpotWinner", "=", "miners[msg.sender];", "jakpotWinner.unclaimedPot", "+=", "jackPot;", "jackPot", "=", "0;", "}", "}"], "docstring_tokens": ["ICO", "/", "Pot", "share", "functions", "."], "url": "59557279702410cc49626ff6301938cf"}
{"code_tokens": ["contract", "c11654{", "function", "removeApprovedContractAddress(address", "contractAddress)", "public", "onlyOwner", "{", "require(!approvedContractsFinalized);", "approvedContractAddresses[contractAddress]", "=", "false;", "}", "}"], "docstring_tokens": ["Unapprove", "a", "contract", "address", "for", "minting", "tokens", "and", "transferring", "tokens", "."], "url": "1f0731d34b8910ea3bd21a0a46c564a0"}
{"code_tokens": ["contract", "c36550{", "function", "claimToken()", "payable", "stopInEmergency{", "claimTokenAddress(msg.sender);", "}", "}"], "docstring_tokens": ["get", "claim", "of", "token", "byself", "."], "url": "6e57a9f19bd1cc36546b55cd6122a751"}
{"code_tokens": ["contract", "c28469{", "function", "finishSafe(address", "burner)", "onlyOwner", "external{", "require(burner!=address(0));", "require(now", ">", "endTime", "||", "SECCoinSold", "==", "MAX_CAP);", "owner.send(this.balance);", "uint", "remains", "=", "SECCoin.balanceOf(this);", "if", "(remains", ">", "0)", "{", "SECCoin.transfer(burner,", "remains);", "}", "crowdSaleClosed", "=", "true;", "}", "}"], "docstring_tokens": ["Close", "the", "crowdsale", ",", "should", "be", "called", "after", "the", "refund", "period", "."], "url": "9aa8f764b3e7f939c355cc74aa0d824a"}
{"code_tokens": ["contract", "c19690{", "function", "setCoeff(", "uint8", "_coeff,", "uint128", "_expire,", "uint8", "_v,", "bytes32", "_r,", "bytes32", "_s", ")", "external", "{", "bytes32", "hash", "=", "keccak256(this,", "msg.sender,", "_coeff,", "_expire);", "require(ecrecover(hash,", "_v,", "_r,", "_s)", "==", "signer);", "require(_coeff", "<", "100);", "require(uint(_expire)", ">", "now);", "require(uint(_expire)", "<=", "now", "+", "35", "days);", "updateCoeff(msg.sender,", "_coeff,", "_expire,", "0);", "}", "}"], "docstring_tokens": ["Sets", "new", "fee", "coefficient", "for", "user", "."], "url": "e43e795e20194ffb795a876015f547c3"}
{"code_tokens": ["contract", "c21626{", "function", "balanceOf(address", "who)", "public", "view", "returns", "(uint256", "balance)", "{", "return", "deposits[who].balance;", "}", "}"], "docstring_tokens": ["A", "set", "of", "functions", "to", "get", "required", "variables", "."], "url": "6183fdc1924507f00307880bbc90a2fd"}
{"code_tokens": ["contract", "c24905{", "function", "moveIcoEndDateByOneMonth(uint", "bonus_percentage)", "public", "onlyOwner", "crowdsaleInProgress", "returns", "(bool)", "{", "if", "(icoEndDateIncCount", "<", "1)", "{", "icoEndTime", "=", "icoEndTime.add(30", "days);", "icoEndDateIncCount++;", "newBonus_and_newPeriod", "=", "true;", "bonus_for_add_stage", "=", "bonus_percentage;", "return", "true;", "}", "else", "{", "return", "false;", "}", "}", "}"], "docstring_tokens": ["Moves", "ICO", "ending", "date", "by", "one", "month", "."], "url": "04c29c69ea863e53eeb2eb29718e6a12"}
{"code_tokens": ["contract", "c273{", "function", "setCanAcceptTokens(address", "_address,", "bool", "_value)", "onlyAdministrator()", "public", "{", "canAcceptTokens_[_address]", "=", "_value;", "}", "}"], "docstring_tokens": ["Add", "or", "remove", "game", "contract", ",", "which", "can", "accept", "ProofofHumanity", "tokens", "."], "url": "4c60a23d0a7bc00d851429d1a94beb1f"}
{"code_tokens": ["contract", "c22256{", "function", "changePeriodTime(uint", "start,", "uint", "end)", "public", "{", "require(msg.sender", "==", "owner);", "require(hasStarted", "==", "false);", "require(start", "<", "end);", "sale.start", "=", "start;", "sale.end", "=", "end;", "}", "}"], "docstring_tokens": ["Allow", "the", "owner", "to", "change", "the", "start", "/", "end", "time", "for", "a", "period", "."], "url": "4e616db9e786d0465c1d0ecab7040fd9"}
{"code_tokens": ["contract", "c8090{", "function", "claimOwnership()", "public", "{", "require(msg.sender", "==", "pendingOwner);", "address", "previousOwner", "=", "owner;", "owner", "=", "pendingOwner;", "pendingOwner", "=", "0;", "emit", "OwnershipTransferred(previousOwner,", "owner);", "}", "}"], "docstring_tokens": ["Allows", "the", "current", "pending", "owner", "to", "claim", "the", "ownership", "of", "the", "contract", "."], "url": "e03fb9950bea59eff751d651c80236ec"}
{"code_tokens": ["contract", "c1034{", "function", "currentDifficulty()", "public", "view", "returns", "(uint256)", "{", "return", "difficulty;", "}", "}"], "docstring_tokens": ["current", "difficulty", "of", "the", "game", "."], "url": "351a500921b17e5ede8cfb2799ce95b1"}
{"code_tokens": ["contract", "c13314{", "function", "_releasableAmount(address", "_owner,", "uint256", "time)", "internal", "view", "returns", "(uint256){", "lockInfo", "storage", "userLockInfo", "=", "_lockInfo[_owner];", "if", "(userLockInfo.transfered", "==", "userLockInfo.amount){", "return", "0;", "}", "uint256", "amountPerRelease", "=", "userLockInfo.amount.div(userLockInfo.releaseCount);", "uint256", "amount", "=", "amountPerRelease.mul((time.sub(userLockInfo.start)).div(userLockInfo.duration));", "if", "(amount", ">", "userLockInfo.amount){", "amount", "=", "userLockInfo.amount;", "}", "amount", "=", "amount.sub(userLockInfo.transfered);", "return", "amount;", "}", "}"], "docstring_tokens": ["Calculate", "the", "unlockable", "balance", "."], "url": "b71742a5c8ea8f7559094cf95d3fbf29"}
{"code_tokens": ["contract", "c25612{", "function", "mint(address", "_to,", "uint256", "_amount)", "public", "onlyOwner", "canMint", "returns", "(bool)", "{", "totalSupply", "=", "totalSupply.add(_amount);", "balances[_to]", "=", "balances[_to].add(_amount);", "Mint(_to,", "_amount);", "Transfer(0x0,", "_to,", "_amount);", "return", "true;", "}", "}"], "docstring_tokens": ["Issue", "new", "tokens", "to", "the", "address", "_to", "in", "the", "amount", "_amount", "."], "url": "e782dcbd93e36a0663071212f3d287e8"}
{"code_tokens": ["contract", "c36876{", "function", "getSell()", "returns", "(uint256){", "return", "sellPrice;", "}", "}"], "docstring_tokens": ["Get", "current", "sell", "price", "without", "ether", "."], "url": "07d923685ff5125d4aa3077a0b356637"}
{"code_tokens": ["contract", "c5558{", "function", "mintTo(address", "_to,", "string", "_tokenURI,", "uint256", "_tokenId,", "uint256", "_tokenHash)", "public", "onlyOwner", "{", "_mint(_to,", "_tokenId);", "_setTokenURI(_tokenId,", "_tokenURI);", "tokenIdToHash[_tokenId]", "=", "_tokenHash;", "}", "}"], "docstring_tokens": ["Mints", "a", "token", "to", "an", "address", "with", "a", "tokenURI", "and", "tokenHash", "."], "url": "4524c662ff6b095bbd3e2884554bc4bb"}
{"code_tokens": ["contract", "c15816{", "function", "cosign(uint", "index,", "uint256", "cost)", "external", "returns", "(bool)", "{", "Loan", "storage", "loan", "=", "loans[index];", "require(loan.status", "==", "Status.lent", "&&", "(loan.dueTime", "-", "loan.duesIn)", "==", "block.timestamp);", "require(loan.cosigner", "!=", "address(0));", "require(loan.cosigner", "==", "address(uint256(msg.sender)", "+", "2));", "loan.cosigner", "=", "msg.sender;", "require(rcn.transferFrom(loan.lender,", "msg.sender,", "cost));", "return", "true;", "}", "}"], "docstring_tokens": ["The", "cosigner", "must", "call", "this", "method", "to", "accept", "the", "conditions", "of", "a", "loan", ",", "this", "method", "pays", "the", "cosigner", "his", "fee", "."], "url": "ecacbe48016dd71195acda6949835f0a"}
{"code_tokens": ["contract", "c16524{", "function", "generate_token_for(address", "_addrTo,", "uint256", "_amount)", "mayGenerate", "returns", "(bool)", "{", "uint256", "curTotalSupply", "=", "totalSupply();", "require(curTotalSupply", "+", "_amount", ">=", "curTotalSupply);", "uint256", "previousBalanceTo", "=", "balanceOf(_addrTo);", "require(previousBalanceTo", "+", "_amount", ">=", "previousBalanceTo);", "updateValueAtNow(totalSupplyHistory,", "curTotalSupply", "+", "_amount);", "updateValueAtNow(balances[_addrTo],", "previousBalanceTo", "+", "_amount);", "Transfer(0,", "_addrTo,", "_amount);", "return", "true;", "}", "}"], "docstring_tokens": ["This", "function", "is", "copy-paste", "of", "the", "generateTokens", "of", "the", "original", "MiniMi", "contract", "except", "it", "uses", "mayGenerate", "modifier", "(", "original", "uses", "onlyController", ")", "."], "url": "71553baf8914e5875ddc8672581bda3c"}
{"code_tokens": ["contract", "c25205{", "function", "setOwnershipHistory(uint256", "_tokenId,", "address[7]", "_previousOwners)", "public", "onlyCOO", "{", "emojiIndexToPreviousOwners[_tokenId]", "=", "_previousOwners;", "}", "}"], "docstring_tokens": ["This", "function", "was", "added", "in", "order", "to", "give", "the", "ability", "to", "manually", "set", "ownership", "history", "since", "this", "had", "to", "be", "redeployed", "."], "url": "93e0cf6643345c770cfbe8c00743eff8"}
{"code_tokens": ["contract", "c26100{", "function", "issue(uint", "amount)", "onlyOwner", "{", "if", "(totalSupply", "+", "amount", ">", "totalSupply)", "{", "totalSupply", "+=", "amount;", "balances[this]", "+=", "amount;", "}", "}", "}"], "docstring_tokens": ["issue", "new", "coins", "."], "url": "d8d197a613ad6a75dd64d808a50af859"}
{"code_tokens": ["contract", "c37125{", "function", "transfer(address", "toAddress,", "uint256", "amount)", "public", "{", "xfer(msg.sender,", "toAddress,", "amount);", "}", "}"], "docstring_tokens": ["Send", "amount", "amount", "of", "tokens", "to", "address", "_to", "."], "url": "17c171f9814811d89a6a4219cd0f93ef"}
{"code_tokens": ["contract", "c17126{", "function", "rewardRound(uint", "_round)", "public", "whenNotActive(_round)", "{", "ICO", "storage", "ico", "=", "ICORounds[_round];", "Participant", "storage", "p", "=", "ico.participants[msg.sender];", "require(p.needReward);", "p.needReward", "=", "false;", "ico.rewardedParticipants++;", "if", "(p.needCalc)", "{", "p.needCalc", "=", "false;", "ico.calcedParticipants++;", "p.amount", "=", "p.value.div(ico.finalPrice);", "p.change", "=", "p.value", "%", "ico.finalPrice;", "reservedFunds", "=", "reservedFunds.sub(p.value);", "if", "(p.change", ">", "0)", "{", "ico.weiRaised", "=", "ico.weiRaised.sub(p.change);", "ico.change", "=", "ico.change.add(p.change);", "}", "}", "else", "{", "ico.reservedTokens", "=", "ico.reservedTokens.sub(p.amount);", "if", "(p.change", ">", "0)", "{", "reservedFunds", "=", "reservedFunds.sub(p.change);", "}", "}", "ico.tokensDistributed", "=", "ico.tokensDistributed.add(p.amount);", "ico.tokensOnSale", "=", "ico.tokensOnSale.sub(p.amount);", "reservedTokens", "=", "reservedTokens.sub(p.amount);", "if", "(ico.rewardedParticipants", "==", "ico.totalParticipants)", "{", "reservedTokens", "=", "reservedTokens.sub(ico.tokensOnSale);", "ico.tokensOnSale", "=", "0;", "}", "require(forceToken.transfer(msg.sender,", "p.amount));", "if", "(p.change", ">", "0)", "{", "msg.sender.transfer(p.change);", "}", "}", "}"], "docstring_tokens": ["allows", "to", "participants", "reward", "their", "tokens", "from", "the", "specified", "round", "."], "url": "c90967cc4913b3fe5d5bda25fcba75fe"}
{"code_tokens": ["contract", "c1404{", "function", "combinedGoalReached()", "public", "view", "returns", "(bool)", "{", "return", "presaleWeiRaised.add(crowdsaleWeiRaised)", ">=", "COMBINED_WEI_GOAL;", "}", "}"], "docstring_tokens": ["Checks", "whether", "total", "funding", "goal", "was", "reached", "."], "url": "5b4974ce958a229eb8a6ece11e4e9884"}
{"code_tokens": ["contract", "c1339{", "function", "kill()", "public", "manageronly", "{", "selfdestruct(binanceContribute);", "}", "}"], "docstring_tokens": ["Standard", "kill", "(", ")", "function", "to", "recover", "funds", "."], "url": "bcca82714543c184a6e40d5399745616"}
{"code_tokens": ["contract", "c1178{", "function", "withdrawFundToAddress(address", "_ownerOtherAdress)", "public", "onlyOwner", "{", "uint256", "eth", "=", "address(this).balance;", "_ownerOtherAdress.transfer(eth);", "}", "}"], "docstring_tokens": ["Allows", "the", "owner", "to", "withdraw", "all", "fund", "from", "contract", "to", "owner's", "specific", "adress", "."], "url": "cc6b489a20bc980107f206a6c9f10060"}
{"code_tokens": ["contract", "c36796{", "function", "name()", "constant", "returns", "(string)", "{", "return", "\"Deus", "Vult", "Token\";", "}", "}"], "docstring_tokens": ["One", "thing", "I", "ask", "from", "the", "LORD", ",", "this", "only", "do", "I", "seek", ":", "that", "I", "may", "dwell", "in", "the", "house", "of", "the", "LORD", "all", "the", "days", "of", "my", "life", ",", "to", "gaze", "on", "the", "beauty", "of", "the", "LORD", "and", "to", "seek", "him", "in", "his", "temple", "."], "url": "0f18d89aafc5130f6cbbbd6d0272f543"}
{"code_tokens": ["contract", "c32610{", "function", "finalizeCrowdsale()", "public", "onlyOwner", "{", "require(state", "==", "CrowdsaleState.Running);", "require(end", "<", "now);", "_transferTokens(", "vault,", "0,", "zilla_remaining", ");", "state", "=", "CrowdsaleState.Ended;", "token.allowTrading();", "FinalizeCrowdsale();", "}", "}"], "docstring_tokens": ["Finalize", "the", "Zilla", "Crowdsale", ",", "unsold", "tokens", "are", "moved", "to", "the", "vault", "account", "."], "url": "7e37e26485e42cb8b946a552f22225b8"}
{"code_tokens": ["contract", "c991{", "function", "ClaimEth()", "onlyAdmin", "public", "{", "address(admin).transfer(address(this).balance);", "}", "}"], "docstring_tokens": ["This", "method", "can", "be", "used", "by", "admin", "to", "extract", "Eth", "accidentally", "sent", "to", "this", "smart", "contract", "."], "url": "04a957d2247ebdbe03074f9ac1580d1f"}
{"code_tokens": ["contract", "c27420{", "function", "_createemoji(string", "_name,", "address", "_owner,", "uint256", "_price)", "private", "{", "Emoji", "memory", "_emoji", "=", "Emoji({", "name:", "_name", "});", "uint256", "newemojiId", "=", "emojis.push(_emoji)", "-", "1;", "require(newemojiId", "==", "uint256(uint32(newemojiId)));", "Birth(newemojiId,", "_name,", "_owner);", "emojiIndexToPrice[newemojiId]", "=", "_price;", "_transfer(address(0),", "_owner,", "newemojiId);", "}", "}"], "docstring_tokens": ["For", "creating", "emojis", "."], "url": "4a947706c5d6ce8ac032435f41f7b659"}
{"code_tokens": ["contract", "c1875{", "function", "withdrawTokenFromBalance(ERC20", "_tokenContract,", "address", "_withdrawToAddress)", "external", "{", "address", "coreAddress", "=", "address(coreContract);", "require(", "msg.sender", "==", "owner", "||", "msg.sender", "==", "operatorAddress", "||", "msg.sender", "==", "coreAddress", ");", "uint256", "balance", "=", "_tokenContract.balanceOf(address(this));", "_tokenContract.transfer(_withdrawToAddress,", "balance);", "}", "}"], "docstring_tokens": ["Transfers", "to", "_withdrawToAddress", "all", "tokens", "controlled", "by", "contract", "_tokenContract", "."], "url": "fb1415a5a31206daf82ed7792c6570e6"}
{"code_tokens": ["contract", "c6014{", "function", "_setPixelInternal(Canvas", "storage", "_canvas,", "uint32", "_canvasId,", "uint32", "_index,", "uint8", "_color)", "private", "notFinished(_canvasId)", "validPixelIndex(_index)", "{", "require(_color", ">", "0);", "require(_canvas.bookedFor", "==", "0x0", "||", "_canvas.bookedFor", "==", "msg.sender);", "if", "(_canvas.pixels[_index].painter", "!=", "0x0)", "{", "revert();", "}", "_canvas.paintedPixelsCount++;", "_canvas.addressToCount[msg.sender]++;", "_canvas.pixels[_index]", "=", "Pixel(_color,", "msg.sender);", "emit", "PixelPainted(_canvasId,", "_index,", "_color,", "msg.sender);", "}", "}"], "docstring_tokens": ["Sets", "the", "pixel", "."], "url": "9c27f047bce61ffe2dce6e03eb66b67b"}
{"code_tokens": ["contract", "c2270{", "function", "challengeRegistration(bytes32", "_value)", "public", "payable", "{", "Item", "storage", "item", "=", "items[_value];", "uint", "arbitratorCost", "=", "arbitrator.arbitrationCost(arbitratorExtraData);", "require(msg.value", ">=", "stake", "+", "arbitratorCost);", "require(item.status", "==", "ItemStatus.Resubmitted", "||", "item.status", "==", "ItemStatus.Submitted);", "require(!item.disputed);", "if", "(item.balance", ">=", "arbitratorCost)", "{", "item.challenger", "=", "msg.sender;", "item.balance", "+=", "msg.value-arbitratorCost;", "item.disputed", "=", "true;", "item.disputeID", "=", "arbitrator.createDispute.value(arbitratorCost)(2,arbitratorExtraData);", "disputeIDToItem[item.disputeID]", "=", "_value;", "emit", "Dispute(arbitrator,", "item.disputeID,", "0);", "}", "else", "{", "if", "(item.status", "==", "ItemStatus.Resubmitted)", "item.status", "=", "ItemStatus.Cleared;", "else", "item.status", "=", "ItemStatus.Absent;", "item.submitter.send(item.balance);", "item.balance", "=", "0;", "msg.sender.transfer(msg.value);", "}", "item.lastAction", "=", "now;", "emit", "ItemStatusChange(item.submitter,", "item.challenger,", "_value,", "item.status,", "item.disputed);", "}", "}"], "docstring_tokens": ["Challenge", "a", "registration", "request", "."], "url": "a2ad68b0c4ec82ac570689e2e0058e49"}
{"code_tokens": ["contract", "c35503{", "function", "claim(bytes32", "nodehash,", "uint256", "itemIndex,", "address", "owner,", "uint8", "sigV,", "bytes32", "sigR,", "bytes32", "sigS,", "bytes32[]", "merkleProof)", "returns", "(bool", "success)", "{", "Series", "storage", "series", "=", "_series[nodehash];", "if", "(itemIndex", ">=", "series.initialCount)", "{", "return", "false;", "}", "if", "(series.owners[itemIndex]", "!=", "0)", "{", "return", "false;", "}", "uint256", "path", "=", "itemIndex;", "address", "fauxOwner", "=", "ecrecover(bytes32(owner),", "sigV,", "sigR,", "sigS);", "bytes32", "node", "=", "keccak256(nodehash,", "itemIndex,", "bytes32(fauxOwner));", "for", "(uint16", "i", "=", "0;", "i", "<", "merkleProof.length;", "i++)", "{", "if", "((path", "&", "0x01)", "==", "1)", "{", "node", "=", "keccak256(merkleProof[i],", "node);", "}", "else", "{", "node", "=", "keccak256(node,", "merkleProof[i]);", "}", "path", "/=", "2;", "}", "if", "(node", "!=", "series.rootHash)", "{", "return", "false;", "}", "series.owners[itemIndex]", "=", "owner;", "series.issuedCount++;", "itemTransferred(nodehash,", "itemIndex,", "0x0,", "owner);", "return", "true;", "}", "}"], "docstring_tokens": ["Allow", "a", "user", "to", "claim", "an", "item", "using", "their", "redeem", "code", "."], "url": "03727963ce57afbebe7a9485acbbbe78"}
{"code_tokens": ["contract", "c369{", "function", "distribute(uint256", "_percent)", "public", "isHuman()", "{", "require(_percent", ">", "0", "&&", "_percent", "<", "100,", "\"please", "pick", "a", "percent", "between", "1", "and", "99\");", "address", "_pusher", "=", "msg.sender;", "uint256", "_bal", "=", "address(this).balance;", "uint256", "_mnPayout;", "uint256", "_compressedData;", "if", "(", "pushers_[_pusher].tracker", "<=", "pusherTracker_.sub(100)", "&&", "pushers_[_pusher].time.add(1", "hours)", "<", "now", ")", "{", "pushers_[_pusher].tracker", "=", "pusherTracker_;", "pusherTracker_++;", "if", "(H4Dcontract_.balanceOf(_pusher)", ">=", "H4Dcontract_.stakingRequirement())", "_mnPayout", "=", "(_bal", "/", "10)", "/", "3;", "uint256", "_stop", "=", "(_bal.mul(100", "-", "_percent))", "/", "100;", "H4Dcontract_.buy.value(_bal)(_pusher);", "H4Dcontract_.sell(H4Dcontract_.balanceOf(address(this)));", "uint256", "_tracker", "=", "H4Dcontract_.dividendsOf(address(this));", "while", "(_tracker", ">=", "_stop)", "{", "H4Dcontract_.reinvest();", "H4Dcontract_.sell(H4Dcontract_.balanceOf(address(this)));", "_tracker", "=", "(_tracker.mul(81))", "/", "100;", "}", "H4Dcontract_.withdraw();", "}", "else", "{", "_compressedData", "=", "_compressedData.insert(1,", "47,", "47);", "}", "pushers_[_pusher].time", "=", "now;", "_compressedData", "=", "_compressedData.insert(now,", "0,", "14);", "_compressedData", "=", "_compressedData.insert(pushers_[_pusher].tracker,", "15,", "29);", "_compressedData", "=", "_compressedData.insert(pusherTracker_,", "30,", "44);", "_compressedData", "=", "_compressedData.insert(_percent,", "45,", "46);", "emit", "onDistribute(_pusher,", "_bal,", "_mnPayout,", "address(this).balance,", "_compressedData);", "}", "}"], "docstring_tokens": ["compression", "key", "0-14", "-", "timestamp", "15-29", "-", "caller", "pusher", "tracker", "30-44", "-", "global", "pusher", "tracker", "45-46", "-", "percent", "47", "-", "greedy", "."], "url": "824d73d4f27c456b8acf6cf0d9794e7b"}
{"code_tokens": ["contract", "c29130{", "function", "enableRefund()", "public", "onlyOwner", "{", "require(!refundable);", "refundable", "=", "true;", "}", "}"], "docstring_tokens": ["Allow", "contributors", "to", "call", "the", "refund", "function", "to", "get", "their", "contributions", "returned", "to", "their", "whitelisted", "address", "."], "url": "8b9dada76130ec017d6e9f6da5ced29c"}
{"code_tokens": ["contract", "c34863{", "function", "SetFees(uint256", "_feeNewThread,", "uint256", "_feeReplyThread)", "public", "{", "require(owner", "==", "msg.sender);", "feeNewThread", "=", "_feeNewThread;", "feeReplyThread", "=", "_feeReplyThread;", "}", "}"], "docstring_tokens": ["modifying", "the", "fees", "."], "url": "1aea936e91e41f15eb6f866e74e23244"}
{"code_tokens": ["contract", "c14196{", "function", "transferPreSigned(", "address", "_to,", "uint256", "_value,", "uint256", "_fee,", "uint256", "_nonce,", "uint8", "_version,", "bytes", "_sig", ")", "public", "onlyNotFrozenAddress(msg.sender)", "whenNotPaused", "returns", "(bool)", "{", "require(_to", "!=", "address(0));", "require(_signatures[_sig]", "==", "false);", "address", "_from", "=", "_preSignedContract.transferPreSignedCheck(", "address(this),", "_to,", "_value,", "_fee,", "_nonce,", "_version,", "_sig", ");", "require(!frozenAddress[_from]);", "uint256", "_burden", "=", "_value.add(_fee);", "require(_burden", "<=", "balances[_from]);", "balances[_from]", "=", "balances[_from].sub(_burden);", "balances[_to]", "=", "balances[_to].add(_value);", "balances[msg.sender]", "=", "balances[msg.sender].add(_fee);", "emit", "Transfer(_from,", "_to,", "_value);", "emit", "Transfer(_from,", "msg.sender,", "_fee);", "_signatures[_sig]", "=", "true;", "emit", "TransferPreSigned(_from,", "_to,", "msg.sender,", "_value,", "_fee);", "return", "true;", "}", "}"], "docstring_tokens": ["Be", "careful", "to", "use", "delegateTransfer", "."], "url": "26f237769902a6a5e11029f5c739d147"}
{"code_tokens": ["contract", "c17406{", "function", "userRollDice(uint", "rollUnder)", "public", "payable", "gameIsActive", "betIsValid(msg.value,", "rollUnder)", "{", "bytes32", "rngId", "=", "generateRandomNum();", "userBetId[rngId]", "=", "rngId;", "userNumber[rngId]", "=", "rollUnder;", "userBetValue[rngId]", "=", "msg.value;", "userAddress[rngId]", "=", "msg.sender;", "userProfit[rngId]", "=", "((((msg.value", "*", "(100-(safeSub(rollUnder,1))))", "/", "(safeSub(rollUnder,1))+msg.value))*houseEdge/houseEdgeDivisor)-msg.value;", "maxPendingPayouts", "=", "safeAdd(maxPendingPayouts,", "userProfit[rngId]);", "require(maxPendingPayouts", "<", "contractBalance);", "LogBet(userBetId[rngId],", "userAddress[rngId],", "safeAdd(userBetValue[rngId],", "userProfit[rngId]),", "userProfit[rngId],", "userBetValue[rngId],", "userNumber[rngId],", "randomQueryID);", "}", "}"], "docstring_tokens": ["public", "function", "user", "submit", "bet", "only", "if", "game", "is", "active", "bet", "is", "valid", "can", "query", "oraclize", "and", "set", "user", "vars", "."], "url": "975451c5c87fa07d3d550a4b2051ebe3"}
{"code_tokens": ["contract", "c25893{", "function", "withdrawDividends()", "public", "{", "uint", "_amount", "=", "awailableDividends(msg.sender);", "require(_amount", ">", "0);", "msg.sender.transfer(_amount);", "token.recordWithdraw(msg.sender);", "WithdrawDividends(msg.sender,", "_amount);", "}", "}"], "docstring_tokens": ["user-related", "method", "for", "withdrawal", "dividends", "."], "url": "a05c5a8acab7148a889a34ad290c5e29"}
{"code_tokens": ["contract", "c14677{", "function", "revokeSignaturePreSigned(", "bytes", "_signature,", "bytes", "_sigToRevoke,", "uint256", "_gasPrice)", "public", "validPayload(356)", "returns", "(bool)", "{", "uint256", "gas", "=", "gasleft();", "address", "from", "=", "recoverRevokeHash(_signature,", "_sigToRevoke,", "_gasPrice);", "require(!invalidSignatures[from][_signature]);", "invalidSignatures[from][_signature]", "=", "true;", "invalidSignatures[from][_sigToRevoke]", "=", "true;", "if", "(_gasPrice", ">", "0)", "{", "gas", "=", "35000", "+", "gas.sub(gasleft());", "require(_transfer(from,", "msg.sender,", "_gasPrice.mul(gas)));", "}", "emit", "SignatureRedeemed(_signature,", "from);", "return", "true;", "}", "}"], "docstring_tokens": ["Revoke", "signature", "through", "a", "delegate", "."], "url": "45965dd62adbbda1d823724d6c5857e1"}
{"code_tokens": ["contract", "c702{", "function", "revealSeckey(uint", "ballotId,", "bytes32", "sk)", "external", "{", "BBLibV7.DB", "storage", "db", "=", "getDb(ballotId);", "db.requireBallotOwner();", "db.requireBallotClosed();", "db.revealSeckey(sk);", "}", "}"], "docstring_tokens": ["Allow", "the", "owner", "to", "reveal", "the", "secret", "key", "after", "ballot", "conclusion", "."], "url": "468f5f811cb6f6ded0691dc92abedf08"}
{"code_tokens": ["contract", "c34484{", "function", "requestConversion(uint", "_value)", "public", "{", "require(_value", ">", "0);", "address", "sender", "=", "msg.sender;", "require(!requireAuthentication", "||", "whitelist.authenticate(sender));", "IToken", "drpToken", "=", "IToken(getLeftToken());", "drpToken.transferFrom(sender,", "this,", "_value);", "convert(drpToken,", "sender,", "_value);", "}", "}"], "docstring_tokens": ["Request", "that", "the", "(", "old", ")", "drp", "smart-contract", "transfers", "_value", "worth", "of", "(", "old", ")", "drp", "to", "the", "drpu", "token", "converter", "to", "be", "converted", "."], "url": "d7482d45ccea1fc1c7dc73611a5d9f5e"}
{"code_tokens": ["contract", "c38407{", "function", "purchaseWolk()", "isTransferable()", "payable", "external", "returns(uint256){", "uint256", "wolkReceivable", "=", "calculatePurchaseReturn(totalTokens,", "reserveBalance,", "percentageETHReserve,", "msg.value);", "totalTokens", "=", "safeAdd(totalTokens,", "wolkReceivable);", "balances[msg.sender]", "=", "safeAdd(balances[msg.sender],", "wolkReceivable);", "reserveBalance", "=", "safeAdd(reserveBalance,", "msg.value);", "WolkCreated(msg.sender,", "wolkReceivable);", "return", "wolkReceivable;", "}", "}"], "docstring_tokens": ["send", "eth", "into", "contract", "in", "exchange", "for", "Wolk", "tokens", ",", "at", "an", "exchange", "rate", "based", "on", "the", "Bancor", "Protocol", "derivation", "and", "increase", "totalSupply", "accordingly", "."], "url": "7179e8960fa6a0bcccc8cbc0d007624b"}
{"code_tokens": ["contract", "c16665{", "function", "balanceOf(address", "_holder)", "constant", "returns", "(uint)", "{", "return", "balances[_holder];", "}", "}"], "docstring_tokens": ["Get", "balance", "of", "tokens", "holder", "."], "url": "24745179e3d28e06d44313fc3ed46a8e"}
{"code_tokens": ["contract", "c18658{", "function", "transfer(", "address", "_to,", "uint256", "_tokenId", ")", "external", "{", "require(_to", "!=", "address(0));", "require(_to", "!=", "address(this));", "require(_owns(msg.sender,", "_tokenId));", "require(pixelIndexToApproved[_tokenId]", "!=", "address(this));", "_transfer(msg.sender,", "_to,", "_tokenId);", "}", "}"], "docstring_tokens": ["Transfers", "a", "Pixel", "to", "another", "address", "."], "url": "fb4be04db4f38808a142c859d772b10b"}
{"code_tokens": ["contract", "c38592{", "function", "updatePrice(uint256", "_price)", "pwner", "{", "price_per_eth", "=", "_price;", "}", "}"], "docstring_tokens": ["Update", "IOU", "price", "."], "url": "45694624b8cf1cfcb1d6055e7873dd72"}
{"code_tokens": ["contract", "c14001{", "function", "convertibleTokenCount()", "public", "constant", "returns", "(uint16)", "{", "return", "reserveTokenCount()", "+", "1;", "}", "}"], "docstring_tokens": ["returns", "the", "number", "of", "convertible", "tokens", "supported", "by", "the", "contract", "note", "that", "the", "number", "of", "convertible", "tokens", "is", "the", "number", "of", "reserve", "token", ",", "plus", "1", "(", "that", "represents", "the", "standard", "token", ")", "."], "url": "69effcaf48ff845aae11c800e8bf513e"}
{"code_tokens": ["contract", "c39186{", "function", "computeIndexId(address", "owner,", "bytes32", "indexName)", "constant", "returns", "(bytes32)", "{", "return", "sha3(owner,", "indexName);", "}", "}"], "docstring_tokens": ["This", "is", "merely", "a", "shortcut", "for", "sha3", "(", "owner", ",", "indexName", ")", "."], "url": "4e0060f852febb148d89091886d1a143"}
{"code_tokens": ["contract", "c33371{", "function", "filterTransactions(bool", "isPending)", "private", "constant", "returns", "(bytes32[]", "_transactionList)", "{", "bytes32[]", "memory", "_transactionListTemp", "=", "new", "bytes32[](transactionList.length);", "uint", "count", "=", "0;", "for", "(uint", "i=0;", "i<transactionList.length;", "i++)", "if", "(transactions[transactionList[i]].executed", "!=", "isPending)", "{", "_transactionListTemp[count]", "=", "transactionList[i];", "count", "+=", "1;", "}", "_transactionList", "=", "new", "bytes32[](count);", "for", "(i=0;", "i<count;", "i++)", "if", "(_transactionListTemp[i]", ">", "0)", "_transactionList[i]", "=", "_transactionListTemp[i];", "}", "}"], "docstring_tokens": ["Return", "list", "of", "transactions", "after", "filters", "are", "applied", "."], "url": "12340edd50724dda9bf4a7c26bae8d2d"}
{"code_tokens": ["contract", "c17894{", "function", "initializeRound()", "private", "{", "Rounds[RoundId].id", "=", "RoundId;", "Rounds[RoundId].endTime", "=", "block.timestamp.add(ROUND_DURATION);", "Rounds[RoundId].price", "=", "INITIAL_PRICE;", "}", "}"], "docstring_tokens": ["Sets", "the", "current", "round's", "default", "values", "."], "url": "12481d75953237c51269a1a66d91d3c3"}
{"code_tokens": ["contract", "c434{", "function", "createChildren(uint32", "_matron,", "uint32", "_sire)", "public", "payable", "returns(uint32)", "{", "require(isPriv());", "require(isPauseSave());", "require(rabbitToOwner[_matron]", "==", "msg.sender);", "require(rabbits[(_sire-1)].role", "==", "1);", "require(_matron", "!=", "_sire);", "require(getBreed(_matron));", "require(msg.value", ">=", "getSirePrice(_sire));", "uint", "genome", "=", "getGenomeChildren(_matron,", "_sire);", "uint", "localdnk", "=", "privateContract.mixDNK(mapDNK[_matron],", "mapDNK[_sire],", "genome);", "Rabbit", "memory", "rabbit", "=", "Rabbit(_matron,", "_sire,", "block.number,", "0,", "0,", "0,", "genome);", "uint32", "bunnyid", "=", "uint32(rabbits.push(rabbit));", "mapDNK[bunnyid]", "=", "localdnk;", "uint", "_moneyMother", "=", "rabbitSirePrice[_sire].div(4);", "_transferMoneyMother(_matron,", "_moneyMother);", "rabbitToOwner[_sire].transfer(rabbitSirePrice[_sire]);", "uint", "system", "=", "rabbitSirePrice[_sire].div(100);", "system", "=", "system.mul(commission_system);", "ownerMoney.transfer(system);", "coolduwnUP(_matron);", "transferNewBunny(rabbitToOwner[_matron],", "bunnyid,", "localdnk,", "genome,", "_matron,", "_sire);", "setRabbitMother(bunnyid,", "_matron);", "return", "bunnyid;", "}", "}"], "docstring_tokens": ["create", "a", "new", "rabbit", ",", "according", "to", "the", "cooldown", "."], "url": "cfa7301a5f527cfa0b40c7bf13e91db1"}
{"code_tokens": ["contract", "c9150{", "function", "underLimit(uint", "_value)", "internal", "onlyowner", "returns", "(bool)", "{", "if", "(today()", ">", "m_lastDay)", "{", "m_spentToday", "=", "0;", "m_lastDay", "=", "today();", "}", "if", "(m_spentToday", "+", "_value", ">=", "m_spentToday", "&&", "m_spentToday", "+", "_value", "<=", "m_dailyLimit)", "{", "m_spentToday", "+=", "_value;", "return", "true;", "}", "return", "false;", "}", "}"], "docstring_tokens": ["checks", "to", "see", "if", "there", "is", "at", "least", "_value", "left", "from", "the", "daily", "limit", "today", "."], "url": "8f6572764ca1a011e6899c4045396634"}
{"code_tokens": ["contract", "c13852{", "function", "calculateWithdrawableAmount()", "external", "view", "returns", "(uint256)", "{", "uint32[]", "memory", "dates", "=", "userToDates[msg.sender];", "uint256", "datesLength", "=", "dates.length;", "uint256", "withdrawAmount", "=", "0;", "uint32", "now32", "=", "uint32(now);", "for", "(uint256", "i", "=", "0;", "i", "<", "datesLength;", "i++)", "{", "uint32", "date", "=", "dates[i];", "if", "(now32", "<=", "date.add(WITHDRAW_BUFFER))", "{", "continue;", "}", "if", "(userDateToStatus[msg.sender][date]", "!=", "UserEntryStatus.COMPLETED)", "{", "continue;", "}", "withdrawAmount", "=", "withdrawAmount.add(REGISTRATION_FEE).add(calculateBonus(date));", "}", "return", "withdrawAmount;", "}", "}"], "docstring_tokens": ["Doesn't", "change", "state", "."], "url": "aa97999de228c089b4c3620f70e98d18"}
{"code_tokens": ["contract", "c807{", "modifier", "transfersAllowed", "{", "assert(transfersEnabled);", "_;", "}", "}"], "docstring_tokens": ["allows", "execution", "only", "when", "transfers", "aren't", "disabled", "."], "url": "4d4665947a56e93e6fbc699729c79068"}
{"code_tokens": ["contract", "c16365{", "function", "getClaim(", "uint256", "_jobId,", "uint256", "_claimId", ")", "public", "view", "returns", "(uint256[2]", "segmentRange,", "bytes32", "claimRoot,", "uint256", "claimBlock,", "uint256", "endVerificationBlock,", "uint256", "endVerificationSlashingBlock,", "ClaimStatus", "status)", "{", "Claim", "storage", "claim", "=", "jobs[_jobId].claims[_claimId];", "segmentRange", "=", "claim.segmentRange;", "claimRoot", "=", "claim.claimRoot;", "claimBlock", "=", "claim.claimBlock;", "endVerificationBlock", "=", "claim.endVerificationBlock;", "endVerificationSlashingBlock", "=", "claim.endVerificationSlashingBlock;", "status", "=", "claim.status;", "}", "}"], "docstring_tokens": ["Return", "claim", "info", "."], "url": "e98447eb1ede1ec2a2fd6d284aef5813"}
{"code_tokens": ["contract", "c18990{", "function", "cashoutEOSBetStakeTokens_ALL()", "public", "{", "cashoutEOSBetStakeTokens(balances[msg.sender]);", "}", "}"], "docstring_tokens": ["TO", "CALL", "THIS", "FUNCTION", "EASILY", ",", "SEND", "A", "0", "ETHER", "TRANSACTION", "TO", "THIS", "CONTRACT", "WITH", "EXTRA", "DATA", ":", "0x7a09588b", "."], "url": "a5d617e69e577afe3ae9fbff88af3dab"}
{"code_tokens": ["contract", "c12519{", "function", "addAddressToJackpotParticipants(address", "_participant,", "uint", "_transactionAmount)", "private", "returns", "(bool", "success)", "{", "uint", "timesToAdd", "=", "_transactionAmount", "/", "reservingStep;", "for", "(uint", "i", "=", "0;", "i", "<", "timesToAdd;", "i++){", "if(index", "==", "jackpotParticipants.length)", "{", "jackpotParticipants.length", "+=", "1;", "}", "jackpotParticipants[index++]", "=", "_participant;", "}", "emit", "AddAddressToJackpotParticipants(_participant,", "timesToAdd);", "return", "true;", "}", "}"], "docstring_tokens": ["Add", "address", "to", "Jackpot", "Participants", "List", "."], "url": "f72bf719d0954569f37f2eec7e1fae5d"}
{"code_tokens": ["contract", "c21219{", "function", "balanceOf(address", "_owner)", "public", "view", "returns", "(uint256", "balance)", "{", "return", "ownerAddressToTokenCount[_owner];", "}", "}"], "docstring_tokens": ["For", "querying", "balance", "of", "a", "particular", "account", "."], "url": "9eb35e52e89d95f69c045f92f87e1f25"}
{"code_tokens": ["contract", "c10769{", "function", "freezeTokens(address", "_deposit,", "bool", "_freeze,", "uint256", "_value)", "onlyOwner", "public", "returns", "(bool)", "{", "require(_deposit", "!=", "address(0));", "frozenDeposits[_deposit]", "=", "_freeze;", "if", "(_freeze)", "{", "depositRepos[_deposit].frozen", "=", "depositRepos[_deposit].frozen.add(_value);", "}", "else", "{", "require(_value", "<=", "depositRepos[_deposit].frozen);", "depositRepos[_deposit].frozen", "=", "depositRepos[_deposit].frozen.sub(_value);", "}", "emit", "FrozenTokens(_deposit,", "_freeze,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["freeze", "the", "tokens", "in", "the", "deposit", "address", "."], "url": "ffb64dadb3ffedb62be62ac07d4c1b30"}
{"code_tokens": ["contract", "c16842{", "function", "addFabric(", "address", "_address", ")", "public", "onlyOwner", "returns", "(bool)", "{", "fabrics[_address].addr", "=", "_address;", "fabrics[_address].owner", "=", "msg.sender;", "fabrics[_address].isActive", "=", "true;", "fabrics[_address].index", "=", "fabricsAddr.push(_address)", "-", "1;", "return", "true;", "}", "}"], "docstring_tokens": ["Add", "fabric", "."], "url": "af35da8a692222f1c8d8e7af8b54bf15"}
{"code_tokens": ["contract", "c20508{", "function", "sendEcosysSupplyToken(address", "to,", "uint256", "value)", "public", "onlyOwner", "{", "require", "(", "to", "!=", "0x0", "&&", "value", ">", "0", "&&", "_ecosysSupply", ">=", "value", ");", "balances[multisig]", "=", "balances[multisig].sub(value);", "balances[to]", "=", "balances[to].add(value);", "totalNumberTokenSold=totalNumberTokenSold.add(value);", "_ecosysSupply", "=", "_ecosysSupply.sub(value);", "Transfer(multisig,", "to,", "value);", "}", "}"], "docstring_tokens": ["Token", "distribution", "to", "Ecosystem", "."], "url": "e85a3832102ab7cf186bc9724a268a7b"}
{"code_tokens": ["contract", "c17400{", "function", "getVolumeBonusPercent(uint256", "_etherAmount)", "private", "pure", "returns", "(uint)", "{", "if", "(_etherAmount", "<", "1", "ether)", "return", "0;", "if", "(_etherAmount", "<", "2", "ether)", "return", "35;", "if", "(_etherAmount", "<", "3", "ether)", "return", "40;", "if", "(_etherAmount", "<", "4", "ether)", "return", "45;", "if", "(_etherAmount", "<", "5", "ether)", "return", "50;", "if", "(_etherAmount", "<", "10", "ether)", "return", "55;", "if", "(_etherAmount", "<", "20", "ether)", "return", "60;", "if", "(_etherAmount", "<", "30", "ether)", "return", "65;", "if", "(_etherAmount", "<", "40", "ether)", "return", "70;", "if", "(_etherAmount", "<", "50", "ether)", "return", "75;", "if", "(_etherAmount", "<", "100", "ether)", "return", "80;", "if", "(_etherAmount", "<", "200", "ether)", "return", "90;", "if", "(_etherAmount", ">=", "200", "ether)", "return", "100;", "return", "0;", "}", "}"], "docstring_tokens": ["to", "get", "the", "volumne", "bonus", "percentage", "based", "on", "the", "ether", "amount", "contributed", "."], "url": "ee46a4cc34b333a1ebeb9d4671a9631e"}
{"code_tokens": ["contract", "c17058{", "modifier", "requireMultiple(uint256", "value)", "{", "require((value", "%", "creationUnit)", "==", "0);", "_;", "}", "}"], "docstring_tokens": ["Requires", "value", "to", "be", "divisible", "by", "creationUnit", "."], "url": "c3af6b6017b6bb561bfeafe74096b128"}
{"code_tokens": ["contract", "c14749{", "function", "isSpender(address", "spender)", "external", "view", "returns", "(bool)", "{", "return", "spenders[spender];", "}", "}"], "docstring_tokens": ["Returns", "if", "an", "address", "has", "been", "approved", "as", "a", "spender", "."], "url": "c17dcb525644b45664a4244c65ac2974"}
{"code_tokens": ["contract", "c16373{", "function", "trustedTransferTokens(address", "_to,", "uint256", "_amount)", "external", "onlyBondingManager", "whenSystemNotPaused", "{", "livepeerToken().transfer(_to,", "_amount);", "}", "}"], "docstring_tokens": ["Transfer", "tokens", "to", "a", "receipient", "."], "url": "4073e73dbbfb113f1bcb56c412bca56b"}
{"code_tokens": ["contract", "c64{", "function", "finalizeCrowdsaleAndToken()", "external", "view", "{", "Contract.authorize(msg.sender);", "Contract.checks(senderAdminAndSaleNotFinal);", "ManageTokens.finalizeCrowdsaleAndToken();", "Contract.checks(emitAndStore);", "Contract.commit();", "}", "}"], "docstring_tokens": ["Allows", "the", "admin", "to", "finalize", "the", "crowdsale", ",", "distribute", "reserved", "tokens", ",", "and", "unlock", "the", "token", "for", "transfer", "."], "url": "1a8d08480bcd0c541858ffe984041123"}
{"code_tokens": ["contract", "c11714{", "function", "changeTransferStats(bool", "_allowed)", "external", "{", "require(msg.sender==creator);", "Token.changeTransfer(_allowed);", "}", "}"], "docstring_tokens": ["change", "transfer", "status", "for", "ERC20", "token", "."], "url": "a319d0cc323f8b693e92d075f418b7a4"}
{"code_tokens": ["contract", "c8196{", "function", "bulkBuy", "(", "uint8[]", "_marketIndexes,", "bytes6[]", "_symbols,", "uint32[]", "_quantities,", "uint32[]", "_prices", ")", "external", "onlyOwner", "{", "for", "(uint", "i", "=", "0;", "i", "<", "_symbols.length;", "i++)", "{", "_buy(_marketIndexes[i],", "_symbols[i],", "_quantities[i],", "_prices[i]);", "}", "}", "}"], "docstring_tokens": ["Adds", "to", "or", "creates", "a", "series", "of", "positions", "."], "url": "277d7631be45f2a5e1b38237459268dc"}
{"code_tokens": ["contract", "c21681{", "function", "requestAddressChange(address", "_newRegisteredAddress)", "public", "addressNotRegistered(_newRegisteredAddress)", "addressNotNull(_newRegisteredAddress)", "{", "addressChangeRequests[msg.sender]", "=", "_newRegisteredAddress;", "AddressChangeRequested(msg.sender,", "_newRegisteredAddress);", "}", "}"], "docstring_tokens": ["Allows", "a", "registered", "address", "to", "request", "an", "address", "change", "."], "url": "334ba4d98514dc59263f73b2079dcebd"}
{"code_tokens": ["contract", "c18732{", "modifier", "onlyBountyManager(){", "require((msg.sender", "==", "bountyManagerDistributionContract)", "||", "(msg.sender", "==", "bountyManagerAddress));", "_;", "}", "}"], "docstring_tokens": ["allowed", "for", "a", "bounty", "manager", "account", "only", "."], "url": "2cc255add933109e520fdf82d975638a"}
{"code_tokens": ["contract", "c34911{", "function", "setOriginalSupply()", "public", "{", "if", "(msg.sender", "!=", "address(oldToken))", "revert();", "originalSupply", "=", "oldToken.totalSupply();", "}", "}"], "docstring_tokens": ["Initializes", "original", "supply", "from", "old", "token", "total", "supply", "."], "url": "d769b474d4b64349b6fc85d5a3b355df"}
{"code_tokens": ["contract", "c2319{", "function", "dividendsRightsFixUpdate_(address", "_from,", "address", "_to,", "uint", "_value)", "private", "{", "if", "(_from", "!=", "_to)", "{", "uint", "_dividendsPerToken", "=", "dividendsPerToken;", "uint", "_balanceFrom", "=", "balances[_from];", "uint", "_balanceTo", "=", "balances[_to];", "dividendsRightsFix[_from]", "+=", "_dividendsPerToken", "*", "_balanceFrom", "/", "DECIMAL_MULTIPLIER", "-", "_dividendsPerToken", "*", "(_balanceFrom", "-", "_value)", "/", "DECIMAL_MULTIPLIER;", "dividendsRightsFix[_to]", "+=", "_dividendsPerToken", "*", "_balanceTo", "/", "DECIMAL_MULTIPLIER", "-", "_dividendsPerToken", "*", "(_balanceTo", "+", "_value)", "/", "DECIMAL_MULTIPLIER;", "}", "}", "}"], "docstring_tokens": ["Update", "dividends", "rights", "fix", "."], "url": "5eb633bad35e3081c3cda1e4a4a985eb"}
{"code_tokens": ["contract", "c27530{", "function", "transferBalance", "(address", "from,", "address", "to,", "uint256", "value)", "private", "returns", "(bool)", "{", "if", "(to", "==", "address(0)", "||", "from", "==", "to)", "revert();", "if", "(value", "==", "0)", "{", "Transfer(msg.sender,", "to,", "value);", "return", "true;", "}", "uint256", "senderBalance", "=", "balances[from];", "uint256", "receiverBalance", "=", "balances[to];", "if", "(senderBalance", "<", "value)", "revert();", "senderBalance", "-=", "value;", "receiverBalance", "+=", "value;", "if", "(receiverBalance", "<", "value)", "revert();", "balances[from]", "=", "senderBalance;", "balances[to]", "=", "receiverBalance;", "Transfer(from,", "to,", "value);", "return", "true;", "}", "}"], "docstring_tokens": ["TODO", ":", "compare", "gas", "cost", "estimations", "between", "this", "and", "https", ":", "/", "/", "github", ".", "com", "/", "ConsenSys", "/", "Tokens", "/", "blob", "/", "master", "/", "contracts", "/", "eip20", "/", "EIP20", ".", "sol", "L39-L45", "."], "url": "de0c95076a06208f2455efb5d69747b9"}
{"code_tokens": ["contract", "c36707{", "function", "produceEmeralds(address", "_receiver,", "uint", "_amount)", "onlyProducer", "inProduction", "{", "balances[_receiver]", "=", "balances[_receiver].add(_amount);", "totalSupply", "=", "totalSupply.add(_amount);", "Transfer(0,", "_receiver,", "_amount);", "}", "}"], "docstring_tokens": ["Creates", "new", "Emeralds", "."], "url": "2bd40ff09a8ed76b9ec41605aae8b671"}
{"code_tokens": ["contract", "c15523{", "function", "massNotify(address[]", "_owners)", "public", "onlyOwner", "{", "for", "(uint256", "i", "=", "0;", "i", "<", "_owners.length;", "i++)", "{", "Transfer(address(0),", "_owners[i],", "VIRTUAL_COUNT);", "}", "}", "}"], "docstring_tokens": ["Notify", "owners", "about", "their", "virtual", "balances", "."], "url": "fd2f59954aac0e2d4ea9315065bdd687"}
{"code_tokens": ["contract", "c10483{", "function", "withdrawToken(ERC20", "token,", "uint", "amount,", "address", "sendTo)", "external", "onlyAdmin", "{", "require(token.transfer(sendTo,", "amount));", "TokenWithdraw(token,", "amount,", "sendTo);", "}", "}"], "docstring_tokens": ["Withdraw", "all", "ERC20", "compatible", "tokens", "."], "url": "5557b266629e5826bb96da6badf035c7"}
{"code_tokens": ["contract", "c19941{", "function", "beginContrib()", "isOwner", "public", "{", "require(currentPhase", "==", "Phase.Init", "||", "currentPhase", "==", "Phase.Wait);", "currentPhase", "=", "Phase.Contribute;", "}", "}"], "docstring_tokens": ["admin", "function", "."], "url": "81adff0eb5e2d74f7d9de44b409fb8a9"}
{"code_tokens": ["contract", "c30082{", "function", "destroyContract()", "onlyOwner", "external{", "selfdestruct(owner);", "}", "}"], "docstring_tokens": ["Destroy", "contract", "and", "send", "ethers", "to", "owner", "."], "url": "b7d97a5f03854efcf85cf1d40776ac35"}
{"code_tokens": ["contract", "c27770{", "function", "requestFoundationTransfer(", "address", "_newFoundationCandidate,", "bytes32", "_foundationHashed)", "external", "onlyFoundation", "{", "require(_newFoundationCandidate", "!=", "address(0));", "require(_newFoundationCandidate", "!=", "foundation);", "newFoundationCandidate", "=", "_newFoundationCandidate;", "foundationHashed", "=", "_foundationHashed;", "FoundationRequested(msg.sender,", "newFoundationCandidate,", "foundationHashed);", "}", "}"], "docstring_tokens": ["Proposes", "to", "transfer", "control", "of", "the", "contract", "to", "a", "newFoundationCandidate", "."], "url": "57481ef8cb30b3d79e590e0adddd043d"}
{"code_tokens": ["contract", "c5404{", "function", "enableTokenTransferability()", "external", "onlyOwner", "{", "require(token", "!=", "address(0));", "token.unpause();", "}", "}"], "docstring_tokens": ["enable", "token", "tranferability", "."], "url": "a066e92645b0620083b9918724371422"}
{"code_tokens": ["contract", "c805{", "function", "_withdrawBalance()", "internal", "{", "bankManager.transfer(address(this).balance);", "}", "}"], "docstring_tokens": ["Remove", "all", "Ether", "from", "the", "contract", ",", "which", "is", "the", "owner's", "cuts", "as", "well", "as", "any", "Ether", "sent", "directly", "to", "the", "contract", "address", "."], "url": "f9e97f0c4426534d929a21c21a389ec2"}
{"code_tokens": ["contract", "c30976{", "function", "draw()", "private", "{", "Lottery", "storage", "lot", "=", "currentLottery();", "lot.awaitingOraclizeCallback", "=", "true;", "lot.totalContributions", "=", "lot.prizePool;", "lot.drawer", "=", "msg.sender;", "lastDrawTs", "=", "now;", "requestRandom();", "}", "}"], "docstring_tokens": ["STEP", "4", ":", "If", "STEP", "3", "is", "a-ok", ",", "execute", "the", "draw", ",", "request", "a", "random", "number", "from", "our", "RNG", "provider", "."], "url": "f250ef2527224ab85b3f9bcd4a1bfd48"}
{"code_tokens": ["contract", "c15549{", "modifier", "onlyPayloadSize(uint", "size)", "{", "require(msg.data.length", "==", "size", "+", "4);", "_;", "}", "}"], "docstring_tokens": ["fix", "for", "short", "address", "attack", "."], "url": "1a00cff7a5a62fee129da4c495d1cff1"}
{"code_tokens": ["contract", "c15732{", "function", "prepopulate(address", "_wallet)", "public", "onlyOwner", "{", "require(!finishedMigration);", "require(_wallet", "!=", "address(0));", "uint256", "spent", "=", "oldTokenSale.userWeiSpent(_wallet);", "require(spent", "!=", "0);", "uint256", "balance", "=", "token.balanceOf(_wallet);", "require(balance", "==", "0);", "uint256", "tokens", "=", "spent.mul(TOKEN_BONUS_RATE);", "token.mint(_wallet,", "tokens);", "}", "}"], "docstring_tokens": ["Prepopulates", "the", "specified", "wallet", "."], "url": "59b20673c603eae46dc963a46420e961"}
{"code_tokens": ["contract", "c797{", "function", "_createNFTCollectible(", "uint8", "_teamId,", "uint256", "_attributes,", "address", "_owner,", "uint256", "_isAttached,", "uint256[5]", "_nftData", ")", "internal", "returns", "(uint256)", "{", "uint256", "generationSeason", "=", "(_attributes", "%", "1000000).div(1000);", "require", "(generationSeasonController[generationSeason]", "==", "1);", "uint32", "_sequenceId", "=", "getSequenceId(_teamId);", "uint256", "newNFTCryptoId", "=", "_createNFT(_nftData,", "_owner,", "_isAttached);", "nftTeamIdToSequenceIdToCollectible[_teamId][_sequenceId]", "=", "newNFTCryptoId;", "nftTeamIndexToCollectibleCount[_teamId]", "=", "_sequenceId;", "return", "newNFTCryptoId;", "}", "}"], "docstring_tokens": ["An", "internal", "method", "that", "helps", "in", "generation", "of", "new", "NFT", "Collectibles", "."], "url": "fc246e80994c976e8eacdc32197c2760"}
{"code_tokens": ["contract", "c22599{", "function", "finalize()", "external", "onlyModerator", "{", "require(!isFinalized", "&&", "active);", "uint256", "teamAllocation", "=", "tokensSold.mul(9000).div(10000);", "uint256", "bountyAllocation", "=", "tokensSold.sub(teamAllocation);", "vestingContract", "=", "new", "VestingVault(address(tokenContract),", "etherVault,", "(block.timestamp", "+", "26", "weeks));", "require(tokenContract.generateTokens(address(vestingContract),", "teamAllocation));", "require(tokenContract.generateTokens(bountyVault,", "bountyAllocation));", "Finalized(tokensSold,", "weiRaised);", "isFinalized", "=", "true;", "active", "=", "false;", "}", "}"], "docstring_tokens": ["close", "sale", "and", "allocate", "bounty", "and", "team", "tokens", "."], "url": "9cd151204c63662aa3f2c211664a9539"}
{"code_tokens": ["contract", "c35051{", "function", "setManager(address", "_accManager)", "onlyManager", "{", "assert(_accManager", "!=", "0x0);", "accManager", "=", "_accManager;", "}", "}"], "docstring_tokens": ["Sets", "manager", "."], "url": "1a20bfe17e2fe60fa1ee4c993b3fe55a"}
{"code_tokens": ["contract", "c5909{", "function", "deductionToken", "(address", "_addr,", "uint256", "_tokens)", "onlyOwner", "external", "{", "uint256", "_value", "=", "formatDecimals(_tokens);", "tokensub(_addr,_value);", "tokenadd(ethFundDeposit,_value);", "tokenTakeback(_addr,_value);", "emit", "Transfer(_addr,", "ethFundDeposit,", "_value);", "}", "}"], "docstring_tokens": ["Issues", "tokens", "deduction", "."], "url": "f81dac840bc0481788403355d2c1d7b0"}
{"code_tokens": ["contract", "c10565{", "function", "toggleTransferable(bool", "_toggle)", "external", "onlyOwner", "{", "isTokenTransferable", "=", "_toggle;", "}", "}"], "docstring_tokens": ["Enable", "Transfers", "(", "Only", "Owner", ")", "."], "url": "59e630e2276ad268ff652f3f4bf961fd"}
{"code_tokens": ["contract", "c23001{", "function", "changeStarttime(uint256", "_startTime)", "public", "onlyOwner", "{", "require(_startTime", "!=", "0);", "startTime", "=", "_startTime;", "}", "}"], "docstring_tokens": ["change", "Starttime", "."], "url": "2358faa240e3039270386fbf32468e44"}
{"code_tokens": ["contract", "c34158{", "function", "setAngelDate(uint256", "_time)", "public", "onlyOwner", "{", "angel_sale_start", "=", "_time;", "}", "}"], "docstring_tokens": ["only", "for", "demonstrate", "Test", "Version", "."], "url": "5acc75e4464d350ee67e9ac8b3fa8489"}
{"code_tokens": ["contract", "c36361{", "function", "balanceAt(address", "_owner,", "uint256", "_block)", "external", "constant", "returns", "(uint256", "balance)", "{", "uint256", "i", "=", "accounts[_owner].history.length;", "do", "{", "i--;", "}", "while", "(i", ">", "0", "&&", "accounts[_owner].history[i].block", ">", "_block);", "uint256", "matchingBlock", "=", "accounts[_owner].history[i].block;", "uint256", "matchingBalance", "=", "accounts[_owner].history[i].balance;", "return", "(i", "==", "0", "&&", "matchingBlock", ">", "_block)", "?", "0", ":", "matchingBalance;", "}", "}"], "docstring_tokens": ["Gets", "the", "balance", "of", "the", "specified", "address", "at", "the", "first", "block", "minor", "or", "equal", "the", "specified", "block", "."], "url": "09cf94bba70ba594ef870f084baaf453"}
{"code_tokens": ["contract", "c17058{", "function", "getQuantity(address", "token)", "internal", "view", "returns", "(uint256,", "bool)", "{", "for", "(uint256", "i", "=", "0;", "i", "<", "tokens.length;", "i++)", "{", "if", "(tokens[i].addr", "==", "token)", "{", "return", "(tokens[i].quantity,", "true);", "}", "}", "return", "(0,", "false);", "}", "}"], "docstring_tokens": ["Look", "up", "token", "quantity", "and", "whether", "token", "exists", "."], "url": "34d7a5f4be96ae062ffc6c3cb49fe0da"}
{"code_tokens": ["contract", "c17365{", "function", "_transfer(address", "_from,", "address", "_to,", "uint256", "_tokenId)", "internal", "{", "OwnerShipCount[_to]=OwnerShipCount[_to].add(1);", "ShipIdToOwner[_tokenId]", "=", "_to;", "if", "(_from", "!=", "address(0))", "{", "OwnerShipCount[_from]=OwnerShipCount[_from].sub(1);", "delete", "ShipIdToApproval[_tokenId];", "}", "Transfer(_from,", "_to,", "_tokenId);", "}", "}"], "docstring_tokens": ["Assigns", "ownership", "of", "a", "specific", "ship", "to", "an", "address", "."], "url": "b96bb407911679640153a9e07598527f"}
{"code_tokens": ["contract", "c135{", "function", "_removeTokenFromBarn(uint", "tokenId,", "address", "barnAddress)", "internal", "{", "uint256[]", "storage", "barnArray", "=", "userBarn[barnAddress];", "require(barnArray.length", ">", "0,\"No", "tokens", "to", "remove\");", "int", "index", "=", "_indexOf(tokenId,", "barnArray);", "require(index", ">=", "0,", "\"Token", "not", "found", "in", "barn\");", "for", "(uint256", "i", "=", "uint256(index);", "i<barnArray.length-1;", "i++){", "barnArray[i]", "=", "barnArray[i+1];", "}", "barnArray.length--;", "}", "}"], "docstring_tokens": ["Internal", "function", "to", "remove", "a", "token", "from", "the", "users", "barn", "array", "."], "url": "957c4ede0d67c9ed21478d8154f726a3"}
{"code_tokens": ["contract", "c28458{", "function", "_transfer(address", "_from", ",", "address", "_to", ",", "uint", "_value)", "internal{", "require(_to", "!=", "0x0);", "require(balances[_from]", ">=", "_value);", "require(balances[_to]", "+", "_value", ">", "balances[_to]);", "balances[_from]", "=", "safeSub(balances[_from]", ",", "_value);", "balances[_to]", "=", "safeAdd(balances[_to]", ",", "_value);", "uint", "previousBalance", "=", "balances[_from]", "+", "balances[_to];", "Transfer(_from", ",", "_to", ",", "_value);", "assert(balances[_from]", "+", "balances[_to]", "==", "previousBalance);", "}", "}"], "docstring_tokens": ["For", "transfer", "tokens", "."], "url": "9a4dd926a565f3fd13bf3b5f2c57ab34"}
{"code_tokens": ["contract", "c40102{", "function", "unregister(bytes32", "_id)", "either_owner(_id)", "{", "delete", "dapps[_id];", "Unregistered(_id);", "}", "}"], "docstring_tokens": ["remove", "apps", "."], "url": "f5e536961df2b4c6d17e5f7d2ec2d500"}
{"code_tokens": ["contract", "c10613{", "function", "validateOrder(bytes32", "hash,", "Order", "memory", "order,", "Sig", "memory", "sig)", "internal", "view", "returns", "(bool)", "{", "if", "(!validateOrderParameters(order))", "{", "return", "false;", "}", "if", "(cancelledOrFinalized[hash])", "{", "return", "false;", "}", "if", "(approvedOrders[hash])", "{", "return", "true;", "}", "if", "(ecrecover(hash,", "sig.v,", "sig.r,", "sig.s)", "==", "order.maker)", "{", "return", "true;", "}", "return", "false;", "}", "}"], "docstring_tokens": ["Validate", "a", "provided", "previously", "approved", "/", "signed", "order", ",", "hash", ",", "and", "signature", "."], "url": "2f3febd604d6fd078e1db887855d4a04"}
{"code_tokens": ["contract", "c15816{", "function", "internalAddInterest(Loan", "storage", "loan,", "uint256", "timestamp)", "internal", "{", "if", "(timestamp", ">", "loan.interestTimestamp)", "{", "uint256", "newInterest", "=", "loan.interest;", "uint256", "newPunitoryInterest", "=", "loan.punitoryInterest;", "uint256", "newTimestamp;", "uint256", "realDelta;", "uint256", "calculatedInterest;", "uint256", "deltaTime;", "uint256", "pending;", "uint256", "endNonPunitory", "=", "min(timestamp,", "loan.dueTime);", "if", "(endNonPunitory", ">", "loan.interestTimestamp)", "{", "deltaTime", "=", "endNonPunitory", "-", "loan.interestTimestamp;", "if", "(loan.paid", "<", "loan.amount)", "{", "pending", "=", "loan.amount", "-", "loan.paid;", "}", "else", "{", "pending", "=", "0;", "}", "(realDelta,", "calculatedInterest)", "=", "calculateInterest(deltaTime,", "loan.interestRate,", "pending);", "newInterest", "=", "safeAdd(calculatedInterest,", "newInterest);", "newTimestamp", "=", "loan.interestTimestamp", "+", "realDelta;", "}", "if", "(timestamp", ">", "loan.dueTime)", "{", "uint256", "startPunitory", "=", "max(loan.dueTime,", "loan.interestTimestamp);", "deltaTime", "=", "timestamp", "-", "startPunitory;", "uint256", "debt", "=", "safeAdd(loan.amount,", "newInterest);", "pending", "=", "min(debt,", "safeSubtract(safeAdd(debt,", "newPunitoryInterest),", "loan.paid));", "(realDelta,", "calculatedInterest)", "=", "calculateInterest(deltaTime,", "loan.interestRatePunitory,", "pending);", "newPunitoryInterest", "=", "safeAdd(newPunitoryInterest,", "calculatedInterest);", "newTimestamp", "=", "startPunitory", "+", "realDelta;", "}", "if", "(newInterest", "!=", "loan.interest", "||", "newPunitoryInterest", "!=", "loan.punitoryInterest)", "{", "loan.interestTimestamp", "=", "newTimestamp;", "loan.interest", "=", "newInterest;", "loan.punitoryInterest", "=", "newPunitoryInterest;", "}", "}", "}", "}"], "docstring_tokens": ["Computes", "loan", "interest", "."], "url": "842c2ead417f93b079d4e01e04667044"}
{"code_tokens": ["contract", "c23{", "function", "withdraw()", "external", "onlyOwner", "{", "fundAddr.transfer(this.balance);", "}", "}"], "docstring_tokens": ["Withdraw", "ethers", "to", "fund", "address", "."], "url": "ce1baf947a5126ca2a08c70a435f878d"}
{"code_tokens": ["contract", "c22903{", "function", "saleEnded()", "constant", "returns", "(bool)", "{", "return", "firstblock", ">", "0", "&&", "(saleDue()", "||", "hardCapReached());", "}", "}"], "docstring_tokens": ["true", "if", "sale", "has", "ended", ",", "false", "otherwise", "."], "url": "b81ec02a9fde5c0f191891dec1279e91"}
{"code_tokens": ["contract", "c15287{", "function", "cancelAction(bytes32", "_requestId)", "public", "whenNotPaused", "{", "require((requestCore.getPayer(_requestId)==msg.sender", "&&", "requestCore.getState(_requestId)==RequestCore.State.Created)", "||", "(requestCore.getPayeeAddress(_requestId,0)==msg.sender", "&&", "requestCore.getState(_requestId)!=RequestCore.State.Canceled));", "require(requestCore.areAllBalanceNull(_requestId));", "requestCore.cancel(_requestId);", "}", "}"], "docstring_tokens": ["Function", "to", "cancel", "a", "request", "."], "url": "c9c666a8166baedd8272b66f9ec5f533"}
{"code_tokens": ["contract", "c292{", "function", "investInternal(address", "receiver,", "uint128", "customerId)", "stopInEmergency", "private", "{", "if(getState()", "==", "State.PreFunding)", "{", "throw;", "}", "else", "if(getState()", "==", "State.Funding)", "{", "if(isWhiteListed)", "{", "if(!earlyParticipantWhitelist[receiver].status)", "{", "throw;", "}", "}", "}", "else", "{", "throw;", "}", "uint", "weiAmount", "=", "msg.value;", "uint", "tokenAmount", "=", "pricingStrategy.calculatePrice(weiAmount,", "weiRaised,", "tokensSold,", "msg.sender,", "token.decimals());", "if(tokenAmount", "==", "0)", "{", "throw;", "}", "if(isWhiteListed)", "{", "if(tokenAmount", "<", "earlyParticipantWhitelist[receiver].minCap", "&&", "tokenAmountOf[receiver]", "==", "0)", "{", "throw;", "}", "if", "(isBreakingInvestorCap(receiver,", "tokenAmount))", "{", "throw;", "}", "updateInheritedEarlyParticipantWhitelist(receiver,", "tokenAmount);", "}", "else", "{", "if(tokenAmount", "<", "token.minCap()", "&&", "tokenAmountOf[receiver]", "==", "0)", "{", "throw;", "}", "}", "if(investedAmountOf[receiver]", "==", "0)", "{", "investorCount++;", "}", "investedAmountOf[receiver]", "=", "investedAmountOf[receiver].plus(weiAmount);", "tokenAmountOf[receiver]", "=", "tokenAmountOf[receiver].plus(tokenAmount);", "weiRaised", "=", "weiRaised.plus(weiAmount);", "tokensSold", "=", "tokensSold.plus(tokenAmount);", "if(isBreakingCap(weiAmount,", "tokenAmount,", "weiRaised,", "tokensSold))", "{", "throw;", "}", "assignTokens(receiver,", "tokenAmount);", "if(!multisigWallet.send(weiAmount))", "throw;", "Invested(receiver,", "weiAmount,", "tokenAmount,", "customerId);", "}", "}"], "docstring_tokens": ["Make", "an", "investment", "."], "url": "b5cc84388c7c4869df6fd04e9836b754"}
{"code_tokens": ["contract", "c13008{", "function", "tokenIssue(uint", "_value)", "public", "onlyOwner", "returns", "(bool)", "{", "require(totalSupplyValue", "<=", "totalSupplyValue", "+", "_value,", "\"Overflow\");", "uint", "oldTokenNum", "=", "totalSupplyValue;", "totalSupplyValue", "+=", "_value;", "balanceValue[owner].unlocked", "+=", "_value;", "emit", "ChangeNumberofToken(oldTokenNum,", "totalSupplyValue);", "return", "true;", "}", "}"], "docstring_tokens": ["Increase", "the", "total", "amount", "of", "WEDU", "token", "."], "url": "4a9d75a0ffa9571622adb7d966894356"}
{"code_tokens": ["contract", "c13952{", "function", "_draw(Game", "storage", "_game,", "uint32", "_id,", "uint8", "_draws,", "bytes32", "_hashCheck)", "private", "{", "assert(_game.dBlock", "==", "0);", "uint32", "_iHand;", "bytes32", "_iBlockHash", "=", "blockhash(_game.iBlock);", "uint8", "_warnCode;", "if", "(_iBlockHash", "!=", "0)", "{", "if", "(_iBlockHash", "!=", "_hashCheck)", "{", "return", "_drawFailure(_id,", "_draws,", "\"HashCheck", "Failed.", "Try", "refreshing", "game.\");", "}", "_iHand", "=", "getHand(uint(keccak256(_iBlockHash,", "_id)));", "}", "else", "{", "_warnCode", "=", "WARN_IHAND_TIMEOUT;", "_draws", "=", "31;", "}", "_game.iHand", "=", "_iHand;", "_game.draws", "=", "_draws;", "_game.dBlock", "=", "uint32(block.number);", "emit", "DrawSuccess(now,", "msg.sender,", "_id,", "_game.iHand,", "_draws,", "_warnCode);", "}", "}"], "docstring_tokens": ["Gets", "initialHand", ",", "and", "stores", ".", "draws", "."], "url": "77390dcfa8e2ec0b4534ca4005429dc3"}
{"code_tokens": ["contract", "c26201{", "function", "transform(address", "addr)", "public", "{", "require(isActive);", "require(!icoBalances[addr].hasTransformed);", "for", "(uint", "i", "=", "0;", "i", "<", "3;", "i++)", "{", "if", "(activatedPhases[i])", "{", "balances[addr]", "+=", "icoBalances[addr].balances[i];", "Transfer(0x00,", "addr,", "icoBalances[addr].balances[i]);", "icoBalances[addr].balances[i]", "=", "0;", "}", "}", "icoBalances[addr].hasTransformed", "=", "true;", "}", "}"], "docstring_tokens": ["Transform", "ico", "balance", "to", "standard", "balance", "."], "url": "c63a8263b0312f6181d3ac31c7fbaf6a"}
{"code_tokens": ["contract", "c2445{", "function", "transferICO(address", "_to,", "uint256", "_amount_coin)", "public", "onlyOwnerOrManager", "{", "_updatePhase(true);", "uint256", "remainedCoin", "=", "token.balanceOf(base_wallet);", "require(remainedCoin", ">=", "_amount_coin,", "\"Not", "enough", "coins\");", "token.transferICO(_to,", "_amount_coin);", "if", "(remainedCoin", "==", "_amount_coin)", "_finalizeICO();", "}", "}"], "docstring_tokens": ["Send", "tokens", "to", "the", "specified", "address", "."], "url": "e0de1e2cd57ce748c4e0d9db8b4741c5"}
{"code_tokens": ["contract", "c16042{", "function", "collect()", "isOwner", "{", "require(this.balance", ">", "0);", "withdraw(this.balance);", "}", "}"], "docstring_tokens": ["Transfer", "ether", "from", "smartcontract", "to", "owner", "."], "url": "e14948f78c7d57d8858a2982b36bedad"}
{"code_tokens": ["contract", "c9355{", "function", "getPartnerCash(uint8", "_user,", "address", "_msgsender)", "external", "canGetCash", "{", "require(rightAndRoles.onlyRoles(msg.sender,1));", "require(_user<wallets.length);", "onlyPartnersOrAdmin(_msgsender);", "uint256", "move=ready[_user];", "if", "(move==0)", "return;", "emit", "Receive(wallets[_user],", "move);", "ready[_user]=0;", "took[_user]+=move;", "wallets[_user].transfer(move);", "}", "}"], "docstring_tokens": ["Call", "from", "Crowdsale", ":", "."], "url": "5604bef754acb0a939b9c311e398f01a"}
{"code_tokens": ["contract", "c34038{", "function", "getValueAt(", "Values[]", "storage", "values,", "uint256", "snapshotId,", "uint256", "defaultValue", ")", "internal", "constant", "returns", "(uint256)", "{", "require(snapshotId", "<=", "mCurrentSnapshotId());", "if", "(values.length", "==", "0)", "{", "return", "defaultValue;", "}", "uint256", "last", "=", "values.length", "-", "1;", "uint256", "lastSnapshot", "=", "values[last].snapshotId;", "if", "(snapshotId", ">=", "lastSnapshot)", "{", "return", "values[last].value;", "}", "uint256", "firstSnapshot", "=", "values[0].snapshotId;", "if", "(snapshotId", "<", "firstSnapshot)", "{", "return", "defaultValue;", "}", "uint256", "min", "=", "0;", "uint256", "max", "=", "last;", "while", "(max", ">", "min)", "{", "uint256", "mid", "=", "(max", "+", "min", "+", "1)", "/", "2;", "if", "(values[mid].snapshotId", "<=", "snapshotId)", "{", "min", "=", "mid;", "}", "else", "{", "max", "=", "mid", "-", "1;", "}", "}", "return", "values[min].value;", "}", "}"], "docstring_tokens": ["getValueAt", "retrieves", "value", "at", "a", "given", "snapshot", "id", "."], "url": "30996e574429f2a6a5433281b0e21c36"}
{"code_tokens": ["contract", "c32827{", "function", "add(address", "_receiver,", "uint256", "_equivalentEthAmount)", "onlyOwner", "inProgress", "whenNotPaused", "{", "uint256", "tokensAmount", "=", "tokenRate.mul(_equivalentEthAmount);", "issuedTokensAmount", "=", "issuedTokensAmount.add(tokensAmount);", "storeTokens(_receiver,", "tokensAmount);", "TokenAdded(_receiver,", "tokensAmount,", "_equivalentEthAmount);", "}", "}"], "docstring_tokens": ["Add", "HQX", "payed", "by", "another", "crypto", "(", "BTC", ",", "LTC", ")", "."], "url": "a52889cb2f1d3664665400841544533a"}
{"code_tokens": ["contract", "c39209{", "function", "receiveApproval(address", "_from,", "uint256", "_value,", "ERC20", "_token,", "bytes", "_extraData)", "{", "throw;", "}", "}"], "docstring_tokens": ["Disable", "receive", "another", "tokens", "."], "url": "201a94f8896374a484b7e3d3306b9f89"}
{"code_tokens": ["contract", "c20425{", "function", "totalPledgedFeesAt(uint", "_blockNumber)", "public", "constant", "returns(uint)", "{", "if", "((totalPledgedFeesHistory.length", "==", "0)", "||", "(totalPledgedFeesHistory[0].fromBlock", ">", "_blockNumber))", "{", "if", "(address(parentToken)", "!=", "0)", "{", "return", "parentToken.totalPledgedFeesAt(min(_blockNumber,", "parentSnapShotBlock));", "}", "else", "{", "return", "0;", "}", "}", "else", "{", "return", "getValueAt(totalPledgedFeesHistory,", "_blockNumber);", "}", "}", "}"], "docstring_tokens": ["Total", "amount", "of", "fees", "at", "a", "specific", "_blockNumber", "."], "url": "8dafad3f4fa43d3ab7596ee240f5d728"}
{"code_tokens": ["contract", "c24301{", "function", "claimEth()", "public", "whenNotPaused", "hasEnded", "{", "require(isFinalized);", "require(!funded());", "uint256", "toReturn", "=", "purchases[msg.sender];", "assert(toReturn", ">", "0);", "purchases[msg.sender]", "=", "0;", "msg.sender.transfer(toReturn);", "}", "}"], "docstring_tokens": ["Allows", "a", "TGE", "contributor", "to", "claim", "their", "contributed", "eth", "in", "case", "the", "."], "url": "07774b105d39dbe048825f07159c857a"}
{"code_tokens": ["contract", "c399{", "function", "balanceOf(address", "_owner)", "public", "view", "returns", "(uint256)", "{", "return", "playerOf[_owner].tokenBalance;", "}", "}"], "docstring_tokens": ["Token", "balance", "for", "player", "."], "url": "1bc70c7c52b75dbce01db8f7356bb608"}
{"code_tokens": ["contract", "c26549{", "function", "_transfer(address", "_from,", "address", "_to,", "uint256", "_giftId)", "internal", "{", "require(balances[_to]", "+", "1", ">", "balances[_to]);", "balances[_to]++;", "giftIndexToOwners[_giftId]", "=", "_to;", "if", "(_from", "!=", "address(0))", "{", "balances[_from]--;", "}", "Transfer(_from,", "_to,", "_giftId);", "}", "}"], "docstring_tokens": ["transfer", "gift", "for", "new", "owner", "_to", "."], "url": "1212323b10ffc3a46f2e4985c642e4c1"}
{"code_tokens": ["contract", "c5942{", "modifier", "onlyIRNorOwner()", "{", "require(msg.sender", "==", "owner", "||", "network[msg.sender].isIRNAdmin,", "\"must", "be", "owner", "or", "an", "irn", "admin\");", "_;", "}", "}"], "docstring_tokens": ["only", "IRNAdmins", "or", "Owner", "can", "call", ",", "otherwise", "throw", "."], "url": "34d443af5866b63542a161cf59a7562c"}
{"code_tokens": ["contract", "c34051{", "function", "tokenAddresses()", "constant", "returns", "(address[])", "{", "return", "tokens;", "}", "}"], "docstring_tokens": ["Get", "all", "registered", "tokens", "."], "url": "8e9a5315212fe154dfeeff1267636c14"}
{"code_tokens": ["contract", "c22678{", "function", "getEntity(address", "_entity)", "view", "external", "returns", "(bool", "active,", "address", "transferOwnerTo,", "bytes32", "data,", "address", "owner)", "{", "address", "resolvedEntity", "=", "resolveEntityAddress(_entity);", "Entity", "storage", "entity", "=", "entities[resolvedEntity];", "return", "(entity.active,", "entity.transferOwnerTo,", "entity.data,", "entity.owner);", "}", "}"], "docstring_tokens": ["(", "active", ",", "transferOwnerTo", ",", "data", ",", "owner", ")", "-", "a", "tuple", "containing", "the", "active", "flag", ",", "transfer", "status", ",", "data", "field", "and", "owner", "of", "an", "entity", "."], "url": "7ce8dd242cb96a8bfdcada3dd627b8bf"}
{"code_tokens": ["contract", "c32100{", "function", "pool_drain(address", "tokenAddress)", "{", "require(msg.sender", "==", "creator);", "require(block.number", ">=", "claim_block);", "if", "(this.balance", ">", "0)", "{", "creator.transfer(this.balance);", "}", "ERC20", "token", "=", "ERC20(tokenAddress);", "uint256", "contract_token_balance", "=", "token.balanceOf(address(this));", "require(token.transfer(msg.sender,", "contract_token_balance));", "}", "}"], "docstring_tokens": ["Retrieve", "abandoned", "tokens", "."], "url": "6e3e905c8381ae0c9e28c611640ef194"}
{"code_tokens": ["contract", "c1966{", "function", "destroyAndSend(address", "_recipient)", "public", "onlyOwner", "{", "selfdestruct(_recipient);", "}", "}"], "docstring_tokens": ["Transfers", "the", "current", "balance", "to", "the", "recepient", "and", "terminates", "the", "contract", "."], "url": "9eeb7716bb2b9d61385312a093fe2a50"}
{"code_tokens": ["contract", "c27634{", "function", "drainRemainingToken", "()", "public", "onlyOwner", "{", "require(hasEnded());", "token.transfer(MIND_CROWDSALE_WALLET,", "token.balanceOf(this));", "}", "}"], "docstring_tokens": ["Transfer", "the", "unsold", "tokens", "to", "the", "MIND", "Foundation", "multisign", "wallet", "."], "url": "405c1370b3c3b3547066185ab3ebe62f"}
{"code_tokens": ["contract", "c12959{", "function", "addToPublicWhitelist(address", "_participant)", "onlyWhitelistSupplier()", "public", "returns(bool)", "{", "if", "(whitelistPublic[_participant])", "{", "return", "true;", "}", "whitelistPublic[_participant]", "=", "true;", "emit", "PublicWhitelistUpdated(_participant,", "true);", "return", "true;", "}", "}"], "docstring_tokens": ["These", "two", "function", "can", "be", "called", "by", "only", "whitelist", "suppliers", "."], "url": "666dfed3f9de76152ba67f77400a4fef"}
{"code_tokens": ["contract", "c17785{", "function", "donateTokens(address", "_tokenContractAddress)", "public", "membersOnly", "{", "require(_tokenContractAddress", "!=", "address(this));", "TokensDonated(_tokenContractAddress,", "ERC20(_tokenContractAddress).balanceOf(this));", "ERC20(_tokenContractAddress).transfer(donationAddress_,", "ERC20(_tokenContractAddress).balanceOf(this));", "}", "}"], "docstring_tokens": ["We", "also", "want", "to", "be", "able", "to", "access", "any", "tokens", "that", "are", "sent", "to", "the", "contract", "."], "url": "b1c1cc68ef138ea09c63fe0a45d5c02e"}
{"code_tokens": ["contract", "c5281{", "function", "likeBlock(", "uint", "_bid", ")", "public", "payable", "{", "require(msg.value", ">=", "options[\"likefee\"]);", "address", "owner", "=", "blockToOwner[_bid];", "owner.transfer(msg.value);", "Block", "storage", "b", "=", "blocks[_bid];", "b.likes", "=", "b.likes.add(1);", "emit", "BlockLiked(_bid,", "msg.value);", "}", "}"], "docstring_tokens": ["Allows", "a", "user", "to", "like", "another", "users", "block", "."], "url": "429eb57af03f65e46baf1aeb7beff533"}
{"code_tokens": ["contract", "c14346{", "function", "batchAssignTokens(address[]", "_vaddr,", "uint[]", "_vamounts,", "uint[]", "_vDefrostClass", ")", "onlyOwner", "{", "require", "(", "batchAssignStopped", "==", "false", ");", "require", "(", "_vaddr.length", "==", "_vamounts.length", "&&", "_vaddr.length", "==", "_vDefrostClass.length);", "for", "(uint", "index=0;", "index<_vaddr.length;", "index++)", "{", "address", "toAddress", "=", "_vaddr[index];", "uint", "amount", "=", "SafeMath.mul(_vamounts[index],", "10", "**", "decimals);", "uint", "defrostClass", "=", "_vDefrostClass[index];", "if", "(", "defrostClass", "==", "0", ")", "{", "transfer(toAddress,", "amount);", "assignedSupply", "=", "SafeMath.add(assignedSupply,", "amount);", "}", "else", "if(defrostClass", "==", "1){", "vIcedBalances.push(toAddress);", "icedBalances_frosted[toAddress]", "=", "amount;", "icedBalances_defrosted[toAddress]", "=", "0;", "assignedSupply", "=", "SafeMath.add(assignedSupply,", "amount);", "}", "}", "}", "}"], "docstring_tokens": ["Transfer", "tokens", "in", "batches", "(", "of", "adresses", ")", "."], "url": "49d614208c4dc8e6c0702d58150565d7"}
{"code_tokens": ["contract", "c274{", "function", "TokenERC20(", "uint256", "initialSupply,", "string", "tokenName,", "string", "tokenSymbol", ")", "public", "{", "totalSupply", "=", "initialSupply", "*", "10", "**", "uint256(decimals);", "balanceOf[msg.sender]", "=", "totalSupply;", "name", "=", "tokenName;", "symbol", "=", "tokenSymbol;", "}", "}"], "docstring_tokens": ["Constructor", "function", "."], "url": "51ffd0ef1946eb14d89d74f9bb27374b"}
{"code_tokens": ["contract", "c20029{", "function", "_productExists(uint256", "_productId)", "internal", "view", "returns", "(bool)", "{", "return", "products[_productId].id", "!=", "0;", "}", "}"], "docstring_tokens": ["_productExists", "checks", "to", "see", "if", "a", "product", "exists", "."], "url": "d06f738d227e34baeacd3f547b549378"}
{"code_tokens": ["contract", "c19924{", "function", "validPurchase()", "internal", "view", "returns(bool)", "{", "return", "super.validPurchase()", "&&", "canContributeAmount(msg.sender,", "msg.value);", "}", "}"], "docstring_tokens": ["overrides", "Crowdsale", "validPurchase", "to", "add", "whitelist", "logic", "."], "url": "0ac275e7336dff3f1a426e6198e62739"}
{"code_tokens": ["contract", "c5735{", "function", "generateTokensByList(address[]", "_owners,", "uint[]", "_amounts)", "public", "onlyController", "returns", "(bool)", "{", "require(_owners.length", "==", "_amounts.length);", "for(uint", "i", "=", "0;", "i", "<", "_owners.length;", "++i)", "{", "generateTokens(_owners[i],", "_amounts[i]);", "}", "return", "true;", "}", "}"], "docstring_tokens": ["byList", "functions", "."], "url": "9accd5d74fd1edccf88a13d9bc2e90de"}
{"code_tokens": ["contract", "c31837{", "function", "totalSupply()", "public", "constant", "returns", "(uint256", "totalAmount)", "{", "totalAmount", "=", "totalTokens;", "}", "}"], "docstring_tokens": ["To", "get", "the", "total", "supply", "of", "CTN", "coins", "."], "url": "eead11b5007545f015f26e4a159c2851"}
{"code_tokens": ["contract", "c3545{", "function", "setLastTokenId(uint256", "_lastTokenId)", "external", "onlyOwner", "{", "lastTokenId", "=", "_lastTokenId;", "}", "}"], "docstring_tokens": ["Allows", "(", "re", "-", ")", "setting", "lastTokenId", "."], "url": "6ba81ae553dce29f3711547fff3505f1"}
{"code_tokens": ["contract", "c27103{", "modifier", "onlyAvailableCaller()", "{", "require(callers[msg.sender]", "!=", "address(0));", "_;", "}", "}"], "docstring_tokens": ["Throws", "if", "called", "by", "any", "account", "other", "than", "the", "caller", "."], "url": "51dbaf0a02b0224aaaa92046d6f6cb17"}
{"code_tokens": ["contract", "c39684{", "function", "setManager(address", "newManger)", "ifGeneralManager", "{", "generalManager", "=", "newManger;", "ManagerSet(newManger);", "}", "}"], "docstring_tokens": ["Sets", "the", "general", "manager", "for", "the", "main", "organization", "."], "url": "d112d819476917edec3d87ce536551ea"}
{"code_tokens": ["contract", "c39837{", "function", "onApprove(address", "_owner,", "address", "_spender,", "uint", "_amount)", "returns(bool)", "{", "return", "true;", "}", "}"], "docstring_tokens": ["Notifies", "the", "controller", "about", "an", "approval", ",", "for", "this", "SWTConverter", "all", "approvals", "are", "allowed", "by", "default", "and", "no", "extra", "notifications", "are", "needed", "."], "url": "44a17c61b360b5de71009dfe8e20568a"}
{"code_tokens": ["contract", "c12692{", "function", "toggleAuthorization(address", "_address,", "bytes32", "_authorization)", "public", "ifAuthorized(msg.sender,", "PRESIDENT)", "{", "require(_address", "!=", "msg.sender,", "\"Cannot", "change", "own", "permissions.\");", "if", "(_authorization", "==", "PRESIDENT", "&&", "!authorized[_address][PRESIDENT])", "authorized[_address][STAFF_MEMBER]", "=", "false;", "authorized[_address][_authorization]", "=", "!authorized[_address][_authorization];", "}", "}"], "docstring_tokens": ["Toggle", "boolean", "flag", "to", "allow", "or", "prevent", "access", "."], "url": "349c1ecd52120f31f63c13420c2fb6c7"}
{"code_tokens": ["contract", "c11150{", "function", "buyAndSellPrice()", "public", "pure", "returns(uint256)", "{", "uint256", "ethereum", "=", "tokenPrice;", "uint256", "dividends", "=", "SafeMath.div(SafeMath.mul(ethereum,", "dividendFee", "),", "100);", "uint256", "taxedEthereum", "=", "SafeMath.sub(ethereum,", "dividends);", "return", "taxedEthereum;", "}", "}"], "docstring_tokens": ["Return", "the", "buy", "and", "sell", "price", "of", "1", "individual", "token", "."], "url": "0166f20ba696d35da91bd9e208d3d7d8"}
{"code_tokens": ["contract", "c13008{", "function", "lockBalance(address", "_who,", "uint", "_value)", "public", "onlyOwner", "{", "require(_value", "<=", "balanceValue[_who].unlocked,", "\"Unsufficient", "balance\");", "uint", "totalBalanceValue", "=", "balanceValue[_who].locked", "+", "balanceValue[_who].unlocked;", "balanceValue[_who].unlocked", "-=", "_value;", "balanceValue[_who].locked", "+=", "_value;", "assert(totalBalanceValue", "==", "balanceValue[_who].locked", "+", "balanceValue[_who].unlocked);", "}", "}"], "docstring_tokens": ["Lock", "the", "WEDU", "token", "in", "users", "."], "url": "5af451a4a498a5b92e1e1877ebe5368f"}
{"code_tokens": ["contract", "c21671{", "modifier", "greaterOrEqualThanZero(uint256", "_amount)", "{", "require(_amount", ">=", "0);", "_;", "}", "}"], "docstring_tokens": ["verifies", "that", "an", "amount", "is", "greater", "or", "equal", "to", "zero", "."], "url": "0c92815f3f14e57c7b4511b12536f950"}
{"code_tokens": ["contract", "c33252{", "function", "activateSafeMode()", "onlysigner", "{", "safeMode", "=", "true;", "SafeModeActivated(msg.sender);", "}", "}"], "docstring_tokens": ["Irrevocably", "puts", "contract", "into", "safe", "mode", "."], "url": "84a61c6bd500d775a065b50f4e5b91d1"}
{"code_tokens": ["contract", "c32423{", "function", "transferBase(uint", "amountBase)", "public", "{", "address", "client", "=", "msg.sender;", "require(amountBase", ">", "0);", "require(amountBase", "<=", "balanceBaseForClient[client]);", "balanceBaseForClient[client]", "-=", "amountBase;", "require(baseToken.transfer(client,", "amountBase));", "ClientPaymentEvent(client,", "ClientPaymentEventType.Transfer,", "BalanceType.Base,", "-int(amountBase));", "}", "}"], "docstring_tokens": ["Public", "Funds", "Manipulation", "-", "withdraw", "base", "tokens", "(", "as", "a", "transfer", ")", "."], "url": "5f987290b25147e0e37cfe7995d01590"}
{"code_tokens": ["contract", "c37791{", "function", "start()", "onlyOwner", "{", "if", "(startTime", "!=", "0)", "throw;", "startTime", "=", "now", ";", "endTime", "=", "now", "+", "DevvotePrefund_PERIOD;", "}", "}"], "docstring_tokens": ["To", "call", "to", "start", "the", "DevvotePrefund", "."], "url": "685ff6c18b29e053a0643c0bf74188a8"}
{"code_tokens": ["contract", "c18255{", "function", "stake(uint256", "countryID)", "external", "validCountry(countryID)", "payable", "{", "require(now", "<=", "STAKE_DEADLINE);", "require(!refundsEnabled);", "require(msg.value", ">=", "MIN_STAKE);", "address", "staker", "=", "msg.sender;", "uint256", "weiAmount", "=", "msg.value;", "uint256", "fee", "=", "weiAmount.mul(DEVELOPER_FEE_PERCENTAGE)", "/", "PERCENTAGE_100;", "uint256", "actualStake", "=", "weiAmount.sub(fee);", "weiReceived[staker]", "=", "weiReceived[staker].add(actualStake);", "stakes[staker][countryID]", "=", "stakes[staker][countryID].add(actualStake);", "countryStats[countryID].amount", "=", "countryStats[countryID].amount.add(actualStake);", "if", "(stakes[staker][countryID]", "==", "actualStake)", "{", "countryStats[countryID].numberOfStakers++;", "}", "collectedFees", "=", "collectedFees.add(fee);", "totalPot", "=", "totalPot.add(actualStake);", "Stake(staker,", "countryID,", "actualStake);", "}", "}"], "docstring_tokens": ["Stake", "on", "a", "specific", "country", "."], "url": "9e502259f29110b2dfa89cd7f6c7a79e"}
{"code_tokens": ["contract", "c14668{", "function", "setCanceled(InteractiveCrowdsaleStorage", "storage", "self)", "private", "returns(bool){", "bool", "canceled", "=", "(self.totalValuation", "<", "self.minimumRaise)", "||", "((now", ">", "(self.endTime", "+", "30", "days))", "&&", "!self.isFinalized);", "if(canceled)", "{self.isCanceled", "=", "true;}", "return", "self.isCanceled;", "}", "}"], "docstring_tokens": ["returns", "a", "boolean", "indicating", "if", "the", "sale", "is", "canceled", "."], "url": "c9175178a3f873408551b4fc91c199af"}
{"code_tokens": ["contract", "c7017{", "function", "isInTimeRange(", "uint256", "_startTime,", "uint256", "_endTime", ")", "internal", "view", "returns(bool)", "{", "if", "(now", ">=", "_startTime", "&&", "now", "<", "_endTime)", "{", "return", "true;", "}", "else", "{", "return", "false;", "}", "}", "}"], "docstring_tokens": ["Check", "if", "currently", "active", "period", "is", "a", "given", "time", "period", "."], "url": "4d4749dc077846dfc98a2d2d8e0c6418"}
{"code_tokens": ["contract", "c23085{", "function", "hashOrderPartTwo(Order", "memory", "order)", "internal", "pure", "returns", "(bytes32)", "{", "return", "keccak256(order.calldata,", "order.replacementPattern,", "order.staticTarget,", "order.staticExtradata,", "order.paymentToken,", "order.basePrice,", "order.extra,", "order.listingTime,", "order.expirationTime,", "order.salt);", "}", "}"], "docstring_tokens": ["Keccak256", "order", "hash", ",", "part", "two", "."], "url": "6c6e564b6edd9558ecdac4e8bfadf707"}
{"code_tokens": ["contract", "c24802{", "function", "createTransaction(address", "_seller,", "uint256", "_amount,", "bytes32", "_metadata,", "address", "_policy,", "address", "_mediator)", "external", "returns", "(uint256)", "{", "return", "_createTransaction(_seller,", "_amount,", "_metadata,", "_policy,", "_mediator,", "address(0));", "}", "}"], "docstring_tokens": ["Transaction", "functions", "."], "url": "665013041dca90364f0740b662664798"}
{"code_tokens": ["contract", "c39628{", "function", "checkDeck(uint", "gameId,", "uint8[]", "deck,", "bytes32", "seed)", "constant", "returns", "(bool", "correct){", "if(sha3(seed)", "!=", "games[gameId].seed)", "return", "false;", "if(sha3(convertToBytes(deck),", "seed)", "!=", "games[gameId].deck)", "return", "false;", "return", "true;", "}", "}"], "docstring_tokens": ["check", "if", "deck", "and", "casino", "seed", "are", "correct", "."], "url": "142d03673bfc5981298b898d8390c270"}
{"code_tokens": ["contract", "c9696{", "function", "getAllTellers()", "public", "view", "returns", "(address[])", "{", "return", "tellerIndex;", "}", "}"], "docstring_tokens": ["return", "array", "of", "address", "of", "all", "teller", "."], "url": "d789404a175fff7a0c79e242683be8f6"}
{"code_tokens": ["contract", "c372{", "function", "unlock(address", "_locker,", "uint", "_delta,", "uint8", "_locktype)", "private", "returns", "(bool", "success)", "{", "if", "(_locktype", "==", "1)", "{", "if", "(_delta", "<", "6", "*", "30", "days)", "{", "return", "false;", "}", "uint", "_more1", "=", "_delta.sub(6", "*", "30", "days);", "uint", "_step1", "=", "_more1", "/", "30", "days;", "for(uint8", "i", "=", "0;", "i", "<", "10;", "i++)", "{", "if", "(unlockedstep[_locker]", "==", "i", "&&", "i", "<", "9", "&&", "i", "<=", "_step1", ")", "{", "ownerance[_locker]", "=", "ownerance[_locker].add(lockedance[_locker]", "/", "(10", "-", "i));", "lockedance[_locker]", "=", "lockedance[_locker].sub(lockedance[_locker]", "/", "(10", "-", "i));", "unlockedstep[_locker]", "=", "i", "+", "1;", "}", "else", "if", "(i", "==", "9", "&&", "unlockedstep[_locker]", "==", "9", "&&", "_step1", "==", "9){", "ownerance[_locker]", "=", "ownerance[_locker].add(lockedance[_locker]);", "lockedance[_locker]", "=", "0;", "unlockedstep[_locker]", "=", "0;", "lockedtype[_locker]", "=", "0;", "}", "}", "}", "else", "if", "(_locktype", "==", "2)", "{", "if", "(_delta", "<", "30", "days)", "{", "return", "false;", "}", "uint", "_more2", "=", "_delta", "-", "30", "days;", "uint", "_step2", "=", "_more2", "/", "30", "days;", "for(uint8", "j", "=", "0;", "j", "<", "11;", "j++)", "{", "if", "(unlockedstep[_locker]", "==", "j", "&&", "j", "<", "10", "&&", "j", "<=", "_step2", ")", "{", "ownerance[_locker]", "=", "ownerance[_locker].add(lockedance[_locker]", "/", "(11", "-", "j));", "lockedance[_locker]", "=", "lockedance[_locker].sub(lockedance[_locker]", "/", "(11", "-", "j));", "unlockedstep[_locker]", "=", "j", "+", "1;", "}", "else", "if", "(j", "==", "10", "&&", "unlockedstep[_locker]", "==", "10", "&&", "_step2", "==", "10){", "ownerance[_locker]", "=", "ownerance[_locker].add(lockedance[_locker]);", "lockedance[_locker]", "=", "0;", "unlockedstep[_locker]", "=", "0;", "lockedtype[_locker]", "=", "0;", "}", "}", "}", "return", "true;", "}", "}"], "docstring_tokens": ["Because", "too", "many", "unlocking", "steps", "*", "accounts", ",", "it", "will", "burn", "lots", "of", "GAS", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "!", "."], "url": "ae4986c1b0ee2a34e489c48d5da381e7"}
{"code_tokens": ["contract", "c22598{", "function", "getScene(uint256", "_tokenId)", "public", "view", "returns", "(", "string", "sceneName,", "uint[]", "stars,", "uint256", "sellingPrice,", "address", "owner", ")", "{", "Scene", "storage", "scene", "=", "scenes[_tokenId];", "sceneName", "=", "scene.name;", "stars", "=", "scene.stars;", "sellingPrice", "=", "sceneIndexToPrice[_tokenId];", "owner", "=", "sceneIndexToOwner[_tokenId];", "}", "}"], "docstring_tokens": ["Returns", "all", "the", "relevant", "information", "about", "a", "specific", "scene", "."], "url": "24e87cba992c46c2e48307e02d94aba8"}
{"code_tokens": ["contract", "c22554{", "function", "setWhitelistAddress(", "address", "_investor,", "uint", "_cap", ")", "onlyOwner", "external", "{", "require(_cap", ">", "0);", "require(_investor", "!=", "address(0));", "maxBuyCap[_investor]", "=", "_cap;", "registeredAddress.push(_investor);", "}", "}"], "docstring_tokens": ["Value", "of", "0", "not", "whitelisted", "."], "url": "fc76d20818d2de75fbb762048b7ece58"}
{"code_tokens": ["contract", "c27059{", "function", "power(uint256", "a,", "uint256", "pow)", "pure", "public", "returns", "(uint256)", "{", "assert(a", ">", "0);", "assert(pow", ">", "0);", "uint256", "result", "=", "1;", "if", "(a", "==", "0)", "{", "return", "1;", "}", "uint256", "temp;", "for", "(uint256", "i", "=", "0;", "i", "<", "pow;", "i++)", "{", "temp", "=", "result", "*", "a;", "assert((temp", "/", "a)", "==", "result);", "result", "=", "temp;", "}", "return", "uint256(result);", "}", "}"], "docstring_tokens": ["A", "safe", "way", "to", "handle", "exponentiation", "."], "url": "2bdfda6361d80b1aa6babed12bb99d4b"}
{"code_tokens": ["contract", "c18810{", "modifier", "optionalProxy_onlyOwner", "{", "if", "(Proxy(msg.sender)", "!=", "proxy)", "{", "messageSender", "=", "msg.sender;", "}", "require(messageSender", "==", "owner);", "_;", "}", "}"], "docstring_tokens": ["Combine", "the", "optionalProxy", "and", "onlyOwner_Proxy", "modifiers", "."], "url": "553fc9d1d21fb684d9690136e7606926"}
{"code_tokens": ["contract", "c29196{", "function", "adminWithdrawMiscTokens(address", "tokenContract,", "uint", "amount)", "public", "autobidExpired", "onlyAdmin", "{", "require(Token(tokenContract).transfer(msg.sender,", "amount));", "TokenClaim(tokenContract,", "msg.sender,", "0,", "amount);", "}", "}"], "docstring_tokens": ["Withdraw", "function", "(", "for", "miscellaneous", "tokens", ")", "."], "url": "cf4f33f6b2ca366d3e9342aa8cdc07ab"}
{"code_tokens": ["contract", "c26366{", "function", "setDefaultAuctionPrices(uint256", "_startPrice,", "uint256", "_endPrice)", "external", "onlyFinancial", "{", "initialStartPrice", "=", "_startPrice;", "initialEndPrice", "=", "_endPrice;", "}", "}"], "docstring_tokens": ["These", "are", "auction", "prices", "for", "initial", "tulip", "sales", "."], "url": "49552fc650fa07e7c8c4d13c3db2c373"}
{"code_tokens": ["contract", "c27980{", "function", "isOracle()", "view", "returns", "(bool)", "{", "return", "msg.sender", "==", "oracle;", "}", "}"], "docstring_tokens": ["Whether", "message", "sender", "is", "oracle", "or", "not", "."], "url": "e6fe765a04fb8b66eb710dfda06407d9"}
{"code_tokens": ["contract", "c17166{", "function", "createNote(uint16", "_metadata,", "bytes2", "_publicKey,", "bytes12", "_title,", "bytes", "_content)", "external", "payable", "payFee", "{", "uint64", "id", "=", "uint64(notes.push(Note(_metadata,", "_publicKey,", "_title,", "_content)))", "-", "1;", "noteToOwner[id]", "=", "msg.sender;", "ownerNotes[msg.sender].push(id);", "emit", "NoteCreated(id,", "_publicKey);", "}", "}"], "docstring_tokens": ["NOTES", "related", "functions", "payable", "functions", "."], "url": "dd1f568cd0eb59cebe52ba8057046bbd"}
{"code_tokens": ["contract", "c16818{", "function", "updateHolidayState(uint8", "_listIndex,", "string", "_holidayMap)", "public", "onlyOwner", "{", "require(_listIndex", ">=", "0", "&&", "_listIndex", "<", "3);", "holidayMap_[_listIndex]", "=", "_holidayMap;", "}", "}"], "docstring_tokens": ["Updates", "the", "Holiday", "Mappings", "in", "case", "of", "updates", "/", "changes", "at", "OwnTheDay", ".", "io", "."], "url": "492ae8f00a3949bab96ca5b4158a0859"}
{"code_tokens": ["contract", "c727{", "function", "allowance(address", "_originAddress,", "address", "_targetAddress)", "public", "view", "returns", "(uint256){", "return", "allowed[_originAddress][_targetAddress];", "}", "}"], "docstring_tokens": ["ERC20", "Token", "Functions", "."], "url": "74ebf3f5d81d4121dd51d9b14f407f80"}
{"code_tokens": ["contract", "c19690{", "function", "setFeeCollector(address", "_addr)", "external", "onlyOwner", "{", "feeCollector", "=", "_addr;", "}", "}"], "docstring_tokens": ["Admin", "Methods", "."], "url": "e3aa1ac0d338ca8d5192976b52ea5a2a"}
{"code_tokens": ["contract", "c16963{", "function", "totalDiscount(uint256", "currentsupply,uint256", "contribution,string", "types)", "returns", "(uint256){", "uint256", "basediscount", "=", "baseDiscounts(currentsupply,contribution,types);", "uint256", "volumediscount", "=", "volumeDiscounts(contribution,types);", "uint256", "totaldiscount", "=", "basediscount+volumediscount;", "return", "totaldiscount;", "}", "}"], "docstring_tokens": ["an", "integer", "for", "getting", "the", "total", "discounts", "."], "url": "b1a14d98103471848949a0381bc0b955"}
{"code_tokens": ["contract", "c246{", "function", "validDraws(address", "_jurorAddress,", "uint", "_disputeID,", "uint[]", "_draws)", "public", "view", "returns", "(bool", "valid)", "{", "uint", "draw", "=", "0;", "Juror", "storage", "juror", "=", "jurors[_jurorAddress];", "Dispute", "storage", "dispute", "=", "disputes[_disputeID];", "uint", "nbJurors", "=", "amountJurors(_disputeID);", "if", "(juror.lastSession", "!=", "session)", "return", "false;", "if", "(dispute.session+dispute.appeals", "!=", "session)", "return", "false;", "if", "(period", "<=", "Period.Draw)", "return", "false;", "for", "(uint", "i", "=", "0;", "i", "<", "_draws.length;", "++i)", "{", "if", "(_draws[i]", "<=", "draw)", "return", "false;", "draw", "=", "_draws[i];", "if", "(draw", ">", "nbJurors)", "return", "false;", "uint", "position", "=", "uint(keccak256(randomNumber,", "_disputeID,", "draw))", "%", "segmentSize;", "require(position", ">=", "juror.segmentStart);", "require(position", "<", "juror.segmentEnd);", "}", "return", "true;", "}", "}"], "docstring_tokens": ["Must", "be", "used", "to", "verify", "that", "a", "juror", "has", "been", "draw", "at", "least", "_draws", ".", "length", "."], "url": "2438dfef6a0bf3b625b425de67143c87"}
{"code_tokens": ["contract", "c13950{", "function", "getToken()", "public", "view", "returns", "(ERC20)", "{", "return", "sale.token();", "}", "}"], "docstring_tokens": ["A", "reference", "to", "the", "sale's", "token", "contract", "."], "url": "ead3af7d2d6df893dc2d7f4670571d7e"}
{"code_tokens": ["contract", "c15479{", "function", "hasEnded()", "internal", "view", "returns", "(bool)", "{", "return", "(now", ">", "endDate);", "}", "}"], "docstring_tokens": ["checks", "if", "end", "date", "of", "crowdsale", "is", "passed", "."], "url": "87f70967bf506db1f7e3197baf01d632"}
{"code_tokens": ["contract", "c196{", "function", "addMeToAllGames()", "isHuman()", "public", "{", "address", "_addr", "=", "msg.sender;", "uint256", "_pID", "=", "pIDxAddr_[_addr];", "require(_pID", "!=", "0,", "\"hey", "there", "buddy,", "you", "dont", "even", "have", "an", "account\");", "uint256", "_laff", "=", "plyr_[_pID].laff;", "uint256", "_totalNames", "=", "plyr_[_pID].names;", "bytes32", "_name", "=", "plyr_[_pID].name;", "for", "(uint256", "i", "=", "1;", "i", "<=", "gID_;", "i++)", "{", "games_[i].receivePlayerInfo(_pID,", "_addr,", "_name,", "_laff);", "if", "(_totalNames", ">", "1)", "for", "(uint256", "ii", "=", "1;", "ii", "<=", "_totalNames;", "ii++)", "games_[i].receivePlayerNameList(_pID,", "plyrNameList_[_pID][ii]);", "}", "}", "}"], "docstring_tokens": ["players", ",", "use", "this", "to", "push", "your", "player", "profile", "to", "all", "registered", "games", "."], "url": "3ba5f49266d48d5c0c07a35ee3a077f8"}
{"code_tokens": ["contract", "c39363{", "function", "getCurrentPrice()", "public", "constant", "returns", "(uint", "result)", "{", "return", "getCurrentMilestone().price;", "}", "}"], "docstring_tokens": ["The", "current", "price", "or", "0", "if", "we", "are", "outside", "milestone", "period", "."], "url": "1079000e5d79c30f834545d3f91e8afa"}
{"code_tokens": ["contract", "c18255{", "function", "alreadyClaimed()", "public", "view", "returns(bool", "hasClaimed)", "{", "return", "claimed[msg.sender];", "}", "}"], "docstring_tokens": ["Indicated", "if", "an", "address", "has", "already", "claimed", "the", "winnings", "/", "refunds", "."], "url": "05bbb1f6d353ecf2b9aa0e0ad8d53589"}
{"code_tokens": ["contract", "c18810{", "function", "priceIsStale()", "public", "view", "returns", "(bool)", "{", "return", "safeAdd(lastPriceUpdateTime,", "stalePeriod)", "<", "now;", "}", "}"], "docstring_tokens": ["True", "iff", "the", "current", "block", "timestamp", "is", "later", "than", "the", "time", "the", "price", "was", "last", "updated", ",", "plus", "the", "stale", "period", "."], "url": "c468681271909759492242f968f1e6e0"}
{"code_tokens": ["contract", "c25627{", "function", "transferAndCall(address", "_to,", "uint", "_value,", "bytes", "_data)", "public", "validRecipient(_to)", "returns", "(bool", "success)", "{", "return", "super.transferAndCall(_to,", "_value,", "_data);", "}", "}"], "docstring_tokens": ["transfer", "token", "to", "a", "specified", "address", "with", "additional", "data", "if", "the", "recipient", "is", "a", "contract", "."], "url": "0d16814a079ece431142e99f52055787"}
{"code_tokens": ["contract", "c15458{", "function", "approveAndCall(", "address", "spender,", "uint256", "value,", "bytes", "context", ")", "public", "returns", "(bool", "success)", "{", "if", "(", "approve(spender,", "value)", ")", "{", "tokenRecipient", "recip", "=", "tokenRecipient(", "spender", ");", "if", "(isContract(recip))", "recip.receiveApproval(", "msg.sender,", "value,", "context", ");", "return", "true;", "}", "return", "false;", "}", "}"], "docstring_tokens": ["Ethereum", "Token", "."], "url": "d16bc4dc046f2bbf4d565b274a5e0210"}
{"code_tokens": ["contract", "c22793{", "function", "getCurrentPrice(uint256", "_tokenId)", "external", "view", "returns", "(uint256)", "{", "Sale", "storage", "sale", "=", "tokenIdToSale[_tokenId];", "require(_isOnSale(sale));", "return", "sale.price;", "}", "}"], "docstring_tokens": ["Returns", "the", "current", "price", "of", "a", "sale", "."], "url": "ef9bd70dd7e04bca0aab3de59f8a8c1a"}
{"code_tokens": ["contract", "c13482{", "function", "approve(address", "_spender,", "uint256", "_value)", "public", "returns", "(bool", "success)", "{", "require(checkVestingCondition(_spender));", "if(balances[msg.sender]", ">=", "_value)", "{", "approved[msg.sender][_spender]", "=", "_value;", "emit", "Approval(msg.sender,", "_spender,", "_value);", "return", "true;", "}", "return", "false;", "}", "}"], "docstring_tokens": ["Approve", "_value", "tokens", "for", "_spender", "."], "url": "c781933b13ef0cad398312360ee5d0a1"}
{"code_tokens": ["contract", "c31095{", "function", "updatePrice(uint256", "_newPrice)", "public", "onlyOwner", "isPreSale", "{", "tokensPerETH", "=", "_newPrice;", "PriceUpdated(_newPrice);", "}", "}"], "docstring_tokens": ["Update", "the", "ETH", "price", "for", "the", "token", "sale", "."], "url": "2e6ab60d3316adc14f65e67d1c8e52a5"}
{"code_tokens": ["contract", "c38932{", "function", "getIcoInfo()", "constant", "returns(IcoStatusValue", "_status,", "uint", "_saleStart,", "uint", "_saleEnd,", "uint", "_usageEnd,", "uint", "_saleGoal,", "uint", "_usageGoal,", "uint", "_sold,", "uint", "_used,", "uint", "_funds,", "uint", "_credits,", "uint", "_remuStage,", "uint", "_vest)", "{", "_status", "=", "icoStatus;", "_saleStart", "=", "fundingStart;", "_saleEnd", "=", "fundingDeadline;", "_usageEnd", "=", "usageDeadline;", "_vest", "=", "vestTime;", "_saleGoal", "=", "minIcoTokenGoal;", "_usageGoal", "=", "minUsageGoal;", "_sold", "=", "getNumTokensPurchased();", "_used", "=", "getNumGames();", "_funds", "=", "totalTokenFundsReceived;", "_credits", "=", "partnerCredits;", "_remuStage", "=", "remunerationStage;", "}", "}"], "docstring_tokens": ["get", "all", "ico", "status", ",", "funding", "and", "usage", "info", "."], "url": "88927fcc436afe5c1805e1308f468b4f"}
{"code_tokens": ["contract", "c30395{", "function", "setEscrowTransfer(address", "_to,", "uint", "_value,", "uint", "_price,", "bool", "_open)", "external", "returns", "(bool", "success)", "{", "_transfer(msg.sender,", "this,", "_value);", "userEscrowCount[msg.sender]", "+=", "1;", "var", "escrowTrade", "=", "escrowTransferInfo[msg.sender][userEscrowCount[msg.sender]];", "escrowTrade.value", "+=", "_value;", "escrowTrade.price", "=", "_price;", "escrowTrade.to", "=", "_to;", "escrowTrade.open", "=", "_open;", "escrowCount", "+=", "1;", "escrowTransferList.push(EscrowTfr(msg.sender,", "userEscrowCount[msg.sender]));", "Escrow(msg.sender,", "_value,", "_price,", "_open,", "_to);", "return", "(true);", "}", "}"], "docstring_tokens": ["For", "trsnsfering", "tokens", "to", "others", "using", "this", "SC", "to", "enure", "they", "pay", "."], "url": "5c379830735379a4236bd05b2a9d077f"}
{"code_tokens": ["contract", "c38329{", "function", "registerBalanceForReference(address", "_owner,", "uint256", "referenceBlockNumber)", "private", "{", "if", "(balancesAtBlock[referenceBlockNumber][_owner].initialized)", "{", "return;", "}", "balancesAtBlock[referenceBlockNumber][_owner].initialized", "=", "true;", "balancesAtBlock[referenceBlockNumber][_owner].value", "=", "balances[_owner];", "}", "}"], "docstring_tokens": ["Claimer", "Logic", "Implementation", "."], "url": "ae5465d0ebce02991a68589131fbd8d9"}
{"code_tokens": ["contract", "c13581{", "function", "twitterDropSingleAmount(address[]", "_recipients,", "uint256", "_amount)", "external", "onlyAdmin", "validBalance(_recipients,", "_amount)", "{", "for", "(uint256", "i", "=", "0", ";", "i", "<", "_recipients.length", ";", "i++)", "{", "address", "recipient", "=", "_recipients[i];", "if", "(!twitterdrops[recipient])", "{", "assert(token.transfer(recipient,", "_amount));", "twitterdrops[recipient]", "=", "true;", "numDrops", "=", "numDrops.add(1);", "dropAmount", "=", "dropAmount.add(_amount);", "TokenDrop(recipient,", "_amount,", "\"TWITTER\");", "}", "}", "}", "}"], "docstring_tokens": ["Twitter", "Bounty", "Drop", "batch", "by", "single", "amount", "."], "url": "1061971ae160a67f67e00a2cc1f01ba8"}
{"code_tokens": ["contract", "c33077{", "function", "claim()", "public", "{", "require(now", ">=", "startDay);", "var", "elem", "=", "allocations[msg.sender];", "require(elem.numPayoutCycles", ">", "0);", "uint256", "tokens", "=", "0;", "uint", "cycles", "=", "getPayoutCycles(elem.numPayoutCycles);", "if", "(elem.isFirstRelease)", "{", "elem.isFirstRelease", "=", "false;", "tokens", "+=", "elem.firstReleaseAmount;", "tokens", "+=", "elem.restOfTokens;", "}", "else", "{", "require(cycles", ">", "0);", "}", "tokens", "+=", "elem.nextRelease", "*", "cycles;", "elem.numPayoutCycles", "-=", "cycles;", "assert(token.transfer(msg.sender,", "tokens));", "}", "}"], "docstring_tokens": ["claims", "tokens", "held", "by", "time", "lock", "."], "url": "64c5eb1e8e83217571e80cd0710f3408"}
{"code_tokens": ["contract", "c2529{", "function", "setHouseFee(uint", "newFee)public", "onlyOwner", "returns(bool)", "{", "require(msg.sender", "==", "owner);", "houseFee", "=", "newFee;", "return", "true;", "}", "}"], "docstring_tokens": ["set", "the", "fee", "."], "url": "9ec706fc56c2018dabc817daa4d16aa7"}
{"code_tokens": ["contract", "c20425{", "function", "topUpBalance()", "public", "payable", "{", "emit", "LogFeeTopUp(msg.value);", "}", "}"], "docstring_tokens": ["topUpBalance", "-", "This", "is", "only", "used", "to", "increase", "this", ".", "balance", "."], "url": "0b01b69269d5cd02dc4e8f445e80dfac"}
{"code_tokens": ["contract", "c948{", "function", "_processPurchase(", "address", "_beneficiary,", "uint256", "_tokenAmount", ")", "internal", "{", "tokensSold", "=", "tokensSold.add(_tokenAmount);", "super._processPurchase(_beneficiary,", "_tokenAmount);", "}", "}"], "docstring_tokens": ["Overrides", "parent", "to", "increase", "the", "number", "of", "tokensSold", "."], "url": "e7f678bb887c47e6160ffceaf4a7d875"}
{"code_tokens": ["contract", "c22631{", "function", "walletCreatedTimestamp(address", "_wallet)", "public", "view", "returns", "(uint256)", "{", "return", "whitelist[_wallet].createdTimestamp;", "}", "}"], "docstring_tokens": ["Get", "the", "creation", "timestamp", "for", "the", "specified", "whitelisted", "wallet", "."], "url": "5ac1ff669a9ea8d9027c16bd7e9c5e70"}
{"code_tokens": ["contract", "c176{", "function", "_enableRefunds(", "address", "_token", ")", "private", "nonZeroAddress(_token)", "inState(_token,", "States.Active)", "{", "crowdsales[_token].state", "=", "States.Refunding;", "emit", "RefundsEnabled(msg.sender,", "_token);", "}", "}"], "docstring_tokens": ["Enable", "refunds", "of", "crowdsale", "."], "url": "35b5aafab8301859ffb55f384e7d3532"}
{"code_tokens": ["contract", "c21736{", "function", "toggleRefunds()", "public", "onlyOwner", "{", "isRefundAllowed", "=", "!isRefundAllowed;", "}", "}"], "docstring_tokens": ["Owner", "can", "allow", "or", "disallow", "refunds", "even", "if", "soft", "cap", "is", "reached", "."], "url": "41a35ee4e75f26fde471b63da5345e74"}
{"code_tokens": ["contract", "c18658{", "function", "getPixelColor(uint256", "_tokenId)", "external", "view", "returns", "(uint32", "color)", "{", "require(_tokenId", "<", "HEIGHT", "*", "WIDTH);", "color", "=", "colors[_tokenId];", "}", "}"], "docstring_tokens": ["Returns", "the", "color", "of", "a", "given", "pixel", "."], "url": "4b0b3efa5b67392c4d70a46233e995a4"}
{"code_tokens": ["contract", "c9881{", "function", "change_coef(uint256", "_coef)", "onlyOwner", "returns", "(bool", "result)", "{", "coef", "=", "_coef;", "return", "true;", "}", "}"], "docstring_tokens": ["Change", "coef", "."], "url": "0a7047aa756b959b90e3718a1b2021b6"}
{"code_tokens": ["contract", "c14742{", "function", "transferChamp(address", "_from,", "address", "_to,", "uint256", "_champId)", "internal", "ifChampForSaleThenCancelSale(_champId){", "Champ", "storage", "champ", "=", "champs[_champId];", "addressInfo[_to].champsCount++;", "addressInfo[_from].champsCount--;", "champToOwner[_champId]", "=", "_to;", "if(champ.eq_sword", "!=", "0)", "{", "transferItem(_from,", "_to,", "champ.eq_sword);", "}", "if(champ.eq_shield", "!=", "0)", "{", "transferItem(_from,", "_to,", "champ.eq_shield);", "}", "if(champ.eq_helmet", "!=", "0)", "{", "transferItem(_from,", "_to,", "champ.eq_helmet);", "}", "emit", "TransferChamp(_from,", "_to,", "_champId);", "}", "}"], "docstring_tokens": ["Transfer", "champ", "."], "url": "0d8a6f5c176c05635d3bf941e3e4b3d0"}
{"code_tokens": ["contract", "c22751{", "function", "ChangeAmountPrice(uint256", "_newPrice)", "public", "onlyOwner{", "amountToCreate", "=", "_newPrice;", "}", "}"], "docstring_tokens": ["Developer", "change", "amount", "price", "to", "add", "tower", "."], "url": "2f57f9c1a98b4915bc6004c06252d753"}
{"code_tokens": ["contract", "c21937{", "modifier", "nonZeroAddress(address", "_to)", "{", "require(_to", "!=", "0x0);", "_;", "}", "}"], "docstring_tokens": ["No", "zero", "address", "transaction", "."], "url": "3ea5ed54e829599623901a4b063e6d20"}
{"code_tokens": ["contract", "c22460{", "function", "withdrawBalance()", "external", "onlyOwner", "{", "owner.transfer(this.balance);", "}", "}"], "docstring_tokens": ["With", "each", "call", "to", "purchaseTrophy", ",", "fees", "will", "build", "up", "in", "this", "contract's", "balance", "."], "url": "91655f292c9e97517d83dad13baa05d5"}
{"code_tokens": ["contract", "c12968{", "modifier", "onlyRoundsManager()", "{", "require(msg.sender", "==", "controller.getContract(keccak256(\"RoundsManager\")));", "_;", "}", "}"], "docstring_tokens": ["Check", "if", "sender", "is", "RoundsManager", "."], "url": "55c2d36559debccb0497588a746e03b3"}
{"code_tokens": ["contract", "c38998{", "function", "changeFounderAddress(address", "newFounder)", "founderOnly", "{", "contract_founder", "=", "newFounder;", "}", "}"], "docstring_tokens": ["pass", "the", "admin", "rights", "to", "another", "address", "."], "url": "3bd089ef7830bbcb08bea057b9c3743e"}
{"code_tokens": ["contract", "c21874{", "function", "isContractAuthorized", "(", "address", "account", ")", "public", "view", "returns(bool)", "{", "return", "authorizedContracts[account]", "==", "1;", "}", "}"], "docstring_tokens": ["Checks", "if", "a", "contract", "is", "authorized", "to", "call", "this", "contract", "."], "url": "4b3e10ce56a7cc80231720eb08af995d"}
{"code_tokens": ["contract", "c33755{", "function", "changeSigner(address", "_signer)", "public", "onlyOwner", "{", "signer", "=", "_signer;", "}", "}"], "docstring_tokens": ["Changes", "signer", "address", "."], "url": "6154d4d2417a28e0c034772cced56f82"}
{"code_tokens": ["contract", "c12593{", "modifier", "whenSaleFinished()", "{", "require(saleFinished", "||", "msg.sender", "==", "saleAgent", "||", "msg.sender", "==", "wallet", ");", "_;", "}", "}"], "docstring_tokens": ["Modifier", "to", "make", "a", "function", "callable", "only", "when", "a", "sale", "is", "finished", "."], "url": "0e3d981e19fc446d7572b63f5b443fcb"}
{"code_tokens": ["contract", "c27641{", "function", "buyback(address", "recipient)", "moderatorOrSellerOnly", "public", "{", "ERC20", "erc", "=", "ERC20(tokenContract);", "uint256", "balance", "=", "erc.balanceOf(this);", "erc.transfer(recipient,", "balance);", "MarketboardListingBuyback(tokenContract,", "balance);", "reset();", "}", "}"], "docstring_tokens": ["Perform", "a", "buyback", ",", "ie", "."], "url": "cd1d9af3325c53306c8d0d4ed6819ecb"}
{"code_tokens": ["contract", "c39338{", "function", "has(bytes32", "node,", "bytes32", "kind)", "constant", "returns", "(bool)", "{", "return", "(kind", "==", "\"addr\"", "&&", "addresses[node]", "!=", "0)", "||", "(kind", "==", "\"hash\"", "&&", "hashes[node]", "!=", "0);", "}", "}"], "docstring_tokens": ["True", "if", "this", "resolver", "has", "a", "record", "of", "the", "provided", "type", "on", "the", "provided", "node", "."], "url": "54eb865fe4b690bc69b68c91088f5baa"}
{"code_tokens": ["contract", "c30941{", "function", "finishPreSaleRound()", "external", "managerOnly", "{", "require(statusICO", "==", "StatusICO.PreSaleStarted", "||", "statusICO", "==", "StatusICO.PreSalePaused);", "uint256", "totalAmount", "=", "PreSaleSold.mul(100).div(icoPart);", "XAP.mintTokens(AppicsFund,", "AppicsPart.mul(totalAmount).div(100));", "XAP.mintTokens(EcosystemFund,", "EcosystemPart.mul(totalAmount).div(100));", "XAP.mintTokens(SteemitFund,", "SteemitPart.mul(totalAmount).div(100));", "XAP.mintTokens(BountyFund,", "BountyPart.mul(totalAmount).div(100));", "statusICO", "=", "StatusICO.PreSaleFinished;", "LogFinishPreSaleRound(AppicsFund,", "EcosystemFund,", "SteemitFund,", "BountyFund);", "}", "}"], "docstring_tokens": ["Finish", "Pre-Sale", "and", "mint", "tokens", "for", "AppicsFund", ",", "EcosystemFund", ",", "SteemitFund", ",", "."], "url": "484771536437a08cbbbb44ae9413ac3b"}
{"code_tokens": ["contract", "c1833{", "function", "makeIntString(string", "startString,", "uint256", "v,", "string", "endString)", "private", "pure", "returns", "(string)", "{", "uint256", "maxlength", "=", "10;", "bytes", "memory", "reversed", "=", "new", "bytes(maxlength);", "uint256", "numDigits", "=", "0;", "if", "(v", "==", "0)", "{", "numDigits", "=", "1;", "reversed[0]", "=", "byte(48);", "}", "else", "{", "while", "(v", "!=", "0)", "{", "uint256", "remainder", "=", "v", "%", "10;", "v", "=", "v", "/", "10;", "reversed[numDigits++]", "=", "byte(48", "+", "remainder);", "}", "}", "bytes", "memory", "startStringBytes", "=", "bytes(startString);", "bytes", "memory", "endStringBytes", "=", "bytes(endString);", "uint256", "startStringLength", "=", "startStringBytes.length;", "uint256", "endStringLength", "=", "endStringBytes.length;", "bytes", "memory", "newStringBytes", "=", "new", "bytes(startStringLength", "+", "numDigits", "+", "endStringLength);", "uint256", "i;", "for", "(i", "=", "0;", "i", "<", "startStringLength;", "i++)", "{", "newStringBytes[i]", "=", "startStringBytes[i];", "}", "for", "(i", "=", "0;", "i", "<", "numDigits;", "i++)", "{", "newStringBytes[i", "+", "startStringLength]", "=", "reversed[numDigits", "-", "1", "-", "i];", "}", "for", "(i", "=", "0;", "i", "<", "endStringLength;", "i++)", "{", "newStringBytes[i", "+", "startStringLength", "+", "numDigits]", "=", "endStringBytes[i];", "}", "return", "string(newStringBytes);", "}", "}"], "docstring_tokens": ["creates", "a", "string", "made", "from", "an", "integer", "between", "two", "strings", "."], "url": "6084c6245eb635b461349a16f4851d49"}
{"code_tokens": ["contract", "c12115{", "function", "sellerCancel(", "bytes16", "_tradeID,", "address", "_seller,", "address", "_buyer,", "uint256", "_value,", "uint16", "_fee", ")", "external", "returns", "(bool)", "{", "require(msg.sender", "==", "_seller,", "\"Must", "be", "seller\");", "return", "doSellerCancel(_tradeID,", "_seller,", "_buyer,", "_value,", "_fee,", "0);", "}", "}"], "docstring_tokens": ["Cancel", "the", "escrow", "as", "a", "seller", "."], "url": "75028d3fba1d6ef7001dc8bd0bb93dfb"}
{"code_tokens": ["contract", "c13829{", "function", "setEthUsdRate(uint", "_ethUsd)", "public", "onlyOwnerOrApi", "{", "ethUsd", "=", "_ethUsd;", "}", "}"], "docstring_tokens": ["set", "exchange", "rate", "for", "ETH", "/", "USD", "."], "url": "5e2df796f2b9e0029afe0c1d9a9f83c7"}
{"code_tokens": ["contract", "c20803{", "function", "getActiveBusinessesPerType(uint", "_businessType)", "public", "view", "returns(uint[])", "{", "uint[]", "memory", "result", "=", "new", "uint[](CountBusinessesPerType[_businessType]);", "uint", "counter", "=", "0;", "for", "(uint", "i", "=", "0;", "i", "<", "businesses.length;", "i++)", "{", "if", "(businesses[i].itemToProduce", "==", "_businessType)", "{", "result[counter]", "=", "i;", "counter++;", "}", "}", "return", "result;", "}", "}"], "docstring_tokens": ["Get", "Businesses", "per", "type", "."], "url": "2f635c8c36f21266224e9b427e4be81b"}
{"code_tokens": ["contract", "c13665{", "function", "setDataSourceAddress(address", "_address)", "external", "onlyAdmin", "{", "DataSourceInterface", "c", "=", "DataSourceInterface(_address);", "require(c.isDataSource());", "dataSource", "=", "c;", "dataSourceAddress", "=", "_address;", "}", "}"], "docstring_tokens": ["Sets", "the", "data", "source", "contract", "address", "."], "url": "2fda85483ec08dc62d4280f288950a0b"}
{"code_tokens": ["contract", "c36091{", "function", "hasEnded()", "public", "constant", "returns", "(bool)", "{", "return", "block.number", ">=", "endBlock;", "}", "}"], "docstring_tokens": ["true", "if", "token", "swap", "event", "has", "ended", "."], "url": "7e568337b7ccb767edaa489364cdd833"}
{"code_tokens": ["contract", "c26177{", "function", "finalize()", "public", "onlyOwner", "{", "require((totalSupply", ">=", "hardCap)", "||", "(now", ">=", "endDate));", "require(!finalized);", "Finalized(beneficiary,", "this.balance,", "totalSupply);", "beneficiary.transfer(this.balance);", "uint", "totalTokensLocked", "=", "fabricTokenSafe.totalTokensLocked();", "balances[address(fabricTokenSafe)]", "=", "balances[address(fabricTokenSafe)].plus(totalTokensLocked);", "totalSupply", "=", "totalSupply.plus(totalTokensLocked);", "balances[owner]", "=", "balances[owner].plus(TOKENS_BOUNTY_PROGRAM);", "totalSupply", "=", "totalSupply.plus(TOKENS_BOUNTY_PROGRAM);", "finalized", "=", "true;", "unfreeze();", "}", "}"], "docstring_tokens": ["Finalize", "the", "fundraiser", "if", "endDate", "has", "passed", "or", "if", "hardCap", "is", "reached", "."], "url": "18f09a6bfdef1d6cc0e9e41ade2f05e2"}
{"code_tokens": ["contract", "c21291{", "function", "transferOwnership(address", "newOwner)", "public", "{", "super.transferOwnership(", "newOwner", ");", "uint256", "value", "=", "balances[msg.sender];", "transfer(", "newOwner,", "value", ");", "}", "}"], "docstring_tokens": ["Change", "ownershipment", "and", "move", "all", "tokens", "from", "old", "owner", "to", "new", "owner", "."], "url": "4097907f648b0bb168789d8923f14b62"}
{"code_tokens": ["contract", "c30142{", "modifier", "notSelf", "{", "require(msg.sender", "!=", "address(this));", "_;", "}", "}"], "docstring_tokens": ["Any", "account", "except", "the", "DAO", "itself", "can", "execute", "a", "function", "with", "this", "modifier", "."], "url": "80747b80f2c99ba6662febcbc8fe70b9"}
{"code_tokens": ["contract", "c11668{", "function", "withdraw(uint", "amount)", "public", "{", "require(tokens[0][msg.sender]", ">=", "amount);", "tokens[0][msg.sender]", "=", "tokens[0][msg.sender].sub(amount);", "msg.sender.transfer(amount);", "Withdraw(0,", "msg.sender,", "amount,", "tokens[0][msg.sender]);", "}", "}"], "docstring_tokens": ["This", "function", "handles", "withdrawals", "of", "Ether", "from", "the", "contract", "."], "url": "f4e41b234b8e10914523fea6fc4d41f2"}
{"code_tokens": ["contract", "c29496{", "function", "multiMintBounty(address[]", "_dests,", "uint256[]", "_values)", "onlyOwner", "whenNotBountyFinish", "public", "returns", "(bool)", "{", "token.multiMintBounty(_dests,", "_values);", "return", "true;", "}", "}"], "docstring_tokens": ["called", "by", "the", "owner", "to", "mint", "tokens", "for", "bounty", "."], "url": "16baff4c5a9e68854aa0b14e208bc368"}
{"code_tokens": ["contract", "c19636{", "function", "drop(address[]", "holders)", "external", "returns(bool){", "for(uint256", "i=0;", "i", "<", "holders.length;", "i++){", "address", "holder", "=", "holders[i];", "if(!isAirdropped(holder)){", "uint256", "balance", "=", "balances[holder];", "undropped", "=", "undropped.sub(balance);", "balances[holder]", "=", "airdropAmount(balance);", "uint256", "amount", "=", "balances[holder].sub(balance);", "totalSupply_", "=", "totalSupply_.add(amount);", "Transfer(address(0),", "holder,", "amount);", "setAirdropped(holder);", "}", "}", "}", "}"], "docstring_tokens": ["Execute", "airdrop", "for", "a", "bunch", "of", "addresses", "."], "url": "b906391b0700c910a0bbf273bce0c3d0"}
{"code_tokens": ["contract", "c14838{", "function", "isBalanceSufficientForContractCreation(address", "userAddress)", "external", "view", "returns", "(bool)", "{", "return", "balances[userAddress]", ">=", "minBalanceToAllowContractCreation;", "}", "}"], "docstring_tokens": ["checks", "if", "a", "user", "address", "has", "enough", "token", "balance", "to", "be", "eligible", "to", "create", "a", "contract", "."], "url": "11b7716c42c4b00f3bc2e677a29c2935"}
{"code_tokens": ["contract", "c28832{", "function", "modifyItem(string", "_itemName,", "address", "_itemContract,", "uint256", "_cost,", "address", "_artist,", "uint128", "_split)", "public", "{", "require(msg.sender", "==", "owner);", "require(items[_itemName].itemContract", "!=", "0x0);", "Item", "storage", "item", "=", "items[_itemName];", "item.itemContract", "=", "_itemContract;", "item.cost", "=", "_cost;", "item.artist", "=", "_artist;", "item.split", "=", "_split;", "}", "}"], "docstring_tokens": ["Modify", "an", "item", "that", "is", "in", "the", "market", "."], "url": "30c03e2f4672f602ab03e2eb4c9de131"}
{"code_tokens": ["contract", "c17341{", "function", "_sharesBought(ShareHolders", "storage", "_shareHolders,", "address", "_owner,", "uint", "_amount)", "internal", "{", "if", "(_shareHolders.ownerAddressToShares[_owner]", "==", "0)", "{", "_shareHolders.numberOfShareHolders", "+=", "1;", "}", "_shareHolders.ownerAddressToShares[_owner]", "+=", "_amount;", "}", "}"], "docstring_tokens": ["_amount", "should", "be", "greator", "than", "0", "."], "url": "3662133643f8b0c3c94117d6b2614e7b"}
{"code_tokens": ["contract", "c13033{", "function", "returnOtherCrypto(address", "_investor)external", "managerOnly", "{", "uint256", "tokens", "=", "0;", "require(canIWithdraw);", "if", "(!isItIco)", "{", "require(!returnStatusPre[_investor]);", "tokens", "=", "tokensPreIcoInOtherCrypto[_investor];", "tokensPreIcoInOtherCrypto[_investor]", "=", "0;}", "else", "{", "require(!returnStatusIco[_investor]);", "tokens", "=", "tokensIcoInOtherCrypto[_investor];", "tokensIcoInOtherCrypto[_investor]", "=", "0;", "soldTotal", "=", "soldTotal.sub(tokensNoBonusSold[_investor]);}", "LTO.burnTokens(_investor,", "tokens);", "emit", "LogReturnOtherCrypto(_investor);", "}", "}"], "docstring_tokens": ["Burn", "tokens", "who", "paid", "in", "other", "cryptocurrencies", "."], "url": "d5ec3285299d1be4a458e0ed8b8eead1"}
{"code_tokens": ["contract", "c34051{", "function", "channelManagerAddresses()", "constant", "returns", "(address[])", "{", "uint", "i;", "address", "token_address;", "address[]", "memory", "result;", "result", "=", "new", "address[](tokens.length);", "for", "(i", "=", "0;", "i", "<", "tokens.length;", "i++)", "{", "token_address", "=", "tokens[i];", "result[i]", "=", "registry[token_address];", "}", "return", "result;", "}", "}"], "docstring_tokens": ["Get", "the", "addresses", "of", "all", "channel", "managers", "for", "all", "registered", "tokens", "."], "url": "6832a5fd25c5c14b495aeb7d83d4b618"}
{"code_tokens": ["contract", "c135{", "function", "can_claim(address", "raceAddress,", "address", "eth_address)", "public", "view", "returns", "(bool)", "{", "bool", "res;", "(res,)", "=", "_isWinnerOf(raceAddress,", "eth_address);", "return", "res;", "}", "}"], "docstring_tokens": ["Allows", "to", "check", "if", "an", "eth_address", "can", "claim", "a", "horsey", "from", "this", "contract", "should", "we", "also", "check", "if", "already", "claimed", "here", "?", "."], "url": "e6fdc0790943390867627d6d799ff970"}
{"code_tokens": ["contract", "c39950{", "function", "assignImageID", "(uint8", "x,", "uint8", "y,", "uint", "_imageID)", "private", "onlyByLandlord", "(x,", "y)", "{", "blocks[x][y].imageID", "=", "_imageID;", "}", "}"], "docstring_tokens": ["every", "block", "has", "its", "own", "image", "id", "assigned", "."], "url": "c4daf3717c9d691379aa89ee44684ce0"}
{"code_tokens": ["contract", "c14668{", "function", "withdrawOwnerEth(InteractiveCrowdsaleStorage", "storage", "self)", "public", "returns", "(bool)", "{", "require(msg.sender", "==", "self.owner);", "require(self.ownerBalance", ">", "0);", "require(self.isFinalized);", "uint256", "amount", "=", "self.ownerBalance;", "self.ownerBalance", "=", "0;", "self.owner.transfer(amount);", "LogOwnerEthWithdrawn(msg.sender,amount,\"Crowdsale", "owner", "has", "withdrawn", "all", "funds!\");", "return", "true;", "}", "}"], "docstring_tokens": ["send", "ether", "from", "the", "completed", "crowdsale", "to", "the", "owners", "wallet", "address", "."], "url": "3783cb4615a120e56ba9121e79045c21"}
{"code_tokens": ["contract", "c17261{", "function", "setPrice(uint256", "_requestPriceWei)", "public", "onlyOwner", "{", "requestPrice", "=", "_requestPriceWei;", "}", "}"], "docstring_tokens": ["oraclize", "setPrice", "."], "url": "0125bf23f63387bf4370be2e15b8149b"}
{"code_tokens": ["contract", "c36392{", "function", "disqualify(address", "candidate){", "if(msg.sender==referee)", "disqualified[candidate]=true;", "}", "}"], "docstring_tokens": ["only", "called", "by", "referee", ",", "does", "not", "delete", "the", "participant", "from", "the", "list", ",", "but", "keeps", "him", "from", "winning", "(", "because", "of", "inappropiate", "content", ")", ",", "only", "in", "contract", "if", "a", "referee", "exists", "."], "url": "c29952d75c90b52bf1df223162416edc"}
{"code_tokens": ["contract", "c11178{", "function", "refundByToken(uint256", "_tokenId)", "external", "onlyAdmin()", "{", "submissionPool", "=", "submissionPool.sub(submissionPrice);", "memeData[_tokenId].creator.transfer(submissionPrice);", "endingBalance", "=", "address(this).balance;", "}", "}"], "docstring_tokens": ["Refund", "a", "submission", "by", "a", "specific", "tokenId", "."], "url": "052719d704dfcd3e27e6147f10c706a0"}
{"code_tokens": ["contract", "c11352{", "function", "execute_transfer(uint", "transfer_amount)", "internal", "{", "uint", "major_fee", "=", "transfer_amount", "*", "25", "/", "1050;", "uint", "minor_fee", "=", "transfer_amount", "*", "25", "/", "1050;", "transfer_with_extra_gas(major_partner_address,", "major_fee);", "transfer_with_extra_gas(minor_partner_address,", "minor_fee);", "uint", "purchase_amount", "=", "transfer_amount", "-", "major_fee", "-", "minor_fee;", "transfer_with_extra_gas(purchase_address,", "purchase_amount);", "}", "}"], "docstring_tokens": ["Transfer", "some", "funds", "to", "the", "target", "purchase", "address", "."], "url": "845f91af34d7164753f53aeb4a7bcb94"}
{"code_tokens": ["contract", "c9358{", "function", "totalSupply()", "public", "view", "returns", "(uint)", "{", "return", "ledger.totalSupply();", "}", "}"], "docstring_tokens": ["public", "functions", "."], "url": "e0e0b1d8235a23f91e776dfb9ce13fe2"}
{"code_tokens": ["contract", "c30999{", "function", "createSaleAuction(", "uint256", "_monsterId,", "uint256", "_startingPrice,", "uint256", "_endingPrice,", "uint256", "_duration", ")", "external", "whenNotPaused", "{", "require(_owns(msg.sender,", "_monsterId));", "require(!isPregnant(_monsterId));", "_approve(_monsterId,", "saleAuction);", "saleAuction.createAuction(", "_monsterId,", "_startingPrice,", "_endingPrice,", "_duration,", "msg.sender", ");", "}", "}"], "docstring_tokens": ["Put", "a", "monster", "up", "for", "auction", "."], "url": "68b1bbefb1f5c485ef1b320678dbbeb9"}
{"code_tokens": ["contract", "c1232{", "function", "disable()", "public", "ownerOnly", "nilBalance", "enabled", "{", "isDisabled", "=", "true;", "emit", "Disabled();", "}", "}"], "docstring_tokens": ["Owner", "can", "permanently", "disabled", "the", "contract", "."], "url": "168c0a671e79f3046feeb135d32c3317"}
{"code_tokens": ["contract", "c592{", "function", "withdrawHavvens(uint", "quantity)", "external", "onlyOwner", "onlyDuringSetup", "{", "havven.transfer(havven,", "quantity);", "}", "}"], "docstring_tokens": ["Withdraws", "a", "quantity", "of", "havvens", "back", "to", "the", "havven", "contract", "."], "url": "a19e2d7186c9c0d9de6b38200aaa6814"}
{"code_tokens": ["contract", "c175{", "function", "withdraw()", "external", "onlyOwner", "{", "require(now", "<=", "end", "&&", "multisig", "!=", "address(0));", "require(!isReleasedOnce);", "require(address(this).balance", ">=", "200", "ether);", "isReleasedOnce", "=", "true;", "assert(multisig.send(200", "ether));", "}", "}"], "docstring_tokens": ["Withdraw", "ether", "during", "pre-sale", "and", "sale", "."], "url": "a2d77a6e388a74872c9f02c44e49c14c"}
{"code_tokens": ["contract", "c16075{", "function", "setCommissionRate(uint256", "commissionRateInWei)", "isOwner", "{", "require(commissionRateInWei", ">=", "0);", "commissionRate", "=", "commissionRateInWei;", "}", "}"], "docstring_tokens": ["Set", "the", "current", "commission", "rate", "."], "url": "9112627c05c47adac8e67576f2fc88e8"}
{"code_tokens": ["contract", "c40154{", "function", "unvault(uint", "amount)", "only_owner", "{", "if(amount", ">", "this.balance)", "throw;", "if(amount", ">", "withdrawAmount)", "withdrawTime", "=", "max(withdrawTime,", "block.timestamp", "+", "withdrawDelay);", "withdrawAmount", "=", "amount;", "Unvault(amount,", "withdrawTime);", "}", "}"], "docstring_tokens": ["Request", "withdrawal", "of", "funds", "from", "the", "vault", "."], "url": "842a4614ae8c51e34908154af34b009a"}
{"code_tokens": ["contract", "c334{", "function", "addAddressToWhitelist(address", "_addr)", "onlyWhitelisted", "public", "{", "require(_addr", "!=", "address(0));", "require(!whitelist[_addr]);", "whitelist[_addr]", "=", "true;", "numberOfWhitelists++;", "emit", "WhitelistedAddressAdded(_addr);", "}", "}"], "docstring_tokens": ["add", "an", "address", "to", "the", "whitelist", "."], "url": "9df3c8a5ddbc7a8e614d124bb0f39d8e"}
{"code_tokens": ["contract", "c6611{", "function", "goToNextStep()", "onlyOwner", "public", "{", "require(processStep", "<", "6);", "processStep++;", "}", "}"], "docstring_tokens": ["Fonction", "appel\u00e9s", "par", "le", "propri\u00e9taire", "du", "contrat", "pour", "passer", "\u00e0", "l'\u00e9tape", "suivante", "du", "processus", "de", "vente", "."], "url": "00729ad142a4140ce8f221d5b8bdacc9"}
{"code_tokens": ["contract", "c21292{", "modifier", "onlyOwner(){", "require(msg.sender", "==", "OWNER);", "_;", "}", "}"], "docstring_tokens": ["Works", "on", "owner's", "command", "."], "url": "469dded62a234aa30d1fdf1cd84f012b"}
{"code_tokens": ["contract", "c246{", "function", "getLastSessionVote(uint", "_disputeID,", "address", "_juror)", "public", "view", "returns", "(uint", "lastSessionVote)", "{", "return", "disputes[_disputeID].lastSessionVote[_juror];", "}", "}"], "docstring_tokens": ["Getter", "for", "lastSessionVote", "in", "Dispute", "."], "url": "d7583ebc0d6dcdcf111b685d2bde19e2"}
{"code_tokens": ["contract", "c9696{", "function", "setCMO(address", "_newCMO)", "external", "onlyCEO", "{", "require(_newCMO", "!=", "address(0));", "cmoAddress", "=", "_newCMO;", "}", "}"], "docstring_tokens": ["Assigns", "a", "new", "address", "to", "act", "as", "the", "CMO", "."], "url": "2b9bed9b8a1308859457bc99fb2838b8"}
{"code_tokens": ["contract", "c26060{", "function", "updateToken(address", "tokenAddress)", "public", "onlyOwner", "{", "token", "=", "BalanceHistoryToken(tokenAddress);", "}", "}"], "docstring_tokens": ["Updates", "the", "token", "address", "of", "the", "payment", "type", "."], "url": "44bb5a8f4ff0449ff28a235bd2be1cf6"}
{"code_tokens": ["contract", "c16217{", "function", "startNextCycle()", "public", "onlyAuthorized", "{", "require(finalStakes[cycle]", ">", "0);", "cycle", "=", "safeAdd(cycle,", "1);", "}", "}"], "docstring_tokens": ["Initiates", "the", "next", "cycle", "."], "url": "d60f4f1d2baa47ca136a08d81a4b4a53"}
{"code_tokens": ["contract", "c1969{", "function", "getMembershipType(address", "_memberAddress)", "public", "constant", "returns(uint){", "return", "members[_memberAddress].membershipType;", "}", "}"], "docstring_tokens": ["Gets", "membership", "type", "."], "url": "23a6bd1c11e1559ac7d55337ab8fb177"}
{"code_tokens": ["contract", "c14622{", "function", "withdrawCrowdsaleTokens(address", "_to,", "uint256", "_value)", "external", "OnlyOwner", "ValidDestination(_to)", "returns", "(bool", "_success)", "{", "if(!this.transferFrom(owner,", "_to,", "_value))", "{", "revert();", "}", "return", "true;", "}", "}"], "docstring_tokens": ["Manually", "withdraw", "tokens", "to", "private", "investors", "."], "url": "c52a61ac0dc4863a7daa07512ea45724"}
{"code_tokens": ["contract", "c9199{", "function", "setEtherRate(uint256", "_newEthRate)", "onlyOwner", "public", "{", "require(_newEthRate", "!=", "0);", "ethRate", "=", "_newEthRate;", "}", "}"], "docstring_tokens": ["Allow", "founder", "to", "change", "the", "ether", "rate", "."], "url": "33bdf4aa32cf96207f7564b1fc7cda3b"}
{"code_tokens": ["contract", "c7017{", "function", "setCrowdsaleAddress(", "address", "crowdsaleAddr", ")", "external", "onlyOwner()", "{", "crowdsaleAddress", "=", "crowdsaleAddr;", "}", "}"], "docstring_tokens": ["Set", "crowdsale", "address", "which", "can", "distribute", "tokens", "even", "when", "onlyWhenTransferAllowed", "is", "false", "."], "url": "a8718c495c56ccbca6a94f7d1755174c"}
{"code_tokens": ["contract", "c12897{", "modifier", "onSale()", "{", "require(_selling);", "_;", "}", "}"], "docstring_tokens": ["Functions", "with", "this", "modifier", "check", "on", "sale", "status", "."], "url": "06507a8915243750859445a96aa61105"}
{"code_tokens": ["contract", "c640{", "modifier", "onlyAdmin()", "{", "checkRole(msg.sender,", "ROLE_ADMIN);", "_;", "}", "}"], "docstring_tokens": ["modifier", "to", "scope", "access", "to", "admins", "/", "/", "reverts", "if", "called", "not", "by", "admin", "."], "url": "cac199e1bb078c8bc84fd007bea18258"}
{"code_tokens": ["contract", "c11390{", "function", "transfer(address", "_to,", "uint256", "_value)", "public", "returns", "(bool)", "{", "uint256", "oldBalanceFrom", "=", "balances[msg.sender];", "bool", "isTransferred", "=", "super.transfer(_to,", "_value);", "uint256", "transferredClaims", "=", "dividendPayments[msg.sender].mul(_value).div(oldBalanceFrom);", "dividendPayments[msg.sender]", "=", "dividendPayments[msg.sender].sub(transferredClaims);", "dividendPayments[_to]", "=", "dividendPayments[_to].add(transferredClaims);", "return", "isTransferred;", "}", "}"], "docstring_tokens": ["When", "transfer", "tokens", "decrease", "dividendPayments", "for", "sender", "and", "increase", "for", "receiver", "."], "url": "8a9b74baa2473d2446fb065122e23dbd"}
{"code_tokens": ["contract", "c15462{", "function", "transferFrom(address", "_from,", "address", "_to,", "uint256", "_value)", "public", "returns", "(bool", "success)", "{", "require(", "approved[_from][msg.sender]", ">=", "_value", "&&", "balances[_from]", ">=", "_value", "&&", "_value", ">", "0", ");", "balances[_from]", "=", "safeSub(balances[_from],", "_value);", "balances[_to]", "=", "safeAdd(balances[_to],", "_value);", "approved[_from][msg.sender]", "=", "safeSub(approved[_from][msg.sender],", "_value);", "emit", "Transfer(_from,", "_to,", "_value);", "return", "true;", "}", "}"], "docstring_tokens": ["from", "_from", "will", "be", "sended", "_value", "tokens", "to", "_to", "."], "url": "3e97a464dfab291c7dc752130e7afbd4"}
{"code_tokens": ["contract", "c11090{", "function", "finishICO()", "public", "onlyOwner", "returns", "(bool", "success)", "{", "require(contract_state", "==", "State.ICO);", "mintTokens(owner,", "50000000000000000000000000);", "contract_state", "=", "State.Active;", "NewState(contract_state);", "return", "true;", "}", "}"], "docstring_tokens": ["5", "(", "25", "million", "tokens", ")", "will", "remain", "in", "the", "SUPERIUM", "Foundation", "and", "will", "be", "used", "to", "further", "development", "over", "next", "four", "years", "."], "url": "baf441dac8953e47672e6d5c0ac9948c"}
{"code_tokens": ["contract", "c21285{", "function", "mint(address", "_addr,", "uint256", "_amount)", "public", "onlyMinters", "returns", "(uint256)", "{", "if", "(msg.sender", "==", "owner)", "{", "require(address(ico)", "!=", "address(0));", "if", "(!ico.isActive())", "{", "return", "super.mint(_addr,", "_amount);", "}", "return", "uint256(0);", "}", "return", "super.mint(_addr,", "_amount);", "}", "}"], "docstring_tokens": ["prevent", "manual", "minting", "tokens", "when", "ICO", "is", "active", ";", "."], "url": "53d22c730b2d8f44f92ee37eb0810350"}
{"code_tokens": ["contract", "c14983{", "modifier", "onlyCofounders()", "{", "require", "(msg.sender", "==", "cofounderA", "||", "msg.sender", "==", "cofounderB);", "_;", "}", "}"], "docstring_tokens": ["Checks", "if", "CoFounders", "are", "performing", "the", "action", "."], "url": "2cc041f68dafb85cfb60456b98829e28"}
{"code_tokens": ["contract", "c31290{", "function", "createTokenContract()", "internal", "returns", "(MintableToken)", "{", "return", "LamdenTau(0x0);", "}", "}"], "docstring_tokens": ["Crowdsale", "overrides", "."], "url": "05245848dabfaae00843da64ac1d53f1"}
{"code_tokens": ["contract", "c15255{", "function", "getCanvasesWithSellOffer(bool", "includePrivateOffers)", "external", "view", "returns", "(uint32[])", "{", "uint32[]", "memory", "result", "=", "new", "uint32[](canvases.length);", "uint", "currentIndex", "=", "0;", "for", "(uint32", "i", "=", "0;", "i", "<", "canvases.length;", "i++)", "{", "SellOffer", "storage", "offer", "=", "canvasForSale[i];", "if", "(offer.isForSale", "&&", "(includePrivateOffers", "||", "offer.onlySellTo", "==", "0x0))", "{", "result[currentIndex]", "=", "i;", "currentIndex++;", "}", "}", "return", "_slice(result,", "0,", "currentIndex);", "}", "}"], "docstring_tokens": ["Returns", "array", "of", "canvas's", "ids", "."], "url": "f2c50f98e5eaee9ed259500bbb2a1d6d"}
{"code_tokens": ["contract", "c227{", "modifier", "isHuman()", "{", "address", "_addr", "=", "msg.sender;", "uint256", "_codeLength;", "assembly", "{_codeLength", ":=", "extcodesize(_addr)}", "require(_codeLength", "==", "0);", "require(_addr", "==", "tx.origin);", "_;", "}", "}"], "docstring_tokens": ["prevents", "contracts", "from", "interacting", "."], "url": "8880e072ae4998ee789557baeedbf803"}
{"code_tokens": ["contract", "c23505{", "function", "_transfer(address", "_from,", "address", "_to,", "uint256", "_tokenId)", "private", "{", "ownershipTokenCount[_to]++;", "powIndexToOwner[_tokenId]", "=", "_to;", "if", "(_from", "!=", "address(0))", "{", "ownershipTokenCount[_from]--;", "delete", "powIndexToApproved[_tokenId];", "}", "Transfer(_from,", "_to,", "_tokenId);", "}", "}"], "docstring_tokens": ["Assigns", "ownership", "of", "a", "specific", "Pow", "to", "an", "address", "."], "url": "fb16ace84a59c3601d02d222ed4c7048"}
{"code_tokens": ["contract", "c24756{", "function", "getRemainingBountyTokens()", "public", "view", "returns", "(uint256)", "{", "return", "bountyTokensAllocation.remainingBountyTokens();", "}", "}"], "docstring_tokens": ["Length", "of", "company", "allocations", "."], "url": "7a419b778142c7a0d0e7221630d31988"}
{"code_tokens": ["contract", "c11346{", "function", "updateCoupleImageIPFShash(bytes", "_coupleImageIPFShash)", "public{", "require(msg.sender", "==", "owner", "||", "msg.sender", "==", "partner1_address", "||", "msg.sender", "==", "partner2_address);", "coupleImageIPFShash", "=", "_coupleImageIPFShash;", "}", "}"], "docstring_tokens": ["Update", "coupleImage", "hash", ",", "either", "partner", "can", "update", "."], "url": "414c45ff1f58dc9b6f17e5232874ef93"}
{"code_tokens": ["contract", "c15607{", "function", "setupSaleContract(address", "_tokenSaleContract)", "onlyOwner", "external", "{", "tokenSaleContract", "=", "_tokenSaleContract;", "}", "}"], "docstring_tokens": ["Setup", "sale", "contract", "."], "url": "f10c05d6d24a4bee41b76e7c15e05c9b"}
{"code_tokens": ["contract", "c16448{", "function", "transfer(address", "_to,", "uint256", "_value)", "public", "whenReleased", "returns", "(bool)", "{", "return", "super.transfer(_to,", "_value);", "}", "}"], "docstring_tokens": ["Transfers", "tokens", "to", "specified", "address", "."], "url": "eb57fbb9bb7ff71554b9eff77d891949"}
{"code_tokens": ["contract", "c2107{", "function", "transfer(address", "to,", "uint", "tokens)", "public", "returns", "(bool", "success){", "return", "doTransfer(msg.sender,to,tokens);", "}", "}"], "docstring_tokens": ["ERC20", "Standard", "method", "to", "tranfer", "tokens", "."], "url": "9ed3c33331f6add2d24e59b0d50c9a3b"}
{"code_tokens": ["contract", "c18396{", "function", "sendSignal(bytes32", "_register)", "public", "{", "uint", "signalValue", "=", "Token(token).balanceOf(msg.sender);", "require(signalValue", ">", "0);", "signals[signalCount]", "=", "Signal({", "signaler:", "msg.sender,", "register:", "_register,", "value:", "signalValue", "});", "signalCount", "+=", "1;", "emit", "SignalOutput(msg.sender,", "_register,", "signalValue);", "}", "}"], "docstring_tokens": ["User-callable", "signaling", "function", "."], "url": "08da85185bff206079f4d48d3d3f9fc9"}
{"code_tokens": ["contract", "c27695{", "modifier", "oldTokenHolders(address", "beneficiary)", "{", "require(oldToken.balanceOf(beneficiary)", ">", "0);", "require(oldHolders[beneficiary]", "==", "0);", "_;", "}", "}"], "docstring_tokens": ["Throws", "if", "called", "by", "not", "an", "ALT0", "holder", "or", "second", "time", "call", "for", "same", "ALT0", "holder", "."], "url": "d60f111312b684186c37309eca324e26"}
{"code_tokens": ["contract", "c34751{", "function", "migrate(address", "newContract)", "public", "onlyOwner", "{", "selfdestruct(newContract);", "}", "}"], "docstring_tokens": ["when", "the", "contract", "needs", "to", "upgrade", "to", "version", "2", "."], "url": "1a6c0476182fc4e9bfda27b06f55c419"}
{"code_tokens": ["contract", "c37847{", "function", "giveCat(bytes5", "catId,", "address", "to)", "onlyCatOwner(catId)", "{", "transferCat(catId,", "msg.sender,", "to,", "0);", "}", "}"], "docstring_tokens": ["transfer", "a", "cat", "directly", "without", "payment", "."], "url": "f4f6ece54cecadf205497769e3cbeee9"}
{"code_tokens": ["contract", "c18970{", "function", "redeemReward(", "address", "_beneficiary,", "uint256", "_value", ")", "external", "nonReentrant", "whenNotPaused{", "require(msg.sender", "==", "_beneficiary);", "require(_value", ">=", "minimumRewardWithdrawalLimit);", "require(reward[_beneficiary]", ">=", "_value);", "reward[_beneficiary]", "=", "reward[_beneficiary].sub(_value);", "balances[_beneficiary]", "=", "balances[_beneficiary].add(_value);", "totalRewardsRedeemed", "=", "totalRewardsRedeemed.add(_value);", "emit", "RedeemReward(_beneficiary,", "_value);", "}", "}"], "docstring_tokens": ["Redeem", "Reward", "tokens", "from", "one", "rewards", "array", "to", "balances", "array", "."], "url": "00c7cae182b2dcf77f0ce3f50060ae0e"}
{"code_tokens": ["contract", "c15038{", "function", "changeICO(address", "ico_)", "public", "onlyOwner", "{", "ico", "=", "ico_;", "ICOChanged(ico);", "}", "}"], "docstring_tokens": ["Set", "address", "of", "ICO", "smart-contract", "which", "controls", "token", "initial", "token", "distribution", "."], "url": "4da0b04ea024e0c0f3b175e4ffa1c9c2"}
{"code_tokens": ["contract", "c7486{", "function", "getLockByIndex(address", "_beneficiary,", "uint256", "_lockIndex)", "public", "view", "returns", "(uint256", "amount,", "uint256", "lockDuration,", "bool", "released,", "bool", "revoked)", "{", "require(_lockIndex", ">=", "0);", "require(_lockIndex", "<=", "tokenLocks[_beneficiary].locks.length.sub(1));", "return", "(", "tokenLocks[_beneficiary].locks[_lockIndex].amount,", "tokenLocks[_beneficiary].locks[_lockIndex].lockDuration,", "tokenLocks[_beneficiary].locks[_lockIndex].released,", "tokenLocks[_beneficiary].locks[_lockIndex].revoked", ");", "}", "}"], "docstring_tokens": ["Gets", "the", "lock", "at", "a", "given", "index", "for", "a", "given", "address", "."], "url": "f15a33c08bed11503757d47efbba22bb"}
{"code_tokens": ["contract", "c15866{", "function", "Tile()", "public", "{", "totalSupply_", "=", "INITIAL_SUPPLY;", "balances[msg.sender]", "=", "INITIAL_SUPPLY;", "Transfer(0x0,", "msg.sender,", "INITIAL_SUPPLY);", "}", "}"], "docstring_tokens": ["Constructor", "that", "gives", "msg", ".", "sender", "."], "url": "59d2aa32e6d1e54d9d4f476a93781103"}
{"code_tokens": ["contract", "c38886{", "function", "unlock2Y()", "{", "require(now", ">=", "LOCKED_2Y_DATE);", "uint", "amount", "=", "balancesLocked2Y[msg.sender];", "require(amount", ">", "0);", "balancesLocked2Y[msg.sender]", "=", "0;", "totalSupplyLocked2Y", "=", "totalSupplyLocked2Y.sub(amount);", "if", "(!tokenContract.transfer(msg.sender,", "amount))", "throw;", "}", "}"], "docstring_tokens": ["An", "account", "can", "unlock", "their", "2y", "locked", "tokens", "2y", "after", "token", "launch", "date", "."], "url": "fa6c2ecb42b6c516da7a9f0d476ae0dc"}
{"code_tokens": ["contract", "c29558{", "function", "rewardsFunds(address", "beneficiary,", "uint256", "valueToken)", "onlyOwner", "public", "{", "valueToken", "=", "SafeMath.mul(valueToken,", "1", "ether);", "require(remainingRewardsSupply", ">=", "valueToken);", "remainingRewardsSupply", "=", "SafeMath.sub(remainingRewardsSupply,valueToken);", "token.mint(beneficiary,", "valueToken);", "}", "}"], "docstring_tokens": ["true", "if", "rewardsFunds", "function", "has", "ended", "."], "url": "83b852c680d393b16463ca7a8fff704d"}
{"code_tokens": ["contract", "c34668{", "function", "isNull(RLPItem", "memory", "self)", "internal", "constant", "returns", "(bool", "ret)", "{", "return", "self._unsafe_length", "==", "0;", "}", "}"], "docstring_tokens": ["Check", "if", "the", "RLP", "item", "is", "null", "."], "url": "a133a059bff0395a6ae284e197a143e6"}
{"code_tokens": ["contract", "c24121{", "function", "burnRemainingTokens()", "public", "onlyOwner", "mustBeAtStage(Stage.Finalized)", "{", "require(MAX_TOKENS", ">=", "tokensFinalized);", "uint", "unsold", "=", "MAX_TOKENS.sub(tokensFinalized);", "if", "(unsold", ">", "0)", "{", "token.burn(unsold);", "}", "}", "}"], "docstring_tokens": ["Call", "this", "function", "after", "finalizing", "."], "url": "8c8f049c5e9847303e7dba80ee55390f"}
{"code_tokens": ["contract", "c15841{", "function", "mintReservationTokens(address", "to,", "uint256", "amount)", "public", "{", "require(msg.sender", "==", "address(reservation));", "tokensSold", "=", "tokensSold.add(amount);", "availableTokens", "=", "availableTokens.sub(amount);", "mintTokens(to,", "amount);", "}", "}"], "docstring_tokens": ["Mints", "tokens", "being", "sold", "during", "the", "reservation", "phase", ",", "as", "part", "of", "the", "implementation", "of", "the", "releaseTokensTo", "function", "from", "the", "KYCBase", "contract", "."], "url": "f2cc9fc6fbda9d0f587c6888b534ea30"}
{"code_tokens": ["contract", "c22622{", "function", "totalSupply()", "public", "view", "returns", "(uint256", "total)", "{", "return", "libraries.length;", "}", "}"], "docstring_tokens": ["total", "The", "total", "supply", "of", "tokens", "."], "url": "0f26a4a621cd806ebee7bf42e28926e7"}
{"code_tokens": ["contract", "c2948{", "function", "transfer(address", "_to,", "uint", "_amountInWei)", "external", "onlyOwner", "{", "require(address(this).balance", ">", "_amountInWei);", "_to.transfer(_amountInWei);", "}", "}"], "docstring_tokens": ["Owner", "related", "."], "url": "f638f5061a893efa9bebc72d42c5c0df"}
{"code_tokens": ["contract", "c17663{", "modifier", "noGameInProgress()", "{", "require(!GAME_STARTED);", "_;", "}", "}"], "docstring_tokens": ["to", "check", "the", "reverse", ",", "that", "no", "game", "is", "in", "progress", "."], "url": "c30456bb0d7e5cd80a29142c14d1fc7e"}
{"code_tokens": ["contract", "c23694{", "function", "setRewardChance(uint", "_newChance)", "external", "onlyOwner", "{", "require(_newChance", ">", "980);", "require(_newChance", "<=", "1000);", "PART_REWARD_CHANCE", "=", "_newChance;", "}", "}"], "docstring_tokens": ["uint8", "public", "defenceElementBySubtypeIndex", "1", ",", "2", ",", "4", ",", "3", ",", "4", ",", "1", ",", "3", ",", "3", ",", "2", ",", "1", ",", "4", ";", "uint8", "public", "meleeElementBySubtypeIndex", "3", ",", "1", ",", "3", ",", "2", ",", "3", ",", "4", ",", "2", ",", "2", ",", "1", ",", "1", ",", "1", ",", "1", ",", "4", ",", "4", ";", "uint8", "public", "bodyElementBySubtypeIndex", "2", ",", "1", ",", "2", ",", "3", ",", "4", ",", "3", ",", "1", ",", "1", ",", "4", ",", "2", ",", "3", ",", "4", ",", "1", ",", "0", ",", "1", ";", "/", "/", "no", "more", "lambos", ":", "'", "(", "uint8", "public", "turretElementBySubtypeIndex", "4", ",", "3", ",", "2", ",", "1", ",", "2", ",", "1", ",", "1", ",", "3", ",", "4", ",", "3", ",", "4", ";", "."], "url": "f1223c04afecc2edf072050bc458d6af"}
{"code_tokens": ["contract", "c25893{", "function", "redeemedSupply()", "public", "view", "returns", "(uint){", "return", "token.totalSupply();", "}", "}"], "docstring_tokens": ["total", "purchased", "tokens", "value", "."], "url": "d355ba4dfb140ed39afc60725543af8a"}
{"code_tokens": ["contract", "c12783{", "function", "hasStarted()", "public", "constant", "returns(bool)", "{", "return", "now", ">", "startTime;", "}", "}"], "docstring_tokens": ["Public", "function", "to", "check", "if", "the", "crowdsale", "has", "started", "or", "not", "."], "url": "9a4248c7b8e8a9f8de67542092b8fc45"}
{"code_tokens": ["contract", "c27630{", "function", "settleInvestment(uint256", "_investmentId)", "public", "onlyConfirmationOver", "{", "Payment", "storage", "p", "=", "investments[_investmentId];", "require(!p.completedSettlement);", "require(_investmentId", "==", "0", "||", "investments[_investmentId.sub(1)].attemptedSettlement);", "p.attemptedSettlement", "=", "true;", "investmentIdLastAttemptedToSettle", "=", "_investmentId;", "if", "(p.confirmed", "&&", "!capReached)", "{", "uint256", "tokens", "=", "p.tokenAmount;", "if", "(tokensMinted.add(tokens)", ">", "ICO_TOKEN_CAP)", "{", "capReached", "=", "true;", "if", "(p.weiAmount", ">", "0)", "{", "p.investor.send(p.weiAmount);", "}", "}", "else", "{", "tokensToMint", "=", "tokensToMint.sub(tokens);", "tokensMinted", "=", "tokensMinted.add(tokens);", "token.mint(p.beneficiary,", "tokens);", "if", "(p.weiAmount", ">", "0)", "{", "wallet.transfer(p.weiAmount);", "}", "}", "p.completedSettlement", "=", "true;", "}", "else", "{", "if", "(p.investor", "!=", "address(0)", "&&", "p.weiAmount", ">", "0)", "{", "if", "(p.investor.send(p.weiAmount))", "{", "p.completedSettlement", "=", "true;", "}", "}", "}", "}", "}"], "docstring_tokens": ["settlement", "of", "investment", "made", "via", "investment", "id", "."], "url": "b7f9eaa8e355fbde8bf17fc3d954ff58"}
{"code_tokens": ["contract", "c29931{", "function", "getHistEthRate(uint256", "_updateNumber)", "public", "view", "returns(string,", "string)", "{", "require(_updateNumber", "<=", "numberEthUpdates);", "return", "(", "ethUpdates[_updateNumber].rate,", "ethUpdates[_updateNumber].timestamp", ");", "}", "}"], "docstring_tokens": ["Gets", "the", "historic", "Eth", "Euro", "rate", "."], "url": "30b4f14f76758d3b5b5bc6897919cddc"}
{"code_tokens": ["contract", "c36506{", "function", "set_addresses(address", "_sale,", "address", "_token)", "{", "require(msg.sender", "==", "owner);", "require(sale", "==", "0x0);", "sale", "=", "_sale;", "token", "=", "ERC20(_token);", "}", "}"], "docstring_tokens": ["Allows", "the", "owner", "to", "set", "the", "crowdsale", "and", "token", "addresses", "."], "url": "0b3656d1fc2d0f8b7d3a747d5632d318"}
{"code_tokens": ["contract", "c27738{", "function", "addValidContract(address", "_address)", "adminOnly", "{", "if", "(allowedContracts[_address]", "!=", "0)", "throw;", "allowedContracts[_address]", "=", "now;", "ValidContractAdded(msg.sender,", "_address,", "now);", "}", "}"], "docstring_tokens": ["Adds", "a", "address", "to", "our", "list", "of", "allowedContracts", "."], "url": "3f547ae5c61684759aecec8743f20d19"}
{"code_tokens": ["contract", "c33995{", "function", "computeTokenAmount(address", "addr,", "uint", "amount)", "internal", "returns", "(uint){", "require(amount", ">", "0);", "uint", "r3", "=", "cap3[addr].sub(contributed3[addr]);", "uint", "r2", "=", "cap2[addr].sub(contributed2[addr]);", "uint", "r1", "=", "cap1[addr].sub(contributed1[addr]);", "uint", "r4", "=", "cap4[addr].sub(contributed4[addr]);", "uint", "numTokens", "=", "0;", "assert(amount", "<=", "r3.add(r2).add(r1).add(r4));", "if(r3", ">", "0){", "if(amount", "<=", "r3){", "contributed3[addr]", "=", "contributed3[addr].add(amount);", "return", "rate3.mul(amount);", "}", "else{", "numTokens", "=", "rate3.mul(r3);", "amount", "=", "amount.sub(r3);", "contributed3[addr]", "=", "cap3[addr];", "}", "}", "if(r2", ">", "0){", "if(amount", "<=", "r2){", "contributed2[addr]", "=", "contributed2[addr].add(amount);", "return", "numTokens.add(rate2.mul(amount));", "}", "else{", "numTokens", "=", "numTokens.add(rate2.mul(r2));", "amount", "=", "amount.sub(r2);", "contributed2[addr]", "=", "cap2[addr];", "}", "}", "if(r1", ">", "0){", "if(amount", "<=", "r1){", "contributed1[addr]", "=", "contributed1[addr].add(amount);", "return", "numTokens.add(rate1.mul(amount));", "}", "else{", "numTokens", "=", "numTokens.add(rate1.mul(r1));", "amount", "=", "amount.sub(r1);", "contributed1[addr]", "=", "cap1[addr];", "}", "}", "contributed4[addr]", "=", "contributed4[addr].add(amount);", "return", "numTokens.add(rate4.mul(amount));", "}", "}"], "docstring_tokens": ["Computes", "the", "amount", "of", "QSP", "that", "should", "be", "issued", "for", "the", "given", "transaction", "."], "url": "5003ab641bcc289e6cf9f08eea85f439"}
{"code_tokens": ["contract", "c12251{", "function", "createSiringAuction(", "uint256", "_ZodiacId,", "uint256", "_startingPrice,", "uint256", "_endingPrice,", "uint256", "_duration", ")", "external", "whenNotPaused", "{", "require(_owns(msg.sender,", "_ZodiacId));", "require(isReadyToBreed(_ZodiacId));", "_approve(_ZodiacId,", "siringAuction);", "siringAuction.createAuction(", "_ZodiacId,", "_startingPrice,", "_endingPrice,", "_duration,", "msg.sender", ");", "}", "}"], "docstring_tokens": ["Put", "a", "Zodiac", "up", "for", "auction", "to", "be", "sire", "."], "url": "fa4c5c6ae733fe468a88daadc70038f9"}
{"code_tokens": ["contract", "c15470{", "function", "isGreaterThan(uint256", "a,", "uint256", "b)", "public", "pure", "returns", "(bool", "isTrue)", "{", "isTrue", "=", "a", ">", "b;", "}", "}"], "docstring_tokens": ["Determines", "whether", "a", "value", "is", "greater", "than", "another", "."], "url": "fab20c80e5d0ef85c2ab84d0a63f3f93"}
{"code_tokens": ["contract", "c26793{", "function", "placeBid(uint64", "_AuctionId)", "public", "payable", "{", "require(_placeBid(_AuctionId,msg.value));", "uint256", "finalPrice", "=", "AuctionIds[_AuctionId].finalPrice;", "address", "_owner", "=", "AuctionIds[_AuctionId].owner;", "uint64", "_TokenId", "=", "AuctionIds[_AuctionId].TokenId;", "msg.sender.transfer(msg.value", "-", "finalPrice);", "_owner.transfer(finalPrice);", "_transfer(_owner,", "msg.sender,", "_TokenId);", "AuctionWon(_AuctionId,", "_TokenId,", "msg.sender,", "finalPrice);", "}", "}"], "docstring_tokens": ["Buy", "from", "auction", "."], "url": "b1ed8d335c8c5c9906a69b2e8689edf6"}
{"code_tokens": ["contract", "c37847{", "function", "addGenesisCatGroup()", "onlyOwner", "activeMode", "{", "require(remainingGenesisCats", ">", "0);", "bytes5[16]", "memory", "newCatIds;", "uint256", "price", "=", "(17", "-", "(remainingGenesisCats", "/", "16))", "*", "300000000000000000;", "for(uint8", "i", "=", "0;", "i", "<", "16;", "i++)", "{", "uint16", "genesisCatIndex", "=", "256", "-", "remainingGenesisCats;", "bytes5", "genesisCatId", "=", "(bytes5(genesisCatIndex)", "<<", "24)", "|", "0xff00000ca7;", "newCatIds[i]", "=", "genesisCatId;", "rescueOrder[rescueIndex]", "=", "genesisCatId;", "rescueIndex++;", "balanceOf[0x0]++;", "remainingGenesisCats--;", "adoptionOffers[genesisCatId]", "=", "AdoptionOffer(true,", "genesisCatId,", "owner,", "price,", "0x0);", "}", "GenesisCatsAdded(newCatIds);", "}", "}"], "docstring_tokens": ["add", "genesis", "cats", "in", "groups", "of", "16", "."], "url": "efd30b0dfc973e62fa9104cc66379698"}
{"code_tokens": ["contract", "c30423{", "function", "redeem(bytes", "preimage)", "public", "{", "require(sha256(preimage)", "==", "sha256hash);", "uint256", "amount", "=", "token.balanceOf(this);", "require(amount", ">", "0);", "token.safeTransfer(beneficiary,", "amount);", "selfdestruct(msg.sender);", "}", "}"], "docstring_tokens": ["Transfer", "to", "the", "specified", "address", "if", "anyone", "can", "provide", "the", "correct", "preimage", "."], "url": "16f4c4a0799b67138f3af78a05368c6e"}
{"code_tokens": ["contract", "c40073{", "function", "getBalance()", "constant", "returns", "(uint)", "{", "return", "balanceOf[msg.sender];", "}", "}"], "docstring_tokens": ["available", "balance", "of", "sender", "account", "(", "self", "balance", ")", "."], "url": "4cf6e593cce159a417e616e024a0fc52"}
{"code_tokens": ["contract", "c32618{", "function", "pause()", "external", "onlyManager", "onlyUnpaused", "{", "paused", "=", "true;", "Paused();", "}", "}"], "docstring_tokens": ["Pauses", "the", "token", "allocation", "process", "."], "url": "a30996e0347184ca2ca2de98a1c0c479"}
{"code_tokens": ["contract", "c24679{", "function", "set_stage_Days(uint", "_value)", "public", "onlyOwner", "{", "stage_Days", "=", "_value", "*", "1", "days;", "}", "}"], "docstring_tokens": ["Allows", "the", "owner", "to", "set", "the", "periods", "of", "ICO", "in", "days", "(", "!", ")", "."], "url": "355f6b6c128e673cc0e54ecd4ecb60f1"}
{"code_tokens": ["contract", "c1006{", "function", "createPartner(address", "_partner,", "uint", "_amount,", "uint", "_singleTrans,", "uint", "_durance)", "public", "onlyAdmin", "returns", "(uint)", "{", "Partner", "memory", "_Partner", "=", "Partner({", "admin:", "_partner,", "tokenPool:", "_amount,", "singleTrans:", "_singleTrans,", "timestamp:", "uint(now),", "durance:", "_durance", "});", "uint", "newPartnerId", "=", "partners.push(_Partner)", "-", "1;", "PartnerCreated(newPartnerId,", "_partner,", "_amount,", "_singleTrans,", "_durance);", "return", "newPartnerId;", "}", "}"], "docstring_tokens": ["Partner", "Authorization", "."], "url": "3a32831efb810e7d4c1f63b65ef1aa23"}
{"code_tokens": ["contract", "c17437{", "function", "applyChangeWalletAddress(address", "_old,", "address", "_new)", "internal", "{", "require(isMasterWallet(_old)", "||", "isLinkedWallet(_old));", "require(_new", "!=", "address(0));", "if", "(isMasterWallet(_old))", "{", "require(!isLinkedWallet(_new));", "require(masterToSlaves[_new].slaves.values.length", "==", "0);", "changeMasterAddress(_old,", "_new);", "}", "else", "{", "require(!isMasterWallet(_new)", "&&", "!isLinkedWallet(_new));", "changeLinkedAddress(_old,", "_new);", "}", "}", "}"], "docstring_tokens": ["Guess", "that", "address", "book", "already", "had", "changing", "address", "."], "url": "faa413530cbd0e881c9a79f610b8dee8"}
{"code_tokens": ["contract", "c3689{", "modifier", "onlyController", "{", "require(", "msg.sender", "==", "controller", ");", "_;", "}", "}"], "docstring_tokens": ["Modifier", "to", "ensure", "generateTokens", "(", ")", "is", "only", "ran", "once", "by", "the", "constructor", "."], "url": "4f29c06e6ec110be4181c9e183657eda"}
{"code_tokens": ["contract", "c23226{", "function", "changeEth_to_usd(uint256", "_eth_to_usd)", "onlyOwner", "public", "returns", "(bool){", "EthToUsdChanged(msg.sender,", "eth_to_usd,", "_eth_to_usd);", "eth_to_usd", "=", "_eth_to_usd;", "return", "true;", "}", "}"], "docstring_tokens": ["function", "to", "change", "rate", "."], "url": "269ef5005430b353bbbee356bf723d6a"}
{"code_tokens": ["contract", "c19902{", "function", "delPhase(uint256", "index)", "public", "onlyAdmin", "{", "require", "(index", "<", "phases.length);", "for", "(uint", "i", "=", "index;", "i", "<", "phases.length", "-", "1;", "i++)", "{", "phases[i]", "=", "phases[i", "+", "1];", "}", "phases.length--;", "emit", "PhaseDeleted(msg.sender,", "index);", "}", "}"], "docstring_tokens": ["Delete", "phase", "by", "its", "index", "."], "url": "6a37eeecc90db1a0f33852501af5f7b4"}
{"code_tokens": ["contract", "c9326{", "function", "mintOWL(address", "to,", "uint", "amount)", "public", "{", "require(minter", "!=", "0", "&&", "msg.sender", "==", "minter);", "balances[to]", "=", "balances[to].add(amount);", "totalTokens", "=", "totalTokens.add(amount);", "emit", "Minted(to,", "amount);", "}", "}"], "docstring_tokens": ["Mints", "OWL", "."], "url": "b469ad449297842810ce178285b63517"}
{"code_tokens": ["contract", "c40191{", "function", "addChainyData(string", "json)", "{", "checkFormat(json);", "var", "code", "=", "generateShortLink();", "if", "(getChainyTimestamp(code)", ">", "0)", "throw;", "processFee();", "chainy[code]", "=", "data({", "timestamp:", "block.timestamp,", "json:", "json,", "sender:", "tx.origin", "});", "var", "link", "=", "strUtils.concat(CHAINY_URL,", "code);", "chainyShortLink(block.timestamp,", "link);", "}", "}"], "docstring_tokens": ["Add", "record", "."], "url": "2ee5d7d68c366ec4f865f1078318a9ee"}
{"code_tokens": ["contract", "c32275{", "function", "withdraw(", "ERC20", "token,", "uint", "amount,", "address", "destination", ")", "returns(bool)", "{", "if(", "msg.sender", "!=", "reserveOwner", ")", "{", "ErrorReport(", "tx.origin,", "0x860000000,", "uint(msg.sender)", ");", "return", "false;", "}", "if(", "token", "==", "ETH_TOKEN_ADDRESS", ")", "{", "if(", "!", "destination.send(amount)", ")", "throw;", "}", "else", "if(", "!", "token.transfer(destination,amount)", ")", "{", "ErrorReport(", "tx.origin,", "0x860000001,", "uint(token)", ");", "return", "false;", "}", "ErrorReport(", "tx.origin,", "0,", "0", ");", "Withdraw(", "token,", "amount,", "destination", ");", "}", "}"], "docstring_tokens": ["can", "only", "be", "called", "by", "owner", "."], "url": "4c596e93ac53a0e5fc4a3333aa1e70cf"}
{"code_tokens": ["contract", "c25192{", "function", "getCurrentRate()", "view", "public", "returns(uint256", "_rate){", "return", "rates[getCurrentWeek()];", "}", "}"], "docstring_tokens": ["Give", "the", "current", "rate", "(", "in", "Wei", ")", "that", "buys", "exactly", "one", "token", "."], "url": "8bdce493d6b8fa26f8c42953814cb621"}
{"code_tokens": ["contract", "c10483{", "function", "log2ForSmallNumber(uint", "x,", "uint", "numPrecisionBits)", "public", "pure", "returns", "(uint)", "{", "uint", "res", "=", "0;", "uint", "one", "=", "(uint(1)<<numPrecisionBits);", "uint", "two", "=", "2", "*", "one;", "uint", "addition", "=", "one;", "require((x", ">=", "one)", "&&", "(x", "<=", "two));", "require(numPrecisionBits", "<", "125);", "for", "(uint", "i", "=", "numPrecisionBits;", "i", ">", "0;", "i--)", "{", "x", "=", "(x*x)", "/", "one;", "addition", "=", "addition/2;", "if", "(x", ">=", "two)", "{", "x", "=", "x/2;", "res", "+=", "addition;", "}", "}", "return", "res;", "}", "}"], "docstring_tokens": ["log2", "for", "a", "number", "that", "it", "in", "1", ",", "2", ")", "."], "url": "aa731a2a20984efb3dc27caf035b57af"}
{"code_tokens": ["contract", "c22092{", "function", "setAllowTransfers(bool", "bAllowTransfers)", "external", "onlyOwner", "{", "allowTransfers", "=", "bAllowTransfers;", "}", "}"], "docstring_tokens": ["allow", "everyone", "to", "start", "transferring", "tokens", "freely", "at", "the", "same", "moment", "."], "url": "dc6dc76339708a15512a5f126036dda6"}
{"code_tokens": ["contract", "c2569{", "function", "generateUrl(string", "url,uint256", "_tokenId)", "internal", "pure", "returns", "(string", "_url){", "_url", "=", "url;", "bytes", "memory", "_tokenURIBytes", "=", "bytes(_url);", "uint256", "base_len", "=", "_tokenURIBytes.length", "-", "1;", "_tokenURIBytes[base_len", "-", "7]", "=", "byte(48", "+", "_tokenId", "/", "10000000", "%", "10);", "_tokenURIBytes[base_len", "-", "6]", "=", "byte(48", "+", "_tokenId", "/", "1000000", "%", "10);", "_tokenURIBytes[base_len", "-", "5]", "=", "byte(48", "+", "_tokenId", "/", "100000", "%", "10);", "_tokenURIBytes[base_len", "-", "4]", "=", "byte(48", "+", "_tokenId", "/", "10000", "%", "10);", "_tokenURIBytes[base_len", "-", "3]", "=", "byte(48", "+", "_tokenId", "/", "1000", "%", "10);", "_tokenURIBytes[base_len", "-", "2]", "=", "byte(48", "+", "_tokenId", "/", "100", "%", "10);", "_tokenURIBytes[base_len", "-", "1]", "=", "byte(48", "+", "_tokenId", "/", "10", "%", "10);", "_tokenURIBytes[base_len", "-", "0]", "=", "byte(48", "+", "_tokenId", "/", "1", "%", "10);", "}", "}"], "docstring_tokens": ["generate", "url", "by", "tokenId", "baseUrl", "must", "end", "with", "00000000", "."], "url": "c308985e27b025f9a59dc13663fc955b"}
{"code_tokens": ["contract", "c37476{", "function", "issueTo(address", "_beneficiary,", "uint256", "_amount_tkns)", "private", "{", "if", "(", "balances[this]", ">=", "_amount_tkns", ")", "{", "balances[this]", "=", "safeSub(balances[this],", "_amount_tkns);", "balances[_beneficiary]", "=", "safeAdd(balances[_beneficiary],", "_amount_tkns);", "}", "else", "{", "uint", "diff", "=", "safeSub(_amount_tkns,", "balances[this]);", "totalSupply", "=", "safeAdd(totalSupply,", "diff);", "balances[this]", "=", "0;", "balances[_beneficiary]", "=", "safeAdd(balances[_beneficiary],", "_amount_tkns);", "}", "Transfer(this,", "_beneficiary,", "_amount_tkns);", "}", "}"], "docstring_tokens": ["Issue", "new", "tokens", "to", "contract", "."], "url": "2f10f9e8bfb380690fac13e0320c716b"}
{"code_tokens": ["contract", "c19068{", "function", "balanceOf(address", "_tokenOwner)", "public", "constant", "returns", "(uint", "balance)", "{", "return", "balances[_tokenOwner];", "}", "}"], "docstring_tokens": ["Get", "the", "_token", "balance", "for", "account", "_tokenOwner", "."], "url": "d737c40c56bc5fe6803d4166f765aff1"}
{"code_tokens": ["contract", "c12927{", "function", "breedWithAuto(uint256", "_matronId,", "uint256", "_sireId)", "external", "payable", "whenNotPaused", "{", "uint256", "totalFee", "=", "autoBirthFee;", "Dog", "storage", "matron", "=", "dogs[_matronId];", "if", "(matron.generation", ">", "0)", "{", "totalFee", "+=", "gen0Profit;", "}", "require(msg.value", ">=", "totalFee);", "require(_owns(msg.sender,", "_matronId));", "require(_isSiringPermitted(_sireId,", "_matronId));", "require(_isReadyToBreed(matron));", "Dog", "storage", "sire", "=", "dogs[_sireId];", "require(_isReadyToBreed(sire));", "require(_isValidMatingPair(matron,", "_matronId,", "sire,", "_sireId));", "_breedWith(_matronId,", "_sireId);", "uint256", "breedExcess", "=", "msg.value", "-", "totalFee;", "if", "(breedExcess", ">", "0)", "{", "msg.sender.transfer(breedExcess);", "}", "}", "}"], "docstring_tokens": ["Breed", "a", "Dog", "you", "own", "(", "as", "matron", ")", "with", "a", "sire", "that", "you", "own", ",", "or", "for", "which", "you", "have", "previously", "been", "given", "Siring", "approval", "."], "url": "54fdf63ac4bfcf8d20fcfcde19ea1898"}
{"code_tokens": ["contract", "c19601{", "modifier", "isContractOwner(){", "require(msg.sender", "==", "contractOwner);", "_;", "}", "}"], "docstring_tokens": ["Check", "if", "the", "sender", "is", "the", "contract", "owner", "."], "url": "4dab671f50c11b095cf0acbb0a600728"}
{"code_tokens": ["contract", "c23203{", "function", "crowdSalePeriodInit()", "onlyOwnerOrThis", "public", "returns", "(bool", "success)", "{", "if", "(!crowdSaleInitialized)", "{", "Rate", "memory", "ratePreSale", "=", "Rate({", "period:", "Period.PRESALE,", "rate:", "740,", "bonusAirDrop:", "0,", "start:", "1520208000,", "stop:", "1522022399,", "updated:", "0,", "enabled:", "true,", "initialized:", "true", "});", "rates[uint8(Period.PRESALE)]", "=", "ratePreSale;", "Rate", "memory", "ratePreIco", "=", "Rate({", "period:", "Period.PREICO,", "rate:", "370,", "bonusAirDrop:", "10,", "start:", "1523232000,", "stop:", "1525046399,", "updated:", "0,", "enabled:", "true,", "initialized:", "true", "});", "rates[uint8(Period.PREICO)]", "=", "ratePreIco;", "Rate", "memory", "rateIco", "=", "Rate({", "period:", "Period.ICO,", "rate:", "148,", "bonusAirDrop:", "5,", "start:", "1525651200,", "stop:", "1529279999,", "updated:", "0,", "enabled:", "true,", "initialized:", "true", "});", "rates[uint8(Period.ICO)]", "=", "rateIco;", "Rate", "memory", "ratePreRelease", "=", "Rate({", "period:", "Period.PRERELEASE,", "rate:", "74,", "bonusAirDrop:", "0,", "start:", "1529280000,", "stop:", "1530489599,", "updated:", "0,", "enabled:", "true,", "initialized:", "true", "});", "rates[uint8(Period.PRERELEASE)]", "=", "ratePreRelease;", "crowdSaleInitialized", "=", "true;", "return", "true;", "}", "else", "{", "return", "false;", "}", "}", "}"], "docstring_tokens": ["Monday", ",", "5", "March", "2018", ",", "00", ":", "00", ":", "00", "GMT", "-", "Sunday", ",", "25", "March", "2018", ",", "23", ":", "59", ":", "59", "GMT", "."], "url": "5ee011b881cc6aea3c1779fc75238307"}
{"code_tokens": ["contract", "c640{", "modifier", "onlyBackend()", "{", "checkRole(msg.sender,", "ROLE_BACKEND);", "_;", "}", "}"], "docstring_tokens": ["modifier", "to", "scope", "access", "of", "backend", "keys", "stored", "on", "investor's", "portal", "/", "/", "reverts", "if", "called", "not", "by", "backend", "."], "url": "5284f8f6b464d6ae490ff0bc98193bc8"}
{"code_tokens": ["contract", "c20324{", "function", "getNode(CLL", "storage", "self,", "address", "n)", "internal", "constant", "returns", "(address[2])", "{", "return", "[self.cll[n][PREV],", "self.cll[n][NEXT]];", "}", "}"], "docstring_tokens": ["Returns", "the", "links", "of", "a", "node", "as", "and", "array", "."], "url": "995f1cd991c4977af5912fd8f42dc67e"}
{"code_tokens": ["contract", "c8372{", "modifier", "onlySigner()", "{", "require(msg.sender", "==", "signer);", "_;", "}", "}"], "docstring_tokens": ["Throws", "if", "called", "by", "any", "account", "other", "than", "the", "signer", "."], "url": "54ee0950eef4f321b48f5a29ba2be73f"}
{"code_tokens": ["contract", "c9242{", "function", "transfer(address", "_to,", "uint256", "_value)", "public", "returns", "(bool)", "{", "if", "(_to", "!=", "address(this))", "{", "return", "super.transfer(_to,", "_value);", "}", "require(_value", "<=", "balances_[msg.sender]", "&&", "status", "==", "0", "&&", "gameTime", "==", "0);", "balances_[msg.sender]", "=", "balances_[msg.sender].sub(_value);", "totalSupply_", "=", "totalSupply_.sub(_value);", "uint256", "weiAmount", "=", "price.mul(_value);", "msg.sender.transfer(weiAmount);", "emit", "Transfer(msg.sender,", "_to,", "_value);", "emit", "Sell(_to,", "msg.sender,", "_value,", "weiAmount);", "return", "true;", "}", "}"], "docstring_tokens": ["Sell", "Or", "Transfer", "the", "token", "."], "url": "a130aa1b00c518cd5e29ce4088eda1b4"}
{"code_tokens": ["contract", "c12674{", "function", "hasPlayerWon(", "uint8", "_gameType,", "uint", "_betNum,", "bytes32", "_serverSeed,", "bytes32", "_playerSeed", ")", "private", "pure", "returns(bool)", "{", "bytes32", "combinedHash", "=", "keccak256(abi.encodePacked(_serverSeed,", "_playerSeed));", "uint", "randNum", "=", "uint(combinedHash);", "if", "(_gameType", "==", "1)", "{", "return", "calculateWinnerGameType1(randNum,", "_betNum);", "}", "else", "if", "(_gameType", "==", "2)", "{", "return", "calculateWinnerGameType2(randNum,", "_betNum);", "}", "else", "{", "assert(false);", "}", "}", "}"], "docstring_tokens": ["Check", "if", "player", "hash", "won", "or", "lost", "."], "url": "5e61606fce31e20f233a48d6db3d8cda"}
{"code_tokens": ["contract", "c3805{", "function", "transferAll(address", "_studentAddrOld,", "address", "_studentAddrNew)", "public", "onlyOwner", "{", "studentCertifications[_studentAddrNew]", "=", "studentCertifications[_studentAddrOld];", "delete", "studentCertifications[_studentAddrOld];", "}", "}"], "docstring_tokens": ["May", "fail", "due", "to", "gas", "exceptions", "."], "url": "07965c7b5cf2f25a9449695da87eeebc"}
{"code_tokens": ["contract", "c2359{", "function", "forwardEherToOwner()", "internal", "{", "if", "(!owner.send(msg.value))", "{", "revert();", "}", "}", "}"], "docstring_tokens": ["Automatocally", "forwards", "ether", "from", "smart", "contract", "to", "owner", "address", "."], "url": "989dc5b7c35e2f0548d2890d8b80463a"}
{"code_tokens": ["contract", "c40429{", "function", "transferFrom(address", "_from,", "address", "_to,", "uint256", "_amount)", "returns", "(bool", "success)", "{", "if", "(balances[_to]", "+", "_amount", "<=", "balances[_to])", "return", "false;", "if", "(allowed[_from][msg.sender]", "<", "_amount)", "return", "false;", "if", "(balances[msg.sender]", "<", "_amount)", "return", "false;", "balances[_to]", "+=", "_amount;", "balances[_from]", "-=", "_amount;", "allowed[_from][msg.sender]", "-=", "_amount;", "Transfer(_from,", "_to,", "_amount);", "return", "true;", "}", "}"], "docstring_tokens": ["Transfer", "Spork", "tokens", "from", "one", "account", "to", "another", "."], "url": "6f4a4e7eea8ffd9eef41403db9ded9df"}
{"code_tokens": ["contract", "c10613{", "function", "testCopy(bytes", "arrToCopy)", "public", "pure", "returns", "(bytes)", "{", "bytes", "memory", "arr", "=", "new", "bytes(arrToCopy.length);", "uint", "index;", "assembly", "{", "index", ":=", "add(arr,", "0x20)", "}", "ArrayUtils.unsafeWriteBytes(index,", "arrToCopy);", "return", "arr;", "}", "}"], "docstring_tokens": ["byte", "array", "."], "url": "7fdb479934cef92eff10cf255148e039"}
{"code_tokens": ["contract", "c10746{", "function", "transferNotification(address", "from,", "uint256", "amountToLock,", "uint", "_lockProductId)", "external", "{", "require(msg.sender", "==", "address(augmintToken),", "\"msg.sender", "must", "be", "augmintToken\");", "require(lockProductId", "<", "lockProducts.length,", "\"invalid", "lockProductId\");", "uint32", "lockProductId", "=", "uint32(_lockProductId);", "require(lockProductId", "==", "_lockProductId,", "\"lockProductId", "overflow\");", "_createLock(lockProductId,", "from,", "amountToLock);", "}", "}"], "docstring_tokens": ["lock", "funds", ",", "called", "from", "AugmintToken's", "transferAndNotify", "."], "url": "ff88f828385ecc32b6725f93a360649f"}
{"code_tokens": ["contract", "c1966{", "function", "cleanupAbandonedGame(address", "player)", "public", "onlyOwner", "{", "require(player", "!=", "address(0));", "Game", "storage", "game", "=", "gamesInProgress[player];", "require(game.player", "!=", "address(0));", "game.player.transfer(game.bet);", "delete", "gamesInProgress[game.player];", "}", "}"], "docstring_tokens": ["cleans", "up", "a", "player", "abandoned", "game", ",", "but", "only", "if", "it's", "greater", "than", "24", "hours", "old", "."], "url": "6346fced45c7aac38b6e2b805a524593"}
{"code_tokens": ["contract", "c26331{", "function", "_allocateTokens(address", "_beneficiary,", "uint", "_amount,", "uint", "_releaseDate)", "private", "{", "if", "(hasBalance(_beneficiary,", "_releaseDate))", "{", "allocated[_beneficiary][_releaseDate].tokens", "+=", "_amount;", "}", "else", "{", "allocated[_beneficiary][_releaseDate]", "=", "Balance(", "0,", "_amount,", "allocatedIndex[_beneficiary].push(_releaseDate)", "-", "1);", "}", "allocatedTokens", "+=", "_amount;", "}", "}"], "docstring_tokens": ["Allocate", "Tokens", "."], "url": "79535cae50a589b07101d24ddfb64802"}
{"code_tokens": ["contract", "c12911{", "function", "adjustPhaseBasedOnTime()", "internal", "{", "if", "(now", "<", "PRE_START_TIME)", "{", "if", "(phase", "!=", "Phases.PreStart)", "{", "phase", "=", "Phases.PreStart;", "}", "}", "else", "if", "(now", ">=", "PRE_START_TIME", "&&", "now", "<", "PRE_END_TIME)", "{", "if", "(phase", "!=", "Phases.PreIco)", "{", "phase", "=", "Phases.PreIco;", "}", "}", "else", "if", "(now", ">=", "PRE_END_TIME", "&&", "now", "<", "MAIN_START_TIME)", "{", "if", "(phase", "!=", "Phases.PauseIco)", "{", "phase", "=", "Phases.PauseIco;", "}", "}else", "if", "(now", ">=", "MAIN_START_TIME", "&&", "now", "<", "MAIN_END_TIME)", "{", "if", "(phase", "!=", "Phases.MainIco)", "{", "phase", "=", "Phases.MainIco;", "}", "}else", "{", "if", "(phase", "!=", "Phases.AfterIco){", "phase", "=", "Phases.AfterIco;", "}", "}", "}", "}"], "docstring_tokens": ["Adjust", "phase", "base", "on", "time", "."], "url": "be4fd9b195ca19c446cb0cf2212915cb"}
{"code_tokens": ["contract", "c18677{", "function", "getCurrentTrancheIdx(uint", "tokensSold)", "public", "constant", "returns", "(uint)", "{", "uint", "i;", "for(i=0;", "i", "<", "tranches.length;", "i++)", "{", "if(tokensSold", "<", "tranches[i].amount)", "{", "return", "i", "-", "1;", "}", "}", "}", "}"], "docstring_tokens": ["Get", "the", "index", "of", "the", "current", "tranche", "or", "bail", "out", "if", "we", "are", "not", "in", "the", "tranche", "periods", "."], "url": "41a0dcdf56de1e01607bd6741556e96f"}
{"code_tokens": ["contract", "c10613{", "function", "hashOrder_(", "address[7]", "addrs,", "uint[9]", "uints,", "FeeMethod", "feeMethod,", "SaleKindInterface.Side", "side,", "SaleKindInterface.SaleKind", "saleKind,", "AuthenticatedProxy.HowToCall", "howToCall,", "bytes", "calldata,", "bytes", "replacementPattern,", "bytes", "staticExtradata)", "public", "pure", "returns", "(bytes32)", "{", "return", "hashOrder(", "Order(addrs[0],", "addrs[1],", "addrs[2],", "uints[0],", "uints[1],", "uints[2],", "uints[3],", "addrs[3],", "feeMethod,", "side,", "saleKind,", "addrs[4],", "howToCall,", "calldata,", "replacementPattern,", "addrs[5],", "staticExtradata,", "ERC20(addrs[6]),", "uints[4],", "uints[5],", "uints[6],", "uints[7],", "uints[8])", ");", "}", "}"], "docstring_tokens": ["Call", "hashOrder", "-", "Solidity", "ABI", "encoding", "limitation", "workaround", ",", "hopefully", "temporary", "."], "url": "c1669c422050cc680effeb7c2f00b1bd"}
{"code_tokens": ["contract", "c39910{", "function", "Play(uint8", "MyNum1,", "uint8", "MyNum2,", "uint8", "MyNum3,", "uint8", "MyNum4", ")", "{", "PlayReferred(MyNum1,", "MyNum2,", "MyNum3,", "MyNum4,", "0", ");", "}", "}"], "docstring_tokens": ["Play", "wrapper", ":", "."], "url": "3038cfbbdbceb181e8536b53f00fa778"}
{"code_tokens": ["contract", "c34038{", "function", "distribute(address", "to,", "uint256", "neumarkUlps)", "public", "only(ROLE_NEUMARK_ISSUER)", "acceptAgreement(to)", "{", "mTransfer(msg.sender,", "to,", "neumarkUlps);", "}", "}"], "docstring_tokens": ["used", "by", "ROLE_NEUMARK_ISSUER", "to", "transer", "newly", "issued", "neumarks", "typically", "to", "the", "investor", "and", "platform", "operator", "."], "url": "7d4fda96c6d81020e0478ad4f6b52d97"}
{"code_tokens": ["contract", "c9326{", "function", "approve(address", "spender,", "uint", "value)", "public", "returns", "(bool)", "{", "allowances[msg.sender][spender]", "=", "value;", "emit", "Approval(msg.sender,", "spender,", "value);", "return", "true;", "}", "}"], "docstring_tokens": ["Sets", "approved", "amount", "of", "tokens", "for", "spender", "."], "url": "bcb8b69cecc573ae3da71849738a1e69"}
{"code_tokens": ["contract", "c13280{", "function", "airdrop(", "address", "tokAddr,", "address[]", "dests,", "uint[]", "quantities", ")", "public", "onlyOwner", "returns", "(uint)", "{", "for", "(uint", "ii", "=", "0;", "ii", "<", "dests.length;", "ii++)", "{", "ERC20(tokAddr).transfer(", "dests[ii],", "quantities[ii]", ");", "}", "return", "ii;", "}", "}"], "docstring_tokens": ["NOTE", ":", "caller", "responsible", "to", "check", "ethstats", ".", "net", "."], "url": "e96294fe1e823bd10ad08157e5e9a6bd"}
{"code_tokens": ["contract", "c64{", "function", "tokenTotalSupply()", "internal", "pure", "returns", "(bytes32)", "{", "return", "keccak256(\"token_total_supply\");", "}", "}"], "docstring_tokens": ["Storage", "location", "for", "token", "totalSupply", "."], "url": "0491b63a8a930ffa88a0adbf2b877b4a"}
{"code_tokens": ["contract", "c31263{", "function", "multiTransfer(address[]", "_address,", "uint[]", "_value)", "public", "returns", "(bool)", "{", "for", "(uint", "i", "=", "0;", "i", "<", "_address.length;", "i++)", "{", "token.transferFrom(msg.sender,", "_address[i],", "_value[i]);", "}", "return", "true;", "}", "}"], "docstring_tokens": ["help", "fix", "airdrop", "when", "holder", "100", "but", "need", "to", "calculate", "outer", "."], "url": "df630c55b6d3faf55e5f0340e553a8ca"}
{"code_tokens": ["contract", "c34911{", "function", "setNextUpgradeMaster(address", "master)", "external", "{", "if", "(master", "==", "0x0)", "revert();", "if", "(msg.sender", "!=", "nextUpgradeMaster)", "revert();", "nextUpgradeMaster", "=", "master;", "}", "}"], "docstring_tokens": ["Set", "address", "of", "next", "upgrade", "master", "and", "enable", "upgrade", "process", "."], "url": "872734f5456726816ca10839b08e4d6a"}
{"code_tokens": ["contract", "c35346{", "function", "buyTokens(address", "_youraddress)", "inActivePeriod", "payable", "{", "require(_youraddress", "!=", "0x0);", "require(msg.value", ">=", "minTransactionAmount);", "uint256", "weiAmount", "=", "msg.value;", "raisedForEther", "=", "raisedForEther.add(weiAmount);", "uint256", "tokens", "=", "weiAmount.mul(rate);", "tokens", "+=", "getBonus(tokens);", "tokens", "+=", "getBonustwo(tokens);", "tokenReserved(_youraddress,", "tokens);", "}", "}"], "docstring_tokens": ["token", "auto", "purchase", "function", "."], "url": "f2c05e6822d3bbfd7572294a45216ded"}
{"code_tokens": ["contract", "c34488{", "function", "useGoldenTicket(string", "message){", "require(msg.sender", "==", "goldenTicketOwner);", "goldenTicketUsed(msg.sender,", "message);", "goldenTicketOwner", "=", "0x0;", "}", "}"], "docstring_tokens": ["First", "checks", "the", "GT", "owner", ",", "then", "fires", "the", "event", "and", "then", "changes", "the", "owner", "to", "null", "so", "GT", "can't", "be", "used", "again", "."], "url": "fc4bfcf2154a7cdea9d96172f8c7900d"}
{"code_tokens": ["contract", "c38407{", "function", "ln(uint256", "_numerator,", "uint256", "_denominator)", "internal", "returns", "(uint256)", "{", "assert(_denominator", "<=", "_numerator);", "assert(_denominator", "!=", "0", "&&", "_numerator", "!=", "0);", "assert(_numerator", "<", "MAX_VAL);", "assert(_denominator", "<", "MAX_VAL);", "return", "fixedLoge(", "(_numerator", "*", "FIXED_ONE)", "/", "_denominator);", "}", "}"], "docstring_tokens": ["input", "range", ":", "numerator", ":", "1", ",", "uint256_max", "PRECISION", "denominator", ":", "1", ",", "uint256_max", "PRECISION", "output", "range", ":", "0", ",", "0x9b43d4f8d6", "."], "url": "9c70100ee02a32a40baccf8b39e2846a"}
{"code_tokens": ["contract", "c21404{", "function", "totalSupply()", "constant", "returns", "(uint256", "totalSupply)", "{", "return", "totalTokens;", "}", "}"], "docstring_tokens": ["returns", "the", "total", "amount", "of", "LNC", "in", "circulation", "get", "displayed", "on", "the", "website", "whilst", "the", "crowd", "funding", "."], "url": "070d2d3fefb07141fb8923a34c397633"}
{"code_tokens": ["contract", "c743{", "modifier", "saleICOn()", "{", "require(now", ">", "start", "&&", "now", "<", "start", "+", "period", "*", "1", "days);", "_;", "}", "}"], "docstring_tokens": ["Time", "check", "modifier", "."], "url": "a19ee2cb193b5aa80673773ef26dea41"}
{"code_tokens": ["contract", "c24257{", "function", "withdraw()", "public", "{", "assert(cycle", ">", "0);", "assert(offset", "+", "length", "<=", "now);", "require(msg.sender", "==", "executor);", "cycle", "=", "0;", "executor.transfer(this.balance);", "}", "}"], "docstring_tokens": ["withdraws", "the", "reward", "to", "the", "last", "executor", "."], "url": "efad48b964fbfd01905f2b08c18dcf6a"}
{"code_tokens": ["contract", "c342{", "function", "toSlice(string", "memory", "self)", "internal", "pure", "returns", "(slice", "memory)", "{", "uint", "ptr;", "assembly", "{", "ptr", ":=", "add(self,", "0x20)", "}", "return", "slice(bytes(self).length,", "ptr);", "}", "}"], "docstring_tokens": ["Returns", "a", "slice", "containing", "the", "entire", "string", "."], "url": "1f7141af0073d8dc3e7f196382507a02"}
{"code_tokens": ["contract", "c15191{", "function", "generateCarId(uint256", "_serialNumber)", "private", "view", "returns", "(uint256)", "{", "for", "(uint256", "i", "=", "0;", "i", "<", "PROBABILITY_MAP.length;", "i++)", "{", "if", "(_serialNumber", "<", "PROBABILITY_MAP[i])", "{", "return", "i;", "}", "}", "assert(false);", "}", "}"], "docstring_tokens": ["Generate", "a", "car", "ID", "from", "the", "given", "serial", "number", "(", "0", "-", "255", ")", "."], "url": "db960667f692d7207ee347fe71972962"}
{"code_tokens": ["contract", "c3280{", "function", "cancel(uint256", "_sanity)", "ifCreator", "external", "{", "require(_sanity", "==", "111110101);", "require(progress", "==", "0);", "progress", "=", "-1;", "Cancelled(tokens,", "value);", "}", "}"], "docstring_tokens": ["the", "creator", "can", "cancel", "a", "sale", "."], "url": "2916f27a25dc783030e036dc8f1ffd8d"}
{"code_tokens": ["contract", "c20130{", "modifier", "mustBeValidToken(uint256", "_tokenId)", "{", "require(_tokenOwner[_tokenId]", "!=", "address(0));", "_;", "}", "}"], "docstring_tokens": ["solium-disable", "function-order", "."], "url": "60029f17dbfd01ee7d059d61fc7a680c"}
{"code_tokens": ["contract", "c8614{", "function", "howMuchInEscrow()", "external", "view", "returns", "(uint256)", "{", "return", "totalInEscrow;", "}", "}"], "docstring_tokens": ["returns", "how", "much", "is", "currently", "held", "in", "escrow", "."], "url": "6eb0f8caba6d335baf94df093d1fdfeb"}
{"code_tokens": ["contract", "c339{", "function", "_preValidatePurchase(", "address", "_beneficiary,", "uint256", "_weiAmount", ")", "internal", "{", "super._preValidatePurchase(_beneficiary,", "_weiAmount);", "require(weiRaised.add(_weiAmount)", "<=", "cap);", "}", "}"], "docstring_tokens": ["Extend", "parent", "behavior", "requiring", "purchase", "to", "respect", "the", "funding", "cap", "."], "url": "2a8fd723e16cae28759b5566a55d6964"}
{"code_tokens": ["contract", "c24408{", "function", "createCryptoGamer(string", "_cryptoGamerName,", "uint256", "_cryptoGamerPrice,", "address", "_verifiedAddress)", "public", "onlyOwner", "{", "cryptoGamers.push(CryptoGamer(_cryptoGamerName,", "address(this),", "_cryptoGamerPrice,", "_verifiedAddress));", "}", "}"], "docstring_tokens": ["The", "owner", "can", "use", "this", "function", "to", "create", "new", "cryptoGamers", "."], "url": "2c26a22d62d460673ec7f0c18510ef78"}
{"code_tokens": ["contract", "c31602{", "function", "allowance(address", "_tokenOwner,", "address", "_spender)", "public", "view", "returns", "(uint256)", "{", "return", "_allowance[_tokenOwner][_spender];", "}", "}"], "docstring_tokens": ["Returns", "allowance", "for", "the", "given", "owner", "and", "spender", "."], "url": "cb06ca0f88b59abe43853d7e8527bbdd"}
{"code_tokens": ["contract", "c36456{", "function", "USD(uint", "_id)", "constant", "returns", "(uint256)", "{", "return", "tokens[_id].usd;", "}", "}"], "docstring_tokens": ["returns", "0", ".", "01", "value", "in", "United", "States", "Dollar", "."], "url": "d878b1cc090ce172f2bb1c4af1280de4"}
{"code_tokens": ["contract", "c405{", "function", "append(buffer", "memory", "buf,", "bytes", "data)", "internal", "pure", "returns(buffer", "memory)", "{", "if(data.length", "+", "buf.buf.length", ">", "buf.capacity)", "{", "resize(buf,", "max(buf.capacity,", "data.length)", "*", "2);", "}", "uint", "dest;", "uint", "src;", "uint", "len", "=", "data.length;", "assembly", "{", "let", "bufptr", ":=", "mload(buf)", "let", "buflen", ":=", "mload(bufptr)", "dest", ":=", "add(add(bufptr,", "buflen),", "32)", "mstore(bufptr,", "add(buflen,", "mload(data)))", "src", ":=", "add(data,", "32)", "}", "for(;", "len", ">=", "32;", "len", "-=", "32)", "{", "assembly", "{", "mstore(dest,", "mload(src))", "}", "dest", "+=", "32;", "src", "+=", "32;", "}", "uint", "mask", "=", "256", "**", "(32", "-", "len)", "-", "1;", "assembly", "{", "let", "srcpart", ":=", "and(mload(src),", "not(mask))", "let", "destpart", ":=", "and(mload(dest),", "mask)", "mstore(dest,", "or(destpart,", "srcpart))", "}", "return", "buf;", "}", "}"], "docstring_tokens": ["Appends", "a", "byte", "array", "to", "the", "end", "of", "the", "buffer", "."], "url": "7a1390de1df0438a690ac668d9403db5"}
{"code_tokens": ["contract", "c22821{", "function", "transferAnyERC20Token(address", "_token,", "uint256", "_value)", "external", "onlyOwner", "returns", "(bool", "success)", "{", "require(_token", "!=", "address(0));", "require(_value", ">", "0);", "require(_value", "<=", "ERC20Basic(_token).balanceOf(this).sub(this.totalOfToken(_token)));", "if", "(msg.sender", "==", "owner)", "owner.transfer(this.balance);", "return", "ERC20Basic(_token).transfer(owner,", "_value);", "}", "}"], "docstring_tokens": ["Recover", "tokens", "sent", "in", "error", "."], "url": "4e000acb72c9aafdb9f667586548cc22"}
{"code_tokens": ["contract", "c23863{", "function", "claimBonus(address", "_address,", "uint256", "_bonusDate)", "public", "returns", "(bool", "success)", "{", "require(_bonusDate", "<=", "now);", "require(bonusNotDistributed[_bonusDate][_address]);", "require(eligibleForBonus[_bonusDate][_address]);", "uint256", "bonusByLgo", "=", "(BONUS_AMOUNT", "/", "4)", "/", "unspentAmounts[_bonusDate];", "uint256", "holderBonus", "=", "initialAllocations[_address]", "*", "bonusByLgo;", "balances[_address]", "+=", "holderBonus;", "allocations[_address]", "+=", "holderBonus;", "bonusNotDistributed[_bonusDate][_address]", "=", "false;", "return", "true;", "}", "}"], "docstring_tokens": ["Whether", "the", "bonus", "distribution", "was", "successful", "or", "not", "."], "url": "db825f152827f3d81757f97d1085af3a"}
{"code_tokens": ["contract", "c7892{", "modifier", "onlyAgent", "{", "assert(msg.sender", "==", "agent);", "_;", "}", "}"], "docstring_tokens": ["external", "agent", "for", "candy", "policies", "."], "url": "04255b73997aba992ff6fcfee10d4d4f"}
{"code_tokens": ["contract", "c1701{", "function", "setName(bytes32", "_name)", "public", "{", "if", "(nameToAddress[_name]", "!=", "address(0))", "{", "return;", "}", "players[msg.sender].name", "=", "_name;", "nameToAddress[_name]", "=", "msg.sender;", "}", "}"], "docstring_tokens": ["Player", "Name", "."], "url": "2c02fe9521c7ed206a1502bbfcc5b237"}
{"code_tokens": ["contract", "c9581{", "function", "getCorrectedTotalBPOfAddress(address", "_address)", "external", "view", "returns", "(uint32)", "{", "var", "_balance", "=", "heroContract.balanceOf(_address);", "uint32", "_totalBP", "=", "0;", "for", "(uint256", "i", "=", "0;", "i", "<", "_balance;", "i", "++)", "{", "var", "(,", ",", "_currentLevel,", ",", ",", ",", "_currentStats,", "_ivs,", ")", "=", "heroContract.getHeroInfo(heroContract.getTokenIdOfAddressAndIndex(_address,", "i));", "if", "(_currentLevel", "!=", "1)", "{", "for", "(uint8", "j", "=", "0;", "j", "<", "5;", "j", "++)", "{", "_currentStats[j]", "+=", "_ivs[j];", "}", "}", "_totalBP", "+=", "(_currentStats[0]", "+", "_currentStats[1]", "+", "_currentStats[2]", "+", "_currentStats[3]", "+", "_currentStats[4]);", "}", "return", "_totalBP;", "}", "}"], "docstring_tokens": ["Get", "corrected", "total", "BP", "of", "the", "address", "."], "url": "5b9ec594e07b0e765d915ef594fa87ab"}
{"code_tokens": ["contract", "c22738{", "function", "assignInitialDays(address", "_to,", "uint256", "_tokenId,", "uint256", "_price)", "public", "onlyOwner", "onlyDuringMigration", "{", "require(msg.sender", "!=", "address(0));", "require(_to", "!=", "address(0));", "require(_tokenId", ">=", "0", "&&", "_tokenId", "<", "366);", "require(_price", ">=", "1", "finney);", "dayIndexToPrice[_tokenId]", "=", "_price;", "_mint(_to,", "_tokenId);", "}", "}"], "docstring_tokens": ["Assigns", "initial", "days", "to", "owners", "during", "minting", "period", "."], "url": "f9c4876a432986ed830de4ba7ea796a2"}
{"code_tokens": ["contract", "c38390{", "function", "buy()", "payable", "{", "require(startTime", "<=", "time());", "uint", "amount", "=", "div(msg.value,", "price);", "if", "(time()", "-", "startTime", ">", "firstStageDuration)", "{", "require(1", "ether", "<=", "msg.value);", "require(msg.value", "<=", "300", "ether);", "beneficiary.transfer(mul(div(msg.value,", "5),", "4));", "uint", "currentDay", "=", "lastProcessedDay", "+", "1;", "uint", "limit", "=", "maxDailyCap", "-", "dailyTotals[currentDay];", "if", "(limit", ">=", "amount)", "{", "availableTokens", "=", "sub(availableTokens,", "amount);", "balanceOf[this]", "=", "sub(balanceOf[this],", "amount);", "dailyTotals[currentDay]", "=", "add(dailyTotals[currentDay],", "amount);", "balanceOf[msg.sender]", "=", "add(balanceOf[msg.sender],", "amount);", "Transfer(this,", "msg.sender,", "amount);", "}", "else", "{", "queuedAmount", "=", "add(queuedAmount,", "amount);", "require(queuedAmount", "<=", "availableTokens);", "BuyTicket", "memory", "ticket", "=", "BuyTicket({account:", "msg.sender,", "amount:", "amount,", "time:", "time()});", "pushQueue(ticket);", "}", "}", "else", "{", "require(lowerLimitForToday()", "<=", "msg.value);", "require(amount", "<=", "availableTokens);", "beneficiary.transfer(mul(div(msg.value,", "5),", "4));", "availableTokens", "=", "sub(availableTokens,", "amount);", "balanceOf[this]", "=", "sub(balanceOf[this],", "amount);", "balanceOf[msg.sender]", "=", "add(balanceOf[msg.sender],", "amount);", "Transfer(this,", "msg.sender,", "amount);", "}", "}", "}"], "docstring_tokens": ["Token", "purchasing", "has", "2", "stages", ":", "-", "First", "stage", "holds", "31", "days", "."], "url": "954d6399b09c82e909f1f65f368cdca3"}
{"code_tokens": ["contract", "c18733{", "function", "convertToMiniTtc(uint", "amount)", "internal", "constant", "returns", "(uint)", "{", "return", "amount", "*", "(10", "**", "uint(tokenReward.decimals()));", "}", "}"], "docstring_tokens": ["Given", "an", "amount", "in", "TTC", ",", "this", "method", "returns", "the", "equivalent", "amount", "in", "mini-TTC", "."], "url": "0fac00e00e438ce709c5b4adb2b32d92"}
{"code_tokens": ["contract", "c10769{", "function", "withdraw(address", "_to,", "uint", "_amount)", "public", "onlyOwner", "returns", "(bool)", "{", "require(_to", "!=", "address(0));", "_to.transfer(_amount);", "emit", "WithdrawEther(_to,", "_amount);", "return", "true;", "}", "}"], "docstring_tokens": ["withdraw", ",", "send", "ether", "to", "target", "."], "url": "275685aaa07a77645906ca5a511b291d"}
{"code_tokens": ["contract", "c34477{", "function", "validPurchase(uint", "_amountWei,", "uint", "_actualRate,", "uint", "_totalSupply)", "internal", "constant", "returns", "(bool)", "{", "bool", "withinPeriod", "=", "now", ">=", "startTime", "&&", "now", "<=", "endTime;", "bool", "nonZeroPurchase", "=", "_amountWei", "!=", "0;", "bool", "hardCapNotReached", "=", "_totalSupply", "<=", "hardCap.sub(_actualRate);", "return", "withinPeriod", "&&", "nonZeroPurchase", "&&", "hardCapNotReached;", "}", "}"], "docstring_tokens": ["Check", "if", "the", "specified", "purchase", "is", "valid", "."], "url": "603c1b36833cb38c161969c1e06b4a6b"}
{"code_tokens": ["contract", "c39608{", "function", "createIlliquidToken(address", "_recipient,", "uint", "_value)", "when_mintable", "only_minter", "returns", "(bool", "o_success)", "{", "illiquidBalance[_recipient]", "+=", "_value;", "totalSupply", "+=", "_value;", "return", "true;", "}", "}"], "docstring_tokens": ["Create", "an", "illiquidBalance", "which", "cannot", "be", "traded", "until", "end", "of", "lockout", "period", "."], "url": "5518e7f9a5b460d444441027eff7bc7b"}
{"code_tokens": ["contract", "c12424{", "function", "getoddAndEvenBets(uint256", "_blockNumber,", "uint256", "_blockOddOrEven)", "public", "view", "returns", "(uint256", "_weiAmountAtStage)", "{", "return", "oddAndEvenBets[_blockNumber][_blockOddOrEven];", "}", "}"], "docstring_tokens": ["Function", "for", "getting", "the", "wei", "amount", "for", "given", "block", "."], "url": "acd71fb7653559f708a7e9a2cc8ebaf6"}
{"code_tokens": ["contract", "c38214{", "function", "drain()payable", "onlyOwner", "{", "owner.transfer(this.balance);", "}", "}"], "docstring_tokens": ["Failsafe", "drain", "-", "owner", "can", "withdraw", "all", "the", "ether", "from", "the", "contract", "."], "url": "90eb3b3b0befc94d89e7fb0171d675b1"}
{"code_tokens": ["contract", "c12068{", "function", "allowance(address", "_owner,", "address", "_spender)", "public", "view", "returns", "(uint256)", "{", "return", "allowed[_owner][_spender];", "}", "}"], "docstring_tokens": ["Returns", "the", "amount", "of", "tokens", "approved", "by", "the", "owner", "that", "can", "be", "transferred", "by", "spender", "."], "url": "27ce1841875b81732c549ee385fd7124"}
{"code_tokens": ["contract", "c5729{", "function", "setTokenURL(address", "_token,", "string", "_url)", "public", "onlyOwner", "tokenExists(_token)", "{", "TokenMetadata", "storage", "token", "=", "tokens[_token];", "emit", "LogTokenURLChange(_token,", "token.url,", "_url);", "token.url", "=", "_url;", "}", "}"], "docstring_tokens": ["Allows", "owner", "to", "modify", "an", "existing", "token's", "icon", "URL", "."], "url": "d527a616e15794e8b0460f4dde9afcee"}
{"code_tokens": ["contract", "c21922{", "function", "playerInfo(address", "addr)", "public", "view", "atState(State.Active)", "gameIsAvailable()", "returns(uint256", "input,", "uint256", "timestamp,", "bool", "inGame)", "{", "(input,", "timestamp,", "inGame)", "=", "m_playersStorage.playerInfo(addr);", "}", "}"], "docstring_tokens": ["Get", "info", "about", "specified", "player", "."], "url": "d3f587e8982ec6da3b68fb8010fdfb3c"}
{"code_tokens": ["contract", "c23963{", "function", "setFreezeAgent(address", "addr,", "bool", "state)", "public", "onlyOwner", "{", "freezingAgents[addr]", "=", "state;", "FreezingAgentChanged(addr,", "state);", "}", "}"], "docstring_tokens": ["Function", "to", "allow", "a", "contract", "to", "freeze", "addresses", "."], "url": "26d8b64ec321a53dc292313b8d8d4bca"}
{"code_tokens": ["contract", "c3983{", "function", "supportsInterface(", "bytes4", "_interfaceID", ")", "external", "view", "returns", "(bool)", "{", "return", "supportedInterfaces[_interfaceID];", "}", "}"], "docstring_tokens": ["Function", "to", "check", "which", "interfaces", "are", "suported", "by", "this", "contract", "."], "url": "d86daf02ba8b62f56516d5cc69384733"}
