{"_id": "08030afc1d020140a09c31ebd19751c5", "text": "def read_text_from_file ( path : str ) -> str : with open ( path ) as text_file : content = text_file . read ( ) return content\n", "title": "", "metadata": ""}
{"_id": "77b9ef98c491691fccfd7f38f7e9aff2", "text": "def get_last_day_of_month ( t : datetime ) -> int : tn = t + timedelta ( days = 32 ) tn = datetime ( year = tn . year , month = tn . month , day = 1 ) tt = tn - timedelta ( hours = 1 ) return tt . day\n", "title": "", "metadata": ""}
{"_id": "e6cf3ed32b3da50111e6e1bcca5e526e", "text": "def get_static_url ( ) : path = getattr ( settings , 'STATIC_URL' , None ) if not path : path = getattr ( settings , 'MEDIA_URL' , None ) if not path : path = '/' return path\n", "title": "", "metadata": ""}
{"_id": "6505f70f410e6c0a2b604c4bf09199c1", "text": "def _concatenate_virtual_arrays ( arrs , cols = None , scaling = None ) : return None if not len ( arrs ) else ConcatenatedArrays ( arrs , cols , scaling = scaling )\n", "title": "", "metadata": ""}
{"_id": "39df0f3c0a418461d05a16acdad9c5b0", "text": "def file_exists ( fname ) : try : return fname and os . path . exists ( fname ) and os . path . getsize ( fname ) > 0 except OSError : return False\n", "title": "", "metadata": ""}
{"_id": "a4f6b69a6389881718c1e473f78fe75e", "text": "def information ( filename ) : check_if_this_file_exist ( filename ) filename = os . path . abspath ( filename ) result = get_json ( filename ) result = result [ 0 ] return result\n", "title": "", "metadata": ""}
{"_id": "cb02093e54f97b36b74c60de72418221", "text": "def get_nt_system_uid ( ) : try : import _winreg as winreg except ImportError : import winreg lm = winreg . ConnectRegistry ( None , winreg . HKEY_LOCAL_MACHINE ) try : key = winreg . OpenKey ( lm , r\"Software\\Microsoft\\Cryptography\" ) try : return winreg . QueryValueEx ( key , \"MachineGuid\" ) [ 0 ] finally : key . Close ( ) finally : lm . Close ( )\n", "title": "", "metadata": ""}
{"_id": "c37de2da38fa412c35f60d327041c4cd", "text": "def remove_na_arraylike ( arr ) : if is_extension_array_dtype ( arr ) : return arr [ notna ( arr ) ] else : return arr [ notna ( lib . values_from_object ( arr ) ) ]\n", "title": "", "metadata": ""}
{"_id": "a7de121887c7291b27270bfaf3f5bb56", "text": "def addClassKey ( self , klass , key , obj ) : d = self . _getClass ( klass ) d [ key ] = obj\n", "title": "", "metadata": ""}
{"_id": "e43cb87f45a5717aa22fedad0bef9209", "text": "def find_first ( pattern : str , path : str ) -> str : try : return find ( pattern , path ) [ 0 ] except IndexError : log . critical ( '''Couldn't find \"{}\" in \"{}\"''' , pattern , path ) raise\n", "title": "", "metadata": ""}
{"_id": "d15477be6f1ef26797fe654d33f2aa81", "text": "def get_in_samples ( samples , fn ) : for sample in samples : sample = to_single_data ( sample ) if fn ( sample , None ) : return fn ( sample ) return None\n", "title": "", "metadata": ""}
{"_id": "00c7e073aae7f85adfca7abb59c4eaad", "text": "def _remove_blank ( l ) : ret = [ ] for i , _ in enumerate ( l ) : if l [ i ] == 0 : break ret . append ( l [ i ] ) return ret\n", "title": "", "metadata": ""}
{"_id": "eea81c5587c9d4f4937092a57b7e5eec", "text": "def daterange ( start_date , end_date ) : for n in range ( int ( ( end_date - start_date ) . days ) ) : yield start_date + timedelta ( n )\n", "title": "", "metadata": ""}
{"_id": "84a1b91c905ce43b39d62140c99edc14", "text": "def distinct ( l ) : seen = set ( ) seen_add = seen . add return ( _ for _ in l if not ( _ in seen or seen_add ( _ ) ) )\n", "title": "", "metadata": ""}
{"_id": "5103a6a1455856eadbb7f8364ef16e56", "text": "def maskIndex ( self ) : if isinstance ( self . mask , bool ) : return np . full ( self . data . shape , self . mask , dtype = np . bool ) else : return self . mask\n", "title": "", "metadata": ""}
{"_id": "5dee2a7f1963473daf78b4b2a34de72d", "text": "def isstring ( value ) : classes = ( str , bytes ) if pyutils . PY3 else basestring # noqa: F821 return isinstance ( value , classes )\n", "title": "", "metadata": ""}
{"_id": "1a042fac5dc2ed9b7e38b8dce727f19f", "text": "def split_unit ( value ) : r = re . search ( '^(\\-?[\\d\\.]+)(.*)$' , str ( value ) ) return r . groups ( ) if r else ( '' , '' )\n", "title": "", "metadata": ""}
{"_id": "4c624851e90f9fe26de6c0d20176dc2e", "text": "def _num_cpus_darwin ( ) : p = subprocess . Popen ( [ 'sysctl' , '-n' , 'hw.ncpu' ] , stdout = subprocess . PIPE ) return p . stdout . read ( )\n", "title": "", "metadata": ""}
{"_id": "af6d6ff1185e66d8f7bea4dfb6a75409", "text": "def table_exists ( cursor , tablename , schema = 'public' ) : query = \"\"\"     SELECT EXISTS (         SELECT 1         FROM information_schema.tables         WHERE table_schema = %s         AND table_name = %s     )\"\"\" cursor . execute ( query , ( schema , tablename ) ) res = cursor . fetchone ( ) [ 0 ] return res\n", "title": "", "metadata": ""}
{"_id": "5c68c82300544a4d22b3ec49d7b392ad", "text": "def imdecode ( image_path ) : import os assert os . path . exists ( image_path ) , image_path + ' not found' im = cv2 . imread ( image_path ) return im\n", "title": "", "metadata": ""}
{"_id": "8b4dd1fdf83b7f678e45c77d1391baad", "text": "def position ( self ) -> Position : return Position ( self . _index , self . _lineno , self . _col_offset )\n", "title": "", "metadata": ""}
{"_id": "687310efd45652c6d1d3c115f9708a88", "text": "def make_aware ( dt ) : return dt if dt . tzinfo else dt . replace ( tzinfo = timezone . utc )\n", "title": "", "metadata": ""}
{"_id": "be5080826b03609c5faca330098a7890", "text": "def split_on ( s , sep = \" \" ) : pattern = '''((?:[^%s\"']|\"[^\"]*\"|'[^']*')+)''' % sep return [ _strip_speechmarks ( t ) for t in re . split ( pattern , s ) [ 1 : : 2 ] ]\n", "title": "", "metadata": ""}
{"_id": "a7cbf82491208337751a57941918e04a", "text": "def file_read ( filename ) : fobj = open ( filename , 'r' ) source = fobj . read ( ) fobj . close ( ) return source\n", "title": "", "metadata": ""}
{"_id": "877a7b232437cc61d980ebb6d03999fb", "text": "def Softsign ( a ) : return np . divide ( a , np . add ( np . abs ( a ) , 1 ) ) ,\n", "title": "", "metadata": ""}
{"_id": "9b3c701e18741561b4d7243f4369e45e", "text": "def static_url ( path , absolute = False ) : if os . sep != '/' : path = '/' . join ( path . split ( os . sep ) ) return flask . url_for ( 'static' , filename = path , _external = absolute )\n", "title": "", "metadata": ""}
{"_id": "ea9cb9da119686602f54e1410fba646e", "text": "def iterate_chunks ( file , chunk_size ) : chunk = file . read ( chunk_size ) while chunk : yield chunk chunk = file . read ( chunk_size )\n", "title": "", "metadata": ""}
{"_id": "6eecea1b47859b2546a45d716053ca77", "text": "def chunk_list ( l , n ) : return [ l [ i : i + n ] for i in range ( 0 , len ( l ) , n ) ]\n", "title": "", "metadata": ""}
{"_id": "2e27507165ada485672bc724ea9aa6e6", "text": "def is_natural ( x ) : try : is_integer = int ( x ) == x except ( TypeError , ValueError ) : return False return is_integer and x >= 0\n", "title": "", "metadata": ""}
{"_id": "55325bcdaed944956fdd67e9cc6f623c", "text": "def fmt_sz ( intval ) : try : return fmt . human_size ( intval ) except ( ValueError , TypeError ) : return \"N/A\" . rjust ( len ( fmt . human_size ( 0 ) ) )\n", "title": "", "metadata": ""}
{"_id": "d94444782aff01123439bae5b3bcde66", "text": "def colorize ( txt , fg = None , bg = None ) : setting = '' setting += _SET_FG . format ( fg ) if fg else '' setting += _SET_BG . format ( bg ) if bg else '' return setting + str ( txt ) + _STYLE_RESET\n", "title": "", "metadata": ""}
{"_id": "221d669e41cf533f9456f52f55810891", "text": "def _kbhit_unix ( ) -> bool : dr , dw , de = select . select ( [ sys . stdin ] , [ ] , [ ] , 0 ) return dr != [ ]\n", "title": "", "metadata": ""}
{"_id": "fbbb38b0ab6bda9668ea3a438e5a51e5", "text": "def get_method_name ( method ) : name = get_object_name ( method ) if name . startswith ( \"__\" ) and not name . endswith ( \"__\" ) : name = \"_{0}{1}\" . format ( get_object_name ( method . im_class ) , name ) return name\n", "title": "", "metadata": ""}
{"_id": "580951d998b747c345b64d568819eb11", "text": "def _linear_interpolation ( x , X , Y ) : return ( Y [ 1 ] * ( x - X [ 0 ] ) + Y [ 0 ] * ( X [ 1 ] - x ) ) / ( X [ 1 ] - X [ 0 ] )\n", "title": "", "metadata": ""}
{"_id": "4a7e672d8adc962c9d289a8ac2471e9a", "text": "def eval_script ( self , expr ) : ret = self . conn . issue_command ( \"Evaluate\" , expr ) return json . loads ( \"[%s]\" % ret ) [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "1975beb20797c07da22308d13b836445", "text": "def _dictfetchall ( self , cursor ) : columns = [ col [ 0 ] for col in cursor . description ] return [ dict ( zip ( columns , row ) ) for row in cursor . fetchall ( ) ]\n", "title": "", "metadata": ""}
{"_id": "55e551e9423c3ec0893ce56ce272b1c8", "text": "def _trim ( image ) : background = PIL . Image . new ( image . mode , image . size , image . getpixel ( ( 0 , 0 ) ) ) diff = PIL . ImageChops . difference ( image , background ) diff = PIL . ImageChops . add ( diff , diff , 2.0 , - 100 ) bbox = diff . getbbox ( ) if bbox : image = image . crop ( bbox ) return image\n", "title": "", "metadata": ""}
{"_id": "2221d7b41d3e9a65038b6e712fd38522", "text": "def count_rows ( self , table , cols = '*' ) : query = 'SELECT COUNT({0}) FROM {1}' . format ( join_cols ( cols ) , wrap ( table ) ) result = self . fetch ( query ) return result if result is not None else 0\n", "title": "", "metadata": ""}
{"_id": "9f7be1cfaf53359c2774645e5b0b3cb5", "text": "def items ( self ) : return [ ( value_descriptor . name , value_descriptor . number ) for value_descriptor in self . _enum_type . values ]\n", "title": "", "metadata": ""}
{"_id": "cf74cebf38c7c5b0fe2b22a36152474b", "text": "def timeit ( func , * args , * * kwargs ) : start_time = time . time ( ) res = func ( * args , * * kwargs ) timing = time . time ( ) - start_time return res , timing\n", "title": "", "metadata": ""}
{"_id": "a28ae4de82dfcf5ac618c80bdbcbe50d", "text": "def log_request ( self , code = '-' , size = '-' ) : if self . server . logRequests : BaseHTTPServer . BaseHTTPRequestHandler . log_request ( self , code , size )\n", "title": "", "metadata": ""}
{"_id": "4f8a58e88129e796b8f47f9105b86733", "text": "def is_sqlatype_numeric ( coltype : Union [ TypeEngine , VisitableType ] ) -> bool : coltype = _coltype_to_typeengine ( coltype ) return isinstance ( coltype , sqltypes . Numeric )\n", "title": "", "metadata": ""}
{"_id": "07860915828c93872b72ba9544ee70fd", "text": "def _manhattan_distance ( vec_a , vec_b ) : if len ( vec_a ) != len ( vec_b ) : raise ValueError ( 'len(vec_a) must equal len(vec_b)' ) return sum ( map ( lambda a , b : abs ( a - b ) , vec_a , vec_b ) )\n", "title": "", "metadata": ""}
{"_id": "f790125ddcb42af40d029628c215d886", "text": "def rgba_bytes_tuple ( self , x ) : return tuple ( int ( u * 255.9999 ) for u in self . rgba_floats_tuple ( x ) )\n", "title": "", "metadata": ""}
{"_id": "b029b81c7f735005e3920040704d9274", "text": "def get_iter_string_reader ( stdin ) : bufsize = 1024 iter_str = ( stdin [ i : i + bufsize ] for i in range ( 0 , len ( stdin ) , bufsize ) ) return get_iter_chunk_reader ( iter_str )\n", "title": "", "metadata": ""}
{"_id": "19e17b044aacb50752f1de0bc5ac0c72", "text": "def strip_spaces ( value , sep = None , join = True ) : value = value . strip ( ) value = [ v . strip ( ) for v in value . split ( sep ) ] join_sep = sep or ' ' return join_sep . join ( value ) if join else value\n", "title": "", "metadata": ""}
{"_id": "a0f39d964b724b1855c1fd1243649300", "text": "def process_instance ( self , instance ) : self . log . debug ( \"e = mc^2\" ) self . log . info ( \"About to fail..\" ) self . log . warning ( \"Failing.. soooon..\" ) self . log . critical ( \"Ok, you're done.\" ) assert False , \"\"\"ValidateFailureMock was destined to fail..  Here's some extended information about what went wrong.  It has quite the long string associated with it, including a few newlines and a list.  - Item 1 - Item 2  \"\"\"\n", "title": "", "metadata": ""}
{"_id": "681e12fa01556848368eb90fcff21512", "text": "def imapchain ( * a , * * kwa ) : imap_results = map ( * a , * * kwa ) return itertools . chain ( * imap_results )\n", "title": "", "metadata": ""}
{"_id": "aef7bc5c63c944f1688a4195f9f9d18e", "text": "def _gaps_from ( intervals ) : sliding_window = zip ( intervals , intervals [ 1 : ] ) gaps = [ b [ 0 ] - a [ 1 ] for a , b in sliding_window ] return gaps\n", "title": "", "metadata": ""}
{"_id": "3165c9bd6fe25279f013846369d79d10", "text": "def is_complex ( dtype ) : dtype = tf . as_dtype ( dtype ) if hasattr ( dtype , 'is_complex' ) : return dtype . is_complex return np . issubdtype ( np . dtype ( dtype ) , np . complex )\n", "title": "", "metadata": ""}
{"_id": "6f0fb4dc05cd056d9940a30177555bd4", "text": "def retrieve_import_alias_mapping ( names_list ) : import_alias_names = dict ( ) for alias in names_list : if alias . asname : import_alias_names [ alias . asname ] = alias . name return import_alias_names\n", "title": "", "metadata": ""}
{"_id": "c8f4f92d7df55f1fb2f41acfaa033a4e", "text": "def minify_js ( input_files , output_file ) : from . modules import minify , utils if not isinstance ( input_files , ( list , tuple ) ) : raise RuntimeError ( 'JS minifier takes a list of input files.' ) return { 'dependencies_fn' : utils . no_dependencies , 'compiler_fn' : minify . minify_js , 'input' : input_files , 'output' : output_file , 'kwargs' : { } , }\n", "title": "", "metadata": ""}
{"_id": "3b18d9b15502a36fc98f8875109ba0aa", "text": "def find_start_point ( self ) : for i , row in enumerate ( self . data ) : for j , _ in enumerate ( row ) : if self . data [ i , j ] != 0 : # or not np.isfinite(self.data[i,j]): return i , j\n", "title": "", "metadata": ""}
{"_id": "75a8d61b6ccca5cdaa5d0af42d69007e", "text": "def datetime_local_to_utc ( local ) : timestamp = time . mktime ( local . timetuple ( ) ) return datetime . datetime . utcfromtimestamp ( timestamp )\n", "title": "", "metadata": ""}
{"_id": "6aed693213fca21afbd57a7340026ee6", "text": "def root_parent ( self , category = None ) : return next ( filter ( lambda c : c . is_root , self . hierarchy ( ) ) )\n", "title": "", "metadata": ""}
{"_id": "8fbb50a7cba37fe9e83abdf1b5ea60c8", "text": "def round_sig ( x , sig ) : return round ( x , sig - int ( floor ( log10 ( abs ( x ) ) ) ) - 1 )\n", "title": "", "metadata": ""}
{"_id": "8be52e627c0864606e8842e3610e6f6c", "text": "def _array2cstr ( arr ) : out = StringIO ( ) np . save ( out , arr ) return b64encode ( out . getvalue ( ) )\n", "title": "", "metadata": ""}
{"_id": "0a750fdbe21a7264a65b0d61bfc1d7c5", "text": "def signal_handler ( signal_name , frame ) : sys . stdout . flush ( ) print ( \"\\nSIGINT in frame signal received. Quitting...\" ) sys . stdout . flush ( ) sys . exit ( 0 )\n", "title": "", "metadata": ""}
{"_id": "023c9670cc8b51ac887b574740acd9e9", "text": "def _replace_file ( path , content ) : if os . path . exists ( path ) : with open ( path , 'r' ) as f : if content == f . read ( ) : print ( \"Not overwriting {} because it is unchanged\" . format ( path ) , file = sys . stderr ) return with open ( path , 'w' ) as f : f . write ( content )\n", "title": "", "metadata": ""}
{"_id": "3d342764d30a97428c99700f00615fdb", "text": "async def power ( source , exponent ) : async with streamcontext ( source ) as streamer : async for item in streamer : yield item ** exponent\n", "title": "", "metadata": ""}
{"_id": "d416c6f0b7cba8d2119f33748c1fa414", "text": "def is_prime ( n ) : if n % 2 == 0 and n > 2 : return False return all ( n % i for i in range ( 3 , int ( math . sqrt ( n ) ) + 1 , 2 ) )\n", "title": "", "metadata": ""}
{"_id": "c5a2f11e2f1f7718f811aa89ed61f3de", "text": "def arcball_map_to_sphere ( point , center , radius ) : v0 = ( point [ 0 ] - center [ 0 ] ) / radius v1 = ( center [ 1 ] - point [ 1 ] ) / radius n = v0 * v0 + v1 * v1 if n > 1.0 : # position outside of sphere n = math . sqrt ( n ) return numpy . array ( [ v0 / n , v1 / n , 0.0 ] ) else : return numpy . array ( [ v0 , v1 , math . sqrt ( 1.0 - n ) ] )\n", "title": "", "metadata": ""}
{"_id": "0e5b29c0a946b42d1c525c571abe90a2", "text": "def INIT_LIST_EXPR ( self , cursor ) : values = [ self . parse_cursor ( child ) for child in list ( cursor . get_children ( ) ) ] return values\n", "title": "", "metadata": ""}
{"_id": "07435dc5d68ac0f47751a84a6a9c73e8", "text": "def clear_matplotlib_ticks ( self , axis = \"both\" ) : ax = self . get_axes ( ) plotting . clear_matplotlib_ticks ( ax = ax , axis = axis )\n", "title": "", "metadata": ""}
{"_id": "5e5d322081921c9e868234ddf2937775", "text": "def _to_array ( value ) : if isinstance ( value , ( tuple , list ) ) : return array ( value ) elif isinstance ( value , ( float , int ) ) : return np . float64 ( value ) else : return value\n", "title": "", "metadata": ""}
{"_id": "2cb91d9a760fa88f722b7b0e7ec4f896", "text": "def unique ( seq ) : cleaned = [ ] for each in seq : if each not in cleaned : cleaned . append ( each ) return cleaned\n", "title": "", "metadata": ""}
{"_id": "d5804be3b3d5f070c8f8c80db31fb65f", "text": "def ExpireObject ( self , key ) : node = self . _hash . pop ( key , None ) if node : self . _age . Unlink ( node ) self . KillObject ( node . data ) return node . data\n", "title": "", "metadata": ""}
{"_id": "bbaa3975f0caf618d8c3092561e094c7", "text": "def multidict_to_dict ( d ) : return dict ( ( k , v [ 0 ] if len ( v ) == 1 else v ) for k , v in iterlists ( d ) )\n", "title": "", "metadata": ""}
{"_id": "dba2efba6bb21d61b54d21e7f525fa1c", "text": "def partition ( a , sz ) : return [ a [ i : i + sz ] for i in range ( 0 , len ( a ) , sz ) ]\n", "title": "", "metadata": ""}
{"_id": "e9be040137ff55d108949c245e1e014d", "text": "def out_shape_from_array ( arr ) : arr = np . asarray ( arr ) if arr . ndim == 1 : return arr . shape else : return ( arr . shape [ 1 ] , )\n", "title": "", "metadata": ""}
{"_id": "20e6517019e892b28280a56a63b933c1", "text": "def strip_spaces ( x ) : x = x . replace ( b' ' , b'' ) x = x . replace ( b'\\t' , b'' ) return x\n", "title": "", "metadata": ""}
{"_id": "70dba75e97ab093f55a5fde33a0821ab", "text": "def _isint ( string ) : return type ( string ) is int or ( isinstance ( string , _binary_type ) or isinstance ( string , _text_type ) ) and _isconvertible ( int , string )\n", "title": "", "metadata": ""}
{"_id": "55de84f203499f17fbc75857a75f38fb", "text": "def plot3d_init ( fignum ) : from mpl_toolkits . mplot3d import Axes3D fig = plt . figure ( fignum ) ax = fig . add_subplot ( 111 , projection = '3d' ) return ax\n", "title": "", "metadata": ""}
{"_id": "e54d7c5df961a34a4099fd3e611d5573", "text": "def set_slug ( apps , schema_editor , class_name ) : Cls = apps . get_model ( 'spectator_events' , class_name ) for obj in Cls . objects . all ( ) : obj . slug = generate_slug ( obj . pk ) obj . save ( update_fields = [ 'slug' ] )\n", "title": "", "metadata": ""}
{"_id": "c90d4441e39b030693f9e1204b96f296", "text": "def fromtimestamp ( cls , timestamp ) : d = cls . utcfromtimestamp ( timestamp ) return d . astimezone ( localtz ( ) )\n", "title": "", "metadata": ""}
{"_id": "863609479dbd69461db2991731fec6a8", "text": "def _maybe_fill ( arr , fill_value = np . nan ) : if _isna_compat ( arr , fill_value ) : arr . fill ( fill_value ) return arr\n", "title": "", "metadata": ""}
{"_id": "950eb5e5618a10872f61e64db220e40c", "text": "def _tuple_repr ( data ) : if len ( data ) == 1 : return \"(%s,)\" % rpr ( data [ 0 ] ) else : return \"(%s)\" % \", \" . join ( [ rpr ( x ) for x in data ] )\n", "title": "", "metadata": ""}
{"_id": "51706a72e3dd39f2f6c1c555030cd5f0", "text": "def assert_exactly_one_true ( bool_list ) : assert isinstance ( bool_list , list ) counter = 0 for item in bool_list : if item : counter += 1 return counter == 1\n", "title": "", "metadata": ""}
{"_id": "7449b1e5ce8c0b6361ee2dea032df256", "text": "def get_page_and_url ( session , url ) : reply = get_reply ( session , url ) return reply . text , reply . url\n", "title": "", "metadata": ""}
{"_id": "c5c3e11fbdf3ffc197fe92f5778929ce", "text": "def Gaussian ( x , mu , sig ) : return sympy . exp ( - ( x - mu ) ** 2 / ( 2 * sig ** 2 ) ) / sympy . sqrt ( 2 * sympy . pi * sig ** 2 )\n", "title": "", "metadata": ""}
{"_id": "8adf618241536e7469666c75d0c604ad", "text": "def globlookup ( pattern , root ) : for subdir , dirnames , filenames in os . walk ( root ) : d = subdir [ len ( root ) + 1 : ] files = ( os . path . join ( d , f ) for f in filenames ) for f in fnmatch . filter ( files , pattern ) : yield f\n", "title": "", "metadata": ""}
{"_id": "ae178cf5973df992466dc39b4d974fec", "text": "def api_test ( method = 'GET' , * * response_kwargs ) : method = method . lower ( ) def api_test_factory ( fn ) : @ functools . wraps ( fn ) @ mock . patch ( 'requests.{}' . format ( method ) ) def execute_test ( method_func , * args , * * kwargs ) : method_func . return_value = MockResponse ( * * response_kwargs ) expected_url , response = fn ( * args , * * kwargs ) method_func . assert_called_once ( ) assert_valid_api_call ( method_func , expected_url ) assert isinstance ( response , JSONAPIParser ) assert response . json_data is method_func . return_value . data return execute_test return api_test_factory\n", "title": "", "metadata": ""}
{"_id": "c1462c32a5ffbee34e07c32e153216e5", "text": "def _read_stream_for_size ( stream , buf_size = 65536 ) : size = 0 while True : buf = stream . read ( buf_size ) size += len ( buf ) if not buf : break return size\n", "title": "", "metadata": ""}
{"_id": "4f541e498553b3a9254687cd0aca073a", "text": "def axes_off ( ax ) : ax . set_frame_on ( False ) ax . axes . get_yaxis ( ) . set_visible ( False ) ax . axes . get_xaxis ( ) . set_visible ( False )\n", "title": "", "metadata": ""}
{"_id": "be7bffc3dafcdb65d51fc467c0e2d44e", "text": "def enrich_complexes ( graph : BELGraph ) -> None : nodes = list ( get_nodes_by_function ( graph , COMPLEX ) ) for u in nodes : for v in u . members : graph . add_has_component ( u , v )\n", "title": "", "metadata": ""}
{"_id": "569109475829c0c038ccf2c76b39019c", "text": "def filter_bolts ( table , header ) : bolts_info = [ ] for row in table : if row [ 0 ] == 'bolt' : bolts_info . append ( row ) return bolts_info , header\n", "title": "", "metadata": ""}
{"_id": "749a2c66fee20adb845e1ce03aaabd16", "text": "def get_month_start_date ( self ) : now = timezone . now ( ) return timezone . datetime ( day = 1 , month = now . month , year = now . year , tzinfo = now . tzinfo )\n", "title": "", "metadata": ""}
{"_id": "a65bc35439ff52550b1498b85396a261", "text": "def test3 ( ) : import time p = MVisionProcess ( ) p . start ( ) time . sleep ( 5 ) p . stop ( )\n", "title": "", "metadata": ""}
{"_id": "b0eae0cd4633d808e97ab305862ffac7", "text": "def _spawn_kafka_consumer_thread ( self ) : self . logger . debug ( \"Spawn kafka consumer thread\" \"\" ) self . _consumer_thread = Thread ( target = self . _consumer_loop ) self . _consumer_thread . setDaemon ( True ) self . _consumer_thread . start ( )\n", "title": "", "metadata": ""}
{"_id": "58265fd55890b1f8393b360ab0d8a69a", "text": "def add_index_alias ( es , index_name , alias_name ) : es . indices . put_alias ( index = index_name , name = terms_alias )\n", "title": "", "metadata": ""}
{"_id": "40884318354b182a3dda10b622f9171c", "text": "def __run_spark_submit ( lane_yaml , dist_dir , spark_home , spark_args , silent ) : # spark-submit binary cmd = [ 'spark-submit' if spark_home is None else os . path . join ( spark_home , 'bin/spark-submit' ) ] # Supplied spark arguments if spark_args : cmd += spark_args # Packaged App & lane cmd += [ '--py-files' , 'libs.zip,_framework.zip,tasks.zip' , 'main.py' ] cmd += [ '--lane' , lane_yaml ] logging . info ( 'Submitting to Spark' ) logging . debug ( str ( cmd ) ) # Submit devnull = open ( os . devnull , 'w' ) outp = { 'stderr' : STDOUT , 'stdout' : devnull } if silent else { } call ( cmd , cwd = dist_dir , env = MY_ENV , * * outp ) devnull . close ( )\n", "title": "", "metadata": ""}
{"_id": "dd682e752090d8cb9b0a6d3a978a9cdc", "text": "def round_to_int ( number , precision ) : precision = int ( precision ) rounded = ( int ( number ) + precision / 2 ) // precision * precision return rounded\n", "title": "", "metadata": ""}
{"_id": "c967cf132a957ff1a5df3778e6ab4b0d", "text": "def _load_mod_ui_libraries ( self , path ) : path = path / Path ( 'mod' ) sys . path . append ( str ( path ) )\n", "title": "", "metadata": ""}
{"_id": "07612bf633d972ea56827f46d79c2b70", "text": "def file_empty ( fp ) : # for python 2 we need to use a homemade peek() if six . PY2 : contents = fp . read ( ) fp . seek ( 0 ) return not bool ( contents ) else : return not fp . peek ( )\n", "title": "", "metadata": ""}
{"_id": "8965b631e1a032a3911aa35e6fdc2947", "text": "def fetch ( self ) : api = self . doapi_manager return api . _domain ( api . request ( self . url ) [ \"domain\" ] )\n", "title": "", "metadata": ""}
{"_id": "6934cb6ef519e5e862ce64eaffa053f2", "text": "def filter_dict ( d , keys ) : return { k : v for k , v in d . items ( ) if k in keys }\n", "title": "", "metadata": ""}
{"_id": "fdb8961f7286844a6c26c908cbb50528", "text": "def __delitem__ ( self , key ) : del self . _variables [ key ] self . _coord_names . discard ( key )\n", "title": "", "metadata": ""}
{"_id": "6ad5abc5c1117524ce077e8121e37847", "text": "def quote ( s , unsafe = '/' ) : res = s . replace ( '%' , '%25' ) for c in unsafe : res = res . replace ( c , '%' + ( hex ( ord ( c ) ) . upper ( ) ) [ 2 : ] ) return res\n", "title": "", "metadata": ""}
{"_id": "5c0bdefa936817b095726c7c3ba06f56", "text": "def recClearTag ( element ) : children = element . getchildren ( ) if len ( children ) > 0 : for child in children : recClearTag ( child ) element . tag = clearTag ( element . tag )\n", "title": "", "metadata": ""}
{"_id": "3995674e8ca276a731bfee35e85ffb70", "text": "def has_key ( cls , * args ) : key = args if len ( args ) > 1 else args [ 0 ] return key in cls . _instances\n", "title": "", "metadata": ""}
{"_id": "93020a65b1ca4b807c8f6791806f9e86", "text": "def restore_default_settings ( ) : global __DEFAULTS __DEFAULTS . CACHE_DIR = defaults . CACHE_DIR __DEFAULTS . SET_SEED = defaults . SET_SEED __DEFAULTS . SEED = defaults . SEED logging . info ( 'Settings reverted to their default values.' )\n", "title": "", "metadata": ""}
{"_id": "cd95d41984439c8f313209e5e6213cd5", "text": "def is_all_field_none ( self ) : if self . _type_ is not None : return False if self . _value is not None : return False if self . _name is not None : return False return True\n", "title": "", "metadata": ""}
{"_id": "229b165463eb4cd77ccec1d0e33a34f8", "text": "def s3_get ( url : str , temp_file : IO ) -> None : s3_resource = boto3 . resource ( \"s3\" ) bucket_name , s3_path = split_s3_path ( url ) s3_resource . Bucket ( bucket_name ) . download_fileobj ( s3_path , temp_file )\n", "title": "", "metadata": ""}
{"_id": "20c08e95eefe95daec89aeb2e221bc71", "text": "def to_np ( * args ) : if len ( args ) > 1 : return ( cp . asnumpy ( x ) for x in args ) else : return cp . asnumpy ( args [ 0 ] )\n", "title": "", "metadata": ""}
{"_id": "1a7662d20b4bcc214d5ed4e968b6ac3e", "text": "def list_depth ( list_ , func = max , _depth = 0 ) : depth_list = [ list_depth ( item , func = func , _depth = _depth + 1 ) for item in list_ if util_type . is_listlike ( item ) ] if len ( depth_list ) > 0 : return func ( depth_list ) else : return _depth\n", "title": "", "metadata": ""}
{"_id": "d7c68bbe2aefb9cec28f8b2e99d806a8", "text": "def yum_install ( self , packages , ignore_error = False ) : return self . run ( 'yum install -y --quiet ' + ' ' . join ( packages ) , ignore_error = ignore_error , retry = 5 )\n", "title": "", "metadata": ""}
{"_id": "d8135f12186d48ef77d94a29c2504d42", "text": "def read_string_from_file ( path , encoding = \"utf8\" ) : with codecs . open ( path , \"rb\" , encoding = encoding ) as f : value = f . read ( ) return value\n", "title": "", "metadata": ""}
{"_id": "1013cd76873ae4661531245dc0ee314b", "text": "def load_image ( fname ) : with open ( fname , \"rb\" ) as f : i = Image . open ( fname ) #i.load() return i\n", "title": "", "metadata": ""}
{"_id": "8f8da7775aa35c300629a41f2d1185b5", "text": "def dictlist_replace ( dict_list : Iterable [ Dict ] , key : str , value : Any ) -> None : for d in dict_list : d [ key ] = value\n", "title": "", "metadata": ""}
{"_id": "c5ad1e2f88cf010e3a492a46a0d687ba", "text": "def get_dict_to_encoded_url ( data ) : unicode_data = dict ( [ ( k , smart_str ( v ) ) for k , v in data . items ( ) ] ) encoded = urllib . urlencode ( unicode_data ) return encoded\n", "title": "", "metadata": ""}
{"_id": "3f3885d8ffbea7fd08316189833d6e26", "text": "def line_count ( fn ) : with open ( fn ) as f : for i , l in enumerate ( f ) : pass return i + 1\n", "title": "", "metadata": ""}
{"_id": "c297c5ea8408cc8833ebbc4ec5633cd6", "text": "def a2s ( a ) : s = np . zeros ( ( 6 , ) , 'f' ) # make the a matrix for i in range ( 3 ) : s [ i ] = a [ i ] [ i ] s [ 3 ] = a [ 0 ] [ 1 ] s [ 4 ] = a [ 1 ] [ 2 ] s [ 5 ] = a [ 0 ] [ 2 ] return s\n", "title": "", "metadata": ""}
{"_id": "e5cdeab745bb0fb7dd44c58b192543fd", "text": "def seconds ( num ) : now = pytime . time ( ) end = now + num until ( end )\n", "title": "", "metadata": ""}
{"_id": "2c41e4d5c1cc0d6e25078c2fb2bd0904", "text": "def get_dt_list ( fn_list ) : dt_list = np . array ( [ fn_getdatetime ( fn ) for fn in fn_list ] ) return dt_list\n", "title": "", "metadata": ""}
{"_id": "f6e816dd6b300e21da64354dcada9696", "text": "def hide ( self ) : self . tk . withdraw ( ) self . _visible = False if self . _modal : self . tk . grab_release ( )\n", "title": "", "metadata": ""}
{"_id": "c62d9731429c767968570936958e1379", "text": "def exists ( self ) : r = self . _client . _redis flag = '{}:flag' . format ( self . _queue ) return bool ( r . exists ( flag ) )\n", "title": "", "metadata": ""}
{"_id": "11ff669a5ba9ce04839071bb3fced302", "text": "def gen_random_string ( str_len ) : return '' . join ( random . choice ( string . ascii_letters + string . digits ) for _ in range ( str_len ) )\n", "title": "", "metadata": ""}
{"_id": "b234cb567898817dfe7ddad7a82242b4", "text": "def sqliteRowsToDicts ( sqliteRows ) : return map ( lambda r : dict ( zip ( r . keys ( ) , r ) ) , sqliteRows )\n", "title": "", "metadata": ""}
{"_id": "1f92ebe04ae8dd27b275095bdd70686e", "text": "def positive_integer ( anon , obj , field , val ) : return anon . faker . positive_integer ( field = field )\n", "title": "", "metadata": ""}
{"_id": "e04d968a8ffa7a00ee684645a272a615", "text": "def returned ( n ) : ## `takei` yield lazily so we can short-circuit and avoid computing the rest of the walk for pos in randwalk ( ) >> drop ( 1 ) >> takei ( xrange ( n - 1 ) ) : if pos == Origin : return True return False\n", "title": "", "metadata": ""}
{"_id": "2d4750a17fb84bc9034f4009c886156e", "text": "def iterate_items ( dictish ) : if hasattr ( dictish , 'iteritems' ) : return dictish . iteritems ( ) if hasattr ( dictish , 'items' ) : return dictish . items ( ) return dictish\n", "title": "", "metadata": ""}
{"_id": "c2c7eabdc0f0966292118804716ce48f", "text": "def good ( txt ) : print ( \"%s# %s%s%s\" % ( PR_GOOD_CC , get_time_stamp ( ) , txt , PR_NC ) ) sys . stdout . flush ( )\n", "title": "", "metadata": ""}
{"_id": "7ebc9963c57e5f980ab69f949117a043", "text": "def sample_normal ( mean , var , rng ) : ret = numpy . sqrt ( var ) * rng . randn ( * mean . shape ) + mean return ret\n", "title": "", "metadata": ""}
{"_id": "0ccbef72b62feca029d2cea2d9a632c1", "text": "def inh ( table ) : t = [ ] for i in table : t . append ( np . ndarray . tolist ( np . arcsinh ( i ) ) ) return t\n", "title": "", "metadata": ""}
{"_id": "8875c953cabcee4600077be427ff6831", "text": "def get_user_name ( ) : if sys . platform == 'win32' : #user = os.getenv('USERPROFILE') user = os . getenv ( 'USERNAME' ) else : user = os . getenv ( 'LOGNAME' ) return user\n", "title": "", "metadata": ""}
{"_id": "3151f48240259697fe40a5da0a7dc5d1", "text": "def angle ( x0 , y0 , x1 , y1 ) : return degrees ( atan2 ( y1 - y0 , x1 - x0 ) )\n", "title": "", "metadata": ""}
{"_id": "4f553c1fab495c8943acbed15e36cb3b", "text": "def getfirstline ( file , default ) : with open ( file , 'rb' ) as fh : content = fh . readlines ( ) if len ( content ) == 1 : return content [ 0 ] . decode ( 'utf-8' ) . strip ( '\\n' ) return default\n", "title": "", "metadata": ""}
{"_id": "db56cfc3ad8a78c68bd97a78691167f4", "text": "def dates_in_range ( start_date , end_date ) : return [ start_date + timedelta ( n ) for n in range ( int ( ( end_date - start_date ) . days ) ) ]\n", "title": "", "metadata": ""}
{"_id": "fc234fd6094e24699340a9db9a69aa42", "text": "def _is_retryable_exception ( e ) : if isinstance ( e , urllib3 . exceptions . ProtocolError ) : e = e . args [ 1 ] if isinstance ( e , ( socket . gaierror , socket . herror ) ) : return True if isinstance ( e , socket . error ) and e . errno in _RETRYABLE_SOCKET_ERRORS : return True if isinstance ( e , urllib3 . exceptions . NewConnectionError ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "13dd3391b418cb725ea4bab3d73872fa", "text": "def _push_render ( self ) : bokeh . io . push_notebook ( handle = self . handle ) self . last_update = time . time ( )\n", "title": "", "metadata": ""}
{"_id": "303fc74aef0b36bb6fe3577166430baa", "text": "def dotproduct ( X , Y ) : return sum ( [ x * y for x , y in zip ( X , Y ) ] )\n", "title": "", "metadata": ""}
{"_id": "77360d52355e364690759fe51bb9a042", "text": "def extract_zip ( zip_path , target_folder ) : with zipfile . ZipFile ( zip_path ) as archive : archive . extractall ( target_folder )\n", "title": "", "metadata": ""}
{"_id": "6695424b11117eb38bf62b23c0fe0941", "text": "def tfds_dir ( ) : return os . path . dirname ( os . path . dirname ( os . path . dirname ( __file__ ) ) )\n", "title": "", "metadata": ""}
{"_id": "1d856e2f9c92a25f552310b815dd4601", "text": "def _propagate_mean ( mean , linop , dist ) : return linop . matmul ( mean ) + dist . mean ( ) [ ... , tf . newaxis ]\n", "title": "", "metadata": ""}
{"_id": "cf9c0726149445e04450018a185a2d65", "text": "def symlink ( source , destination ) : log ( \"Symlinking {} as {}\" . format ( source , destination ) ) cmd = [ 'ln' , '-sf' , source , destination , ] subprocess . check_call ( cmd )\n", "title": "", "metadata": ""}
{"_id": "159c92cf3bf1555f96870209890bf907", "text": "def this_quarter ( ) : since = TODAY + delta ( day = 1 ) while since . month % 3 != 0 : since -= delta ( months = 1 ) until = since + delta ( months = 3 ) return Date ( since ) , Date ( until )\n", "title": "", "metadata": ""}
{"_id": "169263bd7d57a9e52e9846cfaa5455cf", "text": "def fileopenbox ( msg = None , title = None , argInitialFile = None ) : return psidialogs . ask_file ( message = msg , title = title , default = argInitialFile )\n", "title": "", "metadata": ""}
{"_id": "3e2e6c5fe167fdfa8bccc6e96c2a0e5a", "text": "def denorm ( self , arr ) : if type ( arr ) is not np . ndarray : arr = to_np ( arr ) if len ( arr . shape ) == 3 : arr = arr [ None ] return self . transform . denorm ( np . rollaxis ( arr , 1 , 4 ) )\n", "title": "", "metadata": ""}
{"_id": "f001cdb06f03b5d9bb5f4259b1c9306d", "text": "def _write_color_colorama ( fp , text , color ) : foreground , background , style = get_win_color ( color ) colorama . set_console ( foreground = foreground , background = background , style = style ) fp . write ( text ) colorama . reset_console ( )\n", "title": "", "metadata": ""}
{"_id": "e86b6c4d433868a7e886e5f0a1acd8bd", "text": "def dt_to_ts ( value ) : if not isinstance ( value , datetime ) : return value return calendar . timegm ( value . utctimetuple ( ) ) + value . microsecond / 1000000.0\n", "title": "", "metadata": ""}
{"_id": "1437a2dc62be1f56aaf7dabeac426203", "text": "def parse_querystring ( self , req , name , field ) : return core . get_value ( req . args , name , field )\n", "title": "", "metadata": ""}
{"_id": "638fa22c38d5b3de23550c5dae577a04", "text": "def _string_hash ( s ) : h = 5381 for c in s : h = h * 33 + ord ( c ) return h\n", "title": "", "metadata": ""}
{"_id": "250242238f2a15c47dc3c80eacebbda1", "text": "def subat ( orig , index , replace ) : return \"\" . join ( [ ( orig [ x ] if x != index else replace ) for x in range ( len ( orig ) ) ] )\n", "title": "", "metadata": ""}
{"_id": "c0325173c132024139d14bb52c239d58", "text": "def _shuffle ( data , idx ) : shuffle_data = [ ] for idx_k , idx_v in data : shuffle_data . append ( ( idx_k , mx . ndarray . array ( idx_v . asnumpy ( ) [ idx ] , idx_v . context ) ) ) return shuffle_data\n", "title": "", "metadata": ""}
{"_id": "4d8e1e86f38e371c7f4cf20d9a0e7a44", "text": "def set_basic_auth ( self , username , password ) : from requests . auth import HTTPBasicAuth self . auth = HTTPBasicAuth ( username , password ) return self\n", "title": "", "metadata": ""}
{"_id": "84795fa66ef9e40cb33c2a20467bffc6", "text": "def runcoro ( async_function ) : future = _asyncio . run_coroutine_threadsafe ( async_function , client . loop ) result = future . result ( ) return result\n", "title": "", "metadata": ""}
{"_id": "68108af21420296cd12c75f6a742b542", "text": "def _top ( self ) : # Goto top of the list self . top . body . focus_position = 2 if self . compact is False else 0 self . top . keypress ( self . size , \"\" )\n", "title": "", "metadata": ""}
{"_id": "a543c34e490e597fe42533600410a78e", "text": "def list_move_to_front ( l , value = 'other' ) : l = list ( l ) if value in l : l . remove ( value ) l . insert ( 0 , value ) return l\n", "title": "", "metadata": ""}
{"_id": "517401a64770062b7ec4e4a267a97538", "text": "def int2str ( num , radix = 10 , alphabet = BASE85 ) : return NumConv ( radix , alphabet ) . int2str ( num )\n", "title": "", "metadata": ""}
{"_id": "55d624903ae8a4dc3fa6299aec070824", "text": "def remove_punctuation ( text , exceptions = [ ] ) : all_but = [ r'\\w' , r'\\s' ] all_but . extend ( exceptions ) pattern = '[^{}]' . format ( '' . join ( all_but ) ) return re . sub ( pattern , '' , text )\n", "title": "", "metadata": ""}
{"_id": "32911f6be92f498909fc79ed7546d934", "text": "def cross_join ( df1 , df2 ) : if len ( df1 ) == 0 : return df2 if len ( df2 ) == 0 : return df1 # Add as lists so that the new index keeps the items in # the order that they are added together all_columns = pd . Index ( list ( df1 . columns ) + list ( df2 . columns ) ) df1 [ 'key' ] = 1 df2 [ 'key' ] = 1 return pd . merge ( df1 , df2 , on = 'key' ) . loc [ : , all_columns ]\n", "title": "", "metadata": ""}
{"_id": "6a7180342df4c3ec1652666cfdb12fc9", "text": "def fetch_event ( urls ) : rs = ( grequests . get ( u ) for u in urls ) return [ content . json ( ) for content in grequests . map ( rs ) ]\n", "title": "", "metadata": ""}
{"_id": "c40617cee90cd99ea647d14206aad35d", "text": "def load ( self , path ) : with io . open ( path , 'rb' ) as fin : self . weights = pickle . load ( fin )\n", "title": "", "metadata": ""}
{"_id": "96d99f6a00dcc756153f64011dc2566d", "text": "def encode_list ( key , list_ ) : # type: (str, Iterable) -> Dict[str, str] if not list_ : return { } return { key : \" \" . join ( str ( i ) for i in list_ ) }\n", "title": "", "metadata": ""}
{"_id": "99d7e5203fa2841e853ff1c4a825fe2b", "text": "def safe_unicode ( string ) : if not PY3 : uni = string . replace ( u'\\u2019' , \"'\" ) return uni . encode ( 'utf-8' ) return string\n", "title": "", "metadata": ""}
{"_id": "70b55100adb71efb7f7d10023ddcfbfc", "text": "def request ( method , url , * * kwargs ) : retries = kwargs . pop ( 'retries' , None ) with Session ( retries = retries ) as session : return session . request ( method = method , url = url , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "c8534f0f0e556a0e2f672ea288638ce3", "text": "def define_struct ( defn ) : struct = parse_type ( defn ) ALL_TYPES [ struct . name ] = struct return struct\n", "title": "", "metadata": ""}
{"_id": "bcaa725f1cd080d7694dd5c6ddc43e0e", "text": "def show ( data , negate = False ) : from PIL import Image as pil data = np . array ( ( data - data . min ( ) ) * 255.0 / ( data . max ( ) - data . min ( ) ) , np . uint8 ) if negate : data = 255 - data img = pil . fromarray ( data ) img . show ( )\n", "title": "", "metadata": ""}
{"_id": "bb6be9e082404be78ee362b257b27328", "text": "def handleFlaskPostRequest ( flaskRequest , endpoint ) : if flaskRequest . method == \"POST\" : return handleHttpPost ( flaskRequest , endpoint ) elif flaskRequest . method == \"OPTIONS\" : return handleHttpOptions ( ) else : raise exceptions . MethodNotAllowedException ( )\n", "title": "", "metadata": ""}
{"_id": "2c951a06cbe30814c91736a03127ca00", "text": "def copy_default_data_file ( filename , module = None ) : if module is None : module = __get_filetypes_module ( ) fullpath = get_default_data_path ( filename , module = module ) shutil . copy ( fullpath , \".\" )\n", "title": "", "metadata": ""}
{"_id": "91caa3e531882c89daca44fb6a18a110", "text": "def roundClosestValid ( val , res , decimals = None ) : if decimals is None and \".\" in str ( res ) : decimals = len ( str ( res ) . split ( '.' ) [ 1 ] ) return round ( round ( val / res ) * res , decimals )\n", "title": "", "metadata": ""}
{"_id": "2a9a76f872062fe2d55a49090dea6591", "text": "def isin ( elems , line ) : found = False for e in elems : if e in line . lower ( ) : found = True break return found\n", "title": "", "metadata": ""}
{"_id": "0b88d75060177cdf9d4c5b13a2ae1578", "text": "def c_str ( string ) : if not isinstance ( string , str ) : string = string . decode ( 'ascii' ) return ctypes . c_char_p ( string . encode ( 'utf-8' ) )\n", "title": "", "metadata": ""}
{"_id": "192bcaf64e4bd250a9fd5d6bbcda1f06", "text": "def set_empty ( self , row , column ) : subplot = self . get_subplot_at ( row , column ) subplot . set_empty ( )\n", "title": "", "metadata": ""}
{"_id": "26908e5ee2c6eb09f6afcc02893d5b9b", "text": "def display_len ( text ) : text = unicodedata . normalize ( 'NFD' , text ) return sum ( char_width ( char ) for char in text )\n", "title": "", "metadata": ""}
{"_id": "185497829881bf6a7cd0581a3b58edbe", "text": "def is_builtin_type ( tp ) : return hasattr ( __builtins__ , tp . __name__ ) and tp is getattr ( __builtins__ , tp . __name__ )\n", "title": "", "metadata": ""}
{"_id": "dc602b5968508f49b9a4ac30fbd48b44", "text": "def Exit ( msg , code = 1 ) : print >> sys . stderr , msg sys . exit ( code )\n", "title": "", "metadata": ""}
{"_id": "385bfc90c846fafcb15dbed723ea4824", "text": "def surface ( self , zdata , * * kwargs ) : self . _configure_3d ( ) surf = scene . SurfacePlot ( z = zdata , * * kwargs ) self . view . add ( surf ) self . view . camera . set_range ( ) return surf\n", "title": "", "metadata": ""}
{"_id": "aa4df32b59287c874a32304ea24608ca", "text": "def is_not_null ( df : DataFrame , col_name : str ) -> bool : if ( isinstance ( df , pd . DataFrame ) and col_name in df . columns and df [ col_name ] . notnull ( ) . any ( ) ) : return True else : return False\n", "title": "", "metadata": ""}
{"_id": "0bdbe9af65b7f3a34686dc38a53281e7", "text": "def _pip_exists ( self ) : return os . path . isfile ( os . path . join ( self . path , 'bin' , 'pip' ) )\n", "title": "", "metadata": ""}
{"_id": "acc87784f3645187f7b2cd970e9a45e1", "text": "def memory_usage ( method ) : def wrapper ( * args , * * kwargs ) : logging . info ( 'Memory before method %s is %s.' , method . __name__ , runtime . memory_usage ( ) . current ( ) ) result = method ( * args , * * kwargs ) logging . info ( 'Memory after method %s is %s' , method . __name__ , runtime . memory_usage ( ) . current ( ) ) return result return wrapper\n", "title": "", "metadata": ""}
{"_id": "ae34e84e6a617b8c7751a512d07afa9a", "text": "def flat_list ( lst ) : if isinstance ( lst , list ) : for item in lst : for i in flat_list ( item ) : yield i else : yield lst\n", "title": "", "metadata": ""}
{"_id": "eea364a2e9ee2bfda940843f2afec0b6", "text": "def locked_delete ( self ) : filters = { self . key_name : self . key_value } self . session . query ( self . model_class ) . filter_by ( * * filters ) . delete ( )\n", "title": "", "metadata": ""}
{"_id": "feb24813ad578cfaff4c7667ec208156", "text": "def del_label ( self , name ) : labels_tag = self . root [ 0 ] labels_tag . remove ( self . _find_label ( name ) )\n", "title": "", "metadata": ""}
{"_id": "552117ff4c96a422694ac8548299ef82", "text": "def unzoom_all ( self , event = None ) : if len ( self . conf . zoom_lims ) > 0 : self . conf . zoom_lims = [ self . conf . zoom_lims [ 0 ] ] self . unzoom ( event )\n", "title": "", "metadata": ""}
{"_id": "abb334b0c863db6237d5401ef6c1adc7", "text": "def _drop_str_columns ( df ) : str_columns = filter ( lambda pair : pair [ 1 ] . char == 'S' , df . _gather_dtypes ( ) . items ( ) ) str_column_names = list ( map ( lambda pair : pair [ 0 ] , str_columns ) ) return df . drop ( str_column_names )\n", "title": "", "metadata": ""}
{"_id": "78e4eb3580295102a75e6f8f2a26285c", "text": "def is_same_shape ( self , other_im , check_channels = False ) : if self . height == other_im . height and self . width == other_im . width : if check_channels and self . channels != other_im . channels : return False return True return False\n", "title": "", "metadata": ""}
{"_id": "c9bb26997092d23aadd6ad8043723d6a", "text": "def _interval_to_bound_points ( array ) : array_boundaries = np . array ( [ x . left for x in array ] ) array_boundaries = np . concatenate ( ( array_boundaries , np . array ( [ array [ - 1 ] . right ] ) ) ) return array_boundaries\n", "title": "", "metadata": ""}
{"_id": "099ffbea9369159cdbae9c06e06efb34", "text": "def compute ( args ) : x , y , params = args return x , y , mandelbrot ( x , y , params )\n", "title": "", "metadata": ""}
{"_id": "6c7700eee89700e7ecae737446f9f6a6", "text": "def PythonPercentFormat ( format_str ) : if format_str . startswith ( 'printf ' ) : fmt = format_str [ len ( 'printf ' ) : ] return lambda value : fmt % value else : return None\n", "title": "", "metadata": ""}
{"_id": "d1fa835ea9ff74de61a8cbe95e17a78d", "text": "def _remove_duplicate_files ( xs ) : seen = set ( [ ] ) out = [ ] for x in xs : if x [ \"path\" ] not in seen : out . append ( x ) seen . add ( x [ \"path\" ] ) return out\n", "title": "", "metadata": ""}
{"_id": "3c176f9b5d98ef875e8908b85b5b36ec", "text": "def generate_hash ( filepath ) : fr = FileReader ( filepath ) data = fr . read_bin ( ) return _calculate_sha256 ( data )\n", "title": "", "metadata": ""}
{"_id": "6b09c1ac9d929498873fe5f8304d51c1", "text": "def flatten_list ( x : List [ Any ] ) -> List [ Any ] : # noqa return [ item for sublist in x for item in sublist ]\n", "title": "", "metadata": ""}
{"_id": "bf4d6b706a8d4500d43bff671eaf091a", "text": "def list_to_csv ( value ) : if isinstance ( value , ( list , tuple , set ) ) : value = \",\" . join ( value ) return value\n", "title": "", "metadata": ""}
{"_id": "6a2eec8deec015bd0d117de6c33db870", "text": "def file_length ( file_obj ) : file_obj . seek ( 0 , 2 ) length = file_obj . tell ( ) file_obj . seek ( 0 ) return length\n", "title": "", "metadata": ""}
{"_id": "0a7f852075b92b65191955b56f38d6f2", "text": "def _get_or_create_stack ( name ) : stack = getattr ( _LOCAL_STACKS , name , None ) if stack is None : stack = [ ] setattr ( _LOCAL_STACKS , name , stack ) return stack\n", "title": "", "metadata": ""}
{"_id": "abfe13ca33d8b6233f1db219518ee315", "text": "def assert_valid_name ( name : str ) -> str : error = is_valid_name_error ( name ) if error : raise error return name\n", "title": "", "metadata": ""}
{"_id": "8331ac0d3a9c6ff250b0263d48d30292", "text": "def save_pdf ( path ) : pp = PdfPages ( path ) pp . savefig ( pyplot . gcf ( ) ) pp . close ( )\n", "title": "", "metadata": ""}
{"_id": "57a75ca1f973536ba31e28b65161fa2d", "text": "def dot ( self , w ) : return sum ( [ x * y for x , y in zip ( self , w ) ] )\n", "title": "", "metadata": ""}
{"_id": "fccd20f597b9dc5f3fa01baa109ad0ef", "text": "def get ( self , queue_get ) : if isinstance ( queue_get , ( tuple , list ) ) : self . result . extend ( queue_get )\n", "title": "", "metadata": ""}
{"_id": "13a676c923af1ed158c9517f06333184", "text": "def flatten_multidict ( multidict ) : return dict ( [ ( key , value if len ( value ) > 1 else value [ 0 ] ) for ( key , value ) in multidict . iterlists ( ) ] )\n", "title": "", "metadata": ""}
{"_id": "eb64c7abbfc82bbfe28e4e3edad5069c", "text": "def getMedian ( numericValues ) : theValues = sorted ( numericValues ) if len ( theValues ) % 2 == 1 : return theValues [ ( len ( theValues ) + 1 ) / 2 - 1 ] else : lower = theValues [ len ( theValues ) / 2 - 1 ] upper = theValues [ len ( theValues ) / 2 ] return ( float ( lower + upper ) ) / 2\n", "title": "", "metadata": ""}
{"_id": "ea3516df193666e1f3390568677f5262", "text": "def get_timezone ( ) -> Tuple [ datetime . tzinfo , str ] : dt = get_datetime_now ( ) . astimezone ( ) tzstr = dt . strftime ( \"%z\" ) tzstr = tzstr [ : - 2 ] + \":\" + tzstr [ - 2 : ] return dt . tzinfo , tzstr\n", "title": "", "metadata": ""}
{"_id": "b35168afaa80a5468f8b057caeb4820e", "text": "def auto_update ( cls , function ) : def wrapper ( self , * args , * * kwargs ) : f = function ( self , * args , * * kwargs ) self . update ( ) return f return wrapper\n", "title": "", "metadata": ""}
{"_id": "5a5b2ec6d95a0895fea7f6380d3f7d3d", "text": "def parallel ( processes , threads ) : pool = multithread ( threads ) pool . map ( run_process , processes ) pool . close ( ) pool . join ( )\n", "title": "", "metadata": ""}
{"_id": "7d6ad5fc9e40239a0ec88c04e5f887b1", "text": "def cric__decision_tree ( ) : model = sklearn . tree . DecisionTreeClassifier ( random_state = 0 , max_depth = 4 ) # we want to explain the raw probability outputs of the trees model . predict = lambda X : model . predict_proba ( X ) [ : , 1 ] return model\n", "title": "", "metadata": ""}
{"_id": "731f6a2b71480b64d54528d29c22fe9c", "text": "def user_in_all_groups ( user , groups ) : return user_is_superuser ( user ) or all ( user_in_group ( user , group ) for group in groups )\n", "title": "", "metadata": ""}
{"_id": "36914e9745e1142901952347b5fa83ea", "text": "def GetIndentLevel ( line ) : indent = Match ( r'^( *)\\S' , line ) if indent : return len ( indent . group ( 1 ) ) else : return 0\n", "title": "", "metadata": ""}
{"_id": "8e90eaf142fa83b13f187d5f4801af38", "text": "def exp_fit_fun ( x , a , tau , c ) : # pylint: disable=invalid-name return a * np . exp ( - x / tau ) + c\n", "title": "", "metadata": ""}
{"_id": "b000d19c33257e7e73039e6ea807c776", "text": "def get_max ( qs , field ) : max_field = '%s__max' % field num = qs . aggregate ( Max ( field ) ) [ max_field ] return num if num else 0\n", "title": "", "metadata": ""}
{"_id": "c3690c8cfd00681c04c48ee21575b139", "text": "def update_dict ( obj , dict , attributes ) : for attribute in attributes : if hasattr ( obj , attribute ) and getattr ( obj , attribute ) is not None : dict [ attribute ] = getattr ( obj , attribute )\n", "title": "", "metadata": ""}
{"_id": "955d554fd1a77abb72cfdf69e6e6dfc3", "text": "def main ( ctx , connection ) : ctx . obj = Manager ( connection = connection ) ctx . obj . bind ( )\n", "title": "", "metadata": ""}
{"_id": "74686be8528c4dec0b078babec6b1081", "text": "def caller_locals ( ) : import inspect frame = inspect . currentframe ( ) try : return frame . f_back . f_back . f_locals finally : del frame\n", "title": "", "metadata": ""}
{"_id": "51991bdcddfef6a5a29f1184362bba41", "text": "def hash_iterable ( it ) : hash_value = hash ( type ( it ) ) for value in it : hash_value = hash ( ( hash_value , value ) ) return hash_value\n", "title": "", "metadata": ""}
{"_id": "72dc78de84f04ca858979e97516f6469", "text": "def format_exc ( * exc_info ) : typ , exc , tb = exc_info or sys . exc_info ( ) error = traceback . format_exception ( typ , exc , tb ) return \"\" . join ( error )\n", "title": "", "metadata": ""}
{"_id": "80e4c640961ab3740cda0e09325ae653", "text": "def get_window_dim ( ) : version = sys . version_info if version >= ( 3 , 3 ) : return _size_36 ( ) if platform . system ( ) == 'Windows' : return _size_windows ( ) return _size_27 ( )\n", "title": "", "metadata": ""}
{"_id": "5022b5c2029219cfa2b9ef7939ad5dbf", "text": "def fsliceafter ( astr , sub ) : findex = astr . find ( sub ) return astr [ findex + len ( sub ) : ]\n", "title": "", "metadata": ""}
{"_id": "2194d4fc5e376cf8cb1a79cdade92291", "text": "def process_kill ( pid , sig = None ) : sig = sig or signal . SIGTERM os . kill ( pid , sig )\n", "title": "", "metadata": ""}
{"_id": "752a02f426af1f4b96d67b89d33c02cf", "text": "def euclidean ( c1 , c2 ) : diffs = ( ( i - j ) for i , j in zip ( c1 , c2 ) ) return sum ( x * x for x in diffs )\n", "title": "", "metadata": ""}
{"_id": "7fdea58038392ecc3c64b2111ab5d9f9", "text": "def return_future ( fn ) : @ wraps ( fn ) def decorated ( * args , * * kwargs ) : return gen . maybe_future ( fn ( * args , * * kwargs ) ) return decorated\n", "title": "", "metadata": ""}
{"_id": "e7240a10942603fa82504ebe6491c93a", "text": "def gaussian_variogram_model ( m , d ) : psill = float ( m [ 0 ] ) range_ = float ( m [ 1 ] ) nugget = float ( m [ 2 ] ) return psill * ( 1. - np . exp ( - d ** 2. / ( range_ * 4. / 7. ) ** 2. ) ) + nugget\n", "title": "", "metadata": ""}
{"_id": "dcf2d97651b662281269362553fe381b", "text": "def SegmentMax ( a , ids ) : func = lambda idxs : np . amax ( a [ idxs ] , axis = 0 ) return seg_map ( func , a , ids ) ,\n", "title": "", "metadata": ""}
{"_id": "1e6feb9c0d81112cea1e8a8f04c4ac09", "text": "def cleanup_nodes ( doc ) : for node in doc . documentElement . childNodes : if node . nodeType == Node . TEXT_NODE and node . nodeValue . isspace ( ) : doc . documentElement . removeChild ( node ) return doc\n", "title": "", "metadata": ""}
{"_id": "6ec8f936a2d1c01348129616ecc3693f", "text": "def plot ( self ) : plt . plot ( self . bin_edges , self . hist , self . bin_edges , self . best_pdf )\n", "title": "", "metadata": ""}
{"_id": "770c589b3dd482907dd440157c5f1b0c", "text": "def send ( self , * args , * * kwargs ) : self . write ( * args , * * kwargs ) self . flush ( )\n", "title": "", "metadata": ""}
{"_id": "d82d00dc6bed58e010155a01c43bf4fc", "text": "def is_managed ( ) : for item in sys . argv : if re . search ( r'manage.py|django-admin|django' , item ) is not None : return True return False\n", "title": "", "metadata": ""}
{"_id": "8e5ca1c3fa76d17ac68890dbe89940ed", "text": "def close ( self ) : if self . db is not None : self . db . commit ( ) self . db . close ( ) self . db = None return\n", "title": "", "metadata": ""}
{"_id": "d1e130fd853c84fcbe20b11426054a74", "text": "def intround ( value ) : return int ( decimal . Decimal . from_float ( value ) . to_integral_value ( decimal . ROUND_HALF_EVEN ) )\n", "title": "", "metadata": ""}
{"_id": "ac850b3f6365ffab1f7db72eff84ccc5", "text": "def to_dicts ( recarray ) : for rec in recarray : yield dict ( zip ( recarray . dtype . names , rec . tolist ( ) ) )\n", "title": "", "metadata": ""}
{"_id": "ab1dd2946b85fee8c5c2faeef84122c8", "text": "def get_python ( ) : if sys . platform == 'win32' : python = path . join ( VE_ROOT , 'Scripts' , 'python.exe' ) else : python = path . join ( VE_ROOT , 'bin' , 'python' ) return python\n", "title": "", "metadata": ""}
{"_id": "d15a282796db44be29d8c9ad20ed4e87", "text": "def clone_with_copy ( src_path , dest_path ) : log . info ( 'Cloning directory tree %s to %s' , src_path , dest_path ) shutil . copytree ( src_path , dest_path )\n", "title": "", "metadata": ""}
{"_id": "b0efd1fd9d881f27f597cb3c777097bb", "text": "def connect ( ) : ftp_class = ftplib . FTP if not SSL else ftplib . FTP_TLS ftp = ftp_class ( timeout = TIMEOUT ) ftp . connect ( HOST , PORT ) ftp . login ( USER , PASSWORD ) if SSL : ftp . prot_p ( ) # secure data connection return ftp\n", "title": "", "metadata": ""}
{"_id": "86d38628457c7674affaf0f266c4d050", "text": "def snake_case ( a_string ) : partial = re . sub ( '(.)([A-Z][a-z]+)' , r'\\1_\\2' , a_string ) return re . sub ( '([a-z0-9])([A-Z])' , r'\\1_\\2' , partial ) . lower ( )\n", "title": "", "metadata": ""}
{"_id": "f48f7191de8195028b0b9df5caceeab1", "text": "def kill_mprocess ( process ) : if process and proc_alive ( process ) : process . terminate ( ) process . communicate ( ) return not proc_alive ( process )\n", "title": "", "metadata": ""}
{"_id": "c8991847dac0674e95724d482e045be4", "text": "def get_lons_from_cartesian ( x__ , y__ ) : return rad2deg ( arccos ( x__ / sqrt ( x__ ** 2 + y__ ** 2 ) ) ) * sign ( y__ )\n", "title": "", "metadata": ""}
{"_id": "dcb5cc15b61f48a5ccba3321561afee2", "text": "def closeEvent ( self , event ) : if self . closing ( True ) : event . accept ( ) else : event . ignore ( )\n", "title": "", "metadata": ""}
{"_id": "1fe43de4aafcd94a97db651d52be647e", "text": "def _flush ( self , buffer ) : container , obj = self . _client_args with _handle_client_exception ( ) : self . _client . put_object ( container , obj , buffer )\n", "title": "", "metadata": ""}
{"_id": "027fd4e4b7741621966f30cda9f25ef0", "text": "def check_empty_dict ( GET_dict ) : empty = True for k , v in GET_dict . items ( ) : # Don't disable on p(age) or 'all' GET param if v and k != 'p' and k != 'all' : empty = False return empty\n", "title": "", "metadata": ""}
{"_id": "3e46fd5746fe7ad066f7096cedf5b9f0", "text": "def _listify ( collection ) : new_list = [ ] for index in range ( len ( collection ) ) : new_list . append ( collection [ index ] ) return new_list\n", "title": "", "metadata": ""}
{"_id": "5f67e79d4031e54198ec49ff53c8055d", "text": "def vectorize ( values ) : if isinstance ( values , list ) : return ',' . join ( str ( v ) for v in values ) return values\n", "title": "", "metadata": ""}
{"_id": "022f3ff9726887fba4eb828f5a6f6b2c", "text": "def load_library ( version ) : check_version ( version ) module_name = SUPPORTED_LIBRARIES [ version ] lib = sys . modules . get ( module_name ) if lib is None : lib = importlib . import_module ( module_name ) return lib\n", "title": "", "metadata": ""}
{"_id": "a6fd4c292250a5666cb9d462cbaa090c", "text": "def s3 ( ctx , bucket_name , data_file , region ) : if not ctx . data_file : ctx . data_file = data_file if not ctx . bucket_name : ctx . bucket_name = bucket_name if not ctx . region : ctx . region = region ctx . type = 's3'\n", "title": "", "metadata": ""}
{"_id": "19d3e7a2bb84a57b35c91b9cd377968b", "text": "def cumsum ( inlist ) : newlist = copy . deepcopy ( inlist ) for i in range ( 1 , len ( newlist ) ) : newlist [ i ] = newlist [ i ] + newlist [ i - 1 ] return newlist\n", "title": "", "metadata": ""}
{"_id": "6958318af9cc785cce50ba2313a3ea57", "text": "def _possibly_convert_objects ( values ) : return np . asarray ( pd . Series ( values . ravel ( ) ) ) . reshape ( values . shape )\n", "title": "", "metadata": ""}
{"_id": "438801c247314f2a8020f95fd77716bf", "text": "def help_for_command ( command ) : help_text = pydoc . text . document ( command ) # remove backspaces return re . subn ( '.\\\\x08' , '' , help_text ) [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "664633d019f6eb9b79974eef42e7f951", "text": "def get_table_names ( connection ) : cursor = connection . cursor ( ) cursor . execute ( \"SELECT name FROM sqlite_master WHERE type == 'table'\" ) return [ name for ( name , ) in cursor ]\n", "title": "", "metadata": ""}
{"_id": "290097c5f01ddfae32328b3cb865e107", "text": "def get_days_in_month ( year : int , month : int ) -> int : month_range = calendar . monthrange ( year , month ) return month_range [ 1 ]\n", "title": "", "metadata": ""}
{"_id": "1611950b32114554ac6ed9c621c93a13", "text": "def commits_with_message ( message ) : output = log ( \"--grep '%s'\" % message , oneline = True , quiet = True ) lines = output . splitlines ( ) return [ l . split ( ' ' , 1 ) [ 0 ] for l in lines ]\n", "title": "", "metadata": ""}
{"_id": "d15357c55210bee4d06d7640325e91d0", "text": "def _most_common ( iterable ) : data = Counter ( iterable ) return max ( data , key = data . __getitem__ )\n", "title": "", "metadata": ""}
{"_id": "5f8c504916159b7d8ae26ee8e3a9b0c0", "text": "def is_line_in_file ( filename : str , line : str ) -> bool : assert \"\\n\" not in line with open ( filename , \"r\" ) as file : for fileline in file : if fileline == line : return True return False\n", "title": "", "metadata": ""}
{"_id": "dbfc63b68e8e041add18cff1696019c4", "text": "def on_pause ( self ) : self . engine . commit ( ) self . strings . save ( ) self . funcs . save ( ) self . config . write ( )\n", "title": "", "metadata": ""}
{"_id": "0d5b316aa45c5ccd42321bad4d927a33", "text": "def set_context ( self , data ) : for key in data : setattr ( self . local_context , key , data [ key ] )\n", "title": "", "metadata": ""}
{"_id": "7f978d7fb53f34c6f82a4c2ea9ed24c4", "text": "def restore_image_options ( cli , image , options ) : dockerfile = io . StringIO ( ) dockerfile . write ( u'FROM {image}\\nCMD {cmd}' . format ( image = image , cmd = json . dumps ( options [ 'cmd' ] ) ) ) if options [ 'entrypoint' ] : dockerfile . write ( '\\nENTRYPOINT {}' . format ( json . dumps ( options [ 'entrypoint' ] ) ) ) cli . build ( tag = image , fileobj = dockerfile )\n", "title": "", "metadata": ""}
{"_id": "1e8d723164ee38c6afa93a940be84ea6", "text": "def quit ( self ) : logger . debug ( \"ArgosApplication.quit called\" ) assert len ( self . mainWindows ) == 0 , \"Bug: still {} windows present at application quit!\" . format ( len ( self . mainWindows ) ) self . qApplication . quit ( )\n", "title": "", "metadata": ""}
{"_id": "fd2220c779e07dcec8fb465847016764", "text": "def __getitem__ ( self , index ) : row , col = index return self . rows [ row ] [ col ]\n", "title": "", "metadata": ""}
{"_id": "cb32c9f70985e9b959c6535586b115df", "text": "def other_ind ( self ) : return np . full ( self . n_min , self . size - 1 , dtype = np . int )\n", "title": "", "metadata": ""}
{"_id": "fbe288ef426bd377ba9b0ba338b964da", "text": "def objectcount ( data , key ) : objkey = key . upper ( ) return len ( data . dt [ objkey ] )\n", "title": "", "metadata": ""}
{"_id": "e1011bffd4ad989142be786fa4ea2987", "text": "def parse_command_args ( ) : parser = argparse . ArgumentParser ( description = 'Register PB devices.' ) parser . add_argument ( 'num_pb' , type = int , help = 'Number of PBs devices to register.' ) return parser . parse_args ( )\n", "title": "", "metadata": ""}
{"_id": "a700922f2e73623b2c1836a3257a503b", "text": "def _find_first_of ( line , substrings ) : starts = ( ( line . find ( i ) , i ) for i in substrings ) found = [ ( i , sub ) for i , sub in starts if i != - 1 ] if found : return min ( found ) else : return - 1 , None\n", "title": "", "metadata": ""}
{"_id": "23eb7cee62d044b3b0c539795546f941", "text": "def getTuple ( self ) : return ( self . x , self . y , self . w , self . h )\n", "title": "", "metadata": ""}
{"_id": "b83dee2fee24213bfaf51f0c6bf2b1ca", "text": "def dict_pop_or ( d , key , default = None ) : val = default with suppress ( KeyError ) : val = d . pop ( key ) return val\n", "title": "", "metadata": ""}
{"_id": "edc08af1134e86e7640100bd2810eb7e", "text": "def is_integer ( obj ) : if PYTHON3 : return isinstance ( obj , int ) return isinstance ( obj , ( int , long ) )\n", "title": "", "metadata": ""}
{"_id": "221f166fa4e8abe2e96986cd9f921faa", "text": "def accel_next ( self , * args ) : if self . get_notebook ( ) . get_current_page ( ) + 1 == self . get_notebook ( ) . get_n_pages ( ) : self . get_notebook ( ) . set_current_page ( 0 ) else : self . get_notebook ( ) . next_page ( ) return True\n", "title": "", "metadata": ""}
{"_id": "26c223a9dbc366a5a86b39ca185c59d4", "text": "def remove_last_entry ( self ) : self . current_beat -= 1.0 / self . bar [ - 1 ] [ 1 ] self . bar = self . bar [ : - 1 ] return self . current_beat\n", "title": "", "metadata": ""}
{"_id": "6ea3240224bfa9f182824f173c7b4e5b", "text": "def wipe_table ( self , table : str ) -> int : sql = \"DELETE FROM \" + self . delimit ( table ) return self . db_exec ( sql )\n", "title": "", "metadata": ""}
{"_id": "bf1d971506a43f4a68c3ce270a23ce6d", "text": "def uncomment_line ( line , prefix ) : if not prefix : return line if line . startswith ( prefix + ' ' ) : return line [ len ( prefix ) + 1 : ] if line . startswith ( prefix ) : return line [ len ( prefix ) : ] return line\n", "title": "", "metadata": ""}
{"_id": "a2c55268514eb98766abe95e290c96a4", "text": "def finish_plot ( ) : plt . legend ( ) plt . grid ( color = '0.7' ) plt . xlabel ( 'x' ) plt . ylabel ( 'y' ) plt . show ( )\n", "title": "", "metadata": ""}
{"_id": "a7941ee9608dbf02fc4617c3a6466e20", "text": "def sanitize_word ( s ) : s = re . sub ( '[^\\w-]+' , '_' , s ) s = re . sub ( '__+' , '_' , s ) return s . strip ( '_' )\n", "title": "", "metadata": ""}
{"_id": "7c2b4079bd9d91345c02c39430709d19", "text": "def terminate ( self ) : # Tear down the Pailgun TCPServer. if self . pailgun : self . pailgun . server_close ( ) super ( PailgunService , self ) . terminate ( )\n", "title": "", "metadata": ""}
{"_id": "efb4387d6d92bd1428964be55a9c70f6", "text": "def items ( self , limit = 0 ) : i = ItemIterator ( self . iterator ) i . limit = limit return i\n", "title": "", "metadata": ""}
{"_id": "ab1cad0d46e961896ff1ee7d975067f1", "text": "def split ( text : str ) -> List [ str ] : return [ word for word in SEPARATOR . split ( text ) if word . strip ( ' \\t' ) ]\n", "title": "", "metadata": ""}
{"_id": "11c07e1007c98c8cfd5f1d44449ab8de", "text": "def strip_html ( string , keep_tag_content = False ) : r = HTML_TAG_ONLY_RE if keep_tag_content else HTML_RE return r . sub ( '' , string )\n", "title": "", "metadata": ""}
{"_id": "48c8e791ce563a1311c660156a6b1269", "text": "def sort_by_name ( self ) : super ( JSSObjectList , self ) . sort ( key = lambda k : k . name )\n", "title": "", "metadata": ""}
{"_id": "288cbbf8aff9a45d1c87dab205498f17", "text": "def Proxy ( f ) : def Wrapped ( self , * args ) : return getattr ( self , f ) ( * args ) return Wrapped\n", "title": "", "metadata": ""}
{"_id": "95c0030bb030329b8165cc79004a164d", "text": "def objectproxy_realaddress ( obj ) : voidp = QROOT . TPython . ObjectProxy_AsVoidPtr ( obj ) return C . addressof ( C . c_char . from_buffer ( voidp ) )\n", "title": "", "metadata": ""}
{"_id": "d63f4b0504902e00d165e181a9f589b3", "text": "def get_file_name ( url ) : return os . path . basename ( urllib . parse . urlparse ( url ) . path ) or 'unknown_name'\n", "title": "", "metadata": ""}
{"_id": "72a0323299712f448f0eb696fafe0dff", "text": "def dedupe ( items ) : seen = set ( ) for item in items : if item not in seen : yield item seen . add ( item )\n", "title": "", "metadata": ""}
{"_id": "d506b80f1ff2ddeac8ccabdc6ca1ff1c", "text": "def to_distribution_values ( self , values ) : with warnings . catch_warnings ( ) : warnings . simplefilter ( \"ignore\" ) # avoid RuntimeWarning: divide by zero encountered in log return numpy . log ( values )\n", "title": "", "metadata": ""}
{"_id": "bdcd340f33508397e210328de99257c0", "text": "def fn_min ( self , a , axis = None ) : return numpy . nanmin ( self . _to_ndarray ( a ) , axis = axis )\n", "title": "", "metadata": ""}
{"_id": "9b57a72f919ea4951c4887b346a660b7", "text": "def loadb ( b ) : assert isinstance ( b , ( bytes , bytearray ) ) return std_json . loads ( b . decode ( 'utf-8' ) )\n", "title": "", "metadata": ""}
{"_id": "5c29a53c82379e5ff57971ead71ce5db", "text": "def _cumprod ( l ) : ret = [ 1 ] for item in l : ret . append ( ret [ - 1 ] * item ) return ret\n", "title": "", "metadata": ""}
{"_id": "50c4ea9c954ca0c3783ecf0a2831019f", "text": "def restart ( self , reset = False ) : # Get start path to use in restart script  spyder_start_directory = get_module_path ( 'spyder' ) restart_script = osp . join ( spyder_start_directory , 'app' , 'restart.py' ) # Get any initial argument passed when spyder was started  # Note: Variables defined in bootstrap.py and spyder/app/start.py  env = os . environ . copy ( ) bootstrap_args = env . pop ( 'SPYDER_BOOTSTRAP_ARGS' , None ) spyder_args = env . pop ( 'SPYDER_ARGS' ) # Get current process and python running spyder  pid = os . getpid ( ) python = sys . executable # Check if started with bootstrap.py  if bootstrap_args is not None : spyder_args = bootstrap_args is_bootstrap = True else : is_bootstrap = False # Pass variables as environment variables (str) to restarter subprocess  env [ 'SPYDER_ARGS' ] = spyder_args env [ 'SPYDER_PID' ] = str ( pid ) env [ 'SPYDER_IS_BOOTSTRAP' ] = str ( is_bootstrap ) env [ 'SPYDER_RESET' ] = str ( reset ) if DEV : if os . name == 'nt' : env [ 'PYTHONPATH' ] = ';' . join ( sys . path ) else : env [ 'PYTHONPATH' ] = ':' . join ( sys . path ) # Build the command and popen arguments depending on the OS  if os . name == 'nt' : # Hide flashing command prompt  startupinfo = subprocess . STARTUPINFO ( ) startupinfo . dwFlags |= subprocess . STARTF_USESHOWWINDOW shell = False else : startupinfo = None shell = True command = '\"{0}\" \"{1}\"' command = command . format ( python , restart_script ) try : if self . closing ( True ) : subprocess . Popen ( command , shell = shell , env = env , startupinfo = startupinfo ) self . console . quit ( ) except Exception as error : # If there is an error with subprocess, Spyder should not quit and  # the error can be inspected in the internal console  print ( error ) # spyder: test-skip  print ( command )\n", "title": "", "metadata": ""}
{"_id": "772641edb4f72ac3d4691340e62564cf", "text": "def get_property ( self ) : scope = self def fget ( self ) : \"\"\"Call the HasProperties _get method\"\"\" return self . _get ( scope . name ) return property ( fget = fget , doc = scope . sphinx ( ) )\n", "title": "", "metadata": ""}
{"_id": "9600827953388591c076dd064b3aba0c", "text": "def next ( self ) : # I'm pretty sure this is the completely wrong way to go about this, but # oh well, this works. if not hasattr ( self , '_iter' ) : self . _iter = self . readrow_as_dict ( ) return self . _iter . next ( )\n", "title": "", "metadata": ""}
{"_id": "f227a3cc2c04a8a51f18fc37fc489094", "text": "def to_bytes ( self ) : chunks = [ PNG_SIGN ] chunks . extend ( c [ 1 ] for c in self . chunks ) return b\"\" . join ( chunks )\n", "title": "", "metadata": ""}
{"_id": "64a399d56ec75c6dd0421ec2e9f7b844", "text": "def issorted ( list_ , op = operator . le ) : return all ( op ( list_ [ ix ] , list_ [ ix + 1 ] ) for ix in range ( len ( list_ ) - 1 ) )\n", "title": "", "metadata": ""}
{"_id": "a02a5f10e6a1ee04d17e107ff9d9baa7", "text": "def _help ( ) : statement = '%s%s' % ( shelp , phelp % ', ' . join ( cntx_ . keys ( ) ) ) print statement . strip ( )\n", "title": "", "metadata": ""}
{"_id": "678f1b81ef57bfc5ba887bdf0f051e3d", "text": "def relative_path ( path ) : return os . path . join ( os . path . dirname ( __file__ ) , path )\n", "title": "", "metadata": ""}
{"_id": "06370709249ef3b641aedda482c42bef", "text": "def is_enum_type ( type_ ) : return isinstance ( type_ , type ) and issubclass ( type_ , tuple ( _get_types ( Types . ENUM ) ) )\n", "title": "", "metadata": ""}
{"_id": "96c88bc7323c18d5166985e8c36b3fdd", "text": "def get_tweepy_auth ( twitter_api_key , twitter_api_secret , twitter_access_token , twitter_access_token_secret ) : auth = tweepy . OAuthHandler ( twitter_api_key , twitter_api_secret ) auth . set_access_token ( twitter_access_token , twitter_access_token_secret ) return auth\n", "title": "", "metadata": ""}
{"_id": "e999978964b90603a87b83178a1d588e", "text": "def column_stack_2d ( data ) : return list ( list ( itt . chain . from_iterable ( _ ) ) for _ in zip ( * data ) )\n", "title": "", "metadata": ""}
{"_id": "bf654c144f03c3e0e0353503dfd0326a", "text": "def make_kind_check ( python_types , numpy_kind ) : def check ( value ) : if hasattr ( value , 'dtype' ) : return value . dtype . kind == numpy_kind return isinstance ( value , python_types ) return check\n", "title": "", "metadata": ""}
{"_id": "4c89f39e1b916785393b89b1f42c4325", "text": "def print_display_png ( o ) : s = latex ( o , mode = 'plain' ) s = s . strip ( '$' ) # As matplotlib does not support display style, dvipng backend is # used here. png = latex_to_png ( '$$%s$$' % s , backend = 'dvipng' ) return png\n", "title": "", "metadata": ""}
{"_id": "91fcff7bfee715d2a178cabf886a9dce", "text": "def once ( func ) : lock = threading . Lock ( ) def new_func ( * args , * * kwargs ) : if new_func . called : return with lock : if new_func . called : return rv = func ( * args , * * kwargs ) new_func . called = True return rv new_func = update_wrapper ( new_func , func ) new_func . called = False return new_func\n", "title": "", "metadata": ""}
{"_id": "60cc7a34359b44e5212225986f36d7ef", "text": "def start_of_month ( val ) : if type ( val ) == date : val = datetime . fromordinal ( val . toordinal ( ) ) return start_of_day ( val ) . replace ( day = 1 )\n", "title": "", "metadata": ""}
{"_id": "d3740e02114d42e4e22b4dd00f23c549", "text": "def extract_module_locals ( depth = 0 ) : f = sys . _getframe ( depth + 1 ) global_ns = f . f_globals module = sys . modules [ global_ns [ '__name__' ] ] return ( module , f . f_locals )\n", "title": "", "metadata": ""}
{"_id": "b88a45f5cfea80b6a5393d98e50e169b", "text": "def _close ( self ) : if self . connection : with self . wrap_database_errors : self . connection . client . close ( )\n", "title": "", "metadata": ""}
{"_id": "ed4a796d02e84b1d14653c4e93afe1a1", "text": "def del_Unnamed ( df ) : cols_del = [ c for c in df . columns if 'Unnamed' in c ] return df . drop ( cols_del , axis = 1 )\n", "title": "", "metadata": ""}
{"_id": "8d71c51bc68a9ec39190089f7c1b19fb", "text": "def url_encode ( url ) : if isinstance ( url , text_type ) : url = url . encode ( 'utf8' ) return quote ( url , ':/%?&=' )\n", "title": "", "metadata": ""}
{"_id": "fa1fc6c05191fd781d776b832344543d", "text": "def start ( args ) : application = tornado . web . Application ( [ ( r\"/run\" , run . get_handler ( args ) ) , ( r\"/status\" , run . StatusHandler ) ] ) application . runmonitor = RunMonitor ( ) application . listen ( args . port ) tornado . ioloop . IOLoop . instance ( ) . start ( )\n", "title": "", "metadata": ""}
{"_id": "75de5d3d6533015636c87c14f0c5ed5a", "text": "def random_str ( size = 10 ) : return '' . join ( random . choice ( string . ascii_lowercase ) for _ in range ( size ) )\n", "title": "", "metadata": ""}
{"_id": "3114f649f8bba8fce468229369f9e6f9", "text": "def init_db ( ) : db . drop_all ( ) db . configure_mappers ( ) db . create_all ( ) db . session . commit ( )\n", "title": "", "metadata": ""}
{"_id": "ced4b4ecd4e52afbf887bd77a27ff75f", "text": "def tanimoto_set_similarity ( x : Iterable [ X ] , y : Iterable [ X ] ) -> float : a , b = set ( x ) , set ( y ) union = a | b if not union : return 0.0 return len ( a & b ) / len ( union )\n", "title": "", "metadata": ""}
{"_id": "d677b6749f5bbde780096942753bda9e", "text": "def _get_env ( self , env_var ) : value = os . environ . get ( env_var ) if not value : raise ValueError ( 'Missing environment variable:%s' % env_var ) return value\n", "title": "", "metadata": ""}
{"_id": "ca8bdebe822da6bd1f60bb5ade9be399", "text": "def _process_legend ( self ) : for l in self . handles [ 'plot' ] . legend : l . items [ : ] = [ ] l . border_line_alpha = 0 l . background_fill_alpha = 0\n", "title": "", "metadata": ""}
{"_id": "e28213f19c77b097a8e7430c459d8a11", "text": "def code ( self ) : return compile ( self . source ( ) , self . full_path , 'exec' , flags = 0 , dont_inherit = True )\n", "title": "", "metadata": ""}
{"_id": "8766c348341891a29ce2283a8784df8b", "text": "def debug_src ( src , pm = False , globs = None ) : testsrc = script_from_examples ( src ) debug_script ( testsrc , pm , globs )\n", "title": "", "metadata": ""}
{"_id": "0c683c5b57659d760ec80b066135de70", "text": "def clean_py_files ( path ) : for dirname , subdirlist , filelist in os . walk ( path ) : for f in filelist : if f . endswith ( 'py' ) : os . remove ( os . path . join ( dirname , f ) )\n", "title": "", "metadata": ""}
{"_id": "d2a5b5f65b9f78e161ffcfd06560ddbd", "text": "def _add_line_segment ( self , x , y ) : self . _drawing_operations . append ( _LineSegment . new ( self , x , y ) )\n", "title": "", "metadata": ""}
{"_id": "2d0a5b34674fe8bea70664bba1e98478", "text": "def clear ( self ) : # Erase current output first. self . erase ( ) # Send \"Erase Screen\" command and go to (0, 0). output = self . output output . erase_screen ( ) output . cursor_goto ( 0 , 0 ) output . flush ( ) self . request_absolute_cursor_position ( )\n", "title": "", "metadata": ""}
{"_id": "f85c0f590bfe8df4427eefe22952af57", "text": "def read_numpy ( fd , byte_order , dtype , count ) : return numpy . fromfile ( fd , byte_order + dtype [ - 1 ] , count )\n", "title": "", "metadata": ""}
{"_id": "7abe291d21165c28b9498c19d6b009a6", "text": "def AmericanDateToEpoch ( self , date_str ) : try : epoch = time . strptime ( date_str , \"%m/%d/%Y\" ) return int ( calendar . timegm ( epoch ) ) * 1000000 except ValueError : return 0\n", "title": "", "metadata": ""}
{"_id": "40522a220df3958594237f01fe537727", "text": "def get_tokens ( line : str ) -> Iterator [ str ] : for token in line . rstrip ( ) . split ( ) : if len ( token ) > 0 : yield token\n", "title": "", "metadata": ""}
{"_id": "388391567a33d98a12dcd304367d2939", "text": "def GetPythonLibraryDirectoryPath ( ) : path = sysconfig . get_python_lib ( True ) _ , _ , path = path . rpartition ( sysconfig . PREFIX ) if path . startswith ( os . sep ) : path = path [ 1 : ] return path\n", "title": "", "metadata": ""}
{"_id": "8b2d97497fc7a3f4ce39e05097064d4f", "text": "def mock_decorator ( * args , * * kwargs ) : def _called_decorator ( dec_func ) : @ wraps ( dec_func ) def _decorator ( * args , * * kwargs ) : return dec_func ( ) return _decorator return _called_decorator\n", "title": "", "metadata": ""}
{"_id": "490a7730435b0cf25bb293fab6ad08bf", "text": "def last_modified_date ( filename ) : mtime = os . path . getmtime ( filename ) dt = datetime . datetime . utcfromtimestamp ( mtime ) return dt . replace ( tzinfo = pytz . utc )\n", "title": "", "metadata": ""}
{"_id": "c3e6fc98aa8f4740fa68d604a785f7fc", "text": "def getSystemVariable ( self , remote , name ) : if self . _server is not None : return self . _server . getSystemVariable ( remote , name )\n", "title": "", "metadata": ""}
{"_id": "091dc4c54cc0029aeb91aeb5fe969b40", "text": "def copy ( obj ) : def copy ( self ) : \"\"\"         Copy self to a new object.         \"\"\" from copy import deepcopy return deepcopy ( self ) obj . copy = copy return obj\n", "title": "", "metadata": ""}
{"_id": "36798bef49b85bf5538518b0042821e6", "text": "def load_yaml ( filepath ) : with open ( filepath ) as f : txt = f . read ( ) return yaml . load ( txt )\n", "title": "", "metadata": ""}
{"_id": "bf1761a7a6861756ca216e693a302615", "text": "def eintr_retry ( exc_type , f , * args , * * kwargs ) : while True : try : return f ( * args , * * kwargs ) except exc_type as exc : if exc . errno != EINTR : raise else : break\n", "title": "", "metadata": ""}
{"_id": "5d41b973743bb26be521a8fe9fd0807b", "text": "def setdefaults ( dct , defaults ) : for key in defaults : dct . setdefault ( key , defaults [ key ] ) return dct\n", "title": "", "metadata": ""}
{"_id": "8f68a716b77dffcad8e06f3a917feff0", "text": "def set_xlimits ( self , min = None , max = None ) : self . limits [ 'xmin' ] = min self . limits [ 'xmax' ] = max\n", "title": "", "metadata": ""}
{"_id": "0b0bb6f0682bc05a56ad07c4556b9d50", "text": "def valid_file ( path : str ) -> bool : path = Path ( path ) . expanduser ( ) log . debug ( \"checking if %s is a valid file\" , path ) return path . exists ( ) and path . is_file ( )\n", "title": "", "metadata": ""}
{"_id": "367f16769e61cbf4aa4bec557df5b7a8", "text": "def sort_fn_list ( fn_list ) : dt_list = get_dt_list ( fn_list ) fn_list_sort = [ fn for ( dt , fn ) in sorted ( zip ( dt_list , fn_list ) ) ] return fn_list_sort\n", "title": "", "metadata": ""}
{"_id": "9baebd2edf7ff99ab7dc2871f1f17c83", "text": "def __init__ ( self , capacity = 10 ) : super ( ) . __init__ ( ) self . _array = [ None ] * capacity self . _front = 0 self . _rear = 0\n", "title": "", "metadata": ""}
{"_id": "5b530ffe561c4d747ce9065d4af734cd", "text": "def parse_domain ( url ) : domain_match = lib . DOMAIN_REGEX . match ( url ) if domain_match : return domain_match . group ( )\n", "title": "", "metadata": ""}
{"_id": "caef5b01cb5749fff43ac27a2ce20424", "text": "def callPlaybook ( self , playbook , ansibleArgs , wait = True , tags = [ \"all\" ] ) : playbook = os . path . join ( self . playbooks , playbook ) # Path to playbook being executed verbosity = \"-vvvvv\" if logger . isEnabledFor ( logging . DEBUG ) else \"-v\" command = [ \"ansible-playbook\" , verbosity , \"--tags\" , \",\" . join ( tags ) , \"--extra-vars\" ] command . append ( \" \" . join ( [ \"=\" . join ( i ) for i in ansibleArgs . items ( ) ] ) ) # Arguments being passed to playbook command . append ( playbook ) logger . debug ( \"Executing Ansible call `%s`\" , \" \" . join ( command ) ) p = subprocess . Popen ( command ) if wait : p . communicate ( ) if p . returncode != 0 : # FIXME: parse error codes raise RuntimeError ( \"Ansible reported an error when executing playbook %s\" % playbook )\n", "title": "", "metadata": ""}
{"_id": "6479435747f127d2156a96571337828c", "text": "def url ( viewname , * args , * * kwargs ) : return reverse ( viewname , args = args , kwargs = kwargs )\n", "title": "", "metadata": ""}
{"_id": "e83abb1ea73886536244a4cbe89066d4", "text": "def POINTER ( obj ) : p = ctypes . POINTER ( obj ) if not isinstance ( p . from_param , classmethod ) : def from_param ( cls , x ) : if x is None : return cls ( ) else : return x p . from_param = classmethod ( from_param ) return p\n", "title": "", "metadata": ""}
{"_id": "afe1856d95ba80b99ea83c12a497c112", "text": "def assert_single_element ( iterable ) : it = iter ( iterable ) first_item = next ( it ) try : next ( it ) except StopIteration : return first_item raise ValueError ( \"iterable {!r} has more than one element.\" . format ( iterable ) )\n", "title": "", "metadata": ""}
{"_id": "db40bca278d564924e8fb4eb3f655270", "text": "def extract_keywords_from_text ( self , text ) : sentences = nltk . tokenize . sent_tokenize ( text ) self . extract_keywords_from_sentences ( sentences )\n", "title": "", "metadata": ""}
{"_id": "ccceac71ed5b4456bb10516787532893", "text": "def memory ( ) : mem_info = dict ( ) for k , v in psutil . virtual_memory ( ) . _asdict ( ) . items ( ) : mem_info [ k ] = int ( v ) return mem_info\n", "title": "", "metadata": ""}
{"_id": "290af6bd58c761bcd4a109d6f777e7d5", "text": "def str2bytes ( x ) : if type ( x ) is bytes : return x elif type ( x ) is str : return bytes ( [ ord ( i ) for i in x ] ) else : return str2bytes ( str ( x ) )\n", "title": "", "metadata": ""}
{"_id": "2839818e3c0a1245f584b7c1b0f8125c", "text": "def FindMethodByName ( self , name ) : for method in self . methods : if name == method . name : return method return None\n", "title": "", "metadata": ""}
{"_id": "2a2b3b4cb1ff0d59d49427ec41219d51", "text": "def get_base_dir ( ) : return os . path . split ( os . path . abspath ( os . path . dirname ( __file__ ) ) ) [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "99777240dea2ae0af07dc83ab59038be", "text": "def reduce_fn ( x ) : values = x . values if pd and isinstance ( x , pd . Series ) else x for v in values : if not is_nan ( v ) : return v return np . NaN\n", "title": "", "metadata": ""}
{"_id": "e663db5c63e77e927062f7c3ab18b397", "text": "def createdb ( ) : manager . db . engine . echo = True manager . db . create_all ( ) set_alembic_revision ( )\n", "title": "", "metadata": ""}
{"_id": "358150313d3259e6132e1bf9138fac20", "text": "def check_create_folder ( filename ) : os . makedirs ( os . path . dirname ( filename ) , exist_ok = True )\n", "title": "", "metadata": ""}
{"_id": "3cb172008e4d9eaebfd8dc895e41aacb", "text": "def strip_spaces ( s ) : return u\" \" . join ( [ c for c in s . split ( u' ' ) if c ] )\n", "title": "", "metadata": ""}
{"_id": "a2fce6b9ce44cee4e75eff1dedb8dab4", "text": "def check_precomputed_distance_matrix ( X ) : tmp = X . copy ( ) tmp [ np . isinf ( tmp ) ] = 1 check_array ( tmp )\n", "title": "", "metadata": ""}
{"_id": "08f9681da3692402baed59c7dc475e6b", "text": "def flat ( l ) : newl = [ ] for i in range ( len ( l ) ) : for j in range ( len ( l [ i ] ) ) : newl . append ( l [ i ] [ j ] ) return newl\n", "title": "", "metadata": ""}
{"_id": "94358194ee1e20c3db6ff15a44f66023", "text": "def add_plot ( x , y , xl , yl , fig , ax , LATEX = False , linestyle = None , * * kwargs ) : if LATEX : xl_data = xl [ 1 ] # NOQA yl_data = yl [ 1 ] else : xl_data = xl [ 0 ] # NOQA yl_data = yl [ 0 ] for idx in range ( len ( y ) ) : ax . plot ( x , y [ idx ] , label = yl_data [ idx ] , linestyle = linestyle ) ax . legend ( loc = 'upper right' ) ax . set_ylim ( auto = True )\n", "title": "", "metadata": ""}
{"_id": "d92aeffb055bd66c6ae50b185a7b5980", "text": "def checkbox_uncheck ( self , force_check = False ) : if self . get_attribute ( 'checked' ) : self . click ( force_click = force_check )\n", "title": "", "metadata": ""}
{"_id": "47e13956228c3d9f658f8af5e0ea3d2d", "text": "def getPiLambert ( n ) : mypi = piGenLambert ( ) result = [ ] if n > 0 : result += [ next ( mypi ) for i in range ( n ) ] mypi . close ( ) return result\n", "title": "", "metadata": ""}
{"_id": "440323ea82701dcfb74baf43f7c033e1", "text": "def EnumValueName ( self , enum , value ) : return self . enum_types_by_name [ enum ] . values_by_number [ value ] . name\n", "title": "", "metadata": ""}
{"_id": "0382aba9a780e23353b217b1bf171e9c", "text": "def parse_text_to_dict ( self , txt ) : op = { } print ( 'TODO - import NLP, split into verbs / nouns' ) op [ 'nouns' ] = txt op [ 'verbs' ] = txt return op\n", "title": "", "metadata": ""}
{"_id": "4e8e479946f2e86b2787b2dc09b4fa19", "text": "def setup_cache ( app : Flask , cache_config ) -> Optional [ Cache ] : if cache_config and cache_config . get ( 'CACHE_TYPE' ) != 'null' : return Cache ( app , config = cache_config ) return None\n", "title": "", "metadata": ""}
{"_id": "c71eb3a5d1e5b8b412574a2232097930", "text": "def _rotate ( n , x , y , rx , ry ) : if ry == 0 : if rx == 1 : x = n - 1 - x y = n - 1 - y return y , x return x , y\n", "title": "", "metadata": ""}
{"_id": "98993733f7913738848f5f108aaadeec", "text": "def segment_intersection ( start0 , end0 , start1 , end1 ) : delta0 = end0 - start0 delta1 = end1 - start1 cross_d0_d1 = _helpers . cross_product ( delta0 , delta1 ) if cross_d0_d1 == 0.0 : return None , None , False else : start_delta = start1 - start0 s = _helpers . cross_product ( start_delta , delta1 ) / cross_d0_d1 t = _helpers . cross_product ( start_delta , delta0 ) / cross_d0_d1 return s , t , True\n", "title": "", "metadata": ""}
{"_id": "0986cd802678e43762ad5bff5aca30e6", "text": "def update_scale ( self , value ) : self . plotter . set_scale ( self . x_slider_group . value , self . y_slider_group . value , self . z_slider_group . value )\n", "title": "", "metadata": ""}
{"_id": "04cc7df0fc7d077465ad246b933fe721", "text": "def load_parameters ( self , source ) : with open ( source ) as parameters_source : return json . loads ( parameters_source . read ( ) )\n", "title": "", "metadata": ""}
{"_id": "1b19197971ad8e6bcc597b9a0b1c32c9", "text": "def tick ( self ) : self . current += 1 if self . current == self . factor : sys . stdout . write ( '+' ) sys . stdout . flush ( ) self . current = 0\n", "title": "", "metadata": ""}
{"_id": "af655a41e7e6ad7152b31dda36db65d7", "text": "def is_file ( path ) : try : return path . expanduser ( ) . absolute ( ) . is_file ( ) except AttributeError : return os . path . isfile ( os . path . abspath ( os . path . expanduser ( str ( path ) ) ) )\n", "title": "", "metadata": ""}
{"_id": "35c1d467c0ca8b698bd69c4ba95f6fc2", "text": "def convert_value ( bind , value ) : type_name = get_type ( bind ) try : return typecast . cast ( type_name , value ) except typecast . ConverterError : return value\n", "title": "", "metadata": ""}
{"_id": "05911f7502aef4a3951f5b570177122b", "text": "def conv1x1 ( in_planes , out_planes , stride = 1 ) : return nn . Conv2d ( in_planes , out_planes , kernel_size = 1 , stride = stride , bias = False )\n", "title": "", "metadata": ""}
{"_id": "af22f38372fcb71604223be49da1b5c6", "text": "def algo_exp ( x , m , t , b ) : return m * np . exp ( - t * x ) + b\n", "title": "", "metadata": ""}
{"_id": "ece88d14772bcd5796a37d53a1c9efcf", "text": "def generate_unique_host_id ( ) : host = \".\" . join ( reversed ( socket . gethostname ( ) . split ( \".\" ) ) ) pid = os . getpid ( ) return \"%s.%d\" % ( host , pid )\n", "title": "", "metadata": ""}
{"_id": "5d3c3e8814e282e0ad953adf6e8ff07e", "text": "def Join ( self ) : for _ in range ( self . JOIN_TIMEOUT_DECISECONDS ) : if self . _queue . empty ( ) and not self . busy_threads : return time . sleep ( 0.1 ) raise ValueError ( \"Timeout during Join() for threadpool %s.\" % self . name )\n", "title": "", "metadata": ""}
{"_id": "88f397955ba7633c8acddb4352699c58", "text": "def get_system_flags ( ) -> FrozenSet [ Flag ] : return frozenset ( { Seen , Recent , Deleted , Flagged , Answered , Draft } )\n", "title": "", "metadata": ""}
{"_id": "b6dc4370f88f01fbf8e6779c4ed07ca2", "text": "def sometimesish ( fn ) : def wrapped ( * args , * * kwargs ) : if random . randint ( 1 , 2 ) == 1 : return fn ( * args , * * kwargs ) return wrapped\n", "title": "", "metadata": ""}
{"_id": "faaba6764b775754c493e7fc0a70c0d7", "text": "def rate_limited ( max_per_hour : int , * args : Any ) -> Callable [ ... , Any ] : return util . rate_limited ( max_per_hour , * args )\n", "title": "", "metadata": ""}
{"_id": "411ee06e41177ea75b5bd8252f9e6abe", "text": "def selectnone ( table , field , complement = False ) : return select ( table , field , lambda v : v is None , complement = complement )\n", "title": "", "metadata": ""}
{"_id": "a789ce08afb18e627127b5b417a888f7", "text": "def clean_map ( obj : Mapping [ Any , Any ] ) -> Mapping [ Any , Any ] : return { k : v for k , v in obj . items ( ) if v is not None }\n", "title": "", "metadata": ""}
{"_id": "b6927cdfc5bcb3a4c4c93c22ffd7985d", "text": "def year ( date ) : try : fmt = '%m/%d/%Y' return datetime . strptime ( date , fmt ) . timetuple ( ) . tm_year except ValueError : return 0\n", "title": "", "metadata": ""}
{"_id": "da4b582d2d3f14dba0a3f4891ec9a95f", "text": "def get_geoip ( ip ) : reader = geolite2 . reader ( ) ip_data = reader . get ( ip ) or { } return ip_data . get ( 'country' , { } ) . get ( 'iso_code' )\n", "title": "", "metadata": ""}
{"_id": "b4aa8583d5b8856b590b529d8f334fd9", "text": "def issubset ( self , other ) : self . _binary_sanity_check ( other ) return set . issubset ( self , other )\n", "title": "", "metadata": ""}
{"_id": "183d64edc766c9f98a3fea870b6877f9", "text": "def read_stdin ( ) : if sys . stdin . isatty ( ) and sys . stdout . isatty ( ) : print ( '\\nReading from stdin until end of file (Ctrl + D)...' ) return sys . stdin . read ( )\n", "title": "", "metadata": ""}
{"_id": "d63baf186c90ff9a0e532b61bda41882", "text": "def _init_unique_sets ( self ) : ks = dict ( ) for t in self . _unique_checks : key = t [ 0 ] ks [ key ] = set ( ) # empty set return ks\n", "title": "", "metadata": ""}
{"_id": "78516ecdd7c0af6e2e53510a76432f33", "text": "def set_font_size ( self , size ) : if self . font . font_size == size : pass else : self . font . _set_size ( size )\n", "title": "", "metadata": ""}
{"_id": "f504c55b24133dd480c74afb98be8ea7", "text": "def hsv2rgb_spectrum ( hsv ) : h , s , v = hsv return hsv2rgb_raw ( ( ( h * 192 ) >> 8 , s , v ) )\n", "title": "", "metadata": ""}
{"_id": "0ac170fc8255a33b77b117ed57f23d53", "text": "def array_bytes ( array ) : return np . product ( array . shape ) * np . dtype ( array . dtype ) . itemsize\n", "title": "", "metadata": ""}
{"_id": "1f1c1495e6aacd0baaa0a893e6f490a6", "text": "def machine_info ( ) : import psutil BYTES_IN_GIG = 1073741824.0 free_bytes = psutil . virtual_memory ( ) . total return [ { \"memory\" : float ( \"%.1f\" % ( free_bytes / BYTES_IN_GIG ) ) , \"cores\" : multiprocessing . cpu_count ( ) , \"name\" : socket . gethostname ( ) } ]\n", "title": "", "metadata": ""}
{"_id": "4fa37074178b247fa85fa1bd1208e3e3", "text": "async def cursor ( self ) -> Cursor : return Cursor ( self , await self . _execute ( self . _conn . cursor ) )\n", "title": "", "metadata": ""}
{"_id": "da3518351603d13f412e66f5e983ba6e", "text": "def _strptime ( self , time_str ) : if time_str : # Parse UTC string into naive datetime, then add timezone dt = datetime . strptime ( time_str , __timeformat__ ) return dt . replace ( tzinfo = UTC ( ) ) return None\n", "title": "", "metadata": ""}
{"_id": "c03b8d15aadaa8c3d9da77b6aedd1283", "text": "def read_set_from_file ( filename : str ) -> Set [ str ] : collection = set ( ) with open ( filename , 'r' ) as file_ : for line in file_ : collection . add ( line . rstrip ( ) ) return collection\n", "title": "", "metadata": ""}
{"_id": "95c6d98e8cf5ad7262c61369882882be", "text": "def on_close ( self , ws ) : log . debug ( \"Closing WebSocket connection with {}\" . format ( self . url ) ) if self . keepalive and self . keepalive . is_alive ( ) : self . keepalive . do_run = False self . keepalive . join ( )\n", "title": "", "metadata": ""}
{"_id": "cbc94b560a1cdd86b7619bc66ad449ae", "text": "def filter_set ( input , * * params ) : PARAM_WHERE = 'where' return Converter . df2list ( pd . DataFrame . from_records ( input ) . query ( params . get ( PARAM_WHERE ) ) )\n", "title": "", "metadata": ""}
{"_id": "48674bb15436b0be69006ff60262669c", "text": "def _run_sync ( self , method : Callable , * args , * * kwargs ) -> Any : if self . loop . is_running ( ) : raise RuntimeError ( \"Event loop is already running.\" ) if not self . is_connected : self . loop . run_until_complete ( self . connect ( ) ) task = asyncio . Task ( method ( * args , * * kwargs ) , loop = self . loop ) result = self . loop . run_until_complete ( task ) self . loop . run_until_complete ( self . quit ( ) ) return result\n", "title": "", "metadata": ""}
{"_id": "2456a6d08b27d7a400427e09fc91aa2d", "text": "def fixpath ( path ) : return os . path . normpath ( os . path . realpath ( os . path . expanduser ( path ) ) )\n", "title": "", "metadata": ""}
{"_id": "0fca16efce64104ea868c7bc4ca71afa", "text": "def ensure_index ( self , key , unique = False ) : return self . collection . ensure_index ( key , unique = unique )\n", "title": "", "metadata": ""}
{"_id": "76d0e04de0bce2f9da200eb1d0d50ebd", "text": "def median_high ( data ) : data = sorted ( data ) n = len ( data ) if n == 0 : raise StatisticsError ( \"no median for empty data\" ) return data [ n // 2 ]\n", "title": "", "metadata": ""}
{"_id": "442749322aba2d1251034780b652a7a0", "text": "def _encode_gif ( images , fps ) : writer = WholeVideoWriter ( fps ) writer . write_multi ( images ) return writer . finish ( )\n", "title": "", "metadata": ""}
{"_id": "c59dadd491753c1f04a53f0b7f1e0413", "text": "def from_json_list ( cls , api_client , data ) : return [ cls . from_json ( api_client , item ) for item in data ]\n", "title": "", "metadata": ""}
{"_id": "c8c2fc4469fd1c2b52632a71d63868c5", "text": "def paint_cube ( self , x , y ) : # get the color color = self . next_color ( ) # calculate the position cube_pos = [ x , y , x + self . cube_size , y + self . cube_size ] # draw the cube draw = ImageDraw . Draw ( im = self . image ) draw . rectangle ( xy = cube_pos , fill = color )\n", "title": "", "metadata": ""}
{"_id": "d0f365fddf2ee7c02e03edfa97f884be", "text": "def update ( self , other_dict ) : for key , value in iter_multi_items ( other_dict ) : MultiDict . add ( self , key , value )\n", "title": "", "metadata": ""}
{"_id": "898b4785228357c121ef19e8daf6e70e", "text": "def butlast ( iterable ) : iterable = iter ( iterable ) try : first = next ( iterable ) except StopIteration : return for second in iterable : yield first first = second\n", "title": "", "metadata": ""}
{"_id": "d91ec62f4d17f72e4d3911ce10f1fdba", "text": "def pformat ( object , indent = 1 , width = 80 , depth = None ) : return PrettyPrinter ( indent = indent , width = width , depth = depth ) . pformat ( object )\n", "title": "", "metadata": ""}
{"_id": "9be080b5aad7574351681a41e7c6ae30", "text": "def keys_to_snake_case ( camel_case_dict ) : return dict ( ( to_snake_case ( key ) , value ) for ( key , value ) in camel_case_dict . items ( ) )\n", "title": "", "metadata": ""}
{"_id": "12897bf70c1735784741d7aa0295798b", "text": "def purge_duplicates ( list_in ) : _list = [ ] for item in list_in : if item not in _list : _list . append ( item ) return _list\n", "title": "", "metadata": ""}
{"_id": "7e63e72a6f1c403a17df0175d9b154bf", "text": "def point_in_multipolygon ( point , multipoly ) : coords_array = [ multipoly [ 'coordinates' ] ] if multipoly [ 'type' ] == \"MultiPolygon\" else multipoly [ 'coordinates' ] for coords in coords_array : if _point_in_polygon ( point , coords ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "6c4faeba227f52556cc211c88c110032", "text": "def _extract_node_text ( node ) : texts = map ( six . text_type . strip , map ( six . text_type , map ( unescape , node . xpath ( \".//text()\" ) ) ) ) return \" \" . join ( text for text in texts if text )\n", "title": "", "metadata": ""}
{"_id": "37011b2661084b9586892081b56246ce", "text": "def percent_d ( data , period ) : p_k = percent_k ( data , period ) percent_d = sma ( p_k , 3 ) return percent_d\n", "title": "", "metadata": ""}
{"_id": "b995290844ef4e9f543f3da3b4ea57aa", "text": "def truncate ( value : Decimal , n_digits : int ) -> Decimal : return Decimal ( math . trunc ( value * ( 10 ** n_digits ) ) ) / ( 10 ** n_digits )\n", "title": "", "metadata": ""}
{"_id": "66f913b4a68e93dec67cb90692b4013e", "text": "def fig2x ( figure , format ) : # Save svg to file like object svg_io io = StringIO ( ) figure . savefig ( io , format = format ) # Rewind the file like object io . seek ( 0 ) data = io . getvalue ( ) io . close ( ) return data\n", "title": "", "metadata": ""}
{"_id": "9b63161b804eec58546923a1983e319f", "text": "def measure_string ( self , text , fontname , fontsize , encoding = 0 ) : return _fitz . Tools_measure_string ( self , text , fontname , fontsize , encoding )\n", "title": "", "metadata": ""}
{"_id": "150774c0067d361151e167f463178241", "text": "def print_tree ( self , indent = 2 ) : config . LOGGER . info ( \"{indent}{data}\" . format ( indent = \"   \" * indent , data = str ( self ) ) ) for child in self . children : child . print_tree ( indent + 1 )\n", "title": "", "metadata": ""}
{"_id": "377df648eb4017a5509523925165f357", "text": "def clean ( some_string , uppercase = False ) : if uppercase : return some_string . strip ( ) . upper ( ) else : return some_string . strip ( ) . lower ( )\n", "title": "", "metadata": ""}
{"_id": "8a3aca37372ec6424bdc0260d31ede96", "text": "def _saferound ( value , decimal_places ) : try : f = float ( value ) except ValueError : return '' format = '%%.%df' % decimal_places return format % f\n", "title": "", "metadata": ""}
{"_id": "49d305519795609e50e58e63a14048dd", "text": "def unit_ball_L_inf ( shape , precondition = True ) : x = tf . Variable ( tf . zeros ( shape ) ) if precondition : return constrain_L_inf_precondition ( x ) else : return constrain_L_inf ( x )\n", "title": "", "metadata": ""}
{"_id": "cac16ef7ae12bdb02d05f8cc0c0e03b3", "text": "def _match_space_at_line ( line ) : regex = re . compile ( r\"^{0}$\" . format ( _MDL_COMMENT ) ) return regex . match ( line )\n", "title": "", "metadata": ""}
{"_id": "bf23e4dc1117b750d8561f252061a4f8", "text": "def last_modified_time ( path ) : return pd . Timestamp ( os . path . getmtime ( path ) , unit = 's' , tz = 'UTC' )\n", "title": "", "metadata": ""}
{"_id": "cc5f360aabea387945d7b837792cada5", "text": "def to_snake_case ( s ) : return re . sub ( '([^_A-Z])([A-Z])' , lambda m : m . group ( 1 ) + '_' + m . group ( 2 ) . lower ( ) , s )\n", "title": "", "metadata": ""}
{"_id": "298138181208f1d23448f594f794d1cd", "text": "def get_login_credentials ( args ) : if not args . username : args . username = raw_input ( \"Enter Username: \" ) if not args . password : args . password = getpass . getpass ( \"Enter Password: \" )\n", "title": "", "metadata": ""}
{"_id": "771b49b3e61ab52875a6a5321df2962f", "text": "def exec_function ( ast , globals_map ) : locals_map = globals_map exec ast in globals_map , locals_map return locals_map\n", "title": "", "metadata": ""}
{"_id": "c5b341d93d051674fe90bbfd86897eb9", "text": "def similarity_transformation ( rot , mat ) : return np . dot ( rot , np . dot ( mat , np . linalg . inv ( rot ) ) )\n", "title": "", "metadata": ""}
{"_id": "b0af2ff6fa8c279b8346cb7fda89cb1f", "text": "def _get_item_position ( self , idx ) : start = 0 if idx == 0 else self . _index [ idx - 1 ] + 1 end = self . _index [ idx ] return start , end\n", "title": "", "metadata": ""}
{"_id": "c0ff2361d2caad6ab2654988ffc33e4f", "text": "def count ( args ) : counts = defaultdict ( int ) for arg in args : for item in arg : counts [ item ] = counts [ item ] + 1 return counts\n", "title": "", "metadata": ""}
{"_id": "b96369183e99421c0319cd0ed55a5008", "text": "def safe_exit ( output ) : try : sys . stdout . write ( output ) sys . stdout . flush ( ) except IOError : pass\n", "title": "", "metadata": ""}
{"_id": "649986650a4c02cdb6387f27b9653f14", "text": "def zeros ( self , name , * * kwargs ) : return self . _write_op ( self . _zeros_nosync , name , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "0c5d2287e6c477c2a7feea6d6521e4b6", "text": "def drop_trailing_zeros_decimal ( num ) : out = str ( num ) return out . rstrip ( '0' ) . rstrip ( '.' ) if '.' in out else out\n", "title": "", "metadata": ""}
{"_id": "4f778b229db6cd5880495f504cd900b4", "text": "def getSize ( self ) : return self . widget . size [ 0 ] - self . border [ 0 ] * 2 , self . widget . size [ 1 ] - self . border [ 1 ] * 2\n", "title": "", "metadata": ""}
{"_id": "f936aedeb3f0548957aa8d26c968c685", "text": "def scatterplot_matrix ( df , features , downsample_frac = None , figsize = ( 15 , 15 ) ) : if downsample_frac : df = df . sample ( frac = downsample_frac ) plt . figure ( figsize = figsize ) sns . pairplot ( df [ features ] , hue = 'target' ) plt . show ( )\n", "title": "", "metadata": ""}
{"_id": "4d6d13d64b3c26aa6f6ffdac19bcd0c9", "text": "def pickle_data ( data , picklefile ) : with open ( picklefile , 'wb' ) as f : pickle . dump ( data , f , protocol = 2 )\n", "title": "", "metadata": ""}
{"_id": "54e94fa4f6f9ea316fbedc11414e854d", "text": "def get_keys_of_max_n ( dict_obj , n ) : return sorted ( [ item [ 0 ] for item in sorted ( dict_obj . items ( ) , key = lambda item : item [ 1 ] , reverse = True ) [ : n ] ] )\n", "title": "", "metadata": ""}
{"_id": "0604453c037cb65b7dd3f062801d431e", "text": "def is_valid_file ( parser , arg ) : if not os . path . exists ( arg ) : parser . error ( \"File %s not found\" % arg ) else : return arg\n", "title": "", "metadata": ""}
{"_id": "f8056666e49ac6960a0d8f7b3134cec4", "text": "def fixed ( ctx , number , decimals = 2 , no_commas = False ) : value = _round ( ctx , number , decimals ) format_str = '{:f}' if no_commas else '{:,f}' return format_str . format ( value )\n", "title": "", "metadata": ""}
{"_id": "a50216ed55a577547891b636de7101b4", "text": "def _openResources ( self ) : arr = np . load ( self . _fileName , allow_pickle = ALLOW_PICKLE ) check_is_an_array ( arr ) self . _array = arr\n", "title": "", "metadata": ""}
{"_id": "7ea4491c53ba44c320a3c5a98ba031de", "text": "def dict_of_sets_add ( dictionary , key , value ) : # type: (DictUpperBound, Any, Any) -> None set_objs = dictionary . get ( key , set ( ) ) set_objs . add ( value ) dictionary [ key ] = set_objs\n", "title": "", "metadata": ""}
{"_id": "910df055af24d351ce732c10fb55c054", "text": "def cli_command_quit ( self , msg ) : if self . state == State . RUNNING and self . sprocess and self . sprocess . proc : self . sprocess . proc . kill ( ) else : sys . exit ( 0 )\n", "title": "", "metadata": ""}
{"_id": "b100b235fb3202997778c66a2c8d3f4a", "text": "def selectin ( table , field , value , complement = False ) : return select ( table , field , lambda v : v in value , complement = complement )\n", "title": "", "metadata": ""}
{"_id": "d73f1603d1354d3f074038e08aa8593b", "text": "def palettebar ( height , length , colormap ) : cbar = np . tile ( np . arange ( length ) * 1.0 / ( length - 1 ) , ( height , 1 ) ) cbar = ( cbar * ( colormap . values . max ( ) + 1 - colormap . values . min ( ) ) + colormap . values . min ( ) ) return colormap . palettize ( cbar )\n", "title": "", "metadata": ""}
{"_id": "03f68d22ba9d1388a7ff2b53f1bfa641", "text": "def _sourced_dict ( self , source = None , * * kwargs ) : if source : kwargs [ 'source' ] = source elif self . source : kwargs [ 'source' ] = self . source return kwargs\n", "title": "", "metadata": ""}
{"_id": "87647ff9bae3b7bd6f4e05ee40c4cc42", "text": "def reset ( self ) : self . prevframe = None self . wasmoving = False self . t0 = 0 self . ismoving = False\n", "title": "", "metadata": ""}
{"_id": "188b543628edf45289bd55994c35844d", "text": "def get_flat_size ( self ) : return sum ( np . prod ( v . get_shape ( ) . as_list ( ) ) for v in self . variables . values ( ) )\n", "title": "", "metadata": ""}
{"_id": "40a81d21e6b57dd9d0602cf75f4e35cc", "text": "def get_line_flux ( line_wave , wave , flux , * * kwargs ) : return np . interp ( line_wave , wave , flux , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "5ea1c4fdc0a25263a9cb523b77d4e602", "text": "def example_write_file_to_disk_if_changed ( ) : my_file = FileAsObj ( '/tmp/example_file.txt' ) my_file . rm ( my_file . egrep ( '^#' ) ) if my_file . changed : my_file . save ( )\n", "title": "", "metadata": ""}
{"_id": "27c0d0c5ff43bce67a273494e931bc5f", "text": "def delete_index ( self ) : es = self . _init_connection ( ) if es . indices . exists ( index = self . index ) : es . indices . delete ( index = self . index )\n", "title": "", "metadata": ""}
{"_id": "48f77a80f81c00c5ef17c0174e537517", "text": "def handle_errors ( resp ) : if resp . status_code == 400 : raise ApiException ( json . loads ( resp . content ) . get ( 'message' ) ) return resp\n", "title": "", "metadata": ""}
{"_id": "211c493f89605350e24bf1ac9b732788", "text": "def getYamlDocument ( filePath ) : with open ( filePath ) as stream : doc = yaml . load ( stream ) return doc\n", "title": "", "metadata": ""}
{"_id": "288ffb5d0a7ca6a23b45242da3bd5108", "text": "def is_valid_email ( email ) : pattern = re . compile ( r'[\\w\\.-]+@[\\w\\.-]+[.]\\w+' ) return bool ( pattern . match ( email ) )\n", "title": "", "metadata": ""}
{"_id": "e0233302388e1a987a3194ee3db51b6d", "text": "def connect_rds ( aws_access_key_id = None , aws_secret_access_key = None , * * kwargs ) : from boto . rds import RDSConnection return RDSConnection ( aws_access_key_id , aws_secret_access_key , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "eadba5a0e2803e3759477b5620b3f539", "text": "def extract_vars_above ( * names ) : callerNS = sys . _getframe ( 2 ) . f_locals return dict ( ( k , callerNS [ k ] ) for k in names )\n", "title": "", "metadata": ""}
{"_id": "9e6d296adf3f9d958dd6e45611fab1d7", "text": "def startEdit ( self ) : self . _originalText = self . text ( ) self . scrollWidget ( ) . hide ( ) self . setFocus ( ) self . selectAll ( )\n", "title": "", "metadata": ""}
{"_id": "4d2baa2b24a2c9dba9593dd1557115e9", "text": "def get_dimension_array ( array ) : if all ( isinstance ( el , list ) for el in array ) : result = [ len ( array ) , len ( max ( [ x for x in array ] , key = len , ) ) ] # elif array and isinstance(array, list): else : result = [ len ( array ) , 1 ] return result\n", "title": "", "metadata": ""}
{"_id": "a98318202411d19280fb1d5243caf174", "text": "def iget_list_column_slice ( list_ , start = None , stop = None , stride = None ) : if isinstance ( start , slice ) : slice_ = start else : slice_ = slice ( start , stop , stride ) return ( row [ slice_ ] for row in list_ )\n", "title": "", "metadata": ""}
{"_id": "0c3f1838eafc07f91e1a2544c77ccfdc", "text": "def growthfromrange ( rangegrowth , startdate , enddate ) : _yrs = ( pd . Timestamp ( enddate ) - pd . Timestamp ( startdate ) ) . total_seconds ( ) / dt . timedelta ( 365.25 ) . total_seconds ( ) return yrlygrowth ( rangegrowth , _yrs )\n", "title": "", "metadata": ""}
{"_id": "a4156404735a9e158fc7010c570e2ea3", "text": "def string_to_int ( s ) : result = 0 for c in s : if not isinstance ( c , int ) : c = ord ( c ) result = 256 * result + c return result\n", "title": "", "metadata": ""}
{"_id": "ca46911da6d4287718734a3ac1561c79", "text": "def contains_geometric_info ( var ) : return isinstance ( var , tuple ) and len ( var ) == 2 and all ( isinstance ( val , ( int , float ) ) for val in var )\n", "title": "", "metadata": ""}
{"_id": "5d8f95705df80ac9ca1fc7ca23475021", "text": "def str_dict ( some_dict ) : return { str ( k ) : str ( v ) for k , v in some_dict . items ( ) }\n", "title": "", "metadata": ""}
{"_id": "5221d11ef9c77886924ae521913b3c73", "text": "def generate_uuid ( ) : r_uuid = base64 . urlsafe_b64encode ( uuid . uuid4 ( ) . bytes ) return r_uuid . decode ( ) . replace ( '=' , '' )\n", "title": "", "metadata": ""}
{"_id": "6f87fc789a5f6384432c943f330a31a5", "text": "def write_line ( self , line , count = 1 ) : self . write ( line ) self . write_newlines ( count )\n", "title": "", "metadata": ""}
{"_id": "6c36746d706b9f794eb15584d85e5891", "text": "def array_dim ( arr ) : dim = [ ] while True : try : dim . append ( len ( arr ) ) arr = arr [ 0 ] except TypeError : return dim\n", "title": "", "metadata": ""}
{"_id": "ea5b10cf095080fa88876c3bb07d1376", "text": "def stop ( self , timeout = None ) : self . stopping = True for process in list ( self . processes ) : self . stop_process ( process , timeout = timeout )\n", "title": "", "metadata": ""}
{"_id": "89cab5b95ef33c2ebefdd440618eab9a", "text": "def tuple ( self , var , cast = None , default = NOTSET ) : return self . get_value ( var , cast = tuple if not cast else ( cast , ) , default = default )\n", "title": "", "metadata": ""}
{"_id": "597aea40acc5662cb74164af2e354e6d", "text": "def lock ( self , block = True ) : self . _locked = True return self . _lock . acquire ( block )\n", "title": "", "metadata": ""}
{"_id": "63445ff83b21f146a950e9ca3e8299db", "text": "def hex_to_int ( value ) : if version_info . major >= 3 : return int . from_bytes ( value , \"big\" ) return int ( value . encode ( \"hex\" ) , 16 )\n", "title": "", "metadata": ""}
{"_id": "1a2c9f52e80b4c452bf8089c70e6b830", "text": "def isString ( s ) : try : return isinstance ( s , unicode ) or isinstance ( s , basestring ) except NameError : return isinstance ( s , str )\n", "title": "", "metadata": ""}
{"_id": "663a0217760ff5f53364f97d9b99de72", "text": "def trigger ( self , target : str , trigger : str , parameters : Dict [ str , Any ] = { } ) : pass\n", "title": "", "metadata": ""}
{"_id": "f238a9608f03418b38d254936632c027", "text": "def _is_iterable ( item ) : return isinstance ( item , collections . Iterable ) and not isinstance ( item , six . string_types )\n", "title": "", "metadata": ""}
{"_id": "22213ea1afe2953edb4b582d69fb6218", "text": "def _clean_str ( self , s ) : return s . translate ( str . maketrans ( '' , '' , punctuation ) ) . replace ( '\\u200b' , \" \" ) . strip ( ) . lower ( )\n", "title": "", "metadata": ""}
{"_id": "c292a2cd8bacc0ffac59d2e1c060e1ba", "text": "def rel_path ( filename ) : return os . path . join ( os . getcwd ( ) , os . path . dirname ( __file__ ) , filename )\n", "title": "", "metadata": ""}
{"_id": "82e3a4c7158658dd895073ecefe3930f", "text": "def get_by ( self , name ) : return next ( ( item for item in self if item . name == name ) , None )\n", "title": "", "metadata": ""}
{"_id": "a56fec3c005d7374adc9d0b9ce6c081f", "text": "def closest ( xarr , val ) : idx_closest = np . argmin ( np . abs ( np . array ( xarr ) - val ) ) return idx_closest\n", "title": "", "metadata": ""}
{"_id": "c7e89b7a7c7646be24e8fb0a4a8f7bbd", "text": "def issuperset ( self , items ) : return all ( _compat . map ( self . _seen . __contains__ , items ) )\n", "title": "", "metadata": ""}
{"_id": "9275ebecaf6f3675197277a0189f855f", "text": "def unique ( input_list ) : output = [ ] for item in input_list : if item not in output : output . append ( item ) return output\n", "title": "", "metadata": ""}
{"_id": "933972e957dfa739c4294be030a1002e", "text": "def be_array_from_bytes ( fmt , data ) : arr = array . array ( str ( fmt ) , data ) return fix_byteorder ( arr )\n", "title": "", "metadata": ""}
{"_id": "e40504e70b0ecdd2d8cc90071eda9191", "text": "def _get_var_from_string ( item ) : modname , varname = _split_mod_var_names ( item ) if modname : mod = __import__ ( modname , globals ( ) , locals ( ) , [ varname ] , - 1 ) return getattr ( mod , varname ) else : return globals ( ) [ varname ]\n", "title": "", "metadata": ""}
{"_id": "8cfed847c51df9c8fadcc48d0cc4a4db", "text": "def time2seconds ( t ) : return t . hour * 3600 + t . minute * 60 + t . second + float ( t . microsecond ) / 1e6\n", "title": "", "metadata": ""}
{"_id": "0dc609e540b6b3fd506f579273229f32", "text": "def flatten_list ( l : List [ list ] ) -> list : return [ v for inner_l in l for v in inner_l ]\n", "title": "", "metadata": ""}
{"_id": "5a399e50659fd1e1380d65f3ebca92b2", "text": "def Load ( file ) : with open ( file , 'rb' ) as file : model = dill . load ( file ) return model\n", "title": "", "metadata": ""}
{"_id": "bb9e22c8f994c1167647322a57069f79", "text": "def replace_all ( filepath , searchExp , replaceExp ) : for line in fileinput . input ( filepath , inplace = 1 ) : if searchExp in line : line = line . replace ( searchExp , replaceExp ) sys . stdout . write ( line )\n", "title": "", "metadata": ""}
{"_id": "0686ebb1f1ca93c2471ca3a90b443c2d", "text": "def do_quit ( self , _ : argparse . Namespace ) -> bool : self . _should_quit = True return self . _STOP_AND_EXIT\n", "title": "", "metadata": ""}
{"_id": "2528cd03469b6921568d0bcbd49a894e", "text": "def autobuild_python_test ( path ) : env = Environment ( tools = [ ] ) target = env . Command ( [ 'build/test/output/pytest.log' ] , [ path ] , action = env . Action ( run_pytest , \"Running python unit tests\" ) ) env . AlwaysBuild ( target )\n", "title": "", "metadata": ""}
{"_id": "c1d98f76ce3d49072fd68af78ddd42cf", "text": "def listified_tokenizer ( source ) : io_obj = io . StringIO ( source ) return [ list ( a ) for a in tokenize . generate_tokens ( io_obj . readline ) ]\n", "title": "", "metadata": ""}
{"_id": "550fdc1e414d21b69665ee6b96ce21ee", "text": "def read ( self ) : for line in self . io . read ( ) : with self . parse_line ( line ) as j : yield j\n", "title": "", "metadata": ""}
{"_id": "e84098ade3d515ee345cd03646f11d29", "text": "def after_third_friday ( day = None ) : day = day if day is not None else datetime . datetime . now ( ) now = day . replace ( day = 1 , hour = 16 , minute = 0 , second = 0 , microsecond = 0 ) now += relativedelta . relativedelta ( weeks = 2 , weekday = relativedelta . FR ) return day > now\n", "title": "", "metadata": ""}
{"_id": "2156c60dc8a365e48062f73c2c19cfc8", "text": "def set_range ( self , min_val , max_val ) : if min_val > max_val : max_val , min_val = min_val , max_val self . values = ( ( ( self . values * 1.0 - self . values . min ( ) ) / ( self . values . max ( ) - self . values . min ( ) ) ) * ( max_val - min_val ) + min_val )\n", "title": "", "metadata": ""}
{"_id": "5c456ab5c54595d1076b229115f33871", "text": "def read_mm_header ( fd , byte_order , dtype , count ) : return numpy . rec . fromfile ( fd , MM_HEADER , 1 , byteorder = byte_order ) [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "71aee43e3a3d71855f59e1558375005e", "text": "def cat_acc ( y_true , y_pred ) : return np . mean ( y_true . argmax ( axis = 1 ) == y_pred . argmax ( axis = 1 ) )\n", "title": "", "metadata": ""}
{"_id": "eb5c2107c44a6410c26460017f38b033", "text": "def titleize ( text ) : if len ( text ) == 0 : # if empty string, return it return text else : text = text . lower ( ) # lower all char # delete redundant empty space  chunks = [ chunk [ 0 ] . upper ( ) + chunk [ 1 : ] for chunk in text . split ( \" \" ) if len ( chunk ) >= 1 ] return \" \" . join ( chunks )\n", "title": "", "metadata": ""}
{"_id": "f398d3af7d23c31558e779a988cc68f3", "text": "def median ( data ) : data . sort ( ) num_values = len ( data ) half = num_values // 2 if num_values % 2 : return data [ half ] return 0.5 * ( data [ half - 1 ] + data [ half ] )\n", "title": "", "metadata": ""}
{"_id": "fb78057df55386e34c92919311544fa9", "text": "def move_up ( lines = 1 , file = sys . stdout ) : move . up ( lines ) . write ( file = file )\n", "title": "", "metadata": ""}
{"_id": "548e910eeced5b00a44680248c7f7a60", "text": "def _enter_plotting ( self , fontsize = 9 ) : # interactive_status = matplotlib.is_interactive() self . original_fontsize = pyplot . rcParams [ 'font.size' ] pyplot . rcParams [ 'font.size' ] = fontsize pyplot . hold ( False ) # opens a figure window, if non exists pyplot . ioff ( )\n", "title": "", "metadata": ""}
{"_id": "9ac681e06d4edcde424ba0bb3324c1bd", "text": "def _str_to_list ( value , separator ) : value_list = [ item . strip ( ) for item in value . split ( separator ) ] value_list_sanitized = builtins . list ( filter ( None , value_list ) ) if len ( value_list_sanitized ) > 0 : return value_list_sanitized else : raise ValueError ( 'Invalid list variable.' )\n", "title": "", "metadata": ""}
{"_id": "48a02a806530a85cd594947581602707", "text": "def bytes_to_str ( s , encoding = 'utf-8' ) : if six . PY3 and isinstance ( s , bytes ) : return s . decode ( encoding ) return s\n", "title": "", "metadata": ""}
{"_id": "51ec422b65dfa24542219d3884d589c4", "text": "def current_offset ( local_tz = None ) : if local_tz is None : local_tz = DEFAULT_LOCAL_TZ dt = local_tz . localize ( datetime . now ( ) ) return dt . utcoffset ( )\n", "title": "", "metadata": ""}
{"_id": "aae6a99f0e8569806769c5f611a4ef94", "text": "def count ( lines ) : words = [ w for l in lines for w in l . strip ( ) . split ( ) ] return Counter ( words )\n", "title": "", "metadata": ""}
{"_id": "08b9e74f547c01ad13538912b8a9e5cb", "text": "def done ( self , result ) : self . _geometry = self . geometry ( ) QtWidgets . QDialog . done ( self , result )\n", "title": "", "metadata": ""}
{"_id": "318db26ad5a69258482871bf36a07620", "text": "def _multiline_width ( multiline_s , line_width_fn = len ) : return max ( map ( line_width_fn , re . split ( \"[\\r\\n]\" , multiline_s ) ) )\n", "title": "", "metadata": ""}
{"_id": "b0b9267404e8ed6809dcafb2022f3b83", "text": "def is_writable_by_others ( filename ) : mode = os . stat ( filename ) [ stat . ST_MODE ] return mode & stat . S_IWOTH\n", "title": "", "metadata": ""}
{"_id": "ed0a78b7275147873357fec76c63b2ba", "text": "def b ( s ) : return s if isinstance ( s , bytes ) else s . encode ( locale . getpreferredencoding ( ) )\n", "title": "", "metadata": ""}
{"_id": "bc6427b8d05bfe856d09332b73e156e8", "text": "def dictlist_convert_to_float ( dict_list : Iterable [ Dict ] , key : str ) -> None : for d in dict_list : try : d [ key ] = float ( d [ key ] ) except ValueError : d [ key ] = None\n", "title": "", "metadata": ""}
{"_id": "ac21bbb624e0e37a793827a6d749cc92", "text": "def append_pdf ( input_pdf : bytes , output_writer : PdfFileWriter ) : append_memory_pdf_to_writer ( input_pdf = input_pdf , writer = output_writer )\n", "title": "", "metadata": ""}
{"_id": "d9cc5c6fb19f55ee3e319cbff074403a", "text": "def value ( self ) : if self . _prop . fget is None : raise AttributeError ( 'Unable to read attribute' ) return self . _prop . fget ( self . _obj )\n", "title": "", "metadata": ""}
{"_id": "675c6bc6e482edaa895acfb8f9dfc08d", "text": "def delimited ( items , character = '|' ) : return '|' . join ( items ) if type ( items ) in ( list , tuple , set ) else items\n", "title": "", "metadata": ""}
{"_id": "68aeb0fdabc7fcc35f670a926b8882c8", "text": "def get_longest_orf ( orfs ) : sorted_orf = sorted ( orfs , key = lambda x : len ( x [ 'sequence' ] ) , reverse = True ) [ 0 ] return sorted_orf\n", "title": "", "metadata": ""}
{"_id": "330b4d025c28b62856559c438eaf6c01", "text": "def parse_func_kwarg_keys ( func , with_vals = False ) : sourcecode = get_func_sourcecode ( func , strip_docstr = True , strip_comments = True ) kwkeys = parse_kwarg_keys ( sourcecode , with_vals = with_vals ) #ut.get_func_kwargs  TODO return kwkeys\n", "title": "", "metadata": ""}
{"_id": "ba743db4767e9bdbbf3d35672ef48f6b", "text": "def inventory ( self , source_id , fetch = False , fmt = 'table' ) : data_tables = { } t = self . query ( \"SELECT * FROM sqlite_master WHERE type='table'\" , fmt = 'table' ) all_tables = t [ 'name' ] . tolist ( ) for table in [ 'sources' ] + [ t for t in all_tables if t not in [ 'sources' , 'sqlite_sequence' ] ] : try : # Get the columns, pull out redundant ones, and query the table for this source's data t = self . query ( \"PRAGMA table_info({})\" . format ( table ) , fmt = 'table' ) columns = np . array ( t [ 'name' ] ) types = np . array ( t [ 'type' ] ) if table == 'sources' or 'source_id' in columns : # If printing, only get simple data types and exclude redundant 'source_id' for nicer printing if not fetch : columns = columns [ ( ( types == 'REAL' ) | ( types == 'INTEGER' ) | ( types == 'TEXT' ) ) & ( columns != 'source_id' ) ] # Query the table try : id = 'id' if table . lower ( ) == 'sources' else 'source_id' data = self . query ( \"SELECT {} FROM {} WHERE {}={}\" . format ( ',' . join ( columns ) , table , id , source_id ) , fmt = 'table' ) if not data and table . lower ( ) == 'sources' : print ( 'No source with id {}. Try db.search() to search the database for a source_id.' . format ( source_id ) ) except : data = None # If there's data for this table, save it if data : if fetch : data_tables [ table ] = self . query ( \"SELECT {} FROM {} WHERE {}={}\" . format ( ',' . join ( columns ) , table , id , source_id ) , fetch = True , fmt = fmt ) else : data = data [ [ c . lower ( ) for c in columns ] ] pprint ( data , title = table . upper ( ) ) else : pass except : print ( 'Could not retrieve data from {} table.' . format ( table . upper ( ) ) ) if fetch : return data_tables\n", "title": "", "metadata": ""}
{"_id": "734509c287e81ba9263c0d3509d07bad", "text": "def get_naive ( dt ) : if not dt . tzinfo : return dt if hasattr ( dt , \"asdatetime\" ) : return dt . asdatetime ( ) return dt . replace ( tzinfo = None )\n", "title": "", "metadata": ""}
{"_id": "a2de1caee9e77acda38f77a601bafea7", "text": "def urlencoded ( body , charset = 'ascii' , * * kwargs ) : return parse_query_string ( text ( body , charset = charset ) , False )\n", "title": "", "metadata": ""}
{"_id": "b0c5ec86fd2eca6484dafd344589dd0a", "text": "def lower_camel_case_from_underscores ( string ) : components = string . split ( '_' ) string = components [ 0 ] for component in components [ 1 : ] : string += component [ 0 ] . upper ( ) + component [ 1 : ] return string\n", "title": "", "metadata": ""}
{"_id": "81018be227438fd9377b3e0651ab8729", "text": "def post_process ( self ) : self . image . putdata ( self . pixels ) self . image = self . image . transpose ( Image . ROTATE_90 )\n", "title": "", "metadata": ""}
{"_id": "a7711f8c6e703b882de285217a3c0840", "text": "def _adjust_offset ( self , real_wave_mfcc , algo_parameters ) : self . log ( u\"Called _adjust_offset\" ) self . _apply_offset ( offset = algo_parameters [ 0 ] )\n", "title": "", "metadata": ""}
{"_id": "85c5fd72d4e81492a104bb0527950561", "text": "def estimate_complexity ( self , x , y , z , n ) : num_calculations = x * y * z * n run_time = num_calculations / 100000 # a 2014 PC does about 100k calcs in a second (guess based on prior logs) return self . show_time_as_short_string ( run_time )\n", "title": "", "metadata": ""}
{"_id": "959a370aa3b4c5517c72b51fe32180cf", "text": "def searchlast ( self , n = 10 ) : solutions = deque ( [ ] , n ) for solution in self : solutions . append ( solution ) return solutions\n", "title": "", "metadata": ""}
{"_id": "a2775e7e65b7f81e16934c08bce36130", "text": "def eof ( fd ) : b = fd . read ( 1 ) end = len ( b ) == 0 if not end : curpos = fd . tell ( ) fd . seek ( curpos - 1 ) return end\n", "title": "", "metadata": ""}
{"_id": "99e8dca01d579bf7d3832e689ac57dda", "text": "def get_codeblock ( language , text ) : rst = \"\\n\\n.. code-block:: \" + language + \"\\n\\n\" for line in text . splitlines ( ) : rst += \"\\t\" + line + \"\\n\" rst += \"\\n\" return rst\n", "title": "", "metadata": ""}
{"_id": "b24d602fd520fdc3a71cbecc50bdf591", "text": "def MoveWindow ( handle : int , x : int , y : int , width : int , height : int , repaint : int = 1 ) -> bool : return bool ( ctypes . windll . user32 . MoveWindow ( ctypes . c_void_p ( handle ) , x , y , width , height , repaint ) )\n", "title": "", "metadata": ""}
{"_id": "bddafb376a5b44b2c5869189b51fbd65", "text": "def open_file ( file , mode ) : if hasattr ( file , \"read\" ) : return file if hasattr ( file , \"open\" ) : return file . open ( mode ) return open ( file , mode )\n", "title": "", "metadata": ""}
{"_id": "48199418dad8981f353f2b693672cfb5", "text": "def fmt_subst ( regex , subst ) : return lambda text : re . sub ( regex , subst , text ) if text else text\n", "title": "", "metadata": ""}
{"_id": "9b839a60cb0b99e18bc454eb24264834", "text": "def test ( ) : # pragma: no cover import pytest import os pytest . main ( [ os . path . dirname ( os . path . abspath ( __file__ ) ) ] )\n", "title": "", "metadata": ""}
{"_id": "e36223a14e53bf86c758c7664cda3702", "text": "def indexes_equal ( a : Index , b : Index ) -> bool : return str ( a ) == str ( b )\n", "title": "", "metadata": ""}
{"_id": "91055ee9738860f04b0212bfb2dcf89f", "text": "def _escape ( s ) : e = s e = e . replace ( '\\\\' , '\\\\\\\\' ) e = e . replace ( '\\n' , '\\\\n' ) e = e . replace ( '\\r' , '\\\\r' ) e = e . replace ( \"'\" , \"\\\\'\" ) e = e . replace ( '\"' , '\\\\\"' ) return e\n", "title": "", "metadata": ""}
{"_id": "65fb9efed62824acc95f39542fab36ac", "text": "def apply ( f , obj , * args , * * kwargs ) : return vectorize ( f ) ( obj , * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "a02c07155b13136e17e6fa2651b7abd7", "text": "def starts_with_prefix_in_list ( text , prefixes ) : for prefix in prefixes : if text . startswith ( prefix ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "dc8302a5c64f819b1c1188d2bf872b38", "text": "def hamming_distance ( str1 , str2 ) : if len ( str1 ) != len ( str2 ) : raise VisualizationError ( 'Strings not same length.' ) return sum ( s1 != s2 for s1 , s2 in zip ( str1 , str2 ) )\n", "title": "", "metadata": ""}
{"_id": "9058b467a02038d9daaf811790dea580", "text": "def dictlist_wipe_key ( dict_list : Iterable [ Dict ] , key : str ) -> None : for d in dict_list : d . pop ( key , None )\n", "title": "", "metadata": ""}
{"_id": "0377ddf20871b1db793ad961721907de", "text": "def get_default_bucket_key ( buckets : List [ Tuple [ int , int ] ] ) -> Tuple [ int , int ] : return max ( buckets )\n", "title": "", "metadata": ""}
{"_id": "605f5c2c64cef7bf7454b6a58493ae1c", "text": "def csv_to_numpy ( string_like , dtype = None ) : # type: (str) -> np.array stream = StringIO ( string_like ) return np . genfromtxt ( stream , dtype = dtype , delimiter = ',' )\n", "title": "", "metadata": ""}
{"_id": "3423a7b35cf275f811812ccafd12a10c", "text": "def unaccentuate ( s ) : return \"\" . join ( c for c in unicodedata . normalize ( \"NFKD\" , s ) if not unicodedata . combining ( c ) )\n", "title": "", "metadata": ""}
{"_id": "aeb0bdb4be750716cf62ba83cb9da63f", "text": "def home ( ) : return dict ( links = dict ( api = '{}{}' . format ( request . url , PREFIX [ 1 : ] ) ) ) , HTTPStatus . OK\n", "title": "", "metadata": ""}
{"_id": "527670aed83dbb2f23ce159fa7fb602d", "text": "def setRect ( self , rect ) : self . x , self . y , self . w , self . h = rect\n", "title": "", "metadata": ""}
{"_id": "85f26a1819123ae5fa30b59abbcabf50", "text": "def get_column ( self , X , column ) : if isinstance ( X , pd . DataFrame ) : return X [ column ] . values return X [ : , column ]\n", "title": "", "metadata": ""}
{"_id": "e120e1b845cf22d51780cd9c99bc9fa8", "text": "def get_cursor ( self ) : return self . grid . GetGridCursorRow ( ) , self . grid . GetGridCursorCol ( ) , self . grid . current_table\n", "title": "", "metadata": ""}
{"_id": "0f589e5ef1fbffc1c1ceb038f47a3053", "text": "def bfx ( value , msb , lsb ) : mask = bitmask ( ( msb , lsb ) ) return ( value & mask ) >> lsb\n", "title": "", "metadata": ""}
{"_id": "e40bfc9b38769d8fe29bd3c374439eb1", "text": "def make_unique_ngrams ( s , n ) : return set ( s [ i : i + n ] for i in range ( len ( s ) - n + 1 ) )\n", "title": "", "metadata": ""}
{"_id": "d0c73430f4eb3c28c837f80cba913528", "text": "def instance_contains ( container , item ) : return item in ( member for _ , member in inspect . getmembers ( container ) )\n", "title": "", "metadata": ""}
{"_id": "bc4d2fc417e38095d8cf797de20ec1ba", "text": "def convert_timestamp ( timestamp ) : datetime = dt . datetime . utcfromtimestamp ( timestamp / 1000. ) return np . datetime64 ( datetime . replace ( tzinfo = None ) )\n", "title": "", "metadata": ""}
{"_id": "e017d64dba72d4ce941ac34c664499f2", "text": "def _file_exists ( path , filename ) : return os . path . isfile ( os . path . join ( path , filename ) )\n", "title": "", "metadata": ""}
{"_id": "f66ae6c6ee3bb74e450cbd3e597ba162", "text": "def mostCommonItem ( lst ) : # This elegant solution from: http://stackoverflow.com/a/1518632/1760218 lst = [ l for l in lst if l ] if lst : return max ( set ( lst ) , key = lst . count ) else : return None\n", "title": "", "metadata": ""}
{"_id": "a74488b5b7781465907276fc84e95afc", "text": "def rank ( self ) : r = np . empty ( self . size , np . int ) r [ self . sorter ] = np . arange ( self . size ) return r\n", "title": "", "metadata": ""}
{"_id": "7021e1e41d3f0a2d4e5d0c0e13e70141", "text": "def string_to_list ( string , sep = \",\" , filter_empty = False ) : return [ value . strip ( ) for value in string . split ( sep ) if ( not filter_empty or value ) ]\n", "title": "", "metadata": ""}
{"_id": "1c1900e59ab8deede6a6bc02398335ec", "text": "def _getTypename ( self , defn ) : return 'REAL' if defn . type . float or 'TIME' in defn . type . name or defn . dntoeu else 'INTEGER'\n", "title": "", "metadata": ""}
{"_id": "0a14bfe7e17e349b62d7413e937382dd", "text": "def make_file_read_only ( file_path ) : old_permissions = os . stat ( file_path ) . st_mode os . chmod ( file_path , old_permissions & ~ WRITE_PERMISSIONS )\n", "title": "", "metadata": ""}
{"_id": "7c0aec7adf215aa06dc723137a7e4960", "text": "def matrixTimesVector ( MM , aa ) : bb = np . zeros ( 3 , np . float ) for ii in range ( 3 ) : bb [ ii ] = np . sum ( MM [ ii , : ] * aa ) return bb\n", "title": "", "metadata": ""}
{"_id": "3b85a9e23b8112187ff040275423d008", "text": "def merge_dict ( data , * args ) : results = { } for current in ( data , ) + args : results . update ( current ) return results\n", "title": "", "metadata": ""}
{"_id": "dc3dbe70b75595cc38f3417a7bb9725d", "text": "def round_figures ( x , n ) : return round ( x , int ( n - math . ceil ( math . log10 ( abs ( x ) ) ) ) )\n", "title": "", "metadata": ""}
{"_id": "d55539b3d251edd8c33d1411d2ab2234", "text": "def loads ( s , model = None , parser = None ) : with StringIO ( s ) as f : return load ( f , model = model , parser = parser )\n", "title": "", "metadata": ""}
{"_id": "4f0d20552c16107d23090f595924072a", "text": "def path ( self ) : path = super ( WindowsPath2 , self ) . path if path . startswith ( \"\\\\\\\\?\\\\\" ) : return path [ 4 : ] return path\n", "title": "", "metadata": ""}
{"_id": "e10e493f4bab3bb6b5d2d0048f3bad03", "text": "def get_attribute_name_id ( attr ) : return attr . value . id if isinstance ( attr . value , ast . Name ) else None\n", "title": "", "metadata": ""}
{"_id": "6a369380e01a548273c6493c64c87039", "text": "def normalize_path ( filename ) : return os . path . normcase ( os . path . realpath ( os . path . normpath ( _cygwin_patch ( filename ) ) ) )\n", "title": "", "metadata": ""}
{"_id": "4d9b6b3b7475824ff03eb7ab8e0bbf63", "text": "def mul ( a , b ) : def multiply ( a , b ) : \"\"\"Multiplication\"\"\" return a * b return op_with_scalar_cast ( a , b , multiply )\n", "title": "", "metadata": ""}
{"_id": "5790c859123da147c83a62ab6a2dbf3f", "text": "def make_html_code ( self , lines ) : line = code_header + '\\n' for l in lines : line = line + html_quote ( l ) + '\\n' return line + code_footer\n", "title": "", "metadata": ""}
{"_id": "3746d5372099266d0971fcac508617c6", "text": "def type_converter ( text ) : if text . isdigit ( ) : return int ( text ) , int try : return float ( text ) , float except ValueError : return text , STRING_TYPE\n", "title": "", "metadata": ""}
{"_id": "a44b9e43e5b65169e552a04ed732120e", "text": "def terminate ( self ) : if self . _pool is not None : self . _pool . terminate ( ) self . _pool . join ( ) self . _pool = None\n", "title": "", "metadata": ""}
{"_id": "b4da684da19d138c3b3a77260802e107", "text": "def _check_task_id ( self , context ) : ti = context [ 'ti' ] celery_result = ti . xcom_pull ( task_ids = self . target_task_id ) return celery_result . ready ( )\n", "title": "", "metadata": ""}
{"_id": "b4db26e352942bf4af2fcbc4dc799296", "text": "def memory_full ( ) : current_process = psutil . Process ( os . getpid ( ) ) return ( current_process . memory_percent ( ) > config . MAXIMUM_CACHE_MEMORY_PERCENTAGE )\n", "title": "", "metadata": ""}
{"_id": "95b939e1eba3211cbacbe9fdb037a17d", "text": "def expect_comment_end ( self ) : match = self . _expect_match ( '#}' , COMMENT_END_PATTERN ) self . advance ( match . end ( ) )\n", "title": "", "metadata": ""}
{"_id": "e8f775914ba3328a8668149039a3c4cc", "text": "def get_numbers ( s ) : result = map ( int , re . findall ( r'[0-9]+' , unicode ( s ) ) ) return result + [ 1 ] * ( 2 - len ( result ) )\n", "title": "", "metadata": ""}
{"_id": "5472e66dcb1057907c233d1cd47546c5", "text": "def update_one ( self , query , doc ) : if self . table is None : self . build_table ( ) if u\"$set\" in doc : doc = doc [ u\"$set\" ] allcond = self . parse_query ( query ) try : result = self . table . update ( doc , allcond ) except : # TODO: check table.update result # check what pymongo does in that case result = None return UpdateResult ( raw_result = result )\n", "title": "", "metadata": ""}
{"_id": "09b2a70d915c9c97a032aa007ce686a4", "text": "def logout ( ) : flogin . logout_user ( ) next = flask . request . args . get ( 'next' ) return flask . redirect ( next or flask . url_for ( \"user\" ) )\n", "title": "", "metadata": ""}
{"_id": "eb4797bc9fe7c8224978721742a2cdf1", "text": "def is_string ( obj ) : if PYTHON3 : str_type = ( bytes , str ) else : str_type = ( bytes , str , unicode ) return isinstance ( obj , str_type )\n", "title": "", "metadata": ""}
{"_id": "bd1d23868ee09d749a78fff0ea9c3bce", "text": "def json_to_initkwargs ( self , json_data , kwargs ) : if isinstance ( json_data , basestring ) : json_data = json . loads ( json_data ) return json_to_initkwargs ( self , json_data , kwargs )\n", "title": "", "metadata": ""}
{"_id": "d913a3bedb9c9c73d056ad1ca740a134", "text": "def is_int_vector ( l ) : if isinstance ( l , np . ndarray ) : if l . ndim == 1 and ( l . dtype . kind == 'i' or l . dtype . kind == 'u' ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "642e02efa5e51fc3d9605040c6f60ef0", "text": "def clean_column_names ( df : DataFrame ) -> DataFrame : f = df . copy ( ) f . columns = [ col . strip ( ) for col in f . columns ] return f\n", "title": "", "metadata": ""}
{"_id": "f74d856ec5ef4634ac4fc1324380c0da", "text": "def is_identifier ( string ) : matched = PYTHON_IDENTIFIER_RE . match ( string ) return bool ( matched ) and not keyword . iskeyword ( string )\n", "title": "", "metadata": ""}
{"_id": "54d7fe42c18cb439a8a9c97870f4d196", "text": "def _IsDirectory ( parent , item ) : return tf . io . gfile . isdir ( os . path . join ( parent , item ) )\n", "title": "", "metadata": ""}
{"_id": "4d892952a52392014aac6b1dd8e06df0", "text": "def normcdf ( x , log = False ) : y = np . atleast_1d ( x ) . copy ( ) flib . normcdf ( y ) if log : if ( y > 0 ) . all ( ) : return np . log ( y ) return - np . inf return y\n", "title": "", "metadata": ""}
{"_id": "adeae0e4dc57511232ac94c0f7adb1fe", "text": "def shutdown ( self ) : self . run_clean_thread = False self . cleanup ( True ) if self . cleaner_thread . isAlive ( ) : self . cleaner_thread . join ( )\n", "title": "", "metadata": ""}
{"_id": "86bbcadc4030e8d53c9dd99b8214d41e", "text": "def multi_replace ( instr , search_list = [ ] , repl_list = None ) : repl_list = [ '' ] * len ( search_list ) if repl_list is None else repl_list for ser , repl in zip ( search_list , repl_list ) : instr = instr . replace ( ser , repl ) return instr\n", "title": "", "metadata": ""}
{"_id": "8379388bbcfdfc034f2556b406f18704", "text": "def exists ( self , path ) : import hdfs try : self . client . status ( path ) return True except hdfs . util . HdfsError as e : if str ( e ) . startswith ( 'File does not exist: ' ) : return False else : raise e\n", "title": "", "metadata": ""}
{"_id": "3d647c5bebc200bdad1fc66a5c093aa4", "text": "def insert_one ( self , mongo_collection , doc , mongo_db = None , * * kwargs ) : collection = self . get_collection ( mongo_collection , mongo_db = mongo_db ) return collection . insert_one ( doc , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "a875551adfcc719dff11d89cc1bb20f7", "text": "def list2dict ( list_of_options ) : d = { } for key , value in list_of_options : d [ key ] = value return d\n", "title": "", "metadata": ""}
{"_id": "9f19cb5fe7fa36d05e42f78e49678ee8", "text": "def inverted_dict_of_lists ( d ) : new_dict = { } for ( old_key , old_value_list ) in viewitems ( dict ( d ) ) : for new_key in listify ( old_value_list ) : new_dict [ new_key ] = old_key return new_dict\n", "title": "", "metadata": ""}
{"_id": "f6fcaa7e16744e28f5864870f78634b1", "text": "def last_location_of_minimum ( x ) : x = np . asarray ( x ) return 1.0 - np . argmin ( x [ : : - 1 ] ) / len ( x ) if len ( x ) > 0 else np . NaN\n", "title": "", "metadata": ""}
{"_id": "4dc4aa5e7b0577e9a0d9a965750b80f7", "text": "def _check_whitespace ( string ) : if string . count ( ' ' ) + string . count ( '\\t' ) + string . count ( '\\n' ) > 0 : raise ValueError ( INSTRUCTION_HAS_WHITESPACE )\n", "title": "", "metadata": ""}
{"_id": "0a3faa141905cea512e32a2a57a58590", "text": "def non_increasing ( values ) : return all ( x >= y for x , y in zip ( values , values [ 1 : ] ) )\n", "title": "", "metadata": ""}
{"_id": "08e7d3a65e432b20fa08056527fc4567", "text": "def myreplace ( astr , thefind , thereplace ) : alist = astr . split ( thefind ) new_s = alist . split ( thereplace ) return new_s\n", "title": "", "metadata": ""}
{"_id": "bb10676b2ee823ab5c7104255e7095de", "text": "def _validate_date_str ( str_ ) : if not str_ : return None # Convert to datetime so we can validate it's a real date that exists then # convert it back to the string. try : date = datetime . strptime ( str_ , DATE_FMT ) except ValueError : msg = 'Invalid date format, should be YYYY-MM-DD' raise argparse . ArgumentTypeError ( msg ) return date . strftime ( DATE_FMT )\n", "title": "", "metadata": ""}
{"_id": "9f5093c054ad81f9c3f960e828950294", "text": "def _count_leading_whitespace ( text ) : idx = 0 for idx , char in enumerate ( text ) : if not char . isspace ( ) : return idx return idx + 1\n", "title": "", "metadata": ""}
{"_id": "d2df8e8d94f4d277ae0f3f86a9f016a1", "text": "def dict_to_numpy_array ( d ) : return fromarrays ( d . values ( ) , np . dtype ( [ ( str ( k ) , v . dtype ) for k , v in d . items ( ) ] ) )\n", "title": "", "metadata": ""}
{"_id": "4c27bb791b47a2032a2751af49ddfbf1", "text": "def is_string_dtype ( arr_or_dtype ) : # TODO: gh-15585: consider making the checks stricter. def condition ( dtype ) : return dtype . kind in ( 'O' , 'S' , 'U' ) and not is_period_dtype ( dtype ) return _is_dtype ( arr_or_dtype , condition )\n", "title": "", "metadata": ""}
{"_id": "f599ab8dcc73f9c3ab37fe9464109b26", "text": "def remove_list_duplicates ( lista , unique = False ) : result = [ ] allready = [ ] for elem in lista : if elem not in result : result . append ( elem ) else : allready . append ( elem ) if unique : for elem in allready : result = list ( filter ( ( elem ) . __ne__ , result ) ) return result\n", "title": "", "metadata": ""}
{"_id": "b2cc202a8307ab297c06cd656ab81f0d", "text": "def serialize_json_string ( self , value ) : # Check if the value might be a json string if not isinstance ( value , six . string_types ) : return value # Make sure it starts with a brace if not value . startswith ( '{' ) or value . startswith ( '[' ) : return value # Try to load the string try : return json . loads ( value ) except : return value\n", "title": "", "metadata": ""}
{"_id": "664b46c92451cb8bde87325ba4701f48", "text": "def getScriptLocation ( ) : location = os . path . abspath ( \"./\" ) if __file__ . rfind ( \"/\" ) != - 1 : location = __file__ [ : __file__ . rfind ( \"/\" ) ] return location\n", "title": "", "metadata": ""}
{"_id": "44f3b1709156fecb6e635b9e6181a84b", "text": "def compressBuffer ( buffer ) : # http://jython.xhaus.com/http-compression-in-python-and-jython/ zbuf = cStringIO . StringIO ( ) zfile = gzip . GzipFile ( mode = 'wb' , fileobj = zbuf , compresslevel = 9 ) zfile . write ( buffer ) zfile . close ( ) return zbuf . getvalue ( )\n", "title": "", "metadata": ""}
{"_id": "b60e8bdfd7d357e8341adde670913f61", "text": "def itervalues ( d , * * kw ) : if not PY2 : return iter ( d . values ( * * kw ) ) return d . itervalues ( * * kw )\n", "title": "", "metadata": ""}
{"_id": "6215ec77e4db38eb54dc0b3ef55ca804", "text": "def schunk ( string , size ) : return [ string [ i : i + size ] for i in range ( 0 , len ( string ) , size ) ]\n", "title": "", "metadata": ""}
{"_id": "727116d348f0c828a9bf545b543a4fc0", "text": "def _dict_values_sorted_by_key ( dictionary ) : # This should be a yield from instead. for _ , value in sorted ( dictionary . iteritems ( ) , key = operator . itemgetter ( 0 ) ) : yield value\n", "title": "", "metadata": ""}
{"_id": "2e0acc20c9a82d24a6af80cce184886c", "text": "def _add_hash ( source ) : source = '\\n' . join ( '# ' + line . rstrip ( ) for line in source . splitlines ( ) ) return source\n", "title": "", "metadata": ""}
{"_id": "c8305af8e8f840cbd81b47ec7a354331", "text": "def __to_localdatetime ( val ) : try : dt = datetime . strptime ( val , __DATE_FORMAT ) dt = pytz . timezone ( __TIMEZONE ) . localize ( dt ) return dt except ( ValueError , TypeError ) : return None\n", "title": "", "metadata": ""}
{"_id": "2821932c5c62e6372ea5b71494d3fdb6", "text": "def hex_escape ( bin_str ) : printable = string . ascii_letters + string . digits + string . punctuation + ' ' return '' . join ( ch if ch in printable else r'0x{0:02x}' . format ( ord ( ch ) ) for ch in bin_str )\n", "title": "", "metadata": ""}
{"_id": "f4b0499446daccfcbc56551c50973138", "text": "def to_query_parameters ( parameters ) : if parameters is None : return [ ] if isinstance ( parameters , collections_abc . Mapping ) : return to_query_parameters_dict ( parameters ) return to_query_parameters_list ( parameters )\n", "title": "", "metadata": ""}
{"_id": "35192e88883317ccd9eadd79ac97fe04", "text": "def table_nan_locs ( table ) : ans = [ ] for rownum , row in enumerate ( table ) : try : if pd . isnull ( row ) . any ( ) : colnums = pd . isnull ( row ) . nonzero ( ) [ 0 ] ans += [ ( rownum , colnum ) for colnum in colnums ] except AttributeError : # table is really just a sequence of scalars if pd . isnull ( row ) : ans += [ ( rownum , 0 ) ] return ans\n", "title": "", "metadata": ""}
{"_id": "899cb688d58b5ccb10d7e75aa56c858e", "text": "def set_cursor_position ( self , position ) : position = self . get_position ( position ) cursor = self . textCursor ( ) cursor . setPosition ( position ) self . setTextCursor ( cursor ) self . ensureCursorVisible ( )\n", "title": "", "metadata": ""}
{"_id": "02f271e8b9b7d234e3ccd2378b59282d", "text": "def visit_Str ( self , node ) : self . result [ node ] = self . builder . NamedType ( pytype_to_ctype ( str ) )\n", "title": "", "metadata": ""}
{"_id": "c087e1b7cf5643a53efce266fe651738", "text": "def _strvar ( a , prec = '{:G}' ) : return ' ' . join ( [ prec . format ( i ) for i in np . atleast_1d ( a ) ] )\n", "title": "", "metadata": ""}
{"_id": "9b123b696c4db36b94183cf3fb18703f", "text": "def drop_bad_characters ( text ) : # Strip all non-ascii and non-printable characters text = '' . join ( [ c for c in text if c in ALLOWED_CHARS ] ) return text\n", "title": "", "metadata": ""}
{"_id": "ee96508d9d28415a262a13133c7dcfae", "text": "def get_month_start_end_day ( ) : t = date . today ( ) n = mdays [ t . month ] return ( date ( t . year , t . month , 1 ) , date ( t . year , t . month , n ) )\n", "title": "", "metadata": ""}
{"_id": "fedb2ef88a1322804850596242bccf22", "text": "def selectnotnone ( table , field , complement = False ) : return select ( table , field , lambda v : v is not None , complement = complement )\n", "title": "", "metadata": ""}
{"_id": "a439265f9f8f4ee4c28fa15464d2fed9", "text": "def _writable_dir ( path ) : return os . path . isdir ( path ) and os . access ( path , os . W_OK )\n", "title": "", "metadata": ""}
{"_id": "86bf190135ac52409dd3b6f9f59f2772", "text": "def linregress ( x , y , return_stats = False ) : a1 , a0 , r_value , p_value , stderr = scipy . stats . linregress ( x , y ) retval = a1 , a0 if return_stats : retval += r_value , p_value , stderr return retval\n", "title": "", "metadata": ""}
{"_id": "0e30d6269bca4c403b633d2bfbf62f5e", "text": "def __add__ ( self , other ) : new_table = copy . copy ( self ) for row in other : new_table . Append ( row ) return new_table\n", "title": "", "metadata": ""}
{"_id": "56dfd7822f30f1880504052bece15db8", "text": "def deinit ( self ) : # Clean up after ourselves self . _process . terminate ( ) procs . remove ( self . _process ) self . _mq . remove ( ) queues . remove ( self . _mq )\n", "title": "", "metadata": ""}
{"_id": "4fb2fe8c0c5ed16e33363ee50d7e727b", "text": "def block_view ( arr , block = ( 3 , 3 ) ) : # simple shape and strides computations may seem at first strange # unless one is able to recognize the 'tuple additions' involved ;-) shape = ( arr . shape [ 0 ] // block [ 0 ] , arr . shape [ 1 ] // block [ 1 ] ) + block strides = ( block [ 0 ] * arr . strides [ 0 ] , block [ 1 ] * arr . strides [ 1 ] ) + arr . strides return ast ( arr , shape = shape , strides = strides )\n", "title": "", "metadata": ""}
{"_id": "1d9650880fc4c14ba8dd96a0a2a38da4", "text": "def should_skip_logging ( func ) : disabled = strtobool ( request . headers . get ( \"x-request-nolog\" , \"false\" ) ) return disabled or getattr ( func , SKIP_LOGGING , False )\n", "title": "", "metadata": ""}
{"_id": "cc02f7279cebf4e225db6733c72273df", "text": "def is_valid ( cls , arg ) : return ( isinstance ( arg , ( int , long ) ) and ( arg >= 0 ) ) or isinstance ( arg , basestring )\n", "title": "", "metadata": ""}
{"_id": "04edd168a9e62eb2024f51637d7f792c", "text": "def get_file_string ( filepath ) : with open ( os . path . abspath ( filepath ) ) as f : return f . read ( )\n", "title": "", "metadata": ""}
{"_id": "bedd6d0e582443300376879db22ef150", "text": "def count ( data , axis = None ) : return np . sum ( np . logical_not ( isnull ( data ) ) , axis = axis )\n", "title": "", "metadata": ""}
{"_id": "8e769355e5b421481b9594d243500b38", "text": "def _gcd_array ( X ) : greatest_common_divisor = 0.0 for x in X : greatest_common_divisor = _gcd ( greatest_common_divisor , x ) return greatest_common_divisor\n", "title": "", "metadata": ""}
{"_id": "67bb833d0ea2b203fcb0ed42723a8e4b", "text": "def smooth_gaussian ( image , sigma = 1 ) : return scipy . ndimage . filters . gaussian_filter ( image , sigma = sigma , mode = \"nearest\" )\n", "title": "", "metadata": ""}
{"_id": "51af3febabd83df812a23df309527f6f", "text": "def na_if ( series , * values ) : series = pd . Series ( series ) series [ series . isin ( values ) ] = np . nan return series\n", "title": "", "metadata": ""}
{"_id": "362dd3b9de04d2714463ecf7e94c9c91", "text": "def astensor ( array : TensorLike ) -> BKTensor : tensor = tf . convert_to_tensor ( value = array , dtype = CTYPE ) return tensor\n", "title": "", "metadata": ""}
{"_id": "99b962162d0f982af6c71027d73ec632", "text": "def wait_for_shutdown_signal ( self , please_stop = False , # ASSIGN SIGNAL TO STOP EARLY allow_exit = False , # ALLOW \"exit\" COMMAND ON CONSOLE TO ALSO STOP THE APP wait_forever = True # IGNORE CHILD THREADS, NEVER EXIT.  False => IF NO CHILD THREADS LEFT, THEN EXIT ) : self_thread = Thread . current ( ) if self_thread != MAIN_THREAD or self_thread != self : Log . error ( \"Only the main thread can sleep forever (waiting for KeyboardInterrupt)\" ) if isinstance ( please_stop , Signal ) : # MUTUAL SIGNALING MAKES THESE TWO EFFECTIVELY THE SAME SIGNAL self . please_stop . on_go ( please_stop . go ) please_stop . on_go ( self . please_stop . go ) else : please_stop = self . please_stop if not wait_forever : # TRIGGER SIGNAL WHEN ALL CHILDREN THEADS ARE DONE with self_thread . child_lock : pending = copy ( self_thread . children ) children_done = AndSignals ( please_stop , len ( pending ) ) children_done . signal . on_go ( self . please_stop . go ) for p in pending : p . stopped . on_go ( children_done . done ) try : if allow_exit : _wait_for_exit ( please_stop ) else : _wait_for_interrupt ( please_stop ) except KeyboardInterrupt as _ : Log . alert ( \"SIGINT Detected!  Stopping...\" ) except SystemExit as _ : Log . alert ( \"SIGTERM Detected!  Stopping...\" ) finally : self . stop ( )\n", "title": "", "metadata": ""}
{"_id": "68434ff573816053d17ca2961db0c503", "text": "def Bernstein ( n , k ) : coeff = binom ( n , k ) def _bpoly ( x ) : return coeff * x ** k * ( 1 - x ) ** ( n - k ) return _bpoly\n", "title": "", "metadata": ""}
{"_id": "3c750300ffe8ac07cc8fae33d43da943", "text": "def _parse_tuple_string ( argument ) : if isinstance ( argument , str ) : return tuple ( int ( p . strip ( ) ) for p in argument . split ( ',' ) ) return argument\n", "title": "", "metadata": ""}
{"_id": "e8bf598f930f887b3935041cfd72d448", "text": "def elapsed_time_from ( start_time ) : time_then = make_time ( start_time ) time_now = datetime . utcnow ( ) . replace ( microsecond = 0 ) if time_then is None : return delta_t = time_now - time_then return delta_t\n", "title": "", "metadata": ""}
{"_id": "05c667923b39a39df97e91112af068ee", "text": "def lower_ext ( abspath ) : fname , ext = os . path . splitext ( abspath ) return fname + ext . lower ( )\n", "title": "", "metadata": ""}
{"_id": "d53d49550fc029139e021ec85af6f0a3", "text": "def dict_to_html_attrs ( dict_ ) : res = ' ' . join ( '%s=\"%s\"' % ( k , v ) for k , v in dict_ . items ( ) ) return res\n", "title": "", "metadata": ""}
{"_id": "aa89efbd27cf509582a0ac3e0b732425", "text": "def serve_dtool_directory ( directory , port ) : os . chdir ( directory ) server_address = ( \"localhost\" , port ) httpd = DtoolHTTPServer ( server_address , DtoolHTTPRequestHandler ) httpd . serve_forever ( )\n", "title": "", "metadata": ""}
{"_id": "1fdb90493e8b0af5cece353f1d7f800a", "text": "def submitbutton ( self , request , tag ) : return tags . input ( type = 'submit' , name = '__submit__' , value = self . _getDescription ( ) )\n", "title": "", "metadata": ""}
{"_id": "ead98a745a75ecc76f7d097ff77b61e7", "text": "def list_to_str ( list , separator = ',' ) : list = [ str ( x ) for x in list ] return separator . join ( list )\n", "title": "", "metadata": ""}
{"_id": "c33c16a9acaa03df4148c74eb95b16df", "text": "def from_bytes ( cls , b ) : im = cls ( ) im . chunks = list ( parse_chunks ( b ) ) im . init ( ) return im\n", "title": "", "metadata": ""}
{"_id": "219985c53e508aa68a168104952c3963", "text": "def get_least_distinct_words ( vocab , topic_word_distrib , doc_topic_distrib , doc_lengths , n = None ) : return _words_by_distinctiveness_score ( vocab , topic_word_distrib , doc_topic_distrib , doc_lengths , n , least_to_most = True )\n", "title": "", "metadata": ""}
{"_id": "3347cbf8326cb0f433e725b3e9b7342a", "text": "def distance_to_line ( a , b , p ) : return distance ( closest_point ( a , b , p ) , p )\n", "title": "", "metadata": ""}
{"_id": "8956f2ef05b8c32af9d9777cb3554360", "text": "def endline_semicolon_check ( self , original , loc , tokens ) : return self . check_strict ( \"semicolon at end of line\" , original , loc , tokens )\n", "title": "", "metadata": ""}
{"_id": "4795a832c19ab966589e56dc0439ef17", "text": "def check_type_and_size_of_param_list ( param_list , expected_length ) : try : assert isinstance ( param_list , list ) assert len ( param_list ) == expected_length except AssertionError : msg = \"param_list must be a list containing {} elements.\" raise ValueError ( msg . format ( expected_length ) ) return None\n", "title": "", "metadata": ""}
{"_id": "e851b9c4522c4225b6b359b525610f78", "text": "def boolean ( value ) : if isinstance ( value , bool ) : return value if value == \"\" : return False return strtobool ( value )\n", "title": "", "metadata": ""}
{"_id": "ec0f7b44888aca436c28c8826d8c0a75", "text": "def set_position ( self , x , y , width , height ) : SetWindowPos ( self . _hwnd , None , x , y , width , height , ctypes . c_uint ( 0 ) )\n", "title": "", "metadata": ""}
{"_id": "28bba675830630057f8f826bdc869b79", "text": "def fill_document ( doc ) : with doc . create ( Section ( 'A section' ) ) : doc . append ( 'Some regular text and some ' ) doc . append ( italic ( 'italic text. ' ) ) with doc . create ( Subsection ( 'A subsection' ) ) : doc . append ( 'Also some crazy characters: $&#{}' )\n", "title": "", "metadata": ""}
{"_id": "6aae9b672b634977ba824d9441e5bbd5", "text": "def file_md5sum ( filename ) : hash_md5 = hashlib . md5 ( ) with open ( filename , 'rb' ) as f : for chunk in iter ( lambda : f . read ( 1024 * 4 ) , b'' ) : hash_md5 . update ( chunk ) return hash_md5 . hexdigest ( )\n", "title": "", "metadata": ""}
{"_id": "9c057adc68dae10aaf518a7f0ac46fd0", "text": "def get_previous ( self ) : return BillingCycle . objects . filter ( date_range__lt = self . date_range ) . order_by ( 'date_range' ) . last ( )\n", "title": "", "metadata": ""}
{"_id": "c0f17a0ec5085d44ebeddbe9be26b67a", "text": "def load_jsonf ( fpath , encoding ) : with codecs . open ( fpath , encoding = encoding ) as f : return json . load ( f )\n", "title": "", "metadata": ""}
{"_id": "f0934b3adbefcf6e092336ab4574f98d", "text": "def __next__ ( self , reward , ask_id , lbl ) : return self . next ( reward , ask_id , lbl )\n", "title": "", "metadata": ""}
{"_id": "ceeda32c0812cee738a4a14e9bada566", "text": "def _pad ( self , text ) : top_bottom = ( \"\\n\" * self . _padding ) + \" \" right_left = \" \" * self . _padding * self . PAD_WIDTH return top_bottom + right_left + text + right_left + top_bottom\n", "title": "", "metadata": ""}
{"_id": "754001c4bf1d66eae1f0366a0d1b02ec", "text": "def nonlocal_check ( self , original , loc , tokens ) : return self . check_py ( \"3\" , \"nonlocal statement\" , original , loc , tokens )\n", "title": "", "metadata": ""}
{"_id": "71fdcd8e4c3cfa702a602dd207783b4b", "text": "def get_column_names ( engine : Engine , tablename : str ) -> List [ str ] : return [ info . name for info in gen_columns_info ( engine , tablename ) ]\n", "title": "", "metadata": ""}
{"_id": "dfd2a97bff0bfd38d4ff42f167d3f91a", "text": "def request ( self , method , url , body = None , headers = { } ) : self . _send_request ( method , url , body , headers )\n", "title": "", "metadata": ""}
{"_id": "acfe9a5ae316e4bb6d0c3f81e0ee337f", "text": "def rotateImage ( image , angle ) : image = [ list ( row ) for row in image ] for n in range ( angle % 4 ) : image = list ( zip ( * image [ : : - 1 ] ) ) return image\n", "title": "", "metadata": ""}
{"_id": "af685c1926a15da1e30750cb6551843f", "text": "def dict_from_object ( obj : object ) : # If object is a dict instance, no need to convert. return ( obj if isinstance ( obj , dict ) else { attr : getattr ( obj , attr ) for attr in dir ( obj ) if not attr . startswith ( '_' ) } )\n", "title": "", "metadata": ""}
{"_id": "aa9835fa6b4979e66e0516ae8b73f208", "text": "def remove_once ( gset , elem ) : remove = getattr ( gset , 'remove' , None ) if remove is not None : remove ( elem ) else : del gset [ elem ] return elem\n", "title": "", "metadata": ""}
{"_id": "cc407cb98ee8366e906636948f90d1d2", "text": "def _isstring ( dtype ) : return dtype . type == numpy . unicode_ or dtype . type == numpy . string_\n", "title": "", "metadata": ""}
{"_id": "4f70b22830e684fb4ad099611621b7d1", "text": "def from_file ( file_path ) -> dict : with io . open ( file_path , 'r' , encoding = 'utf-8' ) as json_stream : return Json . parse ( json_stream , True )\n", "title": "", "metadata": ""}
{"_id": "d5c9e177a877ea15d3c1c131b3e087c2", "text": "def from_series ( cls , series ) : # TODO: add a 'name' parameter name = series . name df = pd . DataFrame ( { name : series } ) ds = Dataset . from_dataframe ( df ) return ds [ name ]\n", "title": "", "metadata": ""}
{"_id": "1d9731f610d1d25fa5c32eccf43883b1", "text": "def size ( dtype ) : dtype = tf . as_dtype ( dtype ) if hasattr ( dtype , 'size' ) : return dtype . size return np . dtype ( dtype ) . itemsize\n", "title": "", "metadata": ""}
{"_id": "19e50e0e6a06aca7d64eb8936dec3241", "text": "def closing_plugin ( self , cancelable = False ) : self . dialog_manager . close_all ( ) self . shell . exit_interpreter ( ) return True\n", "title": "", "metadata": ""}
{"_id": "5a586ac3256aa4cf57497afdf8171662", "text": "def load_object_by_name ( object_name ) : mod_name , attr = object_name . rsplit ( '.' , 1 ) mod = import_module ( mod_name ) return getattr ( mod , attr )\n", "title": "", "metadata": ""}
{"_id": "f4287435a5786a2a76b163fdde3a6e3e", "text": "def xml_str_to_dict ( s ) : xml = minidom . parseString ( s ) return pythonzimbra . tools . xmlserializer . dom_to_dict ( xml . firstChild )\n", "title": "", "metadata": ""}
{"_id": "d17915ebf6d2ad283a06bf21451ea777", "text": "def import_public_rsa_key_from_file ( filename ) : with open ( filename , \"rb\" ) as key_file : public_key = serialization . load_pem_public_key ( key_file . read ( ) , backend = default_backend ( ) ) return public_key\n", "title": "", "metadata": ""}
{"_id": "7109417c765c761bb67f5dde3c9cd0cd", "text": "def last_commit ( self ) -> Tuple : from libs . repos import git return git . get_last_commit ( repo_path = self . path )\n", "title": "", "metadata": ""}
{"_id": "1b8d3e5fb151f2b512525c923a7ad0a6", "text": "def clean_float ( v ) : if v is None or not str ( v ) . strip ( ) : return None return float ( str ( v ) . replace ( ',' , '' ) )\n", "title": "", "metadata": ""}
{"_id": "0eabed6d21054b27186f85635aa83294", "text": "def list2string ( inlist , delimit = ' ' ) : stringlist = [ makestr ( _ ) for _ in inlist ] return string . join ( stringlist , delimit )\n", "title": "", "metadata": ""}
{"_id": "f1761c2a66ae3cbf9670aa11745933cc", "text": "def _lookup_parent ( self , cls ) : codeobj = self . parent while codeobj is not None and not isinstance ( codeobj , cls ) : codeobj = codeobj . parent return codeobj\n", "title": "", "metadata": ""}
{"_id": "11615b0eda55537220fe88492f7b6764", "text": "def singleton ( class_ ) : instances = { } def get_instance ( * args , * * kwargs ) : if class_ not in instances : instances [ class_ ] = class_ ( * args , * * kwargs ) return instances [ class_ ] return get_instance\n", "title": "", "metadata": ""}
{"_id": "d421d042b8829755f441a3f865f87c81", "text": "def is_list_of_list ( item ) : if ( type ( item ) in ( list , tuple ) and len ( item ) and isinstance ( item [ 0 ] , ( list , tuple ) ) ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "c9c8513876867d68accd9c668a586783", "text": "def dot_v2 ( vec1 , vec2 ) : return vec1 . x * vec2 . x + vec1 . y * vec2 . y\n", "title": "", "metadata": ""}
{"_id": "1051fb2c4f559d431c43b3c7906602a5", "text": "def raise_for_not_ok_status ( response ) : if response . code != OK : raise HTTPError ( 'Non-200 response code (%s) for url: %s' % ( response . code , uridecode ( response . request . absoluteURI ) ) ) return response\n", "title": "", "metadata": ""}
{"_id": "97f8bbaa0c3c82560241e8fbcbe85c2f", "text": "def managepy ( cmd , extra = None ) : extra = extra . split ( ) if extra else [ ] run_django_cli ( [ 'invoke' , cmd ] + extra )\n", "title": "", "metadata": ""}
{"_id": "cd9ef47a926e6b4c41c1a24d37528b25", "text": "def dict_update_newkeys ( dict_ , dict2 ) : for key , val in six . iteritems ( dict2 ) : if key not in dict_ : dict_ [ key ] = val\n", "title": "", "metadata": ""}
{"_id": "aa0e74c74fce1bb9b2df72521124b47e", "text": "def set_title ( self , title , * * kwargs ) : ax = self . get_axes ( ) ax . set_title ( title , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "e58b91e0d247289a1634126e7431a2e6", "text": "def clean ( self , text ) : return '' . join ( [ c for c in text if c in self . alphabet ] )\n", "title": "", "metadata": ""}
{"_id": "27cfbe420d31db59c5b3628f08ef57bd", "text": "def get_last_weekday_in_month ( year , month , weekday ) : day = date ( year , month , monthrange ( year , month ) [ 1 ] ) while True : if day . weekday ( ) == weekday : break day = day - timedelta ( days = 1 ) return day\n", "title": "", "metadata": ""}
{"_id": "35abf1726c73d8b9ab049a383d4377db", "text": "def apply_argument_parser ( argumentsParser , options = None ) : if options is not None : args = argumentsParser . parse_args ( options ) else : args = argumentsParser . parse_args ( ) return args\n", "title": "", "metadata": ""}
{"_id": "86fc711f63f61347847d93d01bd4ad76", "text": "def test ( ) : command = 'nosetests --with-coverage --cover-package=pwnurl' status = subprocess . call ( shlex . split ( command ) ) sys . exit ( status )\n", "title": "", "metadata": ""}
{"_id": "20022e2fa5c68150c61d08e89ce51fa8", "text": "def _histplot_bins ( column , bins = 100 ) : col_min = np . min ( column ) col_max = np . max ( column ) return range ( col_min , col_max + 2 , max ( ( col_max - col_min ) // bins , 1 ) )\n", "title": "", "metadata": ""}
{"_id": "cf29269ca186833be5a5e598bf77c8af", "text": "def try_cast_int ( s ) : try : temp = re . findall ( '\\d' , str ( s ) ) temp = '' . join ( temp ) return int ( temp ) except : return s\n", "title": "", "metadata": ""}
{"_id": "f9987f0300cfb4c060b81834d3857f92", "text": "def get_common_elements ( list1 , list2 ) : #result = [] #for item in list1: #    if item in list2: #        result.append(item) #Return list(set(list1).intersection(set(list2))) set2 = set ( list2 ) result = [ item for item in list1 if item in set2 ] return result\n", "title": "", "metadata": ""}
{"_id": "d27f42a70fe08b87531c11ac7bcde144", "text": "def is_equal_strings_ignore_case ( first , second ) : if first and second : return first . upper ( ) == second . upper ( ) else : return not ( first or second )\n", "title": "", "metadata": ""}
{"_id": "c4e5b22240b8fa3760242011ab33cc3c", "text": "def most_common ( items ) : counts = { } for i in items : counts . setdefault ( i , 0 ) counts [ i ] += 1 return max ( six . iteritems ( counts ) , key = operator . itemgetter ( 1 ) )\n", "title": "", "metadata": ""}
{"_id": "0d8cf9ca1a5252e6040f22d58d221f21", "text": "def GaussianBlur ( X , ksize_width , ksize_height , sigma_x , sigma_y ) : return image_transform ( X , cv2 . GaussianBlur , ksize = ( ksize_width , ksize_height ) , sigmaX = sigma_x , sigmaY = sigma_y )\n", "title": "", "metadata": ""}
{"_id": "9e5acec7820b2598bbe9aba002d4be08", "text": "def jsonify ( resource ) : response = flask . jsonify ( resource . to_dict ( ) ) response = add_link_headers ( response , resource . links ( ) ) return response\n", "title": "", "metadata": ""}
{"_id": "5e4846b7c7689dde84959f962aa78470", "text": "def column_exists ( cr , table , column ) : cr . execute ( 'SELECT count(attname) FROM pg_attribute ' 'WHERE attrelid = ' '( SELECT oid FROM pg_class WHERE relname = %s ) ' 'AND attname = %s' , ( table , column ) ) return cr . fetchone ( ) [ 0 ] == 1\n", "title": "", "metadata": ""}
{"_id": "e3021062d6720dc05426d83e338066f9", "text": "def __call__ ( self , img ) : return F . pad ( img , self . padding , self . fill , self . padding_mode )\n", "title": "", "metadata": ""}
{"_id": "f1e572ea11e6715023fc228b58860615", "text": "def __remove_trailing_zeros ( self , collection ) : index = len ( collection ) - 1 while index >= 0 and collection [ index ] == 0 : index -= 1 return collection [ : index + 1 ]\n", "title": "", "metadata": ""}
{"_id": "a0708914688c490bd4d07f7dd86e2bfc", "text": "def snake_to_camel ( s : str ) -> str : fragments = s . split ( '_' ) return fragments [ 0 ] + '' . join ( x . title ( ) for x in fragments [ 1 : ] )\n", "title": "", "metadata": ""}
{"_id": "d849be63ccd9ff4b83a8a82c1a60fe42", "text": "def set_xlimits_widgets ( self , set_min = True , set_max = True ) : xmin , xmax = self . tab_plot . ax . get_xlim ( ) if set_min : self . w . x_lo . set_text ( '{0}' . format ( xmin ) ) if set_max : self . w . x_hi . set_text ( '{0}' . format ( xmax ) )\n", "title": "", "metadata": ""}
{"_id": "5a7ff417805d6d32b0d1580084defee4", "text": "def imp_print ( self , text , end ) : sys . stdout . write ( ( text + end ) . encode ( \"utf-8\" ) )\n", "title": "", "metadata": ""}
{"_id": "01ca29382b2e035cdcb25b89218341b8", "text": "def json_iter ( path ) : with open ( path , 'r' ) as f : for line in f . readlines ( ) : yield json . loads ( line )\n", "title": "", "metadata": ""}
{"_id": "3a9197742e6cc1941c5d043a0c8e20b9", "text": "def object_as_dict ( obj ) : return { c . key : getattr ( obj , c . key ) for c in inspect ( obj ) . mapper . column_attrs }\n", "title": "", "metadata": ""}
{"_id": "6a377f5101d46e8beefc15899a8f164a", "text": "def remove_last_line ( self ) : editor = self . _editor text_cursor = editor . textCursor ( ) text_cursor . movePosition ( text_cursor . End , text_cursor . MoveAnchor ) text_cursor . select ( text_cursor . LineUnderCursor ) text_cursor . removeSelectedText ( ) text_cursor . deletePreviousChar ( ) editor . setTextCursor ( text_cursor )\n", "title": "", "metadata": ""}
{"_id": "dad390f060c811a53b1969e03d67e6ac", "text": "def clean ( s ) : lines = [ l . rstrip ( ) for l in s . split ( '\\n' ) ] return '\\n' . join ( lines )\n", "title": "", "metadata": ""}
{"_id": "97a08d6873b55563df8851e34073a76a", "text": "def normalise_string ( string ) : string = ( string . strip ( ) ) . lower ( ) return re . sub ( r'\\W+' , '_' , string )\n", "title": "", "metadata": ""}
{"_id": "e5d9cd20aa3c9d4065dc9d1c594e2974", "text": "def get_memory ( self , mode ) : mem = { \"pre\" : self . _translator . get_memory_init ( ) , \"post\" : self . _translator . get_memory_curr ( ) , } return mem [ mode ]\n", "title": "", "metadata": ""}
{"_id": "c655914e6626d45176e8e67617f56728", "text": "def top ( self , topn = 10 ) : return [ self [ i ] for i in argsort ( list ( zip ( * self ) ) [ 1 ] ) [ : : - 1 ] [ : topn ] ]\n", "title": "", "metadata": ""}
{"_id": "079fae656f407f3b421cb1d85f176e31", "text": "def symlink_remove ( link ) : # https://stackoverflow.com/q/26554135/6400719 if os . path . isdir ( path2str ( link ) ) and is_windows : # this should only be on Py2.7 and windows os . rmdir ( path2str ( link ) ) else : os . unlink ( path2str ( link ) )\n", "title": "", "metadata": ""}
{"_id": "6f542c5842716e4683eff94a9c62cf25", "text": "def is_binary ( filename ) : with open ( filename , 'rb' ) as fp : data = fp . read ( 1024 ) if not data : return False if b'\\0' in data : return True return False\n", "title": "", "metadata": ""}
{"_id": "4968cf235f758e82a3a8858617919651", "text": "def gauss_pdf ( x , mu , sigma ) : return 1 / np . sqrt ( 2 * np . pi ) / sigma * np . exp ( - ( x - mu ) ** 2 / 2. / sigma ** 2 )\n", "title": "", "metadata": ""}
{"_id": "ffba807437a207125ca77279131475ab", "text": "def get_obj_cols ( df ) : obj_cols = [ ] for idx , dt in enumerate ( df . dtypes ) : if dt == 'object' or is_category ( dt ) : obj_cols . append ( df . columns . values [ idx ] ) return obj_cols\n", "title": "", "metadata": ""}
{"_id": "0d16242462d1a943c551567de50d8fb7", "text": "def _to_bstr ( l ) : if isinstance ( l , str ) : l = l . encode ( 'ascii' , 'backslashreplace' ) elif not isinstance ( l , bytes ) : l = str ( l ) . encode ( 'ascii' , 'backslashreplace' ) return l\n", "title": "", "metadata": ""}
{"_id": "b2a2282916e4de1d981eb866d9a1331a", "text": "def getpass ( self , prompt , default = None ) : return click . prompt ( prompt , hide_input = True , default = default )\n", "title": "", "metadata": ""}
{"_id": "32205ceed7eefbc9b6b059551e6c2c05", "text": "def to_int64 ( a ) : # build new dtype and replace i4 --> i8 def promote_i4 ( typestr ) : if typestr [ 1 : ] == 'i4' : typestr = typestr [ 0 ] + 'i8' return typestr dtype = [ ( name , promote_i4 ( typestr ) ) for name , typestr in a . dtype . descr ] return a . astype ( dtype )\n", "title": "", "metadata": ""}
{"_id": "fd2e220786b68af5f2fb3834e2de44c5", "text": "def toBase64 ( s ) : if isinstance ( s , str ) : s = s . encode ( \"utf-8\" ) return binascii . b2a_base64 ( s ) [ : - 1 ]\n", "title": "", "metadata": ""}
{"_id": "b12c53c9be8ab5d18600180118d4152f", "text": "def _read_json_file ( self , json_file ) : self . log . debug ( \"Reading '%s' JSON file...\" % json_file ) with open ( json_file , 'r' ) as f : return json . load ( f , object_pairs_hook = OrderedDict )\n", "title": "", "metadata": ""}
{"_id": "12b0ad183ba2bc5d7aef65effd294995", "text": "def round_to_float ( number , precision ) : rounded = Decimal ( str ( floor ( ( number + precision / 2 ) // precision ) ) ) * Decimal ( str ( precision ) ) return float ( rounded )\n", "title": "", "metadata": ""}
{"_id": "6a47470129725bc83bc91235187a7f26", "text": "def perform_permissions_check ( self , user , obj , perms ) : return self . request . forum_permission_handler . can_download_files ( obj , user )\n", "title": "", "metadata": ""}
{"_id": "bb18a90dedb4f18ecc4a2820539e5c75", "text": "def _set_scroll_v ( self , * args ) : self . _canvas_categories . yview ( * args ) self . _canvas_scroll . yview ( * args )\n", "title": "", "metadata": ""}
{"_id": "6ccc3ac09859baa185340856b359e86d", "text": "def paginate ( self , request , offset = 0 , limit = None ) : return self . collection . offset ( offset ) . limit ( limit ) , self . collection . count ( )\n", "title": "", "metadata": ""}
{"_id": "989d8470584d86a4eeb53b850117dec6", "text": "def is_sequence ( obj ) : return isinstance ( obj , Sequence ) and not ( isinstance ( obj , str ) or BinaryClass . is_valid_type ( obj ) )\n", "title": "", "metadata": ""}
{"_id": "46ea23dfb01b495bc895b73a4cc94eb0", "text": "def cfloat64_array_to_numpy ( cptr , length ) : if isinstance ( cptr , ctypes . POINTER ( ctypes . c_double ) ) : return np . fromiter ( cptr , dtype = np . float64 , count = length ) else : raise RuntimeError ( 'Expected double pointer' )\n", "title": "", "metadata": ""}
{"_id": "6d23414d31c4fdbb2cb7f547f4b1bb19", "text": "def image_set_aspect ( aspect = 1.0 , axes = \"gca\" ) : if axes is \"gca\" : axes = _pylab . gca ( ) e = axes . get_images ( ) [ 0 ] . get_extent ( ) axes . set_aspect ( abs ( ( e [ 1 ] - e [ 0 ] ) / ( e [ 3 ] - e [ 2 ] ) ) / aspect )\n", "title": "", "metadata": ""}
{"_id": "d548be734641dfa5907558f70104a8c1", "text": "def _int64_feature ( value ) : if not isinstance ( value , list ) : value = [ value ] return tf . train . Feature ( int64_list = tf . train . Int64List ( value = value ) )\n", "title": "", "metadata": ""}
{"_id": "1274281b66831cb008fbd87e382b7fb6", "text": "def save ( variable , filename ) : fileObj = open ( filename , 'wb' ) pickle . dump ( variable , fileObj ) fileObj . close ( )\n", "title": "", "metadata": ""}
{"_id": "289bbdaa86cce9231f9213ceb567c434", "text": "def respond_redirect ( self , location = '/' ) : self . send_response ( 301 ) self . send_header ( 'Content-Length' , 0 ) self . send_header ( 'Location' , location ) self . end_headers ( ) return\n", "title": "", "metadata": ""}
{"_id": "a86b66da94ea089c6b98d32eaabcada3", "text": "def stretch ( iterable , n = 2 ) : times = range ( n ) for item in iterable : for i in times : yield item\n", "title": "", "metadata": ""}
{"_id": "ca91fc7b9d7649aa893cf98fc113e200", "text": "def bytes_base64 ( x ) : if six . PY2 : return base64 . encodestring ( x ) . replace ( '\\n' , '' ) return base64 . encodebytes ( bytes_encode ( x ) ) . replace ( b'\\n' , b'' )\n", "title": "", "metadata": ""}
{"_id": "9329c7d443481e3a280264af2e8ade7f", "text": "def nb_to_python ( nb_path ) : exporter = python . PythonExporter ( ) output , resources = exporter . from_filename ( nb_path ) return output\n", "title": "", "metadata": ""}
{"_id": "ede867278381897e90e4165ac656d932", "text": "def magnitude ( X ) : r = np . real ( X ) i = np . imag ( X ) return np . sqrt ( r * r + i * i )\n", "title": "", "metadata": ""}
{"_id": "5cb108fb21441e2217a66590245f92bf", "text": "def empty_tree ( input_list ) : for item in input_list : if not isinstance ( item , list ) or not empty_tree ( item ) : return False return True\n", "title": "", "metadata": ""}
{"_id": "60dd32395a4c4400eba7c145aa0de55c", "text": "def has_parent ( self , term ) : for parent in self . parents : if parent . item_id == term or parent . has_parent ( term ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "95a49ede8d9d16af3091a43775d5e7ab", "text": "def close ( self ) : if not self . closed : self . closed = True self . _flush ( finish = True ) self . _buffer = None\n", "title": "", "metadata": ""}
{"_id": "17a5be67f969d1bb6ef58d901c331407", "text": "def call_fset ( self , obj , value ) -> None : vars ( obj ) [ self . name ] = self . fset ( obj , value )\n", "title": "", "metadata": ""}
{"_id": "3bd6a8ad1e5c3ca98c085c8079dec1ec", "text": "def release_lock ( ) : get_lock . n_lock -= 1 assert get_lock . n_lock >= 0 # Only really release lock once all lock requests have ended. if get_lock . lock_is_enabled and get_lock . n_lock == 0 : get_lock . start_time = None get_lock . unlocker . unlock ( )\n", "title": "", "metadata": ""}
{"_id": "ebcbe966895d5105290937eb0fd1462a", "text": "def compare ( dicts ) : common_members = { } common_keys = reduce ( lambda x , y : x & y , map ( dict . keys , dicts ) ) for k in common_keys : common_members [ k ] = list ( reduce ( lambda x , y : x & y , [ set ( d [ k ] ) for d in dicts ] ) ) return common_members\n", "title": "", "metadata": ""}
{"_id": "7d67ac38ce9c82d82865fe3afab5e1f3", "text": "def ver_to_tuple ( value ) : return tuple ( int ( _f ) for _f in re . split ( r'\\D+' , value ) if _f )\n", "title": "", "metadata": ""}
{"_id": "619d0d907dd8415d95e6a1aa3b76d313", "text": "def is_timestamp ( instance ) : if not isinstance ( instance , ( int , str ) ) : return True return datetime . fromtimestamp ( int ( instance ) )\n", "title": "", "metadata": ""}
{"_id": "0ef8ee6a986f8bcf488176df2e415ad0", "text": "def heappop_max ( heap ) : lastelt = heap . pop ( ) # raises appropriate IndexError if heap is empty if heap : returnitem = heap [ 0 ] heap [ 0 ] = lastelt _siftup_max ( heap , 0 ) return returnitem return lastelt\n", "title": "", "metadata": ""}
{"_id": "8ee9dd7b8788f62db5d96a84ed6f69cf", "text": "async def load_unicode ( reader ) : ivalue = await load_uvarint ( reader ) fvalue = bytearray ( ivalue ) await reader . areadinto ( fvalue ) return str ( fvalue , 'utf8' )\n", "title": "", "metadata": ""}
{"_id": "edc29d075ecb5733bf76afbd1eb95c15", "text": "def rewindbody ( self ) : if not self . seekable : raise IOError , \"unseekable file\" self . fp . seek ( self . startofbody )\n", "title": "", "metadata": ""}
{"_id": "24b027d4ff704621a539233a7296d5b8", "text": "def contains_empty ( features ) : if not features : return True for feature in features : if feature . shape [ 0 ] == 0 : return True return False\n", "title": "", "metadata": ""}
{"_id": "6123986a471945cc025730032341c1f5", "text": "def run ( self ) : self . signal_init ( ) self . listen_init ( ) self . logger . info ( 'starting' ) self . loop . start ( )\n", "title": "", "metadata": ""}
{"_id": "d52f785fae5b6924fc9b1b0baedb7eec", "text": "def print ( * a ) : try : _print ( * a ) return a [ 0 ] if len ( a ) == 1 else a except : _print ( * a )\n", "title": "", "metadata": ""}
{"_id": "1330e4d0da6223d8567c650e26146dc2", "text": "def log_no_newline ( self , msg ) : self . print2file ( self . logfile , False , False , msg )\n", "title": "", "metadata": ""}
{"_id": "945dbdc1c93fb2c02f403598ae702a70", "text": "def to_dotfile ( G : nx . DiGraph , filename : str ) : A = to_agraph ( G ) A . write ( filename )\n", "title": "", "metadata": ""}
{"_id": "ecf8cc55d76c6572fd6cfd2980876060", "text": "def normalize ( numbers ) : total = float ( sum ( numbers ) ) return [ n / total for n in numbers ]\n", "title": "", "metadata": ""}
{"_id": "16bd21061ff007d09ca6fb843834ec71", "text": "def torecarray ( * args , * * kwargs ) : import numpy as np return toarray ( * args , * * kwargs ) . view ( np . recarray )\n", "title": "", "metadata": ""}
{"_id": "8d02a6c6c6a8d0514150a1d6b944e85c", "text": "def get_http_method ( self , method ) : return self . http_methods [ method ] ( self . url , * * self . http_method_args )\n", "title": "", "metadata": ""}
{"_id": "c50df3b056e25f1044fb4875643a0978", "text": "def normal_noise ( points ) : return np . random . rand ( 1 ) * np . random . randn ( points , 1 ) + random . sample ( [ 2 , - 2 ] , 1 )\n", "title": "", "metadata": ""}
{"_id": "d88ca409d942876503ae2950a13d70a4", "text": "def input_int_default ( question = \"\" , default = 0 ) : answer = input_string ( question ) if answer == \"\" or answer == \"yes\" : return default else : return int ( answer )\n", "title": "", "metadata": ""}
{"_id": "082e6de6916ad0bf2d232bc7f12b1dfc", "text": "def allsame ( list_ , strict = True ) : if len ( list_ ) == 0 : return True first_item = list_ [ 0 ] return list_all_eq_to ( list_ , first_item , strict )\n", "title": "", "metadata": ""}
{"_id": "3aada47bca8d95db3c17128ab424cbb2", "text": "def var ( series ) : if np . issubdtype ( series . dtype , np . number ) : return series . var ( ) else : return np . nan\n", "title": "", "metadata": ""}
{"_id": "8122add8d94f6abb17eb7ce728b8cc9f", "text": "def case_us2mc ( x ) : return re . sub ( r'_([a-z])' , lambda m : ( m . group ( 1 ) . upper ( ) ) , x )\n", "title": "", "metadata": ""}
{"_id": "d754734f3d331b3927da3dc529b22fe1", "text": "def title ( msg ) : if sys . platform . startswith ( \"win\" ) : ctypes . windll . kernel32 . SetConsoleTitleW ( tounicode ( msg ) )\n", "title": "", "metadata": ""}
{"_id": "5d4c01e0e042b4b1691fa36e676dcf0f", "text": "def _load_data ( filepath ) : with h5py . File ( filepath , \"r\" ) as h5dataset : image_array = np . array ( h5dataset [ \"images\" ] ) # The 'label' data set in the hdf5 file actually contains the float values # and not the class labels. values_array = np . array ( h5dataset [ \"labels\" ] ) return image_array , values_array\n", "title": "", "metadata": ""}
{"_id": "bbf642c6f0029ee7285faf5d01a9b398", "text": "def notin ( arg , values ) : op = ops . NotContains ( arg , values ) return op . to_expr ( )\n", "title": "", "metadata": ""}
{"_id": "dff7164899923069ba20d0086b8a2294", "text": "def select_from_array ( cls , array , identifier ) : base_array = np . zeros ( array . shape ) array_coords = np . where ( array == identifier ) base_array [ array_coords ] = 1 return cls ( base_array )\n", "title": "", "metadata": ""}
{"_id": "2a735b0884a98086c953452730f35098", "text": "def to_dict ( self ) : return { 'schema' : self . schema , 'name' : self . name , 'columns' : [ col . to_dict ( ) for col in self . _columns ] , 'foreign_keys' : self . foreign_keys . to_dict ( ) , 'ref_keys' : self . ref_keys . to_dict ( ) }\n", "title": "", "metadata": ""}
{"_id": "8872e580e331144c20d1540eda485b85", "text": "def get_property_as_float ( self , name : str ) -> float : return float ( self . __instrument . get_property ( name ) )\n", "title": "", "metadata": ""}
{"_id": "0310fe3c374bd0423356353e333a4742", "text": "def get_pylint_options ( config_dir = '.' ) : # type: (str) -> List[str] if PYLINT_CONFIG_NAME in os . listdir ( config_dir ) : pylint_config_path = PYLINT_CONFIG_NAME else : pylint_config_path = DEFAULT_PYLINT_CONFIG_PATH return [ '--rcfile={}' . format ( pylint_config_path ) ]\n", "title": "", "metadata": ""}
{"_id": "36f990271a3b849b6344a8933748de3a", "text": "def describe_enum_value ( enum_value ) : enum_value_descriptor = EnumValueDescriptor ( ) enum_value_descriptor . name = six . text_type ( enum_value . name ) enum_value_descriptor . number = enum_value . number return enum_value_descriptor\n", "title": "", "metadata": ""}
{"_id": "d022182472bdcf79232604d4bb026ed8", "text": "def path_distance ( points ) : vecs = np . diff ( points , axis = 0 ) [ : , : 3 ] d2 = [ np . dot ( p , p ) for p in vecs ] return np . sum ( np . sqrt ( d2 ) )\n", "title": "", "metadata": ""}
{"_id": "a7228f617ab1812f8804dfb91a48ca60", "text": "def is_same_dict ( d1 , d2 ) : for k , v in d1 . items ( ) : if isinstance ( v , dict ) : is_same_dict ( v , d2 [ k ] ) else : assert d1 [ k ] == d2 [ k ] for k , v in d2 . items ( ) : if isinstance ( v , dict ) : is_same_dict ( v , d1 [ k ] ) else : assert d1 [ k ] == d2 [ k ]\n", "title": "", "metadata": ""}
{"_id": "b2cd284b6a4b2fd4625e0a954b62d473", "text": "def getIndex ( predicateFn : Callable [ [ T ] , bool ] , items : List [ T ] ) -> int : try : return next ( i for i , v in enumerate ( items ) if predicateFn ( v ) ) except StopIteration : return - 1\n", "title": "", "metadata": ""}
{"_id": "20d280bba8b05bf79e86670e11f951b2", "text": "def angle_to_cartesian ( lon , lat ) : theta = np . array ( np . pi / 2. - lat ) return np . vstack ( ( np . sin ( theta ) * np . cos ( lon ) , np . sin ( theta ) * np . sin ( lon ) , np . cos ( theta ) ) ) . T\n", "title": "", "metadata": ""}
{"_id": "223e99b3f6449f4c947432b09d5965ab", "text": "def now ( self ) : if self . use_utc : return datetime . datetime . utcnow ( ) else : return datetime . datetime . now ( )\n", "title": "", "metadata": ""}
{"_id": "cf5ec330478e04540f4d3d3959f9183c", "text": "def qrot ( vector , quaternion ) : t = 2 * np . cross ( quaternion [ 1 : ] , vector ) v_rot = vector + quaternion [ 0 ] * t + np . cross ( quaternion [ 1 : ] , t ) return v_rot\n", "title": "", "metadata": ""}
{"_id": "d7ce2eb497ac43feb771977986556d60", "text": "def match_files ( files , pattern : Pattern ) : for name in files : if re . match ( pattern , name ) : yield name\n", "title": "", "metadata": ""}
{"_id": "0d2abb4fd07df5db7724a6efbaa8bf4a", "text": "def _npiter ( arr ) : for a in np . nditer ( arr , flags = [ \"refs_ok\" ] ) : c = a . item ( ) if c is not None : yield c\n", "title": "", "metadata": ""}
{"_id": "1c908615ddf99b38e20ad51230b18f1d", "text": "def detokenize ( s ) : print ( s ) s = re . sub ( \"\\s+([;:,\\.\\?!])\" , \"\\\\1\" , s ) s = re . sub ( \"\\s+(n't)\" , \"\\\\1\" , s ) return s\n", "title": "", "metadata": ""}
{"_id": "e70436fbd13b2b3b6b66d923ca1c221f", "text": "def most_significant_bit ( lst : np . ndarray ) -> int : return np . argwhere ( np . asarray ( lst ) == 1 ) [ 0 ] [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "7a8f22984424cda1cf67f6404d4f2155", "text": "def enable_writes ( self ) : self . write_buffer = [ ] self . flush_lock = threading . RLock ( ) self . flush_thread = FlushThread ( self . max_batch_time , self . _flush_writes )\n", "title": "", "metadata": ""}
{"_id": "5493d5fdcf7eb6b0a56162d15e20659c", "text": "def get_idx_rect ( index_list ) : rows , cols = list ( zip ( * [ ( i . row ( ) , i . column ( ) ) for i in index_list ] ) ) return ( min ( rows ) , max ( rows ) , min ( cols ) , max ( cols ) )\n", "title": "", "metadata": ""}
{"_id": "09dff8ba31c171dbd1e2e8c8e51797d4", "text": "def clean_dataframe ( df ) : df = df . fillna ( method = 'ffill' ) df = df . fillna ( 0.0 ) return df\n", "title": "", "metadata": ""}
{"_id": "cb578ce092b16d8e706236fc2900b143", "text": "def _decode ( self , obj , context ) : return b'' . join ( map ( int2byte , [ c + 0x60 for c in bytearray ( obj ) ] ) ) . decode ( \"utf8\" )\n", "title": "", "metadata": ""}
{"_id": "a4f5e7f57740692ab58cfb42f56a2d0b", "text": "def getFieldsColumnLengths ( self ) : nameLen = 0 descLen = 0 for f in self . fields : nameLen = max ( nameLen , len ( f [ 'title' ] ) ) descLen = max ( descLen , len ( f [ 'description' ] ) ) return ( nameLen , descLen )\n", "title": "", "metadata": ""}
{"_id": "cb12735fb4d2e81b406ab5fcc7cbc731", "text": "def to_networkx ( graph ) : # import here so networkx is not always required. import networkx as nx nodes = graph [ \"nodes\" ] . keys ( ) edges = [ [ start , end ] for start , ends in graph [ \"links\" ] . items ( ) for end in ends ] g = nx . Graph ( ) g . add_nodes_from ( nodes ) nx . set_node_attributes ( g , dict ( graph [ \"nodes\" ] ) , \"membership\" ) g . add_edges_from ( edges ) return g\n", "title": "", "metadata": ""}
{"_id": "373d3f2544bbe6325f2429fefa36177e", "text": "def memory_used ( self ) : if self . _end_memory : memory_used = self . _end_memory - self . _start_memory return memory_used else : return None\n", "title": "", "metadata": ""}
{"_id": "a150acdaebe4f511edee1ec8d54d0d31", "text": "def remove_series ( self , series ) : if len ( self . all_series ( ) ) == 1 : raise ValueError ( \"Cannot remove last series from %s\" % str ( self ) ) self . _all_series . remove ( series ) series . _chart = None\n", "title": "", "metadata": ""}
{"_id": "44c75b050f548d2c0c9edc8ed1c4d930", "text": "def pop ( h ) : n = h . size ( ) - 1 h . swap ( 0 , n ) down ( h , 0 , n ) return h . pop ( )\n", "title": "", "metadata": ""}
{"_id": "c1f23b44a889e1bb581ddde2b5d85cf6", "text": "def read_numpy ( fh , byteorder , dtype , count , offsetsize ) : dtype = 'b' if dtype [ - 1 ] == 's' else byteorder + dtype [ - 1 ] return fh . read_array ( dtype , count )\n", "title": "", "metadata": ""}
{"_id": "8a7e0531f4ad8198ffae950efeb46d1d", "text": "def access_token ( self ) : access_token = self . session . get ( self . access_token_key ) if access_token : if not self . expires_at : # user provided access_token, just return it return access_token timestamp = time . time ( ) if self . expires_at - timestamp > 60 : return access_token self . fetch_access_token ( ) return self . session . get ( self . access_token_key )\n", "title": "", "metadata": ""}
{"_id": "758bffd40c9e536b8907a937097d2c56", "text": "def center_eigenvalue_diff ( mat ) : N = len ( mat ) evals = np . sort ( la . eigvals ( mat ) ) diff = np . abs ( evals [ N / 2 ] - evals [ N / 2 - 1 ] ) return diff\n", "title": "", "metadata": ""}
{"_id": "617871655dba40a7a75e890437526fe2", "text": "def save_dot ( self , fd ) : from pylon . io import DotWriter DotWriter ( self ) . write ( fd )\n", "title": "", "metadata": ""}
{"_id": "2bbb4821f626354e54ed6d6296cc3a11", "text": "def get_single_item ( d ) : assert len ( d ) == 1 , 'Single-item dict must have just one item, not %d.' % len ( d ) return next ( six . iteritems ( d ) )\n", "title": "", "metadata": ""}
{"_id": "6cdbebb03a34f3f583eff28e08481d8b", "text": "def create_env ( env_file ) : environ = { } with open ( env_file , 'r' ) as f : for line in f . readlines ( ) : line = line . rstrip ( os . linesep ) if '=' not in line : continue if line . startswith ( '#' ) : continue key , value = line . split ( '=' , 1 ) environ [ key ] = parse_value ( value ) return environ\n", "title": "", "metadata": ""}
{"_id": "db4de9a1c70fb24e946e27a259681cf3", "text": "def highpass ( cutoff ) : R = thub ( exp ( cutoff - pi ) , 2 ) return ( 1 - R ) / ( 1 + R * z ** - 1 )\n", "title": "", "metadata": ""}
{"_id": "0303bcec59591bd57acf2db1753604e4", "text": "def count_words ( file ) : c = Counter ( ) with open ( file , 'r' ) as f : for l in f : words = l . strip ( ) . split ( ) c . update ( words ) return c\n", "title": "", "metadata": ""}
{"_id": "e96e8ef51a624deb398e64ae50f1c961", "text": "def get_previous_month ( self ) : end = utils . get_month_start ( ) - relativedelta ( days = 1 ) end = utils . to_datetime ( end ) start = utils . get_month_start ( end ) return start , end\n", "title": "", "metadata": ""}
{"_id": "42b7f1cf7f9a7f6c45e2698ace36789a", "text": "def get_year_start ( day = None ) : day = add_timezone ( day or datetime . date . today ( ) ) return day . replace ( month = 1 ) . replace ( day = 1 )\n", "title": "", "metadata": ""}
{"_id": "fdf2943f522c3a315c803d8638fec2e0", "text": "def column_names ( self , table ) : table_info = self . execute ( u'PRAGMA table_info(%s)' % quote ( table ) ) return ( column [ 'name' ] for column in table_info )\n", "title": "", "metadata": ""}
{"_id": "3235dfa36cc42443ffbff6da5f3ab54e", "text": "def columnclean ( column ) : cleanedcolumn = str ( column ) . replace ( '%' , 'percent' ) . replace ( '(' , '_' ) . replace ( ')' , '' ) . replace ( 'As' , 'Adenosines' ) . replace ( 'Cs' , 'Cytosines' ) . replace ( 'Gs' , 'Guanines' ) . replace ( 'Ts' , 'Thymines' ) . replace ( 'Ns' , 'Unknowns' ) . replace ( 'index' , 'adapterIndex' ) return cleanedcolumn\n", "title": "", "metadata": ""}
{"_id": "95704caefcd6941a6d681d3bbe0266ce", "text": "def json ( body , charset = 'utf-8' , * * kwargs ) : return json_converter . loads ( text ( body , charset = charset ) )\n", "title": "", "metadata": ""}
{"_id": "95364cdde9dddb76cec1b1d466b8f90d", "text": "def get_remote_content ( filepath ) : with hide ( 'running' ) : temp = BytesIO ( ) get ( filepath , temp ) content = temp . getvalue ( ) . decode ( 'utf-8' ) return content . strip ( )\n", "title": "", "metadata": ""}
{"_id": "fae1aaefbee553476f678b6102ff96ff", "text": "def MatrixInverse ( a , adj ) : return np . linalg . inv ( a if not adj else _adjoint ( a ) ) ,\n", "title": "", "metadata": ""}
{"_id": "5feedcda3749cb969744ef5b9d3b3718", "text": "def is_cached ( file_name ) : gml_file_path = join ( join ( expanduser ( '~' ) , OCTOGRID_DIRECTORY ) , file_name ) return isfile ( gml_file_path )\n", "title": "", "metadata": ""}
{"_id": "1e352af2a88b2bfb5c33a272de6bc43b", "text": "def iprotate ( l , steps = 1 ) : if len ( l ) : steps %= len ( l ) if steps : firstPart = l [ : steps ] del l [ : steps ] l . extend ( firstPart ) return l\n", "title": "", "metadata": ""}
{"_id": "9371bda93a35e1451ba1aaa4fdc7e0af", "text": "def __init__ ( self , min_value , max_value , format = \"%(bar)s: %(percentage) 6.2f%% %(timeinfo)s\" , width = 40 , barchar = \"#\" , emptychar = \"-\" , output = sys . stdout ) : self . min_value = min_value self . max_value = max_value self . format = format self . width = width self . barchar = barchar self . emptychar = emptychar self . output = output self . firsttime = True self . prevtime = time . time ( ) self . starttime = self . prevtime self . prevfraction = 0 self . firsttimedone = False self . value = self . min_value\n", "title": "", "metadata": ""}
{"_id": "bb8149e33b99323aba8b7141957a3ebc", "text": "def return_letters_from_string ( text ) : out = \"\" for letter in text : if letter . isalpha ( ) : out += letter return out\n", "title": "", "metadata": ""}
{"_id": "4f0fda6201622b6b33bda7417a383099", "text": "def main ( argv = None ) : args = parse_arguments ( sys . argv if argv is None else argv ) tf . logging . set_verbosity ( tf . logging . INFO ) learn_runner . run ( experiment_fn = get_experiment_fn ( args ) , output_dir = args . job_dir )\n", "title": "", "metadata": ""}
{"_id": "f94048599f496bd1179aa54a91fa6a3f", "text": "def delete_all_from_db ( ) : # The models.CASCADE property is set on all ForeignKey fields, so tables can # be deleted in any order without breaking constraints. for model in django . apps . apps . get_models ( ) : model . objects . all ( ) . delete ( )\n", "title": "", "metadata": ""}
{"_id": "83b14831e16b04ebe41b8ca29a890788", "text": "def render_template ( content , context ) : rendered = Template ( content ) . render ( Context ( context ) ) return rendered\n", "title": "", "metadata": ""}
{"_id": "56d18458aecfe7ec72bce827fa9045a6", "text": "def timestamp_to_datetime ( timestamp ) : from datetime import datetime , timedelta obj = datetime . fromtimestamp ( timestamp [ 0 ] ) return obj + timedelta ( microseconds = int ( timestamp [ 1 ] ) )\n", "title": "", "metadata": ""}
{"_id": "00c597e0a189402f91101bad12f1fff9", "text": "def intersect ( d1 , d2 ) : return dict ( ( k , d1 [ k ] ) for k in d1 if k in d2 and d1 [ k ] == d2 [ k ] )\n", "title": "", "metadata": ""}
{"_id": "a4f9b2b5f7af63d4420788a79e0a8013", "text": "def moving_average ( array , n = 3 ) : ret = _np . cumsum ( array , dtype = float ) ret [ n : ] = ret [ n : ] - ret [ : - n ] return ret [ n - 1 : ] / n\n", "title": "", "metadata": ""}
{"_id": "399607f54e73109278bff6882f3ebb4a", "text": "def get_domain ( url ) : parse_result = urlparse ( url ) domain = \"{schema}://{netloc}\" . format ( schema = parse_result . scheme , netloc = parse_result . netloc ) return domain\n", "title": "", "metadata": ""}
{"_id": "30e8e24eaf427a2f03682b369e8fbfb5", "text": "def get_table_width ( table ) : columns = transpose_table ( prepare_rows ( table ) ) widths = [ max ( len ( cell ) for cell in column ) for column in columns ] return len ( '+' + '|' . join ( '-' * ( w + 2 ) for w in widths ) + '+' )\n", "title": "", "metadata": ""}
{"_id": "eb99c17731fc2316faa8a3c6dce0b0cb", "text": "def pretty_dict ( d ) : return '{%s}' % ', ' . join ( '%r: %r' % ( k , v ) for k , v in sorted ( d . items ( ) , key = repr ) )\n", "title": "", "metadata": ""}
{"_id": "f9ece27fed7afb84c501f811bbd3e9b0", "text": "def get_last_or_frame_exception ( ) : try : if inspect . istraceback ( sys . last_traceback ) : # We do have a traceback so prefer that. return sys . last_type , sys . last_value , sys . last_traceback except AttributeError : pass return sys . exc_info ( )\n", "title": "", "metadata": ""}
{"_id": "ff1f157cf2f8dac17bcd574231229a8f", "text": "def clean_strings ( iterable ) : retval = [ ] for val in iterable : try : retval . append ( val . strip ( ) ) except ( AttributeError ) : retval . append ( val ) return retval\n", "title": "", "metadata": ""}
{"_id": "c6a5c9470d5508cde536aefebb4b39d2", "text": "def es_field_sort ( fld_name ) : parts = fld_name . split ( \".\" ) if \"_\" not in parts [ - 1 ] : parts [ - 1 ] = \"_\" + parts [ - 1 ] return \".\" . join ( parts )\n", "title": "", "metadata": ""}
{"_id": "07320a68c58021e73ed19452b0c4f226", "text": "def _check_and_convert_bools ( self ) : replacements = { True : 'T' , False : 'F' , } for key in self . bools : if isinstance ( self [ key ] , bool ) : self [ key ] = replacements [ self [ key ] ]\n", "title": "", "metadata": ""}
{"_id": "c05a39925637eb9d44ecca2c729bdd87", "text": "def print_statements ( self ) : for i , stmt in enumerate ( self . statements ) : print ( \"%s: %s\" % ( i , stmt ) )\n", "title": "", "metadata": ""}
{"_id": "1c3ee2fd214495067fdcf943b8845c33", "text": "def js_classnameify ( s ) : if not '_' in s : return s return '' . join ( w [ 0 ] . upper ( ) + w [ 1 : ] . lower ( ) for w in s . split ( '_' ) )\n", "title": "", "metadata": ""}
{"_id": "24a279db97e133fbfbb31c1a8d4a9faf", "text": "def hline ( self , x , y , width , color ) : self . rect ( x , y , width , 1 , color , fill = True )\n", "title": "", "metadata": ""}
{"_id": "349d76601e284622c65b2f2af23e6bcc", "text": "def strip_accents ( text ) : normalized_str = unicodedata . normalize ( 'NFD' , text ) return '' . join ( [ c for c in normalized_str if unicodedata . category ( c ) != 'Mn' ] )\n", "title": "", "metadata": ""}
{"_id": "704afb154ddd7abc6eb6986ec74dc397", "text": "def is_json_file ( filename , show_warnings = False ) : try : config_dict = load_config ( filename , file_type = \"json\" ) is_json = True except : is_json = False return ( is_json )\n", "title": "", "metadata": ""}
{"_id": "6823cc77531e7fa7f78795c69776d4fb", "text": "def index ( ) : global productpage table = json2html . convert ( json = json . dumps ( productpage ) , table_attributes = \"class=\\\"table table-condensed table-bordered table-hover\\\"\" ) return render_template ( 'index.html' , serviceTable = table )\n", "title": "", "metadata": ""}
{"_id": "4f7f992431cfaa716aaf0a2f2ea0f4db", "text": "def pop ( self ) : if not self . empty ( ) : val = self . stack [ - 1 ] del self . stack [ - 1 ] return val\n", "title": "", "metadata": ""}
{"_id": "543b9a9a0589096c98b339e8da0de0db", "text": "def interact ( self , container : Container ) -> None : cmd = \"/bin/bash -c 'source /.environment && /bin/bash'\" cmd = \"docker exec -it {} {}\" . format ( container . id , cmd ) subprocess . call ( cmd , shell = True )\n", "title": "", "metadata": ""}
{"_id": "78de2b76a6230aa94798f7f457b7f6db", "text": "def comments ( self ) : if self . _comments is None : self . _comments = [ c for c in self . grammar . children if c . is_type ( TokenType . comment ) ] return self . _comments\n", "title": "", "metadata": ""}
{"_id": "a13aa2f3b1334dcea509377de9eed301", "text": "def raw_connection_from ( engine_or_conn ) : if hasattr ( engine_or_conn , 'cursor' ) : return engine_or_conn , False if hasattr ( engine_or_conn , 'connection' ) : return engine_or_conn . connection , False return engine_or_conn . raw_connection ( ) , True\n", "title": "", "metadata": ""}
{"_id": "8ee750b02f284d04966fa1937c2c32e6", "text": "def is_unicode ( string ) : str_type = str ( type ( string ) ) if str_type . find ( 'str' ) > 0 or str_type . find ( 'unicode' ) > 0 : return True return False\n", "title": "", "metadata": ""}
{"_id": "d7b4a4a14decfd198dca97f120205af7", "text": "def isarray ( array , test , dim = 2 ) : if dim > 1 : return all ( isarray ( array [ i ] , test , dim - 1 ) for i in range ( len ( array ) ) ) return all ( test ( i ) for i in array )\n", "title": "", "metadata": ""}
{"_id": "96884d83f956e016a66df316717adb07", "text": "def percentile_index ( a , q ) : return np . where ( a == np . percentile ( a , q , interpolation = 'nearest' ) ) [ 0 ] [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "8f5324114486a7c389fd8940ef90958e", "text": "def min_or_none ( val1 , val2 ) : return min ( val1 , val2 , key = lambda x : sys . maxint if x is None else x )\n", "title": "", "metadata": ""}
{"_id": "25c8e0dcd9cf6031948e9d6d201c30c2", "text": "def list_string_to_dict ( string ) : dictionary = { } for idx , c in enumerate ( string ) : dictionary . update ( { c : idx } ) return dictionary\n", "title": "", "metadata": ""}
{"_id": "8af9af3891992aab43904b2aeaa8384f", "text": "def __replace_all ( repls : dict , input : str ) -> str : return re . sub ( '|' . join ( re . escape ( key ) for key in repls . keys ( ) ) , lambda k : repls [ k . group ( 0 ) ] , input )\n", "title": "", "metadata": ""}
{"_id": "ef07933ae5c4501905bd296103703602", "text": "def _get_example_length ( example ) : length = tf . maximum ( tf . shape ( example [ 0 ] ) [ 0 ] , tf . shape ( example [ 1 ] ) [ 0 ] ) return length\n", "title": "", "metadata": ""}
{"_id": "3b5c71ee0b7918a73a5010f011eb431e", "text": "def issubset ( self , other ) : if len ( self ) > len ( other ) : # Fast check for obvious cases return False return all ( item in other for item in self )\n", "title": "", "metadata": ""}
{"_id": "7f31f244054c63a66600254761f93b57", "text": "def FromString ( self , string ) : if string . lower ( ) in ( \"false\" , \"no\" , \"n\" ) : return False if string . lower ( ) in ( \"true\" , \"yes\" , \"y\" ) : return True raise TypeValueError ( \"%s is not recognized as a boolean value.\" % string )\n", "title": "", "metadata": ""}
{"_id": "8ec1c0cbaf775c5857aabc305b37ff35", "text": "def get_list_index ( lst , index_or_name ) : if isinstance ( index_or_name , six . integer_types ) : return index_or_name return lst . index ( index_or_name )\n", "title": "", "metadata": ""}
{"_id": "b028e48686f062a86532b1a79a5d92f1", "text": "def genfirstvalues ( cursor : Cursor , arraysize : int = 1000 ) -> Generator [ Any , None , None ] : return ( row [ 0 ] for row in genrows ( cursor , arraysize ) )\n", "title": "", "metadata": ""}
{"_id": "d680b279ba8760ad296c23dccd4a7402", "text": "def _remove_dict_keys_with_value ( dict_ , val ) : return { k : v for k , v in dict_ . items ( ) if v is not val }\n", "title": "", "metadata": ""}
{"_id": "8f68f0c30268d920259266935066da12", "text": "def asynchronous ( function , event ) : thread = Thread ( target = synchronous , args = ( function , event ) ) thread . daemon = True thread . start ( )\n", "title": "", "metadata": ""}
{"_id": "87c6795b73cbed7a708e2e45af3f670f", "text": "def register_type ( cls , name ) : x = TypeDefinition ( name , ( cls , ) , ( ) ) Validator . types_mapping [ name ] = x\n", "title": "", "metadata": ""}
{"_id": "909cb133450e99e21ef09d298132ca02", "text": "def turn ( self ) : first = self . _data . pop ( 0 ) self . _data . append ( first )\n", "title": "", "metadata": ""}
{"_id": "2dd706171da7e74b46177924053bcfc9", "text": "def many_until1 ( these , term ) : first = [ these ( ) ] these_results , term_result = many_until ( these , term ) return ( first + these_results , term_result )\n", "title": "", "metadata": ""}
{"_id": "12ecefdd6bc394d0b0435fc5d253a0d0", "text": "def fft_bandpassfilter ( data , fs , lowcut , highcut ) : fft = np . fft . fft ( data ) # n = len(data) # timestep = 1.0 / fs # freq = np.fft.fftfreq(n, d=timestep) bp = fft . copy ( ) # Zero out fft coefficients # bp[10:-10] = 0 # Normalise # bp *= real(fft.dot(fft))/real(bp.dot(bp)) bp *= fft . dot ( fft ) / bp . dot ( bp ) # must multipy by 2 to get the correct amplitude ibp = 12 * np . fft . ifft ( bp ) return ibp\n", "title": "", "metadata": ""}
{"_id": "87e76c92e8c1ba117de14b343a2bf51e", "text": "def osx_clipboard_get ( ) : p = subprocess . Popen ( [ 'pbpaste' , '-Prefer' , 'ascii' ] , stdout = subprocess . PIPE ) text , stderr = p . communicate ( ) # Text comes in with old Mac \\r line endings. Change them to \\n. text = text . replace ( '\\r' , '\\n' ) return text\n", "title": "", "metadata": ""}
{"_id": "99d064656172152b402ab1d0e6a1fc1f", "text": "def numeric_part ( s ) : m = re_numeric_part . match ( s ) if m : return int ( m . group ( 1 ) ) return None\n", "title": "", "metadata": ""}
{"_id": "2831f0e3072e709bd0d1d60d4c35617d", "text": "def delete ( filething ) : t = MP4 ( filething ) filething . fileobj . seek ( 0 ) t . delete ( filething )\n", "title": "", "metadata": ""}
{"_id": "47a84abb081c862fb8c5fc26450c5e6f", "text": "def main_func ( args = None ) : # we have to initialize a gui even if we dont need one right now. # as soon as you call maya.standalone.initialize(), a QApplication # with type Tty is created. This is the type for conosle apps. # Because i have not found a way to replace that, we just init the gui. guimain . init_gui ( ) main . init ( ) launcher = Launcher ( ) parsed , unknown = launcher . parse_args ( args ) parsed . func ( parsed , unknown )\n", "title": "", "metadata": ""}
{"_id": "2a0dc24eddfc2469267ce514c0e6970f", "text": "def copy ( self ) : return self . __class__ ( field_type = self . get_field_type ( ) , data = self . export_data ( ) )\n", "title": "", "metadata": ""}
{"_id": "98ac719837c2a88d956544f04884a2ae", "text": "def is_valid_file ( parser , arg ) : arg = os . path . abspath ( arg ) if not os . path . exists ( arg ) : parser . error ( \"The file %s does not exist!\" % arg ) else : return arg\n", "title": "", "metadata": ""}
{"_id": "9d8bedce377ea1f6e9adf17d837e49d6", "text": "def DeleteIndex ( self , index ) : to_remove = None for i in self . Items : if i . index == index : to_remove = i if to_remove : self . Items . remove ( to_remove )\n", "title": "", "metadata": ""}
{"_id": "81d616e0fdad1e3f8afa2f393499c04c", "text": "def _repr ( obj ) : vals = \", \" . join ( \"{}={!r}\" . format ( name , getattr ( obj , name ) ) for name in obj . _attribs ) if vals : t = \"{}(name={}, {})\" . format ( obj . __class__ . __name__ , obj . name , vals ) else : t = \"{}(name={})\" . format ( obj . __class__ . __name__ , obj . name ) return t\n", "title": "", "metadata": ""}
{"_id": "93f50d563933a50e2b98953194442eec", "text": "def list2dict ( lst ) : dic = { } for k , v in lst : dic [ k ] = v return dic\n", "title": "", "metadata": ""}
{"_id": "10b33d89e9db8d6a68b0f732c87431c0", "text": "def _is_proper_sequence ( seq ) : return ( isinstance ( seq , collections . abc . Sequence ) and not isinstance ( seq , str ) )\n", "title": "", "metadata": ""}
{"_id": "c5313b94bee684afd07084431cf83490", "text": "def get_count ( self , query ) : count_q = query . statement . with_only_columns ( [ func . count ( ) ] ) . order_by ( None ) count = query . session . execute ( count_q ) . scalar ( ) return count\n", "title": "", "metadata": ""}
{"_id": "b254f3230a70ff38f61ab4db663220d7", "text": "def save_session ( self , sid , session , namespace = None ) : return self . server . save_session ( sid , session , namespace = namespace or self . namespace )\n", "title": "", "metadata": ""}
{"_id": "f3480c7830e7b546522fb2c2f7e045e0", "text": "def _time_to_json ( value ) : if isinstance ( value , datetime . time ) : value = value . isoformat ( ) return value\n", "title": "", "metadata": ""}
{"_id": "e00beee4df47d2ad27fd65cec97f3844", "text": "def combinations ( l ) : result = [ ] for x in xrange ( len ( l ) - 1 ) : ls = l [ x + 1 : ] for y in ls : result . append ( ( l [ x ] , y ) ) return result\n", "title": "", "metadata": ""}
{"_id": "94d2660dbb7f801f3ed3d5b32e45bed0", "text": "def has_edit_permission ( self , request ) : return request . user . is_authenticated and request . user . is_active and request . user . is_staff\n", "title": "", "metadata": ""}
{"_id": "f6ea0fd0178dc459b4736d1e9293df9d", "text": "def is_punctuation ( text ) : return not ( text . lower ( ) in config . AVRO_VOWELS or text . lower ( ) in config . AVRO_CONSONANTS )\n", "title": "", "metadata": ""}
{"_id": "910be34cf65282a2bc318af43c67e2b7", "text": "def _clip ( sid , prefix ) : return sid [ len ( prefix ) : ] if sid . startswith ( prefix ) else sid\n", "title": "", "metadata": ""}
{"_id": "140e19dbec9685e134aa9fd554eff0be", "text": "def region_from_segment ( image , segment ) : x , y , w , h = segment return image [ y : y + h , x : x + w ]\n", "title": "", "metadata": ""}
{"_id": "122b77697e128546ca2d9370f08342ae", "text": "def sortBy ( self , keyfunc , ascending = True , numPartitions = None ) : return self . keyBy ( keyfunc ) . sortByKey ( ascending , numPartitions ) . values ( )\n", "title": "", "metadata": ""}
{"_id": "7a54c4f4ea25aed51eb6013afd375dbd", "text": "def forget_canvas ( canvas ) : cc = [ c ( ) for c in canvasses if c ( ) is not None ] while canvas in cc : cc . remove ( canvas ) canvasses [ : ] = [ weakref . ref ( c ) for c in cc ]\n", "title": "", "metadata": ""}
{"_id": "b2303d447445632db2d791ec4fa0544c", "text": "def get_bucket_page ( page ) : key_list = page . get ( 'Contents' , [ ] ) logger . debug ( \"Retrieving page with {} keys\" . format ( len ( key_list ) , ) ) return dict ( ( k . get ( 'Key' ) , k ) for k in key_list )\n", "title": "", "metadata": ""}
{"_id": "4a122dca2fc5aecc5003cf0740a04f3a", "text": "def get_distance_matrix ( x ) : square = nd . sum ( x ** 2.0 , axis = 1 , keepdims = True ) distance_square = square + square . transpose ( ) - ( 2.0 * nd . dot ( x , x . transpose ( ) ) ) return nd . sqrt ( distance_square )\n", "title": "", "metadata": ""}
{"_id": "d38accfebb1d2eef9c3c844c3250841f", "text": "def reseed_random ( seed ) : r = random . Random ( seed ) random_internal_state = r . getstate ( ) set_random_state ( random_internal_state )\n", "title": "", "metadata": ""}
{"_id": "3c26b8ddd315665c8395ff2b39a7d0e5", "text": "def post_tweet ( user_id , message , additional_params = { } ) : url = \"https://api.twitter.com/1.1/statuses/update.json\" params = { \"status\" : message } params . update ( additional_params ) r = make_twitter_request ( url , user_id , params , request_type = 'POST' ) print ( r . text ) return \"Successfully posted a tweet {}\" . format ( message )\n", "title": "", "metadata": ""}
{"_id": "43c4c9c1839cf0a602cbe515489d8db0", "text": "def __connect ( ) : global redis_instance if use_tcp_socket : redis_instance = redis . StrictRedis ( host = hostname , port = port ) else : redis_instance = redis . StrictRedis ( unix_socket_path = unix_socket )\n", "title": "", "metadata": ""}
{"_id": "e7425d926d497abfa95a0fff1eef6770", "text": "def round_array ( array_in ) : if isinstance ( array_in , ndarray ) : return np . round ( array_in ) . astype ( int ) else : return int ( np . round ( array_in ) )\n", "title": "", "metadata": ""}
{"_id": "d5747c2cbebd54d45b4395b6783de236", "text": "def print_out ( self , * lst ) : self . print2file ( self . stdout , True , True , * lst )\n", "title": "", "metadata": ""}
{"_id": "9688737cfc1a7a406bcbce7d3444a600", "text": "def has_synset ( word : str ) -> list : return wn . synsets ( lemmatize ( word , neverstem = True ) )\n", "title": "", "metadata": ""}
{"_id": "cef5b6cf6922b9b7492984889dc2d49e", "text": "def server ( port ) : args = [ 'python' , 'manage.py' , 'runserver' ] if port : args . append ( port ) run . main ( args )\n", "title": "", "metadata": ""}
{"_id": "88b4961804bd9841fa870dba0b69793d", "text": "def quote ( self , s ) : if six . PY2 : from pipes import quote else : from shlex import quote return quote ( s )\n", "title": "", "metadata": ""}
{"_id": "d78e969a08679faeb7cb04a543d2b419", "text": "def _cnx_is_empty ( in_file ) : with open ( in_file ) as in_handle : for i , line in enumerate ( in_handle ) : if i > 0 : return False return True\n", "title": "", "metadata": ""}
{"_id": "289e02171b14040511b11249d4c179ee", "text": "def get_element_attribute_or_empty ( element , attribute_name ) : return element . attributes [ attribute_name ] . value if element . hasAttribute ( attribute_name ) else \"\"\n", "title": "", "metadata": ""}
{"_id": "2437c5d4905ab4bbd4f80881e8df2891", "text": "def _std ( self , x ) : return np . nanstd ( x . values , ddof = self . _ddof )\n", "title": "", "metadata": ""}
{"_id": "8a0fc667712fcb2c5e9cc384d6a1d08c", "text": "def generate_seed ( seed ) : if seed is None : random . seed ( ) seed = random . randint ( 0 , sys . maxsize ) random . seed ( a = seed ) return seed\n", "title": "", "metadata": ""}
{"_id": "8aa8fca749164701b74c9076cac12541", "text": "def parsed_args ( ) : parser = argparse . ArgumentParser ( description = \"\"\"python runtime functions\"\"\" , epilog = \"\" ) parser . add_argument ( 'command' , nargs = '*' , help = \"Name of the function to run with arguments\" ) args = parser . parse_args ( ) return ( args , parser )\n", "title": "", "metadata": ""}
{"_id": "75ab541d31ef21b5b61c1c6fe81de4a6", "text": "def setDictDefaults ( d , defaults ) : for key , val in defaults . items ( ) : d . setdefault ( key , val ) return d\n", "title": "", "metadata": ""}
{"_id": "750ae0512f4061474a10ac0621e656a6", "text": "def resize_image_to_fit_width ( image , dest_w ) : scale_factor = dest_w / image . size [ 0 ] dest_h = image . size [ 1 ] * scale_factor scaled_image = image . resize ( ( int ( dest_w ) , int ( dest_h ) ) , PIL . Image . ANTIALIAS ) return scaled_image\n", "title": "", "metadata": ""}
{"_id": "d6a7252d2f0556d7a0d52f596f5e186c", "text": "def delistify ( x ) : if isinstance ( x , list ) : x = [ e . replace ( \"'\" , \"\" ) for e in x ] return '-' . join ( sorted ( x ) ) return x\n", "title": "", "metadata": ""}
{"_id": "d73a9ab42c01845128c929274b5eab4d", "text": "def top ( n , width = WIDTH , style = STYLE ) : return hrule ( n , width , linestyle = STYLES [ style ] . top )\n", "title": "", "metadata": ""}
{"_id": "293a03dba4388435ddd3bd57678c1dbf", "text": "def execute_in_background ( self ) : # http://stackoverflow.com/questions/1605520 args = shlex . split ( self . cmd ) p = Popen ( args ) return p . pid\n", "title": "", "metadata": ""}
{"_id": "7bff0651054034b5b27084364797c82b", "text": "def remove_blank_lines ( string ) : return \"\\n\" . join ( line for line in string . split ( \"\\n\" ) if len ( line . strip ( ) ) )\n", "title": "", "metadata": ""}
{"_id": "e57372060086b0d011fff5c6f689b1a0", "text": "def command_py2to3 ( args ) : from lib2to3 . main import main sys . exit ( main ( \"lib2to3.fixes\" , args = args . sources ) )\n", "title": "", "metadata": ""}
{"_id": "2b081b7dd47c73c681492ada8d02929b", "text": "def is_listish ( obj ) : if isinstance ( obj , ( list , tuple , set ) ) : return True return is_sequence ( obj )\n", "title": "", "metadata": ""}
{"_id": "85b35a2aa6729908ce27c5af68e69862", "text": "def write_tsv_line_from_list ( linelist , outfp ) : line = '\\t' . join ( linelist ) outfp . write ( line ) outfp . write ( '\\n' )\n", "title": "", "metadata": ""}
{"_id": "6765f81223d19405b85c65452e3ce970", "text": "def send ( r , stream = False ) : r . send ( stream = stream ) return r . response\n", "title": "", "metadata": ""}
{"_id": "98eb6315eb31dad3860f6b38a53d437b", "text": "def security ( self ) : return { k : v for i in self . pdf . resolvedObjects . items ( ) for k , v in i [ 1 ] . items ( ) }\n", "title": "", "metadata": ""}
{"_id": "9b7e63ac1b0662bb1058a1e35df8fd1d", "text": "def kwargs_to_string ( kwargs ) : outstr = '' for arg in kwargs : outstr += ' -{} {}' . format ( arg , kwargs [ arg ] ) return outstr\n", "title": "", "metadata": ""}
{"_id": "946065e4fb3ce7766fbba77d9b91d2a3", "text": "def __eq__ ( self , other ) : return isinstance ( other , self . __class__ ) and self . _freeze ( ) == other . _freeze ( )\n", "title": "", "metadata": ""}
{"_id": "95d949831798f6483f6644a546291fff", "text": "def camel_case_from_underscores ( string ) : components = string . split ( '_' ) string = '' for component in components : string += component [ 0 ] . upper ( ) + component [ 1 : ] return string\n", "title": "", "metadata": ""}
{"_id": "7cb6fab31a35dc24cf8a3e0c9f69eac2", "text": "def setdefault ( obj , field , default ) : setattr ( obj , field , getattr ( obj , field , default ) )\n", "title": "", "metadata": ""}
{"_id": "a83116a969b7d3a76880407f9667b127", "text": "def has_attribute ( module_name , attribute_name ) : init_file = '%s/__init__.py' % module_name return any ( [ attribute_name in init_line for init_line in open ( init_file ) . readlines ( ) ] )\n", "title": "", "metadata": ""}
{"_id": "57cc9fcd2fa8225407798cbb17de5072", "text": "def dump_json ( obj ) : return simplejson . dumps ( obj , ignore_nan = True , default = json_util . default )\n", "title": "", "metadata": ""}
{"_id": "2d2c09df0af9cfb562cdbe3233cc2af9", "text": "def xmltreefromfile ( filename ) : try : return ElementTree . parse ( filename , ElementTree . XMLParser ( collect_ids = False ) ) except TypeError : return ElementTree . parse ( filename , ElementTree . XMLParser ( ) )\n", "title": "", "metadata": ""}
{"_id": "436ecf00e9088d10aeced4b934e9738f", "text": "def lambda_tuple_converter ( func ) : if func is not None and func . __code__ . co_argcount == 1 : return lambda * args : func ( args [ 0 ] if len ( args ) == 1 else args ) else : return func\n", "title": "", "metadata": ""}
{"_id": "bce5360f0b08b9d6a85d4e92b6b6adc2", "text": "def iter_lines ( file_like : Iterable [ str ] ) -> Generator [ str , None , None ] : for line in file_like : line = line . rstrip ( '\\r\\n' ) if line : yield line\n", "title": "", "metadata": ""}
{"_id": "20be5d04ddf4a1f3eadde14d75f6860d", "text": "def stop_refresh ( self ) : self . logger . debug ( \"stopping timed refresh\" ) self . rf_flags [ 'done' ] = True self . rf_timer . clear ( )\n", "title": "", "metadata": ""}
{"_id": "35ce9def96b27c19f4fe7dd5f0e55619", "text": "def get_last_filled_cell ( self , table = None ) : maxrow = 0 maxcol = 0 for row , col , tab in self . dict_grid : if table is None or tab == table : maxrow = max ( row , maxrow ) maxcol = max ( col , maxcol ) return maxrow , maxcol , table\n", "title": "", "metadata": ""}
{"_id": "a4cdd4ae2aa51b62cbcf219ef1709def", "text": "def table_top_abs ( self ) : table_height = np . array ( [ 0 , 0 , self . table_full_size [ 2 ] ] ) return string_to_array ( self . floor . get ( \"pos\" ) ) + table_height\n", "title": "", "metadata": ""}
{"_id": "9e77537b23d592fcf7ba57979df19f26", "text": "def get_serializable_data_for_fields ( model ) : pk_field = model . _meta . pk # If model is a child via multitable inheritance, use parent's pk while pk_field . remote_field and pk_field . remote_field . parent_link : pk_field = pk_field . remote_field . model . _meta . pk obj = { 'pk' : get_field_value ( pk_field , model ) } for field in model . _meta . fields : if field . serialize : obj [ field . name ] = get_field_value ( field , model ) return obj\n", "title": "", "metadata": ""}
{"_id": "a182569c2f71c2a290659dbdfe8502ba", "text": "def is_symlink ( self ) : try : return S_ISLNK ( self . lstat ( ) . st_mode ) except OSError as e : if e . errno != ENOENT : raise # Path doesn't exist return False\n", "title": "", "metadata": ""}
{"_id": "1121f8760b54b767213b86fae48f25cf", "text": "def border ( self ) : border_array = self . bitmap - self . inner . bitmap return Region ( border_array )\n", "title": "", "metadata": ""}
{"_id": "6659867e1a962e9c57fabe2ced68b90f", "text": "def attr_cache_clear ( self ) : node = extract_node ( \"\"\"def cache_clear(self): pass\"\"\" ) return BoundMethod ( proxy = node , bound = self . _instance . parent . scope ( ) )\n", "title": "", "metadata": ""}
{"_id": "c5a57c4461f0fc9c5f8b5b8dae0e7ce4", "text": "def movingaverage ( arr , window ) : m = np . ones ( int ( window ) ) / int ( window ) return scipy . ndimage . convolve1d ( arr , m , axis = 0 , mode = 'reflect' )\n", "title": "", "metadata": ""}
{"_id": "d29e4496291a3c21c39afb561f4a0844", "text": "def pretty ( obj , verbose = False , max_width = 79 , newline = '\\n' ) : stream = StringIO ( ) printer = RepresentationPrinter ( stream , verbose , max_width , newline ) printer . pretty ( obj ) printer . flush ( ) return stream . getvalue ( )\n", "title": "", "metadata": ""}
{"_id": "177ea492f38fb1afe0bf12e7f952b9ac", "text": "def get_jsonparsed_data ( url ) : response = urlopen ( url ) data = response . read ( ) . decode ( 'utf-8' ) return json . loads ( data )\n", "title": "", "metadata": ""}
{"_id": "1b435e01cf99539936b88158b9eb62ae", "text": "def compute_centroid ( points ) : lats = [ p [ 1 ] for p in points ] lons = [ p [ 0 ] for p in points ] return Point ( np . mean ( lats ) , np . mean ( lons ) , None )\n", "title": "", "metadata": ""}
{"_id": "a39f42ee90794e6e1ace39444b8cfbae", "text": "def to_bytes ( value ) : vtype = type ( value ) if vtype == bytes or vtype == type ( None ) : return value try : return vtype . encode ( value ) except UnicodeEncodeError : pass return value\n", "title": "", "metadata": ""}
{"_id": "e42449ba6507f78618ac02c6d59ed4ca", "text": "def _check_graphviz_available ( output_format ) : try : subprocess . call ( [ \"dot\" , \"-V\" ] , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) except OSError : print ( \"The output format '%s' is currently not available.\\n\" \"Please install 'Graphviz' to have other output formats \" \"than 'dot' or 'vcg'.\" % output_format ) sys . exit ( 32 )\n", "title": "", "metadata": ""}
{"_id": "6f756a48d9605e828e658135e41c19a2", "text": "def set_interface ( interface , name = '' ) : global interfaces if not interface : raise ValueError ( 'interface is empty' ) # close down the interface before we discard it if name in interfaces : interfaces [ name ] . close ( ) interfaces [ name ] = interface\n", "title": "", "metadata": ""}
{"_id": "891630500b632e7f90faeb504ef142e0", "text": "def title ( self ) : with switch_window ( self . _browser , self . name ) : return self . _browser . title\n", "title": "", "metadata": ""}
{"_id": "2567ec097883552b4d2a47d020e4ba3d", "text": "def getheader ( self , name , default = None ) : return self . aiohttp_response . headers . get ( name , default )\n", "title": "", "metadata": ""}
{"_id": "eaba6f952e69cb2bbb619068b64dec45", "text": "def set_subparsers_args ( self , * args , * * kwargs ) : self . subparsers_args = args self . subparsers_kwargs = kwargs\n", "title": "", "metadata": ""}
{"_id": "329c1caffc9fd3bb45182651558fa6d9", "text": "def comment ( self , s , * * args ) : self . write ( u\"// \" ) self . writeln ( s = s , * * args )\n", "title": "", "metadata": ""}
{"_id": "141295c274a4a28c353e158ef6a88ec4", "text": "def remove_legend ( ax = None ) : from pylab import gca , draw if ax is None : ax = gca ( ) ax . legend_ = None draw ( )\n", "title": "", "metadata": ""}
{"_id": "71166539b018efd0b2e9abb3c4366e99", "text": "def get_incomplete_path ( filename ) : random_suffix = \"\" . join ( random . choice ( string . ascii_uppercase + string . digits ) for _ in range ( 6 ) ) return filename + \".incomplete\" + random_suffix\n", "title": "", "metadata": ""}
{"_id": "4334a674e2b33837205f4471baa59ae4", "text": "def is_up_to_date ( outfile , basedatetime ) : # type: (AnyStr, datetime) -> bool if os . path . exists ( outfile ) : if os . path . getmtime ( outfile ) >= basedatetime : return True return False\n", "title": "", "metadata": ""}
{"_id": "bdaa5452877a1d109978c6fd0428c7ad", "text": "def _transform_triple_numpy ( x ) : return np . array ( [ x . head , x . relation , x . tail ] , dtype = np . int64 )\n", "title": "", "metadata": ""}
{"_id": "0e4863da3a39de76743dcae94ab85611", "text": "def replace_all ( text , dic ) : for i , j in dic . iteritems ( ) : text = text . replace ( i , j ) return text\n", "title": "", "metadata": ""}
{"_id": "13b1d3fe72b09169b84dd80b269668b7", "text": "def walk_tree ( root ) : yield root for child in root . children : for el in walk_tree ( child ) : yield el\n", "title": "", "metadata": ""}
{"_id": "b779d022bd12d7bea74b80a989ea5d1a", "text": "def product ( * args , * * kwargs ) : p = [ [ ] ] for iterable in map ( tuple , args ) * kwargs . get ( \"repeat\" , 1 ) : p = [ x + [ y ] for x in p for y in iterable ] for p in p : yield tuple ( p )\n", "title": "", "metadata": ""}
{"_id": "71d1e0de27472c7c59bdbfd7dcae3c6b", "text": "def getcoef ( self ) : global mp_Z_Y1 return np . swapaxes ( mp_Z_Y1 , 0 , self . xstep . cri . axisK + 1 ) [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "b0965196d282545cff60c271d315379c", "text": "def deep_update ( d , u ) : for k , v in u . items ( ) : if isinstance ( v , Mapping ) : d [ k ] = deep_update ( d . get ( k , { } ) , v ) elif isinstance ( v , list ) : existing_elements = d . get ( k , [ ] ) d [ k ] = existing_elements + [ ele for ele in v if ele not in existing_elements ] else : d [ k ] = v return d\n", "title": "", "metadata": ""}
{"_id": "75f6233525e54c8a23ad9a2eace61854", "text": "def any_contains_any ( strings , candidates ) : for string in strings : for c in candidates : if c in string : return True\n", "title": "", "metadata": ""}
{"_id": "18afbc31b7e544359917b8f7154cb5d8", "text": "def add_suffix ( fullname , suffix ) : name , ext = os . path . splitext ( fullname ) return name + '_' + suffix + ext\n", "title": "", "metadata": ""}
{"_id": "507e0b08c40ccbe6ac2e5706e9f622a8", "text": "def _finish ( self ) : if self . _process . returncode is None : self . _process . stdin . flush ( ) self . _process . stdin . close ( ) self . _process . wait ( ) self . closed = True\n", "title": "", "metadata": ""}
{"_id": "b20b4ad1a8c285116e3ce9201b195c86", "text": "def _rndPointDisposition ( dx , dy ) : x = int ( random . uniform ( - dx , dx ) ) y = int ( random . uniform ( - dy , dy ) ) return ( x , y )\n", "title": "", "metadata": ""}
{"_id": "346a380d3f713bca16aa9db4e81f83e6", "text": "def process_request ( self , request , response ) : self . logger . info ( 'Requested: {0} {1} {2}' . format ( request . method , request . relative_uri , request . content_type ) )\n", "title": "", "metadata": ""}
{"_id": "7e65f476fdde15c50c11b4a37f8cf100", "text": "def validate ( self , obj ) : if not isinstance ( obj , self . model_class ) : raise ValidationError ( 'Invalid object(%s) for service %s' % ( type ( obj ) , type ( self ) ) ) LOG . debug ( u'Object %s state: %s' , self . model_class , obj . __dict__ ) obj . full_clean ( )\n", "title": "", "metadata": ""}
{"_id": "6610c4e362ccda3a2e947c7d7c94dee8", "text": "def _selectItem ( self , index ) : self . _selectedIndex = index self . setCurrentIndex ( self . model ( ) . createIndex ( index , 0 ) )\n", "title": "", "metadata": ""}
{"_id": "a6b054ed4cfe3f4eee69d971efa3c8d1", "text": "def read_img ( path ) : img = cv2 . resize ( cv2 . imread ( path , 0 ) , ( 80 , 30 ) ) . astype ( np . float32 ) / 255 img = np . expand_dims ( img . transpose ( 1 , 0 ) , 0 ) return img\n", "title": "", "metadata": ""}
{"_id": "dcf58eaeb041ed37ee4398a868942d34", "text": "def filter_list_by_indices ( lst , indices ) : return [ x for i , x in enumerate ( lst ) if i in indices ]\n", "title": "", "metadata": ""}
{"_id": "476aeb29fdf557c26e41db22ce414e77", "text": "def set_timeout ( scope , timeout ) : conn = scope . get ( '__connection__' ) conn . set_timeout ( int ( timeout [ 0 ] ) ) return True\n", "title": "", "metadata": ""}
{"_id": "158303a6820593dad57576b9b7f54758", "text": "def csort ( objs , key ) : idxs = dict ( ( obj , i ) for ( i , obj ) in enumerate ( objs ) ) return sorted ( objs , key = lambda obj : ( key ( obj ) , idxs [ obj ] ) )\n", "title": "", "metadata": ""}
{"_id": "a6442b03c78d6c30ca51789839b69d00", "text": "def _digits ( minval , maxval ) : if minval == maxval : return 3 else : return min ( 10 , max ( 2 , int ( 1 + abs ( np . log10 ( maxval - minval ) ) ) ) )\n", "title": "", "metadata": ""}
{"_id": "50f8ec638c41e230835334458c3f7131", "text": "def base64ToImage ( imgData , out_path , out_file ) : fh = open ( os . path . join ( out_path , out_file ) , \"wb\" ) fh . write ( imgData . decode ( 'base64' ) ) fh . close ( ) del fh return os . path . join ( out_path , out_file )\n", "title": "", "metadata": ""}
{"_id": "740d96d67930ca3dd9a9ed7e28f17b11", "text": "def set_executable ( filename ) : st = os . stat ( filename ) os . chmod ( filename , st . st_mode | stat . S_IEXEC )\n", "title": "", "metadata": ""}
{"_id": "723012efc872a34fc464f25b3df54f44", "text": "def hard_equals ( a , b ) : if type ( a ) != type ( b ) : return False return a == b\n", "title": "", "metadata": ""}
{"_id": "29b0a8128126107fcfa80d8ca2065bbc", "text": "def mean ( inlist ) : sum = 0 for item in inlist : sum = sum + item return sum / float ( len ( inlist ) )\n", "title": "", "metadata": ""}
{"_id": "dc8205423f29758679adb9138ed57f26", "text": "def rand_elem ( seq , n = None ) : return map ( random . choice , repeat ( seq , n ) if n is not None else repeat ( seq ) )\n", "title": "", "metadata": ""}
{"_id": "caa64ffa2081022eaabdccc654e65d7b", "text": "def pprint ( self , seconds ) : return ( \"%d:%02d:%02d.%03d\" , reduce ( lambda ll , b : divmod ( ll [ 0 ] , b ) + ll [ 1 : ] , [ ( seconds * 1000 , ) , 1000 , 60 , 60 ] ) )\n", "title": "", "metadata": ""}
{"_id": "c29c5811e357941f3defdde948ac97a6", "text": "def __normalize_list ( self , msg ) : if isinstance ( msg , list ) : msg = \"\" . join ( msg ) return list ( map ( lambda x : x . strip ( ) , msg . split ( \",\" ) ) )\n", "title": "", "metadata": ""}
{"_id": "7fb81c69ea53ee61756f6aa348181895", "text": "def timed_call ( func , * args , log_level = 'DEBUG' , * * kwargs ) : start = time ( ) r = func ( * args , * * kwargs ) t = time ( ) - start log ( log_level , \"Call to '{}' took {:0.6f}s\" . format ( func . __name__ , t ) ) return r\n", "title": "", "metadata": ""}
{"_id": "d7b7daa95d75f05fedf844fa52f8eef3", "text": "def to_str ( obj ) : if not isinstance ( obj , str ) and PY3 and isinstance ( obj , bytes ) : obj = obj . decode ( 'utf-8' ) return obj if isinstance ( obj , string_types ) else str ( obj )\n", "title": "", "metadata": ""}
{"_id": "238bc248490b41788aee2fa80a81d872", "text": "def _StopStatusUpdateThread ( self ) : self . _status_update_active = False if self . _status_update_thread . isAlive ( ) : self . _status_update_thread . join ( ) self . _status_update_thread = None\n", "title": "", "metadata": ""}
{"_id": "0e68fec1e620f1362333641300c42ca7", "text": "def pointer ( self ) : return ctypes . cast ( ctypes . pointer ( ctypes . c_uint8 . from_buffer ( self . mapping , 0 ) ) , ctypes . c_void_p )\n", "title": "", "metadata": ""}
{"_id": "6ed94f17645e0238a53b66c2d48a3c0b", "text": "def safe_delete ( filename ) : try : os . unlink ( filename ) except OSError as e : if e . errno != errno . ENOENT : raise\n", "title": "", "metadata": ""}
{"_id": "fbf1f45f5745842446e4d3256bb4f916", "text": "def find_duplicates ( l : list ) -> set : return set ( [ x for x in l if l . count ( x ) > 1 ] )\n", "title": "", "metadata": ""}
{"_id": "db9146f1c50ebbf51cb3807256e1c427", "text": "def raise_figure_window ( f = 0 ) : if _fun . is_a_number ( f ) : f = _pylab . figure ( f ) f . canvas . manager . window . raise_ ( )\n", "title": "", "metadata": ""}
{"_id": "7dcec32eb4de5c2b95adea554736017d", "text": "def new_figure_manager_given_figure ( num , figure ) : fig = figure frame = FigureFrameWx ( num , fig ) figmgr = frame . get_figure_manager ( ) if matplotlib . is_interactive ( ) : figmgr . frame . Show ( ) return figmgr\n", "title": "", "metadata": ""}
{"_id": "aed9412a314b2d524bb28741764570a1", "text": "def string_to_identity ( identity_str ) : m = _identity_regexp . match ( identity_str ) result = m . groupdict ( ) log . debug ( 'parsed identity: %s' , result ) return { k : v for k , v in result . items ( ) if v }\n", "title": "", "metadata": ""}
{"_id": "4814463da1420a595326cf754ba38e7b", "text": "def do_restart ( self , line ) : self . application . master . Restart ( opendnp3 . RestartType . COLD , restart_callback )\n", "title": "", "metadata": ""}
{"_id": "ce0146963290b9a77d00606aeacde91d", "text": "def previous_quarter ( d ) : from django_toolkit . datetime_util import quarter as datetime_quarter return quarter ( ( datetime_quarter ( datetime ( d . year , d . month , d . day ) ) [ 0 ] + timedelta ( days = - 1 ) ) . date ( ) )\n", "title": "", "metadata": ""}
{"_id": "e0d9578d76321c03c1961c56d5252e1f", "text": "def lowercase_chars ( string : any ) -> str : return '' . join ( [ c if c . islower ( ) else '' for c in str ( string ) ] )\n", "title": "", "metadata": ""}
{"_id": "9b6af7b602e5a762c2aec275860ab904", "text": "def cleanup ( self ) : for file in glob . glob ( self . basename + '*' ) : os . unlink ( file )\n", "title": "", "metadata": ""}
{"_id": "536eb5ed7dbb2340d46e8436a8cd5068", "text": "def remove_property ( self , key = None , value = None ) : for k , v in self . properties [ : ] : if ( key is None or key == k ) and ( value is None or value == v ) : del ( self . properties [ self . properties . index ( ( k , v ) ) ] )\n", "title": "", "metadata": ""}
{"_id": "67a5c0a0efea52daacd1ed08fa2afa79", "text": "def url_host ( url : str ) -> str : from urllib . parse import urlparse res = urlparse ( url ) return res . netloc . split ( ':' ) [ 0 ] if res . netloc else ''\n", "title": "", "metadata": ""}
{"_id": "14d113aed6ab12990e1dc6e55dbde69a", "text": "def set_global ( node : Node , key : str , value : Any ) : node . node_globals [ key ] = value\n", "title": "", "metadata": ""}
{"_id": "f0e4985e93a81b0c12da8e4be2357044", "text": "def stdin_readable ( ) : if not WINDOWS : try : return bool ( select ( [ sys . stdin ] , [ ] , [ ] , 0 ) [ 0 ] ) except Exception : logger . log_exc ( ) try : return not sys . stdin . isatty ( ) except Exception : logger . log_exc ( ) return False\n", "title": "", "metadata": ""}
{"_id": "263e264f10f905fc481ac98cb052e6ee", "text": "def HttpResponse401 ( request , template = KEY_AUTH_401_TEMPLATE , content = KEY_AUTH_401_CONTENT , content_type = KEY_AUTH_401_CONTENT_TYPE ) : return AccessFailedResponse ( request , template , content , content_type , status = 401 )\n", "title": "", "metadata": ""}
{"_id": "c30df24a5dad1b468c512aafff836a88", "text": "def run_test ( func , fobj ) : gc . disable ( ) try : begin = time . time ( ) func ( fobj ) end = time . time ( ) finally : gc . enable ( ) return end - begin\n", "title": "", "metadata": ""}
{"_id": "a00d4197be63ecc55e3dc39044a262d1", "text": "def sine_wave ( frequency ) : xs = tf . reshape ( tf . range ( _samples ( ) , dtype = tf . float32 ) , [ 1 , _samples ( ) , 1 ] ) ts = xs / FLAGS . sample_rate return tf . sin ( 2 * math . pi * frequency * ts )\n", "title": "", "metadata": ""}
{"_id": "1590c737356bf6f3b64218ccd078f68f", "text": "def dictfetchall ( cursor ) : desc = cursor . description return [ dict ( zip ( [ col [ 0 ] for col in desc ] , row ) ) for row in cursor . fetchall ( ) ]\n", "title": "", "metadata": ""}
{"_id": "d2f4705089f5135636f7bb8a3ae0bfde", "text": "def SegmentMin ( a , ids ) : func = lambda idxs : np . amin ( a [ idxs ] , axis = 0 ) return seg_map ( func , a , ids ) ,\n", "title": "", "metadata": ""}
{"_id": "ac9e300db055e7e5a65abdd5f5f4a1a0", "text": "def ibatch ( iterable , size ) : source = iter ( iterable ) while True : batch = itertools . islice ( source , size ) yield itertools . chain ( [ next ( batch ) ] , batch )\n", "title": "", "metadata": ""}
{"_id": "2e611ea2e99c08f960d95520dd16cf3a", "text": "def retry_call ( func , cleanup = lambda : None , retries = 0 , trap = ( ) ) : attempts = count ( ) if retries == float ( 'inf' ) else range ( retries ) for attempt in attempts : try : return func ( ) except trap : cleanup ( ) return func ( )\n", "title": "", "metadata": ""}
{"_id": "89150557c7449cd69a242f948811de65", "text": "def get_table_columns ( dbconn , tablename ) : cur = dbconn . cursor ( ) cur . execute ( \"PRAGMA table_info('%s');\" % tablename ) info = cur . fetchall ( ) cols = [ ( i [ 1 ] , i [ 2 ] ) for i in info ] return cols\n", "title": "", "metadata": ""}
{"_id": "4fa9c244641e63557db74585c1bcde24", "text": "def readTuple ( self , line , n = 3 ) : numbers = [ num for num in line . split ( ' ' ) if num ] return [ float ( num ) for num in numbers [ 1 : n + 1 ] ]\n", "title": "", "metadata": ""}
{"_id": "ae8a5a0bacfb12355d0951540b66ea37", "text": "def cross_product_matrix ( vec ) : return np . array ( [ [ 0 , - vec [ 2 ] , vec [ 1 ] ] , [ vec [ 2 ] , 0 , - vec [ 0 ] ] , [ - vec [ 1 ] , vec [ 0 ] , 0 ] ] )\n", "title": "", "metadata": ""}
{"_id": "3e29faaae31610d3e3cf54645ef5ad93", "text": "def filter_query ( s ) : matches = re . findall ( r'(?:\"([^\"]*)\")|([^\"]*)' , s ) result_quoted = [ t [ 0 ] . strip ( ) for t in matches if t [ 0 ] ] result_unquoted = [ t [ 1 ] . strip ( ) for t in matches if t [ 1 ] ] return result_quoted , result_unquoted\n", "title": "", "metadata": ""}
{"_id": "4f1a859ac92639969cb19561543aa76b", "text": "def is_builtin_css_function ( name ) : name = name . replace ( '_' , '-' ) if name in BUILTIN_FUNCTIONS : return True # Vendor-specific functions (-foo-bar) are always okay if name [ 0 ] == '-' and '-' in name [ 1 : ] : return True return False\n", "title": "", "metadata": ""}
{"_id": "b77e397f85d061d43f0d84b12723355a", "text": "def logger ( message , level = 10 ) : logging . getLogger ( __name__ ) . log ( level , str ( message ) )\n", "title": "", "metadata": ""}
{"_id": "51cdf185fe50972470e79bfffd88dcd6", "text": "def read_array ( path , mmap_mode = None ) : file_ext = op . splitext ( path ) [ 1 ] if file_ext == '.npy' : return np . load ( path , mmap_mode = mmap_mode ) raise NotImplementedError ( \"The file extension `{}` \" . format ( file_ext ) + \"is not currently supported.\" )\n", "title": "", "metadata": ""}
{"_id": "7348f171ca50488594c02c8f42fd70e5", "text": "def set ( self , f ) : self . stop ( ) self . _create_timer ( f ) self . start ( )\n", "title": "", "metadata": ""}
{"_id": "40ae55b21faf092343bd222809aae5e9", "text": "def get_week_start_end_day ( ) : t = date . today ( ) wd = t . weekday ( ) return ( t - timedelta ( wd ) , t + timedelta ( 6 - wd ) )\n", "title": "", "metadata": ""}
{"_id": "a8cdb2d268f01753c6c4506a3514646f", "text": "def normalize_array ( lst ) : np_arr = np . array ( lst ) x_normalized = np_arr / np_arr . max ( axis = 0 ) return list ( x_normalized )\n", "title": "", "metadata": ""}
{"_id": "682bc67194823406e1df8a44486d28b8", "text": "def chars ( string : any ) -> str : return '' . join ( [ c if c . isalpha ( ) else '' for c in str ( string ) ] )\n", "title": "", "metadata": ""}
{"_id": "6394d1846d8297402a673591fc1d7eb7", "text": "def argsort_indices ( a , axis = - 1 ) : a = np . asarray ( a ) ind = list ( np . ix_ ( * [ np . arange ( d ) for d in a . shape ] ) ) ind [ axis ] = a . argsort ( axis ) return tuple ( ind )\n", "title": "", "metadata": ""}
{"_id": "97f8b4f7c8d36c182f8879849462116d", "text": "def handle_exception ( error ) : response = jsonify ( error . to_dict ( ) ) response . status_code = error . status_code return response\n", "title": "", "metadata": ""}
{"_id": "9c008c2c3b6fd31a655f7a12f0702c72", "text": "def newest_file ( file_iterable ) : return max ( file_iterable , key = lambda fname : os . path . getmtime ( fname ) )\n", "title": "", "metadata": ""}
{"_id": "39fc1d1b8354825644a199784ef44177", "text": "def tf2 ( ) : # Import the `tf` compat API from this file and check if it's already TF 2.0. if tf . __version__ . startswith ( '2.' ) : return tf elif hasattr ( tf , 'compat' ) and hasattr ( tf . compat , 'v2' ) : # As a fallback, try `tensorflow.compat.v2` if it's defined. return tf . compat . v2 raise ImportError ( 'cannot import tensorflow 2.0 API' )\n", "title": "", "metadata": ""}
{"_id": "4d951368830e8e219e87c0cc6e52e72a", "text": "def bit_clone ( bits ) : new = BitSet ( bits . size ) new . ior ( bits ) return new\n", "title": "", "metadata": ""}
{"_id": "947f0c6c828656362ce1c1b0a8c833e0", "text": "def unpickle ( pickle_file ) : pickle = None with open ( pickle_file , \"rb\" ) as pickle_f : pickle = dill . load ( pickle_f ) if not pickle : LOG . error ( \"Could not load python object from file\" ) return pickle\n", "title": "", "metadata": ""}
{"_id": "10b436c48f868d1a40bfa9748bde1e16", "text": "def update ( table , values , where = ( ) , * * kwargs ) : where = dict ( where , * * kwargs ) . items ( ) sql , args = makeSQL ( \"UPDATE\" , table , values = values , where = where ) return execute ( sql , args ) . rowcount\n", "title": "", "metadata": ""}
{"_id": "373cecba17a4dc3ede703088887874c6", "text": "def inverted_dict ( d ) : return dict ( ( force_hashable ( v ) , k ) for ( k , v ) in viewitems ( dict ( d ) ) )\n", "title": "", "metadata": ""}
{"_id": "344ca460ed674d9ea2c48561c78daa8d", "text": "def dot_v3 ( v , w ) : return sum ( [ x * y for x , y in zip ( v , w ) ] )\n", "title": "", "metadata": ""}
{"_id": "44d5f1ebba98f11b31373296da41fdc6", "text": "def downcaseTokens ( s , l , t ) : return [ tt . lower ( ) for tt in map ( _ustr , t ) ]\n", "title": "", "metadata": ""}
{"_id": "cb5b81ca8a9a3ae2c8b5c7ea1df29873", "text": "def register_action ( action ) : sub = _subparsers . add_parser ( action . meta ( 'cmd' ) , help = action . meta ( 'help' ) ) sub . set_defaults ( cmd = action . meta ( 'cmd' ) ) for ( name , arg ) in action . props ( ) . items ( ) : sub . add_argument ( arg . name , arg . flag , * * arg . options ) _actions [ action . meta ( 'cmd' ) ] = action\n", "title": "", "metadata": ""}
{"_id": "10d4b45dc0f3f7864231061a9f34d312", "text": "def update ( self , dictionary = None , * * kwargs ) : if not dictionary == None : kwargs . update ( dictionary ) for k in list ( kwargs . keys ( ) ) : self [ k ] = kwargs [ k ]\n", "title": "", "metadata": ""}
{"_id": "e3518cd1228c36eb7271538d4b4840bf", "text": "def indent ( s , spaces = 4 ) : new = re . sub ( '(\\n+)' , '\\\\1%s' % ( ' ' * spaces ) , s ) return ( ' ' * spaces ) + new . strip ( )\n", "title": "", "metadata": ""}
{"_id": "29468b1a15f26aba8796a30f61d46bb7", "text": "def auto ( ) : try : Style . enabled = False Style . enabled = sys . stdout . isatty ( ) except ( AttributeError , TypeError ) : pass\n", "title": "", "metadata": ""}
{"_id": "8d64cd8cb300e331e841fe617bf08b46", "text": "def connection_lost ( self , exc ) : if exc is None : self . log . warning ( 'eof from receiver?' ) else : self . log . warning ( 'Lost connection to receiver: %s' , exc ) self . transport = None if self . _connection_lost_callback : self . _loop . call_soon ( self . _connection_lost_callback )\n", "title": "", "metadata": ""}
{"_id": "a05d4d60652ac8566e3c49a5cde8fbb7", "text": "def not_matching_list ( self ) : pre_result = comp ( self . regex ) return [ x for x in self . data if not pre_result . search ( str ( x ) ) ]\n", "title": "", "metadata": ""}
{"_id": "0e37f5855e91c22b88298d1ad7491ad5", "text": "def push ( h , x ) : h . push ( x ) up ( h , h . size ( ) - 1 )\n", "title": "", "metadata": ""}
{"_id": "421e6cbd0b0a5870ee61441d7e70067e", "text": "def equal ( list1 , list2 ) : return [ item1 == item2 for item1 , item2 in broadcast_zip ( list1 , list2 ) ]\n", "title": "", "metadata": ""}
{"_id": "b28b171972de87e3b1c78332e12721e4", "text": "def split_elements ( value ) : l = [ v . strip ( ) for v in value . split ( ',' ) ] if len ( l ) == 1 : l = value . split ( ) return l\n", "title": "", "metadata": ""}
{"_id": "36915b62ac1833f9acd34c7d9835e68d", "text": "def safe_int ( val , default = None ) : try : val = int ( val ) except ( ValueError , TypeError ) : val = default return val\n", "title": "", "metadata": ""}
{"_id": "86eb916a526575d84a269b28663db9b4", "text": "def header_length ( bytearray ) : groups_of_3 , leftover = divmod ( len ( bytearray ) , 3 ) # 4 bytes out for each 3 bytes (or nonzero fraction thereof) in. n = groups_of_3 * 4 if leftover : n += 4 return n\n", "title": "", "metadata": ""}
{"_id": "2c403928d0fe63dfe5a436a945fdc8da", "text": "def bytes_hack ( buf ) : ub = None if sys . version_info > ( 3 , ) : ub = buf else : ub = bytes ( buf ) return ub\n", "title": "", "metadata": ""}
{"_id": "dd1fbbc42e03d2afa81e45760dfb3d86", "text": "def cleanup_storage ( * args ) : ShardedClusters ( ) . cleanup ( ) ReplicaSets ( ) . cleanup ( ) Servers ( ) . cleanup ( ) sys . exit ( 0 )\n", "title": "", "metadata": ""}
{"_id": "6e9fdb946c7397d4e473c83dda0a6ac4", "text": "def setLib ( self , lib ) : for name , item in lib . items ( ) : self . font . lib [ name ] = item\n", "title": "", "metadata": ""}
{"_id": "22c459c5541a27643465f2bc0dfb1e02", "text": "def unique ( _list ) : ret = [ ] for item in _list : if item not in ret : ret . append ( item ) return ret\n", "title": "", "metadata": ""}
{"_id": "e884e30b71559dea0b51c994b84e4a8b", "text": "def from_json_str ( cls , json_str ) : return cls . from_json ( json . loads ( json_str , cls = JsonDecoder ) )\n", "title": "", "metadata": ""}
{"_id": "65fa240fd13653f303f8d77afb93c7ac", "text": "def length ( self ) : return np . sqrt ( np . sum ( self ** 2 , axis = 1 ) ) . view ( np . ndarray )\n", "title": "", "metadata": ""}
{"_id": "6097f07e6bad88feee304873a5af5e17", "text": "def same ( * values ) : if not values : return True first , rest = values [ 0 ] , values [ 1 : ] return all ( value == first for value in rest )\n", "title": "", "metadata": ""}
{"_id": "dc50fcf283b633fe121f8209a15e8fd3", "text": "def uniquify_list ( L ) : return [ e for i , e in enumerate ( L ) if L . index ( e ) == i ]\n", "title": "", "metadata": ""}
{"_id": "b1166840b07db16acef275f41d63eaef", "text": "def remove_examples_all ( ) : d = examples_all_dir ( ) if d . exists ( ) : log . debug ( 'remove %s' , d ) d . rmtree ( ) else : log . debug ( 'nothing to remove: %s' , d )\n", "title": "", "metadata": ""}
{"_id": "68d1eb9241e1a6951bb7339af3e338c2", "text": "def page_align_content_length ( length ) : # type: (int) -> int mod = length % _PAGEBLOB_BOUNDARY if mod != 0 : return length + ( _PAGEBLOB_BOUNDARY - mod ) return length\n", "title": "", "metadata": ""}
{"_id": "41cb87dd5f6f18fcb2ccd3e1b17d6883", "text": "def smartread ( path ) : with open ( path , \"rb\" ) as f : content = f . read ( ) result = chardet . detect ( content ) return content . decode ( result [ \"encoding\" ] )\n", "title": "", "metadata": ""}
{"_id": "a3ba724827fd1791d15261590eb07f53", "text": "def camelize ( key ) : return '' . join ( x . capitalize ( ) if i > 0 else x for i , x in enumerate ( key . split ( '_' ) ) )\n", "title": "", "metadata": ""}
{"_id": "c9d5170a525abbdd86a7833873629db4", "text": "def gaussian_kernel ( gstd ) : Nc = np . ceil ( gstd * 3 ) * 2 + 1 x = np . linspace ( - ( Nc - 1 ) / 2 , ( Nc - 1 ) / 2 , Nc , endpoint = True ) g = np . exp ( - .5 * ( ( x / gstd ) ** 2 ) ) g = g / np . sum ( g ) return g\n", "title": "", "metadata": ""}
{"_id": "713423982e153c33751e6b59e3d2d465", "text": "def horz_dpi ( self ) : pHYs = self . _chunks . pHYs if pHYs is None : return 72 return self . _dpi ( pHYs . units_specifier , pHYs . horz_px_per_unit )\n", "title": "", "metadata": ""}
{"_id": "42c1912e4b35e5e3bbb61dc0a44d9a50", "text": "def escapePathForShell ( path ) : if platform . system ( ) == 'Windows' : return '\"{}\"' . format ( path . replace ( '\"' , '\"\"' ) ) else : return shellescape . quote ( path )\n", "title": "", "metadata": ""}
{"_id": "ed60c46668831e87ba3651237336cee2", "text": "def zfill ( x , width ) : if not isinstance ( x , basestring ) : x = repr ( x ) return x . zfill ( width )\n", "title": "", "metadata": ""}
{"_id": "9a54af78e245ecbcd079bf500b4362d1", "text": "def extend ( a : dict , b : dict ) -> dict : res = a . copy ( ) res . update ( b ) return res\n", "title": "", "metadata": ""}
{"_id": "6fa8c07a71df7fc446205319ee6ef835", "text": "def str_traceback ( error , tb ) : if not isinstance ( tb , types . TracebackType ) : return tb return '' . join ( traceback . format_exception ( error . __class__ , error , tb ) )\n", "title": "", "metadata": ""}
{"_id": "1ccef886d968925074abf5865662589a", "text": "def __gzip ( filename ) : zipname = filename + '.gz' file_pointer = open ( filename , 'rb' ) zip_pointer = gzip . open ( zipname , 'wb' ) zip_pointer . writelines ( file_pointer ) file_pointer . close ( ) zip_pointer . close ( ) return zipname\n", "title": "", "metadata": ""}
{"_id": "7ce51f865cc53b9d8726f62ccdd1686d", "text": "def _dt_to_epoch ( dt ) : try : epoch = dt . timestamp ( ) except AttributeError : # py2 epoch = ( dt - datetime ( 1970 , 1 , 1 ) ) . total_seconds ( ) return epoch\n", "title": "", "metadata": ""}
{"_id": "d095187a7f949d5ec98b8242b66b3a32", "text": "def handle_m2m ( self , sender , instance , * * kwargs ) : self . handle_save ( instance . __class__ , instance )\n", "title": "", "metadata": ""}
{"_id": "f0f24b78f01de34840de69c459796f55", "text": "def longest_run_1d ( arr ) : v , rl = rle_1d ( arr ) [ : 2 ] return np . where ( v , rl , 0 ) . max ( )\n", "title": "", "metadata": ""}
{"_id": "abc1cd23a55912f6928148f00f16ff44", "text": "def __del__ ( self ) : # __del__ can be invoked before __init__ has completed. if hasattr ( self , '_encoded_stream' ) : self . _encoded_stream . close ( ) self . _encoded_stream = None super ( EncodedStreamFileEntry , self ) . __del__ ( )\n", "title": "", "metadata": ""}
{"_id": "06ba9994f5575792e6fa46b9c23ed13f", "text": "def _get_current_label ( self ) : if len ( self . _last ) == 0 : raise StopIteration return self . _last [ : self . _last . find ( \":\" ) ]\n", "title": "", "metadata": ""}
{"_id": "7bdfaa4df50f1b0dc196fb008c7538ef", "text": "def __next__ ( self ) : # Retrieve the row, thereby incrementing the line number: row = super ( UnicodeReaderWithLineNumber , self ) . __next__ ( ) return self . lineno + 1 , row\n", "title": "", "metadata": ""}
{"_id": "26b7a66a66bccecb51723a6a1736f507", "text": "def confusion_matrix ( self ) : return plot . confusion_matrix ( self . y_true , self . y_pred , self . target_names , ax = _gen_ax ( ) )\n", "title": "", "metadata": ""}
{"_id": "97c45f34b2dcd4252cf91a7b6f571524", "text": "def fix ( h , i ) : down ( h , i , h . size ( ) ) up ( h , i )\n", "title": "", "metadata": ""}
{"_id": "5135d3dba437a50d4f2603a51704c2e0", "text": "def strip_xml_namespace ( root ) : try : root . tag = root . tag . split ( '}' ) [ 1 ] except IndexError : pass for element in root . getchildren ( ) : strip_xml_namespace ( element )\n", "title": "", "metadata": ""}
{"_id": "6bf23b53923e9b8bd0047d5e041eb4ca", "text": "def get_category ( self ) : var = self . xmlnode . prop ( \"category\" ) if not var : var = \"?\" return var . decode ( \"utf-8\" )\n", "title": "", "metadata": ""}
{"_id": "7ab0de24eaa604b3d9504013be65b499", "text": "def _crop_list_to_size ( l , size ) : for x in range ( size - len ( l ) ) : l . append ( False ) for x in range ( len ( l ) - size ) : l . pop ( ) return l\n", "title": "", "metadata": ""}
{"_id": "de1fe0a00ee701e544d674049a55e746", "text": "def load_yaml ( file ) : if hasattr ( yaml , \"full_load\" ) : return yaml . full_load ( file ) else : return yaml . load ( file )\n", "title": "", "metadata": ""}
{"_id": "d7128ab230e98d3c9d636a82bc4d0948", "text": "def glog ( x , l = 2 ) : return np . log ( ( x + np . sqrt ( x ** 2 + l ** 2 ) ) / 2 ) / np . log ( l )\n", "title": "", "metadata": ""}
{"_id": "67f00256d4b085c89cbea79560d6af8d", "text": "def hash_file ( fileobj ) : hasher = hashlib . md5 ( ) buf = fileobj . read ( 65536 ) while len ( buf ) > 0 : hasher . update ( buf ) buf = fileobj . read ( 65536 ) return hasher . hexdigest ( )\n", "title": "", "metadata": ""}
{"_id": "5d984c785e0ff14f240c86e6747c695f", "text": "def append ( self , item ) : print ( item ) super ( MyList , self ) . append ( item )\n", "title": "", "metadata": ""}
{"_id": "4439d8674ba9f3102acf1d8fe053ed98", "text": "def adapter ( data , headers , * * kwargs ) : keys = ( 'sep_title' , 'sep_character' , 'sep_length' ) return vertical_table ( data , headers , * * filter_dict_by_key ( kwargs , keys ) )\n", "title": "", "metadata": ""}
{"_id": "2fe7bcbb4fd2ff92c11df628ff7bdd8d", "text": "def start ( ) : global app bottle . run ( app , host = conf . WebHost , port = conf . WebPort , debug = conf . WebAutoReload , reloader = conf . WebAutoReload , quiet = conf . WebQuiet )\n", "title": "", "metadata": ""}
{"_id": "f61ccfcecd2519102ea216e2486d7fd4", "text": "def make_aware ( value , timezone ) : if hasattr ( timezone , 'localize' ) and value not in ( datetime . datetime . min , datetime . datetime . max ) : # available for pytz time zones return timezone . localize ( value , is_dst = None ) else : # may be wrong around DST changes return value . replace ( tzinfo = timezone )\n", "title": "", "metadata": ""}
{"_id": "061d8dbfd779630ad91144911f4f7594", "text": "def get_time ( filename ) : ts = os . stat ( filename ) . st_mtime return datetime . datetime . utcfromtimestamp ( ts )\n", "title": "", "metadata": ""}
{"_id": "cee9dbcbb9281904c24290fcd1585ae7", "text": "def reversed_lines ( path ) : with open ( path , 'r' ) as handle : part = '' for block in reversed_blocks ( handle ) : for c in reversed ( block ) : if c == '\\n' and part : yield part [ : : - 1 ] part = '' part += c if part : yield part [ : : - 1 ]\n", "title": "", "metadata": ""}
{"_id": "126fd19ab1462cf04e0a2adac3c69b99", "text": "def onchange ( self , value ) : log . debug ( 'combo box. selected %s' % value ) self . select_by_value ( value ) return ( value , )\n", "title": "", "metadata": ""}
{"_id": "ba56b85b19d30a1cc9714ea8eeb96b76", "text": "def _debug_log ( self , msg ) : if not self . debug : return sys . stderr . write ( '{}\\n' . format ( msg ) )\n", "title": "", "metadata": ""}
{"_id": "fa275cfe3b87fd8b9d5b8661947b95d6", "text": "def _pad ( self ) : if self . _indent : self . whitespace ( self . _indent * len ( self . _open_elements ) )\n", "title": "", "metadata": ""}
{"_id": "8585b947bfda7ce8c4e89ec2b20807be", "text": "def stdout_encode ( u , default = 'utf-8' ) : # from http://stackoverflow.com/questions/3627793/best-output-type-and- #   encoding-practices-for-repr-functions encoding = sys . stdout . encoding or default return u . encode ( encoding , \"replace\" ) . decode ( encoding , \"replace\" )\n", "title": "", "metadata": ""}
{"_id": "aa968eff2dde1fa43a33dfa509f84de4", "text": "def unique_deps ( deps ) : deps . sort ( ) return list ( k for k , _ in itertools . groupby ( deps ) )\n", "title": "", "metadata": ""}
{"_id": "66f6824ee959fd9c5196ecf53f493d70", "text": "def save ( self , fname ) : with open ( fname , 'wb' ) as f : json . dump ( self , f )\n", "title": "", "metadata": ""}
{"_id": "960c3c221dc25609b98f2ffea4a58ef3", "text": "def get_object_as_string ( obj ) : if isinstance ( obj , str ) : return obj if isinstance ( obj , list ) : return '\\r\\n\\;' . join ( [ get_object_as_string ( item ) for item in obj ] ) attrs = vars ( obj ) as_string = ', ' . join ( \"%s: %s\" % item for item in attrs . items ( ) ) return as_string\n", "title": "", "metadata": ""}
{"_id": "eda192ddccc8fe36652e312950bb8ac4", "text": "def create_conda_env ( sandbox_dir , env_name , dependencies , options = ( ) ) : env_dir = os . path . join ( sandbox_dir , env_name ) cmdline = [ \"conda\" , \"create\" , \"--yes\" , \"--copy\" , \"--quiet\" , \"-p\" , env_dir ] + list ( options ) + dependencies log . info ( \"Creating conda environment: \" ) log . info ( \"  command line: %s\" , cmdline ) subprocess . check_call ( cmdline , stderr = subprocess . PIPE , stdout = subprocess . PIPE ) log . debug ( \"Environment created\" ) return env_dir , env_name\n", "title": "", "metadata": ""}
{"_id": "b205f30d6388adfd93b9d6d3504e9362", "text": "def available_gpus ( ) : local_device_protos = device_lib . list_local_devices ( ) return [ x . name for x in local_device_protos if x . device_type == 'GPU' ]\n", "title": "", "metadata": ""}
{"_id": "a19848c5621982816c35031310c1f18f", "text": "def assert_is_not ( expected , actual , message = None , extra = None ) : assert expected is not actual , _assert_fail_message ( message , expected , actual , \"is\" , extra )\n", "title": "", "metadata": ""}
{"_id": "1b8ceb21dfdafa436f0e27708392ba68", "text": "def attribute ( func ) : attr = abc . abstractmethod ( func ) attr . __iattribute__ = True attr = _property ( attr ) return attr\n", "title": "", "metadata": ""}
{"_id": "b84b784526180c174edfc1024c95bbcc", "text": "def unpunctuate ( s , * , char_blacklist = string . punctuation ) : # remove punctuation s = \"\" . join ( c for c in s if c not in char_blacklist ) # remove consecutive spaces return \" \" . join ( filter ( None , s . split ( \" \" ) ) )\n", "title": "", "metadata": ""}
{"_id": "d0b30340d3a3e9c33512391d60e73f41", "text": "def uniqued ( iterable ) : seen = set ( ) return [ item for item in iterable if item not in seen and not seen . add ( item ) ]\n", "title": "", "metadata": ""}
{"_id": "51c3bbc24e6729500ae9a319118d0516", "text": "def surface ( cls , predstr ) : lemma , pos , sense , _ = split_pred_string ( predstr ) return cls ( Pred . SURFACE , lemma , pos , sense , predstr )\n", "title": "", "metadata": ""}
{"_id": "dc3e8b17e0135a060173b8ce04533f92", "text": "def _normalize ( mat : np . ndarray ) : return ( ( mat - mat . min ( ) ) * ( 255 / mat . max ( ) ) ) . astype ( np . uint8 )\n", "title": "", "metadata": ""}
{"_id": "c5b1e91ffec3584f90ce2a227a2e8f11", "text": "def pop ( self , key ) : if key in self . _keys : self . _keys . remove ( key ) super ( ListDict , self ) . pop ( key )\n", "title": "", "metadata": ""}
{"_id": "2224c48e8c21d135b446d4d296ae5312", "text": "def find_lt ( a , x ) : i = bs . bisect_left ( a , x ) if i : return i - 1 raise ValueError\n", "title": "", "metadata": ""}
{"_id": "b8ebde7f0e96cc9a56eb3bfd95874ee9", "text": "def all_strings ( arr ) : if not isinstance ( [ ] , list ) : raise TypeError ( \"non-list value found where list is expected\" ) return all ( isinstance ( x , str ) for x in arr )\n", "title": "", "metadata": ""}
{"_id": "c22081d9af91150c37a55d59e487f185", "text": "def setup ( self , proxystr = '' , prompting = True ) : self . prompting = prompting proxy = self . get_proxy ( proxystr ) if proxy : proxy_support = urllib2 . ProxyHandler ( { \"http\" : proxy , \"ftp\" : proxy } ) opener = urllib2 . build_opener ( proxy_support , urllib2 . CacheFTPHandler ) urllib2 . install_opener ( opener )\n", "title": "", "metadata": ""}
{"_id": "279471216767a4d3abcae90fe9a30775", "text": "def edge_index ( self ) : return dict ( ( edge , index ) for index , edge in enumerate ( self . edges ) )\n", "title": "", "metadata": ""}
{"_id": "9e5024b10a6d2900ad5e89bbaad730e7", "text": "def write_color ( string , name , style = 'normal' , when = 'auto' ) : write ( color ( string , name , style , when ) )\n", "title": "", "metadata": ""}
{"_id": "ce9934bd1d38f4c60d86a65dca47118c", "text": "def download_file ( save_path , file_url ) : r = requests . get ( file_url ) # create HTTP response object with open ( save_path , 'wb' ) as f : f . write ( r . content ) return save_path\n", "title": "", "metadata": ""}
{"_id": "90dfa3ce8bb787acb0ff84b3c93bccf7", "text": "def C_dict2array ( C ) : return np . hstack ( [ np . asarray ( C [ k ] ) . ravel ( ) for k in C_keys ] )\n", "title": "", "metadata": ""}
{"_id": "763a3f783d72dc461e786f64d4f92f80", "text": "def handle_request_parsing_error ( err , req , schema , error_status_code , error_headers ) : abort ( error_status_code , errors = err . messages )\n", "title": "", "metadata": ""}
{"_id": "8dc5dc46d522dd40cfbc7ef4e6a73881", "text": "def find_console_handler ( logger ) : for handler in logger . handlers : if ( isinstance ( handler , logging . StreamHandler ) and handler . stream == sys . stderr ) : return handler\n", "title": "", "metadata": ""}
{"_id": "e2a67feae64294fbe49cac45117c6318", "text": "def remove_accent_string ( string ) : return utils . join ( [ add_accent_char ( c , Accent . NONE ) for c in string ] )\n", "title": "", "metadata": ""}
{"_id": "a947f0fb8652f3b6511bca89e9eb903d", "text": "def arg_bool ( name , default = False ) : v = request . args . get ( name , '' ) if not len ( v ) : return default return v in BOOL_TRUISH\n", "title": "", "metadata": ""}
{"_id": "721504a788de737c6d98da807059aa9a", "text": "def show_partitioning ( rdd , show = True ) : if show : partitionCount = rdd . getNumPartitions ( ) try : valueCount = rdd . countApprox ( 1000 , confidence = 0.50 ) except : valueCount = - 1 try : name = rdd . name ( ) or None except : pass name = name or \"anonymous\" logging . info ( \"For RDD %s, there are %d partitions with on average %s values\" % ( name , partitionCount , int ( valueCount / float ( partitionCount ) ) ) )\n", "title": "", "metadata": ""}
{"_id": "a7b4f8a893b44585d2b3c8af5ada9e1b", "text": "def json_response ( data , status = 200 ) : from django . http import JsonResponse return JsonResponse ( data = data , status = status , safe = isinstance ( data , dict ) )\n", "title": "", "metadata": ""}
{"_id": "79792f112257623e63398060946b05e6", "text": "def unique_list ( lst ) : uniq = [ ] for item in lst : if item not in uniq : uniq . append ( item ) return uniq\n", "title": "", "metadata": ""}
{"_id": "290fe52c754fe272a32225fddc03c36d", "text": "def _type_bool ( label , default = False ) : return label , abstractSearch . nothing , abstractRender . boolen , default\n", "title": "", "metadata": ""}
{"_id": "98b206d601243451935e8d87a09b06b2", "text": "def add_str ( window , line_num , str ) : try : window . addstr ( line_num , 0 , str ) except curses . error : pass\n", "title": "", "metadata": ""}
{"_id": "cca1a68bb18ca6046aa7e0098c197aab", "text": "def round_to_n ( x , n ) : return round ( x , - int ( np . floor ( np . log10 ( x ) ) ) + ( n - 1 ) )\n", "title": "", "metadata": ""}
{"_id": "6ff86143afbf58f5cf8d893e86fe0a21", "text": "def parsehttpdate ( string_ ) : try : t = time . strptime ( string_ , \"%a, %d %b %Y %H:%M:%S %Z\" ) except ValueError : return None return datetime . datetime ( * t [ : 6 ] )\n", "title": "", "metadata": ""}
{"_id": "172cec23b4cf6617e757bf5d06967f29", "text": "def point8_to_box ( points ) : p = points . reshape ( ( - 1 , 4 , 2 ) ) minxy = p . min ( axis = 1 ) # nx2 maxxy = p . max ( axis = 1 ) # nx2 return np . concatenate ( ( minxy , maxxy ) , axis = 1 )\n", "title": "", "metadata": ""}
{"_id": "0859c458d848e052496bb57772054a67", "text": "def unpickle_file ( picklefile , * * kwargs ) : with open ( picklefile , 'rb' ) as f : return pickle . load ( f , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "94be5807785488d472ae0e85b10f8fd8", "text": "def _get_log_prior_cl_func ( self ) : return SimpleCLFunction . from_string ( '''             mot_float_type _computeLogPrior(local const mot_float_type* x, void* data){                 return ''' + self . _log_prior_func . get_cl_function_name ( ) + '''(x, data);             }         ''' , dependencies = [ self . _log_prior_func ] )\n", "title": "", "metadata": ""}
{"_id": "880b81d1a69a1c1fd70f96fcee34d931", "text": "def double_sha256 ( data ) : return bytes_as_revhex ( hashlib . sha256 ( hashlib . sha256 ( data ) . digest ( ) ) . digest ( ) )\n", "title": "", "metadata": ""}
{"_id": "0449bf7ed98ff9f0a2e1a232ae299f7c", "text": "def get_versions ( reporev = True ) : import sys import platform import qtpy import qtpy . QtCore revision = None if reporev : from spyder . utils import vcs revision , branch = vcs . get_git_revision ( os . path . dirname ( __dir__ ) ) if not sys . platform == 'darwin' : # To avoid a crash with our Mac app system = platform . system ( ) else : system = 'Darwin' return { 'spyder' : __version__ , 'python' : platform . python_version ( ) , # \"2.7.3\" 'bitness' : 64 if sys . maxsize > 2 ** 32 else 32 , 'qt' : qtpy . QtCore . __version__ , 'qt_api' : qtpy . API_NAME , # PyQt5 'qt_api_ver' : qtpy . PYQT_VERSION , 'system' : system , # Linux, Windows, ... 'release' : platform . release ( ) , # XP, 10.6, 2.2.0, etc. 'revision' : revision , # '9fdf926eccce' }\n", "title": "", "metadata": ""}
{"_id": "5c874b305a565a25d9765dae8d52ac2d", "text": "def shutdown ( self ) : if self . sock : self . sock . close ( ) self . sock = None self . connected = False\n", "title": "", "metadata": ""}
{"_id": "a1e7e89c76dfedecb5d9dc198d9cee1a", "text": "def dereference_url ( url ) : res = open_url ( url , method = 'HEAD' ) res . close ( ) return res . url\n", "title": "", "metadata": ""}
{"_id": "6f72c19075f8b7d9c9e29d14beb7412d", "text": "def get_join_cols ( by_entry ) : left_cols = [ ] right_cols = [ ] for col in by_entry : if isinstance ( col , str ) : left_cols . append ( col ) right_cols . append ( col ) else : left_cols . append ( col [ 0 ] ) right_cols . append ( col [ 1 ] ) return left_cols , right_cols\n", "title": "", "metadata": ""}
{"_id": "075b3afe18cfb1ffe8ffc403f74e8095", "text": "def show_xticklabels ( self , row , column ) : subplot = self . get_subplot_at ( row , column ) subplot . show_xticklabels ( )\n", "title": "", "metadata": ""}
{"_id": "4f5a7fe56beed0e1270bf41b164023e6", "text": "def register ( linter ) : linter . register_reporter ( TextReporter ) linter . register_reporter ( ParseableTextReporter ) linter . register_reporter ( VSTextReporter ) linter . register_reporter ( ColorizedTextReporter )\n", "title": "", "metadata": ""}
{"_id": "090907ad3df7f49b646ff2a60286c64e", "text": "def do_serial ( self , p ) : try : self . serial . port = p self . serial . open ( ) print 'Opening serial port: %s' % p except Exception , e : print 'Unable to open serial port: %s' % p\n", "title": "", "metadata": ""}
{"_id": "e6c30258bf5867ae685f5d82f09b3813", "text": "def get_pixel ( framebuf , x , y ) : index = ( y >> 3 ) * framebuf . stride + x offset = y & 0x07 return ( framebuf . buf [ index ] >> offset ) & 0x01\n", "title": "", "metadata": ""}
{"_id": "60f39e74c61e4f052213f045dae28537", "text": "def __delitem__ ( self , resource ) : self . __caches [ type ( resource ) ] . pop ( resource . get_cache_internal_key ( ) , None )\n", "title": "", "metadata": ""}
{"_id": "c2c8a410f3e66cd59f1cb3e0c7ac09eb", "text": "def _Enum ( docstring , * names ) : enums = dict ( zip ( names , range ( len ( names ) ) ) ) reverse = dict ( ( value , key ) for key , value in enums . iteritems ( ) ) enums [ 'reverse_mapping' ] = reverse enums [ '__doc__' ] = docstring return type ( 'Enum' , ( object , ) , enums )\n", "title": "", "metadata": ""}
{"_id": "7f7992c7747622c01d6a56a05f7c371a", "text": "def underscore ( text ) : return UNDERSCORE [ 1 ] . sub ( r'\\1_\\2' , UNDERSCORE [ 0 ] . sub ( r'\\1_\\2' , text ) ) . lower ( )\n", "title": "", "metadata": ""}
{"_id": "0db792ea344512d17a788e66d51d619b", "text": "def determine_types ( self ) : from nefertari . elasticsearch import ES collections = self . get_collections ( ) resources = self . get_resources ( collections ) models = set ( [ res . view . Model for res in resources ] ) es_models = [ mdl for mdl in models if mdl and getattr ( mdl , '_index_enabled' , False ) ] types = [ ES . src2type ( mdl . __name__ ) for mdl in es_models ] return types\n", "title": "", "metadata": ""}
{"_id": "02bac1f987b33d5b775dcd88022d035d", "text": "def barray ( iterlines ) : lst = [ line . encode ( 'utf-8' ) for line in iterlines ] arr = numpy . array ( lst ) return arr\n", "title": "", "metadata": ""}
{"_id": "27003167bcd39d691b630e4d09c2da64", "text": "def is_quoted ( arg : str ) -> bool : return len ( arg ) > 1 and arg [ 0 ] == arg [ - 1 ] and arg [ 0 ] in constants . QUOTES\n", "title": "", "metadata": ""}
{"_id": "1f01c4ce1005b9dc75630d9ad740fda5", "text": "def get_number ( s , cast = int ) : import string d = \"\" . join ( x for x in str ( s ) if x in string . digits ) return cast ( d )\n", "title": "", "metadata": ""}
{"_id": "fb37979ad4c1d4629324c7dc2816e496", "text": "def connect_mysql ( host , port , user , password , database ) : return pymysql . connect ( host = host , port = port , user = user , passwd = password , db = database )\n", "title": "", "metadata": ""}
{"_id": "8e0e8057d6d07e00434208f6ed180e13", "text": "def grep ( pattern , filename ) : try : # for line in file # if line matches pattern: #    return line return next ( ( L for L in open ( filename ) if L . find ( pattern ) >= 0 ) ) except StopIteration : return ''\n", "title": "", "metadata": ""}
{"_id": "cb3cdd158e395178231766c4341ea5b7", "text": "def _elapsed ( self ) : self . last_time = time . time ( ) return self . last_time - self . start\n", "title": "", "metadata": ""}
{"_id": "4b31b8556ef05e6eca8bf282ded63b0f", "text": "def ensure_hbounds ( self ) : self . cursor . x = min ( max ( 0 , self . cursor . x ) , self . columns - 1 )\n", "title": "", "metadata": ""}
{"_id": "83b6dddb8327e3d22f8b2f2f20b08076", "text": "def wait_until_exit ( self ) : if self . _timeout is None : raise Exception ( \"Thread will never exit. Use stop or specify timeout when starting it!\" ) self . _thread . join ( ) self . stop ( )\n", "title": "", "metadata": ""}
{"_id": "384446d549e972d220daaac22f543076", "text": "def is_string ( val ) : try : basestring except NameError : return isinstance ( val , str ) return isinstance ( val , basestring )\n", "title": "", "metadata": ""}
{"_id": "67a1eabdf6bec760ce0b5d345283edf8", "text": "def read ( self ) : stream = BytesIO ( ) self . cam . capture ( stream , format = 'png' ) # \"Rewind\" the stream to the beginning so we can read its content stream . seek ( 0 ) return Image . open ( stream )\n", "title": "", "metadata": ""}
{"_id": "df99de1058193b59a487107cea07c571", "text": "def indented_show ( text , howmany = 1 ) : print ( StrTemplate . pad_indent ( text = text , howmany = howmany ) )\n", "title": "", "metadata": ""}
{"_id": "dee0d642f873216e709487b2c2e8366d", "text": "def find_geom ( geom , geoms ) : for i , g in enumerate ( geoms ) : if g is geom : return i\n", "title": "", "metadata": ""}
{"_id": "2c9c13ffb262007fbbfb812046efad75", "text": "def find_first_in_list ( txt : str , str_list : [ str ] ) -> int : # type: ignore start = len ( txt ) + 1 for item in str_list : if start > txt . find ( item ) > - 1 : start = txt . find ( item ) return start if len ( txt ) + 1 > start > - 1 else - 1\n", "title": "", "metadata": ""}
{"_id": "58f187fa24cf0ca9c87e81cbd71b4284", "text": "def adjacency ( tree ) : dd = ids ( tree ) N = len ( dd ) A = np . zeros ( ( N , N ) ) def _adj ( node ) : if np . isscalar ( node ) : return elif isinstance ( node , tuple ) and len ( node ) == 2 : A [ dd [ node ] , dd [ node [ 0 ] ] ] = 1 A [ dd [ node [ 0 ] ] , dd [ node ] ] = 1 _adj ( node [ 0 ] ) A [ dd [ node ] , dd [ node [ 1 ] ] ] = 1 A [ dd [ node [ 1 ] ] , dd [ node ] ] = 1 _adj ( node [ 1 ] ) _adj ( tree ) return A\n", "title": "", "metadata": ""}
{"_id": "1d9ed89894f0e4d95844c7275efa54e8", "text": "def flatten ( nested , containers = ( list , tuple ) ) : for item in nested : if hasattr ( item , \"next\" ) or isinstance ( item , containers ) : for subitem in flatten ( item ) : yield subitem else : yield item\n", "title": "", "metadata": ""}
{"_id": "f282aa73159543d61ed81fafb29edc64", "text": "def get_2D_samples_gauss ( n , m , sigma , random_state = None ) : return make_2D_samples_gauss ( n , m , sigma , random_state = None )\n", "title": "", "metadata": ""}
{"_id": "6615008fca0c56ea59686bb2d5d7c4bb", "text": "def _is_leap_year ( year ) : isleap = ( ( np . mod ( year , 4 ) == 0 ) & ( ( np . mod ( year , 100 ) != 0 ) | ( np . mod ( year , 400 ) == 0 ) ) ) return isleap\n", "title": "", "metadata": ""}
{"_id": "576313dd31b988175469ed8d475d5808", "text": "def keys ( self ) : all_keys = [ k . decode ( 'utf-8' ) for k , v in self . rdb . hgetall ( self . session_hash ) . items ( ) ] return all_keys\n", "title": "", "metadata": ""}
{"_id": "22befefe3c61da24db4c3deeff10c1a0", "text": "def _windowsLdmodTargets ( target , source , env , for_signature ) : return _dllTargets ( target , source , env , for_signature , 'LDMODULE' )\n", "title": "", "metadata": ""}
{"_id": "a5da45719b189fe9e5e077181b8aff98", "text": "def slugify ( string ) : string = re . sub ( '[^\\w .-]' , '' , string ) string = string . replace ( \" \" , \"-\" ) return string\n", "title": "", "metadata": ""}
{"_id": "e838991cabbcbe9216ef25d02c9e028b", "text": "def re_raise ( self ) : if self . exc_info is not None : six . reraise ( type ( self ) , self , self . exc_info [ 2 ] ) else : raise self\n", "title": "", "metadata": ""}
{"_id": "87e30019f3795384921281550b58d794", "text": "def _prt_line_detail ( self , prt , line , lnum = \"\" ) : data = zip ( self . flds , line . split ( '\\t' ) ) txt = [ \"{:2}) {:13} {}\" . format ( i , hdr , val ) for i , ( hdr , val ) in enumerate ( data ) ] prt . write ( \"{LNUM}\\n{TXT}\\n\" . format ( LNUM = lnum , TXT = '\\n' . join ( txt ) ) )\n", "title": "", "metadata": ""}
{"_id": "eab010ce33f914072ad3b57524942c7a", "text": "def dedupe_list ( seq ) : seen = set ( ) return [ x for x in seq if not ( x in seen or seen . add ( x ) ) ]\n", "title": "", "metadata": ""}
{"_id": "00d2ddf738fc08b0fee7761150c49a06", "text": "def batchify ( data , batch_size ) : nbatch = data . shape [ 0 ] // batch_size data = data [ : nbatch * batch_size ] data = data . reshape ( ( batch_size , nbatch ) ) . T return data\n", "title": "", "metadata": ""}
{"_id": "23762a4164761f8d17073056bc1c4d6e", "text": "def read_raw ( data_path ) : with open ( data_path , 'rb' ) as f : data = pickle . load ( f ) return data\n", "title": "", "metadata": ""}
{"_id": "f6489e9af05fc67fafe1db1611224712", "text": "def make_2d ( ary ) : dim_0 ,  * _ = np . atleast_1d ( ary ) . shape return ary . reshape ( dim_0 , - 1 , order = \"F\" )\n", "title": "", "metadata": ""}
{"_id": "06d13f4946906ac0fd0c020b258a398a", "text": "def flatten ( lis ) : new_lis = [ ] for item in lis : if isinstance ( item , collections . Sequence ) and not isinstance ( item , basestring ) : new_lis . extend ( flatten ( item ) ) else : new_lis . append ( item ) return new_lis\n", "title": "", "metadata": ""}
{"_id": "d016cbbb3aeb8ae1b5e51b4fce66d047", "text": "def _duplicates ( list_ ) : item_indices = { } for i , item in enumerate ( list_ ) : try : item_indices [ item ] . append ( i ) except KeyError : # First time seen item_indices [ item ] = [ i ] return item_indices\n", "title": "", "metadata": ""}
{"_id": "07ef945b25c631fd3cd0ddd750777ba8", "text": "def _load_texture ( file_name , resolver ) : file_data = resolver . get ( file_name ) image = PIL . Image . open ( util . wrap_as_stream ( file_data ) ) return image\n", "title": "", "metadata": ""}
{"_id": "7c50c2da69f5b62012b389021e5e86f6", "text": "def peak_memory_usage ( ) : if sys . platform . startswith ( 'win' ) : p = psutil . Process ( ) return p . memory_info ( ) . peak_wset / 1024 / 1024 mem = resource . getrusage ( resource . RUSAGE_SELF ) . ru_maxrss factor_mb = 1 / 1024 if sys . platform == 'darwin' : factor_mb = 1 / ( 1024 * 1024 ) return mem * factor_mb\n", "title": "", "metadata": ""}
{"_id": "fb0a9d80922888138f22c0251ce64765", "text": "def camel_case ( self , snake_case ) : components = snake_case . split ( '_' ) return components [ 0 ] + \"\" . join ( x . title ( ) for x in components [ 1 : ] )\n", "title": "", "metadata": ""}
{"_id": "21a482227f0e1d600a74f13b9e33883c", "text": "def lmx_h1k_f64k ( ) : hparams = lmx_base ( ) hparams . hidden_size = 1024 hparams . filter_size = 65536 hparams . batch_size = 2048 return hparams\n", "title": "", "metadata": ""}
{"_id": "82875473c6ff1d4d58d229e44de925fb", "text": "def is_hex_string ( string ) : pattern = re . compile ( r'[A-Fa-f0-9]+' ) if isinstance ( string , six . binary_type ) : string = str ( string ) return pattern . match ( string ) is not None\n", "title": "", "metadata": ""}
{"_id": "8c154798c238e9be6eefb67143315e60", "text": "def get_from_gnucash26_date ( date_str : str ) -> date : date_format = \"%Y%m%d\" result = datetime . strptime ( date_str , date_format ) . date ( ) return result\n", "title": "", "metadata": ""}
{"_id": "bbc65bf6d28b2fd1feac35b7f81647ce", "text": "def filesavebox ( msg = None , title = None , argInitialFile = None ) : return psidialogs . ask_file ( message = msg , title = title , default = argInitialFile , save = True )\n", "title": "", "metadata": ""}
{"_id": "b68234b3641f3dd99c84906c65422144", "text": "def do ( self ) : self . restore_point = self . obj . copy ( ) return self . do_method ( self . obj , * self . args )\n", "title": "", "metadata": ""}
{"_id": "bb73a528dedd44e4c97701fb24b260f0", "text": "def stft ( func = None , * * kwparams ) : from numpy . fft import fft , ifft return stft . base ( transform = fft , inverse_transform = ifft ) ( func , * * kwparams )\n", "title": "", "metadata": ""}
{"_id": "ca3bfb84e35ec7c10a6cc0c970b30b33", "text": "def adapt_array ( arr ) : out = io . BytesIO ( ) np . save ( out , arr ) , out . seek ( 0 ) return buffer ( out . read ( ) )\n", "title": "", "metadata": ""}
{"_id": "b7744bd5563c827f59051a25a7d4a153", "text": "def join ( self ) : self . inputfeeder_thread . join ( ) self . pool . join ( ) self . resulttracker_thread . join ( ) self . failuretracker_thread . join ( )\n", "title": "", "metadata": ""}
{"_id": "90049f4c4d21e3233e58417777452e01", "text": "def directory_files ( path ) : for entry in os . scandir ( path ) : if not entry . name . startswith ( '.' ) and entry . is_file ( ) : yield entry . name\n", "title": "", "metadata": ""}
{"_id": "b12390ee748a67d75ace41ae5e46304d", "text": "def is_sqlatype_integer ( coltype : Union [ TypeEngine , VisitableType ] ) -> bool : coltype = _coltype_to_typeengine ( coltype ) return isinstance ( coltype , sqltypes . Integer )\n", "title": "", "metadata": ""}
{"_id": "a6864a3cfe16618cb490e22398492113", "text": "def __exit__ ( self , type , value , traceback ) : if not self . asarfile : return self . asarfile . close ( ) self . asarfile = None\n", "title": "", "metadata": ""}
{"_id": "8900d05e62a6a1414faeb6ddb9c71a82", "text": "def _get_all_constants ( ) : return [ key for key in globals ( ) . keys ( ) if all ( [ not key . startswith ( \"_\" ) , # publicly accesible key . upper ( ) == key , # uppercase type ( globals ( ) [ key ] ) in _ALLOWED # and with type from _ALLOWED ] ) ]\n", "title": "", "metadata": ""}
{"_id": "7dcecc4ff598a2f00a3a1e44bdcc011e", "text": "def iter_fields ( self , schema : Schema ) -> Iterable [ Tuple [ str , Field ] ] : for name in sorted ( schema . fields . keys ( ) ) : field = schema . fields [ name ] yield field . dump_to or name , field\n", "title": "", "metadata": ""}
{"_id": "c1bea5138a264e263a833512f47c0760", "text": "def tinsel ( to_patch , module_name , decorator = mock_decorator ) : def fn_decorator ( function ) : def wrapper ( * args , * * kwargs ) : with patch ( to_patch , decorator ) : m = importlib . import_module ( module_name ) reload ( m ) function ( * args , * * kwargs ) reload ( m ) return wrapper return fn_decorator\n", "title": "", "metadata": ""}
{"_id": "5cfd7e51dfca06123c0f19b3d2f93a97", "text": "def is_finite ( value : Any ) -> bool : return isinstance ( value , int ) or ( isinstance ( value , float ) and isfinite ( value ) )\n", "title": "", "metadata": ""}
{"_id": "93bea2cde53ae9429bf8e504cf89eb5a", "text": "def reverse_transform ( self , col ) : output = pd . DataFrame ( ) output [ self . col_name ] = self . get_category ( col [ self . col_name ] ) return output\n", "title": "", "metadata": ""}
{"_id": "aa888dbb08b3773470da38516f408d36", "text": "def render_none ( self , context , result ) : context . response . body = b'' del context . response . content_length return True\n", "title": "", "metadata": ""}
{"_id": "51192193e15025bb40008c1444c8fecf", "text": "def _serialize_json ( obj , fp ) : json . dump ( obj , fp , indent = 4 , default = serialize )\n", "title": "", "metadata": ""}
{"_id": "4d52e83dbeb72da00c4b7b30d09eafa3", "text": "def data_directory ( ) : package_directory = os . path . abspath ( os . path . dirname ( __file__ ) ) return os . path . join ( package_directory , \"data\" )\n", "title": "", "metadata": ""}
{"_id": "5391afacbae94618ecd5caf2376d9c72", "text": "def multi_split ( s , split ) : # type: (S, Iterable[S]) -> List[S] for r in split : s = s . replace ( r , \"|\" ) return [ i for i in s . split ( \"|\" ) if len ( i ) > 0 ]\n", "title": "", "metadata": ""}
{"_id": "9d74000d98fd8cc6176405af6385f93b", "text": "def move_datetime_year ( dt , direction , num_shifts ) : delta = relativedelta ( years = + num_shifts ) return _move_datetime ( dt , direction , delta )\n", "title": "", "metadata": ""}
{"_id": "c522ebd117b24de2e338bcc6a432a66a", "text": "def array2string ( arr : numpy . ndarray ) -> str : shape = str ( arr . shape ) [ 1 : - 1 ] if shape . endswith ( \",\" ) : shape = shape [ : - 1 ] return numpy . array2string ( arr , threshold = 11 ) + \"%s[%s]\" % ( arr . dtype , shape )\n", "title": "", "metadata": ""}
{"_id": "c38726c0df3062dc3730b5a69ea3c661", "text": "def cell_ends_with_code ( lines ) : if not lines : return False if not lines [ - 1 ] . strip ( ) : return False if lines [ - 1 ] . startswith ( '#' ) : return False return True\n", "title": "", "metadata": ""}
{"_id": "ccecf41ed5bca155d13a10346b94a49e", "text": "def _process_and_sort ( s , force_ascii , full_process = True ) : # pull tokens ts = utils . full_process ( s , force_ascii = force_ascii ) if full_process else s tokens = ts . split ( ) # sort tokens and join sorted_string = u\" \" . join ( sorted ( tokens ) ) return sorted_string . strip ( )\n", "title": "", "metadata": ""}
{"_id": "5cb718f98c2245a5b60c824435412a80", "text": "def is_palindrome ( string , strict = True ) : if is_full_string ( string ) : if strict : return reverse ( string ) == string return is_palindrome ( SPACES_RE . sub ( '' , string ) ) return False\n", "title": "", "metadata": ""}
{"_id": "ce868472e2da4265bf97d8aacf6805dd", "text": "def __call__ ( self , xy ) : x , y = xy return ( self . x ( x ) , self . y ( y ) )\n", "title": "", "metadata": ""}
{"_id": "26c75830d570d3e3be4040c429049e15", "text": "def get_tablenames ( cur ) : cur . execute ( \"SELECT name FROM sqlite_master WHERE type='table'\" ) tablename_list_ = cur . fetchall ( ) tablename_list = [ str ( tablename [ 0 ] ) for tablename in tablename_list_ ] return tablename_list\n", "title": "", "metadata": ""}
{"_id": "09cbed41c65ff1c62187e0ad0981346a", "text": "async def join ( self , ctx , * , channel : discord . VoiceChannel ) : if ctx . voice_client is not None : return await ctx . voice_client . move_to ( channel ) await channel . connect ( )\n", "title": "", "metadata": ""}
{"_id": "0c26460462dd1ec78895df151279d174", "text": "def strtobytes ( input , encoding ) : py_version = sys . version_info [ 0 ] if py_version >= 3 : return _strtobytes_py3 ( input , encoding ) return _strtobytes_py2 ( input , encoding )\n", "title": "", "metadata": ""}
{"_id": "889187f625cf063b245130e3127e95a1", "text": "def _unzip_handle ( handle ) : if isinstance ( handle , basestring ) : handle = _gzip_open_filename ( handle ) else : handle = _gzip_open_handle ( handle ) return handle\n", "title": "", "metadata": ""}
{"_id": "6c392d816352034194319fe62168537c", "text": "def All ( sequence ) : return bool ( reduce ( lambda x , y : x and y , sequence , True ) )\n", "title": "", "metadata": ""}
{"_id": "d70b6564b709c24fdb5c5c2044aea252", "text": "def read_dict_from_file ( file_path ) : with open ( file_path ) as file : lines = file . read ( ) . splitlines ( ) obj = { } for line in lines : key , value = line . split ( ':' , maxsplit = 1 ) obj [ key ] = eval ( value ) return obj\n", "title": "", "metadata": ""}
{"_id": "dba3c5212daa6f05b622cda382699174", "text": "def boolean ( flag ) : s = flag . lower ( ) if s in ( '1' , 'yes' , 'true' ) : return True elif s in ( '0' , 'no' , 'false' ) : return False raise ValueError ( 'Unknown flag %r' % s )\n", "title": "", "metadata": ""}
{"_id": "1465cf0b10bdbae965e189bd907bd2ed", "text": "def default_number_converter ( number_str ) : is_int = ( number_str . startswith ( '-' ) and number_str [ 1 : ] . isdigit ( ) ) or number_str . isdigit ( ) # FIXME: this handles a wider range of numbers than allowed by the json standard, # etc.: float('nan') and float('inf'). But is this a problem? return int ( number_str ) if is_int else float ( number_str )\n", "title": "", "metadata": ""}
{"_id": "3e01821e44f20ea612c436f34144b4de", "text": "def cmd_reindex ( ) : db = connect ( args . database ) for idx in args . indexes : pg_reindex ( db , idx )\n", "title": "", "metadata": ""}
{"_id": "8288f92e767a597f26d524e8b49bc0d5", "text": "def is_valid_folder ( parser , arg ) : arg = os . path . abspath ( arg ) if not os . path . isdir ( arg ) : parser . error ( \"The folder %s does not exist!\" % arg ) else : return arg\n", "title": "", "metadata": ""}
{"_id": "cd339524104d541af9f1e22473d0aa97", "text": "def scan ( client , query = None , scroll = '5m' , raise_on_error = True , preserve_order = False , size = 1000 , * * kwargs ) : if not preserve_order : kwargs [ 'search_type' ] = 'scan' # initial search resp = client . search ( body = query , scroll = scroll , size = size , * * kwargs ) scroll_id = resp . get ( '_scroll_id' ) if scroll_id is None : return first_run = True while True : # if we didn't set search_type to scan initial search contains data if preserve_order and first_run : first_run = False else : resp = client . scroll ( scroll_id , scroll = scroll ) for hit in resp [ 'hits' ] [ 'hits' ] : yield hit # check if we have any errrors if resp [ \"_shards\" ] [ \"failed\" ] : logger . warning ( 'Scroll request has failed on %d shards out of %d.' , resp [ '_shards' ] [ 'failed' ] , resp [ '_shards' ] [ 'total' ] ) if raise_on_error : raise ScanError ( 'Scroll request has failed on %d shards out of %d.' % ( resp [ '_shards' ] [ 'failed' ] , resp [ '_shards' ] [ 'total' ] ) ) scroll_id = resp . get ( '_scroll_id' ) # end of scroll if scroll_id is None or not resp [ 'hits' ] [ 'hits' ] : break\n", "title": "", "metadata": ""}
{"_id": "e63b4d201f99b64f1d4064edbacf97b5", "text": "def rlognormal ( mu , tau , size = None ) : return np . random . lognormal ( mu , np . sqrt ( 1. / tau ) , size )\n", "title": "", "metadata": ""}
{"_id": "7aab0b568a6033f731451c227b82cd59", "text": "def normalize ( self , string ) : return '' . join ( [ self . _normalize . get ( x , x ) for x in nfd ( string ) ] )\n", "title": "", "metadata": ""}
{"_id": "7f9d02c6b4a77d2f3fefb853923d5996", "text": "def is_collection ( obj ) : col = getattr ( obj , '__getitem__' , False ) val = False if ( not col ) else True if isinstance ( obj , basestring ) : val = False return val\n", "title": "", "metadata": ""}
{"_id": "29524b7ce406f5e7676346c2ab3320cd", "text": "def __repr__ ( self ) : return str ( { 'name' : self . _name , 'watts' : self . _watts , 'type' : self . _output_type , 'id' : self . _integration_id } )\n", "title": "", "metadata": ""}
{"_id": "f72b763395170aa24e69ed71255ac9f6", "text": "def xor ( a , b ) : return bytearray ( i ^ j for i , j in zip ( a , b ) )\n", "title": "", "metadata": ""}
{"_id": "a1081968b57ba60b0cbac8739333ba21", "text": "def _replace_nan ( a , val ) : mask = isnull ( a ) return where_method ( val , mask , a ) , mask\n", "title": "", "metadata": ""}
{"_id": "f7aa127ba9bb8a52dede3ef069eb9eef", "text": "def _match_literal ( self , a , b = None ) : return a . lower ( ) == b if not self . case_sensitive else a == b\n", "title": "", "metadata": ""}
{"_id": "0245256a514b1ed7f1ffa588ea436408", "text": "def random_int ( maximum_value ) : if maximum_value == 0 : return 0 elif maximum_value == 1 : return random_bits ( 1 ) bits = math . floor ( math . log2 ( maximum_value ) ) result = random_bits ( bits ) + random_int ( maximum_value - ( ( 2 ** bits ) - 1 ) ) return result\n", "title": "", "metadata": ""}
{"_id": "0735b0b2dcd456627c709c5cdb6badaf", "text": "def join_cols ( cols ) : return \", \" . join ( [ i for i in cols ] ) if isinstance ( cols , ( list , tuple , set ) ) else cols\n", "title": "", "metadata": ""}
{"_id": "7b9d92b415b2cd5dda152866fb81b06c", "text": "def apply ( self , node ) : new_node = self . run ( node ) return self . update , new_node\n", "title": "", "metadata": ""}
{"_id": "b1c753eae3387bc3711b961c241c136e", "text": "def drop_empty ( rows ) : return zip ( * [ col for col in zip ( * rows ) if bool ( filter ( bool , col [ 1 : ] ) ) ] )\n", "title": "", "metadata": ""}
{"_id": "8e462830b16aa39a98da0e700166e3ec", "text": "def monthly ( date = datetime . date . today ( ) ) : return datetime . date ( date . year , date . month , 1 )\n", "title": "", "metadata": ""}
{"_id": "0d914773db44cfc7fdd888f58a30a247", "text": "def str2int ( num , radix = 10 , alphabet = BASE85 ) : return NumConv ( radix , alphabet ) . str2int ( num )\n", "title": "", "metadata": ""}
{"_id": "476561afc1b32dbde7a6372b2696b576", "text": "def set_trace ( ) : # https://github.com/nose-devs/nose/blob/master/nose/tools/nontrivial.py pdb . Pdb ( stdout = sys . __stdout__ ) . set_trace ( sys . _getframe ( ) . f_back )\n", "title": "", "metadata": ""}
{"_id": "a10a34f61151cb6e25074784479d8664", "text": "def list ( self ) : return [ self . _pos3d . x , self . _pos3d . y , self . _pos3d . z ]\n", "title": "", "metadata": ""}
{"_id": "3463c0608d9a2b7cbd39acd55908dfe5", "text": "def leaf_nodes ( self ) : # Now contains all nodes that contain dependencies. deps = { item for sublist in self . edges . values ( ) for item in sublist } # contains all nodes *without* any dependencies (leaf nodes) return self . nodes - deps\n", "title": "", "metadata": ""}
{"_id": "2ba2700e03060029fdad2517da2a8f7a", "text": "def main ( argv = sys . argv , stream = sys . stderr ) : args = parse_args ( argv ) suite = build_suite ( args ) runner = unittest . TextTestRunner ( verbosity = args . verbose , stream = stream ) result = runner . run ( suite ) return get_status ( result )\n", "title": "", "metadata": ""}
{"_id": "ef37956cda17d05d29b94bc098dcd629", "text": "def _ ( f , x ) : return { k : v for k , v in x . items ( ) if f ( k , v ) }\n", "title": "", "metadata": ""}
{"_id": "f0bfdabd6b657ab801030391971144bd", "text": "def tuple_check ( * args , func = None ) : func = func or inspect . stack ( ) [ 2 ] [ 3 ] for var in args : if not isinstance ( var , ( tuple , collections . abc . Sequence ) ) : name = type ( var ) . __name__ raise TupleError ( f'Function {func} expected tuple, {name} got instead.' )\n", "title": "", "metadata": ""}
{"_id": "846507cada08d33ba52f237dc7f18f67", "text": "def server ( self ) : try : tar = urllib2 . urlopen ( self . registry ) meta = tar . info ( ) return int ( meta . getheaders ( \"Content-Length\" ) [ 0 ] ) except ( urllib2 . URLError , IndexError ) : return \" \"\n", "title": "", "metadata": ""}
{"_id": "3047f5da1825425a775d749ef27eeda2", "text": "def clean ( ctx , text ) : text = conversions . to_string ( text , ctx ) return '' . join ( [ c for c in text if ord ( c ) >= 32 ] )\n", "title": "", "metadata": ""}
{"_id": "c73e93ebb1d082623361ef1c8f530c18", "text": "def looks_like_url ( url ) : if not isinstance ( url , basestring ) : return False if not isinstance ( url , basestring ) or len ( url ) >= 1024 or not cre_url . match ( url ) : return False return True\n", "title": "", "metadata": ""}
{"_id": "da4f3ea95c06d9d18e42ad5d97ee6f44", "text": "def where_is ( strings , pattern , n = 1 , lookup_func = re . match ) : count = 0 for idx , item in enumerate ( strings ) : if lookup_func ( pattern , item ) : count += 1 if count == n : return idx return - 1\n", "title": "", "metadata": ""}
{"_id": "f32098220a749e5a19513a17ee6662ab", "text": "def trap_exceptions ( results , handler , exceptions = Exception ) : try : for result in results : yield result except exceptions as exc : for result in always_iterable ( handler ( exc ) ) : yield result\n", "title": "", "metadata": ""}
{"_id": "b3bd8ce07198fa3114d32611d4467e2f", "text": "def Unlock ( fd , path ) : try : fcntl . flock ( fd , fcntl . LOCK_UN | fcntl . LOCK_NB ) except IOError as e : if e . errno == errno . EWOULDBLOCK : raise IOError ( 'Exception unlocking %s. Locked by another process.' % path ) else : raise IOError ( 'Exception unlocking %s. %s.' % ( path , str ( e ) ) )\n", "title": "", "metadata": ""}
{"_id": "7e471e1172bab03e5483421dacae3b6a", "text": "def _set_request_cache_if_django_cache_hit ( key , django_cached_response ) : if django_cached_response . is_found : DEFAULT_REQUEST_CACHE . set ( key , django_cached_response . value )\n", "title": "", "metadata": ""}
{"_id": "88299f783c2b0326d75ce6a1907f6a93", "text": "def tokenize_list ( self , text ) : return [ self . get_record_token ( record ) for record in self . analyze ( text ) ]\n", "title": "", "metadata": ""}
{"_id": "3f817fb90e6ce53c574022713a06ce47", "text": "def go_to_parent_directory ( self ) : self . chdir ( osp . abspath ( osp . join ( getcwd_or_home ( ) , os . pardir ) ) )\n", "title": "", "metadata": ""}
{"_id": "43c8ca2be5902a1d6ad072c7d617f85a", "text": "def print ( cls , * args , * * kwargs ) : # pylint: disable=protected-access with _shared . _PRINT_LOCK : print ( * args , * * kwargs ) _sys . stdout . flush ( )\n", "title": "", "metadata": ""}
{"_id": "8c45289c2eb9d79f67592525bff30ea9", "text": "def get_extract_value_function ( column_identifier ) : def extract_value ( run_result ) : pos = None for i , column in enumerate ( run_result . columns ) : if column . title == column_identifier : pos = i break if pos is None : sys . exit ( 'CPU time missing for task {0}.' . format ( run_result . task_id [ 0 ] ) ) return Util . to_decimal ( run_result . values [ pos ] ) return extract_value\n", "title": "", "metadata": ""}
{"_id": "69b5c2f4a29e2de70ddc2eda49f75921", "text": "def _shape ( self , df ) : row , col = df . shape return row + df . columns . nlevels , col + df . index . nlevels\n", "title": "", "metadata": ""}
{"_id": "ed4c663066b199a1ddce85ef14b1ed76", "text": "def __gt__ ( self , other ) : if isinstance ( other , Address ) : return str ( self ) > str ( other ) raise TypeError\n", "title": "", "metadata": ""}
{"_id": "c004f4630b8a395420ef1e7d35645f5a", "text": "def _gauss ( mean : int , sigma : int ) -> int : return int ( random . gauss ( mean , sigma ) )\n", "title": "", "metadata": ""}
{"_id": "3e48397c940871eb648f57f0737734ef", "text": "def to_binary ( s , encoding = 'utf8' ) : if PY3 : # pragma: no cover return s if isinstance ( s , binary_type ) else binary_type ( s , encoding = encoding ) return binary_type ( s )\n", "title": "", "metadata": ""}
{"_id": "b19e32e245fb79cdf7776a9ac8f0418f", "text": "def calc_list_average ( l ) : total = 0.0 for value in l : total += value return total / len ( l )\n", "title": "", "metadata": ""}
{"_id": "09501b2b555eb86e6a1dfdc5a315ccab", "text": "def gday_of_year ( self ) : return ( self . date - dt . date ( self . date . year , 1 , 1 ) ) . days\n", "title": "", "metadata": ""}
{"_id": "b037b5aec21a47fd721956dd7cc8b046", "text": "def unique_list_dicts ( dlist , key ) : return list ( dict ( ( val [ key ] , val ) for val in dlist ) . values ( ) )\n", "title": "", "metadata": ""}
{"_id": "f411119f8d704d82b824918d195b11c8", "text": "def make_post_request ( self , url , auth , json_payload ) : response = requests . post ( url , auth = auth , json = json_payload ) return response . json ( )\n", "title": "", "metadata": ""}
{"_id": "2171f627a232e2a0cc811864673834b8", "text": "def consecutive ( data , stepsize = 1 ) : return np . split ( data , np . where ( np . diff ( data ) != stepsize ) [ 0 ] + 1 )\n", "title": "", "metadata": ""}
{"_id": "2a67241564388d04d310d35a522f9e6b", "text": "def set_xlimits ( self , row , column , min = None , max = None ) : subplot = self . get_subplot_at ( row , column ) subplot . set_xlimits ( min , max )\n", "title": "", "metadata": ""}
{"_id": "a73d92d07fd7849b8ae26931addd8296", "text": "def percentile ( sorted_list , percent , key = lambda x : x ) : if not sorted_list : return None if percent == 1 : return float ( sorted_list [ - 1 ] ) if percent == 0 : return float ( sorted_list [ 0 ] ) n = len ( sorted_list ) i = percent * n if ceil ( i ) == i : i = int ( i ) return ( sorted_list [ i - 1 ] + sorted_list [ i ] ) / 2 return float ( sorted_list [ ceil ( i ) - 1 ] )\n", "title": "", "metadata": ""}
{"_id": "cf5086925bcf426bf9f35bb65a94c41c", "text": "def paste ( cmd = paste_cmd , stdout = PIPE ) : return Popen ( cmd , stdout = stdout ) . communicate ( ) [ 0 ] . decode ( 'utf-8' )\n", "title": "", "metadata": ""}
{"_id": "34796b8cc09abb4aebbb19941805a65f", "text": "def print_err ( * args , end = '\\n' ) : print ( * args , end = end , file = sys . stderr ) sys . stderr . flush ( )\n", "title": "", "metadata": ""}
{"_id": "f9e0faf99057814ea8dbc2bfc5c53536", "text": "def _remove_from_index ( index , obj ) : try : index . value_map [ indexed_value ( index , obj ) ] . remove ( obj . id ) except KeyError : pass\n", "title": "", "metadata": ""}
{"_id": "db4909c836731e8df9555ad2eabd43b0", "text": "def keys ( self , index = None ) : with self . _lmdb . begin ( ) as txn : return [ key . decode ( ) for key , _ in txn . cursor ( ) ]\n", "title": "", "metadata": ""}
{"_id": "8dcbf4cde905ce43a14eba14bc8823d4", "text": "def resource_property ( klass , name , * * kwargs ) : klass . PROPERTIES [ name ] = kwargs def getter ( self ) : return getattr ( self , '_%s' % name , kwargs . get ( 'default' , None ) ) if kwargs . get ( 'readonly' , False ) : setattr ( klass , name , property ( getter ) ) else : def setter ( self , value ) : setattr ( self , '_%s' % name , value ) setattr ( klass , name , property ( getter , setter ) )\n", "title": "", "metadata": ""}
{"_id": "87a26f192f6a728f17fef8f941316059", "text": "def set_logxticks_for_all ( self , row_column_list = None , logticks = None ) : if row_column_list is None : self . ticks [ 'x' ] = [ '1e%d' % u for u in logticks ] else : for row , column in row_column_list : self . set_logxticks ( row , column , logticks )\n", "title": "", "metadata": ""}
{"_id": "32dd354fbc5451b93219ec225685538a", "text": "def array_size ( x , axis ) : axis_shape = x . shape if axis is None else tuple ( x . shape [ a ] for a in axis ) return max ( numpy . prod ( axis_shape ) , 1 )\n", "title": "", "metadata": ""}
{"_id": "9c3acf86bb959f104552d03d8606afdf", "text": "def set_locale ( request ) : return request . query . get ( 'lang' , app . ps . babel . select_locale_by_request ( request ) )\n", "title": "", "metadata": ""}
{"_id": "d570e09d30b64c92d735df71d6cd28d9", "text": "def __rmatmul__ ( self , other ) : return self . T . dot ( np . transpose ( other ) ) . T\n", "title": "", "metadata": ""}
{"_id": "e8e8acc635bed06fe07dcf541a79f6a7", "text": "def get_mouse_location ( self ) : x = ctypes . c_int ( 0 ) y = ctypes . c_int ( 0 ) screen_num = ctypes . c_int ( 0 ) _libxdo . xdo_get_mouse_location ( self . _xdo , ctypes . byref ( x ) , ctypes . byref ( y ) , ctypes . byref ( screen_num ) ) return mouse_location ( x . value , y . value , screen_num . value )\n", "title": "", "metadata": ""}
{"_id": "57d5820620644621f6c933646f406ec7", "text": "def connect ( self ) : self . client = redis . Redis ( host = self . host , port = self . port , password = self . password )\n", "title": "", "metadata": ""}
{"_id": "698fe4154189741656de158ddd9794ae", "text": "def cols_str ( columns ) : cols = \"\" for c in columns : cols = cols + wrap ( c ) + ', ' return cols [ : - 2 ]\n", "title": "", "metadata": ""}
{"_id": "0c41b1e2ab38907540b2b9fecb3f4294", "text": "def getChildElementsByTagName ( self , tagName ) : result = [ ] for child in self . childNodes : if isinstance ( child , Element ) : if child . tagName == tagName : result . append ( child ) return result\n", "title": "", "metadata": ""}
{"_id": "77869a45baf8ddb763314f5bd55902bd", "text": "def printdict ( adict ) : dlist = list ( adict . keys ( ) ) dlist . sort ( ) for i in range ( 0 , len ( dlist ) ) : print ( dlist [ i ] , adict [ dlist [ i ] ] )\n", "title": "", "metadata": ""}
{"_id": "39efe46a2f9e58280dfae41c20ed6992", "text": "def from_points ( cls , list_of_lists ) : result = [ ] for l in list_of_lists : curve = [ ] for point in l : curve . append ( ( point . lon , point . lat ) ) result . append ( curve ) return Polygon ( result )\n", "title": "", "metadata": ""}
{"_id": "10417ab6bc23e3727d81475cb90f0549", "text": "def Timestamp ( year , month , day , hour , minute , second ) : return datetime . datetime ( year , month , day , hour , minute , second )\n", "title": "", "metadata": ""}
{"_id": "691e273f6b5558113de3e061c9b62d92", "text": "def _get_file_sha1 ( file ) : bits = file . read ( ) file . seek ( 0 ) h = hashlib . new ( 'sha1' , bits ) . hexdigest ( ) return h\n", "title": "", "metadata": ""}
{"_id": "4d9f2057eaf7b89ae59e686281799f5f", "text": "def rmfile ( path ) : if osp . isfile ( path ) : if is_win : os . chmod ( path , 0o777 ) os . remove ( path )\n", "title": "", "metadata": ""}
{"_id": "c5463ff260d223e16be718c14e489cbb", "text": "def thai_to_eng ( text : str ) -> str : return \"\" . join ( [ TH_EN_KEYB_PAIRS [ ch ] if ( ch in TH_EN_KEYB_PAIRS ) else ch for ch in text ] )\n", "title": "", "metadata": ""}
{"_id": "4220673f48534d40803faccc30ac0ca6", "text": "def rpop ( self , key ) : redis_list = self . _get_list ( key , 'RPOP' ) if self . _encode ( key ) not in self . redis : return None try : value = redis_list . pop ( ) if len ( redis_list ) == 0 : self . delete ( key ) return value except ( IndexError ) : # Redis returns nil if popping from an empty list return None\n", "title": "", "metadata": ""}
{"_id": "32e472f1a7feb46a808a983e3b2c9cae", "text": "def _datetime_to_date ( arg ) : _arg = parse ( arg ) if isinstance ( _arg , datetime . datetime ) : _arg = _arg . date ( ) return _arg\n", "title": "", "metadata": ""}
{"_id": "7788019c6dce81645692e9c28b02e610", "text": "def _write_json ( file , contents ) : with open ( file , 'w' ) as f : return json . dump ( contents , f , indent = 2 , sort_keys = True )\n", "title": "", "metadata": ""}
{"_id": "2356f4e34797e8ac224090f0ed3d0b0a", "text": "def valid_uuid ( value ) : try : uuid . UUID ( value , version = 4 ) return True except ( TypeError , ValueError , AttributeError ) : return False\n", "title": "", "metadata": ""}
{"_id": "e3a6863d794180bc08af515755bacf9c", "text": "def filter_contour ( imageFile , opFile ) : im = Image . open ( imageFile ) im1 = im . filter ( ImageFilter . CONTOUR ) im1 . save ( opFile )\n", "title": "", "metadata": ""}
{"_id": "869213ab2abfe8670b399931bdc8600d", "text": "def __next__ ( self ) : self . current += 1 if self . current > self . total : raise StopIteration else : return self . iterable [ self . current - 1 ]\n", "title": "", "metadata": ""}
{"_id": "3c1f2f56d6b590c2bc4d00d5b948c26f", "text": "def last ( self ) : # End of file self . __file . seek ( 0 , 2 ) # Get the last struct data = self . get ( self . length - 1 ) return data\n", "title": "", "metadata": ""}
{"_id": "ef7fa9c5009dd0e7924d3cd52748f72b", "text": "def str_to_time ( time_str : str ) -> datetime . datetime : pieces : Any = [ int ( piece ) for piece in time_str . split ( '-' ) ] return datetime . datetime ( * pieces )\n", "title": "", "metadata": ""}
{"_id": "73fec7f2cd29d3549a9636a41e685c5f", "text": "def populate_obj ( obj , attrs ) : for k , v in attrs . iteritems ( ) : setattr ( obj , k , v )\n", "title": "", "metadata": ""}
{"_id": "858359ecd2b51d2223a9a5d1a33c0042", "text": "def getbyteslice ( self , start , end ) : c = self . _rawarray [ start : end ] return c\n", "title": "", "metadata": ""}
{"_id": "b1a199f59ec74499381dd332bcc72acb", "text": "def select_default ( self ) : if self . _default is None : if not self . _set_option_by_index ( 0 ) : utils . error_format ( self . description + \"\\n\" + \"Unable to select default option as the Combo is empty\" ) else : if not self . _set_option ( self . _default ) : utils . error_format ( self . description + \"\\n\" + \"Unable to select default option as it doesnt exist in the Combo\" )\n", "title": "", "metadata": ""}
{"_id": "e360949932cbf25f3cd15403689d304b", "text": "def first_digits ( s , default = 0 ) : s = re . split ( r'[^0-9]+' , str ( s ) . strip ( ) . lstrip ( '+-' + charlist . whitespace ) ) if len ( s ) and len ( s [ 0 ] ) : return int ( s [ 0 ] ) return default\n", "title": "", "metadata": ""}
{"_id": "f1bece3e6e439608583ecec761d84e64", "text": "def bisect_index ( a , x ) : i = bisect . bisect_left ( a , x ) if i != len ( a ) and a [ i ] == x : return i raise ValueError\n", "title": "", "metadata": ""}
{"_id": "6643f31b04037037b83e93a473367e9d", "text": "def get_month_start ( day = None ) : day = add_timezone ( day or datetime . date . today ( ) ) return day . replace ( day = 1 )\n", "title": "", "metadata": ""}
{"_id": "a2394501988da467105048fde930bbec", "text": "def rank ( tensor : BKTensor ) -> int : if isinstance ( tensor , np . ndarray ) : return len ( tensor . shape ) return len ( tensor [ 0 ] . size ( ) )\n", "title": "", "metadata": ""}
{"_id": "6cb181a8ada94e547e6b1da1eb6bf5ba", "text": "def check_if_numbers_are_consecutive ( list_ ) : return all ( ( True if second - first == 1 else False for first , second in zip ( list_ [ : - 1 ] , list_ [ 1 : ] ) ) )\n", "title": "", "metadata": ""}
{"_id": "3266468d92a4854de7e494e92aa697ea", "text": "def text_width ( string , font_name , font_size ) : return stringWidth ( string , fontName = font_name , fontSize = font_size )\n", "title": "", "metadata": ""}
{"_id": "7eb7b219697405de2201fd37b1bb56d8", "text": "def wr_row_mergeall ( self , worksheet , txtstr , fmt , row_idx ) : hdridxval = len ( self . hdrs ) - 1 worksheet . merge_range ( row_idx , 0 , row_idx , hdridxval , txtstr , fmt ) return row_idx + 1\n", "title": "", "metadata": ""}
{"_id": "758fd6eac78d43b5448a278543ade82f", "text": "def convolve_gaussian_2d ( image , gaussian_kernel_1d ) : result = scipy . ndimage . filters . correlate1d ( image , gaussian_kernel_1d , axis = 0 ) result = scipy . ndimage . filters . correlate1d ( result , gaussian_kernel_1d , axis = 1 ) return result\n", "title": "", "metadata": ""}
{"_id": "5e8749de956ad6fdf00f5d43ef20c05f", "text": "def scale_image ( image , new_width ) : ( original_width , original_height ) = image . size aspect_ratio = original_height / float ( original_width ) new_height = int ( aspect_ratio * new_width ) # This scales it wider than tall, since characters are biased new_image = image . resize ( ( new_width * 2 , new_height ) ) return new_image\n", "title": "", "metadata": ""}
{"_id": "6b3e545bdc1801808c89ab019d0ec530", "text": "def _get_column_types ( self , data ) : columns = list ( zip_longest ( * data ) ) return [ self . _get_column_type ( column ) for column in columns ]\n", "title": "", "metadata": ""}
{"_id": "9ab02addcfb1176f90d9f0187e249423", "text": "def cartesian_product ( arrays , flat = True , copy = False ) : arrays = np . broadcast_arrays ( * np . ix_ ( * arrays ) ) if flat : return tuple ( arr . flatten ( ) if copy else arr . flat for arr in arrays ) return tuple ( arr . copy ( ) if copy else arr for arr in arrays )\n", "title": "", "metadata": ""}
{"_id": "a09fbf50a1cc60fcd87df274436e730f", "text": "def __set__ ( self , instance , value ) : self . map [ id ( instance ) ] = ( weakref . ref ( instance ) , value )\n", "title": "", "metadata": ""}
{"_id": "98ead6ca2570fc22623dbc1c5baa429e", "text": "def get_system_root_directory ( ) : root = os . path . dirname ( __file__ ) root = os . path . dirname ( root ) root = os . path . abspath ( root ) return root\n", "title": "", "metadata": ""}
{"_id": "4a717cbafad7800eca50189a41779152", "text": "def is_iter_non_string ( obj ) : if isinstance ( obj , list ) or isinstance ( obj , tuple ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "4cdd0d64748ea517340623c91a04f577", "text": "def cmp_contents ( filename1 , filename2 ) : with open_readable ( filename1 , 'rb' ) as fobj : contents1 = fobj . read ( ) with open_readable ( filename2 , 'rb' ) as fobj : contents2 = fobj . read ( ) return contents1 == contents2\n", "title": "", "metadata": ""}
{"_id": "103f8d9b3c7444a96779b3e68ab513ae", "text": "def norm_vec ( vector ) : assert len ( vector ) == 3 v = np . array ( vector ) return v / np . sqrt ( np . sum ( v ** 2 ) )\n", "title": "", "metadata": ""}
{"_id": "1b901ba1c32d8c6fc5f8e0cfb9a1a9e5", "text": "def get_object_or_child_by_type ( self , * types ) : objects = self . get_objects_or_children_by_type ( * types ) return objects [ 0 ] if any ( objects ) else None\n", "title": "", "metadata": ""}
{"_id": "b4c7854a6569400873cc7f0cd3a4096d", "text": "def assert_valid_input ( cls , tag ) : # Fail on unexpected types. if not cls . is_tag ( tag ) : raise TypeError ( \"Expected a BeautifulSoup 'Tag', but instead recieved type {}\" . format ( type ( tag ) ) )\n", "title": "", "metadata": ""}
{"_id": "f3b4281c62c0ed1869225038d56d818f", "text": "def _config_win32_domain ( self , domain ) : # we call str() on domain to convert it from unicode to ascii self . domain = dns . name . from_text ( str ( domain ) )\n", "title": "", "metadata": ""}
{"_id": "d0c5377d19ce2fb412efdf8277426757", "text": "def get_parent_dir ( name ) : parent_dir = os . path . dirname ( os . path . dirname ( name ) ) if parent_dir : return parent_dir return os . path . abspath ( '.' )\n", "title": "", "metadata": ""}
{"_id": "1f931b1aa110766ba649dbe02433291b", "text": "def dispatch ( self , request , * args , * * kwargs ) : self . request = DownstreamRequest ( request ) self . args = args self . kwargs = kwargs self . _verify_config ( ) self . middleware = MiddlewareSet ( self . proxy_middleware ) return self . proxy ( )\n", "title": "", "metadata": ""}
{"_id": "e1f50931427728fa6af9cdf3c6b95c59", "text": "async def async_run ( self ) -> None : self . main_task = self . loop . create_task ( self . main ( ) ) await self . main_task\n", "title": "", "metadata": ""}
{"_id": "1d67fa15bc28e84a479b07828ac8839b", "text": "def hstrlen ( self , name , key ) : with self . pipe as pipe : return pipe . hstrlen ( self . redis_key ( name ) , key )\n", "title": "", "metadata": ""}
{"_id": "34cf69fbdadc21e60468ffc25e7f607c", "text": "def first_sunday ( self , year , month ) : date = datetime ( year , month , 1 , 0 ) days_until_sunday = 6 - date . weekday ( ) return date + timedelta ( days = days_until_sunday )\n", "title": "", "metadata": ""}
{"_id": "14e07a0e99729ab0b36fa61fd3b0e40e", "text": "def is_integer ( value : Any ) -> bool : return ( isinstance ( value , int ) and not isinstance ( value , bool ) ) or ( isinstance ( value , float ) and isfinite ( value ) and int ( value ) == value )\n", "title": "", "metadata": ""}
{"_id": "084cf202733e3cdfaaec76f8c3d06db1", "text": "def vars_ ( self ) : return [ x for x in self [ self . current_scope ] . values ( ) if x . class_ == CLASS . var ]\n", "title": "", "metadata": ""}
{"_id": "a4a4672cf35c3ab3a6762ba6f8168a89", "text": "def dictmerge ( x , y ) : z = x . copy ( ) z . update ( y ) return z\n", "title": "", "metadata": ""}
{"_id": "94b5994621b54b7d2159b85e1030ecba", "text": "def remove_trailing_string ( content , trailing ) : if content . endswith ( trailing ) and content != trailing : return content [ : - len ( trailing ) ] return content\n", "title": "", "metadata": ""}
{"_id": "c1ec3ee126ff0adbb52192059215cd72", "text": "def strings_to_integers ( strings : Iterable [ str ] ) -> Iterable [ int ] : return strings_to_ ( strings , lambda x : int ( float ( x ) ) )\n", "title": "", "metadata": ""}
{"_id": "1bb84399409fd16c54f3b69d0951120e", "text": "def write_config ( self , outfile ) : utils . write_yaml ( self . config , outfile , default_flow_style = False )\n", "title": "", "metadata": ""}
{"_id": "233e41a883257f7ccc1b4874a22936be", "text": "def shape_list ( l , shape , dtype ) : return np . array ( l , dtype = dtype ) . reshape ( shape )\n", "title": "", "metadata": ""}
{"_id": "0e2f239ad023a0f26722b50dc342bf10", "text": "def explained_variance ( returns , values ) : exp_var = 1 - torch . var ( returns - values ) / torch . var ( returns ) return exp_var . item ( )\n", "title": "", "metadata": ""}
{"_id": "aca4d4a7b53f42bd6993d9abdc4cfb3b", "text": "def urlize_twitter ( text ) : html = TwitterText ( text ) . autolink . auto_link ( ) return mark_safe ( html . replace ( 'twitter.com/search?q=' , 'twitter.com/search/realtime/' ) )\n", "title": "", "metadata": ""}
{"_id": "51919fe08424ad9d3a6f103fe4323cca", "text": "def mod ( value , arg ) : try : return valid_numeric ( value ) % valid_numeric ( arg ) except ( ValueError , TypeError ) : try : return value % arg except Exception : return ''\n", "title": "", "metadata": ""}
{"_id": "c1fe2f555d682364a96c7e5ef3ed39fb", "text": "def error_rate ( predictions , labels ) : return 100.0 - ( 100.0 * np . sum ( np . argmax ( predictions , 1 ) == np . argmax ( labels , 1 ) ) / predictions . shape [ 0 ] )\n", "title": "", "metadata": ""}
{"_id": "0723873f664cd0f0ba0598bf968543de", "text": "def list_to_str ( lst ) : if len ( lst ) == 1 : str_ = lst [ 0 ] elif len ( lst ) == 2 : str_ = ' and ' . join ( lst ) elif len ( lst ) > 2 : str_ = ', ' . join ( lst [ : - 1 ] ) str_ += ', and {0}' . format ( lst [ - 1 ] ) else : raise ValueError ( 'List of length 0 provided.' ) return str_\n", "title": "", "metadata": ""}
{"_id": "18c216ebab66ccb2a0feb3beb1c86135", "text": "def create_all ( self , check_first : bool = True ) : self . _metadata . create_all ( self . engine , checkfirst = check_first )\n", "title": "", "metadata": ""}
{"_id": "9e4d66941a787f42eaf2cb7b296c3cb0", "text": "def mpl_outside_legend ( ax , * * kwargs ) : box = ax . get_position ( ) ax . set_position ( [ box . x0 , box . y0 , box . width * 0.75 , box . height ] ) # Put a legend to the right of the current axis ax . legend ( loc = 'upper left' , bbox_to_anchor = ( 1 , 1 ) , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "6e86676479b267ba5b3228551979a98d", "text": "def strip_accents ( s ) : nfkd = unicodedata . normalize ( 'NFKD' , unicode ( s ) ) return u'' . join ( ch for ch in nfkd if not unicodedata . combining ( ch ) )\n", "title": "", "metadata": ""}
{"_id": "c8be4badf5c1dc927bacec8a38ede485", "text": "def dedupe_list ( l ) : result = [ ] for el in l : if el not in result : result . append ( el ) return result\n", "title": "", "metadata": ""}
{"_id": "ac8bc8fbe405338b922127fe350bdae9", "text": "def get_input ( input_func , input_str ) : val = input_func ( \"Please enter your {0}: \" . format ( input_str ) ) while not val or not len ( val . strip ( ) ) : val = input_func ( \"You didn't enter a valid {0}, please try again: \" . format ( input_str ) ) return val\n", "title": "", "metadata": ""}
{"_id": "ed76882624e54e17a491c055a31bcf69", "text": "def recursively_update ( d , d2 ) : for k , v in d2 . items ( ) : if k in d : if isinstance ( v , dict ) : recursively_update ( d [ k ] , v ) continue d [ k ] = v\n", "title": "", "metadata": ""}
{"_id": "8dc5cd3d4816a8bd01d26674d177ee1f", "text": "def variance ( arr ) : avg = average ( arr ) return sum ( [ ( float ( x ) - avg ) ** 2 for x in arr ] ) / float ( len ( arr ) - 1 )\n", "title": "", "metadata": ""}
{"_id": "b5e4c0b1a1148ee0caa2c6062edef58b", "text": "def _convert_date_to_dict ( field_date ) : return { DAY : field_date . day , MONTH : field_date . month , YEAR : field_date . year }\n", "title": "", "metadata": ""}
{"_id": "23b8456261c2f10575da2b40bbe440a5", "text": "def call_with_context ( func , context , * args ) : return make_context_aware ( func , len ( args ) ) ( * args + ( context , ) )\n", "title": "", "metadata": ""}
{"_id": "72b8df4155e8cd6493a0b5be9423820f", "text": "def as_float_array ( a ) : return np . asarray ( a , dtype = np . quaternion ) . view ( ( np . double , 4 ) )\n", "title": "", "metadata": ""}
{"_id": "aa615113361af294f20729a2879f2e2d", "text": "def _validate ( data , schema , ac_schema_safe = True , * * options ) : try : jsonschema . validate ( data , schema , * * options ) except ( jsonschema . ValidationError , jsonschema . SchemaError , Exception ) as exc : if ac_schema_safe : return ( False , str ( exc ) ) # Validation was failed. raise return ( True , '' )\n", "title": "", "metadata": ""}
{"_id": "d41087518fae1bab3ca922cda921cd31", "text": "def _unordered_iterator ( self ) : for i , qs in zip ( self . _queryset_idxs , self . _querysets ) : for item in qs : setattr ( item , '#' , i ) yield item\n", "title": "", "metadata": ""}
{"_id": "7994df6b427007b6e07479cc41b445c0", "text": "def is_running ( self ) : return self . state in [ self . STATE_IDLE , self . STATE_ACTIVE , self . STATE_SLEEPING ]\n", "title": "", "metadata": ""}
{"_id": "c7eb0a9ebccc1dc280b0e256b71f489f", "text": "def valid_date ( x : str ) -> bool : try : if x != dt . datetime . strptime ( x , DATE_FORMAT ) . strftime ( DATE_FORMAT ) : raise ValueError return True except ValueError : return False\n", "title": "", "metadata": ""}
{"_id": "d74e8f5389fe27eadf4e2f40bc5f4aee", "text": "def socket_close ( self ) : if self . sock != NC . INVALID_SOCKET : self . sock . close ( ) self . sock = NC . INVALID_SOCKET\n", "title": "", "metadata": ""}
{"_id": "eea0e916f495b87acbf7d10d4ff694bd", "text": "def to_bin ( data , width ) : data_str = bin ( data & ( 2 ** width - 1 ) ) [ 2 : ] . zfill ( width ) return [ int ( x ) for x in tuple ( data_str ) ]\n", "title": "", "metadata": ""}
{"_id": "b10ee76149658245d1f0367c0fe6c783", "text": "def _sim_fill ( r1 , r2 , imsize ) : bbsize = ( ( max ( r1 [ \"max_x\" ] , r2 [ \"max_x\" ] ) - min ( r1 [ \"min_x\" ] , r2 [ \"min_x\" ] ) ) * ( max ( r1 [ \"max_y\" ] , r2 [ \"max_y\" ] ) - min ( r1 [ \"min_y\" ] , r2 [ \"min_y\" ] ) ) ) return 1.0 - ( bbsize - r1 [ \"size\" ] - r2 [ \"size\" ] ) / imsize\n", "title": "", "metadata": ""}
{"_id": "d6ca59a7854f1933aaee84f760c2a09c", "text": "def _not ( condition = None , * * kwargs ) : result = True if condition is not None : result = not run ( condition , * * kwargs ) return result\n", "title": "", "metadata": ""}
{"_id": "2ab94590efa6f2cc1f838ed89a1e53f7", "text": "def get_propety_by_name ( pif , name ) : warn ( \"This method has been deprecated in favor of get_property_by_name\" ) return next ( ( x for x in pif . properties if x . name == name ) , None )\n", "title": "", "metadata": ""}
{"_id": "25fdefc6b186828a6a35d4dcfc53b19f", "text": "def rnormal ( mu , tau , size = None ) : return np . random . normal ( mu , 1. / np . sqrt ( tau ) , size )\n", "title": "", "metadata": ""}
{"_id": "1e1b97cd63a036bef170137bd766afe8", "text": "def string ( value ) -> str : return system_json . dumps ( Json ( value ) . safe_object ( ) , ensure_ascii = False )\n", "title": "", "metadata": ""}
{"_id": "e43545d6c302717853875e858167aea2", "text": "def is_any_type_set ( sett : Set [ Type ] ) -> bool : return len ( sett ) == 1 and is_any_type ( min ( sett ) )\n", "title": "", "metadata": ""}
{"_id": "d5f333491aee5e5084e9f8439e0d6c19", "text": "def exit ( self ) : self . pubsub . unsubscribe ( ) self . client . connection_pool . disconnect ( ) logger . info ( \"Connection to Redis closed\" )\n", "title": "", "metadata": ""}
{"_id": "9937b5b04fcef9ead5bfbb21f5908c3d", "text": "def command ( self , cmd , * args ) : self . _serial_interface . command ( cmd ) if len ( args ) > 0 : self . _serial_interface . data ( list ( args ) )\n", "title": "", "metadata": ""}
{"_id": "fe7ee3c9cd87e69f971e6e1873c28e66", "text": "def _removeStopwords ( text_list ) : output_list = [ ] for word in text_list : if word . lower ( ) not in _stopwords : output_list . append ( word ) return output_list\n", "title": "", "metadata": ""}
{"_id": "3b40ceb13eec8d8dd5af0f34cafca604", "text": "def strip_figures ( figure ) : fig = [ ] for trace in figure [ 'data' ] : fig . append ( dict ( data = [ trace ] , layout = figure [ 'layout' ] ) ) return fig\n", "title": "", "metadata": ""}
{"_id": "78440c46b1434b44c35bf623ff53c6c5", "text": "def close ( self ) : if self . pyb and self . pyb . serial : self . pyb . serial . close ( ) self . pyb = None\n", "title": "", "metadata": ""}
{"_id": "45c545cc85dc9ee95590c038aec4b35e", "text": "def loadmat ( filename ) : data = sploadmat ( filename , struct_as_record = False , squeeze_me = True ) return _check_keys ( data )\n", "title": "", "metadata": ""}
{"_id": "5a6eb9f9fe468e37347973af0ffe4dcf", "text": "def path_for_import ( name ) : return os . path . dirname ( os . path . abspath ( import_module ( name ) . __file__ ) )\n", "title": "", "metadata": ""}
{"_id": "36092db3969647c862c2cc0cd192c78e", "text": "def yview ( self , * args ) : self . after_idle ( self . __updateWnds ) ttk . Treeview . yview ( self , * args )\n", "title": "", "metadata": ""}
{"_id": "678a3a3660c750c295a6370ed9e091b1", "text": "def get_Callable_args_res ( clb ) : try : return clb . __args__ , clb . __result__ except AttributeError : # Python 3.6 return clb . __args__ [ : - 1 ] , clb . __args__ [ - 1 ]\n", "title": "", "metadata": ""}
{"_id": "25c33a423d4f32635679bfd5f0e1fd17", "text": "def llen ( self , name ) : with self . pipe as pipe : return pipe . llen ( self . redis_key ( name ) )\n", "title": "", "metadata": ""}
{"_id": "a0a3f102522263022521fcec98af3379", "text": "def write_login ( collector , image , * * kwargs ) : docker_api = collector . configuration [ \"harpoon\" ] . docker_api collector . configuration [ \"authentication\" ] . login ( docker_api , image , is_pushing = True , global_docker = True )\n", "title": "", "metadata": ""}
{"_id": "391b06f5a72a3e0709ca6b609df53cdf", "text": "def list_i2str ( ilist ) : slist = [ ] for el in ilist : slist . append ( str ( el ) ) return slist\n", "title": "", "metadata": ""}
{"_id": "5c7f468c532f7334f687d800a5cc39a2", "text": "def _get_col_index ( name ) : index = string . ascii_uppercase . index col = 0 for c in name . upper ( ) : col = col * 26 + index ( c ) + 1 return col\n", "title": "", "metadata": ""}
{"_id": "d64d27f5fdcf6647b0ccb563159ec85a", "text": "async def sysinfo ( dev : Device ) : click . echo ( await dev . get_system_info ( ) ) click . echo ( await dev . get_interface_information ( ) )\n", "title": "", "metadata": ""}
{"_id": "6ac1a767ab9bfa1f4aa3de44ace95f5f", "text": "def _tab ( content ) : response = _data_frame ( content ) . to_csv ( index = False , sep = '\\t' ) return response\n", "title": "", "metadata": ""}
{"_id": "ea75ee41a782b489f5e7088a9b976db5", "text": "def check_python_version ( ) : # Required due to multiple with statements on one line req_version = ( 2 , 7 ) cur_version = sys . version_info if cur_version >= req_version : print ( \"Python version... %sOK%s (found %s, requires %s)\" % ( Bcolors . OKGREEN , Bcolors . ENDC , str ( platform . python_version ( ) ) , str ( req_version [ 0 ] ) + \".\" + str ( req_version [ 1 ] ) ) ) else : print ( \"Python version... %sFAIL%s (found %s, requires %s)\" % ( Bcolors . FAIL , Bcolors . ENDC , str ( cur_version ) , str ( req_version ) ) )\n", "title": "", "metadata": ""}
{"_id": "29051847ec9d8d66f9897d713d53ab70", "text": "def datetime_from_timestamp ( timestamp , content ) : return set_date_tzinfo ( datetime . fromtimestamp ( timestamp ) , tz_name = content . settings . get ( 'TIMEZONE' , None ) )\n", "title": "", "metadata": ""}
{"_id": "0b9eb7e97112e4c39c13088c0402e7f8", "text": "def get_file_extension ( filename ) : filename_x = filename . split ( '.' ) if len ( filename_x ) > 1 : if filename_x [ - 1 ] . strip ( ) is not '' : return filename_x [ - 1 ] return None\n", "title": "", "metadata": ""}
{"_id": "7f02c46d2e601985f32135e2907336d2", "text": "def add_parent ( self , parent ) : parent . add_child ( self ) self . parent = parent return parent\n", "title": "", "metadata": ""}
{"_id": "2fe145e5be0cb04f103f1cf8b0bf7589", "text": "def linebuffered_stdout ( ) : if sys . stdout . line_buffering : return sys . stdout orig = sys . stdout new = type ( orig ) ( orig . buffer , encoding = orig . encoding , errors = orig . errors , line_buffering = True ) new . mode = orig . mode return new\n", "title": "", "metadata": ""}
{"_id": "ae172e9752a963a106097a07b0ed7a89", "text": "def end_of_history ( event ) : event . current_buffer . history_forward ( count = 10 ** 100 ) buff = event . current_buffer buff . go_to_history ( len ( buff . _working_lines ) - 1 )\n", "title": "", "metadata": ""}
{"_id": "95d6dfd314f330411f741649dddb6962", "text": "def _readuntil ( f , end = _TYPE_END ) : buf = bytearray ( ) byte = f . read ( 1 ) while byte != end : if byte == b'' : raise ValueError ( 'File ended unexpectedly. Expected end byte {}.' . format ( end ) ) buf += byte byte = f . read ( 1 ) return buf\n", "title": "", "metadata": ""}
{"_id": "2e22a4cab88bed72538194753e1f8cf6", "text": "def _from_bytes ( bytes , byteorder = \"big\" , signed = False ) : return int . from_bytes ( bytes , byteorder = byteorder , signed = signed )\n", "title": "", "metadata": ""}
{"_id": "8f54833e375f343eed46fbc4356e307c", "text": "def get_selected_values ( self , selection ) : return [ v for b , v in self . _choices if b & selection ]\n", "title": "", "metadata": ""}
{"_id": "982afd0024aa1d04c6ca44122cae9ca3", "text": "def fopenat ( base_fd , path ) : return os . fdopen ( openat ( base_fd , path , os . O_RDONLY ) , 'rb' )\n", "title": "", "metadata": ""}
{"_id": "34809f6168b2290c3fabda5c18e595ee", "text": "def calculate_size ( name , replace_existing_values ) : data_size = 0 data_size += calculate_size_str ( name ) data_size += BOOLEAN_SIZE_IN_BYTES return data_size\n", "title": "", "metadata": ""}
{"_id": "0820c63b25be54dae54c4f6bf0f6de6c", "text": "def required_header ( header ) : if header in IGNORE_HEADERS : return False if header . startswith ( 'HTTP_' ) or header == 'CONTENT_TYPE' : return True return False\n", "title": "", "metadata": ""}
{"_id": "90df26dc19fe4e4422f1c8bc0589aef6", "text": "def sort_by_modified ( files_or_folders : list ) -> list : return sorted ( files_or_folders , key = os . path . getmtime , reverse = True )\n", "title": "", "metadata": ""}
{"_id": "924e6ac1d5436cd328812f6d54526cd9", "text": "def cint8_array_to_numpy ( cptr , length ) : if isinstance ( cptr , ctypes . POINTER ( ctypes . c_int8 ) ) : return np . fromiter ( cptr , dtype = np . int8 , count = length ) else : raise RuntimeError ( 'Expected int pointer' )\n", "title": "", "metadata": ""}
{"_id": "4c52184740c856f467c9b8f9d73bb647", "text": "def lowstrip ( term ) : term = re . sub ( '\\s+' , ' ' , term ) term = term . lower ( ) return term\n", "title": "", "metadata": ""}
{"_id": "4a7b5b11fbf52e61e4acacb34935423f", "text": "def _fill_array_from_list ( the_list , the_array ) : for i , val in enumerate ( the_list ) : the_array [ i ] = val return the_array\n", "title": "", "metadata": ""}
{"_id": "fcade4e57a9809ea93c82481eefc2237", "text": "def set_file_mtime ( path , mtime , atime = None ) : if not atime : atime = mtime f = open ( path , 'a' ) try : os . utime ( path , ( atime , mtime ) ) finally : f . close ( )\n", "title": "", "metadata": ""}
{"_id": "59264b7fe36387b8760e2540069e0677", "text": "def strip_accents ( string ) : return u'' . join ( ( character for character in unicodedata . normalize ( 'NFD' , string ) if unicodedata . category ( character ) != 'Mn' ) )\n", "title": "", "metadata": ""}
{"_id": "112d5558b92238777a859c942b1736ea", "text": "def count_ ( self ) : try : num = len ( self . df . index ) except Exception as e : self . err ( e , \"Can not count data\" ) return return num\n", "title": "", "metadata": ""}
{"_id": "08ba31da6f1251c0c1e7c487bc10c669", "text": "def normalize_column_names ( df ) : columns = df . columns if hasattr ( df , 'columns' ) else df columns = [ c . lower ( ) . replace ( ' ' , '_' ) for c in columns ] return columns\n", "title": "", "metadata": ""}
{"_id": "396553bad48a48a9f9611a8a809c15cc", "text": "def _numbers_units ( N ) : lst = range ( 1 , N + 1 ) return \"\" . join ( list ( map ( lambda i : str ( i % 10 ) , lst ) ) )\n", "title": "", "metadata": ""}
{"_id": "3c160e8ce8bfcad300a1083a383b364e", "text": "def is_valid ( number ) : n = str ( number ) if not n . isdigit ( ) : return False return int ( n [ - 1 ] ) == get_check_digit ( n [ : - 1 ] )\n", "title": "", "metadata": ""}
{"_id": "7e57cfc86af2fa5ae1c0a34cd88c731c", "text": "def __clear_buffers ( self ) : try : self . _port . reset_input_buffer ( ) self . _port . reset_output_buffer ( ) except AttributeError : #pySerial 2.7 self . _port . flushInput ( ) self . _port . flushOutput ( )\n", "title": "", "metadata": ""}
{"_id": "0d420d46bcdf9b99cd6a6ddbe2613f98", "text": "def _ratelimited_get ( self , * args , * * kwargs ) : with self . _ratelimiter : resp = self . session . get ( * args , * * kwargs ) # It's possible that Space-Track will return HTTP status 500 with a # query rate limit violation. This can happen if a script is cancelled # before it has finished sleeping to satisfy the rate limit and it is # started again. # # Let's catch this specific instance and retry once if it happens. if resp . status_code == 500 : # Let's only retry if the error page tells us it's a rate limit # violation. if 'violated your query rate limit' in resp . text : # Mimic the RateLimiter callback behaviour. until = time . time ( ) + self . _ratelimiter . period t = threading . Thread ( target = self . _ratelimit_callback , args = ( until , ) ) t . daemon = True t . start ( ) time . sleep ( self . _ratelimiter . period ) # Now retry with self . _ratelimiter : resp = self . session . get ( * args , * * kwargs ) return resp\n", "title": "", "metadata": ""}
{"_id": "ced14bc7a85c7ac80a80d1f90eacf18f", "text": "def unique ( iterable ) : seen = set ( ) return [ x for x in iterable if x not in seen and not seen . add ( x ) ]\n", "title": "", "metadata": ""}
{"_id": "51c370db66c69c7c7d521eae1f4abc42", "text": "def get_server ( address = None ) : if address : domain = address . split ( \"@\" ) [ 1 ] try : return SMTP_SERVERS [ domain ] except KeyError : return ( \"smtp.\" + domain , 465 ) return ( None , None )\n", "title": "", "metadata": ""}
{"_id": "6b7c58fe2337646ff834f30c98b2f536", "text": "def compare ( string1 , string2 ) : if len ( string1 ) != len ( string2 ) : return False result = True for c1 , c2 in izip ( string1 , string2 ) : result &= c1 == c2 return result\n", "title": "", "metadata": ""}
{"_id": "db059235e341a2cf993069b1d0f26309", "text": "def me ( self ) : return self . guild . me if self . guild is not None else self . bot . user\n", "title": "", "metadata": ""}
{"_id": "4381a1de7c8a572f70c23e49d0106a6b", "text": "def remove_from_lib ( self , name ) : self . __remove_path ( os . path . join ( self . root_dir , \"lib\" , name ) )\n", "title": "", "metadata": ""}
{"_id": "d34cbc2d06744b1c9a641a29f72efcb5", "text": "def demo ( quiet , shell , speed , prompt , commentecho ) : run ( DEMO , shell = shell , speed = speed , test_mode = TESTING , prompt_template = prompt , quiet = quiet , commentecho = commentecho , )\n", "title": "", "metadata": ""}
{"_id": "16920fa5e1e132472bea05adeaf5ef49", "text": "def email_type ( arg ) : if not is_valid_email_address ( arg ) : raise argparse . ArgumentTypeError ( \"{0} is not a valid email address\" . format ( repr ( arg ) ) ) return arg\n", "title": "", "metadata": ""}
{"_id": "eb8e920d884257e143a71536f08df3b9", "text": "def _go_to_line ( editor , line ) : b = editor . application . current_buffer b . cursor_position = b . document . translate_row_col_to_index ( max ( 0 , int ( line ) - 1 ) , 0 )\n", "title": "", "metadata": ""}
{"_id": "74068dd17e62116e7e958c94442aa571", "text": "def check_by_selector ( self , selector ) : elem = find_element_by_jquery ( world . browser , selector ) if not elem . is_selected ( ) : elem . click ( )\n", "title": "", "metadata": ""}
{"_id": "bf41d78be9a3308b3470f0f674c92245", "text": "def split_len ( s , length ) : return [ s [ i : i + length ] for i in range ( 0 , len ( s ) , length ) ]\n", "title": "", "metadata": ""}
{"_id": "e9c97c909e5059bd3e1eefce09a63484", "text": "def im2mat ( I ) : return I . reshape ( ( I . shape [ 0 ] * I . shape [ 1 ] , I . shape [ 2 ] ) )\n", "title": "", "metadata": ""}
{"_id": "7dd8d0dce0454f3001bb0c542810f39a", "text": "def bin_to_int ( string ) : if isinstance ( string , str ) : return struct . unpack ( \"b\" , string ) [ 0 ] else : return struct . unpack ( \"b\" , bytes ( [ string ] ) ) [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "ea2b0e09dde9a28fe41e24d662dd41fe", "text": "def indent ( self , message ) : indent = self . indent_char * self . indent_size return indent + message\n", "title": "", "metadata": ""}
{"_id": "562ca80df5acff76b912f3b5b6afff07", "text": "def add_to_js ( self , name , var ) : frame = self . page ( ) . mainFrame ( ) frame . addToJavaScriptWindowObject ( name , var )\n", "title": "", "metadata": ""}
{"_id": "be1146a3691991d97c90fdbde36c9df1", "text": "def date_to_datetime ( x ) : if not isinstance ( x , datetime ) and isinstance ( x , date ) : return datetime . combine ( x , time ( ) ) return x\n", "title": "", "metadata": ""}
{"_id": "fdcc632c93e5384bd7fcd47ef9df6a6e", "text": "def cor ( y_true , y_pred ) : y_true , y_pred = _mask_nan ( y_true , y_pred ) return np . corrcoef ( y_true , y_pred ) [ 0 , 1 ]\n", "title": "", "metadata": ""}
{"_id": "53710da1a9f1f497bdee8548b8e0cafc", "text": "def open_json ( file_name ) : with open ( file_name , \"r\" ) as json_data : data = json . load ( json_data ) return data\n", "title": "", "metadata": ""}
{"_id": "13c2bbb3bf25c4fd3adbf7a59906f95a", "text": "def launched ( ) : if not PREFIX : return False return os . path . realpath ( sys . prefix ) == os . path . realpath ( PREFIX )\n", "title": "", "metadata": ""}
{"_id": "85496448cdeef9bdb34fc6272e813804", "text": "def get_bin_indices ( self , values ) : return tuple ( [ self . get_axis_bin_index ( values [ ax_i ] , ax_i ) for ax_i in range ( self . dimensions ) ] )\n", "title": "", "metadata": ""}
{"_id": "76d577b346859863f2683e71175ba01d", "text": "def argmax ( self , rows : List [ Row ] , column : ComparableColumn ) -> List [ Row ] : if not rows : return [ ] value_row_pairs = [ ( row . values [ column . name ] , row ) for row in rows ] if not value_row_pairs : return [ ] # Returns a list containing the row with the max cell value. return [ sorted ( value_row_pairs , key = lambda x : x [ 0 ] , reverse = True ) [ 0 ] [ 1 ] ]\n", "title": "", "metadata": ""}
{"_id": "71d00d8a5360f6f4d2dbd6c261d12c86", "text": "def pp_xml ( body ) : pretty = xml . dom . minidom . parseString ( body ) return pretty . toprettyxml ( indent = \"  \" )\n", "title": "", "metadata": ""}
{"_id": "2159a8e80843d3fcae2ca560b256d18b", "text": "def apply_fit ( xy , coeffs ) : x_new = coeffs [ 0 ] [ 2 ] + coeffs [ 0 ] [ 0 ] * xy [ : , 0 ] + coeffs [ 0 ] [ 1 ] * xy [ : , 1 ] y_new = coeffs [ 1 ] [ 2 ] + coeffs [ 1 ] [ 0 ] * xy [ : , 0 ] + coeffs [ 1 ] [ 1 ] * xy [ : , 1 ] return x_new , y_new\n", "title": "", "metadata": ""}
{"_id": "d1308735c82616934a888fca9ace5bb2", "text": "def _fast_read ( self , infile ) : infile . seek ( 0 ) return ( int ( infile . read ( ) . decode ( ) . strip ( ) ) )\n", "title": "", "metadata": ""}
{"_id": "d34d93704f8c1f0295048518bb594a65", "text": "def as_dict ( self ) : return { \"@module\" : self . __class__ . __module__ , \"@class\" : self . __class__ . __name__ , \"frequencies\" : list ( self . frequencies ) , \"densities\" : list ( self . densities ) }\n", "title": "", "metadata": ""}
{"_id": "b42dba4682e400a06de30445ba54e4b6", "text": "def unique_ ( self , col ) : try : df = self . df . drop_duplicates ( subset = [ col ] , inplace = False ) return list ( df [ col ] ) except Exception as e : self . err ( e , \"Can not select unique data\" )\n", "title": "", "metadata": ""}
{"_id": "c6d90e9201bba392893caa4a5aab88d6", "text": "def guess_encoding ( text , default = DEFAULT_ENCODING ) : result = chardet . detect ( text ) return normalize_result ( result , default = default )\n", "title": "", "metadata": ""}
{"_id": "dae92e6b983742a1159b971b0d30d776", "text": "def _cho_factor ( A , lower = True , check_finite = True ) : return cp . linalg . cholesky ( A ) , True\n", "title": "", "metadata": ""}
{"_id": "9e7d48e5e803918d38a5892d7c1add6b", "text": "def screen_cv2 ( self ) : pil_image = self . screen . convert ( 'RGB' ) cv2_image = np . array ( pil_image ) pil_image . close ( ) # Convert RGB to BGR   cv2_image = cv2_image [ : , : , : : - 1 ] return cv2_image\n", "title": "", "metadata": ""}
{"_id": "2b477f397ee6b035a5ac17942b2494ba", "text": "def rotate_img ( im , deg , mode = cv2 . BORDER_CONSTANT , interpolation = cv2 . INTER_AREA ) : r , c ,  * _ = im . shape M = cv2 . getRotationMatrix2D ( ( c // 2 , r // 2 ) , deg , 1 ) return cv2 . warpAffine ( im , M , ( c , r ) , borderMode = mode , flags = cv2 . WARP_FILL_OUTLIERS + interpolation )\n", "title": "", "metadata": ""}
{"_id": "faced5c157a77d222b39c57dba510df5", "text": "def commajoin_as_strings ( iterable ) : return _ ( u',' ) . join ( ( six . text_type ( i ) for i in iterable ) )\n", "title": "", "metadata": ""}
{"_id": "5ec8a8fe63446097a7ef64d08f30ff5d", "text": "def CleanseComments ( line ) : commentpos = line . find ( '//' ) if commentpos != - 1 and not IsCppString ( line [ : commentpos ] ) : line = line [ : commentpos ] . rstrip ( ) # get rid of /* ... */ return _RE_PATTERN_CLEANSE_LINE_C_COMMENTS . sub ( '' , line )\n", "title": "", "metadata": ""}
{"_id": "f6cfe46eeede04d18fbbb65a9d397d20", "text": "def version_jar ( self ) : cmd = config . get_command ( 'java' ) cmd . append ( '-jar' ) cmd += self . cmd self . version ( cmd = cmd , path = self . cmd [ 0 ] )\n", "title": "", "metadata": ""}
{"_id": "4399487550df6b260f259472a567894c", "text": "def cmd_dot ( conf : Config ) : build_context = BuildContext ( conf ) populate_targets_graph ( build_context , conf ) if conf . output_dot_file is None : write_dot ( build_context , conf , sys . stdout ) else : with open ( conf . output_dot_file , 'w' ) as out_file : write_dot ( build_context , conf , out_file )\n", "title": "", "metadata": ""}
{"_id": "4af90c1ce2d49935bcd9dbfa0ffb2536", "text": "def install_postgres ( user = None , dbname = None , password = None ) : execute ( pydiploy . django . install_postgres_server , user = user , dbname = dbname , password = password )\n", "title": "", "metadata": ""}
{"_id": "f568b7950a50da65a8b905ef49dcb18b", "text": "def to_dotfile ( self ) : domain = self . get_domain ( ) filename = \"%s.dot\" % ( self . __class__ . __name__ ) nx . write_dot ( domain , filename ) return filename\n", "title": "", "metadata": ""}
{"_id": "a7963183d277356ffb63614f307b711e", "text": "def indent ( self ) : blk = IndentBlock ( self , self . _indent ) self . _indent += 1 return blk\n", "title": "", "metadata": ""}
{"_id": "4033ec15d5dd41e38079cd7fbf427915", "text": "def get_hline ( ) : return Window ( width = LayoutDimension . exact ( 1 ) , height = LayoutDimension . exact ( 1 ) , content = FillControl ( '-' , token = Token . Line ) )\n", "title": "", "metadata": ""}
{"_id": "015c6d01f13d0931169c10162d7e9197", "text": "def softplus ( attrs , inputs , proto_obj ) : new_attrs = translation_utils . _add_extra_attributes ( attrs , { 'act_type' : 'softrelu' } ) return 'Activation' , new_attrs , inputs\n", "title": "", "metadata": ""}
{"_id": "aa5894a8d58a6002337f45cca7dd15b3", "text": "def match_paren ( self , tokens , item ) : match , = tokens return self . match ( match , item )\n", "title": "", "metadata": ""}
{"_id": "1571ab401092aef2ee1d6af09f472046", "text": "def clean_error ( err ) : if err : decoded = err . decode ( 'utf-8' ) try : return decoded . split ( '\\r\\n' ) [ - 2 ] except Exception : return decoded return 'There was an error.'\n", "title": "", "metadata": ""}
{"_id": "b43790c58a917a3b45965451596ce5e9", "text": "def get_key_by_value ( dictionary , search_value ) : for key , value in dictionary . iteritems ( ) : if value == search_value : return ugettext ( key )\n", "title": "", "metadata": ""}
{"_id": "e4e7c4d87d397258fe1abe9af1fd9dea", "text": "def uniform_noise ( points ) : return np . random . rand ( 1 ) * np . random . uniform ( points , 1 ) + random . sample ( [ 2 , - 2 ] , 1 )\n", "title": "", "metadata": ""}
{"_id": "18d317c0d3a40619428b3fbf1e07861d", "text": "async def smap ( source , func , * more_sources ) : if more_sources : source = zip ( source , * more_sources ) async with streamcontext ( source ) as streamer : async for item in streamer : yield func ( * item ) if more_sources else func ( item )\n", "title": "", "metadata": ""}
{"_id": "b8fcc81f77bec8a74ca1ed9f8ac9700d", "text": "def underline ( self , msg ) : return click . style ( msg , underline = True ) if self . colorize else msg\n", "title": "", "metadata": ""}
{"_id": "915cd83e9d0548e8584d4f19f5ad907f", "text": "def set_color ( self , fg = None , bg = None , intensify = False , target = sys . stdout ) : raise NotImplementedError\n", "title": "", "metadata": ""}
{"_id": "673d61bbd6b4a3c162a6318076d5ae6d", "text": "def create_app ( ) : global QT_APP QT_APP = QApplication . instance ( ) if QT_APP is None : # pragma: no cover QT_APP = QApplication ( sys . argv ) return QT_APP\n", "title": "", "metadata": ""}
{"_id": "497448ac308ee0524e2a1d9fdb9198e3", "text": "def mongoqs_to_json ( qs , fields = None ) : l = list ( qs . as_pymongo ( ) ) for element in l : element . pop ( '_cls' ) # use DjangoJSONEncoder for transform date data type to datetime json_qs = json . dumps ( l , indent = 2 , ensure_ascii = False , cls = DjangoJSONEncoder ) return json_qs\n", "title": "", "metadata": ""}
{"_id": "ff5ffd5068e843b804005d6bbf847c60", "text": "def SetValue ( self , row , col , value ) : self . dataframe . iloc [ row , col ] = value\n", "title": "", "metadata": ""}
{"_id": "5567c7b268bf52a8879e7d2d9980b833", "text": "def write_str2file ( pathname , astr ) : fname = pathname fhandle = open ( fname , 'wb' ) fhandle . write ( astr ) fhandle . close ( )\n", "title": "", "metadata": ""}
{"_id": "cd848856a42853e4946056211946b8be", "text": "def atom_criteria ( * params ) : result = { } for index , param in enumerate ( params ) : if param is None : continue elif isinstance ( param , int ) : result [ index ] = HasAtomNumber ( param ) else : result [ index ] = param return result\n", "title": "", "metadata": ""}
{"_id": "53b5a15bd2c165e3cc1b201ca745f46a", "text": "def delayed_close ( self ) : self . state = SESSION_STATE . CLOSING reactor . callLater ( 0 , self . close )\n", "title": "", "metadata": ""}
{"_id": "dfceb01d88784eaaae937b2c78004280", "text": "def write_property ( fh , key , value ) : if key is COMMENT : write_comment ( fh , value ) return _require_string ( key , 'keys' ) _require_string ( value , 'values' ) fh . write ( _escape_key ( key ) ) fh . write ( b'=' ) fh . write ( _escape_value ( value ) ) fh . write ( b'\\n' )\n", "title": "", "metadata": ""}
{"_id": "460869a0c1e37cdc383ff16a9f6cdd95", "text": "def _to_corrected_pandas_type ( dt ) : import numpy as np if type ( dt ) == ByteType : return np . int8 elif type ( dt ) == ShortType : return np . int16 elif type ( dt ) == IntegerType : return np . int32 elif type ( dt ) == FloatType : return np . float32 else : return None\n", "title": "", "metadata": ""}
{"_id": "33b5888bab73e0701df2831cc061234e", "text": "def invalidate_cache ( cpu , address , size ) : cache = cpu . instruction_cache for offset in range ( size ) : if address + offset in cache : del cache [ address + offset ]\n", "title": "", "metadata": ""}
{"_id": "af523f636e115ea4a5be8bb67c153d90", "text": "def find_largest_contig ( contig_lengths_dict ) : # Initialise the dictionary longest_contig_dict = dict ( ) for file_name , contig_lengths in contig_lengths_dict . items ( ) : # As the list is sorted in descending order, the largest contig is the first entry in the list longest_contig_dict [ file_name ] = contig_lengths [ 0 ] return longest_contig_dict\n", "title": "", "metadata": ""}
{"_id": "6d053b0201efc150853d724550f00de3", "text": "def _merge_meta ( model1 , model2 ) : w1 = _get_meta ( model1 ) w2 = _get_meta ( model2 ) return metadata . merge ( w1 , w2 , metadata_conflicts = 'silent' )\n", "title": "", "metadata": ""}
{"_id": "27cb8f40a7396a69474730922c347ab0", "text": "def is_iterable_but_not_string ( obj ) : return hasattr ( obj , '__iter__' ) and not isinstance ( obj , str ) and not isinstance ( obj , bytes )\n", "title": "", "metadata": ""}
{"_id": "f45ea1330e1a3e5e54477f787798dd61", "text": "def _python_rpath ( self ) : # Windows virtualenv installation installs pip to the [Ss]cripts # folder. Here's a simple check to support: if sys . platform == 'win32' : return os . path . join ( 'Scripts' , 'python.exe' ) return os . path . join ( 'bin' , 'python' )\n", "title": "", "metadata": ""}
{"_id": "696ec7168ddbb60a576587d301bfadf9", "text": "def getpackagepath ( ) : moduleDirectory = os . path . dirname ( __file__ ) packagePath = os . path . dirname ( __file__ ) + \"/../\" return packagePath\n", "title": "", "metadata": ""}
{"_id": "8b72ae8f1d6ca8399c5deafe44fc9057", "text": "def run ( self , value ) : if self . pass_ and not value . strip ( ) : return True if not value : return False return True\n", "title": "", "metadata": ""}
{"_id": "058e3b2baf890fdd956b39be2952a0be", "text": "def get_table ( ports ) : table = PrettyTable ( [ \"Name\" , \"Port\" , \"Protocol\" , \"Description\" ] ) table . align [ \"Name\" ] = \"l\" table . align [ \"Description\" ] = \"l\" table . padding_width = 1 for port in ports : table . add_row ( port ) return table\n", "title": "", "metadata": ""}
{"_id": "706c5caec88898c3bbc6f5f85f645baa", "text": "def rotateImage ( img , angle ) : imgR = scipy . ndimage . rotate ( img , angle , reshape = False ) return imgR\n", "title": "", "metadata": ""}
{"_id": "50b2fb6bf3afa3deb15ddd3597b2f6e0", "text": "def pid_exists ( pid ) : try : os . kill ( pid , 0 ) except OSError as exc : return exc . errno == errno . EPERM else : return True\n", "title": "", "metadata": ""}
{"_id": "7742466f02cc5bd38e5a0aa2391e5b18", "text": "def us2mc ( string ) : return re . sub ( r'_([a-z])' , lambda m : ( m . group ( 1 ) . upper ( ) ) , string )\n", "title": "", "metadata": ""}
{"_id": "6a160750830e86d7668d0a550835fca0", "text": "def RadiusGrid ( gridSize ) : x , y = np . mgrid [ 0 : gridSize , 0 : gridSize ] x = x - ( gridSize - 1.0 ) / 2.0 y = y - ( gridSize - 1.0 ) / 2.0 return np . abs ( x + 1j * y )\n", "title": "", "metadata": ""}
{"_id": "1de057bad9bb3ff46ffd05f74b5c2186", "text": "def get_enum_from_name ( self , enum_name ) : return next ( ( e for e in self . enums if e . name == enum_name ) , None )\n", "title": "", "metadata": ""}
{"_id": "34634b9e25c264e0418ab723d69fe27b", "text": "def full ( self ) : return self . maxsize and len ( self . list ) >= self . maxsize or False\n", "title": "", "metadata": ""}
{"_id": "60feece6b0e69a37b88127058fd143fa", "text": "def update_screen ( self ) : self . clock . tick ( self . FPS ) pygame . display . update ( )\n", "title": "", "metadata": ""}
{"_id": "8cabe250d50a1cc7ad04d5d98843e188", "text": "def round_float ( f , digits , rounding = ROUND_HALF_UP ) : return Decimal ( str ( f ) ) . quantize ( Decimal ( 10 ) ** ( - 1 * digits ) , rounding = rounding )\n", "title": "", "metadata": ""}
{"_id": "592a8bf9507706afacc8f0fc61335d5a", "text": "def ask_dir ( self ) : args [ 'directory' ] = askdirectory ( * * self . dir_opt ) self . dir_text . set ( args [ 'directory' ] )\n", "title": "", "metadata": ""}
{"_id": "3e9c3238390c576013814250e5a2c6b8", "text": "def intToBin ( i ) : # devide in two parts (bytes) i1 = i % 256 i2 = int ( i / 256 ) # make string (little endian) return chr ( i1 ) + chr ( i2 )\n", "title": "", "metadata": ""}
{"_id": "b854053d267e87d303c6ed9782abab2c", "text": "def remove_parenthesis_around_tz ( cls , timestr ) : parenthesis = cls . TIMEZONE_PARENTHESIS . match ( timestr ) if parenthesis is not None : return parenthesis . group ( 1 )\n", "title": "", "metadata": ""}
{"_id": "a6490b93b4bee89c9525a2ee2a76ca71", "text": "def _none_value ( self ) : if self . out_type == int : return 0 elif self . out_type == float : return 0.0 elif self . out_type == bool : return False elif self . out_type == six . text_type : return u''\n", "title": "", "metadata": ""}
{"_id": "e3ec0c55f92f177f579b90b54dfc6dc4", "text": "def format_prettytable ( table ) : for i , row in enumerate ( table . rows ) : for j , item in enumerate ( row ) : table . rows [ i ] [ j ] = format_output ( item ) ptable = table . prettytable ( ) ptable . hrules = prettytable . FRAME ptable . horizontal_char = '.' ptable . vertical_char = ':' ptable . junction_char = ':' return ptable\n", "title": "", "metadata": ""}
{"_id": "c4ac2b1a3ce212a711274130b92001ff", "text": "def get_colors ( img ) : w , h = img . size return [ color [ : 3 ] for count , color in img . convert ( 'RGB' ) . getcolors ( w * h ) ]\n", "title": "", "metadata": ""}
{"_id": "fbf80011e871a38a348b8f473198772a", "text": "def stringify_dict_contents ( dct ) : return { str_if_nested_or_str ( k ) : str_if_nested_or_str ( v ) for k , v in dct . items ( ) }\n", "title": "", "metadata": ""}
{"_id": "2e9bc3a94b316ac957ae3d531f945013", "text": "def random_alphanum ( length ) : charset = string . ascii_letters + string . digits return random_string ( length , charset )\n", "title": "", "metadata": ""}
{"_id": "f49cb1e3a6b694bf44433bcb4c3aaccf", "text": "def query ( self , base , filterstr , attrlist = None ) : return self . conn . search_s ( base , ldap . SCOPE_SUBTREE , filterstr , attrlist )\n", "title": "", "metadata": ""}
{"_id": "ee3edd17b83e12f145be17de027b0466", "text": "def one_hot2string ( arr , vocab ) : tokens = one_hot2token ( arr ) indexToLetter = _get_index_dict ( vocab ) return [ '' . join ( [ indexToLetter [ x ] for x in row ] ) for row in tokens ]\n", "title": "", "metadata": ""}
{"_id": "5cfd9772ecf07225bc929734b0010e42", "text": "def pop ( self , index = - 1 ) : value = self . _list . pop ( index ) del self . _dict [ value ] return value\n", "title": "", "metadata": ""}
{"_id": "194e7adf8677293f36efe319481131d8", "text": "def callJavaFunc ( func , * args ) : gateway = _get_gateway ( ) args = [ _py2java ( gateway , a ) for a in args ] result = func ( * args ) return _java2py ( gateway , result )\n", "title": "", "metadata": ""}
{"_id": "0f78ec98d323f497f0118496b8761b77", "text": "def guess_media_type ( filepath ) : o = subprocess . check_output ( [ 'file' , '--mime-type' , '-Lb' , filepath ] ) o = o . strip ( ) return o\n", "title": "", "metadata": ""}
{"_id": "36e7755f62765988812bf0b223c75ada", "text": "def expired ( self ) : if self . timeout is None : return False return monotonic ( ) - self . start_time > self . timeout\n", "title": "", "metadata": ""}
{"_id": "74dd5b19e209e7c87698f2ef7563dbc6", "text": "def sort_func ( self , key ) : if key == self . _KEYS . VALUE : return 'aaa' if key == self . _KEYS . SOURCE : return 'zzz' return key\n", "title": "", "metadata": ""}
{"_id": "0caff5b29fda59fd4f2db9a3111047ce", "text": "def _float_feature ( value ) : if not isinstance ( value , list ) : value = [ value ] return tf . train . Feature ( float_list = tf . train . FloatList ( value = value ) )\n", "title": "", "metadata": ""}
{"_id": "e6575d30de8c590cabd2966275a7c98a", "text": "def _prtfmt ( self , item_id , dashes ) : ntprt = self . id2nt [ item_id ] dct = ntprt . _asdict ( ) self . prt . write ( '{DASHES:{N}}' . format ( DASHES = self . fmt_dashes . format ( DASHES = dashes , ID = self . nm2prtfmt [ 'ID' ] . format ( * * dct ) ) , N = self . dash_len ) ) self . prt . write ( \"{INFO}\\n\" . format ( INFO = self . nm2prtfmt [ 'ITEM' ] . format ( * * dct ) ) )\n", "title": "", "metadata": ""}
{"_id": "db96d9a1b5ea69dcbcfcfac1247285e1", "text": "def wget ( url ) : import urllib . parse request = urllib . request . urlopen ( url ) filestring = request . read ( ) return filestring\n", "title": "", "metadata": ""}
{"_id": "70e8bba77c97afb16d7f43a9bc1473d1", "text": "def _get_ipv6_from_binary ( self , bin_addr ) : hi = bin_addr >> 64 lo = bin_addr & 0xFFFFFFFF return socket . inet_ntop ( socket . AF_INET6 , struct . pack ( \"!QQ\" , hi , lo ) )\n", "title": "", "metadata": ""}
{"_id": "4411c58dfcb6ad6c9540dbb1571755f3", "text": "def stop ( self , reason = None ) : self . logger . info ( 'stopping' ) self . loop . stop ( pyev . EVBREAK_ALL )\n", "title": "", "metadata": ""}
{"_id": "aa64d44cc79e8ca310e83ce70b0e1fd3", "text": "def json_template ( data , template_name , template_context ) : html = render_to_string ( template_name , template_context ) data = data or { } data [ 'html' ] = html return HttpResponse ( json_encode ( data ) , content_type = 'application/json' )\n", "title": "", "metadata": ""}
{"_id": "8d7a8664d294180fbfc1a7a848e9fa76", "text": "def Output ( self ) : self . Open ( ) self . Header ( ) self . Body ( ) self . Footer ( )\n", "title": "", "metadata": ""}
{"_id": "72808d7df3719380f1875d10d405b004", "text": "def set_scale ( self , scale , no_reset = False ) : return self . scale_to ( * scale [ : 2 ] , no_reset = no_reset )\n", "title": "", "metadata": ""}
{"_id": "ecce18a3aa93f6dec009eb7e9db218fc", "text": "def locate ( command , on ) : location = find_page_location ( command , on ) click . echo ( location )\n", "title": "", "metadata": ""}
{"_id": "a75e7e16da312c9934a5dc4509d5fe69", "text": "def decode_arr ( data ) : data = data . encode ( 'utf-8' ) return frombuffer ( base64 . b64decode ( data ) , float64 )\n", "title": "", "metadata": ""}
{"_id": "11d65f1109b67d5d2258d81ceb7e41b2", "text": "def datatype ( dbtype , description , cursor ) : dt = cursor . db . introspection . get_field_type ( dbtype , description ) if type ( dt ) is tuple : return dt [ 0 ] else : return dt\n", "title": "", "metadata": ""}
{"_id": "a2690bd1e6ffa5d4a9f025883c3340fb", "text": "def isroutine ( object ) : return ( isbuiltin ( object ) or isfunction ( object ) or ismethod ( object ) or ismethoddescriptor ( object ) )\n", "title": "", "metadata": ""}
{"_id": "72773e86f747d5352b0089596a76bf1a", "text": "def strids2ids ( tokens : Iterable [ str ] ) -> List [ int ] : return list ( map ( int , tokens ) )\n", "title": "", "metadata": ""}
{"_id": "d32c2a8e96fb37c58daf3561994fa81e", "text": "def scroll_element_into_view ( self ) : x = self . web_element . location [ 'x' ] y = self . web_element . location [ 'y' ] self . driver . execute_script ( 'window.scrollTo({0}, {1})' . format ( x , y ) ) return self\n", "title": "", "metadata": ""}
{"_id": "de8596e04bf3f3ecb3dbd089eadfd7c5", "text": "def incidence ( boundary ) : return GroupBy ( boundary ) . split ( np . arange ( boundary . size ) // boundary . shape [ 1 ] )\n", "title": "", "metadata": ""}
{"_id": "a4d084750ee2573bf8d63534b6b281a4", "text": "def safe_rmtree ( directory ) : if os . path . exists ( directory ) : shutil . rmtree ( directory , True )\n", "title": "", "metadata": ""}
{"_id": "d4d051dabdf015a223f6cf479836727f", "text": "def to_datetime ( value ) : if value is None : return None if isinstance ( value , six . integer_types ) : return parser . parse ( value ) return parser . isoparse ( value )\n", "title": "", "metadata": ""}
{"_id": "d32fe05d66d8837c401e822c922d6f2c", "text": "def invertDictMapping ( d ) : inv_map = { } for k , v in d . items ( ) : inv_map [ v ] = inv_map . get ( v , [ ] ) inv_map [ v ] . append ( k ) return inv_map\n", "title": "", "metadata": ""}
{"_id": "13971f1f7ace25419482c2bce52062c8", "text": "def tuple_search ( t , i , v ) : for e in t : if e [ i ] == v : return e return None\n", "title": "", "metadata": ""}
{"_id": "2b9b83aaa026d4086d8b2cc9c530a1f5", "text": "def load_results ( result_files , options , run_set_id = None , columns = None , columns_relevant_for_diff = set ( ) ) : return parallel . map ( load_result , result_files , itertools . repeat ( options ) , itertools . repeat ( run_set_id ) , itertools . repeat ( columns ) , itertools . repeat ( columns_relevant_for_diff ) )\n", "title": "", "metadata": ""}
{"_id": "85b3d27bf65b51b4d25d8a3d5e22a9bc", "text": "def service_available ( service_name ) : try : subprocess . check_output ( [ 'service' , service_name , 'status' ] , stderr = subprocess . STDOUT ) . decode ( 'UTF-8' ) except subprocess . CalledProcessError as e : return b'unrecognized service' not in e . output else : return True\n", "title": "", "metadata": ""}
{"_id": "cf9c4072e6f94bf229bda5917637ca94", "text": "def check_str ( obj ) : if isinstance ( obj , str ) : return obj if isinstance ( obj , float ) : return str ( int ( obj ) ) else : return str ( obj )\n", "title": "", "metadata": ""}
{"_id": "22b390f5dde1dc24ab6663e78c985129", "text": "def skip ( self , n ) : try : self . _iter_object . skip ( n ) except AttributeError : for i in range ( 0 , n ) : self . next ( )\n", "title": "", "metadata": ""}
{"_id": "fb449392f8a9d52f51d5552b43054252", "text": "def show ( config ) : with open ( config , 'r' ) : main . show ( yaml . load ( open ( config ) ) )\n", "title": "", "metadata": ""}
{"_id": "36e06045b0596c04186e4b4f32566e49", "text": "def was_into_check ( self ) -> bool : king = self . king ( not self . turn ) return king is not None and self . is_attacked_by ( self . turn , king )\n", "title": "", "metadata": ""}
{"_id": "23fb622f8286bce613fe9c7f0f76d762", "text": "def _sanitize ( text ) : d = { '-LRB-' : '(' , '-RRB-' : ')' } return re . sub ( '|' . join ( d . keys ( ) ) , lambda m : d [ m . group ( 0 ) ] , text )\n", "title": "", "metadata": ""}
{"_id": "a0fdcd5f05b3e3fd126ab3e07e1c17eb", "text": "async def delete ( self ) : return await self . bot . delete_message ( self . chat . id , self . message_id )\n", "title": "", "metadata": ""}
{"_id": "981f19ad2329f84fc59f5a1a44d8e423", "text": "def log_all ( self , file ) : global rflink_log if file == None : rflink_log = None else : log . debug ( 'logging to: %s' , file ) rflink_log = open ( file , 'a' )\n", "title": "", "metadata": ""}
{"_id": "fb6b3972ec1696ef835b586a93db30b8", "text": "def replace_one ( self , replacement ) : self . __bulk . add_replace ( self . __selector , replacement , upsert = True , collation = self . __collation )\n", "title": "", "metadata": ""}
{"_id": "3641c031ff4cdd034ae1216eb88ef997", "text": "def __add_method ( m : lmap . Map , key : T , method : Method ) -> lmap . Map : return m . assoc ( key , method )\n", "title": "", "metadata": ""}
{"_id": "94a6702c0c22d5855ff0bd5aa7b89872", "text": "def find_first_number ( ll ) : for nr , entry in enumerate ( ll ) : try : float ( entry ) except ( ValueError , TypeError ) as e : pass else : return nr return None\n", "title": "", "metadata": ""}
{"_id": "93120652791933cbd7e4eb0ab1b8ff75", "text": "def run ( * tasks : Awaitable , loop : asyncio . AbstractEventLoop = asyncio . get_event_loop ( ) ) : futures = [ asyncio . ensure_future ( task , loop = loop ) for task in tasks ] return loop . run_until_complete ( asyncio . gather ( * futures ) )\n", "title": "", "metadata": ""}
{"_id": "c373a66461a7cd806cc490dabfd1f355", "text": "def list_of_lists_to_dict ( l ) : d = { } for key , val in l : d . setdefault ( key , [ ] ) . append ( val ) return d\n", "title": "", "metadata": ""}
{"_id": "55ce7c0e4b4e9fe40980507737b16e80", "text": "def __run ( self ) : sys . settrace ( self . globaltrace ) self . __run_backup ( ) self . run = self . __run_backup\n", "title": "", "metadata": ""}
{"_id": "d5f96dbd9d5158bb823875ccb13cd531", "text": "def _compile ( pattern , flags ) : return re . compile ( WcParse ( pattern , flags & FLAG_MASK ) . parse ( ) )\n", "title": "", "metadata": ""}
{"_id": "b7f7b5813bed30b97ab1b9ea878c8584", "text": "def to_dict ( self ) : if self . childCount ( ) > 0 : value = { } for index in range ( self . childCount ( ) ) : value . update ( self . child ( index ) . to_dict ( ) ) else : value = self . value return { self . name : value }\n", "title": "", "metadata": ""}
{"_id": "4264e2b2be486ca2d016b46f706988b2", "text": "def rm_empty_indices ( * args ) : rm_inds = args [ 0 ] if not rm_inds : return args [ 1 : ] keep_inds = [ i for i in range ( len ( args [ 1 ] ) ) if i not in rm_inds ] return [ [ a [ i ] for i in keep_inds ] for a in args [ 1 : ] ]\n", "title": "", "metadata": ""}
{"_id": "5b285015fbf610522d350962d02dad34", "text": "def find_root ( self ) : cmd = self while cmd . parent : cmd = cmd . parent return cmd\n", "title": "", "metadata": ""}
{"_id": "d8d3bfd4fe8da96fbca4049313f5f139", "text": "def _iterable_to_varargs_method ( func ) : def wrapped ( self , * args , * * kwargs ) : return func ( self , args , * * kwargs ) return wrapped\n", "title": "", "metadata": ""}
{"_id": "05dcf014aecba1b8051892d4f06bf94b", "text": "def ffmpeg_works ( ) : images = np . zeros ( ( 2 , 32 , 32 , 3 ) , dtype = np . uint8 ) try : _encode_gif ( images , 2 ) return True except ( IOError , OSError ) : return False\n", "title": "", "metadata": ""}
{"_id": "c44a608cd29caf8a5b1035b271143500", "text": "def convert_time_string ( date_str ) : dt , _ , _ = date_str . partition ( \".\" ) dt = datetime . strptime ( dt , \"%Y-%m-%dT%H:%M:%S\" ) return dt\n", "title": "", "metadata": ""}
{"_id": "f53683a771c9bf0d534227426d4892c4", "text": "def display_pil_image ( im ) : from IPython . core import display b = BytesIO ( ) im . save ( b , format = 'png' ) data = b . getvalue ( ) ip_img = display . Image ( data = data , format = 'png' , embed = True ) return ip_img . _repr_png_ ( )\n", "title": "", "metadata": ""}
{"_id": "eef6588a8357506f72fbaa12ef7abe84", "text": "def split_into_words ( s ) : s = re . sub ( r\"\\W+\" , \" \" , s ) s = re . sub ( r\"[_0-9]+\" , \" \" , s ) return s . split ( )\n", "title": "", "metadata": ""}
{"_id": "3561c9b1e9444b2e249c95b6cba68631", "text": "def predecessors ( self , node , graph = None ) : if graph is None : graph = self . graph return [ key for key in graph if node in graph [ key ] ]\n", "title": "", "metadata": ""}
{"_id": "2f91bb9b75e349ccc0dc171dcd579926", "text": "def convert_array ( array ) : out = io . BytesIO ( array ) out . seek ( 0 ) return np . load ( out )\n", "title": "", "metadata": ""}
{"_id": "c6ffc04b6e39dce871bdda73c8bd4356", "text": "def get_last_id ( self , cur , table = 'reaction' ) : cur . execute ( \"SELECT seq FROM sqlite_sequence WHERE name='{0}'\" . format ( table ) ) result = cur . fetchone ( ) if result is not None : id = result [ 0 ] else : id = 0 return id\n", "title": "", "metadata": ""}
{"_id": "9a0dde91c6666d58b288b9c052425174", "text": "def write_image ( filename , image ) : data_format = get_data_format ( filename ) if data_format is MimeType . JPG : LOGGER . warning ( 'Warning: jpeg is a lossy format therefore saved data will be modified.' ) return Image . fromarray ( image ) . save ( filename )\n", "title": "", "metadata": ""}
{"_id": "5a9501f1477148c226c6587bc26a808b", "text": "def fprint ( expr , print_ascii = False ) : if print_ascii : pprint ( expr , use_unicode = False , num_columns = 120 ) else : return expr\n", "title": "", "metadata": ""}
{"_id": "898174721d33f4bd81bbbd9889dbfae6", "text": "def QA_util_datetime_to_strdate ( dt ) : strdate = \"%04d-%02d-%02d\" % ( dt . year , dt . month , dt . day ) return strdate\n", "title": "", "metadata": ""}
{"_id": "e61ee5d4c5cb9abd51f54296762dad52", "text": "def parse ( self , data , lexer = None , * args , * * kwargs ) : if lexer is None : lexer = self . lexer return self . parser . parse ( data , lexer = lexer , * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "703f31461aac2b7d9bcddca173093079", "text": "def get_python_dict ( scala_map ) : python_dict = { } keys = get_python_list ( scala_map . keys ( ) . toList ( ) ) for key in keys : python_dict [ key ] = scala_map . apply ( key ) return python_dict\n", "title": "", "metadata": ""}
{"_id": "bae2bba82935222874200ba259ffc7c2", "text": "def mean_date ( dt_list ) : dt_list_sort = sorted ( dt_list ) dt_list_sort_rel = [ dt - dt_list_sort [ 0 ] for dt in dt_list_sort ] avg_timedelta = sum ( dt_list_sort_rel , timedelta ( ) ) / len ( dt_list_sort_rel ) return dt_list_sort [ 0 ] + avg_timedelta\n", "title": "", "metadata": ""}
{"_id": "2806f40a71ac8c7eb164976b9cee0026", "text": "def bbox ( img ) : rows = np . any ( img , axis = 1 ) cols = np . any ( img , axis = 0 ) rmin , rmax = np . where ( rows ) [ 0 ] [ [ 0 , - 1 ] ] cmin , cmax = np . where ( cols ) [ 0 ] [ [ 0 , - 1 ] ] return rmin , rmax , cmin , cmax\n", "title": "", "metadata": ""}
{"_id": "04f19739603e09460d2881da4c6ec31f", "text": "def singularize ( word ) : for inflection in UNCOUNTABLES : if re . search ( r'(?i)\\b(%s)\\Z' % inflection , word ) : return word for rule , replacement in SINGULARS : if re . search ( rule , word ) : return re . sub ( rule , replacement , word ) return word\n", "title": "", "metadata": ""}
{"_id": "307cc1d73f27c11b264916c6d09350a3", "text": "def most_frequent ( lst ) : lst = lst [ : ] highest_freq = 0 most_freq = None for val in unique ( lst ) : if lst . count ( val ) > highest_freq : most_freq = val highest_freq = lst . count ( val ) return most_freq\n", "title": "", "metadata": ""}
{"_id": "24db4a7d40a185c11d65faa3e154d50b", "text": "def remote_file_exists ( self , url ) : status = requests . head ( url ) . status_code if status != 200 : raise RemoteFileDoesntExist\n", "title": "", "metadata": ""}
{"_id": "86f9c5b2b97faafd562cace49eae1737", "text": "def get_closest_index ( myList , myNumber ) : closest_values_index = _np . where ( self . time == take_closest ( myList , myNumber ) ) [ 0 ] [ 0 ] return closest_values_index\n", "title": "", "metadata": ""}
{"_id": "56dcb4f8f0508da10cebf1b521befb92", "text": "def get ( url ) : response = urllib . request . urlopen ( url ) data = response . read ( ) data = data . decode ( \"utf-8\" ) data = json . loads ( data ) return data\n", "title": "", "metadata": ""}
{"_id": "1342af964de96c77edfb65dc24029ce0", "text": "def n_choose_k ( n , k ) : return int ( reduce ( MUL , ( Fraction ( n - i , i + 1 ) for i in range ( k ) ) , 1 ) )\n", "title": "", "metadata": ""}
{"_id": "8666c17faccc47fbfb6acc16096c0957", "text": "def generate_yaml_file ( filename , contents ) : with open ( filename , 'w' ) as file : file . write ( yaml . dump ( contents , default_flow_style = False ) )\n", "title": "", "metadata": ""}
{"_id": "17b50a17e559ec2c9389766cf27628f8", "text": "def unlock ( self ) : if not hasattr ( self , 'session' ) : raise RuntimeError ( 'Error detected! The session that you want to close does not exist any more!' ) logger . debug ( \"Closed database session of '%s'\" % self . _database ) self . session . close ( ) del self . session\n", "title": "", "metadata": ""}
{"_id": "fdd6f1f29e17157aea8d547e3ea5670e", "text": "def _breakRemNewlines ( tag ) : for i , c in enumerate ( tag . contents ) : if type ( c ) != bs4 . element . NavigableString : continue c . replace_with ( re . sub ( r' {2,}' , ' ' , c ) . replace ( '\\n' , '' ) )\n", "title": "", "metadata": ""}
{"_id": "9d3de6f9d54d8b79e35cc39b02bdf119", "text": "def filter_regex ( names , regex ) : return tuple ( name for name in names if regex . search ( name ) is not None )\n", "title": "", "metadata": ""}
{"_id": "f12828a3e11cc3bd152b6e3625ae5981", "text": "def StringIO ( * args , * * kwargs ) : raw = sync_io . StringIO ( * args , * * kwargs ) return AsyncStringIOWrapper ( raw )\n", "title": "", "metadata": ""}
{"_id": "6367917dfe28330b932e8fcf46123928", "text": "def add_arrow ( self , x1 , y1 , x2 , y2 , * * kws ) : self . panel . add_arrow ( x1 , y1 , x2 , y2 , * * kws )\n", "title": "", "metadata": ""}
{"_id": "029435dd7acaf7e977af91cf27675828", "text": "def save_excel ( self , fd ) : from pylon . io . excel import ExcelWriter ExcelWriter ( self ) . write ( fd )\n", "title": "", "metadata": ""}
{"_id": "2cc97330bae5fcb0a6c4fdc5d8f60dd6", "text": "def onLeftDown ( self , event = None ) : if event is None : return self . cursor_mode_action ( 'leftdown' , event = event ) self . ForwardEvent ( event = event . guiEvent )\n", "title": "", "metadata": ""}
{"_id": "9e73dacde68b506fe13ea05a10c0d3e5", "text": "def _index_ordering ( redshift_list ) : redshift_list = np . array ( redshift_list ) sort_index = np . argsort ( redshift_list ) return sort_index\n", "title": "", "metadata": ""}
{"_id": "0623f5be3354ad7b10423ee3fbc9a168", "text": "def register_view ( self , view ) : super ( ListViewController , self ) . register_view ( view ) self . tree_view . connect ( 'button_press_event' , self . mouse_click )\n", "title": "", "metadata": ""}
{"_id": "a8c18cf75a7adfcdbf0fbc23ccece7a6", "text": "def is_filelike ( ob ) : if hasattr ( ob , 'read' ) and callable ( ob . read ) : return True if hasattr ( ob , 'write' ) and callable ( ob . write ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "a6ede89670a17fff5c2a56832e82ba83", "text": "def _connection_failed ( self , error = \"Error not specified!\" ) : if not self . _error : LOG . error ( \"Connection failed: %s\" , str ( error ) ) self . _error = error\n", "title": "", "metadata": ""}
{"_id": "9538f2a08612689d2dbdac05ad33bba8", "text": "def is_date ( thing ) : # known date types date_types = ( datetime . datetime , datetime . date , DateTime ) return isinstance ( thing , date_types )\n", "title": "", "metadata": ""}
{"_id": "0017e85eb3f7b958fe30fb3137246014", "text": "def one_hot ( x , size , dtype = np . float32 ) : return np . array ( x [ ... , np . newaxis ] == np . arange ( size ) , dtype )\n", "title": "", "metadata": ""}
{"_id": "7dd6106dd8c28bf6c97ba0d25870f027", "text": "def get_file_size ( filename ) : if os . path . isfile ( filename ) : return convert_size ( os . path . getsize ( filename ) ) return None\n", "title": "", "metadata": ""}
{"_id": "05133e096ec20d6ad96c3f34fa0d13d8", "text": "def increment ( self , amount = 1 ) : self . _primaryProgressBar . setValue ( self . value ( ) + amount ) QApplication . instance ( ) . processEvents ( )\n", "title": "", "metadata": ""}
{"_id": "1bb3c49ba20f27c84dfc7f4d967dd6fc", "text": "def load_graph_from_rdf ( fname ) : print ( \"reading RDF from \" + fname + \"....\" ) store = Graph ( ) store . parse ( fname , format = \"n3\" ) print ( \"Loaded \" + str ( len ( store ) ) + \" tuples\" ) return store\n", "title": "", "metadata": ""}
{"_id": "3c9408842537ed599dff1d552953b6fe", "text": "def OnMove ( self , event ) : # Store window position in config position = self . main_window . GetScreenPositionTuple ( ) config [ \"window_position\" ] = repr ( position )\n", "title": "", "metadata": ""}
{"_id": "ad5ccbe2acc1b8527fb449b1e2b90636", "text": "def _find ( string , sub_string , start_index ) : result = string . find ( sub_string , start_index ) if result == - 1 : raise TokenError ( \"expected '{0}'\" . format ( sub_string ) ) return result\n", "title": "", "metadata": ""}
{"_id": "906192ddaba71cd622c767d8ecbab56b", "text": "def get_var ( self , name ) : for var in self . vars : if var . name == name : return var else : raise ValueError\n", "title": "", "metadata": ""}
{"_id": "07177a003420d5872041570347f6254e", "text": "def execute_cast_simple_literal_to_timestamp ( op , data , type , * * kwargs ) : return pd . Timestamp ( data , tz = type . timezone )\n", "title": "", "metadata": ""}
{"_id": "94e39c0ebc6ed01d8822c5583521280e", "text": "def _isbool ( string ) : return isinstance ( string , _bool_type ) or ( isinstance ( string , ( _binary_type , _text_type ) ) and string in ( \"True\" , \"False\" ) )\n", "title": "", "metadata": ""}
{"_id": "1a6925a23cf366251080f37d5bf74cd5", "text": "def is_sparse_vector ( x ) : return sp . issparse ( x ) and len ( x . shape ) == 2 and x . shape [ 0 ] == 1\n", "title": "", "metadata": ""}
{"_id": "28753a5425b8ed7f0b4be8b78ae0a7d3", "text": "def is_valid_url ( url ) : pieces = urlparse ( url ) return all ( [ pieces . scheme , pieces . netloc ] )\n", "title": "", "metadata": ""}
{"_id": "e9f7b152633291268285c9dbe75ecac7", "text": "def getvariable ( name ) : import inspect fr = inspect . currentframe ( ) try : while fr : fr = fr . f_back vars = fr . f_locals if name in vars : return vars [ name ] except : pass return None\n", "title": "", "metadata": ""}
{"_id": "fa5a6eca2c72c8393b3514c6e66f1b6e", "text": "def draw_header ( self , stream , header ) : stream . writeln ( '=' * ( len ( header ) + 4 ) ) stream . writeln ( '| ' + header + ' |' ) stream . writeln ( '=' * ( len ( header ) + 4 ) ) stream . writeln ( )\n", "title": "", "metadata": ""}
{"_id": "9ac15b9fd8055a5415420484f4b569ae", "text": "def encode ( strs ) : res = '' for string in strs . split ( ) : res += str ( len ( string ) ) + \":\" + string return res\n", "title": "", "metadata": ""}
{"_id": "5b9237f8532be96f03178c971cbbe85d", "text": "def wordify ( text ) : stopset = set ( nltk . corpus . stopwords . words ( 'english' ) ) tokens = nltk . WordPunctTokenizer ( ) . tokenize ( text ) return [ w for w in tokens if w not in stopset ]\n", "title": "", "metadata": ""}
{"_id": "6976b71994822356cca418ecd9bdc12e", "text": "def datetime_created ( self ) : if self . info ( ) . get ( 'datetime_created' ) : return dateutil . parser . parse ( self . info ( ) [ 'datetime_created' ] )\n", "title": "", "metadata": ""}
{"_id": "ce293ff2a2c3f3e1c6ba0f96ea250a0e", "text": "def print_env_info ( key , out = sys . stderr ) : value = os . getenv ( key ) if value is not None : print ( key , \"=\" , repr ( value ) , file = out )\n", "title": "", "metadata": ""}
{"_id": "7f8fae7cc88ec4ea447f04c227574397", "text": "def min_max_normalize ( img ) : min_img = img . min ( ) max_img = img . max ( ) return ( img - min_img ) / ( max_img - min_img )\n", "title": "", "metadata": ""}
{"_id": "cdfa0fe5267ec419bf69ec1eca6c3536", "text": "def execute ( cur , * args ) : stmt = args [ 0 ] if len ( args ) > 1 : stmt = stmt . replace ( '%' , '%%' ) . replace ( '?' , '%r' ) print ( stmt % ( args [ 1 ] ) ) return cur . execute ( * args )\n", "title": "", "metadata": ""}
{"_id": "4c0ccd7bd7f6aaf4e11ddfaed160e31a", "text": "def hidden_cursor ( ) : if sys . stdout . isatty ( ) : _LOGGER . debug ( 'Hiding cursor.' ) print ( '\\x1B[?25l' , end = '' ) sys . stdout . flush ( ) try : yield finally : if sys . stdout . isatty ( ) : _LOGGER . debug ( 'Showing cursor.' ) print ( '\\n\\x1B[?25h' , end = '' ) sys . stdout . flush ( )\n", "title": "", "metadata": ""}
{"_id": "5373a73bb71e95831362132d372f9573", "text": "def test ( ) : import unittest tests = unittest . TestLoader ( ) . discover ( 'tests' ) unittest . TextTestRunner ( verbosity = 2 ) . run ( tests )\n", "title": "", "metadata": ""}
{"_id": "1b6c3b4c2355d7e2ef54286eadc3d80c", "text": "def hclust_linearize ( U ) : from scipy . cluster import hierarchy Z = hierarchy . ward ( U ) return hierarchy . leaves_list ( hierarchy . optimal_leaf_ordering ( Z , U ) )\n", "title": "", "metadata": ""}
{"_id": "eb3e911f08577a57560e2f4d0438c60a", "text": "def set_verbosity ( verbosity ) : Logger . _verbosity = min ( max ( 0 , WARNING - verbosity ) , 2 ) debug ( \"Verbosity set to %d\" % ( WARNING - Logger . _verbosity ) , 'logging' )\n", "title": "", "metadata": ""}
{"_id": "fbb9a447cfc6fc7100000eb627c99564", "text": "def check ( self , var ) : if not isinstance ( var , _str_type ) : return False return _enum_mangle ( var ) in self . _consts\n", "title": "", "metadata": ""}
{"_id": "177cc2da9a55ee66759e5f3bb2b96d77", "text": "def log ( self , level , msg = None , * args , * * kwargs ) : return self . _log ( level , msg , args , kwargs )\n", "title": "", "metadata": ""}
{"_id": "44a13afcb556697ee06d4b257ea7cf9c", "text": "def is_defined ( self , objtxt , force_import = False ) : return self . interpreter . is_defined ( objtxt , force_import )\n", "title": "", "metadata": ""}
{"_id": "10bd856c6f6b57e074b9f0c6b7fad436", "text": "def get_file_md5sum ( path ) : with open ( path , 'rb' ) as fh : h = str ( hashlib . md5 ( fh . read ( ) ) . hexdigest ( ) ) return h\n", "title": "", "metadata": ""}
{"_id": "3f82c0ed650cbed97385816e2399779e", "text": "def help ( self , level = 0 ) : self . cmdline_parser . formatter . output_level = level with _patch_optparse ( ) : return self . cmdline_parser . format_help ( )\n", "title": "", "metadata": ""}
{"_id": "e459c10da60e188728bd573a9824a970", "text": "def indent ( text : str , num : int = 2 ) -> str : lines = text . splitlines ( ) return \"\\n\" . join ( indent_iterable ( lines , num = num ) )\n", "title": "", "metadata": ""}
{"_id": "e4098af944ef2bdc0af05c3d1e2173ed", "text": "def truncate_table ( self , tablename ) : self . get ( tablename ) . remove ( ) self . db . commit ( )\n", "title": "", "metadata": ""}
{"_id": "6d827ca2ca82d650ef3a83748b7ce0df", "text": "def compatible_staticpath ( path ) : if VERSION >= ( 1 , 10 ) : # Since Django 1.10, forms.Media automatically invoke static # lazily on the path if it is relative. return path try : # >= 1.4 from django . templatetags . static import static return static ( path ) except ImportError : pass try : # >= 1.3 return '%s/%s' % ( settings . STATIC_URL . rstrip ( '/' ) , path ) except AttributeError : pass try : return '%s/%s' % ( settings . PAGEDOWN_URL . rstrip ( '/' ) , path ) except AttributeError : pass return '%s/%s' % ( settings . MEDIA_URL . rstrip ( '/' ) , path )\n", "title": "", "metadata": ""}
{"_id": "bd7fbeb7f9bf8b090abe787525805d74", "text": "def _set_axis_limits ( self , which , lims , d , scale , reverse = False ) : setattr ( self . limits , which + 'lims' , lims ) setattr ( self . limits , 'd' + which , d ) setattr ( self . limits , which + 'scale' , scale ) if reverse : setattr ( self . limits , 'reverse_' + which + '_axis' , True ) return\n", "title": "", "metadata": ""}
{"_id": "22ad11caef1917b91c259e61f4f1aa03", "text": "def complex_check ( * args , func = None ) : func = func or inspect . stack ( ) [ 2 ] [ 3 ] for var in args : if not isinstance ( var , numbers . Complex ) : name = type ( var ) . __name__ raise ComplexError ( f'Function {func} expected complex number, {name} got instead.' )\n", "title": "", "metadata": ""}
{"_id": "d116b75a9c94a3d87f96ad42d52c4807", "text": "def head ( filename , n = 10 ) : with freader ( filename ) as fr : for _ in range ( n ) : print ( fr . readline ( ) . strip ( ) )\n", "title": "", "metadata": ""}
{"_id": "1708082439a4982134a63d3389cfbc28", "text": "def flat_list ( input_list ) : x = input_list if isinstance ( x , list ) : return [ a for i in x for a in flat_list ( i ) ] else : return [ x ]\n", "title": "", "metadata": ""}
{"_id": "29632493bd8a74ea831ce9232d4ac4e4", "text": "def clean_out_dir ( directory ) : if not isinstance ( directory , path ) : directory = path ( directory ) for file_path in directory . files ( ) : file_path . remove ( ) for dir_path in directory . dirs ( ) : dir_path . rmtree ( )\n", "title": "", "metadata": ""}
{"_id": "f2abae38c616badcc45f14a7a0aeefbd", "text": "def is_iterable_of_int ( l ) : if not is_iterable ( l ) : return False return all ( is_int ( value ) for value in l )\n", "title": "", "metadata": ""}
{"_id": "119d04e61640a07f904fc8532fd4a173", "text": "def get_randomized_guid_sample ( self , item_count ) : dataset = self . get_whitelist ( ) random . shuffle ( dataset ) return dataset [ : item_count ]\n", "title": "", "metadata": ""}
{"_id": "80c3b15e0c236e4cebb8ea208c32933a", "text": "def hasattrs ( object , * names ) : for name in names : if not hasattr ( object , name ) : return False return True\n", "title": "", "metadata": ""}
{"_id": "0e2a6a0c9bfddfde12f552bf363f08d7", "text": "def computeDelaunayTriangulation ( points ) : siteList = SiteList ( points ) context = Context ( ) context . triangulate = True voronoi ( siteList , context ) return context . triangles\n", "title": "", "metadata": ""}
{"_id": "85ff7be29575f70c03409fdcf549e2c6", "text": "def log_normalize ( data ) : if sp . issparse ( data ) : data = data . copy ( ) data . data = np . log2 ( data . data + 1 ) return data return np . log2 ( data . astype ( np . float64 ) + 1 )\n", "title": "", "metadata": ""}
{"_id": "b6da9e73b5d34342c5ed63befe24e608", "text": "def check_clang_apply_replacements_binary ( args ) : try : subprocess . check_call ( [ args . clang_apply_replacements_binary , '--version' ] ) except : print ( 'Unable to run clang-apply-replacements. Is clang-apply-replacements ' 'binary correctly specified?' , file = sys . stderr ) traceback . print_exc ( ) sys . exit ( 1 )\n", "title": "", "metadata": ""}
{"_id": "a43d42d2c8968e8ac5e0c71fcfea9960", "text": "def csvpretty ( csvfile : csvfile = sys . stdin ) : shellish . tabulate ( csv . reader ( csvfile ) )\n", "title": "", "metadata": ""}
{"_id": "6b5743dbd1583e93ab5a4ca851b705df", "text": "def move_page_bottom ( self ) : self . nav . page_index = self . content . range [ 1 ] self . nav . cursor_index = 0 self . nav . inverted = True\n", "title": "", "metadata": ""}
{"_id": "fb56207273fd5ecd34a856b8a99a63d3", "text": "def close_all_but_this ( self ) : self . close_all_right ( ) for i in range ( 0 , self . get_stack_count ( ) - 1 ) : self . close_file ( 0 )\n", "title": "", "metadata": ""}
{"_id": "cc0db03a809e7f8514b2b92d1e0dfa80", "text": "def _root ( self ) : _n = self while _n . parent : _n = _n . parent return _n\n", "title": "", "metadata": ""}
{"_id": "2f5b3ca06b12572db27b74ec69ea7dd1", "text": "async def create_websocket_server ( sock , filter = None ) : # pylint: disable=W0622 ws = Websocket ( ) await ws . start_server ( sock , filter = filter ) return ws\n", "title": "", "metadata": ""}
{"_id": "f02087e9933420eeab279b8c653c7ee4", "text": "def get_mnist ( data_type = \"train\" , location = \"/tmp/mnist\" ) : X , Y = mnist . read_data_sets ( location , data_type ) return X , Y + 1\n", "title": "", "metadata": ""}
{"_id": "f2d2e6817262f2d3ea8a6b3f59b31dd3", "text": "def inside_softimage ( ) : try : import maya return False except ImportError : pass try : from win32com . client import Dispatch as disp disp ( 'XSI.Application' ) return True except : return False\n", "title": "", "metadata": ""}
{"_id": "567b41c191626eda1400c7477a907a1e", "text": "async def executemany ( self , sql : str , parameters : Iterable [ Iterable [ Any ] ] ) -> None : await self . _execute ( self . _cursor . executemany , sql , parameters )\n", "title": "", "metadata": ""}
{"_id": "8f5d9b85dd271edc80f2cb4487e6a3eb", "text": "def add ( self , name , desc , func = None , args = None , krgs = None ) : self . entries . append ( MenuEntry ( name , desc , func , args or [ ] , krgs or { } ) )\n", "title": "", "metadata": ""}
{"_id": "67e10e962cbaf647baa9ad2f1dbfe710", "text": "def clean_df ( df , fill_nan = True , drop_empty_columns = True ) : if fill_nan : df = df . fillna ( value = np . nan ) if drop_empty_columns : df = df . dropna ( axis = 1 , how = 'all' ) return df . sort_index ( )\n", "title": "", "metadata": ""}
{"_id": "7115ca84baa712daecb305d5b46be775", "text": "def readwav ( filename ) : from scipy . io . wavfile import read as readwav samplerate , signal = readwav ( filename ) return signal , samplerate\n", "title": "", "metadata": ""}
{"_id": "c2a54d5751fc220c4e0f7bbc1a49bee0", "text": "def _accumulate ( sequence , func ) : iterator = iter ( sequence ) total = next ( iterator ) yield total for element in iterator : total = func ( total , element ) yield total\n", "title": "", "metadata": ""}
{"_id": "71372f42f51e7d8f68fa5d133d53b826", "text": "def transcript_sort_key ( transcript ) : return ( - len ( transcript . protein_sequence ) , - len ( transcript . sequence ) , transcript . name )\n", "title": "", "metadata": ""}
{"_id": "6efc521b9083ea32a773750c9fc8f34b", "text": "def _baseattrs ( self ) : result = super ( ) . _baseattrs result [ \"params\" ] = \", \" . join ( self . parameters ) return result\n", "title": "", "metadata": ""}
{"_id": "50f6209cb6f4f844ffbc90070e179afd", "text": "def list_backends ( _ ) : backends = [ b . __name__ for b in available_backends ( ) ] print ( '\\n' . join ( backends ) )\n", "title": "", "metadata": ""}
{"_id": "f2638c5868cbf101ea28c104fedae18f", "text": "def elmo_loss2ppl ( losses : List [ np . ndarray ] ) -> float : avg_loss = np . mean ( losses ) return float ( np . exp ( avg_loss ) )\n", "title": "", "metadata": ""}
{"_id": "8999f80855d178d34eddcd826534d310", "text": "def get_property_by_name ( pif , name ) : return next ( ( x for x in pif . properties if x . name == name ) , None )\n", "title": "", "metadata": ""}
{"_id": "ca44dc79a3047038d927a8f24ddfb034", "text": "def sbatch_template ( self ) : template = self . sbatch_template_str if template . startswith ( '#!' ) : # script is embedded in YAML return jinja_environment . from_string ( template ) return jinja_environment . get_template ( template )\n", "title": "", "metadata": ""}
{"_id": "18f07fb13c67e125e1decf066b3f5f1e", "text": "def get_future_days ( self ) : today = timezone . now ( ) . date ( ) return Day . objects . filter ( date__gte = today )\n", "title": "", "metadata": ""}
{"_id": "65e5a8cfa197a56f7972c101124ec0b2", "text": "def eval ( e , amplitude , e_0 , alpha , beta ) : ee = e / e_0 eeponent = - alpha - beta * np . log ( ee ) return amplitude * ee ** eeponent\n", "title": "", "metadata": ""}
{"_id": "a23f2bf13930b21b9d21a735c171b07b", "text": "def _rindex ( mylist : Sequence [ T ] , x : T ) -> int : return len ( mylist ) - mylist [ : : - 1 ] . index ( x ) - 1\n", "title": "", "metadata": ""}
{"_id": "59b5b1cfd2301d712405a74ce9e58abd", "text": "def write_fits ( self , fitsfile ) : tab = self . create_table ( ) hdu_data = fits . table_to_hdu ( tab ) hdus = [ fits . PrimaryHDU ( ) , hdu_data ] fits_utils . write_hdus ( hdus , fitsfile )\n", "title": "", "metadata": ""}
{"_id": "c89b6578e2dd822574f608f1ca420bc5", "text": "def get_from_human_key ( self , key ) : if key in self . _identifier_map : return self . _identifier_map [ key ] raise KeyError ( key )\n", "title": "", "metadata": ""}
{"_id": "ccf86ea2b0be7c4ec643c1b3e77459de", "text": "def clean_dict_keys ( d ) : new_d = { } for ( k , v ) in d . iteritems ( ) : new_d [ str ( k ) ] = v return new_d\n", "title": "", "metadata": ""}
{"_id": "ff43ec6c8ed6d6f64315b0613e0d6d64", "text": "def set_value ( self , value ) : if value : self . setCheckState ( Qt . Checked ) else : self . setCheckState ( Qt . Unchecked )\n", "title": "", "metadata": ""}
{"_id": "30717f7dc815734644f57742f8058a84", "text": "def _update_bordercolor ( self , bordercolor ) : border_color = wx . SystemSettings_GetColour ( wx . SYS_COLOUR_ACTIVEBORDER ) border_color . SetRGB ( bordercolor ) self . linecolor_choice . SetColour ( border_color )\n", "title": "", "metadata": ""}
{"_id": "baab2d890ce6bc1901101544810764ef", "text": "def get_size ( objects ) : res = 0 for o in objects : try : res += _getsizeof ( o ) except AttributeError : print ( \"IGNORING: type=%s; o=%s\" % ( str ( type ( o ) ) , str ( o ) ) ) return res\n", "title": "", "metadata": ""}
{"_id": "0827b3c6d2245500b9200ec6da1b386c", "text": "def _parse_ranges ( ranges ) : for txt in ranges : if '-' in txt : low , high = txt . split ( '-' ) else : low , high = txt , txt yield int ( low ) , int ( high )\n", "title": "", "metadata": ""}
{"_id": "95e1b43f6af901b3056056bff75613a7", "text": "def _hess_two_param ( self , funct , p0 , p1 , dl = 2e-5 , rts = False , * * kwargs ) : vals0 = self . get_values ( p0 ) vals1 = self . get_values ( p1 ) f00 = funct ( * * kwargs ) self . update ( p0 , vals0 + dl ) f10 = funct ( * * kwargs ) self . update ( p1 , vals1 + dl ) f11 = funct ( * * kwargs ) self . update ( p0 , vals0 ) f01 = funct ( * * kwargs ) if rts : self . update ( p0 , vals0 ) self . update ( p1 , vals1 ) return ( f11 - f10 - f01 + f00 ) / ( dl ** 2 )\n", "title": "", "metadata": ""}
{"_id": "654eb031208e349b1e638a8b2a2a3856", "text": "def is_rate_limited ( response ) : if ( response . status_code == codes . too_many_requests and 'Retry-After' in response . headers and int ( response . headers [ 'Retry-After' ] ) >= 0 ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "7404ffb343db9d8020f1e693ce9791c6", "text": "def flatten_list ( l ) : return list ( chain . from_iterable ( repeat ( x , 1 ) if isinstance ( x , str ) else x for x in l ) )\n", "title": "", "metadata": ""}
{"_id": "83fe1d98de47f4f62aa2f8127af2ac96", "text": "def format_float ( value ) : # not used string = \"{:g}\" . format ( value ) . replace ( \"e+\" , \"e\" ) string = re . sub ( \"e(-?)0*(\\d+)\" , r\"e\\1\\2\" , string ) return string\n", "title": "", "metadata": ""}
{"_id": "2dbe2e5cfc27b147125556eb22370b6e", "text": "def hamming ( s , t ) : if len ( s ) != len ( t ) : raise ValueError ( 'Hamming distance needs strings of equal length.' ) return sum ( s_ != t_ for s_ , t_ in zip ( s , t ) )\n", "title": "", "metadata": ""}
{"_id": "63dce50cecd2e3b667ed5a17049148fe", "text": "def on_mouse_motion ( self , x , y , dx , dy ) : # Screen coordinates relative to the lower-left corner  # so we have to flip the y axis to make this consistent with  # other window libraries  self . example . mouse_position_event ( x , self . buffer_height - y )\n", "title": "", "metadata": ""}
{"_id": "25e3a386784bce3df8833f20963a24f8", "text": "def is_delimiter ( line ) : return bool ( line ) and line [ 0 ] in punctuation and line [ 0 ] * len ( line ) == line\n", "title": "", "metadata": ""}
{"_id": "0ad6c671d949348fafcc4b6cbee278db", "text": "def _check_key ( self , key ) : if not len ( key ) == 2 : raise TypeError ( 'invalid key: %r' % key ) elif key [ 1 ] not in TYPES : raise TypeError ( 'invalid datatype: %s' % key [ 1 ] )\n", "title": "", "metadata": ""}
{"_id": "86684005d2e7be8bdbb87d191e55f842", "text": "def get_codes ( s : Union [ str , 'ChainedBase' ] ) -> List [ str ] : return codegrabpat . findall ( str ( s ) )\n", "title": "", "metadata": ""}
{"_id": "79b9de354fdb389c1d31272988e75ad7", "text": "def date_to_timestamp ( date ) : date_tuple = date . timetuple ( ) timestamp = calendar . timegm ( date_tuple ) * 1000 return timestamp\n", "title": "", "metadata": ""}
{"_id": "63dee89dd4505d25c5de2816f05038e6", "text": "def uniqueID ( size = 6 , chars = string . ascii_uppercase + string . digits ) : return '' . join ( random . choice ( chars ) for x in xrange ( size ) )\n", "title": "", "metadata": ""}
{"_id": "408e17594fb297acd9ab26e5a7631b9c", "text": "def unpack_from ( self , data , offset = 0 ) : return tuple ( [ v [ 1 ] for v in self . unpack_from_any ( data , offset ) ] )\n", "title": "", "metadata": ""}
{"_id": "cde0933c4d337333435f253872dfa665", "text": "def _relative_frequency ( self , word ) : count = self . type_counts . get ( word , 0 ) return math . log ( count / len ( self . type_counts ) ) if count > 0 else 0\n", "title": "", "metadata": ""}
{"_id": "ba7860f25b6d0b1fb6fae0b9eef3976a", "text": "def seconds_to_hms ( input_seconds ) : minutes , seconds = divmod ( input_seconds , 60 ) hours , minutes = divmod ( minutes , 60 ) hours = int ( hours ) minutes = int ( minutes ) seconds = str ( int ( seconds ) ) . zfill ( 2 ) return hours , minutes , seconds\n", "title": "", "metadata": ""}
{"_id": "0c990ba3e2268d4fea1d10df7fd53e23", "text": "def abort ( err ) : if _debug : abort . _debug ( \"abort %r\" , err ) global local_controllers # tell all the local controllers to abort for controller in local_controllers . values ( ) : controller . abort ( err )\n", "title": "", "metadata": ""}
{"_id": "203819b933a02b7683312f1947e19797", "text": "def clear ( self ) : self . _imgobj = None try : # See if there is an image on the canvas self . canvas . delete_object_by_tag ( self . _canvas_img_tag ) self . redraw ( ) except KeyError : pass\n", "title": "", "metadata": ""}
{"_id": "521b40ad706aa7d1d5090e411bb62296", "text": "def stft ( func = None , * * kwparams ) : from numpy . fft import fft , ifft ifft_r = lambda * args : ifft ( * args ) . real return stft . base ( transform = fft , inverse_transform = ifft_r ) ( func , * * kwparams )\n", "title": "", "metadata": ""}
{"_id": "43cdaa42b75411953dc15360d37c1fa4", "text": "def asyncStarCmap ( asyncCallable , iterable ) : results = [ ] yield coopStar ( asyncCallable , results . append , iterable ) returnValue ( results )\n", "title": "", "metadata": ""}
{"_id": "4bd6d8194069060133abec41cf3a6b54", "text": "def file_matches ( filename , patterns ) : return any ( fnmatch . fnmatch ( filename , pat ) for pat in patterns )\n", "title": "", "metadata": ""}
{"_id": "08fb1197204efd178b3dc65560afdf8f", "text": "def sample_colormap ( cmap_name , n_samples ) : colors = [ ] colormap = cm . cmap_d [ cmap_name ] for i in np . linspace ( 0 , 1 , n_samples ) : colors . append ( colormap ( i ) ) return colors\n", "title": "", "metadata": ""}
{"_id": "4c9bfd638569a75642b36f41631c2982", "text": "def has_next_async ( self ) : if self . _fut is None : self . _fut = self . _iter . getq ( ) flag = True try : yield self . _fut except EOFError : flag = False raise tasklets . Return ( flag )\n", "title": "", "metadata": ""}
{"_id": "f67c505fcc25d6cafd6e12c2fc6705f4", "text": "def _is_override ( meta , method ) : from taipan . objective . modifiers import _OverriddenMethod return isinstance ( method , _OverriddenMethod )\n", "title": "", "metadata": ""}
{"_id": "ac38871e820d37603d9a9e9d8d667d24", "text": "def server ( request ) : return direct_to_template ( request , 'server/index.html' , { 'user_url' : getViewURL ( request , idPage ) , 'server_xrds_url' : getViewURL ( request , idpXrds ) , } )\n", "title": "", "metadata": ""}
{"_id": "e30b7bd6f15efba8ae3b3c3f178844e1", "text": "def erase_lines ( n = 1 ) : for _ in range ( n ) : print ( codes . cursor [ \"up\" ] , end = \"\" ) print ( codes . cursor [ \"eol\" ] , end = \"\" )\n", "title": "", "metadata": ""}
{"_id": "1378de32499672b76b8b046c382ecc27", "text": "def make_writeable ( filename ) : if not os . access ( filename , os . W_OK ) : st = os . stat ( filename ) new_permissions = stat . S_IMODE ( st . st_mode ) | stat . S_IWUSR os . chmod ( filename , new_permissions )\n", "title": "", "metadata": ""}
{"_id": "88eae4afc10e2fe4654dc45ea87486af", "text": "def format_exception ( e ) : from . utils . printing import fill return '\\n' . join ( fill ( line ) for line in traceback . format_exception_only ( type ( e ) , e ) )\n", "title": "", "metadata": ""}
{"_id": "3d88933fae3a920e7884c212dd5e1bc4", "text": "def _is_path ( s ) : if isinstance ( s , string_types ) : try : return op . exists ( s ) except ( OSError , ValueError ) : return False else : return False\n", "title": "", "metadata": ""}
{"_id": "60b17d46ab091180f6c226a082707021", "text": "def __init__ ( self ) : # Root parser self . parser = argparse . ArgumentParser ( ) # Subparsers self . subparsers = self . parser . add_subparsers ( ) # Parser dictionary, to avoir overwriting existing parsers self . parsers = { }\n", "title": "", "metadata": ""}
{"_id": "a78b0a488c28c83ad6c715bc1c57e431", "text": "def is_callable_tag ( tag ) : return ( isinstance ( tag , six . string_types ) and tag . strip ( ) . startswith ( '{{' ) and tag . strip ( ) . endswith ( '}}' ) )\n", "title": "", "metadata": ""}
{"_id": "0c3b9ce04232bf1f388eda811b6b1c7d", "text": "def out ( self , output , newline = True ) : click . echo ( output , nl = newline )\n", "title": "", "metadata": ""}
{"_id": "a2d13cf22a3d7bcee42373e41137b0e8", "text": "def wheel ( delta = 1 ) : location = get_position ( ) e = Quartz . CGEventCreateMouseEvent ( None , Quartz . kCGEventScrollWheel , location , Quartz . kCGMouseButtonLeft ) e2 = Quartz . CGEventCreateScrollWheelEvent ( None , Quartz . kCGScrollEventUnitLine , 1 , delta ) Quartz . CGEventPost ( Quartz . kCGHIDEventTap , e ) Quartz . CGEventPost ( Quartz . kCGHIDEventTap , e2 )\n", "title": "", "metadata": ""}
{"_id": "3cadd087abd07e290d5406505fe9ae79", "text": "def check_output ( args , env = None , sp = subprocess ) : log . debug ( 'calling %s with env %s' , args , env ) output = sp . check_output ( args = args , env = env ) log . debug ( 'output: %r' , output ) return output\n", "title": "", "metadata": ""}
{"_id": "2c423eefbf8987cf499c7bfd6e749ccb", "text": "def purge_cache ( self , object_type ) : if object_type in self . mapping : cache = self . mapping [ object_type ] log . debug ( \"Purging [{}] cache of {} values.\" . format ( object_type , len ( cache ) ) ) cache . purge ( )\n", "title": "", "metadata": ""}
{"_id": "28aab19bd4a6ae9b275eb2b2e100d2f9", "text": "def copy_user_agent_from_driver ( self ) : selenium_user_agent = self . driver . execute_script ( \"return navigator.userAgent;\" ) self . headers . update ( { \"user-agent\" : selenium_user_agent } )\n", "title": "", "metadata": ""}
{"_id": "d7baa4a79cf6e90897f2c84a72ad8200", "text": "def _convert_to_float_if_possible ( s ) : try : ret = float ( s ) except ( ValueError , TypeError ) : ret = s return ret\n", "title": "", "metadata": ""}
{"_id": "67e52bc80f44bcbf233f94ce1ee82dc5", "text": "def clog ( color ) : logger = log ( color ) return lambda msg : logger ( centralize ( msg ) . rstrip ( ) )\n", "title": "", "metadata": ""}
{"_id": "89b75c6f86ada3f7a47ae2a5f21e7e36", "text": "def redirect_output ( fileobj ) : old = sys . stdout sys . stdout = fileobj try : yield fileobj finally : sys . stdout = old\n", "title": "", "metadata": ""}
{"_id": "d1d145318841808957e657d4c63182d9", "text": "def mkhead ( repo , path ) : return git . Head ( repo , git . Head . to_full_path ( path ) )\n", "title": "", "metadata": ""}
{"_id": "5c890ed6be54e48f8cb06f4e91195507", "text": "def straight_line_show ( title , length = 100 , linestyle = \"=\" , pad = 0 ) : print ( StrTemplate . straight_line ( title = title , length = length , linestyle = linestyle , pad = pad ) )\n", "title": "", "metadata": ""}
{"_id": "ddff92f54e3cce98f793beab670158b3", "text": "def on_close ( self , evt ) : self . stop ( ) # DoseWatcher if evt . EventObject is not self : # Avoid deadlocks self . Close ( ) # wx.Frame evt . Skip ( )\n", "title": "", "metadata": ""}
{"_id": "dd940d7e50e1544c7fe37042ea275a23", "text": "def get_keys_from_class ( cc ) : return [ prop . name for prop in cc . properties . values ( ) if 'key' in prop . qualifiers ]\n", "title": "", "metadata": ""}
{"_id": "a9d66838025b79ea1516ce26f0bdcc15", "text": "def is_symbol ( string ) : return ( is_int ( string ) or is_float ( string ) or is_constant ( string ) or is_unary ( string ) or is_binary ( string ) or ( string == '(' ) or ( string == ')' ) )\n", "title": "", "metadata": ""}
{"_id": "050b928e1ee6d6c74848e810cccaacf5", "text": "def session_expired ( self ) : if not self . _login_time or ( datetime . datetime . now ( ) - self . _login_time ) . total_seconds ( ) > 12000 : return True\n", "title": "", "metadata": ""}
{"_id": "3766a1ffcf962f33e3d7aff687660f64", "text": "def getCenter ( self ) : return Location ( self . x + ( self . w / 2 ) , self . y + ( self . h / 2 ) )\n", "title": "", "metadata": ""}
{"_id": "65e15e995e68c17b596ef95f55a26d5d", "text": "def runiform ( lower , upper , size = None ) : return np . random . uniform ( lower , upper , size )\n", "title": "", "metadata": ""}
{"_id": "54ca136dde2e12fb5cc9833344c20c2f", "text": "def raise_os_error ( _errno , path = None ) : msg = \"%s: '%s'\" % ( strerror ( _errno ) , path ) if path else strerror ( _errno ) raise OSError ( _errno , msg )\n", "title": "", "metadata": ""}
{"_id": "09bf1792b0b72db9f9d379ba9a63f024", "text": "def is_array ( self , key ) : data = self . model . get_data ( ) return isinstance ( data [ key ] , ( ndarray , MaskedArray ) )\n", "title": "", "metadata": ""}
{"_id": "b393fc0644a03ec5dd0b6bbbad767159", "text": "def disable_insecure_request_warning ( ) : import requests from requests . packages . urllib3 . exceptions import InsecureRequestWarning requests . packages . urllib3 . disable_warnings ( InsecureRequestWarning )\n", "title": "", "metadata": ""}
{"_id": "4eb5e79757c3e7e8da7abeacc948e848", "text": "def mouse_move_event ( self , event ) : self . example . mouse_position_event ( event . x ( ) , event . y ( ) )\n", "title": "", "metadata": ""}
{"_id": "462766a759b9f48e408eac7a2b709ef2", "text": "def disassemble_file ( filename , outstream = None ) : filename = check_object_path ( filename ) ( version , timestamp , magic_int , co , is_pypy , source_size ) = load_module ( filename ) if type ( co ) == list : for con in co : disco ( version , con , outstream ) else : disco ( version , co , outstream , is_pypy = is_pypy ) co = None\n", "title": "", "metadata": ""}
{"_id": "eba4af9695801e54492097803c604d95", "text": "def imflip ( img , direction = 'horizontal' ) : assert direction in [ 'horizontal' , 'vertical' ] if direction == 'horizontal' : return np . flip ( img , axis = 1 ) else : return np . flip ( img , axis = 0 )\n", "title": "", "metadata": ""}
{"_id": "4959a839105e640f14848d3ab96aa727", "text": "def downsample_with_striding ( array , factor ) : return array [ tuple ( np . s_ [ : : f ] for f in factor ) ]\n", "title": "", "metadata": ""}
{"_id": "d109d9f344e949bd6670780e3a79a540", "text": "def listlike ( obj ) : return hasattr ( obj , \"__iter__\" ) and not issubclass ( type ( obj ) , str ) and not issubclass ( type ( obj ) , unicode )\n", "title": "", "metadata": ""}
{"_id": "def619500222b257c34b517f20f898b6", "text": "def is_scalar ( value ) : return np . isscalar ( value ) or ( isinstance ( value , np . ndarray ) and ( len ( np . squeeze ( value ) . shape ) == 0 ) )\n", "title": "", "metadata": ""}
{"_id": "4b11034895bd6ac8041eaf662b9acaa9", "text": "def _unique_id ( self , prefix ) : _id = self . _id_gen self . _id_gen += 1 return prefix + str ( _id )\n", "title": "", "metadata": ""}
{"_id": "17c065f7ff77f4b14f61ba4a6334baf5", "text": "def get_member ( thing_obj , member_string ) : mems = { x [ 0 ] : x [ 1 ] for x in inspect . getmembers ( thing_obj ) } if member_string in mems : return mems [ member_string ]\n", "title": "", "metadata": ""}
{"_id": "3c6f83387f9529fa3e6809ddeedd94c7", "text": "def sections ( self ) -> list : self . config . read ( self . filepath ) return self . config . sections ( )\n", "title": "", "metadata": ""}
{"_id": "bfe5ac593df329b7541b9f714bed3a00", "text": "def track_update ( self ) : metadata = self . info ( ) metadata . updated_at = dt . datetime . now ( ) self . commit ( )\n", "title": "", "metadata": ""}
{"_id": "d786adc8ecb24b1e281454d4d518235d", "text": "def Value ( self , name ) : if name in self . _enum_type . values_by_name : return self . _enum_type . values_by_name [ name ] . number raise ValueError ( 'Enum %s has no value defined for name %s' % ( self . _enum_type . name , name ) )\n", "title": "", "metadata": ""}
{"_id": "8bb5a9de23925fe4e91fcb0d21b20d69", "text": "def _get_loggers ( ) : from . . import loader modules = loader . get_package_modules ( 'logger' ) return list ( loader . get_plugins ( modules , [ _Logger ] ) )\n", "title": "", "metadata": ""}
{"_id": "0e1cc5616da3d108743fb096147e28e5", "text": "def read_credentials ( fname ) : with open ( fname , 'r' ) as f : username = f . readline ( ) . strip ( '\\n' ) password = f . readline ( ) . strip ( '\\n' ) return username , password\n", "title": "", "metadata": ""}
{"_id": "48db8909032b3b4d54fe34f52aec8a4c", "text": "def is_valid_regex ( string ) : try : re . compile ( string ) is_valid = True except re . error : is_valid = False return is_valid\n", "title": "", "metadata": ""}
{"_id": "def861107acffcffdeebc2abdec5561b", "text": "def mock_add_spec ( self , spec , spec_set = False ) : self . _mock_add_spec ( spec , spec_set ) self . _mock_set_magics ( )\n", "title": "", "metadata": ""}
{"_id": "bf85cbf4c53cc357fc0c45f3848d2833", "text": "def connect ( host , port , username , password ) : # Instantiate ftplib client session = ftplib . FTP ( ) # Connect to host without auth session . connect ( host , port ) # Authenticate connection session . login ( username , password ) return session\n", "title": "", "metadata": ""}
{"_id": "03f3beb4c99a210849598927119dab62", "text": "def ndarr2str ( arr , encoding = 'ascii' ) : # be fast, don't check - just assume 'arr' is a numpy array - the tostring # call will fail anyway if not retval = arr . tostring ( ) # would rather check \"if isinstance(retval, bytes)\", but support 2.5. # could rm the if PY3K check, but it makes this faster on 2.x. if PY3K and not isinstance ( retval , str ) : return retval . decode ( encoding ) else : # is str return retval\n", "title": "", "metadata": ""}
{"_id": "66112f2799a1eb5a4886f50002ad4cfe", "text": "def _attach_files ( filepaths , email_ ) : for filepath in filepaths : base = os . path . basename ( filepath ) with open ( filepath , \"rb\" ) as file : part = MIMEApplication ( file . read ( ) , Name = base ) part [ \"Content-Disposition\" ] = 'attachment; filename=\"%s\"' % base email_ . attach ( part )\n", "title": "", "metadata": ""}
{"_id": "bf9849d504a9b88f85dccaa9dccb430a", "text": "def from_rectangle ( box ) : x = box . left + box . width * random . uniform ( 0 , 1 ) y = box . bottom + box . height * random . uniform ( 0 , 1 ) return Vector ( x , y )\n", "title": "", "metadata": ""}
{"_id": "d84f9560c9d5dc9cb62dfca8101164f5", "text": "def check_git ( ) : try : with open ( os . devnull , \"wb\" ) as devnull : subprocess . check_call ( [ \"git\" , \"--version\" ] , stdout = devnull , stderr = devnull ) except : raise RuntimeError ( \"Please make sure git is installed and on your path.\" )\n", "title": "", "metadata": ""}
{"_id": "e03d3f609ed284070d76658856d683d6", "text": "def list_to_csv ( my_list , csv_file ) : if PY3 : csv_handler = open ( csv_file , 'w' , newline = '' ) else : csv_handler = open ( csv_file , 'wb' ) try : writer = csv . writer ( csv_handler , delimiter = ',' , quoting = csv . QUOTE_ALL ) writer . writerows ( my_list ) finally : csv_handler . close ( )\n", "title": "", "metadata": ""}
{"_id": "02268b7c415c8969c31e72449c65cbce", "text": "def getAllTriples ( self ) : return [ ( str ( s ) , str ( p ) , str ( o ) ) for s , p , o in self ]\n", "title": "", "metadata": ""}
{"_id": "0dbf29f33e8c61d56f24370c07410f60", "text": "def SampleSum ( dists , n ) : pmf = MakePmfFromList ( RandomSum ( dists ) for i in xrange ( n ) ) return pmf\n", "title": "", "metadata": ""}
{"_id": "0c1c3e6fb5d2ac83b990127dfa9bdf13", "text": "def has_value_name ( self , name ) : for val , _ in self . _values : if val == name : return True return False\n", "title": "", "metadata": ""}
{"_id": "49c0fc20f7ca71d6ef7116814fa987ee", "text": "def timeit ( output ) : b = time . time ( ) yield print output , 'time used: %.3fs' % ( time . time ( ) - b )\n", "title": "", "metadata": ""}
{"_id": "1bd2a9e89065731b28c89cf0ce9433dc", "text": "def inner ( tensor0 : BKTensor , tensor1 : BKTensor ) -> BKTensor : # Note: Relying on fact that vdot flattens arrays return np . vdot ( tensor0 , tensor1 )\n", "title": "", "metadata": ""}
{"_id": "c072a1e9807039714b49a6b70bc279bb", "text": "def _make_cmd_list ( cmd_list ) : cmd = '' for i in cmd_list : cmd = cmd + '\"' + i + '\",' cmd = cmd [ : - 1 ] return cmd\n", "title": "", "metadata": ""}
{"_id": "ae91298f623d2ffee6538b94d3eb177b", "text": "def log_magnitude_spectrum ( frames ) : return N . log ( N . abs ( N . fft . rfft ( frames ) ) . clip ( 1e-5 , N . inf ) )\n", "title": "", "metadata": ""}
{"_id": "858fe43461c6eb637633ff034625e5b9", "text": "def show ( self , title = '' ) : self . render ( title = title ) if self . fig : plt . show ( self . fig )\n", "title": "", "metadata": ""}
{"_id": "543173a897904cf5484096d028d77a1e", "text": "def ColumnToIndex ( col ) : ndx = 0 for c in col : ndx = ndx * 26 + ord ( c . upper ( ) ) - 64 return ndx\n", "title": "", "metadata": ""}
{"_id": "805462d8506ed0f44b8eb12bc1a73e39", "text": "def _cdf ( self , xloc , dist , base , cache ) : return evaluation . evaluate_forward ( dist , base ** xloc , cache = cache )\n", "title": "", "metadata": ""}
{"_id": "6034f2a109916e24c2ac398801ad1164", "text": "def index_nearest ( value , array ) : a = ( array - value ) ** 2 return index ( a . min ( ) , a )\n", "title": "", "metadata": ""}
{"_id": "3b61aafd7fe5be55988cf0b11bab9c73", "text": "def ensure_newline ( self ) : DECTCEM_SHOW = '\\033[?25h' # show cursor AT_END = DECTCEM_SHOW + '\\n' if not self . _cursor_at_newline : self . write ( AT_END ) self . _cursor_at_newline = True\n", "title": "", "metadata": ""}
{"_id": "9f890f097c96f06621231f1b7c00cebd", "text": "def cpp_prog_builder ( build_context , target ) : yprint ( build_context . conf , 'Build CppProg' , target ) workspace_dir = build_context . get_workspace ( 'CppProg' , target . name ) build_cpp ( build_context , target , target . compiler_config , workspace_dir )\n", "title": "", "metadata": ""}
{"_id": "3d2ad3cb7e5f41c7881154126c9a9747", "text": "def argmax ( iterable , key = None , both = False ) : if key is not None : it = imap ( key , iterable ) else : it = iter ( iterable ) score , argmax = reduce ( max , izip ( it , count ( ) ) ) if both : return argmax , score return argmax\n", "title": "", "metadata": ""}
{"_id": "e4b5450e4fb87b02efebe6bde6b6a723", "text": "def find_nearest_index ( arr , value ) : arr = np . array ( arr ) index = ( abs ( arr - value ) ) . argmin ( ) return index\n", "title": "", "metadata": ""}
{"_id": "2ae0bfdd0b80e8a6d997de46b5e4cc3c", "text": "def parse_comments_for_file ( filename ) : return [ parse_comment ( strip_stars ( comment ) , next_line ) for comment , next_line in get_doc_comments ( read_file ( filename ) ) ]\n", "title": "", "metadata": ""}
{"_id": "df930522197b0ad152e19ffa0e832df5", "text": "def get_file_extension_type ( filename ) : ext = get_file_extension ( filename ) if ext : for name , group in EXTENSIONS . items ( ) : if ext in group : return name return \"OTHER\"\n", "title": "", "metadata": ""}
{"_id": "457ebcf84c792396cd9013569aa80b02", "text": "def _delete_local ( self , filename ) : if os . path . exists ( filename ) : os . remove ( filename )\n", "title": "", "metadata": ""}
{"_id": "46cf3e5d72dcb81feaa60f4f23aa3b1e", "text": "def md5_string ( s ) : m = hashlib . md5 ( ) m . update ( s ) return str ( m . hexdigest ( ) )\n", "title": "", "metadata": ""}
{"_id": "627609a60125fb38a9021fb55c73b116", "text": "def copy ( a ) : shared = anonymousmemmap ( a . shape , dtype = a . dtype ) shared [ : ] = a [ : ] return shared\n", "title": "", "metadata": ""}
{"_id": "86d01afbde570743d123548dea6c9192", "text": "def lighting ( im , b , c ) : if b == 0 and c == 1 : return im mu = np . average ( im ) return np . clip ( ( im - mu ) * c + mu + b , 0. , 1. ) . astype ( np . float32 )\n", "title": "", "metadata": ""}
{"_id": "a7c750ce1fdc99f433ef429aa550b2bf", "text": "def _make_sentence ( txt ) : #Make sure first letter is capitalized txt = txt . strip ( ' ' ) txt = txt [ 0 ] . upper ( ) + txt [ 1 : ] + '.' return txt\n", "title": "", "metadata": ""}
{"_id": "ea294fbeda27854613c3c5634e8e3e6f", "text": "def legend_title_header_element ( feature , parent ) : _ = feature , parent # NOQA header = legend_title_header [ 'string_format' ] return header . capitalize ( )\n", "title": "", "metadata": ""}
{"_id": "bc692de1d9cda36733275d53496c1709", "text": "def _days_in_month ( date ) : if date . month == 12 : reference = type ( date ) ( date . year + 1 , 1 , 1 ) else : reference = type ( date ) ( date . year , date . month + 1 , 1 ) return ( reference - timedelta ( days = 1 ) ) . day\n", "title": "", "metadata": ""}
{"_id": "de065d1923690d1718448b41aa7a933e", "text": "def _intermediary_to_dot ( tables , relationships ) : t = '\\n' . join ( t . to_dot ( ) for t in tables ) r = '\\n' . join ( r . to_dot ( ) for r in relationships ) return '{}\\n{}\\n{}\\n}}' . format ( GRAPH_BEGINNING , t , r )\n", "title": "", "metadata": ""}
{"_id": "1caaea03e08e7c6fc3e70868d56c7e76", "text": "def has_virtualenv ( self ) : with self . settings ( warn_only = True ) : ret = self . run_or_local ( 'which virtualenv' ) . strip ( ) return bool ( ret )\n", "title": "", "metadata": ""}
{"_id": "c35454bb8661301051245aae33931ea5", "text": "def delete ( self , endpoint : str , * * kwargs ) -> dict : return self . _request ( 'DELETE' , endpoint , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "2dfd033e82070ad65b51168ef485993e", "text": "def replaceStrs ( s , * args ) : if args == ( ) : return s mapping = dict ( ( frm , to ) for frm , to in args ) return re . sub ( \"|\" . join ( map ( re . escape , mapping . keys ( ) ) ) , lambda match : mapping [ match . group ( 0 ) ] , s )\n", "title": "", "metadata": ""}
{"_id": "59e6a0b3116bcca3a2a70e69c4c99417", "text": "def stats ( self ) : printDebug ( \"Classes.....: %d\" % len ( self . all_classes ) ) printDebug ( \"Properties..: %d\" % len ( self . all_properties ) )\n", "title": "", "metadata": ""}
{"_id": "d7e1d7c8a32685570d4139bd2b011ffb", "text": "def stdoutwriteline ( * args ) : s = \"\" for i in args : s += str ( i ) + \" \" s = s . strip ( ) sys . stdout . write ( str ( s ) + \"\\n\" ) sys . stdout . flush ( ) return s\n", "title": "", "metadata": ""}
{"_id": "0f92dc98f872d2b224ea468cadf406c5", "text": "def parameter_vector ( self ) : return np . array ( [ getattr ( self , k ) for k in self . parameter_names ] )\n", "title": "", "metadata": ""}
{"_id": "f2bba8ce436c699a5f8aaee71fb52b63", "text": "def askopenfilename ( * * kwargs ) : try : from Tkinter import Tk import tkFileDialog as filedialog except ImportError : from tkinter import Tk , filedialog root = Tk ( ) root . withdraw ( ) root . update ( ) filenames = filedialog . askopenfilename ( * * kwargs ) root . destroy ( ) return filenames\n", "title": "", "metadata": ""}
{"_id": "d1d33a17ad7f5bbd42fd252e46441ce3", "text": "def _short_repr ( obj ) : stringified = pprint . saferepr ( obj ) if len ( stringified ) > 200 : return '%s... (%d bytes)' % ( stringified [ : 200 ] , len ( stringified ) ) return stringified\n", "title": "", "metadata": ""}
{"_id": "ef6ace5f89cfe6776564a4ece9310e71", "text": "def get_margin ( length ) : if length > 23 : margin_left = \"\\t\" chars = 1 elif length > 15 : margin_left = \"\\t\\t\" chars = 2 elif length > 7 : margin_left = \"\\t\\t\\t\" chars = 3 else : margin_left = \"\\t\\t\\t\\t\" chars = 4 return margin_left\n", "title": "", "metadata": ""}
{"_id": "65fddec5277718bd4131b3727901640f", "text": "def _my_hash ( arg_list ) : # type: (List[Any]) -> int res = 0 for arg in arg_list : res = res * 31 + hash ( arg ) return res\n", "title": "", "metadata": ""}
{"_id": "d1d6b2601aadedc295467c7d65b812f2", "text": "def file_or_stdin ( ) -> Callable : def parse ( path ) : if path is None or path == \"-\" : return sys . stdin else : return data_io . smart_open ( path ) return parse\n", "title": "", "metadata": ""}
{"_id": "f17a7836c17ca8cac55a9b973cb74217", "text": "def remove_falsy_values ( counter : Mapping [ Any , int ] ) -> Mapping [ Any , int ] : return { label : count for label , count in counter . items ( ) if count }\n", "title": "", "metadata": ""}
{"_id": "0127c24fdbeda904381b62fa2028d31a", "text": "def delete_all_eggs ( self ) : path_to_delete = os . path . join ( self . egg_directory , \"lib\" , \"python\" ) if os . path . exists ( path_to_delete ) : shutil . rmtree ( path_to_delete )\n", "title": "", "metadata": ""}
{"_id": "a2a3892d896599ed78b39ef81561ea80", "text": "def is_lazy_iterable ( obj ) : return isinstance ( obj , ( types . GeneratorType , collections . MappingView , six . moves . range , enumerate ) )\n", "title": "", "metadata": ""}
{"_id": "8481a1d8a8c55b292be8232ecbf88bf0", "text": "def hidden_cursor ( self ) : self . stream . write ( self . hide_cursor ) try : yield finally : self . stream . write ( self . normal_cursor )\n", "title": "", "metadata": ""}
{"_id": "8dd538577a94a2d26fc161be060c011a", "text": "def to_snake_case ( name ) : s1 = FIRST_CAP_REGEX . sub ( r'\\1_\\2' , name ) return ALL_CAP_REGEX . sub ( r'\\1_\\2' , s1 ) . lower ( )\n", "title": "", "metadata": ""}
{"_id": "6e8e5d1cfb406ecb2e75b802fabc8445", "text": "def get_creation_datetime ( filepath ) : if platform . system ( ) == 'Windows' : return datetime . fromtimestamp ( os . path . getctime ( filepath ) ) else : stat = os . stat ( filepath ) try : return datetime . fromtimestamp ( stat . st_birthtime ) except AttributeError : # We're probably on Linux. No easy way to get creation dates here, # so we'll settle for when its content was last modified. return None\n", "title": "", "metadata": ""}
{"_id": "52edfdbbcb8e58439ab8439ab74ac037", "text": "def get_free_memory_win ( ) : stat = MEMORYSTATUSEX ( ) ctypes . windll . kernel32 . GlobalMemoryStatusEx ( ctypes . byref ( stat ) ) return int ( stat . ullAvailPhys / 1024 / 1024 )\n", "title": "", "metadata": ""}
{"_id": "4d87d7a941ea33d3b204deccb701ba0a", "text": "def format_doc_text ( text ) : return '\\n' . join ( textwrap . fill ( line , width = 99 , initial_indent = '    ' , subsequent_indent = '    ' ) for line in inspect . cleandoc ( text ) . splitlines ( ) )\n", "title": "", "metadata": ""}
{"_id": "4b8648ffe085c1058876069648499828", "text": "def cleanup ( ) : if _output_dir and os . path . exists ( _output_dir ) : log . msg_warn ( \"Cleaning up output directory at '{output_dir}' ...\" . format ( output_dir = _output_dir ) ) if not _dry_run : shutil . rmtree ( _output_dir )\n", "title": "", "metadata": ""}
{"_id": "a5e2bf1e60097121d8435bf7a5583dc2", "text": "def empirical ( X ) : print ( \"Empirical\" ) cov = np . dot ( X . T , X ) / n_samples return cov , np . linalg . inv ( cov )\n", "title": "", "metadata": ""}
{"_id": "e1d0a1dbe960ad0e55abf06b3bdf9ea7", "text": "async def result_processor ( tasks ) : output = { } for task in tasks : num , res = await task output [ num ] = res return output\n", "title": "", "metadata": ""}
{"_id": "47c998913c482d8d44979b87842721f2", "text": "def getcolslice ( self , blc , trc , inc = [ ] , startrow = 0 , nrow = - 1 , rowincr = 1 ) : return self . _table . getcolslice ( self . _column , blc , trc , inc , startrow , nrow , rowincr )\n", "title": "", "metadata": ""}
{"_id": "26c4ca9ff90f3875bc60644985ca8821", "text": "def def_linear ( fun ) : defjvp_argnum ( fun , lambda argnum , g , ans , args , kwargs : fun ( * subval ( args , argnum , g ) , * * kwargs ) )\n", "title": "", "metadata": ""}
{"_id": "b70d555de44fa7d48788d7e6de5e9024", "text": "def getFunction ( self ) : return functionFactory ( self . code , self . name , self . defaults , self . globals , self . imports , )\n", "title": "", "metadata": ""}
{"_id": "3f5659cc2ca1135954a18d78ab26e533", "text": "def dictapply ( d , fn ) : for k , v in d . items ( ) : if isinstance ( v , dict ) : v = dictapply ( v , fn ) else : d [ k ] = fn ( v ) return d\n", "title": "", "metadata": ""}
{"_id": "fc3e7dcf6091c09ae6e16f5f793960c1", "text": "def restart_program ( ) : python = sys . executable os . execl ( python , python , * sys . argv )\n", "title": "", "metadata": ""}
{"_id": "6480e3ce635487f75585e7467e127728", "text": "async def connect ( self ) : await self . node . join_voice_channel ( self . channel . guild . id , self . channel . id )\n", "title": "", "metadata": ""}
{"_id": "0a92096df6d308ee8b68e8b57b4759ed", "text": "def is_gzipped_fastq ( file_name ) : _ , ext = os . path . splitext ( file_name ) return file_name . endswith ( \".fastq.gz\" ) or file_name . endswith ( \".fq.gz\" )\n", "title": "", "metadata": ""}
{"_id": "de58ef067ff31b3cb1ca4dfb25693339", "text": "def postprocessor ( prediction ) : prediction = prediction . data . numpy ( ) [ 0 ] top_predictions = prediction . argsort ( ) [ - 3 : ] [ : : - 1 ] return [ labels [ prediction ] for prediction in top_predictions ]\n", "title": "", "metadata": ""}
{"_id": "3df8514e0a5b7f978360083d0411da1d", "text": "def group ( data , num ) : return [ data [ i : i + num ] for i in range ( 0 , len ( data ) , num ) ]\n", "title": "", "metadata": ""}
{"_id": "e131e0eb1346046e808e6562ae401686", "text": "def lines ( input ) : for raw_line in input : line = raw_line . strip ( ) if line and not line . startswith ( '#' ) : yield strip_comments ( line )\n", "title": "", "metadata": ""}
{"_id": "39e5012f9ed8b5580ef550b1d9f49e43", "text": "def getScreenDims ( self ) : width = ale_lib . getScreenWidth ( self . obj ) height = ale_lib . getScreenHeight ( self . obj ) return ( width , height )\n", "title": "", "metadata": ""}
{"_id": "bc8c9c3bc0a846608742f99155cc77d1", "text": "def IPYTHON_MAIN ( ) : import pkg_resources runner_frame = inspect . getouterframes ( inspect . currentframe ( ) ) [ - 2 ] return ( getattr ( runner_frame , \"function\" , None ) == pkg_resources . load_entry_point ( \"ipython\" , \"console_scripts\" , \"ipython\" ) . __name__ )\n", "title": "", "metadata": ""}
{"_id": "5ec8bb97abf0588f5bb9a47d18ffccdd", "text": "def fetch_token ( self , * * kwargs ) : return super ( AsanaOAuth2Session , self ) . fetch_token ( self . token_url , client_secret = self . client_secret , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "f7d12d37a3fe38a478a6671129d15cb9", "text": "def mtf_unitransformer_all_layers_tiny ( ) : hparams = mtf_unitransformer_tiny ( ) hparams . moe_num_experts = 4 hparams . moe_expert_x = 4 hparams . moe_expert_y = 4 hparams . moe_hidden_size = 512 hparams . layers = [ \"self_att\" , \"local_self_att\" , \"moe_1d\" , \"moe_2d\" , \"drd\" ] return hparams\n", "title": "", "metadata": ""}
{"_id": "adaf9ee530ae285d8dee9ee705b38040", "text": "def _get_random_id ( ) : symbols = string . ascii_uppercase + string . ascii_lowercase + string . digits return '' . join ( random . choice ( symbols ) for _ in range ( 15 ) )\n", "title": "", "metadata": ""}
{"_id": "1afa539c89304e6f21e9708e729b1ef2", "text": "def filter_bool ( n : Node , query : str ) -> bool : return _scalariter2item ( n , query , bool )\n", "title": "", "metadata": ""}
{"_id": "5a0609675a4ac92006aa566c7ffd5abe", "text": "def internal_reset ( self ) : log . critical ( \"PIA internal_reset()\" ) self . empty_key_toggle = True self . current_input_char = None self . input_repead = 0\n", "title": "", "metadata": ""}
{"_id": "8b6fe3cbc4ced52f51df126a7c1d9adc", "text": "def start ( self , test_connection = True ) : if self . _context is None : self . _logger . debug ( 'Starting Client' ) self . _context = zmq . Context ( ) self . _poll = zmq . Poller ( ) self . _start_socket ( ) if test_connection : self . test_ping ( )\n", "title": "", "metadata": ""}
{"_id": "63ba581874467d8beeaa7880176f1d99", "text": "def list_get ( l , idx , default = None ) : try : if l [ idx ] : return l [ idx ] else : return default except IndexError : return default\n", "title": "", "metadata": ""}
{"_id": "37b15603ea5898486d96be0e80e9d33b", "text": "def match ( string , patterns ) : if patterns is None : return True else : return any ( re . match ( pattern , string ) for pattern in patterns )\n", "title": "", "metadata": ""}
{"_id": "bb3aa6d87cc1872bd71cdcc32cd85c47", "text": "def tail ( self , n = 10 ) : with cython_context ( ) : return SArray ( _proxy = self . __proxy__ . tail ( n ) )\n", "title": "", "metadata": ""}
{"_id": "83a42ce32113d5d1a191935f35348e29", "text": "def _async_requests ( urls ) : session = FuturesSession ( max_workers = 30 ) futures = [ session . get ( url ) for url in urls ] return [ future . result ( ) for future in futures ]\n", "title": "", "metadata": ""}
{"_id": "01d20a4236b4bea81f0d74b21e0d1774", "text": "def last_day ( year = _year , month = _month ) : last_day = calendar . monthrange ( year , month ) [ 1 ] return datetime . date ( year = year , month = month , day = last_day )\n", "title": "", "metadata": ""}
{"_id": "defa9d4d64a97fede1ac2daa88ebb344", "text": "def suppress_stdout ( ) : save_stdout = sys . stdout sys . stdout = DevNull ( ) yield sys . stdout = save_stdout\n", "title": "", "metadata": ""}
{"_id": "0649aead5583f612cd654a74ab06e391", "text": "def remove_bad ( string ) : remove = [ ':' , ',' , '(' , ')' , ' ' , '|' , ';' , '\\'' ] for c in remove : string = string . replace ( c , '_' ) return string\n", "title": "", "metadata": ""}
{"_id": "ce9b6418a6952d6387302ec12711cf9f", "text": "def dict_merge ( set1 , set2 ) : return dict ( list ( set1 . items ( ) ) + list ( set2 . items ( ) ) )\n", "title": "", "metadata": ""}
{"_id": "bdf7d242e64163cdf6d09ef6e0a7de3f", "text": "def bytes_to_c_array ( data ) : chars = [ \"'{}'\" . format ( encode_escape ( i ) ) for i in decode_escape ( data ) ] return ', ' . join ( chars ) + ', 0'\n", "title": "", "metadata": ""}
{"_id": "8560f21458df856fe453306dcf8e6c1c", "text": "def copy_image_on_background ( image , color = WHITE ) : background = Image . new ( \"RGB\" , image . size , color ) background . paste ( image , mask = image . split ( ) [ 3 ] ) return background\n", "title": "", "metadata": ""}
{"_id": "f10aac69f049a132d041e2a8809a7c68", "text": "def peekiter ( iterable ) : it = iter ( iterable ) one = next ( it ) def gen ( ) : \"\"\"Generator that returns first and proxy other items from source\"\"\" yield one while True : yield next ( it ) return ( one , gen ( ) )\n", "title": "", "metadata": ""}
{"_id": "b667f0b279e8a163531b477556b9803f", "text": "def _shutdown_transport ( self ) : if self . sock is not None : try : unwrap = self . sock . unwrap except AttributeError : return try : self . sock = unwrap ( ) except ValueError : # Failure within SSL might mean unwrap exists but socket is not # deemed wrapped pass\n", "title": "", "metadata": ""}
{"_id": "0cf93f307c3721e6201679e402c13afe", "text": "async def fetchall ( self ) -> Iterable [ sqlite3 . Row ] : return await self . _execute ( self . _cursor . fetchall )\n", "title": "", "metadata": ""}
{"_id": "79c6dab32af2171d2cd9e2a496b10e64", "text": "def is_non_empty_string ( input_string ) : try : if not input_string . strip ( ) : raise ValueError ( ) except AttributeError as error : raise TypeError ( error ) return True\n", "title": "", "metadata": ""}
{"_id": "14fd6c748c6525045b30f0c99e5eed29", "text": "def num_leaves ( tree ) : if tree . is_leaf : return 1 else : return num_leaves ( tree . left_child ) + num_leaves ( tree . right_child )\n", "title": "", "metadata": ""}
{"_id": "b8eb8b302b90c71e9cd7123b890fa15e", "text": "def replace_list ( items , match , replacement ) : return [ replace ( item , match , replacement ) for item in items ]\n", "title": "", "metadata": ""}
{"_id": "4149ba1b21663b44b77048a11fea918f", "text": "def val_to_bin ( edges , x ) : ibin = np . digitize ( np . array ( x , ndmin = 1 ) , edges ) - 1 return ibin\n", "title": "", "metadata": ""}
{"_id": "491df5d22ecbee06129f1f80187a3da1", "text": "def _not_none ( items ) : if not isinstance ( items , ( tuple , list ) ) : items = ( items , ) return all ( item is not _none for item in items )\n", "title": "", "metadata": ""}
{"_id": "cf6d1059c2e9ce7a9b99edd600597f87", "text": "def query_sum ( queryset , field ) : return queryset . aggregate ( s = models . functions . Coalesce ( models . Sum ( field ) , 0 ) ) [ 's' ]\n", "title": "", "metadata": ""}
{"_id": "3b49225ef490152669247b6fee28b5f4", "text": "def get_querystring ( uri ) : parts = urlparse . urlsplit ( uri ) return urlparse . parse_qs ( parts . query )\n", "title": "", "metadata": ""}
{"_id": "030eea5d9c130f36813db331883ee624", "text": "def combine ( self , a , b ) : for l in ( a , b ) : for x in l : yield x\n", "title": "", "metadata": ""}
{"_id": "d82fac0c919c2160e7af46343025a243", "text": "def normalize_time ( timestamp ) : offset = timestamp . utcoffset ( ) if offset is None : return timestamp return timestamp . replace ( tzinfo = None ) - offset\n", "title": "", "metadata": ""}
{"_id": "c3648c73517a3b73b66615721653d3b3", "text": "def from_iso_time ( timestring , use_dateutil = True ) : if not _iso8601_time_re . match ( timestring ) : raise ValueError ( 'Not a valid ISO8601-formatted time string' ) if dateutil_available and use_dateutil : return parser . parse ( timestring ) . time ( ) else : if len ( timestring ) > 8 : # has microseconds fmt = '%H:%M:%S.%f' else : fmt = '%H:%M:%S' return datetime . datetime . strptime ( timestring , fmt ) . time ( )\n", "title": "", "metadata": ""}
{"_id": "cad92fd2b754daa0563a56abf114a6b7", "text": "def bash ( filename ) : sys . stdout . flush ( ) subprocess . call ( \"bash {}\" . format ( filename ) , shell = True )\n", "title": "", "metadata": ""}
{"_id": "18ad357d6611181fa00eb9a23ffd6336", "text": "def is_sqlatype_string ( coltype : Union [ TypeEngine , VisitableType ] ) -> bool : coltype = _coltype_to_typeengine ( coltype ) return isinstance ( coltype , sqltypes . String )\n", "title": "", "metadata": ""}
{"_id": "33b2a5914634287fd272f103c78b5ccf", "text": "def v_normalize ( v ) : vmag = v_magnitude ( v ) return [ v [ i ] / vmag for i in range ( len ( v ) ) ]\n", "title": "", "metadata": ""}
{"_id": "4c97f6a869fb5e65643ff2fc41bc1aa0", "text": "def proper_round ( n ) : return int ( n ) + ( n / abs ( n ) ) * int ( abs ( n - int ( n ) ) >= 0.5 ) if n != 0 else 0\n", "title": "", "metadata": ""}
{"_id": "68011cace8547a9fbda9efb0d1aa7533", "text": "def _create_empty_array ( self , frames , always_2d , dtype ) : import numpy as np if always_2d or self . channels > 1 : shape = frames , self . channels else : shape = frames , return np . empty ( shape , dtype , order = 'C' )\n", "title": "", "metadata": ""}
{"_id": "69c66fc6d8e842e0db3bbd3a9aedacc3", "text": "def use_theme ( theme ) : global current current = theme import scene if scene . current is not None : scene . current . stylize ( )\n", "title": "", "metadata": ""}
{"_id": "bb072c962e3ca430fea3c303b0b23c99", "text": "def timediff ( time ) : now = datetime . datetime . utcnow ( ) diff = now - time diff_sec = diff . total_seconds ( ) return diff_sec\n", "title": "", "metadata": ""}
{"_id": "4267f0728324cee7fc14b4536bd174b8", "text": "def find_centroid ( region ) : x , y = center_of_mass ( region ) w = np . argwhere ( region ) i , j = w [ np . argmin ( np . linalg . norm ( w - ( x , y ) , axis = 1 ) ) ] return i , j\n", "title": "", "metadata": ""}
{"_id": "571f77f62a9e7ffc68e41e95867dd60d", "text": "def makedirs ( directory ) : parent = os . path . dirname ( os . path . abspath ( directory ) ) if not os . path . exists ( parent ) : makedirs ( parent ) os . mkdir ( directory )\n", "title": "", "metadata": ""}
{"_id": "9ec26af60902ef32bce652de8e4ac923", "text": "def pack_triples_numpy ( triples ) : if len ( triples ) == 0 : return np . array ( [ ] , dtype = np . int64 ) return np . stack ( list ( map ( _transform_triple_numpy , triples ) ) , axis = 0 )\n", "title": "", "metadata": ""}
{"_id": "38544767b863ba0d4f8b4a47d626555e", "text": "def object_type_repr ( obj ) : if obj is None : return 'None' elif obj is Ellipsis : return 'Ellipsis' if obj . __class__ . __module__ == '__builtin__' : name = obj . __class__ . __name__ else : name = obj . __class__ . __module__ + '.' + obj . __class__ . __name__ return '%s object' % name\n", "title": "", "metadata": ""}
{"_id": "3e6e2a060ff3eb9ace58281a42cfb2c8", "text": "def decode_unicode_string ( string ) : if string . startswith ( '[BASE64-DATA]' ) and string . endswith ( '[/BASE64-DATA]' ) : return base64 . b64decode ( string [ len ( '[BASE64-DATA]' ) : - len ( '[/BASE64-DATA]' ) ] ) return string\n", "title": "", "metadata": ""}
{"_id": "75cbc7070411c9f5f1847b2c89bc5dd7", "text": "def fast_median ( a ) : a = checkma ( a ) #return scoreatpercentile(a.compressed(), 50) if a . count ( ) > 0 : out = np . percentile ( a . compressed ( ) , 50 ) else : out = np . ma . masked return out\n", "title": "", "metadata": ""}
{"_id": "6e43cc9c2989eec8c7ce2431c220688b", "text": "def stepBy ( self , steps ) : self . setValue ( self . value ( ) + steps * self . singleStep ( ) )\n", "title": "", "metadata": ""}
{"_id": "82b9395e08192ba1808a198922fe3fd9", "text": "def lambda_from_file ( python_file ) : lambda_function = [ ] with open ( python_file , 'r' ) as f : lambda_function . extend ( f . read ( ) . splitlines ( ) ) return awslambda . Code ( ZipFile = ( Join ( '\\n' , lambda_function ) ) )\n", "title": "", "metadata": ""}
{"_id": "1b8d44c730514b0cb655cf08f2527f60", "text": "def _clear ( self ) : self . _finished = False self . _measurement = None self . _message = None self . _message_body = None\n", "title": "", "metadata": ""}
{"_id": "00f533a6cf708fbf5ebbac550082014d", "text": "def _checkSize ( self ) : if self . _item_height is not None : sz = min ( self . _max_height_items , self . count ( ) ) * self . _item_height + 5 sz = max ( sz , 20 ) self . setMinimumSize ( 0 , sz ) self . setMaximumSize ( 1000000 , sz ) self . resize ( self . width ( ) , sz )\n", "title": "", "metadata": ""}
{"_id": "afc7f9208fd41721a99e4dae8737501c", "text": "def _records_commit ( record_ids ) : for record_id in record_ids : record = Record . get_record ( record_id ) record . commit ( )\n", "title": "", "metadata": ""}
{"_id": "e7cf6bc0a385b6b1de8023edb2d8f1ed", "text": "def get_func_name ( func ) : func_name = getattr ( func , '__name__' , func . __class__ . __name__ ) module_name = func . __module__ if module_name is not None : module_name = func . __module__ return '{}.{}' . format ( module_name , func_name ) return func_name\n", "title": "", "metadata": ""}
{"_id": "aa35229d7ecc75bff36ee1520660ea87", "text": "def is_clicked ( self , MouseStateType ) : return self . previous_mouse_state . query_state ( MouseStateType ) and ( not self . current_mouse_state . query_state ( MouseStateType ) )\n", "title": "", "metadata": ""}
{"_id": "cff13fe9952c1cac54fdf8a1c16ae575", "text": "def load_data ( filename ) : data = pandas . read_csv ( filename , header = None , delimiter = '\\t' , skiprows = 9 ) return data . as_matrix ( )\n", "title": "", "metadata": ""}
{"_id": "4ecae8070b4d8befd1b2a20ce07ad0c6", "text": "def memory_usage ( ) : try : import psutil import os except ImportError : return _memory_usage_ps ( ) process = psutil . Process ( os . getpid ( ) ) mem = process . memory_info ( ) [ 0 ] / float ( 2 ** 20 ) return mem\n", "title": "", "metadata": ""}
{"_id": "cf686fb085e161fb00c353ca8d32759f", "text": "def install_plugin ( username , repo ) : print ( \"Installing plugin from \" + username + \"/\" + repo ) pip . main ( [ 'install' , '-U' , \"git+git://github.com/\" + username + \"/\" + repo + \".git\" ] )\n", "title": "", "metadata": ""}
{"_id": "e642ca82da47874e3521a36298a03f14", "text": "def center_text ( text , width = 80 ) : centered = [ ] for line in text . splitlines ( ) : centered . append ( line . center ( width ) ) return \"\\n\" . join ( centered )\n", "title": "", "metadata": ""}
{"_id": "14eb08d01190b60a197a3f91261b1133", "text": "def aug_sysargv ( cmdstr ) : import shlex argv = shlex . split ( cmdstr ) sys . argv . extend ( argv )\n", "title": "", "metadata": ""}
{"_id": "b9b58a8a194dbe5605d56ba62f7dc50d", "text": "def generate_nonce ( ) : nonce = '' . join ( [ str ( randint ( 0 , 9 ) ) for i in range ( 8 ) ] ) return HMAC ( nonce . encode ( ) , \"secret\" . encode ( ) , sha1 ) . hexdigest ( )\n", "title": "", "metadata": ""}
{"_id": "ef9dc207d14740c1b2befe7f117970c0", "text": "def b2u ( string ) : if ( isinstance ( string , bytes ) or ( PY2 and isinstance ( string , str ) ) ) : return string . decode ( 'utf-8' ) return string\n", "title": "", "metadata": ""}
{"_id": "1bf805993bf48133d50bd2760f79fb5f", "text": "def get_tail ( self ) : node = self . head last_node = self . head while node is not None : last_node = node node = node . next_node return last_node\n", "title": "", "metadata": ""}
{"_id": "dae102ef11010b658c26cbcb0a9a8118", "text": "def get_parent_folder_name ( file_path ) : return os . path . split ( os . path . split ( os . path . abspath ( file_path ) ) [ 0 ] ) [ - 1 ]\n", "title": "", "metadata": ""}
{"_id": "504b9545260b80e582abe330fd477d0c", "text": "def count_rows_with_nans ( X ) : if X . ndim == 2 : return np . where ( np . isnan ( X ) . sum ( axis = 1 ) != 0 , 1 , 0 ) . sum ( )\n", "title": "", "metadata": ""}
{"_id": "87d488c7da593bb1821b5b28766b2ea5", "text": "def ave_list_v3 ( vec_list ) : vec = Vec3 ( 0 , 0 , 0 ) for v in vec_list : vec += v num_vecs = float ( len ( vec_list ) ) vec = Vec3 ( vec . x / num_vecs , vec . y / num_vecs , vec . z / num_vecs ) return vec\n", "title": "", "metadata": ""}
{"_id": "1020a37981c2e4bde77c617d77010aea", "text": "def SwitchToThisWindow ( handle : int ) -> None : ctypes . windll . user32 . SwitchToThisWindow ( ctypes . c_void_p ( handle ) , 1 )\n", "title": "", "metadata": ""}
{"_id": "b8c6d53306671d9fcec25c2329c14c08", "text": "def pdf ( x , mu , std ) : return ( 1.0 / ( std * sqrt ( 2 * pi ) ) ) * np . exp ( - ( x - mu ) ** 2 / ( 2 * std ** 2 ) )\n", "title": "", "metadata": ""}
{"_id": "b8dc66d0a66d743d5a849980607633ca", "text": "def get_order ( self ) : return [ dict ( reverse = r [ 0 ] , key = r [ 1 ] ) for r in self . get_model ( ) ]\n", "title": "", "metadata": ""}
{"_id": "fd64ab31cf44ccb69b23c9351711cbae", "text": "def is_password_valid ( password ) : pattern = re . compile ( r\"^.{4,75}$\" ) return bool ( pattern . match ( password ) )\n", "title": "", "metadata": ""}
{"_id": "369d5134085f1ef41bb803ffcca9fa32", "text": "def linear_variogram_model ( m , d ) : slope = float ( m [ 0 ] ) nugget = float ( m [ 1 ] ) return slope * d + nugget\n", "title": "", "metadata": ""}
{"_id": "ac5808273d196ad766b17f273311b6c4", "text": "def get_next_weekday ( self , including_today = False ) : weekday = self . date_time . weekday ( ) return Weekday . get_next ( weekday , including_today = including_today )\n", "title": "", "metadata": ""}
{"_id": "582f43cd2593067f7ba8b1fd32b562f2", "text": "def Any ( a , axis , keep_dims ) : return np . any ( a , axis = axis if not isinstance ( axis , np . ndarray ) else tuple ( axis ) , keepdims = keep_dims ) ,\n", "title": "", "metadata": ""}
{"_id": "0a6adb5efec4a53ccc971904337f6652", "text": "def _update_index_on_df ( df , index_names ) : if index_names : df = df . set_index ( index_names ) # Remove names from unnamed indexes index_names = _denormalize_index_names ( index_names ) df . index . names = index_names return df\n", "title": "", "metadata": ""}
{"_id": "cc662a57641f60daca503a7e0835d481", "text": "def convert_date ( date ) : date = convert_month ( date , shorten = False ) clean_string = convert_string ( date ) return datetime . strptime ( clean_string , DATE_FMT . replace ( '-' , '' ) )\n", "title": "", "metadata": ""}
{"_id": "24975e98964db3beb3805fd16b87cefb", "text": "def count_rows ( self , table_name ) : self . table_must_exist ( table_name ) query = \"SELECT COUNT (*) FROM `%s`\" % table_name . lower ( ) self . own_cursor . execute ( query ) return int ( self . own_cursor . fetchone ( ) [ 0 ] )\n", "title": "", "metadata": ""}
{"_id": "d7fe5186c6b40b639825cb8e8ab8ab7c", "text": "def _assert_is_type ( name , value , value_type ) : if not isinstance ( value , value_type ) : if type ( value_type ) is tuple : types = ', ' . join ( t . __name__ for t in value_type ) raise ValueError ( '{0} must be one of ({1})' . format ( name , types ) ) else : raise ValueError ( '{0} must be {1}' . format ( name , value_type . __name__ ) )\n", "title": "", "metadata": ""}
{"_id": "c5264d0e7d4294caf3657fb0a560498e", "text": "def isdir ( s ) : try : st = os . stat ( s ) except os . error : return False return stat . S_ISDIR ( st . st_mode )\n", "title": "", "metadata": ""}
{"_id": "37c43797207b6f7aefd7eca570e53cc8", "text": "def from_json ( cls , s ) : d = json . loads ( s ) return get_dict_handler ( d [ \"type\" ] ) ( d )\n", "title": "", "metadata": ""}
{"_id": "ba3905bdb580615722b8fdb0e0865ac6", "text": "def camelcase_underscore ( name ) : s1 = re . sub ( '(.)([A-Z][a-z]+)' , r'\\1_\\2' , name ) return re . sub ( '([a-z0-9])([A-Z])' , r'\\1_\\2' , s1 ) . lower ( )\n", "title": "", "metadata": ""}
{"_id": "119ab6aaad5ff8991d4ec453a8a20659", "text": "def _iterate_flattened_values ( value ) : if isinstance ( value , six . string_types ) : yield value return if isinstance ( value , collections . Mapping ) : value = collections . ValuesView ( value ) if isinstance ( value , collections . Iterable ) : for nested_value in value : for nested_nested_value in _iterate_flattened_values ( nested_value ) : yield nested_nested_value yield value\n", "title": "", "metadata": ""}
{"_id": "47e1b02e888c8c799a4498a88ace9563", "text": "def date ( start , end ) : stime = date_to_timestamp ( start ) etime = date_to_timestamp ( end ) ptime = stime + random . random ( ) * ( etime - stime ) return datetime . date . fromtimestamp ( ptime )\n", "title": "", "metadata": ""}
{"_id": "09f24f88fd2332294f39b00f5a57b8f3", "text": "def add_ul ( text , ul ) : text += \"\\n\" for li in ul : text += \"- \" + li + \"\\n\" text += \"\\n\" return text\n", "title": "", "metadata": ""}
{"_id": "ced06fa00c99ba5c455a84b0f1bf28cd", "text": "def clean ( self ) : return Text ( self . __text_cleaner . clean ( self [ TEXT ] ) , * * self . __kwargs )\n", "title": "", "metadata": ""}
{"_id": "9fba71eced3aabe8cdc62b710509b9b3", "text": "def assert_called ( _mock_self ) : self = _mock_self if self . call_count == 0 : msg = ( \"Expected '%s' to have been called.\" % self . _mock_name or 'mock' ) raise AssertionError ( msg )\n", "title": "", "metadata": ""}
{"_id": "a07ce6f37c7b1ec95a38449f5bf0a029", "text": "def on_error ( e ) : # pragma: no cover exname = { 'RuntimeError' : 'Runtime error' , 'Value Error' : 'Value error' } sys . stderr . write ( '{}: {}\\n' . format ( exname [ e . __class__ . __name__ ] , str ( e ) ) ) sys . stderr . write ( 'See file slam_error.log for additional details.\\n' ) sys . exit ( 1 )\n", "title": "", "metadata": ""}
{"_id": "568c554d970bef7d6a141a5269f975ae", "text": "def make_lambda ( call ) : empty_args = ast . arguments ( args = [ ] , vararg = None , kwarg = None , defaults = [ ] ) return ast . Lambda ( args = empty_args , body = call )\n", "title": "", "metadata": ""}
{"_id": "b9fb7c34770ca867bd59e3c495688fe4", "text": "def get_table_names_from_metadata ( metadata : MetaData ) -> List [ str ] : return [ table . name for table in metadata . tables . values ( ) ]\n", "title": "", "metadata": ""}
{"_id": "49e294a262ab094cc9902426cff9fd10", "text": "def stop_at ( iterable , idx ) : for i , item in enumerate ( iterable ) : if i == idx : return yield item\n", "title": "", "metadata": ""}
{"_id": "6b1135c4ad830345847e9a64d204ca64", "text": "def _has_fileno ( stream ) : try : stream . fileno ( ) except ( AttributeError , OSError , IOError , io . UnsupportedOperation ) : return False return True\n", "title": "", "metadata": ""}
{"_id": "291cae55ec05f63c5acaaa74823c6c2d", "text": "def __call__ ( self , func , * args , * * kwargs ) : return self . run ( func , * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "3ca61a32166ad346ac6f122e3b8db957", "text": "def element_to_string ( element , include_declaration = True , encoding = DEFAULT_ENCODING , method = 'xml' ) : if isinstance ( element , ElementTree ) : element = element . getroot ( ) elif not isinstance ( element , ElementType ) : element = get_element ( element ) if element is None : return u'' element_as_string = tostring ( element , encoding , method ) . decode ( encoding = encoding ) if include_declaration : return element_as_string else : return strip_xml_declaration ( element_as_string )\n", "title": "", "metadata": ""}
{"_id": "0fe4f2356b7c7a9eccdb977c84c4cc33", "text": "def _platform_is_windows ( platform = sys . platform ) : matched = platform in ( 'cygwin' , 'win32' , 'win64' ) if matched : error_msg = \"Windows isn't supported yet\" raise OSError ( error_msg ) return matched\n", "title": "", "metadata": ""}
{"_id": "755f83dee8e475ec7294fe104af5a771", "text": "def _basic_field_data ( field , obj ) : value = field . value_from_object ( obj ) return { Field . TYPE : FieldType . VAL , Field . VALUE : value }\n", "title": "", "metadata": ""}
{"_id": "2e1f03b5c74da64ca528a51085f93945", "text": "def isoformat ( dt ) : if not isinstance ( dt , datetime . datetime ) : raise TypeError ( \"Must provide datetime.datetime object to isoformat\" ) if dt . tzinfo is None : raise ValueError ( \"naive datetime objects are not allowed beyond the library boundaries\" ) return dt . isoformat ( ) . replace ( \"+00:00\" , \"Z\" )\n", "title": "", "metadata": ""}
{"_id": "29107ff545c2546baa7ab8ca7977ff05", "text": "def join ( mapping , bind , values ) : return [ ' ' . join ( [ six . text_type ( v ) for v in values if v is not None ] ) ]\n", "title": "", "metadata": ""}
{"_id": "02fe6d2d980c86b110fb583951eabad2", "text": "def construct_from_string ( cls , string ) : if string == cls . name : return cls ( ) raise TypeError ( \"Cannot construct a '{}' from \" \"'{}'\" . format ( cls , string ) )\n", "title": "", "metadata": ""}
{"_id": "9a92a05d0e30ad027cfeb0d164d6ba38", "text": "def prettyprint ( d ) : print ( json . dumps ( d , sort_keys = True , indent = 4 , separators = ( \",\" , \": \" ) ) )\n", "title": "", "metadata": ""}
{"_id": "568c7681261cc736609762cd3075c8a1", "text": "def send_file ( self , local_path , remote_path , user = 'root' , unix_mode = None ) : self . enable_user ( user ) return self . ssh_pool . send_file ( user , local_path , remote_path , unix_mode = unix_mode )\n", "title": "", "metadata": ""}
{"_id": "f93c61a7cd54844e188769b76dee5ffe", "text": "def convolve_fft ( array , kernel ) : array = np . asarray ( array , dtype = np . complex ) kernel = np . asarray ( kernel , dtype = np . complex ) if array . ndim != kernel . ndim : raise ValueError ( \"Image and kernel must have same number of \" \"dimensions\" ) array_shape = array . shape kernel_shape = kernel . shape new_shape = np . array ( array_shape ) + np . array ( kernel_shape ) array_slices = [ ] kernel_slices = [ ] for ( new_dimsize , array_dimsize , kernel_dimsize ) in zip ( new_shape , array_shape , kernel_shape ) : center = new_dimsize - ( new_dimsize + 1 ) // 2 array_slices += [ slice ( center - array_dimsize // 2 , center + ( array_dimsize + 1 ) // 2 ) ] kernel_slices += [ slice ( center - kernel_dimsize // 2 , center + ( kernel_dimsize + 1 ) // 2 ) ] array_slices = tuple ( array_slices ) kernel_slices = tuple ( kernel_slices ) if not np . all ( new_shape == array_shape ) : big_array = np . zeros ( new_shape , dtype = np . complex ) big_array [ array_slices ] = array else : big_array = array if not np . all ( new_shape == kernel_shape ) : big_kernel = np . zeros ( new_shape , dtype = np . complex ) big_kernel [ kernel_slices ] = kernel else : big_kernel = kernel array_fft = np . fft . fftn ( big_array ) kernel_fft = np . fft . fftn ( np . fft . ifftshift ( big_kernel ) ) rifft = np . fft . ifftn ( array_fft * kernel_fft ) return rifft [ array_slices ] . real\n", "title": "", "metadata": ""}
{"_id": "05e8294e6e4b612d65168bf25b57317c", "text": "def MultiArgMax ( x ) : m = x . max ( ) return ( i for i , v in enumerate ( x ) if v == m )\n", "title": "", "metadata": ""}
{"_id": "4d2283defd18d4a142ffc1c820e3be06", "text": "def bitsToString ( arr ) : s = array ( 'c' , '.' * len ( arr ) ) for i in xrange ( len ( arr ) ) : if arr [ i ] == 1 : s [ i ] = '*' return s\n", "title": "", "metadata": ""}
{"_id": "4f47200dc3592077ce66dc262d355667", "text": "def sort_data ( data , cols ) : return data . sort_values ( cols ) [ cols + [ 'value' ] ] . reset_index ( drop = True )\n", "title": "", "metadata": ""}
{"_id": "c7e4a32c611bb6ece817d62a75f935da", "text": "def set_time ( filename , mod_time ) : log . debug ( 'Setting modified time to %s' , mod_time ) mtime = calendar . timegm ( mod_time . utctimetuple ( ) ) # utctimetuple discards microseconds, so restore it (for consistency)  mtime += mod_time . microsecond / 1000000 atime = os . stat ( filename ) . st_atime os . utime ( filename , ( atime , mtime ) )\n", "title": "", "metadata": ""}
{"_id": "504228527d98eac9c705fd5a44cda926", "text": "def process_docstring ( app , what , name , obj , options , lines ) : # pylint: disable=unused-argument # pylint: disable=too-many-arguments lines . extend ( _format_contracts ( what = what , obj = obj ) )\n", "title": "", "metadata": ""}
{"_id": "10d6c717403a2012306611a92227d6f9", "text": "def Print ( self , output_writer ) : if self . _filters : output_writer . Write ( 'Filters:\\n' ) for file_entry_filter in self . _filters : file_entry_filter . Print ( output_writer )\n", "title": "", "metadata": ""}
{"_id": "9cebc74c09f9821284f68295103afc9b", "text": "def logout ( self ) : self . client . write ( 'exit\\r\\n' ) self . client . read_all ( ) self . client . close ( )\n", "title": "", "metadata": ""}
{"_id": "50eace5c411d7ab2d91f742cee979b90", "text": "def compare ( a , b ) : s = 0 for i in range ( len ( a ) ) : s = s + abs ( a [ i ] - b [ i ] ) return s\n", "title": "", "metadata": ""}
{"_id": "89e28d2d564c4cc733aff6ff7a548b34", "text": "def add_noise ( Y , sigma ) : return Y + np . random . normal ( 0 , sigma , Y . shape )\n", "title": "", "metadata": ""}
{"_id": "619ae37bccb384c9a893ff3b7f519b55", "text": "def version_triple ( tag ) : groups = re . match ( r'v?(\\d+)\\.(\\d+)\\.(\\d+)' , tag ) . groups ( ) return tuple ( int ( n ) for n in groups )\n", "title": "", "metadata": ""}
{"_id": "f177b4ddf6e51ad3d68cd58622f6455a", "text": "async def terminate ( self ) : self . proc . terminate ( ) await asyncio . wait_for ( self . proc . wait ( ) , self . kill_delay ) if self . proc . returncode is None : self . proc . kill ( ) await self . proc . wait ( ) await super ( ) . terminate ( )\n", "title": "", "metadata": ""}
{"_id": "2fd7d85fb52f7e6556c0b196d7aca2af", "text": "def get_last_row ( dbconn , tablename , n = 1 , uuid = None ) : return fetch ( dbconn , tablename , n , uuid , end = True )\n", "title": "", "metadata": ""}
{"_id": "725d82204709ec53c921fcea68bf80a0", "text": "def json_dumps ( self , obj ) : return json . dumps ( obj , sort_keys = True , indent = 4 , separators = ( ',' , ': ' ) )\n", "title": "", "metadata": ""}
{"_id": "8f3d6bedf7da69fcb8be51ea0ecc5cb5", "text": "def close ( self , wait = False ) : self . session . close ( ) self . pool . shutdown ( wait = wait )\n", "title": "", "metadata": ""}
{"_id": "e03e912460411f323e20e5e82e6e5261", "text": "def uconcatenate ( arrs , axis = 0 ) : v = np . concatenate ( arrs , axis = axis ) v = _validate_numpy_wrapper_units ( v , arrs ) return v\n", "title": "", "metadata": ""}
{"_id": "c4284aa0e545ea3be700b5507b43ad82", "text": "def _sum_cycles_from_tokens ( self , tokens : List [ str ] ) -> int : return sum ( ( int ( self . _nonnumber_pattern . sub ( '' , t ) ) for t in tokens ) )\n", "title": "", "metadata": ""}
{"_id": "f1b6e7d8b3ed96ac4396f540c9149f2b", "text": "def _unjsonify ( x , isattributes = False ) : if isattributes : obj = json . loads ( x ) return dict_class ( obj ) return json . loads ( x )\n", "title": "", "metadata": ""}
{"_id": "c969a18bb97c7a7d4189f41f50e2484e", "text": "def deserialize_ndarray_npy ( d ) : with io . BytesIO ( ) as f : f . write ( json . loads ( d [ 'npy' ] ) . encode ( 'latin-1' ) ) f . seek ( 0 ) return np . load ( f )\n", "title": "", "metadata": ""}
{"_id": "f4ac9c9a150a6e0314172716c5fdca1c", "text": "def show_yticklabels ( self , row , column ) : subplot = self . get_subplot_at ( row , column ) subplot . show_yticklabels ( )\n", "title": "", "metadata": ""}
{"_id": "5b4bd617e79016b914d0c56f7cc2adec", "text": "def get_screen_resolution ( self ) : widget = QDesktopWidget ( ) geometry = widget . availableGeometry ( widget . primaryScreen ( ) ) return geometry . width ( ) , geometry . height ( )\n", "title": "", "metadata": ""}
{"_id": "72d07bb8ad2ec300467dc8e14651fbeb", "text": "def get_single_file_info ( self , rel_path ) : f_path = self . get_full_file_path ( rel_path ) return get_single_file_info ( f_path , rel_path )\n", "title": "", "metadata": ""}
{"_id": "863c01821ed5c4c51278feefc7d2ad01", "text": "def disable_wx ( self ) : if self . _apps . has_key ( GUI_WX ) : self . _apps [ GUI_WX ] . _in_event_loop = False self . clear_inputhook ( )\n", "title": "", "metadata": ""}
{"_id": "4a44022af649f84e782d85cf94f1e6b5", "text": "def load ( self ) : self . _list = self . _source . load ( ) self . _list_iter = itertools . cycle ( self . _list )\n", "title": "", "metadata": ""}
{"_id": "61441d93618f9778207ff4971582bc05", "text": "def wait_on_rate_limit ( self , value ) : check_type ( value , bool , may_be_none = False ) self . _wait_on_rate_limit = value\n", "title": "", "metadata": ""}
{"_id": "b963e115045fe3296385fce672f68df7", "text": "def DeleteLog ( ) -> None : if os . path . exists ( Logger . FileName ) : os . remove ( Logger . FileName )\n", "title": "", "metadata": ""}
{"_id": "958f64936c5bed1bd682a39f30f56efc", "text": "def seq ( ) : current_frame = inspect . currentframe ( ) . f_back trace_string = \"\" while current_frame . f_back : trace_string = trace_string + current_frame . f_back . f_code . co_name current_frame = current_frame . f_back return counter . get_from_trace ( trace_string )\n", "title": "", "metadata": ""}
{"_id": "5a6ef78f76b0633a0d46a4bbef3281b7", "text": "def extend ( self , item ) : if not isinstance ( item , list ) : raise TypeError ( 'You can only extend lists with lists. ' 'You supplied \\\"%s\\\"' % type ( item ) ) for entry in item : if not isinstance ( entry , str ) : raise TypeError ( 'Members of this object must be strings. ' 'You supplied \\\"%s\\\"' % type ( entry ) ) list . append ( self , entry )\n", "title": "", "metadata": ""}
{"_id": "ce6c99b243bbd1b383e2933d69354ad3", "text": "def get_url_args ( url ) : url_data = urllib . parse . urlparse ( url ) arg_dict = urllib . parse . parse_qs ( url_data . query ) return arg_dict\n", "title": "", "metadata": ""}
{"_id": "5d5694ffa37962d35d91effcdd3851e1", "text": "def struct2dict ( struct ) : return { x : getattr ( struct , x ) for x in dict ( struct . _fields_ ) . keys ( ) }\n", "title": "", "metadata": ""}
{"_id": "15a7d8761becad6f82f103203ec39317", "text": "def split_every ( n , iterable ) : items = iter ( iterable ) return itertools . takewhile ( bool , ( list ( itertools . islice ( items , n ) ) for _ in itertools . count ( ) ) )\n", "title": "", "metadata": ""}
{"_id": "81b07d65dc78befcc9c58ec8a39545c5", "text": "def search_script_directory ( self , path ) : for subdir , dirs , files in os . walk ( path ) : for file_name in files : if file_name . endswith ( \".py\" ) : self . search_script_file ( subdir , file_name )\n", "title": "", "metadata": ""}
{"_id": "1cb3eb31a9d9367f8515ecde7c66b9cf", "text": "def stringc ( text , color ) : if has_colors : text = str ( text ) return \"\\033[\" + codeCodes [ color ] + \"m\" + text + \"\\033[0m\" else : return text\n", "title": "", "metadata": ""}
{"_id": "5a448d76e670884855cac5a1717e06bc", "text": "def OnDoubleClick ( self , event ) : node = HotMapNavigator . findNodeAtPosition ( self . hot_map , event . GetPosition ( ) ) if node : wx . PostEvent ( self , SquareActivationEvent ( node = node , point = event . GetPosition ( ) , map = self ) )\n", "title": "", "metadata": ""}
{"_id": "e0508951784e433c296deec1d5981fc0", "text": "def _hash_the_file ( hasher , filename ) : BUF_SIZE = 65536 with open ( filename , 'rb' ) as f : buf = f . read ( BUF_SIZE ) while len ( buf ) > 0 : hasher . update ( buf ) buf = f . read ( BUF_SIZE ) return hasher\n", "title": "", "metadata": ""}
{"_id": "4d4a86e84f1b1a1331a499471dd5926e", "text": "def flush ( self ) : if len ( self . _buffer ) > 0 : self . logger . log ( self . level , self . _buffer ) self . _buffer = str ( )\n", "title": "", "metadata": ""}
{"_id": "ab5959b215a4bf936262656511fb5bb7", "text": "def save_session_to_file ( self , sessionfile ) : pickle . dump ( requests . utils . dict_from_cookiejar ( self . _session . cookies ) , sessionfile )\n", "title": "", "metadata": ""}
{"_id": "fdc84895e79432816651bf803e799f6d", "text": "def read ( self , start_position : int , size : int ) -> memoryview : return memoryview ( self . _bytes ) [ start_position : start_position + size ]\n", "title": "", "metadata": ""}
{"_id": "4121368b3fa964115f4b38af13a78105", "text": "def execute ( self , cmd , * args , * * kwargs ) : self . cursor . execute ( cmd , * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "99256a3f80ca9a10827037f9407d219a", "text": "def exists ( self ) : try : return self . metadata is not None except datalab . utils . RequestException : return False except Exception as e : raise e\n", "title": "", "metadata": ""}
{"_id": "dd01601f7953b10ba7f436389be8cff0", "text": "def _begins_with_one_of ( sentence , parts_of_speech ) : doc = nlp ( sentence ) if doc [ 0 ] . tag_ in parts_of_speech : return True return False\n", "title": "", "metadata": ""}
{"_id": "4989d3aa4a4026afc64271a070891d02", "text": "def escape_tex ( value ) : newval = value for pattern , replacement in LATEX_SUBS : newval = pattern . sub ( replacement , newval ) return newval\n", "title": "", "metadata": ""}
{"_id": "44af0028555c6240c489e8e5ae775e00", "text": "def generate_random_id ( size = 6 , chars = string . ascii_uppercase + string . digits ) : return \"\" . join ( random . choice ( chars ) for x in range ( size ) )\n", "title": "", "metadata": ""}
{"_id": "7eeb74671ca67fb0c327e91e6db600c1", "text": "def is_static ( * p ) : return all ( is_CONST ( x ) or is_number ( x ) or is_const ( x ) for x in p )\n", "title": "", "metadata": ""}
{"_id": "b13f8b51da35a265079b9f6c3ba0256f", "text": "def info ( self , message , * args , * * kwargs ) : self . _log ( logging . INFO , message , * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "7e8c7b2f9531acfbcbe95c55b201a594", "text": "def __add__ ( self , other ) : return chaospy . poly . collection . arithmetics . add ( self , other )\n", "title": "", "metadata": ""}
{"_id": "8ad23a382dccb0fb3e20680590dddd87", "text": "def fit_gaussian ( x , y , yerr , p0 ) : try : popt , pcov = curve_fit ( gaussian , x , y , sigma = yerr , p0 = p0 , absolute_sigma = True ) except RuntimeError : return [ 0 ] , [ 0 ] return popt , pcov\n", "title": "", "metadata": ""}
{"_id": "ae7d3e652d42f619058fe7a2131a6f86", "text": "def long_substr ( data ) : substr = '' if len ( data ) > 1 and len ( data [ 0 ] ) > 0 : for i in range ( len ( data [ 0 ] ) ) : for j in range ( len ( data [ 0 ] ) - i + 1 ) : if j > len ( substr ) and all ( data [ 0 ] [ i : i + j ] in x for x in data ) : substr = data [ 0 ] [ i : i + j ] elif len ( data ) == 1 : substr = data [ 0 ] return substr\n", "title": "", "metadata": ""}
{"_id": "076711e7348a93b361aa3471b613a8ed", "text": "def ignore_comments ( iterator ) : for line in iterator : line = COMMENT_RE . sub ( '' , line ) line = line . strip ( ) if line : yield line\n", "title": "", "metadata": ""}
{"_id": "94a87c0d570657a8a284f757a0d6aa93", "text": "def is_empty ( self ) : non_type_attributes = [ attr for attr in self . node . attrib . keys ( ) if attr != 'type' ] return len ( self . node ) == 0 and len ( non_type_attributes ) == 0 and not self . node . text and not self . node . tail\n", "title": "", "metadata": ""}
{"_id": "8f81112beaed8b93eec164a8984e8f7d", "text": "def Diag ( a ) : r = np . zeros ( 2 * a . shape , dtype = a . dtype ) for idx , v in np . ndenumerate ( a ) : r [ 2 * idx ] = v return r ,\n", "title": "", "metadata": ""}
{"_id": "6927fbc1ae7a4a405f5003ab261cc43c", "text": "def __get_float ( section , name ) : try : return float ( section [ name ] ) except ( ValueError , TypeError , KeyError ) : return float ( 0 )\n", "title": "", "metadata": ""}
{"_id": "b023270437629e8ed49a28094a966b82", "text": "def log_y_cb ( self , w , val ) : self . tab_plot . logy = val self . plot_two_columns ( )\n", "title": "", "metadata": ""}
{"_id": "94c1542e5b17d7f8e37359dd7986603f", "text": "def templategetter ( tmpl ) : tmpl = tmpl . replace ( '{' , '%(' ) tmpl = tmpl . replace ( '}' , ')s' ) return lambda data : tmpl % data\n", "title": "", "metadata": ""}
{"_id": "f5f7d5749cb6be92367dc8223cd7b325", "text": "def terminate ( self ) : for t in self . _threads : t . quit ( ) self . _thread = [ ] self . _workers = [ ]\n", "title": "", "metadata": ""}
{"_id": "96d3f56e0b4440747e7e2779c565faea", "text": "def _attrprint ( d , delimiter = ', ' ) : return delimiter . join ( ( '\"%s\"=\"%s\"' % item ) for item in sorted ( d . items ( ) ) )\n", "title": "", "metadata": ""}
{"_id": "1fc818c1ac1cb258fad47f5ff1eaba93", "text": "def raw_print ( * args , * * kw ) : print ( * args , sep = kw . get ( 'sep' , ' ' ) , end = kw . get ( 'end' , '\\n' ) , file = sys . __stdout__ ) sys . __stdout__ . flush ( )\n", "title": "", "metadata": ""}
{"_id": "aedb44d1b0e554d0254ff73fd289570b", "text": "def generate_write_yaml_to_file ( file_name ) : def write_yaml ( config ) : with open ( file_name , 'w+' ) as fh : fh . write ( yaml . dump ( config ) ) return write_yaml\n", "title": "", "metadata": ""}
{"_id": "36e013b3819e2a459421238c621a6bcb", "text": "def WriteManyToPath ( objs , filepath ) : with io . open ( filepath , mode = \"w\" , encoding = \"utf-8\" ) as filedesc : WriteManyToFile ( objs , filedesc )\n", "title": "", "metadata": ""}
{"_id": "69727488792bf469d61ef1dcf19029bf", "text": "def stop ( self ) -> None : if self . _stop and not self . _posted_kork : self . _stop ( ) self . _stop = None\n", "title": "", "metadata": ""}
{"_id": "bb748ce085545ac9bbb80e63f39d1723", "text": "def random_color ( _min = MIN_COLOR , _max = MAX_COLOR ) : return color ( random . randint ( _min , _max ) )\n", "title": "", "metadata": ""}
{"_id": "5e11d830badfdf00e239216a7503b5c8", "text": "def __init__ ( self , xmin = 0 , ymin = 0 , xmax = 1 , ymax = 1 ) : self . _xmin = xmin self . _ymin = ymin self . _xmax = xmax self . _ymax = ymax\n", "title": "", "metadata": ""}
{"_id": "b0e57bbec8a0a8e3707c40d10d57a85a", "text": "def strip_querystring ( url ) : p = six . moves . urllib . parse . urlparse ( url ) return p . scheme + \"://\" + p . netloc + p . path\n", "title": "", "metadata": ""}
{"_id": "10ee47585a3a9e89b37c3bd383d33390", "text": "def document ( schema ) : teleport_schema = from_val ( schema ) return json . dumps ( teleport_schema , sort_keys = True , indent = 2 )\n", "title": "", "metadata": ""}
{"_id": "acb7e519e6268b311cdf4219a725cf31", "text": "def normalized_distance ( self , image ) : return self . __distance ( self . __original_image_for_distance , image , bounds = self . bounds ( ) )\n", "title": "", "metadata": ""}
{"_id": "f27e3220a7922f17078ecdb508c300f1", "text": "def _clean_workers ( self ) : while self . _bag_collector : self . _bag_collector . popleft ( ) self . _timer_worker_delete . stop ( )\n", "title": "", "metadata": ""}
{"_id": "7e37e9d17d1e791e760b207d6c50c659", "text": "def vec_angle ( a , b ) : cosang = np . dot ( a , b ) sinang = fast_norm ( np . cross ( a , b ) ) return np . arctan2 ( sinang , cosang )\n", "title": "", "metadata": ""}
{"_id": "4d4fe73a384ec4c1012238e448698900", "text": "def __contains__ ( self , key ) : k = self . _real_key ( key ) return k in self . _data\n", "title": "", "metadata": ""}
{"_id": "a0024032fcbb5d20a016572652718761", "text": "def txt_line_iterator ( path ) : with tf . gfile . Open ( path ) as f : for line in f : yield line . strip ( )\n", "title": "", "metadata": ""}
{"_id": "22f70d9e495c6b169d553324d0a43aa9", "text": "def cli_run ( ) : parser = argparse . ArgumentParser ( description = 'Stupidly simple code answers from StackOverflow' ) parser . add_argument ( 'query' , help = \"What's the problem ?\" , type = str , nargs = '+' ) parser . add_argument ( '-t' , '--tags' , help = 'semicolon separated tags -> python;lambda' ) args = parser . parse_args ( ) main ( args )\n", "title": "", "metadata": ""}
{"_id": "8d4feff3609f23a13bb1b4ef725a8e6a", "text": "def get_adjacent_matrix ( self ) : edges = self . edges num_edges = len ( edges ) + 1 adj = np . zeros ( [ num_edges , num_edges ] ) for k in range ( num_edges - 1 ) : adj [ edges [ k ] . L , edges [ k ] . R ] = 1 adj [ edges [ k ] . R , edges [ k ] . L ] = 1 return adj\n", "title": "", "metadata": ""}
{"_id": "bc00ce50b8cde0e731041aa286ef7ee8", "text": "def get_date ( date ) : if type ( date ) is str : return datetime . strptime ( date , '%Y-%m-%d' ) . date ( ) else : return date\n", "title": "", "metadata": ""}
{"_id": "864906c7e55e0f404a4ea7cdffbb035e", "text": "def normalize_value ( text ) : result = text . replace ( '\\n' , ' ' ) result = re . subn ( '[ ]{2,}' , ' ' , result ) [ 0 ] return result\n", "title": "", "metadata": ""}
{"_id": "bf89612946970e617cff00d9fd83b165", "text": "def render ( template , context ) : path , filename = os . path . split ( template ) return jinja2 . Environment ( loader = jinja2 . FileSystemLoader ( path or './' ) ) . get_template ( filename ) . render ( context )\n", "title": "", "metadata": ""}
{"_id": "17b4d95ceb4865c9c61134a66d7db9ac", "text": "def WriteToPath ( obj , filepath ) : with io . open ( filepath , mode = \"w\" , encoding = \"utf-8\" ) as filedesc : WriteToFile ( obj , filedesc )\n", "title": "", "metadata": ""}
{"_id": "c4e12dc8460f1907ad41cdae4f544cd6", "text": "def set_logging_config ( log_level , handlers ) : logging . basicConfig ( format = '%(asctime)s %(levelname)s:%(name)s:%(funcName)s: %(message)s' , datefmt = '%Y-%m-%d %H:%M:%S' , level = log_level , handlers = handlers )\n", "title": "", "metadata": ""}
{"_id": "3cee993db699b0dd0f2a8cd09c0327b3", "text": "def clearImg ( self ) : self . img . setImage ( np . array ( [ [ 0 ] ] ) ) self . img . image = None\n", "title": "", "metadata": ""}
{"_id": "71adbde75511323bc68641a36c081c48", "text": "def extent ( self ) : return ( self . intervals [ 1 ] . pix1 - 0.5 , self . intervals [ 1 ] . pix2 - 0.5 , self . intervals [ 0 ] . pix1 - 0.5 , self . intervals [ 0 ] . pix2 - 0.5 , )\n", "title": "", "metadata": ""}
{"_id": "c1f6e2159e34f604a6d4fbbeecc8b619", "text": "def transform ( self , df ) : for name , function in self . outputs : df [ name ] = function ( df )\n", "title": "", "metadata": ""}
{"_id": "16f02056f0fed33e5c5c822b11b17e43", "text": "def _extension ( modpath : str ) -> setuptools . Extension : return setuptools . Extension ( modpath , [ modpath . replace ( \".\" , \"/\" ) + \".py\" ] )\n", "title": "", "metadata": ""}
{"_id": "9f3f75fbbe991a5918a794f94a163fcd", "text": "def get_now_sql_datetime ( ) : ## > IMPORTS ## from datetime import datetime , date , time now = datetime . now ( ) now = now . strftime ( \"%Y-%m-%dT%H:%M:%S\" ) return now\n", "title": "", "metadata": ""}
{"_id": "bc24e3b3c29bc1a34fb752ca6d046986", "text": "def have_pyrex ( ) : pyrex_impls = 'Cython.Distutils.build_ext' , 'Pyrex.Distutils.build_ext' for pyrex_impl in pyrex_impls : try : # from (pyrex_impl) import build_ext __import__ ( pyrex_impl , fromlist = [ 'build_ext' ] ) . build_ext return True except Exception : pass return False\n", "title": "", "metadata": ""}
{"_id": "adfa0d43e2c15473d6173b4c2bf279f7", "text": "def _to_numeric ( val ) : if isinstance ( val , ( int , float , datetime . datetime , datetime . timedelta ) ) : return val return float ( val )\n", "title": "", "metadata": ""}
{"_id": "797a7f4c9bfc877e087b8073718422c9", "text": "def update_index ( index ) : logger . info ( \"Updating search index: '%s'\" , index ) client = get_client ( ) responses = [ ] for model in get_index_models ( index ) : logger . info ( \"Updating search index model: '%s'\" , model . search_doc_type ) objects = model . objects . get_search_queryset ( index ) . iterator ( ) actions = bulk_actions ( objects , index = index , action = \"index\" ) response = helpers . bulk ( client , actions , chunk_size = get_setting ( \"chunk_size\" ) ) responses . append ( response ) return responses\n", "title": "", "metadata": ""}
{"_id": "6585acf995fd932bbc0ac7283f637420", "text": "def multiply ( self , number ) : return self . from_list ( [ x * number for x in self . to_list ( ) ] )\n", "title": "", "metadata": ""}
{"_id": "1bcd8d2ebe46c358a539b512abdc32fc", "text": "def close_log ( log , verbose = True ) : if verbose : print ( 'Closing log file:' , log . name ) # Send closing message. log . info ( 'The log file has been closed.' ) # Remove all handlers from log. [ log . removeHandler ( handler ) for handler in log . handlers ]\n", "title": "", "metadata": ""}
{"_id": "276110de504c5d5336732d5d820a428e", "text": "def _find_conda ( ) : if 'CONDA_EXE' in os . environ : conda = os . environ [ 'CONDA_EXE' ] else : conda = util . which ( 'conda' ) return conda\n", "title": "", "metadata": ""}
{"_id": "96e565cbb7a795262214bff62e11ed54", "text": "def json_get_data ( filename ) : with open ( filename ) as fp : json_data = json . load ( fp ) return json_data return False\n", "title": "", "metadata": ""}
{"_id": "f209fd64ce2da11e9acd8435d6860d19", "text": "def get_shape_mask ( self , shape_obj ) : wd , ht = self . get_size ( ) yi = np . mgrid [ : ht ] . reshape ( - 1 , 1 ) xi = np . mgrid [ : wd ] . reshape ( 1 , - 1 ) pts = np . asarray ( ( xi , yi ) ) . T contains = shape_obj . contains_pts ( pts ) return contains\n", "title": "", "metadata": ""}
{"_id": "51ce136b3990383cd467e0765636d2da", "text": "def create_movie ( fig , update_figure , filename , title , fps = 15 , dpi = 100 ) : FFMpegWriter = manimation . writers [ 'ffmpeg' ] metadata = dict ( title = title ) writer = FFMpegWriter ( fps = fps , metadata = metadata ) with writer . saving ( fig , filename , dpi ) : t = 0 while True : if update_figure ( t ) : writer . grab_frame ( ) t += 1 else : break\n", "title": "", "metadata": ""}
{"_id": "3a8af771274d11291d88e1ff81af1621", "text": "def list_adb_devices_by_usb_id ( ) : out = adb . AdbProxy ( ) . devices ( [ '-l' ] ) clean_lines = new_str ( out , 'utf-8' ) . strip ( ) . split ( '\\n' ) results = [ ] for line in clean_lines : tokens = line . strip ( ) . split ( ) if len ( tokens ) > 2 and tokens [ 1 ] == 'device' : results . append ( tokens [ 2 ] ) return results\n", "title": "", "metadata": ""}
{"_id": "13d61347b9e7e8fec8e61fc3cb0f8e3e", "text": "def remove_elements ( target , indices ) : copied = list ( target ) for index in reversed ( indices ) : del copied [ index ] return copied\n", "title": "", "metadata": ""}
{"_id": "7c75d7bd2b1f6482995686dcc4aaaadb", "text": "def load_file ( self , filename ) : with open ( filename , 'r' ) as sourcefile : self . set_string ( sourcefile . read ( ) )\n", "title": "", "metadata": ""}
{"_id": "c0127d613fe54cbe8b6bca6334e4d0c2", "text": "def money ( min = 0 , max = 10 ) : value = random . choice ( range ( min * 100 , max * 100 ) ) return \"%1.2f\" % ( float ( value ) / 100 )\n", "title": "", "metadata": ""}
{"_id": "5c72df4e1a2312399e6bb747ceb57058", "text": "def _take_ownership ( self ) : if self : ptr = cast ( self . value , GIBaseInfo ) _UnrefFinalizer . track ( self , ptr ) self . __owns = True\n", "title": "", "metadata": ""}
{"_id": "d68b293228ad51d64775eee13ee1ff09", "text": "def add_argument ( self , dest , nargs = 1 , obj = None ) : if obj is None : obj = dest self . _args . append ( Argument ( dest = dest , nargs = nargs , obj = obj ) )\n", "title": "", "metadata": ""}
{"_id": "d370229aeec4888ad77955bd6d55e2ee", "text": "def invert ( dict_ ) : ensure_mapping ( dict_ ) return dict_ . __class__ ( izip ( itervalues ( dict_ ) , iterkeys ( dict_ ) ) )\n", "title": "", "metadata": ""}
{"_id": "052a0dab454211bbef79cdf7c5ca8229", "text": "def norm_slash ( name ) : if isinstance ( name , str ) : return name . replace ( '/' , \"\\\\\" ) if not is_case_sensitive ( ) else name else : return name . replace ( b'/' , b\"\\\\\" ) if not is_case_sensitive ( ) else name\n", "title": "", "metadata": ""}
{"_id": "84f1f37b4b7a0217738c64126946d1d6", "text": "def mad ( v ) : return np . median ( np . abs ( v - np . median ( v ) ) )\n", "title": "", "metadata": ""}
{"_id": "f893a9cf403006c0532fbafa5358e4be", "text": "def contextMenuEvent ( self , event ) : self . menu . popup ( event . globalPos ( ) ) event . accept ( )\n", "title": "", "metadata": ""}
{"_id": "60f6a2467bce6df85bcdfbbd6cb59545", "text": "def get_font_list ( ) : font_map = pangocairo . cairo_font_map_get_default ( ) font_list = [ f . get_name ( ) for f in font_map . list_families ( ) ] font_list . sort ( ) return font_list\n", "title": "", "metadata": ""}
{"_id": "7b8db2a49bb1fa82dec277dc57fd0a78", "text": "async def login ( username : str , password : str , brand : str , websession : ClientSession = None ) -> API : api = API ( brand , websession ) await api . authenticate ( username , password ) return api\n", "title": "", "metadata": ""}
{"_id": "a5316894f62fc791988d68cf27989411", "text": "def datetime_match ( data , dts ) : dts = dts if islistable ( dts ) else [ dts ] if any ( [ not isinstance ( i , datetime . datetime ) for i in dts ] ) : error_msg = ( \"`time` can only be filtered by datetimes\" ) raise TypeError ( error_msg ) return data . isin ( dts )\n", "title": "", "metadata": ""}
{"_id": "3a8a1c8640c953dde1b62944fa1bfb40", "text": "def write_dict_to_yaml ( dictionary , path , * * kwargs ) : with open ( path , 'w' ) as f : yaml . dump ( dictionary , f , indent = 4 , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "60e8b118be3bd67faa33b9c07bf70028", "text": "def merge_pdfs ( pdf_filepaths , out_filepath ) : merger = PdfFileMerger ( ) for pdf in pdf_filepaths : merger . append ( PdfFileReader ( open ( pdf , 'rb' ) ) ) merger . write ( out_filepath ) return out_filepath\n", "title": "", "metadata": ""}
{"_id": "325461e227620dfe5d63d4c25446b60f", "text": "def _put_header ( self ) : self . session . _out ( '%%PDF-%s' % self . pdf_version ) if self . session . compression : self . session . buffer += '%' + chr ( 235 ) + chr ( 236 ) + chr ( 237 ) + chr ( 238 ) + \"\\n\"\n", "title": "", "metadata": ""}
{"_id": "cb21520c80ebcc23b6f4f60e6f1c2bb6", "text": "def _read_date_from_string ( str1 ) : full_date = [ int ( x ) for x in str1 . split ( '/' ) ] return datetime . date ( full_date [ 0 ] , full_date [ 1 ] , full_date [ 2 ] )\n", "title": "", "metadata": ""}
{"_id": "55ae173e88ee3fdf5adfa59dea20ef11", "text": "def makedirs ( path ) : if not os . path . isdir ( path ) : os . makedirs ( path ) return path\n", "title": "", "metadata": ""}
{"_id": "97e94f5e48c1243da5ba6e35b2edc729", "text": "async def iso ( self , source ) : from datetime import datetime unix_timestamp = int ( source ) return datetime . fromtimestamp ( unix_timestamp ) . isoformat ( )\n", "title": "", "metadata": ""}
{"_id": "332d9afd3b06216b2a66121f4285a244", "text": "def check_alert ( self , text ) : try : alert = Alert ( world . browser ) if alert . text != text : raise AssertionError ( \"Alert text expected to be {!r}, got {!r}.\" . format ( text , alert . text ) ) except WebDriverException : # PhantomJS is kinda poor pass\n", "title": "", "metadata": ""}
{"_id": "bef85dda2e2abd163f8669e8023a16e2", "text": "def init_app ( self , app ) : app . config . from_pyfile ( '{0}.cfg' . format ( app . name ) , silent = True )\n", "title": "", "metadata": ""}
{"_id": "6ef286e462d08983299274075e720202", "text": "def one_hot_encoding ( input_tensor , num_labels ) : xview = input_tensor . view ( - 1 , 1 ) . to ( torch . long ) onehot = torch . zeros ( xview . size ( 0 ) , num_labels , device = input_tensor . device , dtype = torch . float ) onehot . scatter_ ( 1 , xview , 1 ) return onehot . view ( list ( input_tensor . shape ) + [ - 1 ] )\n", "title": "", "metadata": ""}
{"_id": "3c71d1583acf8dfb7bad776b617c80d4", "text": "def string_input ( prompt = '' ) : v = sys . version [ 0 ] if v == '3' : return input ( prompt ) else : return raw_input ( prompt )\n", "title": "", "metadata": ""}
{"_id": "cc13f183c6eca1748275cbebbefa800d", "text": "def fft_freqs ( n_fft , fs ) : return np . arange ( 0 , ( n_fft // 2 + 1 ) ) / float ( n_fft ) * float ( fs )\n", "title": "", "metadata": ""}
{"_id": "0e2d0f95d558736b0e628605819f4aa9", "text": "def mag ( z ) : if isinstance ( z [ 0 ] , np . ndarray ) : return np . array ( list ( map ( np . linalg . norm , z ) ) ) else : return np . linalg . norm ( z )\n", "title": "", "metadata": ""}
{"_id": "fafd00d06af0162d65413d8a7c636208", "text": "def read_utf8 ( fh , byteorder , dtype , count , offsetsize ) : return fh . read ( count ) . decode ( 'utf-8' )\n", "title": "", "metadata": ""}
{"_id": "c79ef83a02413829565835d9473f612c", "text": "def MatrixSolve ( a , rhs , adj ) : return np . linalg . solve ( a if not adj else _adjoint ( a ) , rhs ) ,\n", "title": "", "metadata": ""}
{"_id": "c8a2be5cf9a8a15af15704f9e19a7559", "text": "def check ( text ) : err = \"malapropisms.misc\" msg = u\"'{}' is a malapropism.\" illogics = [ \"the infinitesimal universe\" , \"a serial experience\" , \"attack my voracity\" , ] return existence_check ( text , illogics , err , msg , offset = 1 )\n", "title": "", "metadata": ""}
{"_id": "f3839082fd623c32ad2a009355489627", "text": "def get_neg_infinity ( dtype ) : if issubclass ( dtype . type , ( np . floating , np . integer ) ) : return - np . inf if issubclass ( dtype . type , np . complexfloating ) : return - np . inf - 1j * np . inf return NINF\n", "title": "", "metadata": ""}
{"_id": "f81c192abf4814abac149ef139008880", "text": "def read_bytes ( fo , writer_schema = None , reader_schema = None ) : size = read_long ( fo ) return fo . read ( size )\n", "title": "", "metadata": ""}
{"_id": "d77be79de082c4f82e902c503b1bd55d", "text": "def __sub__ ( self , other ) : return self . __class__ ( [ elem for elem in self if elem not in other ] )\n", "title": "", "metadata": ""}
{"_id": "a7722e1237b1dc84aeb9273ec962786e", "text": "def np_hash ( a ) : if a is None : return hash ( None ) # Ensure that hashes are equal whatever the ordering in memory (C or # Fortran) a = np . ascontiguousarray ( a ) # Compute the digest and return a decimal int return int ( hashlib . sha1 ( a . view ( a . dtype ) ) . hexdigest ( ) , 16 )\n", "title": "", "metadata": ""}
{"_id": "9e9fa1fd8791697d726c2e5f923ef078", "text": "def parse_scale ( x ) : match = re . match ( r'^(.+?):(\\d+)$' , x ) if not match : raise ValueError ( 'Invalid scale \"%s\".' % x ) return match . group ( 1 ) , int ( match . group ( 2 ) )\n", "title": "", "metadata": ""}
{"_id": "94cab5fc4b2cb28bfe9080d7b5dd8bdd", "text": "def csv_to_dicts ( file , header = None ) : with open ( file ) as csvfile : return [ row for row in csv . DictReader ( csvfile , fieldnames = header ) ]\n", "title": "", "metadata": ""}
{"_id": "86c8a748f004336a79220f02f009cad5", "text": "def make_indices_to_labels ( labels : Set [ str ] ) -> Dict [ int , str ] : return { index : label for index , label in enumerate ( [ \"pad\" ] + sorted ( list ( labels ) ) ) }\n", "title": "", "metadata": ""}
{"_id": "b77313e6008fe9011e49e3841ab36c90", "text": "def _extract_traceback ( start ) : tb = sys . exc_info ( ) [ 2 ] for i in range ( start ) : tb = tb . tb_next return _parse_traceback ( tb )\n", "title": "", "metadata": ""}
{"_id": "eae37b7f81baac9f7a4421509b343786", "text": "def _get_pretty_string ( obj ) : sio = StringIO ( ) pprint . pprint ( obj , stream = sio ) return sio . getvalue ( )\n", "title": "", "metadata": ""}
{"_id": "910dda5cbc22e1dfba80fc38b8111def", "text": "def computeFactorial ( n ) : sleep_walk ( 10 ) ret = 1 for i in range ( n ) : ret = ret * ( i + 1 ) return ret\n", "title": "", "metadata": ""}
{"_id": "748d3f865ff2e90b2a0111a9f90a5e0c", "text": "def stop_button_click_handler ( self ) : self . stop_button . setDisabled ( True ) # Interrupt computations or stop debugging  if not self . shellwidget . _reading : self . interrupt_kernel ( ) else : self . shellwidget . write_to_stdin ( 'exit' )\n", "title": "", "metadata": ""}
{"_id": "3884cec02ce32241a0ee365fa6199740", "text": "def obj_in_list_always ( target_list , obj ) : for item in set ( target_list ) : if item is not obj : return False return True\n", "title": "", "metadata": ""}
{"_id": "37b149dc8560d9082cd5d745540b5975", "text": "def creation_time ( self ) : timestamp = self . _fsntfs_attribute . get_creation_time_as_integer ( ) return dfdatetime_filetime . Filetime ( timestamp = timestamp )\n", "title": "", "metadata": ""}
{"_id": "aa6e1a54c958a50dd39fc433319bce36", "text": "def enable_proxy ( self , host , port ) : self . proxy = [ host , _number ( port ) ] self . proxy_enabled = True\n", "title": "", "metadata": ""}
{"_id": "b36c190631154daead0d1ee038de03de", "text": "def is_same_file ( filename1 , filename2 ) : if filename1 == filename2 : return True if os . name == 'posix' : return os . path . samefile ( filename1 , filename2 ) return is_same_filename ( filename1 , filename2 )\n", "title": "", "metadata": ""}
{"_id": "bc50f37c691f0c2b03c1c60c41cc92ce", "text": "def save_config_value ( request , response , key , value ) : request . session [ key ] = value response . set_cookie ( key , value , expires = one_year_from_now ( ) ) return response\n", "title": "", "metadata": ""}
{"_id": "00a9943b8e90168683852ac7f96d26b3", "text": "def factors ( n ) : return set ( reduce ( list . __add__ , ( [ i , n // i ] for i in range ( 1 , int ( n ** 0.5 ) + 1 ) if n % i == 0 ) ) )\n", "title": "", "metadata": ""}
{"_id": "1b1209caa2ebe520c81951ef8cb324c5", "text": "def parse_float ( float_str ) : factor = __get_factor ( float_str ) if factor != 1 : float_str = float_str [ : - 1 ] try : return float ( float_str . replace ( ',' , '' ) ) * factor except ValueError : return None\n", "title": "", "metadata": ""}
{"_id": "a496557415908e9f9a5434717d562a83", "text": "def m ( name = '' , * * kwargs ) : with Reflect . context ( * * kwargs ) as r : kwargs [ \"name\" ] = name instance = M_CLASS ( r , stream , * * kwargs ) instance ( )\n", "title": "", "metadata": ""}
{"_id": "8d9348cf70c8d5796524859c9a26b89a", "text": "def enable_ssl ( self , * args , * * kwargs ) : if self . handshake_sent : raise SSLError ( 'can only enable SSL before handshake' ) self . secure = True self . sock = ssl . wrap_socket ( self . sock , * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "43c95f7bf5a428059d37fd64cf13768c", "text": "def decodebytes ( input ) : py_version = sys . version_info [ 0 ] if py_version >= 3 : return _decodebytes_py3 ( input ) return _decodebytes_py2 ( input )\n", "title": "", "metadata": ""}
{"_id": "f9fa2080926d415002a8b5875f0468c2", "text": "def _set_widget_background_color ( widget , color ) : pal = widget . palette ( ) pal . setColor ( pal . Base , color ) widget . setPalette ( pal )\n", "title": "", "metadata": ""}
{"_id": "83d30e57c98f9436fcdad97f02222585", "text": "def is_int ( string ) : try : a = float ( string ) b = int ( a ) except ValueError : return False else : return a == b\n", "title": "", "metadata": ""}
{"_id": "9537afb19f0445681df1de525602687e", "text": "def readCommaList ( fileList ) : names = fileList . split ( ',' ) fileList = [ ] for item in names : fileList . append ( item ) return fileList\n", "title": "", "metadata": ""}
{"_id": "2a5a0932ebc1a41db79ed7f503e45541", "text": "def to_camel_case ( text ) : split = text . split ( '_' ) return split [ 0 ] + \"\" . join ( x . title ( ) for x in split [ 1 : ] )\n", "title": "", "metadata": ""}
{"_id": "52f1560e9b310bb359e680183388b93d", "text": "def to_camel ( s ) : # r'(?!^)_([a-zA-Z]) original regex wasn't process first groups return re . sub ( r'_([a-zA-Z])' , lambda m : m . group ( 1 ) . upper ( ) , '_' + s )\n", "title": "", "metadata": ""}
{"_id": "f77a8ee0ea731c0f64ee647df9d6fe83", "text": "def __print_table ( table ) : col_width = [ max ( len ( x ) for x in col ) for col in zip ( * table ) ] print ( \"| \" + \" | \" . join ( \"{:{}}\" . format ( x , col_width [ i ] ) for i , x in enumerate ( table [ 0 ] ) ) + \" |\" ) print ( \"| \" + \" | \" . join ( \"{:{}}\" . format ( '-' * col_width [ i ] , col_width [ i ] ) for i , x in enumerate ( table [ 0 ] ) ) + \" |\" ) for line in table [ 1 : ] : print ( \"| \" + \" | \" . join ( \"{:{}}\" . format ( x , col_width [ i ] ) for i , x in enumerate ( line ) ) + \" |\" )\n", "title": "", "metadata": ""}
{"_id": "5bd5c6a57d7d11d89737198b5006576c", "text": "def get_day_name ( self ) -> str : weekday = self . value . isoweekday ( ) - 1 return calendar . day_name [ weekday ]\n", "title": "", "metadata": ""}
{"_id": "8a27684128a76da008c578c2d475c4b4", "text": "def build ( self , * * kwargs ) : self . lexer = ply . lex . lex ( object = self , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "7f8b1a1cb31013f2ce8715280ec1fdb5", "text": "def strip_comments ( string , comment_symbols = frozenset ( ( '#' , '//' ) ) ) : lines = string . splitlines ( ) for k in range ( len ( lines ) ) : for symbol in comment_symbols : lines [ k ] = strip_comment_line_with_symbol ( lines [ k ] , start = symbol ) return '\\n' . join ( lines )\n", "title": "", "metadata": ""}
{"_id": "0fc9e1bbab640897a629c9f4603d15e8", "text": "def finish ( ) : out . warn ( \"Interrupted!\" ) for t in threads : t . stop ( ) jobs . clear ( ) out . warn ( \"Waiting for download threads to finish.\" )\n", "title": "", "metadata": ""}
{"_id": "6a8dc654d9ca1b5fd798c1476140f818", "text": "def _set_property ( self , val , * args ) : val = UserClassAdapter . _set_property ( self , val , * args ) if val : Adapter . _set_property ( self , val , * args ) return val\n", "title": "", "metadata": ""}
{"_id": "368d62fb88efcf21cd1b1620b33d8330", "text": "def l2_norm ( arr ) : arr = np . asarray ( arr ) return np . sqrt ( np . dot ( arr . ravel ( ) . squeeze ( ) , arr . ravel ( ) . squeeze ( ) ) )\n", "title": "", "metadata": ""}
{"_id": "0e60deb7d39d04fe42d2095ae8e7571e", "text": "def fmt_duration ( secs ) : return ' ' . join ( fmt . human_duration ( secs , 0 , precision = 2 , short = True ) . strip ( ) . split ( ) )\n", "title": "", "metadata": ""}
{"_id": "3a4dca1bd36c9538553dff7b9fe27b39", "text": "def isolate_element ( self , x ) : members = list ( self . members ( x ) ) self . delete_set ( x ) self . union ( * ( v for v in members if v != x ) )\n", "title": "", "metadata": ""}
{"_id": "3d1b550c2b3aa4dfe4cc5aab91558b5e", "text": "def indent ( txt , spacing = 4 ) : return prefix ( str ( txt ) , '' . join ( [ ' ' for _ in range ( spacing ) ] ) )\n", "title": "", "metadata": ""}
{"_id": "8ba7249c884d241c7cca616fd3f1259c", "text": "def graph_from_dot_file ( path ) : fd = file ( path , 'rb' ) data = fd . read ( ) fd . close ( ) return graph_from_dot_data ( data )\n", "title": "", "metadata": ""}
{"_id": "53fb21e8dab97d9bf8eae6f7cd3cb712", "text": "def all_documents ( index = INDEX_NAME ) : query = { 'query' : { 'match_all' : { } } } for result in raw_query ( query , index = index ) : yield result\n", "title": "", "metadata": ""}
{"_id": "6a9524c5d7ebfdcaf525959bab70590a", "text": "def delete_cell ( self , key ) : try : self . code_array . pop ( key ) except KeyError : pass self . grid . code_array . result_cache . clear ( )\n", "title": "", "metadata": ""}
{"_id": "7581a3ded495d5293517773ae3d039ea", "text": "def get_list_from_file ( file_name ) : with open ( file_name , mode = 'r' , encoding = 'utf-8' ) as f1 : lst = f1 . readlines ( ) return lst\n", "title": "", "metadata": ""}
{"_id": "f01d2e44209bd5d287bfd08a87a1923e", "text": "def _format_title_string ( self , title_string ) : return self . _title_string_format_text_tag ( title_string . replace ( self . icy_tokkens [ 0 ] , self . icy_title_prefix ) )\n", "title": "", "metadata": ""}
{"_id": "e70bcc84ad204a9f3b3d5eebe634da01", "text": "def __get__ ( self , obj , objtype ) : import functools return functools . partial ( self . __call__ , obj )\n", "title": "", "metadata": ""}
{"_id": "a9da852f0fdcc01c5d859b60411efa6b", "text": "def samefile ( a : str , b : str ) -> bool : try : return os . path . samefile ( a , b ) except OSError : return os . path . normpath ( a ) == os . path . normpath ( b )\n", "title": "", "metadata": ""}
{"_id": "1b3287f3fd89cad38d85566f05c32d0e", "text": "def exit ( exit_code = 0 ) : core . processExitHooks ( ) if state . isExitHooked and not hasattr ( sys , 'exitfunc' ) : # The function is called from the exit hook sys . stderr . flush ( ) sys . stdout . flush ( ) os . _exit ( exit_code ) #pylint: disable=W0212 sys . exit ( exit_code )\n", "title": "", "metadata": ""}
{"_id": "5fd52fc575d6fbb31f33bc53452c16d0", "text": "def Stop ( self ) : self . _Close ( ) if self . _rpc_thread . isAlive ( ) : self . _rpc_thread . join ( ) self . _rpc_thread = None\n", "title": "", "metadata": ""}
{"_id": "fdb0440630613446fa5e61ead477d7d7", "text": "def full ( self ) : if not self . size : return False return len ( self . pq ) == ( self . size + self . removed_count )\n", "title": "", "metadata": ""}
{"_id": "13b8aa71aeb9b838809cb1494a66aec4", "text": "def camel_to_snake ( s : str ) -> str : return CAMEL_CASE_RE . sub ( r'_\\1' , s ) . strip ( ) . lower ( )\n", "title": "", "metadata": ""}
{"_id": "3362cf7c8ce99320bf6f205c2938682f", "text": "def prompt ( * args , * * kwargs ) : try : return click . prompt ( * args , * * kwargs ) except click . Abort : return False\n", "title": "", "metadata": ""}
{"_id": "a2e60da666410c817d0cf4ced53c6752", "text": "def to_dict ( self ) : return { \"name\" : self . table_name , \"kind\" : self . table_kind , \"data\" : [ r . to_dict ( ) for r in self ] }\n", "title": "", "metadata": ""}
{"_id": "37309b8dfcf5f82c81fbdea06f422b8d", "text": "def _mean_dict ( dict_list ) : return { k : np . array ( [ d [ k ] for d in dict_list ] ) . mean ( ) for k in dict_list [ 0 ] . keys ( ) }\n", "title": "", "metadata": ""}
{"_id": "746f14cebbf23b8a7984623ddf1f0653", "text": "def dfs_recursive ( graph , node , seen ) : seen [ node ] = True for neighbor in graph [ node ] : if not seen [ neighbor ] : dfs_recursive ( graph , neighbor , seen )\n", "title": "", "metadata": ""}
{"_id": "4abb5e0189298c5e48d4cedbc9d82fe3", "text": "def unique_items ( seq ) : seen = set ( ) return [ x for x in seq if not ( x in seen or seen . add ( x ) ) ]\n", "title": "", "metadata": ""}
{"_id": "b115dc1b3e3bd2384b18489b5534fe3c", "text": "def _import ( module , cls ) : global Scanner try : cls = str ( cls ) mod = __import__ ( str ( module ) , globals ( ) , locals ( ) , [ cls ] , 1 ) Scanner = getattr ( mod , cls ) except ImportError : pass\n", "title": "", "metadata": ""}
{"_id": "a608d66f8611c277483d6cb617e84d83", "text": "def cleanup ( self , app ) : if hasattr ( self . database . obj , 'close_all' ) : self . database . close_all ( )\n", "title": "", "metadata": ""}
{"_id": "40ba659b3672913b962b8be0a19e1297", "text": "def _sub_patterns ( patterns , text ) : for pattern , repl in patterns : text = re . sub ( pattern , repl , text ) return text\n", "title": "", "metadata": ""}
{"_id": "dba9ff6b04587be9c13d33fe9f1f0abb", "text": "def run_time ( ) -> timedelta : delta = start_time if start_time else datetime . utcnow ( ) return datetime . utcnow ( ) - delta\n", "title": "", "metadata": ""}
{"_id": "9d723b5b0fddbd18da48fbec01599878", "text": "def pass_from_pipe ( cls ) : is_pipe = not sys . stdin . isatty ( ) return is_pipe and cls . strip_last_newline ( sys . stdin . read ( ) )\n", "title": "", "metadata": ""}
{"_id": "de77bd9a62a17bb6485e70aa9dc6357e", "text": "def _validate_pos ( df ) : assert isinstance ( df , pd . DataFrame ) assert [ \"seqname\" , \"position\" , \"strand\" ] == df . columns . tolist ( ) assert df . position . dtype == np . dtype ( \"int64\" ) assert df . strand . dtype == np . dtype ( \"O\" ) assert df . seqname . dtype == np . dtype ( \"O\" ) return df\n", "title": "", "metadata": ""}
{"_id": "9a0ba59bd758a7c24cbbcc6f4727a84f", "text": "def _change_height ( self , ax , new_value ) : for patch in ax . patches : current_height = patch . get_height ( ) diff = current_height - new_value # we change the bar height patch . set_height ( new_value ) # we recenter the bar patch . set_y ( patch . get_y ( ) + diff * .5 )\n", "title": "", "metadata": ""}
{"_id": "5732b2c05ad6e0eec3178f1d49006b1b", "text": "def needs_check ( self ) : if self . lastcheck is None : return True return time . time ( ) - self . lastcheck >= self . ipchangedetection_sleep\n", "title": "", "metadata": ""}
{"_id": "2304630eeaa62bd9a2fab0eb432bfffc", "text": "def downsample ( array , k ) : length = array . shape [ 0 ] indices = random . sample ( xrange ( length ) , k ) return array [ indices ]\n", "title": "", "metadata": ""}
{"_id": "38cb9a2b6537433c505efea17a397ba9", "text": "def _to_java_object_rdd ( rdd ) : rdd = rdd . _reserialize ( AutoBatchedSerializer ( PickleSerializer ( ) ) ) return rdd . ctx . _jvm . org . apache . spark . mllib . api . python . SerDe . pythonToJava ( rdd . _jrdd , True )\n", "title": "", "metadata": ""}
{"_id": "c885f2eab575614069d86f699de16ba9", "text": "def print_yaml ( o ) : print ( yaml . dump ( o , default_flow_style = False , indent = 4 , encoding = 'utf-8' ) )\n", "title": "", "metadata": ""}
{"_id": "96690ddff9c757ce77df1ce9f63a253a", "text": "def _connect ( self , servers ) : self . _do_connect ( servers . split ( ' ' ) ) self . _verify_connection ( verbose = True )\n", "title": "", "metadata": ""}
{"_id": "4a4644b4ee61f5c3122a91e8eb5ea634", "text": "def clear_global ( self ) : vname = self . varname logger . debug ( f'global clearning {vname}' ) if vname in globals ( ) : logger . debug ( 'removing global instance var: {}' . format ( vname ) ) del globals ( ) [ vname ]\n", "title": "", "metadata": ""}
{"_id": "8b8040768e1f2b6c0443e845a977e047", "text": "def _parse_date ( string : str ) -> datetime . date : return datetime . datetime . strptime ( string , '%Y-%m-%d' ) . date ( )\n", "title": "", "metadata": ""}
{"_id": "a5aff453d4efacec209dc85379274e5a", "text": "def popup ( self , title , callfn , initialdir = None ) : super ( DirectorySelection , self ) . popup ( title , callfn , initialdir )\n", "title": "", "metadata": ""}
{"_id": "d19ea7d96fd66d93b971a2ded4e58aeb", "text": "def current_memory_usage ( ) : import psutil proc = psutil . Process ( os . getpid ( ) ) #meminfo = proc.get_memory_info() meminfo = proc . memory_info ( ) rss = meminfo [ 0 ] # Resident Set Size / Mem Usage vms = meminfo [ 1 ] # Virtual Memory Size / VM Size  # NOQA return rss\n", "title": "", "metadata": ""}
{"_id": "75dae5dfd3fdcc5c6bfeac37445b2309", "text": "def __init__ ( self , function ) : super ( filter , self ) . __init__ ( ) self . function = function\n", "title": "", "metadata": ""}
{"_id": "fe66604a45c76bb64be578ca9553bf4a", "text": "def _updateItemComboBoxIndex ( self , item , column , num ) : item . _combobox_current_index [ column ] = num item . _combobox_current_value [ column ] = item . _combobox_option_list [ column ] [ num ] [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "254389a65a338345b04dd56b53793f1a", "text": "def clear ( self ) : self . axes . cla ( ) self . conf . ntrace = 0 self . conf . xlabel = '' self . conf . ylabel = '' self . conf . title = ''\n", "title": "", "metadata": ""}
{"_id": "e3d8e7bea3e3e6fecb7330bcdc18c5df", "text": "def ungzip_data ( input_data ) : buf = StringIO ( input_data ) f = gzip . GzipFile ( fileobj = buf ) return f\n", "title": "", "metadata": ""}
{"_id": "3464dbf4ada4810544379bf79b382cfa", "text": "def _clear ( self ) : draw = ImageDraw . Draw ( self . _background_image ) draw . rectangle ( self . _device . bounding_box , fill = \"black\" ) del draw\n", "title": "", "metadata": ""}
{"_id": "1d009cd7059e81e2404b287cad9e5916", "text": "def list_files ( directory ) : return [ f for f in pathlib . Path ( directory ) . iterdir ( ) if f . is_file ( ) and not f . name . startswith ( '.' ) ]\n", "title": "", "metadata": ""}
{"_id": "c29499dec7281c344bdab04f6c1a004d", "text": "def retry_until_not_none_or_limit_reached ( method , limit , sleep_s = 1 , catch_exceptions = ( ) ) : return retry_until_valid_or_limit_reached ( method , limit , lambda x : x is not None , sleep_s , catch_exceptions )\n", "title": "", "metadata": ""}
{"_id": "b3d927554f7ee1191851c56e27f8b93d", "text": "def _restore_seq_field_pickle ( checked_class , item_type , data ) : type_ = _seq_field_types [ checked_class , item_type ] return _restore_pickle ( type_ , data )\n", "title": "", "metadata": ""}
{"_id": "f792d3365335fa96dfde8ae245bb345f", "text": "def time_func ( func , name , * args , * * kwargs ) : tic = time . time ( ) out = func ( * args , * * kwargs ) toc = time . time ( ) print ( '%s took %0.2f seconds' % ( name , toc - tic ) ) return out\n", "title": "", "metadata": ""}
{"_id": "c193b7b98ed17ca0ae9eaa6d0732b652", "text": "def pause ( self ) : mixer . music . pause ( ) self . pause_time = self . get_time ( ) self . paused = True\n", "title": "", "metadata": ""}
{"_id": "4c7bd4561fef5df3be860adc03d85831", "text": "def forceupdate ( self , * args , * * kw ) : self . _update ( False , self . _ON_DUP_OVERWRITE , * args , * * kw )\n", "title": "", "metadata": ""}
{"_id": "e2655edf09695a3e7c2ad99644277058", "text": "def read_corpus ( file_name ) : with io . open ( file_name , encoding = 'utf-8' ) as data_file : return yaml . load ( data_file )\n", "title": "", "metadata": ""}
{"_id": "6da7a4f13ea4b9672b2fd5d0b1a8a8a1", "text": "def is_datetime_like ( dtype ) : return ( np . issubdtype ( dtype , np . datetime64 ) or np . issubdtype ( dtype , np . timedelta64 ) )\n", "title": "", "metadata": ""}
{"_id": "611999d2ec8878652445e95cebb8c87e", "text": "def _axes ( self ) : self . view . _force_vertical = True super ( HorizontalGraph , self ) . _axes ( ) self . view . _force_vertical = False\n", "title": "", "metadata": ""}
{"_id": "be9ee0c4852f4f07b24b007a91a0a694", "text": "def asMaskedArray ( self ) : return ma . masked_array ( data = self . data , mask = self . mask , fill_value = self . fill_value )\n", "title": "", "metadata": ""}
{"_id": "53226fcdb7d1280023e86f2102ccf8af", "text": "def set_json_item ( key , value ) : data = get_json ( ) data [ key ] = value request = get_request ( ) request [ \"BODY\" ] = json . dumps ( data )\n", "title": "", "metadata": ""}
{"_id": "93dd1a35c2f0155320430869adc5af67", "text": "def closest_values ( L ) : assert len ( L ) >= 2 L . sort ( ) valmin , argmin = min ( ( L [ i ] - L [ i - 1 ] , i ) for i in range ( 1 , len ( L ) ) ) return L [ argmin - 1 ] , L [ argmin ]\n", "title": "", "metadata": ""}
{"_id": "cc96dabb40b759971ccafe3e6a315d9d", "text": "def get_entity_kind ( self , model_obj ) : model_obj_ctype = ContentType . objects . get_for_model ( self . queryset . model ) return ( u'{0}.{1}' . format ( model_obj_ctype . app_label , model_obj_ctype . model ) , u'{0}' . format ( model_obj_ctype ) )\n", "title": "", "metadata": ""}
{"_id": "22a54af6f201c5313a4767aae89ba149", "text": "async def json_or_text ( response ) : text = await response . text ( ) if response . headers [ 'Content-Type' ] == 'application/json; charset=utf-8' : return json . loads ( text ) return text\n", "title": "", "metadata": ""}
{"_id": "feccf9d90f8ff922bf6043920a027f4d", "text": "def label_saves ( name ) : plt . legend ( loc = 0 ) plt . ylim ( [ 0 , 1.025 ] ) plt . xlabel ( '$U/D$' , fontsize = 20 ) plt . ylabel ( '$Z$' , fontsize = 20 ) plt . savefig ( name , dpi = 300 , format = 'png' , transparent = False , bbox_inches = 'tight' , pad_inches = 0.05 )\n", "title": "", "metadata": ""}
{"_id": "58a5df183428ce9c6978beb2e90fa5d5", "text": "def _fullname ( o ) : return o . __module__ + \".\" + o . __name__ if o . __module__ else o . __name__\n", "title": "", "metadata": ""}
{"_id": "28acab3ac41c8e4ee9aa1f63154e40ee", "text": "def _calculate_distance ( latlon1 , latlon2 ) : lat1 , lon1 = latlon1 lat2 , lon2 = latlon2 dlon = lon2 - lon1 dlat = lat2 - lat1 R = 6371 # radius of the earth in kilometers a = np . sin ( dlat / 2 ) ** 2 + np . cos ( lat1 ) * np . cos ( lat2 ) * ( np . sin ( dlon / 2 ) ) ** 2 c = 2 * np . pi * R * np . arctan2 ( np . sqrt ( a ) , np . sqrt ( 1 - a ) ) / 180 return c\n", "title": "", "metadata": ""}
{"_id": "35ff17ef1165cfae201be2599af5ee74", "text": "def sort_dict ( d , key = None , reverse = False ) : kv_items = [ kv for kv in d . items ( ) ] # Sort kv_items according to key. if key is None : kv_items . sort ( key = lambda t : t [ 1 ] , reverse = reverse ) else : kv_items . sort ( key = key , reverse = reverse ) # Build ordered dict. return collections . OrderedDict ( kv_items )\n", "title": "", "metadata": ""}
{"_id": "a690a80c8f8b16ea328be1d6dbb8752c", "text": "def from_pydatetime ( cls , pydatetime ) : return cls ( date = Date . from_pydate ( pydatetime . date ) , time = Time . from_pytime ( pydatetime . time ) )\n", "title": "", "metadata": ""}
{"_id": "12b4192d64d7b0eb783ec929104e4474", "text": "def flatten4d3d ( x ) : xshape = shape_list ( x ) result = tf . reshape ( x , [ xshape [ 0 ] , xshape [ 1 ] * xshape [ 2 ] , xshape [ 3 ] ] ) return result\n", "title": "", "metadata": ""}
{"_id": "057fb7d1c71d2d1e47a421f3467997a2", "text": "def build_parser ( ) : parser = argparse . ArgumentParser ( \"Release packages to pypi\" ) parser . add_argument ( '--check' , '-c' , action = \"store_true\" , help = \"Do a dry run without uploading\" ) parser . add_argument ( 'component' , help = \"The component to release as component-version\" ) return parser\n", "title": "", "metadata": ""}
{"_id": "840aa7cab7783501adba5847c4b65597", "text": "def new_from_list ( cls , items , * * kwargs ) : obj = cls ( * * kwargs ) for item in items : obj . append ( ListItem ( item ) ) return obj\n", "title": "", "metadata": ""}
{"_id": "e77ded8ab8842069e400180eece11575", "text": "def _read_group_h5 ( filename , groupname ) : with h5py . File ( filename , 'r' ) as h5f : data = h5f [ groupname ] [ ( ) ] return data\n", "title": "", "metadata": ""}
{"_id": "cfd180da2fe2ca79c71f31d6c8a0d8b7", "text": "def read ( filename ) : return codecs . open ( os . path . join ( __DIR__ , filename ) , 'r' ) . read ( )\n", "title": "", "metadata": ""}
{"_id": "908cfee71f995b4e92efe936601819be", "text": "def simple_eq ( one : Instance , two : Instance , attrs : List [ str ] ) -> bool : return all ( getattr ( one , a ) == getattr ( two , a ) for a in attrs )\n", "title": "", "metadata": ""}
{"_id": "3866188c2bcc9441fe0609c4c315f5d9", "text": "def load ( obj , cls , default_factory ) : if obj is None : return default_factory ( ) if isinstance ( obj , dict ) : return cls . load ( obj ) return obj\n", "title": "", "metadata": ""}
{"_id": "b91a13e9695ee97c13354b92823d0c3f", "text": "def table_width ( self ) : outer_widths = max_dimensions ( self . table_data , self . padding_left , self . padding_right ) [ 2 ] outer_border = 2 if self . outer_border else 0 inner_border = 1 if self . inner_column_border else 0 return table_width ( outer_widths , outer_border , inner_border )\n", "title": "", "metadata": ""}
{"_id": "4d10044a6de93bb8c6d12ef35d18a755", "text": "def gtype ( n ) : t = type ( n ) . __name__ return str ( t ) if t != 'Literal' else 'Literal, {}' . format ( n . language )\n", "title": "", "metadata": ""}
{"_id": "57bb81cb41350f96db03f130e951c429", "text": "def shape ( self ) -> Tuple [ int , ... ] : return tuple ( bins . bin_count for bins in self . _binnings )\n", "title": "", "metadata": ""}
{"_id": "edcd3b4c06987324d6d37c2cec4c8d85", "text": "def ylim ( self , low , high , index = 1 ) : self . layout [ 'yaxis' + str ( index ) ] [ 'range' ] = [ low , high ] return self\n", "title": "", "metadata": ""}
{"_id": "5ba25aa29eddad82e947c3d05f3efa1e", "text": "def fieldstorage ( self ) : if self . _fieldstorage is None : if self . _body is not None : raise ReadBodyTwiceError ( ) self . _fieldstorage = cgi . FieldStorage ( environ = self . _environ , fp = self . _environ [ 'wsgi.input' ] ) return self . _fieldstorage\n", "title": "", "metadata": ""}
{"_id": "2a64b8c12d69a4d6157de5ef6b65a60c", "text": "def gauss_box_model ( x , amplitude = 1.0 , mean = 0.0 , stddev = 1.0 , hpix = 0.5 ) : z = ( x - mean ) / stddev z2 = z + hpix / stddev z1 = z - hpix / stddev return amplitude * ( norm . cdf ( z2 ) - norm . cdf ( z1 ) )\n", "title": "", "metadata": ""}
{"_id": "dd2afa37ad9c6209629fc4eeafc152b6", "text": "def html_to_text ( content ) : text = None h2t = html2text . HTML2Text ( ) h2t . ignore_links = False text = h2t . handle ( content ) return text\n", "title": "", "metadata": ""}
{"_id": "cb2ae5e441667278151f95e6292eef50", "text": "def validate_string ( option , value ) : if isinstance ( value , string_type ) : return value raise TypeError ( \"Wrong type for %s, value must be \" \"an instance of %s\" % ( option , string_type . __name__ ) )\n", "title": "", "metadata": ""}
{"_id": "a11d3d9e303e4f231fbde60293e97f36", "text": "def is_archlinux ( ) : if platform . system ( ) . lower ( ) == 'linux' : if platform . linux_distribution ( ) == ( '' , '' , '' ) : # undefined distribution. Fixed in python 3. if os . path . exists ( '/etc/arch-release' ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "e462c5cd977dd6f241bc833594168f24", "text": "def now_time ( str = False ) : if str : return datetime . datetime . now ( ) . strftime ( \"%Y-%m-%d %H:%M:%S\" ) return datetime . datetime . now ( )\n", "title": "", "metadata": ""}
{"_id": "9c96ca243b0daa5c25c975221cf9462a", "text": "def pprint_for_ordereddict ( ) : od_saved = OrderedDict . __repr__ try : OrderedDict . __repr__ = dict . __repr__ yield finally : OrderedDict . __repr__ = od_saved\n", "title": "", "metadata": ""}
{"_id": "821398d0407f6a556efd67ea65c3486a", "text": "def flatten_dict_join_keys ( dct , join_symbol = \" \" ) : return dict ( flatten_dict ( dct , join = lambda a , b : a + join_symbol + b ) )\n", "title": "", "metadata": ""}
{"_id": "57a7f95ca48f5d8489b340b5dd6f5c9a", "text": "def exit_if_missing_graphviz ( self ) : ( out , err ) = utils . capture_shell ( \"which dot\" ) if \"dot\" not in out : ui . error ( c . MESSAGES [ \"dot_missing\" ] )\n", "title": "", "metadata": ""}
{"_id": "3d1d5b866186becca293e6aa7adfa0d0", "text": "def cleanLines ( source , lineSep = os . linesep ) : stripped = ( line . strip ( lineSep ) for line in source ) return ( line for line in stripped if len ( line ) != 0 )\n", "title": "", "metadata": ""}
{"_id": "2412b2a8d27c7ed2e0ac98589614e250", "text": "def print_float ( self , value , decimal_digits = 2 , justify_right = True ) : format_string = '{{0:0.{0}F}}' . format ( decimal_digits ) self . print_number_str ( format_string . format ( value ) , justify_right )\n", "title": "", "metadata": ""}
{"_id": "1ef466bc1b50b06ed3268e4f3df0520b", "text": "def dtypes ( self ) : return [ ( str ( f . name ) , f . dataType . simpleString ( ) ) for f in self . schema . fields ]\n", "title": "", "metadata": ""}
{"_id": "443fb1ab30cce62ce93d241c10a04d84", "text": "def to_list ( self ) : return [ [ int ( self . table . cell_values [ 0 ] [ 1 ] ) , int ( self . table . cell_values [ 0 ] [ 2 ] ) ] , [ int ( self . table . cell_values [ 1 ] [ 1 ] ) , int ( self . table . cell_values [ 1 ] [ 2 ] ) ] ]\n", "title": "", "metadata": ""}
{"_id": "c3670584537d60bdb0d2f0b4027d96a2", "text": "def is_dataframe ( obj ) : try : # This is the best method of type checking from pandas import DataFrame return isinstance ( obj , DataFrame ) except ImportError : # Pandas is not a dependency, so this is scary return obj . __class__ . __name__ == \"DataFrame\"\n", "title": "", "metadata": ""}
{"_id": "0c3cd83d263205a1408067c07379e8ab", "text": "def transpose ( table ) : t = [ ] for i in range ( 0 , len ( table [ 0 ] ) ) : t . append ( [ row [ i ] for row in table ] ) return t\n", "title": "", "metadata": ""}
{"_id": "0aee47141f2713d0d1aa52ff060b6b98", "text": "def is_iterable ( value ) : return isinstance ( value , np . ndarray ) or isinstance ( value , list ) or isinstance ( value , tuple ) , value\n", "title": "", "metadata": ""}
{"_id": "ae4aae0c7acc4b5e0f336333f6e88f17", "text": "def dict_hash ( dct ) : dct_s = json . dumps ( dct , sort_keys = True ) try : m = md5 ( dct_s ) except TypeError : m = md5 ( dct_s . encode ( ) ) return m . hexdigest ( )\n", "title": "", "metadata": ""}
{"_id": "f75317823b6eaa9a50c9c76f9c577eb2", "text": "def get_pij_matrix ( t , diag , A , A_inv ) : return A . dot ( np . diag ( np . exp ( diag * t ) ) ) . dot ( A_inv )\n", "title": "", "metadata": ""}
{"_id": "ff377422a00274f7c848e7d4115b9ded", "text": "def _comment ( string ) : lines = [ line . strip ( ) for line in string . splitlines ( ) ] return \"# \" + ( \"%s# \" % linesep ) . join ( lines )\n", "title": "", "metadata": ""}
{"_id": "82d251718f286d51b4f398b20085e23c", "text": "def comma_delimited_to_list ( list_param ) : if isinstance ( list_param , list ) : return list_param if isinstance ( list_param , str ) : return list_param . split ( ',' ) else : return [ ]\n", "title": "", "metadata": ""}
{"_id": "9f4b5341e09b89b082206211b12f4eaa", "text": "def timestamp_from_datetime ( dt ) : try : utc_dt = dt . astimezone ( pytz . utc ) except ValueError : utc_dt = dt . replace ( tzinfo = pytz . utc ) return timegm ( utc_dt . timetuple ( ) )\n", "title": "", "metadata": ""}
{"_id": "781bd22568e8a85e6ad6c6d3a4f9e20e", "text": "def pairwise ( iterable ) : first , second = tee ( iterable ) next ( second , None ) return zip ( first , second )\n", "title": "", "metadata": ""}
{"_id": "50732007faa9f489fc269df9dac948cc", "text": "def validate ( request : Union [ Dict , List ] , schema : dict ) -> Union [ Dict , List ] : jsonschema_validate ( request , schema ) return request\n", "title": "", "metadata": ""}
{"_id": "6c7a090335a9dca685c1a989131dae20", "text": "def translate_fourier ( image , dx ) : N = image . shape [ 0 ] f = 2 * np . pi * np . fft . fftfreq ( N ) kx , ky , kz = np . meshgrid ( * ( f , ) * 3 , indexing = 'ij' ) kv = np . array ( [ kx , ky , kz ] ) . T q = np . fft . fftn ( image ) * np . exp ( - 1.j * ( kv * dx ) . sum ( axis = - 1 ) ) . T return np . real ( np . fft . ifftn ( q ) )\n", "title": "", "metadata": ""}
{"_id": "2939982d2671210e5557504446f61230", "text": "def set_ylimits ( self , row , column , min = None , max = None ) : subplot = self . get_subplot_at ( row , column ) subplot . set_ylimits ( min , max )\n", "title": "", "metadata": ""}
{"_id": "0ece745ca9539b2dfc048c21c0712bac", "text": "def LinSpace ( start , stop , num ) : return np . linspace ( start , stop , num = num , dtype = np . float32 ) ,\n", "title": "", "metadata": ""}
{"_id": "dba22ee3feaf895f114558c9442674e5", "text": "def isfile_notempty ( inputfile : str ) -> bool : try : return isfile ( inputfile ) and getsize ( inputfile ) > 0 except TypeError : raise TypeError ( 'inputfile is not a valid type' )\n", "title": "", "metadata": ""}
{"_id": "ab6fe7ebd0f8145a326fdf73c6c75e62", "text": "def config_parser_to_dict ( config_parser ) : response = { } for section in config_parser . sections ( ) : for option in config_parser . options ( section ) : response . setdefault ( section , { } ) [ option ] = config_parser . get ( section , option ) return response\n", "title": "", "metadata": ""}
{"_id": "c4505291c04fba8a13020b07e46e9aab", "text": "def remove_hop_by_hop_headers ( headers ) : headers [ : ] = [ ( key , value ) for key , value in headers if not is_hop_by_hop_header ( key ) ]\n", "title": "", "metadata": ""}
{"_id": "92fd55fbdb9852f0b6b9fb456ca7f70b", "text": "def bulk_query ( self , query , * multiparams ) : with self . get_connection ( ) as conn : conn . bulk_query ( query , * multiparams )\n", "title": "", "metadata": ""}
{"_id": "a3a32c29a6834105ef1f7fe01053b648", "text": "def all_equal ( arg1 , arg2 ) : if all ( hasattr ( el , '_infinitely_iterable' ) for el in [ arg1 , arg2 ] ) : return arg1 == arg2 try : return all ( a1 == a2 for a1 , a2 in zip ( arg1 , arg2 ) ) except TypeError : return arg1 == arg2\n", "title": "", "metadata": ""}
{"_id": "9adf07798df4e7dc078844cb59d93855", "text": "def unsort_vector ( data , indices_of_increasing ) : return numpy . array ( [ data [ indices_of_increasing . index ( i ) ] for i in range ( len ( data ) ) ] )\n", "title": "", "metadata": ""}
{"_id": "73f0432318931729d41b2ff41fba6030", "text": "def assert_or_raise ( stmt : bool , exception : Exception , * exception_args , * * exception_kwargs ) -> None : if not stmt : raise exception ( * exception_args , * * exception_kwargs )\n", "title": "", "metadata": ""}
{"_id": "067057ae08ba813ac1bc7d5b424f63c9", "text": "def elliot_function ( signal , derivative = False ) : s = 1 # steepness abs_signal = ( 1 + np . abs ( signal * s ) ) if derivative : return 0.5 * s / abs_signal ** 2 else : # Return the activation signal return 0.5 * ( signal * s ) / abs_signal + 0.5\n", "title": "", "metadata": ""}
{"_id": "277f690da40e297e0238b22a1fcf14cd", "text": "def name_is_valid ( name ) : # The name can only be 80 characters long. if len ( name ) > MAX_NAME_LENGTH : return False return bool ( NAME_VALID_CHARS_REGEX . match ( name ) )\n", "title": "", "metadata": ""}
{"_id": "7ed2802494909bed7be39844a15603ad", "text": "def _xxrange ( self , start , end , step_count ) : _step = ( end - start ) / float ( step_count ) return ( start + ( i * _step ) for i in xrange ( int ( step_count ) ) )\n", "title": "", "metadata": ""}
{"_id": "92bd88d2b8ec5f0f3b17302b3c734f8b", "text": "def Max ( a , axis , keep_dims ) : return np . amax ( a , axis = axis if not isinstance ( axis , np . ndarray ) else tuple ( axis ) , keepdims = keep_dims ) ,\n", "title": "", "metadata": ""}
{"_id": "a0700ab6d27ff3f70a9a65321befdfad", "text": "def _rescale_array ( self , array , scale , zero ) : if scale != 1.0 : sval = numpy . array ( scale , dtype = array . dtype ) array *= sval if zero != 0.0 : zval = numpy . array ( zero , dtype = array . dtype ) array += zval\n", "title": "", "metadata": ""}
{"_id": "9b15407b0d4192d774d4fc05de9ac861", "text": "def has_edge ( self , p_from , p_to ) : return p_from in self . _edges and p_to in self . _edges [ p_from ]\n", "title": "", "metadata": ""}
{"_id": "4ade47a63a89d2146e039e1d849cbea9", "text": "def graphql_queries_to_json ( * queries ) : rtn = { } for i , query in enumerate ( queries ) : rtn [ \"q{}\" . format ( i ) ] = query . value return json . dumps ( rtn )\n", "title": "", "metadata": ""}
{"_id": "b55a10314c377c4e14a0b0919f85e2ce", "text": "def go_to_line ( self , line ) : cursor = self . textCursor ( ) cursor . setPosition ( self . document ( ) . findBlockByNumber ( line - 1 ) . position ( ) ) self . setTextCursor ( cursor ) return True\n", "title": "", "metadata": ""}
{"_id": "26f8f443afcb89e4478acbe236a12044", "text": "def needs_update ( self , cache_key ) : if not self . cacheable ( cache_key ) : # An uncacheable CacheKey is always out of date. return True return self . _read_sha ( cache_key ) != cache_key . hash\n", "title": "", "metadata": ""}
{"_id": "2486ea79a7b10427b0d431256a4eb2e2", "text": "def parse ( self , s ) : return datetime . datetime . strptime ( s , self . date_format ) . date ( )\n", "title": "", "metadata": ""}
{"_id": "2861ef10bf431850d394db72b4b2dc72", "text": "def get_current_branch ( ) : cmd = [ \"git\" , \"rev-parse\" , \"--abbrev-ref\" , \"HEAD\" ] output = subprocess . check_output ( cmd , stderr = subprocess . STDOUT ) return output . strip ( ) . decode ( \"utf-8\" )\n", "title": "", "metadata": ""}
{"_id": "6d5fc74f385f2e3bb34701346bc27cf9", "text": "def __init__ ( self , master = None , compound = tk . RIGHT , autohidescrollbar = True , * * kwargs ) : ttk . Frame . __init__ ( self , master ) self . columnconfigure ( 1 , weight = 1 ) self . rowconfigure ( 0 , weight = 1 ) self . listbox = tk . Listbox ( self , * * kwargs ) if autohidescrollbar : self . scrollbar = AutoHideScrollbar ( self , orient = tk . VERTICAL , command = self . listbox . yview ) else : self . scrollbar = ttk . Scrollbar ( self , orient = tk . VERTICAL , command = self . listbox . yview ) self . config_listbox ( yscrollcommand = self . scrollbar . set ) if compound is not tk . LEFT and compound is not tk . RIGHT : raise ValueError ( \"Invalid compound value passed: {0}\" . format ( compound ) ) self . __compound = compound self . _grid_widgets ( )\n", "title": "", "metadata": ""}
{"_id": "65810a6e649fd8d0501d56ff887e17d6", "text": "def load ( self , name ) : name = ctypes . util . find_library ( name ) return ctypes . cdll . LoadLibrary ( name )\n", "title": "", "metadata": ""}
{"_id": "f93112441d5d9ba4098d36799290fa35", "text": "def recursively_get_files_from_directory ( directory ) : return [ os . path . join ( root , filename ) for root , directories , filenames in os . walk ( directory ) for filename in filenames ]\n", "title": "", "metadata": ""}
{"_id": "6cedd458824c5acdcd34692394eb1b20", "text": "def string_list_to_array ( l ) : result = javabridge . get_env ( ) . make_object_array ( len ( l ) , javabridge . get_env ( ) . find_class ( \"java/lang/String\" ) ) for i in range ( len ( l ) ) : javabridge . get_env ( ) . set_object_array_element ( result , i , javabridge . get_env ( ) . new_string_utf ( l [ i ] ) ) return result\n", "title": "", "metadata": ""}
{"_id": "0141e5f2c96e5706e039dda61de40b9a", "text": "def display ( self ) : w , h = self . session . window_size ( ) return Display ( w * self . scale , h * self . scale )\n", "title": "", "metadata": ""}
{"_id": "07f6105fe3859f9680314df23c35fb90", "text": "def dimensions ( self ) : size = self . pdf . getPage ( 0 ) . mediaBox return { 'w' : float ( size [ 2 ] ) , 'h' : float ( size [ 3 ] ) }\n", "title": "", "metadata": ""}
{"_id": "e42f724382148d8c1661e1f71e0d9413", "text": "def c2u ( name ) : s1 = re . sub ( '(.)([A-Z][a-z]+)' , r'\\1_\\2' , name ) s1 = re . sub ( '([a-z0-9])([A-Z])' , r'\\1_\\2' , s1 ) . lower ( ) return s1\n", "title": "", "metadata": ""}
{"_id": "17bf06e481d132c51c1b429be06db571", "text": "def energy_string_to_float ( string ) : energy_re = re . compile ( \"(-?\\d+\\.\\d+)\" ) return float ( energy_re . match ( string ) . group ( 0 ) )\n", "title": "", "metadata": ""}
{"_id": "d3f512bd0e04ef345ff65516015b1e43", "text": "def _dump_enum ( self , e , top = '' ) : self . _print ( ) self . _print ( 'enum {} {{' . format ( e . name ) ) self . defines . append ( '{}.{}' . format ( top , e . name ) ) self . tabs += 1 for v in e . value : self . _print ( '{} = {};' . format ( v . name , v . number ) ) self . tabs -= 1 self . _print ( '}' )\n", "title": "", "metadata": ""}
{"_id": "66bfdf8293a4c083beb63649adce493f", "text": "def template_substitute ( text , * * kwargs ) : for name , value in kwargs . items ( ) : placeholder_pattern = \"{%s}\" % name if placeholder_pattern in text : text = text . replace ( placeholder_pattern , value ) return text\n", "title": "", "metadata": ""}
{"_id": "3628de229023a7777c89aed4a3156f68", "text": "def get_absolute_path ( * args ) : directory = os . path . dirname ( os . path . abspath ( __file__ ) ) return os . path . join ( directory , * args )\n", "title": "", "metadata": ""}
{"_id": "5964739561a6220f12ad3bf638c2ad58", "text": "def unit_key_from_name ( name ) : result = name for old , new in six . iteritems ( UNIT_KEY_REPLACEMENTS ) : result = result . replace ( old , new ) # Collapse redundant underscores and convert to uppercase. result = re . sub ( r'_+' , '_' , result . upper ( ) ) return result\n", "title": "", "metadata": ""}
{"_id": "a24f91c198fee8f8e7ad1b24f01cf728", "text": "def findMax ( arr ) : out = np . zeros ( shape = arr . shape , dtype = bool ) _calcMax ( arr , out ) return out\n", "title": "", "metadata": ""}
{"_id": "8f57079ab90b57306429fccb59a0e7a6", "text": "def handle_test ( self , command , * * options ) : # can't be async for testing config = { \"async_mode\" : False } for key in ( \"service_name\" , \"secret_token\" ) : if options . get ( key ) : config [ key ] = options [ key ] client = DjangoClient ( * * config ) client . error_logger = ColoredLogger ( self . stderr ) client . logger = ColoredLogger ( self . stderr ) self . write ( \"Trying to send a test error to APM Server using these settings:\\n\\n\" \"SERVICE_NAME:\\t%s\\n\" \"SECRET_TOKEN:\\t%s\\n\" \"SERVER:\\t\\t%s\\n\\n\" % ( client . config . service_name , client . config . secret_token , client . config . server_url ) ) try : raise TestException ( \"Hi there!\" ) except TestException : client . capture_exception ( ) if not client . error_logger . errors : self . write ( \"Success! We tracked the error successfully! You should be\" \" able to see it in a few seconds at the above URL\" ) finally : client . close ( )\n", "title": "", "metadata": ""}
{"_id": "f369332eff7b3565319792d7c3b38023", "text": "def handle_whitespace ( text ) : text = re_retab . sub ( sub_retab , text ) text = re_whitespace . sub ( '' , text ) . strip ( ) return text\n", "title": "", "metadata": ""}
{"_id": "a9fe704bc71ec8311f6d7b553e996a96", "text": "def roc_auc ( y_true , y_score ) : notnull = ~ np . isnan ( y_true ) fpr , tpr , thresholds = sklearn . metrics . roc_curve ( y_true [ notnull ] , y_score [ notnull ] ) return sklearn . metrics . auc ( fpr , tpr )\n", "title": "", "metadata": ""}
{"_id": "0d89475db889fabfcd1b4f17883cc9a8", "text": "def _uniform_phi ( M ) : return np . random . uniform ( - np . pi , np . pi , M )\n", "title": "", "metadata": ""}
{"_id": "85af0697c0c1289d13ab9f0b9166fea3", "text": "def getPrimeFactors ( n ) : lo = [ 1 ] n2 = n // 2 k = 2 for k in range ( 2 , n2 + 1 ) : if ( n // k ) * k == n : lo . append ( k ) return lo + [ n , ]\n", "title": "", "metadata": ""}
{"_id": "09fdc8e35419f4205f9c369544459769", "text": "def pad_hex ( value , bit_size ) : value = remove_0x_prefix ( value ) return add_0x_prefix ( value . zfill ( int ( bit_size / 4 ) ) )\n", "title": "", "metadata": ""}
{"_id": "5bfe81525863a2e340dbab4a8206df1c", "text": "def get_decimal_quantum ( precision ) : assert isinstance ( precision , ( int , decimal . Decimal ) ) return decimal . Decimal ( 10 ) ** ( - precision )\n", "title": "", "metadata": ""}
{"_id": "17ff78549b044f0a4afda4d1f06f2a1d", "text": "def tpr ( y , z ) : tp , tn , fp , fn = contingency_table ( y , z ) return tp / ( tp + fn )\n", "title": "", "metadata": ""}
{"_id": "edbcabd617573b1761cd54d2c5a0126d", "text": "def param ( self , param , kwargs , default_value = False ) : if param in kwargs : value = kwargs [ param ] del kwargs [ param ] else : value = default_value setattr ( self , param , value )\n", "title": "", "metadata": ""}
{"_id": "059f7280e6feba10db92426b92efadb8", "text": "def report_stdout ( host , stdout ) : lines = stdout . readlines ( ) if lines : print ( \"STDOUT from {host}:\" . format ( host = host ) ) for line in lines : print ( line . rstrip ( ) , file = sys . stdout )\n", "title": "", "metadata": ""}
{"_id": "5815e275e7337d854b7dd6a4fa9e06be", "text": "def log_loss ( preds , labels ) : log_likelihood = np . sum ( labels * np . log ( preds ) ) / len ( preds ) return - log_likelihood\n", "title": "", "metadata": ""}
{"_id": "3eeabd1b6df21ee3e63e00e140cad043", "text": "def read_data ( file , endian , num = 1 ) : res = struct . unpack ( endian + 'L' * num , file . read ( num * 4 ) ) if len ( res ) == 1 : return res [ 0 ] return res\n", "title": "", "metadata": ""}
{"_id": "d5d570248087c97d23a53716dd454931", "text": "def format_line ( data , linestyle ) : return linestyle . begin + linestyle . sep . join ( data ) + linestyle . end\n", "title": "", "metadata": ""}
{"_id": "33f24a621aedc994bf8511a04a062eb9", "text": "def now ( timezone = None ) : d = datetime . datetime . utcnow ( ) if not timezone : return d return to_timezone ( d , timezone ) . replace ( tzinfo = None )\n", "title": "", "metadata": ""}
{"_id": "7994495223d93f9bd9ca556f1bf945ca", "text": "def get_public_members ( obj ) : return { attr : getattr ( obj , attr ) for attr in dir ( obj ) if not attr . startswith ( \"_\" ) and not hasattr ( getattr ( obj , attr ) , '__call__' ) }\n", "title": "", "metadata": ""}
{"_id": "fd8c16354b8f5fe11eec1c6aefff02de", "text": "def wrap ( string , length , indent ) : newline = \"\\n\" + \" \" * indent return newline . join ( ( string [ i : i + length ] for i in range ( 0 , len ( string ) , length ) ) )\n", "title": "", "metadata": ""}
{"_id": "021e9338b7593e7eac5eb9943c84947c", "text": "def _skip_section ( self ) : self . _last = self . _f . readline ( ) while len ( self . _last ) > 0 and len ( self . _last [ 0 ] . strip ( ) ) == 0 : self . _last = self . _f . readline ( )\n", "title": "", "metadata": ""}
{"_id": "d7ab3617ea34c49226a8c509a09bd035", "text": "def validate ( raw_schema , target = None , * * kwargs ) : schema = schema_validator ( raw_schema , * * kwargs ) if target is not None : validate_object ( target , schema = schema , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "7bb1bdf7c176b18459ad65c1b8af6b4f", "text": "def join_field ( path ) : output = \".\" . join ( [ f . replace ( \".\" , \"\\\\.\" ) for f in path if f != None ] ) return output if output else \".\"\n", "title": "", "metadata": ""}
{"_id": "21235f811b8469624d60069e7e1dbad7", "text": "def __iter__ ( self ) : return iter ( [ v for k , v in sorted ( self . _modes . items ( ) ) ] )\n", "title": "", "metadata": ""}
{"_id": "f87b94733c39b4a79d65aa23e8e145ab", "text": "def _prm_get_longest_stringsize ( string_list ) : maxlength = 1 for stringar in string_list : if isinstance ( stringar , np . ndarray ) : if stringar . ndim > 0 : for string in stringar . ravel ( ) : maxlength = max ( len ( string ) , maxlength ) else : maxlength = max ( len ( stringar . tolist ( ) ) , maxlength ) else : maxlength = max ( len ( stringar ) , maxlength ) # Make the string Col longer than needed in order to allow later on slightly larger strings return int ( maxlength * 1.5 )\n", "title": "", "metadata": ""}
{"_id": "95baa743cacb78a997526d5144d95d86", "text": "async def wait_and_quit ( loop ) : from pylp . lib . tasks import running if running : await asyncio . wait ( map ( lambda runner : runner . future , running ) )\n", "title": "", "metadata": ""}
{"_id": "65391da6206179d20260b8fdecc82c87", "text": "def _EnforceProcessMemoryLimit ( self , memory_limit ) : # Resource is not supported on Windows. if resource : if memory_limit is None : memory_limit = 4 * 1024 * 1024 * 1024 elif memory_limit == 0 : memory_limit = resource . RLIM_INFINITY resource . setrlimit ( resource . RLIMIT_DATA , ( memory_limit , memory_limit ) )\n", "title": "", "metadata": ""}
{"_id": "e488cf7f78310882ab94c3bea44d7247", "text": "def convert_tstamp ( response ) : if response is None : # Allow passing None to convert_tstamp() return response # Overrides the set timezone to UTC - I think... tz = timezone . utc if settings . USE_TZ else None return datetime . datetime . fromtimestamp ( response , tz )\n", "title": "", "metadata": ""}
{"_id": "8b9db2243d974462225e1527ada30f4d", "text": "def print_images ( self , * printable_images ) : printable_image = reduce ( lambda x , y : x . append ( y ) , list ( printable_images ) ) self . print_image ( printable_image )\n", "title": "", "metadata": ""}
{"_id": "39d816ac7b2784619c317b27856277ec", "text": "def ci ( a , which = 95 , axis = None ) : p = 50 - which / 2 , 50 + which / 2 return percentiles ( a , p , axis )\n", "title": "", "metadata": ""}
{"_id": "d9c0ede41cbdcc921ac0d91adbf84166", "text": "def to_bytes ( data : Any ) -> bytearray : # noqa if isinstance ( data , int ) : return bytearray ( [ data ] ) return bytearray ( data , encoding = 'latin-1' )\n", "title": "", "metadata": ""}
{"_id": "08097d137c85f7236e842283fc9ee322", "text": "def disown ( cmd ) : subprocess . Popen ( cmd , stdout = subprocess . DEVNULL , stderr = subprocess . DEVNULL )\n", "title": "", "metadata": ""}
{"_id": "9e408f25aa9c6efc0126040196469b1c", "text": "def venv ( ) : try : import virtualenv # NOQA except ImportError : sh ( \"%s -m pip install virtualenv\" % PYTHON ) if not os . path . isdir ( \"venv\" ) : sh ( \"%s -m virtualenv venv\" % PYTHON ) sh ( \"venv\\\\Scripts\\\\pip install -r %s\" % ( REQUIREMENTS_TXT ) )\n", "title": "", "metadata": ""}
{"_id": "bd995e9bb58196fad683c1322f577468", "text": "def normalize ( self ) : if self . preprocessed_data . empty : data = self . original_data else : data = self . preprocessed_data data = pd . DataFrame ( preprocessing . normalize ( data ) , columns = data . columns , index = data . index ) self . preprocessed_data = data\n", "title": "", "metadata": ""}
{"_id": "c7b7b49fb8f3974b802f66728e10edb7", "text": "def pack_bits ( longbits ) : byte = longbits & ( 0x0101010101010101 ) byte = ( byte | ( byte >> 7 ) ) & ( 0x0003000300030003 ) byte = ( byte | ( byte >> 14 ) ) & ( 0x0000000f0000000f ) byte = ( byte | ( byte >> 28 ) ) & ( 0x00000000000000ff ) return byte\n", "title": "", "metadata": ""}
{"_id": "3ec775b65cd5623d662391327cce4f8c", "text": "def get_parent_var ( name , global_ok = False , default = None , skip_frames = 0 ) : scope = get_parent_scope_from_var ( name , global_ok = global_ok , skip_frames = skip_frames + 1 ) if not scope : return default if name in scope . locals : return scope . locals . get ( name , default ) return scope . globals . get ( name , default )\n", "title": "", "metadata": ""}
{"_id": "c25195ade3ff85308e03aab7e53a0644", "text": "def less_strict_bool ( x ) : if x is None : return False elif x is True or x is False : return x else : return strict_bool ( x )\n", "title": "", "metadata": ""}
{"_id": "3d4726d5ef28b1098d05ca39f2200c2d", "text": "def fast_exit ( code ) : sys . stdout . flush ( ) sys . stderr . flush ( ) os . _exit ( code )\n", "title": "", "metadata": ""}
{"_id": "92870840ed12d6ae418e6088f849610c", "text": "def validate_email ( email ) : from django . core . validators import validate_email from django . core . exceptions import ValidationError try : validate_email ( email ) return True except ValidationError : return False\n", "title": "", "metadata": ""}
{"_id": "7408aea1cc8a07ecf093c727357167b9", "text": "def touch ( ) : from . models import Bucket bucket = Bucket . create ( ) db . session . commit ( ) click . secho ( str ( bucket ) , fg = 'green' )\n", "title": "", "metadata": ""}
{"_id": "870a2fee8674016d46ecd63978aa099a", "text": "def update ( packages , env = None , user = None ) : packages = ' ' . join ( packages . split ( ',' ) ) cmd = _create_conda_cmd ( 'update' , args = [ packages , '--yes' , '-q' ] , env = env , user = user ) return _execcmd ( cmd , user = user )\n", "title": "", "metadata": ""}
{"_id": "6d75f5332f080a640915a2d96e443f5f", "text": "def _mid ( pt1 , pt2 ) : ( x0 , y0 ) , ( x1 , y1 ) = pt1 , pt2 return 0.5 * ( x0 + x1 ) , 0.5 * ( y0 + y1 )\n", "title": "", "metadata": ""}
{"_id": "e0e6d2e43faa163504cbddb4ff0641a2", "text": "def wait_until_exit ( self ) : [ t . join ( ) for t in self . threads ] self . threads = list ( )\n", "title": "", "metadata": ""}
{"_id": "60d86261c5bec3ce48ce1c94d2f0b620", "text": "def from_file ( filename ) : f = open ( filename , 'r' ) j = json . load ( f ) f . close ( ) return from_dict ( j )\n", "title": "", "metadata": ""}
{"_id": "7eb6c2b36719c1221455e7a41a55a6f8", "text": "def is_full_slice ( obj , l ) : return ( isinstance ( obj , slice ) and obj . start == 0 and obj . stop == l and obj . step is None )\n", "title": "", "metadata": ""}
{"_id": "5984c7dceacd86ba2c63fdf10888732c", "text": "def get_image_dimension ( self , url ) : w_h = ( None , None ) try : if url . startswith ( '//' ) : url = 'http:' + url data = requests . get ( url ) . content im = Image . open ( BytesIO ( data ) ) w_h = im . size except Exception : logger . warning ( \"Error getting image size {}\" . format ( url ) , exc_info = True ) return w_h\n", "title": "", "metadata": ""}
{"_id": "cfa7601910b16d636d51912f21e997e7", "text": "def get_property ( self , filename ) : with open ( self . filepath ( filename ) ) as f : return f . read ( ) . strip ( )\n", "title": "", "metadata": ""}
{"_id": "d1ac0a25d88368458f32a4d4ce3f88c2", "text": "def to_list ( var ) : if var is None : return [ ] if isinstance ( var , str ) : var = var . split ( '\\n' ) elif not isinstance ( var , list ) : try : var = list ( var ) except TypeError : raise ValueError ( \"{} cannot be converted to the list.\" . format ( var ) ) return var\n", "title": "", "metadata": ""}
{"_id": "4f90876c59620a25a6a6cd52c339d4ed", "text": "def _renamer ( self , tre ) : ## get the tre with numbered tree tip labels names = tre . get_leaves ( ) ## replace numbered names with snames for name in names : name . name = self . samples [ int ( name . name ) ] ## return with only topology and leaf labels return tre . write ( format = 9 )\n", "title": "", "metadata": ""}
{"_id": "b2a87b923f052af6d2bd08ebb47154f3", "text": "def vertical_percent ( plot , percent = 0.1 ) : plot_bottom , plot_top = plot . get_ylim ( ) return percent * ( plot_top - plot_bottom )\n", "title": "", "metadata": ""}
{"_id": "fd5a838342108e869601049673261b5e", "text": "def __getattr__ ( self , item : str ) -> Callable : return functools . partial ( self . call_action , item )\n", "title": "", "metadata": ""}
{"_id": "2dd005eacdfb7739259bbd6761a7fdbb", "text": "def dag_longest_path ( graph , source , target ) : if source == target : return [ source ] allpaths = nx . all_simple_paths ( graph , source , target ) longest_path = [ ] for l in allpaths : if len ( l ) > len ( longest_path ) : longest_path = l return longest_path\n", "title": "", "metadata": ""}
{"_id": "c2fce49048d0101f5e965b3b6a447a34", "text": "def classnameify ( s ) : return '' . join ( w if w in ACRONYMS else w . title ( ) for w in s . split ( '_' ) )\n", "title": "", "metadata": ""}
{"_id": "1c6908a9e225a3a3fb8f3d713765803d", "text": "def delete_index ( index ) : logger . info ( \"Deleting search index: '%s'\" , index ) client = get_client ( ) return client . indices . delete ( index = index )\n", "title": "", "metadata": ""}
{"_id": "71ad5f759153bdd6e43e33b44a053a51", "text": "def to_jupyter ( graph : BELGraph , chart : Optional [ str ] = None ) -> Javascript : with open ( os . path . join ( HERE , 'render_with_javascript.js' ) , 'rt' ) as f : js_template = Template ( f . read ( ) ) return Javascript ( js_template . render ( * * _get_context ( graph , chart = chart ) ) )\n", "title": "", "metadata": ""}
{"_id": "333151da923bf08f1659acb2db57545e", "text": "def seq_to_str ( obj , sep = \",\" ) : if isinstance ( obj , string_classes ) : return obj elif isinstance ( obj , ( list , tuple ) ) : return sep . join ( [ str ( x ) for x in obj ] ) else : return str ( obj )\n", "title": "", "metadata": ""}
{"_id": "d5fa0767589ca2c0e1ccbeeaa2ae1653", "text": "def uncheck ( self , locator = None , allow_label_click = None , * * kwargs ) : self . _check_with_label ( \"checkbox\" , False , locator = locator , allow_label_click = allow_label_click , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "96bd9c2976656070c83e88592c9f5333", "text": "def intty ( cls ) : # XXX: temporary hack until we can detect if we are in a pipe or not return True if hasattr ( sys . stdout , 'isatty' ) and sys . stdout . isatty ( ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "0f7e5812b14610ad2f8e5be5c38fcfc3", "text": "def remove_prefix ( text , prefix ) : null , prefix , rest = text . rpartition ( prefix ) return rest\n", "title": "", "metadata": ""}
{"_id": "a1ec4f9b43cd75add864b4e029405652", "text": "def _get_minidom_tag_value ( station , tag_name ) : tag = station . getElementsByTagName ( tag_name ) [ 0 ] . firstChild if tag : return tag . nodeValue return None\n", "title": "", "metadata": ""}
{"_id": "43693c8a8d3620eb40fe5db317ee2eaf", "text": "def hex_to_hsv ( color ) : color = normalize ( color ) color = color [ 1 : ] # color=tuple(ord(c)/255.0 for c in color.decode('hex')) color = ( int ( color [ 0 : 2 ] , base = 16 ) / 255.0 , int ( color [ 2 : 4 ] , base = 16 ) / 255.0 , int ( color [ 4 : 6 ] , base = 16 ) / 255.0 ) return colorsys . rgb_to_hsv ( * color )\n", "title": "", "metadata": ""}
{"_id": "9b9699b7657f3a872861d022fcf15370", "text": "def truncate ( self , table ) : if isinstance ( table , ( list , set , tuple ) ) : for t in table : self . _truncate ( t ) else : self . _truncate ( table )\n", "title": "", "metadata": ""}
{"_id": "a0b30510513e92ea196bb9a669ef50bb", "text": "def sort_data ( x , y ) : xy = sorted ( zip ( x , y ) ) x , y = zip ( * xy ) return x , y\n", "title": "", "metadata": ""}
{"_id": "e7a5f353281675902234840d7925f0cc", "text": "def url_read_text ( url , verbose = True ) : data = url_read ( url , verbose ) text = data . decode ( 'utf8' ) return text\n", "title": "", "metadata": ""}
{"_id": "0b71217a517a9feef7143cd3ff7d809c", "text": "def ma ( self ) : a = self . array return numpy . ma . MaskedArray ( a , mask = numpy . logical_not ( numpy . isfinite ( a ) ) )\n", "title": "", "metadata": ""}
{"_id": "6a66701d96f80a1895e435a68a28c3ac", "text": "def splitBy ( data , num ) : return [ data [ i : i + num ] for i in range ( 0 , len ( data ) , num ) ]\n", "title": "", "metadata": ""}
{"_id": "b0da8e3b473e883b75722c4d469be43e", "text": "def fit_gaussian ( samples , ddof = 0 ) : if len ( samples . shape ) == 1 : return np . mean ( samples ) , np . std ( samples , ddof = ddof ) return np . mean ( samples , axis = 1 ) , np . std ( samples , axis = 1 , ddof = ddof )\n", "title": "", "metadata": ""}
{"_id": "c9c2e9b2d4f9596d8cabc06f369acb5a", "text": "def reset ( self ) : self . _hline_string = None self . _row_size = None self . _header = [ ] self . _rows = [ ]\n", "title": "", "metadata": ""}
{"_id": "f223e5f7e950d666b98d653b88a79a8b", "text": "def _update_fontcolor ( self , fontcolor ) : textcolor = wx . SystemSettings_GetColour ( wx . SYS_COLOUR_WINDOWTEXT ) textcolor . SetRGB ( fontcolor ) self . textcolor_choice . SetColour ( textcolor )\n", "title": "", "metadata": ""}
{"_id": "51ace245e70b16226880706624d916ae", "text": "def sine_wave ( i , frequency = FREQUENCY , framerate = FRAMERATE , amplitude = AMPLITUDE ) : omega = 2.0 * pi * float ( frequency ) sine = sin ( omega * ( float ( i ) / float ( framerate ) ) ) return float ( amplitude ) * sine\n", "title": "", "metadata": ""}
{"_id": "d97d6c2fd1203ef57d4192a74243b341", "text": "def is_nested_object ( obj ) : if isinstance ( obj , ABCSeries ) and is_object_dtype ( obj ) : if any ( isinstance ( v , ABCSeries ) for v in obj . values ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "dd840173a9d446f34eb5496aa3c49671", "text": "def count_string_diff ( a , b ) : shortest = min ( len ( a ) , len ( b ) ) return sum ( a [ i ] != b [ i ] for i in range ( shortest ) )\n", "title": "", "metadata": ""}
{"_id": "ce21be1f5e57fa564ae85f884be4f532", "text": "def staticdir ( ) : root = os . path . abspath ( os . path . dirname ( __file__ ) ) return os . path . join ( root , \"static\" )\n", "title": "", "metadata": ""}
{"_id": "6bb21e4faecb1db659e0878bec0a007b", "text": "def set_mem_per_proc ( self , mem_mb ) : super ( ) . set_mem_per_proc ( mem_mb ) self . qparams [ \"mem_per_cpu\" ] = self . mem_per_proc\n", "title": "", "metadata": ""}
{"_id": "4d872ca41e81e938628747288797982f", "text": "def grandparent_path ( self ) : return os . path . basename ( os . path . join ( self . path , '../..' ) )\n", "title": "", "metadata": ""}
{"_id": "c1391738290479ca2d7bc97d1bbf248c", "text": "def to_json ( data ) : return json . dumps ( data , default = lambda x : x . __dict__ , sort_keys = True , indent = 4 )\n", "title": "", "metadata": ""}
{"_id": "63d96270bdfcc5f30a20e0162f7e66b1", "text": "def timespan ( start_time ) : timespan = datetime . datetime . now ( ) - start_time timespan_ms = timespan . total_seconds ( ) * 1000 return timespan_ms\n", "title": "", "metadata": ""}
{"_id": "9ef56a8c4573a07ccb4e39065366ba05", "text": "def validate ( schema , data , owner = None ) : schema . _validate ( data = data , owner = owner )\n", "title": "", "metadata": ""}
{"_id": "ee87097a53f3d586fbe052d25f2bc042", "text": "def tokenize_words ( self , text ) : return [ self . strip_punctuation ( word ) for word in text . split ( ' ' ) if self . strip_punctuation ( word ) ]\n", "title": "", "metadata": ""}
{"_id": "f703736486a64739ae76b89dd4261d17", "text": "def scroll_up ( self , locator ) : driver = self . _current_application ( ) element = self . _element_find ( locator , True , True ) driver . execute_script ( \"mobile: scroll\" , { \"direction\" : 'up' , 'element' : element . id } )\n", "title": "", "metadata": ""}
{"_id": "8327949294d4e2d98a35c2e434d964b4", "text": "def print_latex ( o ) : if can_print_latex ( o ) : s = latex ( o , mode = 'plain' ) s = s . replace ( '\\\\dag' , '\\\\dagger' ) s = s . strip ( '$' ) return '$$%s$$' % s # Fallback to the string printer return None\n", "title": "", "metadata": ""}
{"_id": "056b200efd4bb5f6a459fd211aca44a4", "text": "def is_nullable_list ( val , vtype ) : return ( isinstance ( val , list ) and any ( isinstance ( v , vtype ) for v in val ) and all ( ( isinstance ( v , vtype ) or v is None ) for v in val ) )\n", "title": "", "metadata": ""}
{"_id": "1b3f51b65a975d24377cd37f71a41750", "text": "def is_image_file_valid ( file_path_name ) : # Image.verify is only implemented for PNG images, and it only verifies # the CRC checksum in the image.  The only way to check from within # Pillow is to load the image in a try/except and check the error.  If # as much info as possible is from the image is needed, # ``ImageFile.LOAD_TRUNCATED_IMAGES=True`` needs to bet set and it # will attempt to parse as much as possible. try : with Image . open ( file_path_name ) as image : image . load ( ) except IOError : return False return True\n", "title": "", "metadata": ""}
{"_id": "0fe33a2a13f9054b630873c286421cf2", "text": "def _skip_frame ( self ) : size = self . read_size ( ) for i in range ( size + 1 ) : line = self . _f . readline ( ) if len ( line ) == 0 : raise StopIteration\n", "title": "", "metadata": ""}
{"_id": "d0d1f2127a6d4b1269b2b796e1960463", "text": "def scipy_sparse_to_spmatrix ( A ) : coo = A . tocoo ( ) SP = spmatrix ( coo . data . tolist ( ) , coo . row . tolist ( ) , coo . col . tolist ( ) , size = A . shape ) return SP\n", "title": "", "metadata": ""}
{"_id": "ab29654392f29414a493b8b8efd01896", "text": "def clear ( self ) : self . _fwdm . clear ( ) self . _invm . clear ( ) self . _sntl . nxt = self . _sntl . prv = self . _sntl\n", "title": "", "metadata": ""}
{"_id": "4cc9e67fe2b63fa50008f6d313536b3c", "text": "def get_files ( dir_name ) : return [ ( os . path . join ( '.' , d ) , [ os . path . join ( d , f ) for f in files ] ) for d , _ , files in os . walk ( dir_name ) ]\n", "title": "", "metadata": ""}
{"_id": "a2b1a3e26d3c83a27218ee1e13986d91", "text": "def ensure_us_time_resolution ( val ) : if np . issubdtype ( val . dtype , np . datetime64 ) : val = val . astype ( 'datetime64[us]' ) elif np . issubdtype ( val . dtype , np . timedelta64 ) : val = val . astype ( 'timedelta64[us]' ) return val\n", "title": "", "metadata": ""}
{"_id": "623631efcc3089c17bec26a6ed97d8a7", "text": "def _get_column_by_db_name ( cls , name ) : return cls . _columns . get ( cls . _db_map . get ( name , name ) )\n", "title": "", "metadata": ""}
{"_id": "d76d60c7f3c443d6901686b0ec19950c", "text": "def _trim ( self , somestr ) : tmp = RE_LSPACES . sub ( \"\" , somestr ) tmp = RE_TSPACES . sub ( \"\" , tmp ) return str ( tmp )\n", "title": "", "metadata": ""}
{"_id": "a859d5bcdfca972f93201a6f7e9708b3", "text": "def ratio_and_percentage ( current , total , time_remaining ) : return \"{} / {} ({}% completed)\" . format ( current , total , int ( current / total * 100 ) )\n", "title": "", "metadata": ""}
{"_id": "692c17a32dd27676e3aa04e31123e382", "text": "def click ( self ) : try : self . wait_until_clickable ( ) . web_element . click ( ) except StaleElementReferenceException : # Retry if element has changed self . web_element . click ( ) return self\n", "title": "", "metadata": ""}
{"_id": "68c97cf2960c8f6bb9e6337285c4e096", "text": "def _hue ( color , * * kwargs ) : h = colorsys . rgb_to_hls ( * [ x / 255.0 for x in color . value [ : 3 ] ] ) [ 0 ] return NumberValue ( h * 360.0 )\n", "title": "", "metadata": ""}
{"_id": "1b36758f87d6fcdc44cfaae1290f9215", "text": "def rest_put_stream ( self , url , stream , headers = None , session = None , verify = True , cert = None ) : res = session . put ( url , headers = headers , data = stream , verify = verify , cert = cert ) return res . text , res . status_code\n", "title": "", "metadata": ""}
{"_id": "50c080ed312a185ce85d7fddfc290f3e", "text": "def close ( self ) : if self . _subprocess is not None : os . killpg ( self . _subprocess . pid , signal . SIGTERM ) self . _subprocess = None\n", "title": "", "metadata": ""}
{"_id": "96e7cce08c977b8365dc583a777dc910", "text": "def cric__lasso ( ) : model = sklearn . linear_model . LogisticRegression ( penalty = \"l1\" , C = 0.002 ) # we want to explain the raw probability outputs of the trees model . predict = lambda X : model . predict_proba ( X ) [ : , 1 ] return model\n", "title": "", "metadata": ""}
{"_id": "fd9d51f0d8f554e4127ec5d963f0d0b3", "text": "def timed ( log = sys . stderr , limit = 2.0 ) : return lambda func : timeit ( func , log , limit )\n", "title": "", "metadata": ""}
{"_id": "2cae454728b52c42b2d833a8bfc63b41", "text": "def fromDict ( cls , _dict ) : obj = cls ( ) obj . __dict__ . update ( _dict ) return obj\n", "title": "", "metadata": ""}
{"_id": "859b4f0f10c9535640870b1b0e15f85c", "text": "def timedelta2millisecond ( td ) : milliseconds = td . days * 24 * 60 * 60 * 1000 milliseconds += td . seconds * 1000 milliseconds += td . microseconds / 1000 return milliseconds\n", "title": "", "metadata": ""}
{"_id": "b0bd8377790d029c9fcb3cc666d55e53", "text": "def group_by ( iterable , key_func ) : groups = ( list ( sub ) for key , sub in groupby ( iterable , key_func ) ) return zip ( groups , groups )\n", "title": "", "metadata": ""}
{"_id": "3f8aeaaf575223e23420b369894d65e6", "text": "def parse ( self ) : f = open ( self . parse_log_path , \"r\" ) self . parse2 ( f ) f . close ( )\n", "title": "", "metadata": ""}
{"_id": "ccc3f5014b012c9f574b07fa6fada32b", "text": "def EvalGaussianPdf ( x , mu , sigma ) : return scipy . stats . norm . pdf ( x , mu , sigma )\n", "title": "", "metadata": ""}
{"_id": "e7b94993c84106c06dd71b0eff551ad7", "text": "def insort_no_dup ( lst , item ) : import bisect ix = bisect . bisect_left ( lst , item ) if lst [ ix ] != item : lst [ ix : ix ] = [ item ]\n", "title": "", "metadata": ""}
{"_id": "8dd43b3d674879dc45a698c37bb358a9", "text": "def is_int_type ( val ) : try : # Python 2 return isinstance ( val , ( int , long ) ) except NameError : # Python 3 return isinstance ( val , int )\n", "title": "", "metadata": ""}
{"_id": "c6aa60f3ec879acd83beaf44f1362294", "text": "def purge_dict ( idict ) : odict = { } for key , val in idict . items ( ) : if is_null ( val ) : continue odict [ key ] = val return odict\n", "title": "", "metadata": ""}
{"_id": "0a9bbc7ba8d66d072df0cef070e74528", "text": "def html ( header_rows ) : name = 'table%d' % next ( tablecounter ) return HtmlTable ( [ map ( str , row ) for row in header_rows ] , name ) . render ( )\n", "title": "", "metadata": ""}
{"_id": "fcd8ba3c24db2d43d1e392ce5e3c5664", "text": "def getConnectionStats ( self ) : cur = self . _conn . cursor ( ) cur . execute ( \"\"\"SELECT datname,numbackends FROM pg_stat_database;\"\"\" ) rows = cur . fetchall ( ) if rows : return dict ( rows ) else : return { }\n", "title": "", "metadata": ""}
{"_id": "42bfaa6c901a04730f40b055f769bb94", "text": "def token_accuracy ( labels , outputs ) : weights = tf . to_float ( tf . not_equal ( labels , 0 ) ) return tf . metrics . accuracy ( labels , outputs , weights = weights )\n", "title": "", "metadata": ""}
{"_id": "76c779a07cef6fad1d559f8925205828", "text": "def ln_norm ( x , mu , sigma = 1.0 ) : return np . log ( stats . norm ( loc = mu , scale = sigma ) . pdf ( x ) )\n", "title": "", "metadata": ""}
{"_id": "ab3a35ff952fb14808b713e4f2807a0f", "text": "def can_elasticsearch ( record ) : search = request . _methodview . search_class ( ) search = search . get_record ( str ( record . id ) ) return search . count ( ) == 1\n", "title": "", "metadata": ""}
{"_id": "c7e6dcd384bb6919436f9c4a53eaf5ba", "text": "def compute_gradient ( self ) : delta = self . predict ( self . X ) - self . y return delta . dot ( self . X ) / len ( self . X )\n", "title": "", "metadata": ""}
{"_id": "d89db4c689a077e1b80e3c39ceef777c", "text": "def generate_id ( ) : # TODO: Use six.string_type to Py3 compat try : return unicode ( uuid1 ( ) ) . replace ( u\"-\" , u\"\" ) except NameError : return str ( uuid1 ( ) ) . replace ( u\"-\" , u\"\" )\n", "title": "", "metadata": ""}
{"_id": "36e1481878c6f60510b78ff1d8537b64", "text": "def arg_default ( * args , * * kwargs ) : parser = argparse . ArgumentParser ( ) parser . add_argument ( * args , * * kwargs ) args = vars ( parser . parse_args ( [ ] ) ) _ , default = args . popitem ( ) return default\n", "title": "", "metadata": ""}
{"_id": "3936244130f6a743a59d96c3033b1000", "text": "def numpy_aware_eq ( a , b ) : if isinstance ( a , np . ndarray ) or isinstance ( b , np . ndarray ) : return np . array_equal ( a , b ) if ( ( isinstance ( a , Iterable ) and isinstance ( b , Iterable ) ) and not isinstance ( a , str ) and not isinstance ( b , str ) ) : if len ( a ) != len ( b ) : return False return all ( numpy_aware_eq ( x , y ) for x , y in zip ( a , b ) ) return a == b\n", "title": "", "metadata": ""}
{"_id": "9ea11ca9fad8fb66e0526bd6b737e7c3", "text": "def remove_instance ( self , item ) : self . instances . remove ( item ) self . remove_item ( item )\n", "title": "", "metadata": ""}
{"_id": "c921bee6424b83efe233e3183372e17b", "text": "def generate ( env ) : cplusplus . generate ( env ) env [ 'CXX' ] = 'CC' env [ 'CXXFLAGS' ] = SCons . Util . CLVar ( '-LANG:std' ) env [ 'SHCXX' ] = '$CXX' env [ 'SHOBJSUFFIX' ] = '.o' env [ 'STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME' ] = 1\n", "title": "", "metadata": ""}
{"_id": "2c2bfa710e76c234cf694f78f1801a1f", "text": "def paren_change ( inputstring , opens = opens , closes = closes ) : count = 0 for c in inputstring : if c in opens : # open parens/brackets/braces count -= 1 elif c in closes : # close parens/brackets/braces count += 1 return count\n", "title": "", "metadata": ""}
{"_id": "d723ff2c567ed53d66ade9f5baed3f6c", "text": "def git_tag ( tag ) : print ( 'Tagging \"{}\"' . format ( tag ) ) msg = '\"Released version {}\"' . format ( tag ) Popen ( [ 'git' , 'tag' , '-s' , '-m' , msg , tag ] ) . wait ( )\n", "title": "", "metadata": ""}
{"_id": "ffb9c4232c4b5086dced454bc767946f", "text": "def on_windows ( ) : if bjam . variable ( \"NT\" ) : return True elif bjam . variable ( \"UNIX\" ) : uname = bjam . variable ( \"JAMUNAME\" ) if uname and uname [ 0 ] . startswith ( \"CYGWIN\" ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "73b106aa18ebc09f0c2e46eee50b7285", "text": "def align_to_mmap ( num , round_up ) : res = ( num // ALLOCATIONGRANULARITY ) * ALLOCATIONGRANULARITY if round_up and ( res != num ) : res += ALLOCATIONGRANULARITY # END handle size return res\n", "title": "", "metadata": ""}
{"_id": "19ad2ac9b092b10c78550e8dbc8da72b", "text": "def parse_json ( filename ) : # Regular expression for comments comment_re = re . compile ( '(^)?[^\\S\\n]*/(?:\\*(.*?)\\*/[^\\S\\n]*|/[^\\n]*)($)?' , re . DOTALL | re . MULTILINE ) with open ( filename ) as f : content = '' . join ( f . readlines ( ) ) ## Looking for comments match = comment_re . search ( content ) while match : # single line comment content = content [ : match . start ( ) ] + content [ match . end ( ) : ] match = comment_re . search ( content ) # Return json file return json . loads ( content )\n", "title": "", "metadata": ""}
{"_id": "9cb86dc660f4fd44cab4c44db6cc48f3", "text": "def stop ( self ) : if self . isPlaying is True : self . _execute ( \"stop\" ) self . _changePlayingState ( False )\n", "title": "", "metadata": ""}
{"_id": "f967d2a7386f134b5ef534c32ee053d9", "text": "def is_date_type ( cls ) : if not isinstance ( cls , type ) : return False return issubclass ( cls , date ) and not issubclass ( cls , datetime )\n", "title": "", "metadata": ""}
{"_id": "78e9b78e08622ff77c4a875404246d04", "text": "def get_code ( module ) : fp = open ( module . path ) try : return compile ( fp . read ( ) , str ( module . name ) , 'exec' ) finally : fp . close ( )\n", "title": "", "metadata": ""}
{"_id": "be52996cc5ca5364b5954ae65e6f2ffd", "text": "async def readline ( self ) : future = asyncio . Future ( ) data_available = False while True : if not data_available : if not self . my_serial . inWaiting ( ) : await asyncio . sleep ( self . sleep_tune ) else : data_available = True data = self . my_serial . readline ( ) future . set_result ( data ) else : if not future . done ( ) : await asyncio . sleep ( self . sleep_tune ) else : return future . result ( )\n", "title": "", "metadata": ""}
{"_id": "dc3bcbed736190974cb45784a262c380", "text": "def Flush ( self ) : while self . _age : node = self . _age . PopLeft ( ) self . KillObject ( node . data ) self . _hash = dict ( )\n", "title": "", "metadata": ""}
{"_id": "fe675dc76a814d11b70aacf490010c13", "text": "def uppercase_chars ( string : any ) -> str : return '' . join ( [ c if c . isupper ( ) else '' for c in str ( string ) ] )\n", "title": "", "metadata": ""}
{"_id": "290fbfa99abf0e2ac9579dce67934962", "text": "def _visual_width ( line ) : return len ( re . sub ( colorama . ansitowin32 . AnsiToWin32 . ANSI_CSI_RE , \"\" , line ) )\n", "title": "", "metadata": ""}
{"_id": "3b4a2f66cfe34b4ddcd0fea293b7e955", "text": "def datetime_to_year_quarter ( dt ) : year = dt . year quarter = int ( math . ceil ( float ( dt . month ) / 3 ) ) return ( year , quarter )\n", "title": "", "metadata": ""}
{"_id": "0ad159bb6e4d513a0ce1327f0dc3a5f4", "text": "def _uniquify ( _list ) : seen = set ( ) result = [ ] for x in _list : if x not in seen : result . append ( x ) seen . add ( x ) return result\n", "title": "", "metadata": ""}
{"_id": "09343328d5cca0987533fd78fc41c2c5", "text": "def hide ( self ) : if not HidePrevention ( self . window ) . may_hide ( ) : return self . hidden = True self . get_widget ( 'window-root' ) . unstick ( ) self . window . hide ( )\n", "title": "", "metadata": ""}
{"_id": "b2b6a6d18afdd6ecaa34e56e14768aac", "text": "def _parse_array ( self , tensor_proto ) : try : from onnx . numpy_helper import to_array except ImportError as e : raise ImportError ( \"Unable to import onnx which is required {}\" . format ( e ) ) np_array = to_array ( tensor_proto ) . reshape ( tuple ( tensor_proto . dims ) ) return mx . nd . array ( np_array )\n", "title": "", "metadata": ""}
{"_id": "b88742e36a9ccdfbc3bfcf72212a72cb", "text": "def _get_printable_columns ( columns , row ) : if not columns : return row # Extract the column values, in the order specified. return tuple ( row [ c ] for c in columns )\n", "title": "", "metadata": ""}
{"_id": "329a10e729e0429e3f920a8e1e86f023", "text": "def filter_dict_by_key ( d , keys ) : return { k : v for k , v in d . items ( ) if k in keys }\n", "title": "", "metadata": ""}
{"_id": "0fa4fd3c49cadf7cf1c9a6f0db53e16e", "text": "def is_serializable ( obj ) : if inspect . isclass ( obj ) : return Serializable . is_serializable_type ( obj ) return isinstance ( obj , Serializable ) or hasattr ( obj , '_asdict' )\n", "title": "", "metadata": ""}
{"_id": "cb83010fb57c558238423a43606e8ae7", "text": "def extract_table_names ( query ) : # a good old fashioned regex. turns out this worked better than actually parsing the code tables_blocks = re . findall ( r'(?:FROM|JOIN)\\s+(\\w+(?:\\s*,\\s*\\w+)*)' , query , re . IGNORECASE ) tables = [ tbl for block in tables_blocks for tbl in re . findall ( r'\\w+' , block ) ] return set ( tables )\n", "title": "", "metadata": ""}
{"_id": "a12f7555f666d9b276b263c8d7d8967c", "text": "def is_numeric_dtype ( dtype ) : dtype = np . dtype ( dtype ) return np . issubsctype ( getattr ( dtype , 'base' , None ) , np . number )\n", "title": "", "metadata": ""}
{"_id": "b0238bbea9864c5efd03f3e10b0b578d", "text": "def setup_environment ( ) : osinter = ostool . get_interface ( ) pypath = osinter . get_maya_envpath ( ) for p in sys . path : pypath = os . pathsep . join ( ( pypath , p ) ) os . environ [ 'PYTHONPATH' ] = pypath\n", "title": "", "metadata": ""}
{"_id": "08b4d01cacecc25f2a60934deb4f1cde", "text": "def codes_get_size ( handle , key ) : # type: (cffi.FFI.CData, str) -> int size = ffi . new ( 'size_t *' ) _codes_get_size ( handle , key . encode ( ENC ) , size ) return size [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "665400985f951d2f8fc05ca9857dc7ad", "text": "def from_dict ( cls , d ) : return cls ( * * { k : v for k , v in d . items ( ) if k in cls . ENTRIES } )\n", "title": "", "metadata": ""}
{"_id": "f0b6a4c9e82c8efe21d85b85beb37acb", "text": "def is_readable ( filename ) : return os . path . isfile ( filename ) and os . access ( filename , os . R_OK )\n", "title": "", "metadata": ""}
{"_id": "ea22901c0342032203566e4bd0920191", "text": "def return_type ( type_name , formatter = None ) : def _returns ( func ) : annotated ( func ) func . metadata . typed_returnvalue ( type_name , formatter ) return func return _returns\n", "title": "", "metadata": ""}
{"_id": "077d3bceaf34bdd410c519ecf3c7f823", "text": "def raise_ ( exception = ABSENT , * args , * * kwargs ) : if exception is ABSENT : raise else : if inspect . isclass ( exception ) : raise exception ( * args , * * kwargs ) else : if args or kwargs : raise TypeError ( \"can't pass arguments along with \" \"exception object to raise_()\" ) raise exception\n", "title": "", "metadata": ""}
{"_id": "6d8cd7dd125a4499a8d33fa6d08225fe", "text": "def serialize ( self , value , * * kwargs ) : return [ self . item_type . serialize ( val , * * kwargs ) for val in value ]\n", "title": "", "metadata": ""}
{"_id": "100243ba2430450f30649db06ea2f86f", "text": "def get_shape ( img ) : if hasattr ( img , 'shape' ) : shape = img . shape else : shape = img . get_data ( ) . shape return shape\n", "title": "", "metadata": ""}
{"_id": "6a0c1af8fb7b0c254f40a381efe56f57", "text": "def dimensions ( path ) : pdf = PdfFileReader ( path ) size = pdf . getPage ( 0 ) . mediaBox return { 'w' : float ( size [ 2 ] ) , 'h' : float ( size [ 3 ] ) }\n", "title": "", "metadata": ""}
{"_id": "86a85a1536bd81ae704ed2c7f32de6f7", "text": "def set_slug ( apps , schema_editor ) : Event = apps . get_model ( 'spectator_events' , 'Event' ) for e in Event . objects . all ( ) : e . slug = generate_slug ( e . pk ) e . save ( update_fields = [ 'slug' ] )\n", "title": "", "metadata": ""}
{"_id": "245d00853af0a38beb78cc4bede128c2", "text": "def map_tree ( visitor , tree ) : newn = [ map_tree ( visitor , node ) for node in tree . nodes ] return visitor ( tree , newn )\n", "title": "", "metadata": ""}
{"_id": "8c64c063201d5e75902407d886eebb44", "text": "def to_utc ( self , dt ) : if dt . tzinfo is None : return dt . replace ( tzinfo = self . utc ) return dt . astimezone ( self . utc )\n", "title": "", "metadata": ""}
{"_id": "e7f8b39f2548ef9ab35e2c2b958e8d1c", "text": "def timestamp_with_tzinfo ( dt ) : utc = tzutc ( ) if dt . tzinfo : dt = dt . astimezone ( utc ) . replace ( tzinfo = None ) return dt . isoformat ( ) + 'Z'\n", "title": "", "metadata": ""}
{"_id": "fd250ef6aa19780da2bde36400287ff5", "text": "def url_concat ( url , args ) : if not args : return url if url [ - 1 ] not in ( '?' , '&' ) : url += '&' if ( '?' in url ) else '?' return url + urllib . urlencode ( args )\n", "title": "", "metadata": ""}
{"_id": "6011cdb2b8c53e44496caaa164ba5dd7", "text": "def _clean_up_name ( self , name ) : for n in self . naughty : name = name . replace ( n , '_' ) return name\n", "title": "", "metadata": ""}
{"_id": "eeac17cb81863eff93a2281d22440d66", "text": "def running_containers ( name_filter : str ) -> List [ str ] : return [ container . short_id for container in docker_client . containers . list ( filters = { \"name\" : name_filter } ) ]\n", "title": "", "metadata": ""}
{"_id": "5e3c097752f601c6c7dafdd6430c1956", "text": "def add_params_to_url ( url , params ) : url_parts = list ( urlparse . urlparse ( url ) ) # get url parts query = dict ( urlparse . parse_qsl ( url_parts [ 4 ] ) ) # get url query query . update ( params ) # add new params url_parts [ 4 ] = urlencode ( query ) return urlparse . urlunparse ( url_parts )\n", "title": "", "metadata": ""}
{"_id": "64d739afef777e2d88303139f565441b", "text": "def _clean_dict ( target_dict , whitelist = None ) : assert isinstance ( target_dict , dict ) return { ustr ( k ) . strip ( ) : ustr ( v ) . strip ( ) for k , v in target_dict . items ( ) if v not in ( None , Ellipsis , [ ] , ( ) , \"\" ) and ( not whitelist or k in whitelist ) }\n", "title": "", "metadata": ""}
{"_id": "25fb9e68730aae6c5ac872c2721b75ec", "text": "def __copy__ ( self ) : return self . __class__ . load ( self . dump ( ) , context = self . context )\n", "title": "", "metadata": ""}
{"_id": "d8a438503718434cfd75a9dfbbe43405", "text": "def prefix_list ( self , prefix , values ) : return list ( map ( lambda value : prefix + \" \" + value , values ) )\n", "title": "", "metadata": ""}
{"_id": "dc9d2aca44dd97b5ae3add45818d1492", "text": "def __grid_widgets ( self ) : scrollbar_column = 0 if self . __compound is tk . LEFT else 2 self . _canvas . grid ( row = 0 , column = 1 , sticky = \"nswe\" ) self . _scrollbar . grid ( row = 0 , column = scrollbar_column , sticky = \"ns\" )\n", "title": "", "metadata": ""}
{"_id": "6425ba942dc8a8d4df2c205a162c044a", "text": "def AsPrimitiveProto ( self ) : if self . protobuf : result = self . protobuf ( ) result . ParseFromString ( self . SerializeToString ( ) ) return result\n", "title": "", "metadata": ""}
{"_id": "5fcb83a54f19384b1ff60c334a45f5ff", "text": "def unit_ball_L2 ( shape ) : x = tf . Variable ( tf . zeros ( shape ) ) return constrain_L2 ( x )\n", "title": "", "metadata": ""}
{"_id": "b66680e67603afb5154f65fb0f7ae5c4", "text": "def map_keys_deep ( f , dct ) : return _map_deep ( lambda k , v : [ f ( k , v ) , v ] , dct )\n", "title": "", "metadata": ""}
{"_id": "56f1dc6e53d0198e5ab8f535ca979a07", "text": "def from_json ( cls , json_str ) : d = json . loads ( json_str ) return cls . from_dict ( d )\n", "title": "", "metadata": ""}
{"_id": "6d5c2403c942cfa62c6325c192c2e963", "text": "def _split_python ( python ) : python = _preprocess ( python ) if not python : return [ ] lexer = PythonSplitLexer ( ) lexer . read ( python ) return lexer . chunks\n", "title": "", "metadata": ""}
{"_id": "ebb8f0ef889f24556637a0276fec2187", "text": "def set_stop_handler ( self ) : signal . signal ( signal . SIGTERM , self . graceful_stop ) signal . signal ( signal . SIGABRT , self . graceful_stop ) signal . signal ( signal . SIGINT , self . graceful_stop )\n", "title": "", "metadata": ""}
{"_id": "4d6a6125ec4a5050b7817457d72c0c9e", "text": "def negate_mask ( mask ) : res = np . ones ( mask . shape , dtype = np . int8 ) res [ mask > 0 ] = 0 return res\n", "title": "", "metadata": ""}
{"_id": "a0f4920554895b99a30be8e1870692c8", "text": "def _dump_spec ( spec ) : with open ( \"spec.yaml\" , \"w\" ) as f : yaml . dump ( spec , f , Dumper = MyDumper , default_flow_style = False )\n", "title": "", "metadata": ""}
{"_id": "bdf3e3573bb5b88311a11cba73052662", "text": "def qsize ( self ) : self . mutex . acquire ( ) n = self . _qsize ( ) self . mutex . release ( ) return n\n", "title": "", "metadata": ""}
{"_id": "d4d14fdb00b802085164cd052c3cccfc", "text": "def GetValueByName ( self , name ) : pyregf_value = self . _pyregf_key . get_value_by_name ( name ) if not pyregf_value : return None return REGFWinRegistryValue ( pyregf_value )\n", "title": "", "metadata": ""}
{"_id": "d2460948ac03b69d8d4eb530e686c90f", "text": "def parse_code ( url ) : result = urlparse ( url ) query = parse_qs ( result . query ) return query [ 'code' ]\n", "title": "", "metadata": ""}
{"_id": "e70d4f8f60c2aa8481e31647b371b26a", "text": "def SvcStop ( self ) -> None : # tell the SCM we're shutting down # noinspection PyUnresolvedReferences self . ReportServiceStatus ( win32service . SERVICE_STOP_PENDING ) # fire the stop event win32event . SetEvent ( self . h_stop_event )\n", "title": "", "metadata": ""}
{"_id": "2f935d81d15268a8957c820f3fc4a74f", "text": "def compute_boxplot ( self , series ) : from matplotlib . cbook import boxplot_stats series = series [ series . notnull ( ) ] if len ( series . values ) == 0 : return { } elif not is_numeric_dtype ( series ) : return self . non_numeric_stats ( series ) stats = boxplot_stats ( list ( series . values ) ) [ 0 ] stats [ 'count' ] = len ( series . values ) stats [ 'fliers' ] = \"|\" . join ( map ( str , stats [ 'fliers' ] ) ) return stats\n", "title": "", "metadata": ""}
{"_id": "58b966eba9085dab6f92f36cb880e93a", "text": "def to_json ( value , * * kwargs ) : serial_list = [ val . serialize ( * * kwargs ) if isinstance ( val , HasProperties ) else val for val in value ] return serial_list\n", "title": "", "metadata": ""}
{"_id": "5ab7b24d76b20cca48381c4819c3b366", "text": "def getdefaultencoding ( ) : enc = get_stream_enc ( sys . stdin ) if not enc or enc == 'ascii' : try : # There are reports of getpreferredencoding raising errors # in some cases, which may well be fixed, but let's be conservative here. enc = locale . getpreferredencoding ( ) except Exception : pass return enc or sys . getdefaultencoding ( )\n", "title": "", "metadata": ""}
{"_id": "7b9b54f051f748c70442972c6ba2e315", "text": "def get_code_language ( self ) : js_source = self . get_js_source ( ) if self . options . get ( \"include_html\" , False ) : resources = get_sphinx_resources ( include_bokehjs_api = True ) html_source = BJS_HTML . render ( css_files = resources . css_files , js_files = resources . js_files , bjs_script = js_source ) return [ html_source , \"html\" ] else : return [ js_source , \"javascript\" ]\n", "title": "", "metadata": ""}
{"_id": "4d1570e8f884b3b53e91a33fad38ba3a", "text": "def mouse_out ( self ) : self . scroll_to ( ) ActionChains ( self . parent . driver ) . move_by_offset ( 0 , 0 ) . click ( ) . perform ( )\n", "title": "", "metadata": ""}
{"_id": "c9c62fa5b255b758db0f8a26d98a7f95", "text": "def serialize ( self , value ) : if isinstance ( value , str ) : return value return value . strftime ( DATETIME_FORMAT )\n", "title": "", "metadata": ""}
{"_id": "def74436609891314fd7d17b717b1f70", "text": "def rgamma ( alpha , beta , size = None ) : return np . random . gamma ( shape = alpha , scale = 1. / beta , size = size )\n", "title": "", "metadata": ""}
{"_id": "c5741874a0800944ef361dfd15a5a582", "text": "def trapz2 ( f , x = None , y = None , dx = 1.0 , dy = 1.0 ) : return numpy . trapz ( numpy . trapz ( f , x = y , dx = dy ) , x = x , dx = dx )\n", "title": "", "metadata": ""}
{"_id": "5f899a31d97a2999655b6b2a3259a2ca", "text": "def sdmethod ( meth ) : sd = singledispatch ( meth ) def wrapper ( obj , * args , * * kwargs ) : return sd . dispatch ( args [ 0 ] . __class__ ) ( obj , * args , * * kwargs ) wrapper . register = sd . register wrapper . dispatch = sd . dispatch wrapper . registry = sd . registry wrapper . _clear_cache = sd . _clear_cache functools . update_wrapper ( wrapper , meth ) return wrapper\n", "title": "", "metadata": ""}
{"_id": "dca77fc41fc5dd30926725f4f91b8c3e", "text": "def _send ( self , data ) : if not self . _sock : self . connect ( ) self . _do_send ( data )\n", "title": "", "metadata": ""}
{"_id": "92b872b7cacd37ebd9e038a156b0a5ca", "text": "def dump ( self , * args , * * kwargs ) : lxml . etree . dump ( self . _obj , * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "06e7474a94cd284acd8eab85f5478a1f", "text": "def smartSum ( x , key , value ) : if key not in list ( x . keys ( ) ) : x [ key ] = value else : x [ key ] += value\n", "title": "", "metadata": ""}
{"_id": "b4220ac3422d9d60d63abdc9a429114e", "text": "def refresh ( self , document ) : try : old_cache_size = self . cache_size self . cache_size = 0 obj = self . query ( type ( document ) ) . filter_by ( mongo_id = document . mongo_id ) . one ( ) finally : self . cache_size = old_cache_size self . cache_write ( obj ) return obj\n", "title": "", "metadata": ""}
{"_id": "c03f603363fe7a75588f30c1fa77bfd6", "text": "def _py2_and_3_joiner ( sep , joinable ) : if ISPY3 : sep = bytes ( sep , DEFAULT_ENCODING ) joined = sep . join ( joinable ) return joined . decode ( DEFAULT_ENCODING ) if ISPY3 else joined\n", "title": "", "metadata": ""}
{"_id": "da3de44a249448470ff91de674668fac", "text": "def pieces ( array , chunk_size ) : for i in range ( 0 , len ( array ) , chunk_size ) : yield array [ i : i + chunk_size ]\n", "title": "", "metadata": ""}
{"_id": "36419bdbc3f1e6a8df3acd9ac65068b9", "text": "def get_window ( self ) : x = self while not x . _parent == None and not isinstance ( x . _parent , Window ) : x = x . _parent return x . _parent\n", "title": "", "metadata": ""}
{"_id": "01ff58d8c41c58ffc0b127052d4bea2f", "text": "def _cal_dist2center ( X , center ) : dmemb2cen = scipy . spatial . distance . cdist ( X , center . reshape ( 1 , X . shape [ 1 ] ) , metric = 'seuclidean' ) return ( np . sum ( dmemb2cen ) )\n", "title": "", "metadata": ""}
{"_id": "e1a50802cba9da732e6272198924ebc4", "text": "def __is__ ( cls , s ) : return s . startswith ( cls . delims ( ) [ 0 ] ) and s . endswith ( cls . delims ( ) [ 1 ] )\n", "title": "", "metadata": ""}
{"_id": "1121700f3f5f5cf53b17f47d6bf0e188", "text": "def get_input_nodes ( G : nx . DiGraph ) -> List [ str ] : return [ n for n , d in G . in_degree ( ) if d == 0 ]\n", "title": "", "metadata": ""}
{"_id": "fc870a2a00a98b3696f1b4028a2461aa", "text": "def set_sig_figs ( n = 4 ) : u . default_format = '.' + str ( n ) + 'g' pd . options . display . float_format = ( '{:,.' + str ( n ) + '}' ) . format\n", "title": "", "metadata": ""}
{"_id": "189c9b9307bedfdbae37ac7262c32413", "text": "def show ( ) : env = get_environment ( ) for key , val in sorted ( env . env . items ( ) , key = lambda item : item [ 0 ] ) : click . secho ( '%s = %s' % ( key , val ) )\n", "title": "", "metadata": ""}
{"_id": "d1dea016dd563d78b9fc82fe0ffb351c", "text": "def use_kwargs ( self , * args , * * kwargs ) -> typing . Callable : return super ( ) . use_kwargs ( * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "c49d564d267803de6a64408303b7e5c2", "text": "def paragraph ( separator = '\\n\\n' , wrap_start = '' , wrap_end = '' , html = False , sentences_quantity = 3 ) : return paragraphs ( quantity = 1 , separator = separator , wrap_start = wrap_start , wrap_end = wrap_end , html = html , sentences_quantity = sentences_quantity )\n", "title": "", "metadata": ""}
{"_id": "9dd2efc9fc19543c8dddbff3c68ca971", "text": "def is_standalone ( self ) : return ( not self . args . client and not self . args . browser and not self . args . server and not self . args . webserver )\n", "title": "", "metadata": ""}
{"_id": "414435e9d5a4b6496cd3e2d6c3a81430", "text": "def transformer ( data , label ) : data = mx . image . imresize ( data , IMAGE_SIZE , IMAGE_SIZE ) data = mx . nd . transpose ( data , ( 2 , 0 , 1 ) ) data = data . astype ( np . float32 ) / 128.0 - 1 return data , label\n", "title": "", "metadata": ""}
{"_id": "8bb78e0b7245cdc9d194962c2fe600e5", "text": "def delaunay_2d ( self , tol = 1e-05 , alpha = 0.0 , offset = 1.0 , bound = False ) : return PolyData ( self . points ) . delaunay_2d ( tol = tol , alpha = alpha , offset = offset , bound = bound )\n", "title": "", "metadata": ""}
{"_id": "9e448a9ea05762d684a0cf9fac9b8bb0", "text": "def is_image ( filename ) : # note: isfile() also accepts symlinks return os . path . isfile ( filename ) and filename . lower ( ) . endswith ( ImageExts )\n", "title": "", "metadata": ""}
{"_id": "ae18075c5a56e4556a0be8ca24e04f57", "text": "def prt_nts ( data_nts , prtfmt = None , prt = sys . stdout , nt_fields = None , * * kws ) : prt_txt ( prt , data_nts , prtfmt , nt_fields , * * kws )\n", "title": "", "metadata": ""}
{"_id": "5db2070c84f04b005b347aba051dc949", "text": "def disable_cert_validation ( ) : current_context = ssl . _create_default_https_context ssl . _create_default_https_context = ssl . _create_unverified_context try : yield finally : ssl . _create_default_https_context = current_context\n", "title": "", "metadata": ""}
{"_id": "b42b8bf0b9dad9eb1aa15a014b43844a", "text": "def main ( idle ) : while True : LOG . debug ( \"Sleeping for {0} seconds.\" . format ( idle ) ) time . sleep ( idle )\n", "title": "", "metadata": ""}
{"_id": "676ba413b18b57a2c0e35fe4b5bbe634", "text": "def err ( msg ) : click . echo ( click . style ( msg , fg = \"red\" , bold = True ) )\n", "title": "", "metadata": ""}
{"_id": "a722008a4b48f63648d611b186014f58", "text": "def replace_variables ( self , source : str , variables : dict ) -> str : try : replaced = re . sub ( \"{{(.*?)}}\" , lambda m : variables . get ( m . group ( 1 ) , \"\" ) , source ) except TypeError : replaced = source return replaced\n", "title": "", "metadata": ""}
{"_id": "3e7ec5d8b3428d6838da27bf0d573b22", "text": "def print_failure_message ( message ) : try : import colorama print ( colorama . Fore . RED + message + colorama . Fore . RESET , file = sys . stderr ) except ImportError : print ( message , file = sys . stderr )\n", "title": "", "metadata": ""}
{"_id": "a033204305178dc952c36db27f762029", "text": "def xor_bytes ( a , b ) : assert len ( a ) == len ( b ) return bytes ( map ( operator . xor , a , b ) )\n", "title": "", "metadata": ""}
{"_id": "d3fea3cec1acae15b39a8e7b0f4836fd", "text": "def direct2dDistance ( self , point ) : if not isinstance ( point , MapPoint ) : return 0.0 return ( ( self . x - point . x ) ** 2 + ( self . y - point . y ) ** 2 ) ** ( 0.5 ) # simple distance formula\n", "title": "", "metadata": ""}
{"_id": "6d36848cb87afb97d8d2ba01eb134755", "text": "def rstjinja ( app , docname , source ) : # Make sure we're outputting HTML if app . builder . format != 'html' : return src = source [ 0 ] rendered = app . builder . templates . render_string ( src , app . config . html_context ) source [ 0 ] = rendered\n", "title": "", "metadata": ""}
{"_id": "19e813502782043c245a39eb3fc33ade", "text": "def safe_pow ( base , exp ) : if exp > MAX_EXPONENT : raise RuntimeError ( \"Invalid exponent, max exponent is {}\" . format ( MAX_EXPONENT ) ) return base ** exp\n", "title": "", "metadata": ""}
{"_id": "f61d4942506157dedc9d392a3eba18a8", "text": "def add_blank_row ( self , label ) : col_labels = self . df . columns blank_item = pd . Series ( { } , index = col_labels , name = label ) # use .loc to add in place (append won't do that) self . df . loc [ blank_item . name ] = blank_item return self . df\n", "title": "", "metadata": ""}
{"_id": "a69bbbfa42f26245ae04933d41d8cc79", "text": "def enableEditing ( self , enabled ) : for button in self . buttons [ 1 : ] : button . setEnabled ( enabled ) if button . isChecked ( ) : button . setChecked ( False ) model = self . tableView . model ( ) if model is not None : model . enableEditing ( enabled )\n", "title": "", "metadata": ""}
{"_id": "bed6b1a28ab5eab1e1dd97d2dca2c04a", "text": "def AddAccuracy ( model , softmax , label ) : accuracy = brew . accuracy ( model , [ softmax , label ] , \"accuracy\" ) return accuracy\n", "title": "", "metadata": ""}
{"_id": "e16556cad228b5ef01c794e203bd56c0", "text": "def load_tiff ( file ) : ndv , xsize , ysize , geot , projection , datatype = get_geo_info ( file ) data = gdalnumeric . LoadFile ( file ) data = np . ma . masked_array ( data , mask = data == ndv , fill_value = ndv ) return data\n", "title": "", "metadata": ""}
{"_id": "f3473001f1ac00046399c1b502ae68ec", "text": "def visit_BoolOp ( self , node ) : return sum ( ( self . visit ( value ) for value in node . values ) , [ ] )\n", "title": "", "metadata": ""}
{"_id": "48fc3d07d3e146b793f73787718ccdba", "text": "def poke_array ( self , store , name , elemtype , elements , container , visited , _stack ) : raise NotImplementedError\n", "title": "", "metadata": ""}
{"_id": "b1e6eebc0cbfb55a4ce055dc9307550f", "text": "def flatten_array ( grid ) : grid = [ grid [ i ] [ j ] for i in range ( len ( grid ) ) for j in range ( len ( grid [ i ] ) ) ] while type ( grid [ 0 ] ) is list : grid = flatten_array ( grid ) return grid\n", "title": "", "metadata": ""}
{"_id": "057fd5c4fe7b187b336888afa0e22944", "text": "def angle_between_vectors ( x , y ) : dp = dot_product ( x , y ) if dp == 0 : return 0 xm = magnitude ( x ) ym = magnitude ( y ) return math . acos ( dp / ( xm * ym ) ) * ( 180. / math . pi )\n", "title": "", "metadata": ""}
{"_id": "01426736b14d233f0a327aea44d7671b", "text": "def stop ( self ) : if self . _progressing : self . _progressing = False self . _thread . join ( )\n", "title": "", "metadata": ""}
{"_id": "2e6c5e4c6e7be2d45312212080b9647c", "text": "def load_files ( files ) : for py_file in files : LOG . debug ( \"exec %s\" , py_file ) execfile ( py_file , globals ( ) , locals ( ) )\n", "title": "", "metadata": ""}
{"_id": "71d8369ec46cf64ed53c20c2d15d3662", "text": "def copen ( filepath , flag = 'r' , encoding = None ) : if encoding is None : encoding = locale . getdefaultlocale ( ) [ 1 ] return codecs . open ( filepath , flag , encoding )\n", "title": "", "metadata": ""}
{"_id": "982bc35e8f02b03597bf65e067504fbd", "text": "def calculate_size ( name , count ) : data_size = 0 data_size += calculate_size_str ( name ) data_size += INT_SIZE_IN_BYTES return data_size\n", "title": "", "metadata": ""}
{"_id": "d60ae36ae942289501ebd70526f18d87", "text": "def clear_all ( self ) : logger . info ( \"Clearing ALL Labels and LabelKeys.\" ) self . session . query ( Label ) . delete ( synchronize_session = \"fetch\" ) self . session . query ( LabelKey ) . delete ( synchronize_session = \"fetch\" )\n", "title": "", "metadata": ""}
{"_id": "649a5af15bcddae5c1ef00ca2a26a66f", "text": "def _zerosamestates ( self , A ) : for pair in self . samestates : A [ pair [ 0 ] , pair [ 1 ] ] = 0 A [ pair [ 1 ] , pair [ 0 ] ] = 0\n", "title": "", "metadata": ""}
{"_id": "95f234d3514ae5bfef1356d3a836fada", "text": "def GeneratePassphrase ( length = 20 ) : valid_chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" valid_chars += \"0123456789 ,-_&$#\" return \"\" . join ( random . choice ( valid_chars ) for i in range ( length ) )\n", "title": "", "metadata": ""}
{"_id": "e4d60b5e6e87dfc8a6223aadcd721c5c", "text": "def mmap ( func , iterable ) : if sys . version_info [ 0 ] > 2 : return [ i for i in map ( func , iterable ) ] else : return map ( func , iterable )\n", "title": "", "metadata": ""}
{"_id": "5798dadc0215e3df027ef025e3ba8626", "text": "def _distance ( coord1 , coord2 ) : xdist = coord1 [ 0 ] - coord2 [ 0 ] ydist = coord1 [ 1 ] - coord2 [ 1 ] return sqrt ( xdist * xdist + ydist * ydist )\n", "title": "", "metadata": ""}
{"_id": "e42b5cfc34e341ae4d0682960d744e81", "text": "def strip_line ( line , sep = os . linesep ) : try : return line . strip ( sep ) except TypeError : return line . decode ( 'utf-8' ) . strip ( sep )\n", "title": "", "metadata": ""}
{"_id": "9b5a8f88fe891cf8a81114e1490a7723", "text": "def updateFromKwargs ( self , properties , kwargs , collector , * * unused ) : properties [ self . name ] = self . getFromKwargs ( kwargs )\n", "title": "", "metadata": ""}
{"_id": "f8cb1344bb6fa09c73a0e84c8ee06d93", "text": "def _fill ( self ) : try : self . _head = self . _iterable . next ( ) except StopIteration : self . _head = None\n", "title": "", "metadata": ""}
{"_id": "f5fe1dd549efd1572ab1502b0089d6c5", "text": "def load ( filename ) : path , name = os . path . split ( filename ) path = path or '.' with util . indir ( path ) : return pickle . load ( open ( name , 'rb' ) )\n", "title": "", "metadata": ""}
{"_id": "6113645d142167a375c67874b0eec2c9", "text": "def get_readonly_fields ( self , request , obj = None ) : return list ( self . readonly_fields ) + [ field . name for field in obj . _meta . fields ]\n", "title": "", "metadata": ""}
{"_id": "39c5bdd808fe69d726e3f79bdc3a36fa", "text": "def end_index ( self ) : return ( ( self . number - 1 ) * self . paginator . per_page + len ( self . object_list ) )\n", "title": "", "metadata": ""}
{"_id": "0364525ca46d118fbda2fb1fc9512d67", "text": "def _split_str ( s , n ) : length = len ( s ) return [ s [ i : i + n ] for i in range ( 0 , length , n ) ]\n", "title": "", "metadata": ""}
{"_id": "1113ce2228dddd3940a1dfa377f851e9", "text": "def is_int ( value ) : if isinstance ( value , bool ) : return False try : int ( value ) return True except ( ValueError , TypeError ) : return False\n", "title": "", "metadata": ""}
{"_id": "98ca656e4684e5f883772e45520175a2", "text": "def getBitmap ( self ) : return PlatformManager . getBitmapFromRect ( self . x , self . y , self . w , self . h )\n", "title": "", "metadata": ""}
{"_id": "be00909caeb6e97b3eb5e18b8c082035", "text": "def static_urls_js ( ) : if apps . is_installed ( 'django.contrib.staticfiles' ) : from django . contrib . staticfiles . storage import staticfiles_storage static_base_url = staticfiles_storage . base_url else : static_base_url = PrefixNode . handle_simple ( \"STATIC_URL\" ) transpile_base_url = urljoin ( static_base_url , 'js/transpile/' ) return { 'static_base_url' : static_base_url , 'transpile_base_url' : transpile_base_url , 'version' : LAST_RUN [ 'version' ] }\n", "title": "", "metadata": ""}
{"_id": "2520611f9303a7dd65fee45ecfd2be70", "text": "def text_coords ( string , position ) : line_start = string . rfind ( '\\n' , 0 , position ) + 1 line_end = string . find ( '\\n' , position ) lineno = string . count ( '\\n' , 0 , position ) columnno = position - line_start line = string [ line_start : line_end ] return ( lineno , columnno , line )\n", "title": "", "metadata": ""}
{"_id": "8e8ff5ecc2e3a4d307f2b075c699fbd1", "text": "def copy ( self ) : out = type ( self ) ( ) for series in self : out . append ( series . copy ( ) ) return out\n", "title": "", "metadata": ""}
{"_id": "c40a40d6d141de73c9aa30d59779813b", "text": "def dumped ( text , level , indent = 2 ) : return indented ( \"{\\n%s\\n}\" % indented ( text , level + 1 , indent ) or \"None\" , level , indent ) + \"\\n\"\n", "title": "", "metadata": ""}
{"_id": "07c9f6792c476fbceb801bc1c8d8f132", "text": "def pprint ( obj , verbose = False , max_width = 79 , newline = '\\n' ) : printer = RepresentationPrinter ( sys . stdout , verbose , max_width , newline ) printer . pretty ( obj ) printer . flush ( ) sys . stdout . write ( newline ) sys . stdout . flush ( )\n", "title": "", "metadata": ""}
{"_id": "d39fca0c8581b6fd1e9565cf03a03323", "text": "def cpu_count ( ) -> int : if multiprocessing is None : return 1 try : return multiprocessing . cpu_count ( ) except NotImplementedError : pass try : return os . sysconf ( \"SC_NPROCESSORS_CONF\" ) except ( AttributeError , ValueError ) : pass gen_log . error ( \"Could not detect number of processors; assuming 1\" ) return 1\n", "title": "", "metadata": ""}
{"_id": "d0fe39a9dd27f4eb1740a86d0669cfc8", "text": "def batch_get_item ( self , batch_list ) : request_items = self . dynamize_request_items ( batch_list ) return self . layer1 . batch_get_item ( request_items , object_hook = item_object_hook )\n", "title": "", "metadata": ""}
{"_id": "087eb95e21968c32d67ade16bdf2a49f", "text": "def beta_pdf ( x , a , b ) : bc = 1 / beta ( a , b ) fc = x ** ( a - 1 ) sc = ( 1 - x ) ** ( b - 1 ) return bc * fc * sc\n", "title": "", "metadata": ""}
{"_id": "42f0d5a4e4e3ed47be23b92b6534003d", "text": "def insert_many ( self , items ) : return SessionContext . session . execute ( self . insert ( values = [ to_dict ( item , self . c ) for item in items ] ) , ) . rowcount\n", "title": "", "metadata": ""}
{"_id": "14a8e6cc5f942a97bbfddec4f7efc44a", "text": "def set_scrollregion ( self , event = None ) : self . canvas . configure ( scrollregion = self . canvas . bbox ( 'all' ) )\n", "title": "", "metadata": ""}
{"_id": "39719d6a5245a6d61950d7caa1f53ba0", "text": "def save_keras_definition ( keras_model , path ) : model_json = keras_model . to_json ( ) with open ( path , \"w\" ) as json_file : json_file . write ( model_json )\n", "title": "", "metadata": ""}
{"_id": "c1c16951206fedba08e213a319a17da5", "text": "def get_memory_usage ( ) : process = psutil . Process ( os . getpid ( ) ) mem = process . memory_info ( ) . rss return mem / ( 1024 * 1024 )\n", "title": "", "metadata": ""}
{"_id": "5c6cafad9569d211824c587c99a8029c", "text": "def _increment ( arr , indices ) : arr = _as_array ( arr ) indices = _as_array ( indices ) bbins = np . bincount ( indices ) arr [ : len ( bbins ) ] += bbins return arr\n", "title": "", "metadata": ""}
{"_id": "782522eef34a72b128283242af10b46d", "text": "def isTestCaseDisabled ( test_case_class , method_name ) : test_method = getattr ( test_case_class , method_name ) return getattr ( test_method , \"__test__\" , 'not nose' ) is False\n", "title": "", "metadata": ""}
{"_id": "93a84df2054674d0e43b41e16aed0700", "text": "def ub_to_str ( string ) : if not isinstance ( string , str ) : if six . PY2 : return str ( string ) else : return string . decode ( ) return string\n", "title": "", "metadata": ""}
{"_id": "42c1597fe5632a556bfccfa691849b6e", "text": "def __add_namespaceinfo ( self , ni ) : self . __ns_uri_map [ ni . uri ] = ni for prefix in ni . prefixes : self . __prefix_map [ prefix ] = ni\n", "title": "", "metadata": ""}
{"_id": "d03f287b42c14d21d3347c0c32268f59", "text": "def watched_extension ( extension ) : for ext in hamlpy . VALID_EXTENSIONS : if extension . endswith ( '.' + ext ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "73dcbd3b5a92de96d8c1d17ccec040e4", "text": "def type ( self ) : if self is FeatureType . TIMESTAMP : return list if self is FeatureType . BBOX : return BBox return dict\n", "title": "", "metadata": ""}
{"_id": "44bccbff84846b87bf697ea737fc39b9", "text": "def append_text ( self , txt ) : with open ( self . fullname , \"a\" ) as myfile : myfile . write ( txt )\n", "title": "", "metadata": ""}
{"_id": "d69bfa46b9274cecbd21d8bb987de8a0", "text": "def screen_to_latlon ( self , x , y ) : xtile = 1. * x / TILE_SIZE + self . xtile ytile = 1. * y / TILE_SIZE + self . ytile return self . num2deg ( xtile , ytile , self . zoom )\n", "title": "", "metadata": ""}
{"_id": "22664de47476a5db765780fc0c0cc1a5", "text": "def extract_all ( zipfile , dest_folder ) : z = ZipFile ( zipfile ) print ( z ) z . extract ( dest_folder )\n", "title": "", "metadata": ""}
{"_id": "1b4b15802eb65e6cda3dbe7f0f049d91", "text": "def _quit ( self , * args ) : self . logger . warn ( 'Bye!' ) sys . exit ( self . exit ( ) )\n", "title": "", "metadata": ""}
{"_id": "fc53d52879933a88b300fe44d85a0cc0", "text": "def inverseHistogram ( hist , bin_range ) : data = hist . astype ( float ) / np . min ( hist [ np . nonzero ( hist ) ] ) new_data = np . empty ( shape = np . sum ( data , dtype = int ) ) i = 0 xvals = np . linspace ( bin_range [ 0 ] , bin_range [ 1 ] , len ( data ) ) for d , x in zip ( data , xvals ) : new_data [ i : i + d ] = x i += int ( d ) return new_data\n", "title": "", "metadata": ""}
{"_id": "779785a045392fd908580fc670958dcb", "text": "def get_all_attributes ( klass_or_instance ) : pairs = list ( ) for attr , value in inspect . getmembers ( klass_or_instance , lambda x : not inspect . isroutine ( x ) ) : if not ( attr . startswith ( \"__\" ) or attr . endswith ( \"__\" ) ) : pairs . append ( ( attr , value ) ) return pairs\n", "title": "", "metadata": ""}
{"_id": "83d60799e8ac6e23d1846ea4c10c3e6c", "text": "def rotate_point ( xorigin , yorigin , x , y , angle ) : rotx = ( x - xorigin ) * np . cos ( angle ) - ( y - yorigin ) * np . sin ( angle ) roty = ( x - yorigin ) * np . sin ( angle ) + ( y - yorigin ) * np . cos ( angle ) return rotx , roty\n", "title": "", "metadata": ""}
{"_id": "77c5bd807b26eb820077f9514a81b09b", "text": "def _linearInterpolationTransformMatrix ( matrix1 , matrix2 , value ) : return tuple ( _interpolateValue ( matrix1 [ i ] , matrix2 [ i ] , value ) for i in range ( len ( matrix1 ) ) )\n", "title": "", "metadata": ""}
{"_id": "9a8f5069fb57b41eaef814341adf59c8", "text": "def cint32_array_to_numpy ( cptr , length ) : if isinstance ( cptr , ctypes . POINTER ( ctypes . c_int32 ) ) : return np . fromiter ( cptr , dtype = np . int32 , count = length ) else : raise RuntimeError ( 'Expected int pointer' )\n", "title": "", "metadata": ""}
{"_id": "4a2513d5839e48405c332bdb0226a269", "text": "def lazy_reverse_binmap ( f , xs ) : return ( f ( y , x ) for x , y in zip ( xs , xs [ 1 : ] ) )\n", "title": "", "metadata": ""}
{"_id": "a32e6bc470cebb841ceebf36865ce0f1", "text": "def today ( year = None ) : return datetime . date ( int ( year ) , _date . month , _date . day ) if year else _date\n", "title": "", "metadata": ""}
{"_id": "651d5da46466ecfca8baa8022f8bf75f", "text": "def split_into_sentences ( s ) : s = re . sub ( r\"\\s+\" , \" \" , s ) s = re . sub ( r\"[\\\\.\\\\?\\\\!]\" , \"\\n\" , s ) return s . split ( \"\\n\" )\n", "title": "", "metadata": ""}
{"_id": "e992956905303db99b86a1f4199f4fa2", "text": "def requests_post ( url , data = None , json = None , * * kwargs ) : return requests_request ( 'post' , url , data = data , json = json , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "89542e50d048ac6152445ae8c8903a8e", "text": "def set_left_to_right ( self ) : self . displaymode |= LCD_ENTRYLEFT self . write8 ( LCD_ENTRYMODESET | self . displaymode )\n", "title": "", "metadata": ""}
{"_id": "f70345f991056b912f066225c6132062", "text": "def draw ( graph , fname ) : ag = networkx . nx_agraph . to_agraph ( graph ) ag . draw ( fname , prog = 'dot' )\n", "title": "", "metadata": ""}
{"_id": "66a3f127fd62d3a4f630ead7d6e213b2", "text": "def on_source_directory_chooser_clicked ( self ) : title = self . tr ( 'Set the source directory for script and scenario' ) self . choose_directory ( self . source_directory , title )\n", "title": "", "metadata": ""}
{"_id": "213d039a14016cb69e8deb9f06e08eab", "text": "def to_dataframe ( products ) : try : import pandas as pd except ImportError : raise ImportError ( \"to_dataframe requires the optional dependency Pandas.\" ) return pd . DataFrame . from_dict ( products , orient = 'index' )\n", "title": "", "metadata": ""}
{"_id": "1a8f4b2d2acb4fb63bd4c779627a55fe", "text": "def interpolate_slice ( slice_rows , slice_cols , interpolator ) : fine_rows = np . arange ( slice_rows . start , slice_rows . stop , slice_rows . step ) fine_cols = np . arange ( slice_cols . start , slice_cols . stop , slice_cols . step ) return interpolator ( fine_cols , fine_rows )\n", "title": "", "metadata": ""}
{"_id": "580ddef056b1008eb8c852da442d28f1", "text": "def _normal_prompt ( self ) : sys . stdout . write ( self . __get_ps1 ( ) ) sys . stdout . flush ( ) return safe_input ( )\n", "title": "", "metadata": ""}
{"_id": "761670f730e49439cdc1fe6db0a02367", "text": "def clean_whitespace ( string , compact = False ) : for a , b in ( ( '\\r\\n' , '\\n' ) , ( '\\r' , '\\n' ) , ( '\\n\\n' , '\\n' ) , ( '\\t' , ' ' ) , ( '  ' , ' ' ) ) : string = string . replace ( a , b ) if compact : for a , b in ( ( '\\n' , ' ' ) , ( '[ ' , '[' ) , ( '  ' , ' ' ) , ( '  ' , ' ' ) , ( '  ' , ' ' ) ) : string = string . replace ( a , b ) return string . strip ( )\n", "title": "", "metadata": ""}
{"_id": "d4db2a79437b18be009e026e25b1d33f", "text": "def Sum ( a , axis , keep_dims ) : return np . sum ( a , axis = axis if not isinstance ( axis , np . ndarray ) else tuple ( axis ) , keepdims = keep_dims ) ,\n", "title": "", "metadata": ""}
{"_id": "c2280e3dfcaf778887c6e8ad05e1abfd", "text": "def world_to_view ( v ) : return v . x * config . scale_x , v . y * config . scale_y\n", "title": "", "metadata": ""}
{"_id": "ed37e1f1aa847693df6d835933a58ad0", "text": "def copy ( self ) : return self . __class__ ( self . operations . copy ( ) , self . collection , self . document )\n", "title": "", "metadata": ""}
{"_id": "a74c8d2270e4aceba66e76cb6d5c47f2", "text": "def calculate_embedding ( self , batch_image_bytes ) : return self . tf_session . run ( self . embedding , feed_dict = { self . input_jpeg : batch_image_bytes } )\n", "title": "", "metadata": ""}
{"_id": "46ccc353026d17e50304562f22353c0c", "text": "def flatten ( l , types = ( list , float ) ) : l = [ item if isinstance ( item , types ) else [ item ] for item in l ] return [ item for sublist in l for item in sublist ]\n", "title": "", "metadata": ""}
{"_id": "ebe23005b281a2f84f340a5a91ff02bc", "text": "def is_empty ( self ) : return all ( isinstance ( c , ParseNode ) and c . is_empty for c in self . children )\n", "title": "", "metadata": ""}
{"_id": "e92cb966b30f4cbabb97a593cbcdd961", "text": "def contained_in ( filename , directory ) : filename = os . path . normcase ( os . path . abspath ( filename ) ) directory = os . path . normcase ( os . path . abspath ( directory ) ) return os . path . commonprefix ( [ filename , directory ] ) == directory\n", "title": "", "metadata": ""}
{"_id": "b2e5ecde36072c4e99bc2cf503f6be8c", "text": "def get_indentation ( func ) : src_lines = getsourcelines ( func ) [ 0 ] for line in src_lines : if not ( line . startswith ( '@' ) or line . startswith ( 'def' ) or line . lstrip ( ) . startswith ( '#' ) ) : return line [ : len ( line ) - len ( line . lstrip ( ) ) ] return pytypes . default_indent\n", "title": "", "metadata": ""}
{"_id": "275a856495dc506daf35ff00317dce08", "text": "def close ( self ) : try : self . _conn . send ( ( self . _CLOSE , None ) ) self . _conn . close ( ) except IOError : # The connection was already closed. pass self . _process . join ( )\n", "title": "", "metadata": ""}
{"_id": "5bb312a7934fee380aae8b32c4ca8065", "text": "def software_fibonacci ( n ) : a , b = 0 , 1 for i in range ( n ) : a , b = b , a + b return a\n", "title": "", "metadata": ""}
{"_id": "63e611e296d81ed4d3e3a368e04b816a", "text": "def get_url_nofollow ( url ) : try : response = urlopen ( url ) code = response . getcode ( ) return code except HTTPError as e : return e . code except : return 0\n", "title": "", "metadata": ""}
{"_id": "48b8dd3e9b9aa7b902307cc9332b017c", "text": "def np2str ( value ) : if hasattr ( value , 'dtype' ) and issubclass ( value . dtype . type , ( np . string_ , np . object_ ) ) and value . size == 1 : value = np . asscalar ( value ) if not isinstance ( value , str ) : # python 3 - was scalar numpy array of bytes # otherwise python 2 - scalar numpy array of 'str' value = value . decode ( ) return value else : raise ValueError ( \"Array is not a string type or is larger than 1\" )\n", "title": "", "metadata": ""}
{"_id": "e2b06d28b748a04cdc4e482fa4de7cd0", "text": "def resize_image_with_crop_or_pad ( img , target_height , target_width ) : h , w = target_height , target_width max_h , max_w , c = img . shape # crop img = crop_center ( img , min ( max_h , h ) , min ( max_w , w ) ) # pad padded_img = np . zeros ( shape = ( h , w , c ) , dtype = img . dtype ) padded_img [ : img . shape [ 0 ] , : img . shape [ 1 ] , : img . shape [ 2 ] ] = img return padded_img\n", "title": "", "metadata": ""}
{"_id": "9dab6585f07848e11b59c2a99fccff77", "text": "def kill_test_logger ( logger ) : for h in list ( logger . handlers ) : logger . removeHandler ( h ) if isinstance ( h , logging . FileHandler ) : h . close ( )\n", "title": "", "metadata": ""}
{"_id": "34f1aef8067a361c956db47bc84ef6a8", "text": "def tofile ( self , fileobj ) : for entry in self : print >> fileobj , str ( entry ) fileobj . close ( )\n", "title": "", "metadata": ""}
{"_id": "e13af046e1989ac5b8c5a16908abdf4a", "text": "def camelcase2list ( s , lower = False ) : s = re . findall ( r'([A-Z][a-z0-9]+)' , s ) return [ w . lower ( ) for w in s ] if lower else s\n", "title": "", "metadata": ""}
{"_id": "a98ace85c23dcf54da8a4c222ddf0726", "text": "def maxlevel ( lst ) : maxlev = 0 def f ( lst , level ) : nonlocal maxlev if isinstance ( lst , list ) : level += 1 maxlev = max ( level , maxlev ) for item in lst : f ( item , level ) f ( lst , 0 ) return maxlev\n", "title": "", "metadata": ""}
{"_id": "ef5f7369ae2a40c8845997366d03b1b6", "text": "def check_attribute_exists ( instance ) : attributes = instance . get ( 'attributes' , { } ) . keys ( ) if instance . get ( 'key_attribute' ) not in attributes : return False label_attr = instance . get ( 'label_attribute' ) if label_attr and label_attr not in attributes : return False return True\n", "title": "", "metadata": ""}
{"_id": "c991b091b561f92934101de5b6bffd53", "text": "def cli ( env , identifier ) : image_mgr = SoftLayer . ImageManager ( env . client ) image_id = helpers . resolve_id ( image_mgr . resolve_ids , identifier , 'image' ) image_mgr . delete_image ( image_id )\n", "title": "", "metadata": ""}
{"_id": "f7ab32a6bc6718279216351ea9c41d92", "text": "def save ( self , f ) : return pickle . dump ( ( self . perceptron . weights , self . tagdict , self . classes , self . clusters ) , f , protocol = pickle . HIGHEST_PROTOCOL )\n", "title": "", "metadata": ""}
{"_id": "9678e6cf80b7861ab8769844c277a040", "text": "def __enter__ ( self ) : clone = self . clone ( ) self . _contexts . append ( clone ) self . reset ( ) return self\n", "title": "", "metadata": ""}
{"_id": "63adc151d700fe5eb5658d8720d39b1b", "text": "def get_point_hash ( self , point ) : return geohash . encode ( point . latitude , point . longitude , self . precision )\n", "title": "", "metadata": ""}
{"_id": "bc1eb466b34f7d3e136924fee41b1275", "text": "def isInteractive ( ) : if sys . stdout . isatty ( ) and os . name != 'nt' : #Hopefully everything but ms supports '\\r' try : import threading except ImportError : return False else : return True else : return False\n", "title": "", "metadata": ""}
{"_id": "97351a4ebeb86f409565390167ac8f0d", "text": "def count_list ( the_list ) : count = the_list . count result = [ ( item , count ( item ) ) for item in set ( the_list ) ] result . sort ( ) return result\n", "title": "", "metadata": ""}
{"_id": "c3981bac18e412b967c4575aa82ae85a", "text": "def set_value ( self , value ) : if value : self . setChecked ( Qt . Checked ) else : self . setChecked ( Qt . Unchecked )\n", "title": "", "metadata": ""}
{"_id": "a84fc416d47bad09b0f04c01d524e5dd", "text": "def issuperset ( self , other ) : self . _binary_sanity_check ( other ) return set . issuperset ( self , other )\n", "title": "", "metadata": ""}
{"_id": "c512d51dd9e04a261e8f277a67893f62", "text": "def on_press_key ( key , callback , suppress = False ) : return hook_key ( key , lambda e : e . event_type == KEY_UP or callback ( e ) , suppress = suppress )\n", "title": "", "metadata": ""}
{"_id": "6c61338aa227b377ca4f3bbde6dcbcdc", "text": "def log ( x ) : if isinstance ( x , UncertainFunction ) : mcpts = np . log ( x . _mcpts ) return UncertainFunction ( mcpts ) else : return np . log ( x )\n", "title": "", "metadata": ""}
{"_id": "f154583c37bd056c2c78bf9c3172a959", "text": "def cleanup_lib ( self ) : if not self . using_openmp : #this if statement is necessary because shared libraries that use #OpenMP will core dump when unloaded, this is a well-known issue with OpenMP logging . debug ( 'unloading shared library' ) _ctypes . dlclose ( self . lib . _handle )\n", "title": "", "metadata": ""}
{"_id": "2fce3563fc08cb23906da53557719a5f", "text": "def camel_to_ ( s ) : s1 = re . sub ( '(.)([A-Z][a-z]+)' , r'\\1_\\2' , s ) return re . sub ( '([a-z0-9])([A-Z])' , r'\\1_\\2' , s1 ) . lower ( )\n", "title": "", "metadata": ""}
{"_id": "b2edc3e57d06c304075021fc84ebdb55", "text": "def remove_index ( self ) : self . index_client . close ( self . index_name ) self . index_client . delete ( self . index_name )\n", "title": "", "metadata": ""}
{"_id": "489d216944257a6c9f302c704debc55b", "text": "def __round_time ( self , dt ) : round_to = self . _resolution . total_seconds ( ) seconds = ( dt - dt . min ) . seconds rounding = ( seconds + round_to / 2 ) // round_to * round_to return dt + timedelta ( 0 , rounding - seconds , - dt . microsecond )\n", "title": "", "metadata": ""}
{"_id": "d459df893b3b1fb7474278ed0bb6c1a9", "text": "def clean_all ( self , args ) : self . clean_dists ( args ) self . clean_builds ( args ) self . clean_download_cache ( args )\n", "title": "", "metadata": ""}
{"_id": "125971d221ae5f7c07d4cabc7bfaa49d", "text": "def set_scrollbars_cb ( self , w , tf ) : scrollbars = 'on' if tf else 'off' self . t_ . set ( scrollbars = scrollbars )\n", "title": "", "metadata": ""}
{"_id": "18e1c61e8c3b6f5a0d9c480dab65f919", "text": "def _rectangular ( n ) : for i in n : if len ( i ) != len ( n [ 0 ] ) : return False return True\n", "title": "", "metadata": ""}
{"_id": "5257464f68c520fb1493b86342aba9a2", "text": "def extract_words ( lines ) : for line in lines : for word in re . findall ( r\"\\w+\" , line ) : yield word\n", "title": "", "metadata": ""}
{"_id": "3483c07b47e4c35af858c3ff52f2ae45", "text": "def from_json ( value , * * kwargs ) : if isinstance ( value , string_types ) : value = value . upper ( ) if value in ( 'TRUE' , 'Y' , 'YES' , 'ON' ) : return True if value in ( 'FALSE' , 'N' , 'NO' , 'OFF' ) : return False if isinstance ( value , int ) : return value raise ValueError ( 'Could not load boolean from JSON: {}' . format ( value ) )\n", "title": "", "metadata": ""}
{"_id": "f19ee5ca029679c7cfffab927f0cb173", "text": "def set_xticks_for_all ( self , row_column_list = None , ticks = None ) : if row_column_list is None : self . ticks [ 'x' ] = ticks else : for row , column in row_column_list : self . set_xticks ( row , column , ticks )\n", "title": "", "metadata": ""}
{"_id": "b0f7d489f63e7945f28d6a570c11ab9b", "text": "def remove_item ( self , item ) : self . unindex_item ( item ) self . items . pop ( item . uuid , None )\n", "title": "", "metadata": ""}
{"_id": "31535ff7047a673e1531fc81fc2713c4", "text": "def inject_into_urllib3 ( ) : util . ssl_ . SSLContext = SecureTransportContext util . HAS_SNI = HAS_SNI util . ssl_ . HAS_SNI = HAS_SNI util . IS_SECURETRANSPORT = True util . ssl_ . IS_SECURETRANSPORT = True\n", "title": "", "metadata": ""}
{"_id": "c11975c4a31a54e92ea8c6754da23474", "text": "def read_byte_data ( self , addr , cmd ) : self . _set_addr ( addr ) res = SMBUS . i2c_smbus_read_byte_data ( self . _fd , ffi . cast ( \"__u8\" , cmd ) ) if res == - 1 : raise IOError ( ffi . errno ) return res\n", "title": "", "metadata": ""}
{"_id": "c7d12f334fae88a79aa2d9d5f0b1b3f2", "text": "def load_model_from_package ( name , * * overrides ) : cls = importlib . import_module ( name ) return cls . load ( * * overrides )\n", "title": "", "metadata": ""}
{"_id": "4e5247fd5cd90266f5c6f6c0a0cf7337", "text": "def random_choice ( sequence ) : return random . choice ( tuple ( sequence ) if isinstance ( sequence , set ) else sequence )\n", "title": "", "metadata": ""}
{"_id": "300d1e86d60525f1c2198039ed785d03", "text": "def find_whole_word ( w ) : return re . compile ( r'\\b({0})\\b' . format ( w ) , flags = re . IGNORECASE ) . search\n", "title": "", "metadata": ""}
{"_id": "607cceb03f7a9015ee3a4adee95d485a", "text": "def sigterm ( self , signum , frame ) : self . logger . warning ( \"Caught signal %s. Stopping daemon.\" % signum ) sys . exit ( 0 )\n", "title": "", "metadata": ""}
{"_id": "94c3a74fbb091461ba4094f44e30af68", "text": "def zero_state ( self , batch_size ) : return torch . zeros ( batch_size , self . state_dim , dtype = torch . float32 )\n", "title": "", "metadata": ""}
{"_id": "045a4b1bc5e5c51dde9aba5c1f655837", "text": "def gettext ( self , string , domain = None , * * variables ) : t = self . get_translations ( domain ) return t . ugettext ( string ) % variables\n", "title": "", "metadata": ""}
{"_id": "433c6e36d6ba55bd0e158695f04c305c", "text": "def get_value ( key , obj , default = missing ) : if isinstance ( key , int ) : return _get_value_for_key ( key , obj , default ) return _get_value_for_keys ( key . split ( '.' ) , obj , default )\n", "title": "", "metadata": ""}
{"_id": "3d41ac44b92642833c4dbfae0a56486b", "text": "def __len__ ( self ) : return self . chunk_length ( ) + len ( self . type ) + len ( self . header ) + 4\n", "title": "", "metadata": ""}
{"_id": "f48eab05523e46947ccdf65ba79bcc8c", "text": "def _check_for_int ( x ) : try : y = int ( x ) except ( OverflowError , ValueError ) : pass else : # There is no way in AMF0 to distinguish between integers and floats if x == x and y == x : return y return x\n", "title": "", "metadata": ""}
{"_id": "a380ef28d4aeeab108edd8c17229f9fc", "text": "def write_text ( filename : str , text : str ) -> None : with open ( filename , 'w' ) as f : # type: TextIO print ( text , file = f )\n", "title": "", "metadata": ""}
{"_id": "538561b43af7a29d4c32050604e0d198", "text": "def RunSphinxAPIDoc ( _ ) : current_directory = os . path . abspath ( os . path . dirname ( __file__ ) ) module = os . path . join ( current_directory , '..' , 'plaso' ) api_directory = os . path . join ( current_directory , 'sources' , 'api' ) apidoc . main ( [ '-o' , api_directory , module , '--force' ] )\n", "title": "", "metadata": ""}
{"_id": "f3dbf4f1541038ea9d48e9a152710dd1", "text": "def percentile ( values , k ) : if not values : return None values . sort ( ) index = ( len ( values ) * ( float ( k ) / 100 ) ) - 1 return values [ int ( math . ceil ( index ) ) ]\n", "title": "", "metadata": ""}
{"_id": "fd8020f7449a3ce5aca2c69e7dac919b", "text": "def nonull_dict ( self ) : return { k : v for k , v in six . iteritems ( self . dict ) if v and k != '_codes' }\n", "title": "", "metadata": ""}
{"_id": "e0c80c4222a57aaef0507115f2fefd71", "text": "def _is_root ( ) : import os import ctypes try : return os . geteuid ( ) == 0 except AttributeError : return ctypes . windll . shell32 . IsUserAnAdmin ( ) != 0 return False\n", "title": "", "metadata": ""}
{"_id": "f503117988cc3d8f00914af076c43b5e", "text": "def ranks ( self , key , value ) : return [ normalize_rank ( el ) for el in force_list ( value . get ( 'a' ) ) ]\n", "title": "", "metadata": ""}
{"_id": "0d06094857956bcc9a1e764e994f394d", "text": "def calc_volume ( self , sample : np . ndarray ) : return sqrt ( np . mean ( np . square ( sample ) ) )\n", "title": "", "metadata": ""}
{"_id": "32d4b0e4aca4371ccee737be6ae857a0", "text": "def glr_path_static ( ) : return os . path . abspath ( os . path . join ( os . path . dirname ( __file__ ) , '_static' ) )\n", "title": "", "metadata": ""}
{"_id": "f4b894087f4101f8bf48daeab561d27e", "text": "def get_anchor_href ( markup ) : soup = BeautifulSoup ( markup , 'lxml' ) return [ '%s' % link . get ( 'href' ) for link in soup . find_all ( 'a' ) ]\n", "title": "", "metadata": ""}
{"_id": "c02299d84f3d2997cee5f1b0cdb989ec", "text": "async def async_input ( prompt ) : print ( prompt , end = '' , flush = True ) return ( await loop . run_in_executor ( None , sys . stdin . readline ) ) . rstrip ( )\n", "title": "", "metadata": ""}
{"_id": "5c4f9b38098eef440a381e3c141cf4ea", "text": "def increment_frame ( self ) : self . current_frame += 1 if self . current_frame >= self . end_frame : # Wrap back to the beginning of the animation. self . current_frame = 0\n", "title": "", "metadata": ""}
{"_id": "a0f0c58850f80d20af8dd5c2eca84859", "text": "def binary_stdout ( ) : # First there is a Python3 issue. try : stdout = sys . stdout . buffer except AttributeError : # Probably Python 2, where bytes are strings. stdout = sys . stdout # On Windows the C runtime file orientation needs changing. if sys . platform == \"win32\" : import msvcrt import os msvcrt . setmode ( sys . stdout . fileno ( ) , os . O_BINARY ) return stdout\n", "title": "", "metadata": ""}
{"_id": "ba7b6e3f13c01581d13161cdc33a697e", "text": "def printheader ( h = None ) : writer = csv . writer ( sys . stdout ) writer . writerow ( header_fields ( h ) )\n", "title": "", "metadata": ""}
{"_id": "6a9ad55c71a993b54ea13c796cdec68b", "text": "def do_next ( self , args ) : self . _do_print_from_last_cmd = True self . _interp . step_over ( ) return True\n", "title": "", "metadata": ""}
{"_id": "6a420e113c151297884c6ba02e654338", "text": "def show_image ( self , key ) : data = self . model . get_data ( ) data [ key ] . show ( )\n", "title": "", "metadata": ""}
{"_id": "e0047c72169cd472ae38e460a9d9e8b3", "text": "def resources ( self ) : return [ self . pdf . getPage ( i ) for i in range ( self . pdf . getNumPages ( ) ) ]\n", "title": "", "metadata": ""}
{"_id": "1d895963e6dd0dd2957bff38bd825efb", "text": "def save ( self , * args , * * kwargs ) : self . timeline . index -= 1 # required for proper starting point for save self . animation . save ( * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "942cbe3ade96de0b4656f40cf8f38002", "text": "def fast_distinct ( self ) : return self . model . objects . filter ( pk__in = self . values_list ( 'pk' , flat = True ) )\n", "title": "", "metadata": ""}
{"_id": "72fad4b74c8f0cb1f5edd6a668cd7a54", "text": "def str_is_well_formed ( xml_str ) : try : str_to_etree ( xml_str ) except xml . etree . ElementTree . ParseError : return False else : return True\n", "title": "", "metadata": ""}
{"_id": "5b8a55104cf9519f2ca03d4cb35fe591", "text": "def basic_word_sim ( word1 , word2 ) : return sum ( [ 1 for c in word1 if c in word2 ] ) / max ( len ( word1 ) , len ( word2 ) )\n", "title": "", "metadata": ""}
{"_id": "a417c56d6428705f57746473ac6b0e80", "text": "def kill_process_children ( pid ) : if sys . platform == \"darwin\" : kill_process_children_osx ( pid ) elif sys . platform == \"linux\" : kill_process_children_unix ( pid ) else : pass\n", "title": "", "metadata": ""}
{"_id": "8bddd8999f925acfba299a099a3c5380", "text": "def _to_lower_alpha_only ( s ) : s = re . sub ( r'\\n' , ' ' , s . lower ( ) ) return re . sub ( r'[^a-z\\s]' , '' , s )\n", "title": "", "metadata": ""}
{"_id": "6890e75ddd76a9fdab26816030ec4e6a", "text": "def compute_jaccard_index ( x_set , y_set ) : if not x_set or not y_set : return 0.0 intersection_cardinal = len ( x_set & y_set ) union_cardinal = len ( x_set | y_set ) return intersection_cardinal / float ( union_cardinal )\n", "title": "", "metadata": ""}
{"_id": "68600d16872aad0b3b2d85866e4553b0", "text": "def getprop ( self , prop_name ) : return self . shell ( [ 'getprop' , prop_name ] , timeout = DEFAULT_GETPROP_TIMEOUT_SEC ) . decode ( 'utf-8' ) . strip ( )\n", "title": "", "metadata": ""}
{"_id": "dbcd1dde4d93b1f5591e70b47182c40e", "text": "def class_name ( obj ) : name = obj . __name__ module = getattr ( obj , '__module__' ) if module : name = f'{module}.{name}' return name\n", "title": "", "metadata": ""}
{"_id": "5e1b269b49b4096f329f51134ae124f4", "text": "def update_hash ( cls , filelike , digest ) : block_size = digest . block_size * 1024 for chunk in iter ( lambda : filelike . read ( block_size ) , b'' ) : digest . update ( chunk )\n", "title": "", "metadata": ""}
{"_id": "536dd3fc534110c1ebd959afa8566d2f", "text": "def _convert_to_array ( array_like , dtype ) : if isinstance ( array_like , bytes ) : return np . frombuffer ( array_like , dtype = dtype ) return np . asarray ( array_like , dtype = dtype )\n", "title": "", "metadata": ""}
{"_id": "0dc777b31dd6877865638a1813d9bddb", "text": "def upcaseTokens ( s , l , t ) : return [ tt . upper ( ) for tt in map ( _ustr , t ) ]\n", "title": "", "metadata": ""}
{"_id": "8c4e06a085fb4a334fbcc9c93e47c184", "text": "def translate_dict ( cls , val ) : escaped = ', ' . join ( [ \"{} -> {}\" . format ( cls . translate_str ( k ) , cls . translate ( v ) ) for k , v in val . items ( ) ] ) return 'Map({})' . format ( escaped )\n", "title": "", "metadata": ""}
{"_id": "e0eed76adf43b8064e8da237d5eda4b8", "text": "def get_readline_tail ( self , n = 10 ) : end = self . shell . readline . get_current_history_length ( ) + 1 start = max ( end - n , 1 ) ghi = self . shell . readline . get_history_item return [ ghi ( x ) for x in range ( start , end ) ]\n", "title": "", "metadata": ""}
{"_id": "6bbe7f30f2cd155fedd3960cc64d1e7b", "text": "def Dump ( obj ) : text = yaml . safe_dump ( obj , default_flow_style = False , allow_unicode = True ) if compatibility . PY2 : text = text . decode ( \"utf-8\" ) return text\n", "title": "", "metadata": ""}
{"_id": "351cd959d461b31f74ddf19b783309fa", "text": "def first ( series , order_by = None ) : if order_by is not None : series = order_series_by ( series , order_by ) first_s = series . iloc [ 0 ] return first_s\n", "title": "", "metadata": ""}
{"_id": "15b27af0edef82e935927e1612ade62c", "text": "def save_dict_to_file ( filename , dictionary ) : with open ( filename , 'w' ) as f : writer = csv . writer ( f ) for k , v in iteritems ( dictionary ) : writer . writerow ( [ str ( k ) , str ( v ) ] )\n", "title": "", "metadata": ""}
{"_id": "eebc6de9f72f337eeac403fb2f736831", "text": "def _cached_search_compile ( pattern , re_verbose , re_version , pattern_type ) : return _bregex_parse . _SearchParser ( pattern , re_verbose , re_version ) . parse ( )\n", "title": "", "metadata": ""}
{"_id": "5aef22905be1a88e4499e03c0492c82c", "text": "def split_multiline ( value ) : return [ element for element in ( line . strip ( ) for line in value . split ( '\\n' ) ) if element ]\n", "title": "", "metadata": ""}
{"_id": "10a91dab029a93726824be12bf675eb5", "text": "def clear_globals_reload_modules ( self ) : self . code_array . clear_globals ( ) self . code_array . reload_modules ( ) # Clear result cache self . code_array . result_cache . clear ( )\n", "title": "", "metadata": ""}
{"_id": "21eceaee0d1756a03e396f075e840982", "text": "async def send_files_preconf ( filepaths , config_path = CONFIG_PATH ) : config = read_config ( config_path ) subject = \"PDF files from pdfebc\" message = \"\" await send_with_attachments ( subject , message , filepaths , config )\n", "title": "", "metadata": ""}
{"_id": "cfbced5fa9e0f109f478f36f49328760", "text": "def path_to_list ( pathstr ) : return [ elem for elem in pathstr . split ( os . path . pathsep ) if elem ]\n", "title": "", "metadata": ""}
{"_id": "dd2afcff6edc33f885fc7c7972eea58e", "text": "def get_connection ( self , host , port , db ) : return redis . StrictRedis ( host = host , port = port , db = db , decode_responses = True )\n", "title": "", "metadata": ""}
{"_id": "4e24145e81d54652be345a328364c488", "text": "def synthesize ( self , duration ) : sr = self . samplerate . samples_per_second seconds = duration / Seconds ( 1 ) samples = np . random . uniform ( low = - 1. , high = 1. , size = int ( sr * seconds ) ) return AudioSamples ( samples , self . samplerate )\n", "title": "", "metadata": ""}
{"_id": "f81ec0d625515ad9549ff85fcf845b74", "text": "def view_500 ( request , url = None ) : res = render_to_response ( \"500.html\" , context_instance = RequestContext ( request ) ) res . status_code = 500 return res\n", "title": "", "metadata": ""}
{"_id": "4e47fab2539b519c55daab28acef5ff3", "text": "def _composed_doc ( fs ) : if not fs : # Argument name for the docstring. return 'n' return '{f}({g})' . format ( f = fs [ 0 ] . __name__ , g = _composed_doc ( fs [ 1 : ] ) )\n", "title": "", "metadata": ""}
{"_id": "41a8b41851985f9d8cf5d9514a1c0fdd", "text": "def text_cleanup ( data , key , last_type ) : if key in data and last_type == STRING_TYPE : data [ key ] = data [ key ] . strip ( ) return data\n", "title": "", "metadata": ""}
{"_id": "1976b94b72455d5df4521a470d396a79", "text": "def trigger_fullscreen_action ( self , fullscreen ) : action = self . action_group . get_action ( 'fullscreen' ) action . set_active ( fullscreen )\n", "title": "", "metadata": ""}
{"_id": "d8ce28fc1c03d9f60d91a0e0b08828e6", "text": "def apply_conditional_styles ( self , cbfct ) : for ridx in range ( self . nrows ) : for cidx in range ( self . ncols ) : fmts = cbfct ( self . actual_values . iloc [ ridx , cidx ] ) fmts and self . iloc [ ridx , cidx ] . apply_styles ( fmts ) return self\n", "title": "", "metadata": ""}
{"_id": "f60e876cda08060c7b714340ebc5d719", "text": "def yank ( event ) : event . current_buffer . paste_clipboard_data ( event . cli . clipboard . get_data ( ) , count = event . arg , paste_mode = PasteMode . EMACS )\n", "title": "", "metadata": ""}
{"_id": "d02239386074a049059529fd513332c9", "text": "def go_to_new_line ( self ) : self . stdkey_end ( False , False ) self . insert_text ( self . get_line_separator ( ) )\n", "title": "", "metadata": ""}
{"_id": "c44ab5ff7f4ee20c48dd8fdc3f368f10", "text": "def __get_xml_text ( root ) : txt = \"\" for e in root . childNodes : if ( e . nodeType == e . TEXT_NODE ) : txt += e . data return txt\n", "title": "", "metadata": ""}
{"_id": "71922b86564b7810256dc3136511fa3a", "text": "def escape_link ( url ) : lower_url = url . lower ( ) . strip ( '\\x00\\x1a \\n\\r\\t' ) for scheme in _scheme_blacklist : if lower_url . startswith ( scheme ) : return '' return escape ( url , quote = True , smart_amp = False )\n", "title": "", "metadata": ""}
{"_id": "4b2cfc42af4c679ebcc6fbb4c7820812", "text": "def memory_usage ( self , deep = False ) : return self . _codes . nbytes + self . dtype . categories . memory_usage ( deep = deep )\n", "title": "", "metadata": ""}
{"_id": "3d260d76cfcb939331d3a2a44376bca2", "text": "def has_common ( self , other ) : if not isinstance ( other , WordSet ) : raise ValueError ( 'Can compare only WordSets' ) return self . term_set & other . term_set\n", "title": "", "metadata": ""}
{"_id": "db40369395d7d9f7da43bdd7afb978cb", "text": "def filter ( self , func ) : return self . __class__ ( [ i for i in self . res if func ( * i ) ] , name = 'filtered %s' % self . listname )\n", "title": "", "metadata": ""}
{"_id": "e3ea2a889c56e00610aa6e3e97ed13fe", "text": "def load_schema ( schema_path ) : with open ( schema_path , 'r' ) as schema_file : schema = simplejson . load ( schema_file ) resolver = RefResolver ( '' , '' , schema . get ( 'models' , { } ) ) return build_request_to_validator_map ( schema , resolver )\n", "title": "", "metadata": ""}
{"_id": "d09191015297a4e1823bb3063130c638", "text": "def _bytes_to_json ( value ) : if isinstance ( value , bytes ) : value = base64 . standard_b64encode ( value ) . decode ( \"ascii\" ) return value\n", "title": "", "metadata": ""}
{"_id": "04bc24ebc0685d979f49ac5fe12b60d4", "text": "def _date_to_json ( value ) : if isinstance ( value , datetime . date ) : value = value . isoformat ( ) return value\n", "title": "", "metadata": ""}
{"_id": "d329490de3e84513b91672176f069388", "text": "def stddev ( values , meanval = None ) : #from AI: A Modern Appproach if meanval == None : meanval = mean ( values ) return math . sqrt ( sum ( [ ( x - meanval ) ** 2 for x in values ] ) / ( len ( values ) - 1 ) )\n", "title": "", "metadata": ""}
{"_id": "5ad295781840dc3625d92a29163cdaf2", "text": "def string_to_float_list ( string_var ) : try : return [ float ( s ) for s in string_var . strip ( '[' ) . strip ( ']' ) . split ( ', ' ) ] except : return [ float ( s ) for s in string_var . strip ( '[' ) . strip ( ']' ) . split ( ',' ) ]\n", "title": "", "metadata": ""}
{"_id": "41ab35fb1176ca1495efaef7ebb51e2e", "text": "def _delete_whitespace ( self ) : while isinstance ( self . _lines [ - 1 ] , ( self . _Space , self . _LineBreak , self . _Indent ) ) : del self . _lines [ - 1 ]\n", "title": "", "metadata": ""}
{"_id": "6421b39001df319d029c5a067e8e4dc5", "text": "def _removeLru ( self ) : ( dataFile , handle ) = self . _cache . pop ( ) handle . close ( ) return dataFile\n", "title": "", "metadata": ""}
{"_id": "2ea26f9b3caa84d23d81d6f9ce12e511", "text": "def pretty_dict_string ( d , indent = 0 ) : s = '' for key , value in sorted ( d . items ( ) ) : s += '    ' * indent + str ( key ) if isinstance ( value , dict ) : s += '\\n' + pretty_dict_string ( value , indent + 1 ) else : s += '=' + str ( value ) + '\\n' return s\n", "title": "", "metadata": ""}
{"_id": "a1c80d066fc444d5b34dc5b16af5b2b8", "text": "def end_block ( self ) : self . current_indent -= 1 # If we did not add a new line automatically yet, now it's the time! if not self . auto_added_line : self . writeln ( ) self . auto_added_line = True\n", "title": "", "metadata": ""}
{"_id": "ef985942ee70196e5eb1d1ac23cc7987", "text": "def advance_one_line ( self ) : current_line = self . _current_token . line_number while current_line == self . _current_token . line_number : self . _current_token = ConfigParser . Token ( * next ( self . _token_generator ) )\n", "title": "", "metadata": ""}
{"_id": "40ed4aabb30e4d2f04c0247fcc41fec4", "text": "def camel_to_snake_case ( string ) : s = _1 . sub ( r'\\1_\\2' , string ) return _2 . sub ( r'\\1_\\2' , s ) . lower ( )\n", "title": "", "metadata": ""}
{"_id": "85a56b5b080db86b825c4637b29fca9c", "text": "def set_icon ( self , bmp ) : _icon = wx . EmptyIcon ( ) _icon . CopyFromBitmap ( bmp ) self . SetIcon ( _icon )\n", "title": "", "metadata": ""}
{"_id": "364a3d992b23c9dfc931628cefd56207", "text": "def get_own_ip ( ) : sock = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) try : sock . connect ( ( \"8.8.8.8\" , 80 ) ) except socket . gaierror : ip_ = \"127.0.0.1\" else : ip_ = sock . getsockname ( ) [ 0 ] finally : sock . close ( ) return ip_\n", "title": "", "metadata": ""}
{"_id": "c899c0592b1b1a3c86585ca0b7286d8f", "text": "def do_last ( environment , seq ) : try : return next ( iter ( reversed ( seq ) ) ) except StopIteration : return environment . undefined ( 'No last item, sequence was empty.' )\n", "title": "", "metadata": ""}
{"_id": "1697c68c4f69d4633e607f5effa90386", "text": "def average ( arr ) : if len ( arr ) == 0 : sys . stderr . write ( \"ERROR: no content in array to take average\\n\" ) sys . exit ( ) if len ( arr ) == 1 : return arr [ 0 ] return float ( sum ( arr ) ) / float ( len ( arr ) )\n", "title": "", "metadata": ""}
{"_id": "3bfecbf5f754db4884a0c3ba8fa165b7", "text": "def close ( * args , * * kwargs ) : _ , plt , _ = _import_plt ( ) plt . close ( * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "67fad7137875465ddec1639ddd6c3f53", "text": "def parse_datetime ( dt_str , format ) : t = time . strptime ( dt_str , format ) return datetime ( t [ 0 ] , t [ 1 ] , t [ 2 ] , t [ 3 ] , t [ 4 ] , t [ 5 ] , t [ 6 ] , pytz . UTC )\n", "title": "", "metadata": ""}
{"_id": "52b281b10ce2c9948662924c051fd900", "text": "def identifierify ( name ) : name = name . lower ( ) name = re . sub ( '[^a-z0-9]' , '_' , name ) return name\n", "title": "", "metadata": ""}
{"_id": "32f9fb87eff97a9fea97e577cd49dd8f", "text": "def dir_modtime ( dpath ) : return max ( os . path . getmtime ( d ) for d , _ , _ in os . walk ( dpath ) )\n", "title": "", "metadata": ""}
{"_id": "db98d495d73753ec52052ed97b97fab5", "text": "def merge ( self , obj ) : for attribute in dir ( obj ) : if '__' in attribute : continue setattr ( self , attribute , getattr ( obj , attribute ) )\n", "title": "", "metadata": ""}
{"_id": "b861534f9be7539c75b2c6c52edc686a", "text": "def _increase_file_handle_limit ( ) : logging . info ( 'Increasing file handle limit to {}' . format ( constants . FILE_HANDLE_LIMIT ) ) resource . setrlimit ( resource . RLIMIT_NOFILE , ( constants . FILE_HANDLE_LIMIT , resource . RLIM_INFINITY ) )\n", "title": "", "metadata": ""}
{"_id": "5d5a59cc1f5fe35898cdb19d3045c3bd", "text": "def _obj_cursor_to_dictionary ( self , cursor ) : if not cursor : return cursor cursor = json . loads ( json . dumps ( cursor , cls = BSONEncoder ) ) if cursor . get ( \"_id\" ) : cursor [ \"id\" ] = cursor . get ( \"_id\" ) del cursor [ \"_id\" ] return cursor\n", "title": "", "metadata": ""}
{"_id": "5c82c612053d275eff0a1179a32829ce", "text": "def rmglob ( pattern : str ) -> None : for f in glob . glob ( pattern ) : os . remove ( f )\n", "title": "", "metadata": ""}
{"_id": "8570175ba51d0cf53e24e4a8dc4564fa", "text": "def md_to_text ( content ) : text = None html = markdown . markdown ( content ) if html : text = html_to_text ( content ) return text\n", "title": "", "metadata": ""}
{"_id": "2e9cf62b7b619aa5d7cfcf329e65982f", "text": "def test_security ( self ) : self . assertEqual ( run_example ( examples_folder + \"security.py --generate\" ) , 0 ) self . assertEqual ( run_example ( examples_folder + \"security.py --revoke\" ) , 0 )\n", "title": "", "metadata": ""}
{"_id": "408d719a2da508358437140872ecb8f5", "text": "def _get_context ( argspec , kwargs ) : if argspec . keywords is not None : return kwargs return dict ( ( arg , kwargs [ arg ] ) for arg in argspec . args if arg in kwargs )\n", "title": "", "metadata": ""}
{"_id": "cd063dc0189eb50c45168d20f5b4b0bb", "text": "def dist ( x1 , x2 , axis = 0 ) : return np . linalg . norm ( x2 - x1 , axis = axis )\n", "title": "", "metadata": ""}
{"_id": "47f36a6c85c6cf6d6b82b6ace12d4954", "text": "def class_check ( vector ) : for i in vector : if not isinstance ( i , type ( vector [ 0 ] ) ) : return False return True\n", "title": "", "metadata": ""}
{"_id": "af0daf5287dbad0139bbb1ea73706b59", "text": "def norm ( x , mu , sigma = 1.0 ) : return stats . norm ( loc = mu , scale = sigma ) . pdf ( x )\n", "title": "", "metadata": ""}
{"_id": "7dadf637faacfeb0b4ad5337f3594cdf", "text": "def time_string ( seconds ) : s = int ( round ( seconds ) ) # round to nearest second h , s = divmod ( s , 3600 ) # get hours and remainder m , s = divmod ( s , 60 ) # split remainder into minutes and seconds return \"%2i:%02i:%02i\" % ( h , m , s )\n", "title": "", "metadata": ""}
{"_id": "53b3afd4ab250e904f7d4ca05676967e", "text": "def _lookup_enum_in_ns ( namespace , value ) : for attribute in dir ( namespace ) : if getattr ( namespace , attribute ) == value : return attribute\n", "title": "", "metadata": ""}
{"_id": "a203f02d6456c3b1415f1364debca854", "text": "def debug ( self , text ) : self . logger . debug ( \"{}{}\" . format ( self . message_prefix , text ) )\n", "title": "", "metadata": ""}
{"_id": "0c0474851b495806acd00e932dbf2b1f", "text": "def _name_exists ( self , name ) : for i in range ( self . count ( ) ) : if self . tabText ( i ) == name : return True return False\n", "title": "", "metadata": ""}
{"_id": "57e823d15218328aaeee42b7e513adb5", "text": "def makedirs ( path , mode = 0o777 , exist_ok = False ) : os . makedirs ( path , mode , exist_ok )\n", "title": "", "metadata": ""}
{"_id": "d0629c30e3cddef21e59ebb9eeb879c0", "text": "def is_type ( value ) : if isinstance ( value , type ) : return issubclass ( value , Type ) return isinstance ( value , Type )\n", "title": "", "metadata": ""}
{"_id": "838917cd97d68f08c52723440c50defa", "text": "def getEventTypeNameFromEnum ( self , eType ) : fn = self . function_table . getEventTypeNameFromEnum result = fn ( eType ) return result\n", "title": "", "metadata": ""}
{"_id": "83dc9c287fab75b1d12146f78f296d65", "text": "def list_apis ( awsclient ) : client_api = awsclient . get_client ( 'apigateway' ) apis = client_api . get_rest_apis ( ) [ 'items' ] for api in apis : print ( json2table ( api ) )\n", "title": "", "metadata": ""}
{"_id": "bcdb0c6507405ad206326ecc97f211e7", "text": "def _ipv4_text_to_int ( self , ip_text ) : if ip_text is None : return None assert isinstance ( ip_text , str ) return struct . unpack ( '!I' , addrconv . ipv4 . text_to_bin ( ip_text ) ) [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "115ad43af651d4b28a045667c4029dee", "text": "def setup_path ( ) : import os . path import sys if sys . argv [ 0 ] : top_dir = os . path . dirname ( os . path . abspath ( sys . argv [ 0 ] ) ) sys . path = [ os . path . join ( top_dir , \"src\" ) ] + sys . path pass return\n", "title": "", "metadata": ""}
{"_id": "aae2c950c87e41932948036102428d04", "text": "def move ( self , x , y ) : self . _cursor = self . _normalizePoint ( x , y )\n", "title": "", "metadata": ""}
{"_id": "b6c714d5a8c8f65458a01714b746748e", "text": "def get_img_data ( f , maxsize = ( 1200 , 850 ) , first = False ) : img = Image . open ( f ) img . thumbnail ( maxsize ) if first : # tkinter is inactive the first time bio = io . BytesIO ( ) img . save ( bio , format = \"PNG\" ) del img return bio . getvalue ( ) return ImageTk . PhotoImage ( img )\n", "title": "", "metadata": ""}
{"_id": "15d937b0dc3c629ea7b9458b4153f5df", "text": "def clean_axis ( axis ) : axis . get_xaxis ( ) . set_ticks ( [ ] ) axis . get_yaxis ( ) . set_ticks ( [ ] ) for spine in list ( axis . spines . values ( ) ) : spine . set_visible ( False )\n", "title": "", "metadata": ""}
{"_id": "8608328d2c5391568e0b2f052fae2874", "text": "def __init__ ( self , ba = None ) : self . bytearray = ba or ( bytearray ( b'\\0' ) * self . SIZEOF )\n", "title": "", "metadata": ""}
{"_id": "a22bebcd501f4c7d7cba41f97af40fed", "text": "def recarray ( self ) : return numpy . rec . fromrecords ( self . records , names = self . names )\n", "title": "", "metadata": ""}
{"_id": "a78e0456eb69eb71633980293e1f218f", "text": "def fetchvalue ( self , sql : str , * args ) -> Optional [ Any ] : row = self . fetchone ( sql , * args ) if row is None : return None return row [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "648f7f7f489c44792719a8ca6f68ce0c", "text": "def confusion_matrix ( links_true , links_pred , total = None ) : links_true = _get_multiindex ( links_true ) links_pred = _get_multiindex ( links_pred ) tp = true_positives ( links_true , links_pred ) fp = false_positives ( links_true , links_pred ) fn = false_negatives ( links_true , links_pred ) if total is None : tn = numpy . nan else : tn = true_negatives ( links_true , links_pred , total ) return numpy . array ( [ [ tp , fn ] , [ fp , tn ] ] )\n", "title": "", "metadata": ""}
{"_id": "97a0fb0ae971faf522a48357037549df", "text": "def forget_coords ( self ) : self . w . ntotal . set_text ( '0' ) self . coords_dict . clear ( ) self . redo ( )\n", "title": "", "metadata": ""}
{"_id": "8e3a0c43b80ce7f9a4e3a02908021367", "text": "def is_http_running_on ( port ) : try : conn = httplib . HTTPConnection ( '127.0.0.1:' + str ( port ) ) conn . connect ( ) conn . close ( ) return True except Exception : return False\n", "title": "", "metadata": ""}
{"_id": "2def6481201b7bf0e94d102f3625affd", "text": "def head ( self ) -> Any : lambda_list = self . _get_value ( ) return lambda_list ( lambda head , _ : head )\n", "title": "", "metadata": ""}
{"_id": "374289f0babb9ee5463028fb888f19f4", "text": "def _read_stdin ( ) : line = sys . stdin . readline ( ) while line : yield line line = sys . stdin . readline ( )\n", "title": "", "metadata": ""}
{"_id": "f726b17b2522d3db03df8e65331c632b", "text": "def is_strict_numeric ( n : Node ) -> bool : return is_typed_literal ( n ) and cast ( Literal , n ) . datatype in [ XSD . integer , XSD . decimal , XSD . float , XSD . double ]\n", "title": "", "metadata": ""}
{"_id": "9738e4fdc8e66d10a7651550a939e14f", "text": "def read_key ( self , key , bucket_name = None ) : obj = self . get_key ( key , bucket_name ) return obj . get ( ) [ 'Body' ] . read ( ) . decode ( 'utf-8' )\n", "title": "", "metadata": ""}
{"_id": "43ec372c90735e6ca61bea466e706d9d", "text": "def ensure_dir ( f ) : d = os . path . dirname ( f ) if not os . path . exists ( d ) : os . makedirs ( d )\n", "title": "", "metadata": ""}
{"_id": "60248e8b6139c48cc71de16a5388bd8c", "text": "def is_callable ( * p ) : import symbols return all ( isinstance ( x , symbols . FUNCTION ) for x in p )\n", "title": "", "metadata": ""}
{"_id": "7664eeafcd82e1f9a09905253ea3896f", "text": "def levenshtein_distance_metric ( a , b ) : return ( levenshtein_distance ( a , b ) / ( 2.0 * max ( len ( a ) , len ( b ) , 1 ) ) )\n", "title": "", "metadata": ""}
{"_id": "f5d0c86d7778b8752966fabe3fbbad06", "text": "def match_aspect_to_viewport ( self ) : viewport = self . viewport self . aspect = float ( viewport . width ) / viewport . height\n", "title": "", "metadata": ""}
{"_id": "9d73cefeb4db0f82301cca2c75dd7894", "text": "def index_nearest ( array , value ) : idx = ( np . abs ( array - value ) ) . argmin ( ) return idx\n", "title": "", "metadata": ""}
{"_id": "949576976d1917a62fd3e03d0b0d020f", "text": "def is_relative_url ( url ) : if url . startswith ( \"#\" ) : return None if url . find ( \"://\" ) > 0 or url . startswith ( \"//\" ) : # either 'http(s)://...' or '//cdn...' and therefore absolute return False return True\n", "title": "", "metadata": ""}
{"_id": "d5e0525c66ef231eeb045a8614899e1b", "text": "def comma_converter ( float_string ) : trans_table = maketrans ( b',' , b'.' ) return float ( float_string . translate ( trans_table ) )\n", "title": "", "metadata": ""}
{"_id": "f72c4e33bda53844c23273c54458e0ba", "text": "def prnt ( self ) : print ( \"= = = =\\n\\n%s object key: \\033[32m%s\\033[0m\" % ( self . __class__ . __name__ , self . key ) ) pprnt ( self . _data or self . clean_value ( ) )\n", "title": "", "metadata": ""}
{"_id": "7d0f6ea0ec8c60cffcb55bf0e1c0dbb1", "text": "def remove_columns ( self , data , columns ) : for column in columns : if column in data . columns : data = data . drop ( column , axis = 1 ) return data\n", "title": "", "metadata": ""}
{"_id": "99b8ffbd9dd4685e7c29c65bddc798b7", "text": "def user_return ( self , frame , return_value ) : pdb . Pdb . user_return ( self , frame , return_value )\n", "title": "", "metadata": ""}
{"_id": "24d1016c57f02b937b832da6c3431efa", "text": "def rpc_fix_code ( self , source , directory ) : source = get_source ( source ) return fix_code ( source , directory )\n", "title": "", "metadata": ""}
{"_id": "b0837005d01a5d8589e3d7aaea3206a9", "text": "def _calc_dir_size ( path ) : dir_size = 0 for ( root , dirs , files ) in os . walk ( path ) : for fn in files : full_fn = os . path . join ( root , fn ) dir_size += os . path . getsize ( full_fn ) return dir_size\n", "title": "", "metadata": ""}
{"_id": "0bbcf6738b681e068a17e19175c76479", "text": "def touch_project ( ) : r = Response ( ) project = cd . project . get_internal_project ( ) if project : project . refresh ( ) else : r . fail ( code = 'NO_PROJECT' , message = 'No open project to refresh' ) return r . update ( sync_time = sync_status . get ( 'time' , 0 ) ) . flask_serialize ( )\n", "title": "", "metadata": ""}
{"_id": "9e0c7b80f5e20e4d0e44af0f5d9d5b0e", "text": "def __setitem__ ( self , _ignored , return_value ) : self . mock . return_value = return_value self . mock . side_effect = None\n", "title": "", "metadata": ""}
{"_id": "8416e51baf86f875daeedd5accc77586", "text": "def scale_min ( im , targ , interpolation = cv2 . INTER_AREA ) : r , c ,  * _ = im . shape ratio = targ / min ( r , c ) sz = ( scale_to ( c , ratio , targ ) , scale_to ( r , ratio , targ ) ) return cv2 . resize ( im , sz , interpolation = interpolation )\n", "title": "", "metadata": ""}
{"_id": "d0f7b4f1b7eb36513649428c38d27cfe", "text": "def series_index ( self , series ) : for idx , s in enumerate ( self ) : if series is s : return idx raise ValueError ( 'series not in chart data object' )\n", "title": "", "metadata": ""}
{"_id": "19d7ab5458900e7576e0047f8b3d21d5", "text": "def _internal_kv_get ( key ) : worker = ray . worker . get_global_worker ( ) if worker . mode == ray . worker . LOCAL_MODE : return _local . get ( key ) return worker . redis_client . hget ( key , \"value\" )\n", "title": "", "metadata": ""}
{"_id": "093d3d43f8ba8aed53ec4ddd103e78ce", "text": "def round_to_x_digits ( number , digits ) : return round ( number * math . pow ( 10 , digits ) ) / math . pow ( 10 , digits )\n", "title": "", "metadata": ""}
{"_id": "9deef06285d65be0bbe490dc9f097b7f", "text": "def gray2bgr ( img ) : img = img [ ... , None ] if img . ndim == 2 else img out_img = cv2 . cvtColor ( img , cv2 . COLOR_GRAY2BGR ) return out_img\n", "title": "", "metadata": ""}
{"_id": "487253f42847d5ef29f33b95579e681d", "text": "def fill_nulls ( self , col : str ) : n = [ None , \"\" ] try : self . df [ col ] = self . df [ col ] . replace ( n , nan ) except Exception as e : self . err ( e )\n", "title": "", "metadata": ""}
{"_id": "7579b2f2b07523784a12a1576552fd9a", "text": "def write_file ( filename , content ) : print 'Generating {0}' . format ( filename ) with open ( filename , 'wb' ) as out_f : out_f . write ( content )\n", "title": "", "metadata": ""}
{"_id": "b2169f14e4e1de6856724b064aca063e", "text": "def access_ok ( self , access ) : for c in access : if c not in self . perms : return False return True\n", "title": "", "metadata": ""}
{"_id": "30b3cd7518c75f046dc9147d39d6c2b9", "text": "def ignored_regions ( source ) : return [ ( match . start ( ) , match . end ( ) ) for match in _str . finditer ( source ) ]\n", "title": "", "metadata": ""}
{"_id": "237dc1a654687895fbce41eca64e221e", "text": "def readme ( ) : try : import pypandoc readme_content = pypandoc . convert ( 'README.md' , 'rst' ) except ( IOError , ImportError ) : print ( \"Warning: no pypandoc module found.\" ) try : readme_content = open ( 'README.md' ) . read ( ) except IOError : readme_content = '' return readme_content\n", "title": "", "metadata": ""}
{"_id": "8129d9b8bb59e74c4a2c27a101b5ff9d", "text": "def index_all ( self , index_name ) : oks = 0 notoks = 0 for ok , item in streaming_bulk ( self . es_client , self . _iter_documents ( index_name ) ) : if ok : oks += 1 else : notoks += 1 logging . info ( \"Import results: %d ok, %d not ok\" , oks , notoks )\n", "title": "", "metadata": ""}
{"_id": "c0ae357a2f6acc10c2e07e6589e7f3a6", "text": "def cov_to_correlation ( cov ) : err = np . sqrt ( np . diag ( cov ) ) errinv = np . ones_like ( err ) * np . nan m = np . isfinite ( err ) & ( err != 0 ) errinv [ m ] = 1. / err [ m ] corr = np . array ( cov ) return corr * np . outer ( errinv , errinv )\n", "title": "", "metadata": ""}
{"_id": "d54cb025e0b052c4e827613b942197da", "text": "def chmod_add_excute ( filename ) : st = os . stat ( filename ) os . chmod ( filename , st . st_mode | stat . S_IEXEC )\n", "title": "", "metadata": ""}
{"_id": "11b745483db65025362854f8a4ea311f", "text": "def extend ( self , iterable ) : return super ( Collection , self ) . extend ( self . _ensure_iterable_is_valid ( iterable ) )\n", "title": "", "metadata": ""}
{"_id": "15f7a99b7e6511bafecb24e6f9e14754", "text": "def uint32_to_uint8 ( cls , img ) : return np . flipud ( img . view ( dtype = np . uint8 ) . reshape ( img . shape + ( 4 , ) ) )\n", "title": "", "metadata": ""}
{"_id": "18ade048792874215271e70794b6f76f", "text": "def _delete_keys ( dct , keys ) : c = deepcopy ( dct ) assert isinstance ( keys , list ) for k in keys : c . pop ( k ) return c\n", "title": "", "metadata": ""}
{"_id": "9cf2808c927827f1580b007b90a6fb92", "text": "def calculate_size ( name , data_list ) : data_size = 0 data_size += calculate_size_str ( name ) data_size += INT_SIZE_IN_BYTES for data_list_item in data_list : data_size += calculate_size_data ( data_list_item ) return data_size\n", "title": "", "metadata": ""}
{"_id": "d0769898cfc6c964c6ccc8e6e4dcf9c0", "text": "def contains_extractor ( document ) : tokens = _get_document_tokens ( document ) features = dict ( ( u'contains({0})' . format ( w ) , True ) for w in tokens ) return features\n", "title": "", "metadata": ""}
{"_id": "88f106a7773bc312b44f5915dd8f67a7", "text": "def crop_box ( im , box = False , * * kwargs ) : if box : im = im . crop ( box ) return im\n", "title": "", "metadata": ""}
{"_id": "f418042d6ae29afb6887e447bff3e738", "text": "def _select_features ( example , feature_list = None ) : feature_list = feature_list or [ \"inputs\" , \"targets\" ] return { f : example [ f ] for f in feature_list }\n", "title": "", "metadata": ""}
{"_id": "ae1f5f275c8e7803e9232105fb869ccd", "text": "def _namematcher ( regex ) : matcher = re_compile ( regex ) def match ( target ) : target_name = getattr ( target , '__name__' , '' ) result = matcher . match ( target_name ) return result return match\n", "title": "", "metadata": ""}
{"_id": "01193442472d219e594e042e8943f70e", "text": "def index ( self , elem ) : return _coconut . len ( self . _iter ) - self . _iter . index ( elem ) - 1\n", "title": "", "metadata": ""}
{"_id": "1edd4e02362e16fa6ca370d6d09b2863", "text": "def wordfreq ( text , is_filename = False ) : if is_filename : with open ( text ) as f : text = f . read ( ) freqs = { } for word in text . split ( ) : lword = word . lower ( ) freqs [ lword ] = freqs . get ( lword , 0 ) + 1 return freqs\n", "title": "", "metadata": ""}
{"_id": "35f69ff6cab5967d1cea11a155d16026", "text": "def bool_str ( string ) : if string not in BOOL_STRS : raise ValueError ( 'Invalid boolean string: \"{}\"' . format ( string ) ) return True if string == 'true' else False\n", "title": "", "metadata": ""}
{"_id": "bd603b20f3ab4a8261e045233fc8a304", "text": "def load_search_freq ( fp = SEARCH_FREQ_JSON ) : try : with open ( fp ) as f : return Counter ( json . load ( f ) ) except FileNotFoundError : return Counter ( )\n", "title": "", "metadata": ""}
{"_id": "cf91ef3baf0528a715ee2b728e18c611", "text": "def _get_background_color ( self ) : color = self . cell_attributes [ self . key ] [ \"bgcolor\" ] return tuple ( c / 255.0 for c in color_pack2rgb ( color ) )\n", "title": "", "metadata": ""}
{"_id": "1ec5fa9ca0bf62a4f7dda382d3b800fa", "text": "def oplot ( self , x , y , * * kw ) : self . panel . oplot ( x , y , * * kw )\n", "title": "", "metadata": ""}
{"_id": "be9e722096a6882def39aee5bc6fb28e", "text": "def new_random_state ( seed = None , fully_random = False ) : if seed is None : if not fully_random : # sample manually a seed instead of just RandomState(), # because the latter one # is way slower. seed = CURRENT_RANDOM_STATE . randint ( SEED_MIN_VALUE , SEED_MAX_VALUE , 1 ) [ 0 ] return np . random . RandomState ( seed )\n", "title": "", "metadata": ""}
{"_id": "d9c1c3da0e367b310d6177eeba3128af", "text": "def is_in ( self , search_list , pair ) : index = - 1 for nr , i in enumerate ( search_list ) : if ( np . all ( i == pair ) ) : return nr return index\n", "title": "", "metadata": ""}
{"_id": "a05cce593e32fe979a49a1c1205fc57c", "text": "def Slice ( a , begin , size ) : return np . copy ( a ) [ [ slice ( * tpl ) for tpl in zip ( begin , begin + size ) ] ] ,\n", "title": "", "metadata": ""}
{"_id": "d17b4d6870a24a84cc4a1b516ebe65c6", "text": "def jaccard ( c_1 , c_2 ) : nom = np . intersect1d ( c_1 , c_2 ) . size denom = np . union1d ( c_1 , c_2 ) . size return nom / denom\n", "title": "", "metadata": ""}
{"_id": "498ba15b922dd3bb796e94c620208882", "text": "def dedup_list ( l ) : dedup = set ( ) return [ x for x in l if not ( x in dedup or dedup . add ( x ) ) ]\n", "title": "", "metadata": ""}
{"_id": "c4ae1b9a96de8f0a8e860f6d73d2ec80", "text": "def timeout_thread_handler ( timeout , stop_event ) : stop_happened = stop_event . wait ( timeout ) if stop_happened is False : print ( \"Killing program due to %f second timeout\" % timeout ) os . _exit ( 2 )\n", "title": "", "metadata": ""}
{"_id": "34fe0dd951920350dc1c01f7aa718247", "text": "def save_image ( pdf_path , img_path , page_num ) : pdf_img = Image ( filename = \"{}[{}]\" . format ( pdf_path , page_num ) ) with pdf_img . convert ( \"png\" ) as converted : # Set white background. converted . background_color = Color ( \"white\" ) converted . alpha_channel = \"remove\" converted . save ( filename = img_path )\n", "title": "", "metadata": ""}
{"_id": "69d5778e7f8031c96616d2a0d7e71324", "text": "def is_bytes ( string ) : if six . PY3 and isinstance ( string , ( bytes , memoryview , bytearray ) ) : # noqa return True elif six . PY2 and isinstance ( string , ( buffer , bytearray ) ) : # noqa return True return False\n", "title": "", "metadata": ""}
{"_id": "afcdfba7cfe21dc66b6e4c0d8b0bc5e1", "text": "def slugify ( s , delimiter = '-' ) : s = unicodedata . normalize ( 'NFKD' , to_unicode ( s ) ) . encode ( 'ascii' , 'ignore' ) . decode ( 'ascii' ) return RE_SLUG . sub ( delimiter , s ) . strip ( delimiter ) . lower ( )\n", "title": "", "metadata": ""}
{"_id": "2464730d3e5b34e262e9f41019a7e2fc", "text": "def synth_hangul ( string ) : raise NotImplementedError return '' . join ( [ '' . join ( '' . join ( jamo_to_hcj ( _ ) ) for _ in string ) ] )\n", "title": "", "metadata": ""}
{"_id": "cc462c8545925dc7f4d840fcf6a9b83f", "text": "def cross_v2 ( vec1 , vec2 ) : return vec1 . y * vec2 . x - vec1 . x * vec2 . y\n", "title": "", "metadata": ""}
{"_id": "38f597d96673aec6a5ea98c04fcd4e26", "text": "def is_subdir ( a , b ) : a , b = map ( os . path . abspath , [ a , b ] ) return os . path . commonpath ( [ a , b ] ) == b\n", "title": "", "metadata": ""}
{"_id": "a89aa8b06119d77ece5fa3c123ff315f", "text": "def _preprocess ( df ) : df = df . stack ( ) df . index . rename ( [ \"id\" , \"time\" ] , inplace = True ) # .reset_index() df . name = \"value\" df = df . reset_index ( ) return df\n", "title": "", "metadata": ""}
{"_id": "efb03f06470c513415d14a162ae2ab51", "text": "def wrap ( text , indent = '    ' ) : wrapper = textwrap . TextWrapper ( width = int ( os . environ . get ( 'COLUMNS' , 80 ) ) , initial_indent = indent , subsequent_indent = indent ) return '\\n' . join ( wrapper . wrap ( text ) )\n", "title": "", "metadata": ""}
{"_id": "e84c942bdfcd4cb00c43149db2ac1ea1", "text": "def to_topojson ( self ) : topojson = self . topojson topojson [ \"objects\" ] [ \"points\" ] = { \"type\" : \"GeometryCollection\" , \"geometries\" : [ point . to_topojson ( ) for point in self . points . all ( ) ] , } return json . dumps ( topojson )\n", "title": "", "metadata": ""}
{"_id": "9e833066affaec0ee2bb57b6bbd2a20c", "text": "def branches ( self ) : result = self . git ( self . default + [ 'branch' , '-a' , '--no-color' ] ) return [ l . strip ( ' *\\n' ) for l in result . split ( '\\n' ) if l . strip ( ' *\\n' ) ]\n", "title": "", "metadata": ""}
{"_id": "f3d5d9fcab1d4c9ac56379a6ba609fe1", "text": "def get_last ( self , table = None ) : if table is None : table = self . main_table query = 'SELECT * FROM \"%s\" ORDER BY ROWID DESC LIMIT 1;' % table return self . own_cursor . execute ( query ) . fetchone ( )\n", "title": "", "metadata": ""}
{"_id": "883bcdf2f4d648007c89c70be18dd870", "text": "def pause ( msg = \"Press Enter to Continue...\" ) : print ( '\\n' + Fore . YELLOW + msg + Fore . RESET , end = '' ) input ( )\n", "title": "", "metadata": ""}
{"_id": "efe97539c1c99785099e9f3c72837eab", "text": "def unpickle_stats ( stats ) : stats = cPickle . loads ( stats ) stats . stream = True return stats\n", "title": "", "metadata": ""}
{"_id": "3fd813112bf5c8295d481430f7414d85", "text": "def to_pascal_case ( s ) : return re . sub ( r'(?!^)_([a-zA-Z])' , lambda m : m . group ( 1 ) . upper ( ) , s . capitalize ( ) )\n", "title": "", "metadata": ""}
{"_id": "ae006c6b717938fe0788fbe9fb4ecc5c", "text": "def convert_bytes_to_ints ( in_bytes , num ) : dt = numpy . dtype ( '>i' + str ( num ) ) return numpy . frombuffer ( in_bytes , dt )\n", "title": "", "metadata": ""}
{"_id": "816ed7e2bf58e83b538baa1b080b7e85", "text": "def _get_gid ( name ) : if getgrnam is None or name is None : return None try : result = getgrnam ( name ) except KeyError : result = None if result is not None : return result [ 2 ] return None\n", "title": "", "metadata": ""}
{"_id": "de171da5f4b3a7cc957f7a9fa469e239", "text": "def open_with_encoding ( filename , encoding , mode = 'r' ) : return io . open ( filename , mode = mode , encoding = encoding , newline = '' )\n", "title": "", "metadata": ""}
{"_id": "e31d810fa709e617d795cfcaf777ff13", "text": "def run_hive_script ( script ) : if not os . path . isfile ( script ) : raise RuntimeError ( \"Hive script: {0} does not exist.\" . format ( script ) ) return run_hive ( [ '-f' , script ] )\n", "title": "", "metadata": ""}
{"_id": "48349c609a3cb772145f8905fe2cd7a1", "text": "def copy_without_prompts ( self ) : text = self . get_selected_text ( ) lines = text . split ( os . linesep ) for index , line in enumerate ( lines ) : if line . startswith ( '>>> ' ) or line . startswith ( '... ' ) : lines [ index ] = line [ 4 : ] text = os . linesep . join ( lines ) QApplication . clipboard ( ) . setText ( text )\n", "title": "", "metadata": ""}
{"_id": "306691aa87ff46c8c8992f36f3754abc", "text": "def get_csrf_token ( response ) : cookie_headers = [ h . decode ( 'ascii' ) for h in response . headers . getlist ( \"Set-Cookie\" ) ] if not cookie_headers : return None csrf_headers = [ h for h in cookie_headers if h . startswith ( \"csrftoken=\" ) ] if not csrf_headers : return None match = re . match ( \"csrftoken=([^ ;]+);\" , csrf_headers [ - 1 ] ) return match . group ( 1 )\n", "title": "", "metadata": ""}
{"_id": "2c6f80be91339091dce28bccdb7f7867", "text": "def contains ( self , token : str ) -> bool : self . _validate_token ( token ) return token in self\n", "title": "", "metadata": ""}
{"_id": "67170d7c8e5fd6c2f03e7ea7980d3617", "text": "def rm_keys_from_dict ( d , keys ) : # Loop for each key given for key in keys : # Is the key in the dictionary? if key in d : try : d . pop ( key , None ) except KeyError : # Not concerned with an error. Keep going. pass return d\n", "title": "", "metadata": ""}
{"_id": "505abd920b3ca8bf7d2b802cdef54c4c", "text": "def find_path ( self , start , end , grid ) : start . g = 0 start . f = 0 return super ( AStarFinder , self ) . find_path ( start , end , grid )\n", "title": "", "metadata": ""}
{"_id": "f562e78ae5ac2f1a3df5c431838f6270", "text": "def get ( s , delimiter = '' , format = \"diacritical\" ) : return delimiter . join ( _pinyin_generator ( u ( s ) , format = format ) )\n", "title": "", "metadata": ""}
{"_id": "8833eedfa804a9c2be45c5920b0927fd", "text": "def filtany ( entities , * * kw ) : ret = set ( ) for k , v in kw . items ( ) : for entity in entities : if getattr ( entity , k ) ( ) == v : ret . add ( entity ) return ret\n", "title": "", "metadata": ""}
{"_id": "bd8f76b4d24fab688f509ab3203bf5b0", "text": "def download_file ( bucket_name , path , target , sagemaker_session ) : path = path . lstrip ( '/' ) boto_session = sagemaker_session . boto_session s3 = boto_session . resource ( 's3' ) bucket = s3 . Bucket ( bucket_name ) bucket . download_file ( path , target )\n", "title": "", "metadata": ""}
{"_id": "e416d9c2fdd539292bc87b3117e39807", "text": "def bytesize ( arr ) : byte_size = np . prod ( arr . shape ) * np . dtype ( arr . dtype ) . itemsize return byte_size\n", "title": "", "metadata": ""}
{"_id": "e0080ef82d99bb1a0d4957dd5b30303e", "text": "def join ( self ) : for thread in self . worker_threads : thread . join ( ) WorkerThread . join ( self )\n", "title": "", "metadata": ""}
{"_id": "a922243a364abd33e5588b22e6c6a535", "text": "def is_executable ( path ) : return os . path . isfile ( path ) and os . access ( path , os . X_OK )\n", "title": "", "metadata": ""}
{"_id": "316631a18270d966daf184195ae534a6", "text": "def __len__ ( self ) : return len ( [ i for i in ( set ( dir ( self ) ) - self . _STANDARD_ATTRS ) if i [ 0 ] != '_' ] )\n", "title": "", "metadata": ""}
{"_id": "bb78ad5acb8e8e0f97336a7cbf61caea", "text": "def gen_lower ( x : Iterable [ str ] ) -> Generator [ str , None , None ] : for string in x : yield string . lower ( )\n", "title": "", "metadata": ""}
{"_id": "375524ce5bc8ac7e2fd153a92524eba1", "text": "def value_to_python ( self , value ) : if not isinstance ( value , bytes ) : raise tldap . exceptions . ValidationError ( \"should be a bytes\" ) value = value . decode ( \"utf_8\" ) return value\n", "title": "", "metadata": ""}
{"_id": "5626438c2e8cc24b5bc3524276b7d6a6", "text": "def __str__ ( self ) : return 'Output name: \"%s\" watts: %d type: \"%s\" id: %d' % ( self . _name , self . _watts , self . _output_type , self . _integration_id )\n", "title": "", "metadata": ""}
{"_id": "31f86ebb9a6bc1a7314c456fd6ec6d49", "text": "def shot_noise ( x , severity = 1 ) : c = [ 60 , 25 , 12 , 5 , 3 ] [ severity - 1 ] x = np . array ( x ) / 255. x_clip = np . clip ( np . random . poisson ( x * c ) / float ( c ) , 0 , 1 ) * 255 return around_and_astype ( x_clip )\n", "title": "", "metadata": ""}
{"_id": "1a1ed55fb7b4f4aac1ffd0f63861c000", "text": "def to_python ( self , value ) : if value is None : return value if isinstance ( value , self . enum ) : return value return self . enum [ value ]\n", "title": "", "metadata": ""}
{"_id": "be4cbe64fb4d98c9616af724aad855eb", "text": "def drop_trailing_zeros ( num ) : txt = '%f' % ( num ) txt = txt . rstrip ( '0' ) if txt . endswith ( '.' ) : txt = txt [ : - 1 ] return txt\n", "title": "", "metadata": ""}
{"_id": "33f29e8bd69f078e650dd3c150fede7c", "text": "def with_headers ( self , headers ) : for key , value in headers . items ( ) : self . with_header ( key , value ) return self\n", "title": "", "metadata": ""}
{"_id": "0e2291c943d6e69532d973bfc7e61c17", "text": "def render_template ( env , filename , values = None ) : if not values : values = { } tmpl = env . get_template ( filename ) return tmpl . render ( values )\n", "title": "", "metadata": ""}
{"_id": "d70ca361bd7ed65ec31df6198c92c612", "text": "def all_collections ( db ) : include_pattern = r'(?!system\\.)' return ( db [ name ] for name in db . list_collection_names ( ) if re . match ( include_pattern , name ) )\n", "title": "", "metadata": ""}
{"_id": "33551acb226f2eb49486b2c7e4ff7d9e", "text": "def unpack_out ( self , name ) : return self . parse ( \"\"\"             $enum = $enum_class($value.value)             \"\"\" , enum_class = self . _import_type ( ) , value = name ) [ \"enum\" ]\n", "title": "", "metadata": ""}
{"_id": "58491de54174e6c04c335bf25a28733d", "text": "def _deserialize_datetime ( self , data ) : for key in data : if isinstance ( data [ key ] , dict ) : if data [ key ] . get ( 'type' ) == 'datetime' : data [ key ] = datetime . datetime . fromtimestamp ( data [ key ] [ 'value' ] ) return data\n", "title": "", "metadata": ""}
{"_id": "ae44ccfa01440b90de46761118494c09", "text": "def heappush_max ( heap , item ) : heap . append ( item ) _siftdown_max ( heap , 0 , len ( heap ) - 1 )\n", "title": "", "metadata": ""}
{"_id": "001a398405edd4348b6ca1944378335f", "text": "def validate ( self , val ) : if val in self . values : return True , None else : return False , \"'%s' is not in enum: %s\" % ( val , str ( self . values ) )\n", "title": "", "metadata": ""}
{"_id": "8caceec48295bf6b83f71f613ed47a5b", "text": "def isPackage ( file_path ) : return ( os . path . isdir ( file_path ) and os . path . isfile ( os . path . join ( file_path , '__init__.py' ) ) )\n", "title": "", "metadata": ""}
{"_id": "9d029a5e0dd4e599852639e3f20190a5", "text": "def init_checks_registry ( ) : mod = inspect . getmodule ( register_check ) for ( name , function ) in inspect . getmembers ( mod , inspect . isfunction ) : register_check ( function )\n", "title": "", "metadata": ""}
{"_id": "3236df8cf77de2d550227b8278a1e16d", "text": "def sp_rand ( m , n , a ) : if m == 0 or n == 0 : return spmatrix ( [ ] , [ ] , [ ] , ( m , n ) ) nnz = min ( max ( 0 , int ( round ( a * m * n ) ) ) , m * n ) nz = matrix ( random . sample ( range ( m * n ) , nnz ) , tc = 'i' ) return spmatrix ( normal ( nnz , 1 ) , nz % m , matrix ( [ int ( ii ) for ii in nz / m ] ) , ( m , n ) )\n", "title": "", "metadata": ""}
{"_id": "6dd4239d5c582eee744815a862ed38f8", "text": "def close_database_session ( session ) : try : session . close ( ) except OperationalError as e : raise DatabaseError ( error = e . orig . args [ 1 ] , code = e . orig . args [ 0 ] )\n", "title": "", "metadata": ""}
{"_id": "696b914a58e9746e21914a9e533a13cb", "text": "def maybe_infer_dtype_type ( element ) : tipo = None if hasattr ( element , 'dtype' ) : tipo = element . dtype elif is_list_like ( element ) : element = np . asarray ( element ) tipo = element . dtype return tipo\n", "title": "", "metadata": ""}
{"_id": "5be7ecda2f3c9558c22cde41ee7a6bc5", "text": "def _zeep_to_dict ( cls , obj ) : res = serialize_object ( obj ) res = cls . _get_non_empty_dict ( res ) return res\n", "title": "", "metadata": ""}
{"_id": "3aca91330a5f278a6a669564851053a1", "text": "def counter ( items ) : results = { } for item in items : results [ item ] = results . get ( item , 0 ) + 1 return results\n", "title": "", "metadata": ""}
{"_id": "ee7aa3e898ff91fd28385c163e2cec10", "text": "def _write_pidfile ( pidfile ) : pid = str ( os . getpid ( ) ) handle = open ( pidfile , 'w' ) try : handle . write ( \"%s\\n\" % pid ) finally : handle . close ( )\n", "title": "", "metadata": ""}
{"_id": "cbea8b5280f06835105c5f289163438a", "text": "def is_timestamp ( obj ) : return isinstance ( obj , datetime . datetime ) or is_string ( obj ) or is_int ( obj ) or is_float ( obj )\n", "title": "", "metadata": ""}
{"_id": "ed390d12c5dfd7ef586b7b5b24096c0f", "text": "def get_data ( self ) : try : return DocumentDataDict ( self . __dict__ [ 'data' ] ) except KeyError : self . _lazy_load ( ) return DocumentDataDict ( self . __dict__ [ 'data' ] )\n", "title": "", "metadata": ""}
{"_id": "b1cdf044dddc21aa77ce8bc73153c9ca", "text": "def run_task ( func ) : def _wrapped ( * a , * * k ) : loop = asyncio . get_event_loop ( ) return loop . run_until_complete ( func ( * a , * * k ) ) return _wrapped\n", "title": "", "metadata": ""}
{"_id": "3e0e964d5dc5201f363795ce5ee65794", "text": "def calculate_fft ( data , tbin ) : if len ( np . shape ( data ) ) > 1 : n = len ( data [ 0 ] ) return np . fft . fftfreq ( n , tbin * 1e-3 ) , np . fft . fft ( data , axis = 1 ) else : n = len ( data ) return np . fft . fftfreq ( n , tbin * 1e-3 ) , np . fft . fft ( data )\n", "title": "", "metadata": ""}
{"_id": "ce638711fe9c16f0629062f56c4516c3", "text": "def singleton_per_scope ( _cls , _scope = None , _renew = False , * args , * * kwargs ) : result = None singletons = SINGLETONS_PER_SCOPES . setdefault ( _scope , { } ) if _renew or _cls not in singletons : singletons [ _cls ] = _cls ( * args , * * kwargs ) result = singletons [ _cls ] return result\n", "title": "", "metadata": ""}
{"_id": "8d3a4f945623eea5a6e9569bd130340a", "text": "def _expand ( self , str , local_vars = { } ) : return ninja_syntax . expand ( str , self . vars , local_vars )\n", "title": "", "metadata": ""}
{"_id": "b7609299b629cf49990778bb5ad6d87f", "text": "def debug_on_error ( type , value , tb ) : traceback . print_exc ( type , value , tb ) print ( ) pdb . pm ( )\n", "title": "", "metadata": ""}
{"_id": "def21bbd913b76d94ee2f2e61a27e196", "text": "def rrmdir ( directory ) : for root , dirs , files in os . walk ( directory , topdown = False ) : for name in files : os . remove ( os . path . join ( root , name ) ) for name in dirs : os . rmdir ( os . path . join ( root , name ) ) os . rmdir ( directory )\n", "title": "", "metadata": ""}
{"_id": "bab18aaa2f548e5d4ebec9a2011ce2fb", "text": "def setPixel ( self , x , y , color ) : return _fitz . Pixmap_setPixel ( self , x , y , color )\n", "title": "", "metadata": ""}
{"_id": "ce8937105be97dca1f783c03476b96be", "text": "def check ( text ) : err = \"misc.currency\" msg = u\"Incorrect use of symbols in {}.\" symbols = [ \"\\$[\\d]* ?(?:dollars|usd|us dollars)\" ] return existence_check ( text , symbols , err , msg )\n", "title": "", "metadata": ""}
{"_id": "b01a88900e70ecdcb718754e21afdf10", "text": "def _split ( value ) : if isinstance ( value , str ) : # iterable, but not meant for splitting return value , value try : invalue , outvalue = value except TypeError : invalue = outvalue = value except ValueError : raise ValueError ( \"Only single values and pairs are allowed\" ) return invalue , outvalue\n", "title": "", "metadata": ""}
{"_id": "babbf817f67117882686be7e391ceee6", "text": "def bbox ( self ) : # (stop - 1) to return the max pixel location, not the slice index return ( self . _slice [ 0 ] . start , self . _slice [ 1 ] . start , self . _slice [ 0 ] . stop - 1 , self . _slice [ 1 ] . stop - 1 ) * u . pix\n", "title": "", "metadata": ""}
{"_id": "ae314395ad9a55706851ddd5acf4104b", "text": "def min ( self ) : res = self . _qexec ( \"min(%s)\" % self . _name ) if len ( res ) > 0 : self . _min = res [ 0 ] [ 0 ] return self . _min\n", "title": "", "metadata": ""}
{"_id": "2243f118df53152157ae9ffad2153915", "text": "def stub_main ( ) : from google . apputils import run_script_module import butcher . main run_script_module . RunScriptModule ( butcher . main )\n", "title": "", "metadata": ""}
{"_id": "f7096bb43a074d86ea7496129eb7ee84", "text": "def max ( self ) : return int ( self . _max ) if not np . isinf ( self . _max ) else self . _max\n", "title": "", "metadata": ""}
{"_id": "303fe52491321a6704cb63ee0566a952", "text": "def fail_print ( error ) : print ( COLORS . fail , error . message , COLORS . end ) print ( COLORS . fail , error . errors , COLORS . end )\n", "title": "", "metadata": ""}
{"_id": "0d699d1037d800540e1c8fb56be6a262", "text": "def parse_path ( path ) : version , project = path [ 1 : ] . split ( '/' ) return dict ( version = int ( version ) , project = project )\n", "title": "", "metadata": ""}
{"_id": "20105d9db698efbcc95f3ff6a3fbea39", "text": "def imagemagick ( color_count , img , magick_command ) : flags = [ \"-resize\" , \"25%\" , \"-colors\" , str ( color_count ) , \"-unique-colors\" , \"txt:-\" ] img += \"[0]\" return subprocess . check_output ( [ * magick_command , img , * flags ] ) . splitlines ( )\n", "title": "", "metadata": ""}
{"_id": "2efe4bb292da819d284473eac4e25d59", "text": "def lognorm ( x , mu , sigma = 1.0 ) : return stats . lognorm ( sigma , scale = mu ) . pdf ( x )\n", "title": "", "metadata": ""}
{"_id": "35cef6f7ada06a269f217cac76ffd460", "text": "def test ( ) : debuglevel = 0 while sys . argv [ 1 : ] and sys . argv [ 1 ] == '-d' : debuglevel = debuglevel + 1 del sys . argv [ 1 ] host = 'localhost' if sys . argv [ 1 : ] : host = sys . argv [ 1 ] port = 0 if sys . argv [ 2 : ] : portstr = sys . argv [ 2 ] try : port = int ( portstr ) except ValueError : port = socket . getservbyname ( portstr , 'tcp' ) tn = Telnet ( ) tn . set_debuglevel ( debuglevel ) tn . open ( host , port ) tn . interact ( ) tn . close ( )\n", "title": "", "metadata": ""}
{"_id": "3957eabcd4b5573a4a64f0f6f1464124", "text": "def getElementsBy ( self , cond : Callable [ [ Element ] , bool ] ) -> NodeList : return getElementsBy ( self , cond )\n", "title": "", "metadata": ""}
{"_id": "0851175044cf813caccb0ce8fb8eac1c", "text": "def _is_already_configured ( configuration_details ) : path = Path ( configuration_details . path ) . expanduser ( ) with path . open ( 'r' ) as shell_config : return configuration_details . content in shell_config . read ( )\n", "title": "", "metadata": ""}
{"_id": "8dc4c83262e3f29cdf6f752b04c23bb5", "text": "def is_valid_variable_name ( string_to_check ) : try : parse ( '{} = None' . format ( string_to_check ) ) return True except ( SyntaxError , ValueError , TypeError ) : return False\n", "title": "", "metadata": ""}
{"_id": "16b24c76942f3b0923d127ab4e0de504", "text": "def filechunk ( f , chunksize ) : while True : chunk = tuple ( itertools . islice ( f , chunksize ) ) if not chunk : return yield np . loadtxt ( iter ( chunk ) , dtype = np . float64 )\n", "title": "", "metadata": ""}
{"_id": "09ea2957f32f573c9494291490461d72", "text": "def is_float ( value ) : return isinstance ( value , float ) or isinstance ( value , int ) or isinstance ( value , np . float64 ) , float ( value )\n", "title": "", "metadata": ""}
{"_id": "a797a34b68cb2dbf19a3d12e2573c31c", "text": "def put_pidfile ( pidfile_path , pid ) : with open ( pidfile_path , \"w\" ) as f : f . write ( \"%s\" % pid ) os . fsync ( f . fileno ( ) ) return\n", "title": "", "metadata": ""}
{"_id": "acb6e2d393f09c2970ffbc685a2dad8c", "text": "def _render_table ( data , fields = None ) : return IPython . core . display . HTML ( datalab . utils . commands . HtmlBuilder . render_table ( data , fields ) )\n", "title": "", "metadata": ""}
{"_id": "a6775ed514e88aaaa09d924e37d21860", "text": "def check_auth ( email , password ) : try : user = User . get ( User . email == email ) except User . DoesNotExist : return False return password == user . password\n", "title": "", "metadata": ""}
{"_id": "fe59fea6f0b4c0a6a62bbd8f9b723fb5", "text": "def _get_bokeh_html ( self , chart_obj ) : global bokeh_renderer try : renderer = bokeh_renderer p = renderer . get_plot ( chart_obj ) . state script , div = components ( p ) return script + \"\\n\" + div except Exception as e : self . err ( e , self . _get_bokeh_html , \"Can not get html from the Bokeh rendering engine\" )\n", "title": "", "metadata": ""}
{"_id": "88949b5547b3fc565d7c69f6db51ef8d", "text": "def is_a_sequence ( var , allow_none = False ) : return isinstance ( var , ( list , tuple ) ) or ( var is None and allow_none )\n", "title": "", "metadata": ""}
{"_id": "6ecf52564f2685f36a9ef8a7431cbd9a", "text": "def _transform_col ( self , x , i ) : return x . fillna ( NAN_INT ) . map ( self . label_encoders [ i ] ) . fillna ( 0 )\n", "title": "", "metadata": ""}
{"_id": "d9d34d2a68c579853479d29d03eb958c", "text": "def from_timestamp ( microsecond_timestamp ) : # Create datetime without losing precision from floating point (yes, this # is actually needed): return datetime . datetime . fromtimestamp ( microsecond_timestamp // 1000000 , datetime . timezone . utc ) . replace ( microsecond = ( microsecond_timestamp % 1000000 ) )\n", "title": "", "metadata": ""}
{"_id": "8f382132e8d369a660426bff6c5813f9", "text": "def stackplot ( marray , seconds = None , start_time = None , ylabels = None ) : tarray = np . transpose ( marray ) stackplot_t ( tarray , seconds = seconds , start_time = start_time , ylabels = ylabels ) plt . show ( )\n", "title": "", "metadata": ""}
{"_id": "94dff63f0e1c0b0ec5f7b033a9449b8d", "text": "def timed_rotating_file_handler ( name , logname , filename , when = 'h' , interval = 1 , backupCount = 0 , encoding = None , delay = False , utc = False ) : return wrap_log_handler ( logging . handlers . TimedRotatingFileHandler ( filename , when = when , interval = interval , backupCount = backupCount , encoding = encoding , delay = delay , utc = utc ) )\n", "title": "", "metadata": ""}
{"_id": "4773b3e4c7c535467dca3d0265d277b3", "text": "def dict_to_querystring ( dictionary ) : s = u\"\" for d in dictionary . keys ( ) : s = unicode . format ( u\"{0}{1}={2}&\" , s , d , dictionary [ d ] ) return s [ : - 1 ]\n", "title": "", "metadata": ""}
{"_id": "0e6e8eeb9a3b92700ef405bb49e863fa", "text": "def get_rounded ( self , digits ) : result = self . copy ( ) result . round ( digits ) return result\n", "title": "", "metadata": ""}
{"_id": "3d5311ad22fe4652a7ed7444178b3305", "text": "def EvalBinomialPmf ( k , n , p ) : return scipy . stats . binom . pmf ( k , n , p )\n", "title": "", "metadata": ""}
{"_id": "a0f30432a16b012a3954bcf62b25fd87", "text": "def nTimes ( n , f , * args , * * kwargs ) : for i in xrange ( n ) : f ( * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "5c3b389d15b7fdcb41ffc30145b6b3da", "text": "def is_readable ( fp , size = 1 ) : read_size = len ( fp . read ( size ) ) fp . seek ( - read_size , 1 ) return read_size == size\n", "title": "", "metadata": ""}
{"_id": "9553d710811f9c711fef2e6905c56cb4", "text": "def join_images ( img_files , out_file ) : images = [ PIL . Image . open ( f ) for f in img_files ] joined = PIL . Image . new ( 'RGB' , ( sum ( i . size [ 0 ] for i in images ) , max ( i . size [ 1 ] for i in images ) ) ) left = 0 for img in images : joined . paste ( im = img , box = ( left , 0 ) ) left = left + img . size [ 0 ] joined . save ( out_file )\n", "title": "", "metadata": ""}
{"_id": "2fbf02045837f0caec0e6258a75af2a8", "text": "def constant ( times : np . ndarray , amp : complex ) -> np . ndarray : return np . full ( len ( times ) , amp , dtype = np . complex_ )\n", "title": "", "metadata": ""}
{"_id": "f5aec0506a8be3a8b6827d9cd6033222", "text": "def get_selection_owner ( self , selection ) : r = request . GetSelectionOwner ( display = self . display , selection = selection ) return r . owner\n", "title": "", "metadata": ""}
{"_id": "cd7497b02672cd9c0b64fe9d950e7a5b", "text": "def safe_url ( url ) : parsed = urlparse ( url ) if parsed . password is not None : pwd = ':%s@' % parsed . password url = url . replace ( pwd , ':*****@' ) return url\n", "title": "", "metadata": ""}
{"_id": "9693a780a6a176c80f9618865c3bb1ad", "text": "def find_last_sublist ( list_ , sublist ) : for i in reversed ( range ( len ( list_ ) - len ( sublist ) + 1 ) ) : if list_ [ i ] == sublist [ 0 ] and list_ [ i : i + len ( sublist ) ] == sublist : return i return None\n", "title": "", "metadata": ""}
{"_id": "2bfeb922ba3c7d47a782791acac435c3", "text": "def focusInEvent ( self , event ) : self . focus_changed . emit ( ) return super ( ShellWidget , self ) . focusInEvent ( event )\n", "title": "", "metadata": ""}
{"_id": "f4347def83fd515fc8542cd01d503e66", "text": "def get_latex_table ( self , parameters = None , transpose = False , caption = None , label = \"tab:model_params\" , hlines = True , blank_fill = \"--\" ) : # pragma: no cover if parameters is None : parameters = self . parent . _all_parameters for p in parameters : assert isinstance ( p , str ) , \"Generating a LaTeX table requires all parameters have labels\" num_parameters = len ( parameters ) num_chains = len ( self . parent . chains ) fit_values = self . get_summary ( squeeze = False ) if label is None : label = \"\" if caption is None : caption = \"\" end_text = \" \\\\\\\\ \\n\" if transpose : column_text = \"c\" * ( num_chains + 1 ) else : column_text = \"c\" * ( num_parameters + 1 ) center_text = \"\" hline_text = \"\\\\hline\\n\" if hlines : center_text += hline_text + \"\\t\\t\" if transpose : center_text += \" & \" . join ( [ \"Parameter\" ] + [ c . name for c in self . parent . chains ] ) + end_text if hlines : center_text += \"\\t\\t\" + hline_text for p in parameters : arr = [ \"\\t\\t\" + p ] for chain_res in fit_values : if p in chain_res : arr . append ( self . get_parameter_text ( * chain_res [ p ] , wrap = True ) ) else : arr . append ( blank_fill ) center_text += \" & \" . join ( arr ) + end_text else : center_text += \" & \" . join ( [ \"Model\" ] + parameters ) + end_text if hlines : center_text += \"\\t\\t\" + hline_text for name , chain_res in zip ( [ c . name for c in self . parent . chains ] , fit_values ) : arr = [ \"\\t\\t\" + name ] for p in parameters : if p in chain_res : arr . append ( self . get_parameter_text ( * chain_res [ p ] , wrap = True ) ) else : arr . append ( blank_fill ) center_text += \" & \" . join ( arr ) + end_text if hlines : center_text += \"\\t\\t\" + hline_text final_text = get_latex_table_frame ( caption , label ) % ( column_text , center_text ) return final_text\n", "title": "", "metadata": ""}
{"_id": "0b03d5423f5470c1d6a5ec07d1678d4f", "text": "def _random_x ( self ) : return ( tuple ( random . random ( ) for _ in range ( self . fmodel . dim_x ) ) , )\n", "title": "", "metadata": ""}
{"_id": "6058dcd535c708cfdd54baee6e8ac918", "text": "def str_from_file ( path ) : with open ( path ) as f : s = f . read ( ) . strip ( ) return s\n", "title": "", "metadata": ""}
{"_id": "dc282ea5f215a7dd7d1e3d2f62c92efb", "text": "def normalize_path ( path ) : return os . path . normcase ( os . path . realpath ( os . path . expanduser ( path ) ) )\n", "title": "", "metadata": ""}
{"_id": "d281a3893f1659ad88441d53d34c5ca7", "text": "def fix_call ( callable , * args , * * kw ) : try : val = callable ( * args , * * kw ) except TypeError : exc_info = fix_type_error ( None , callable , args , kw ) reraise ( * exc_info ) return val\n", "title": "", "metadata": ""}
{"_id": "c070811ea334bd03e5e751401a4ad7dd", "text": "def build_code ( self , lang , body ) : self . out . append ( \"```\" + lang ) self . build_markdown ( lang , body ) self . out . append ( \"```\" )\n", "title": "", "metadata": ""}
{"_id": "96da4cbf601ef7345047e5d98c8a76f1", "text": "def roll_dice ( ) : sums = 0 # will return the sum of the roll calls. while True : roll = random . randint ( 1 , 6 ) sums += roll if ( input ( \"Enter y or n to continue: \" ) . upper ( ) ) == 'N' : print ( sums ) # prints the sum of the roll calls break\n", "title": "", "metadata": ""}
{"_id": "107cf7e7417bc6ef80e6f71c10822b58", "text": "def has_add_permission ( self , request ) : return request . user . is_authenticated and request . user . is_active and request . user . is_staff\n", "title": "", "metadata": ""}
{"_id": "dec8a854f65c42f5b2444e6fdc8853d4", "text": "def inject_nulls ( data : Mapping , field_names ) -> dict : record = dict ( ) for field in field_names : record [ field ] = data . get ( field , None ) return record\n", "title": "", "metadata": ""}
{"_id": "29517e1ce9c58d8e6a73f27163de9262", "text": "def info ( self , text ) : self . logger . info ( \"{}{}\" . format ( self . message_prefix , text ) )\n", "title": "", "metadata": ""}
{"_id": "4f5e33c2083e812c1c2c04cf06b73c9b", "text": "def get_inputs_from_cm ( index , cm ) : return tuple ( i for i in range ( cm . shape [ 0 ] ) if cm [ i ] [ index ] )\n", "title": "", "metadata": ""}
{"_id": "659a486621f021534924fe82da1a857c", "text": "def remove_rows_matching ( df , column , match ) : df = df . copy ( ) mask = df [ column ] . values != match return df . iloc [ mask , : ]\n", "title": "", "metadata": ""}
{"_id": "8a78b45f38f39101fcc1b108fad9829e", "text": "def _heapify_max ( x ) : n = len ( x ) for i in reversed ( range ( n // 2 ) ) : _siftup_max ( x , i )\n", "title": "", "metadata": ""}
{"_id": "6322ef74521f245ade68e310c0367890", "text": "def impute_data ( self , x ) : imp = Imputer ( missing_values = 'NaN' , strategy = 'mean' , axis = 0 ) return imp . fit_transform ( x )\n", "title": "", "metadata": ""}
{"_id": "d1af87759fa9b92aeb89e82b954d4607", "text": "def isCommaList ( inputFilelist ) : if isinstance ( inputFilelist , int ) or isinstance ( inputFilelist , np . int32 ) : ilist = str ( inputFilelist ) else : ilist = inputFilelist if \",\" in ilist : return True return False\n", "title": "", "metadata": ""}
{"_id": "5782138636cb0bf14428084dc96d789d", "text": "def remove_ext ( fname ) : bn = os . path . basename ( fname ) return os . path . splitext ( bn ) [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "278a6fd091426b840ef541a7c042137c", "text": "def put ( self , entity ) : actual_entity = _normalize_entity ( entity ) if actual_entity is None : return self . ndb_put ( entity ) self . puts . append ( actual_entity )\n", "title": "", "metadata": ""}
{"_id": "77f0c4601515de33faf05d1d8783dc30", "text": "def make_coord_dict ( coord ) : return dict ( z = int_if_exact ( coord . zoom ) , x = int_if_exact ( coord . column ) , y = int_if_exact ( coord . row ) , )\n", "title": "", "metadata": ""}
{"_id": "e93311076b4a9ec06118d594a0567573", "text": "def _swap_rows ( self , i , j ) : L = np . eye ( 3 , dtype = 'intc' ) L [ i , i ] = 0 L [ j , j ] = 0 L [ i , j ] = 1 L [ j , i ] = 1 self . _L . append ( L . copy ( ) ) self . _A = np . dot ( L , self . _A )\n", "title": "", "metadata": ""}
{"_id": "8ab1a05eaf197880b1e7a7a7ff25aa82", "text": "def inheritdoc ( method ) : method . __doc__ = getattr ( str , method . __name__ ) . __doc__ return method\n", "title": "", "metadata": ""}
{"_id": "6c86669d8895e6ab88e02873354b5ae6", "text": "def dmap ( fn , record ) : values = ( fn ( v ) for k , v in record . items ( ) ) return dict ( itertools . izip ( record , values ) )\n", "title": "", "metadata": ""}
{"_id": "b18c6b91beadac7c7bdc75156747578d", "text": "def put ( self , endpoint : str , * * kwargs ) -> dict : return self . _request ( 'PUT' , endpoint , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "a127a0b524b8cf4a966c3a5d39891834", "text": "def __init__ ( self , function ) : super ( takewhile , self ) . __init__ ( ) self . function = function\n", "title": "", "metadata": ""}
{"_id": "983c3c4ac22844b3b8c2650e3f1baa45", "text": "def is_rfc2822 ( instance : str ) : if not isinstance ( instance , str ) : return True return email . utils . parsedate ( instance ) is not None\n", "title": "", "metadata": ""}
{"_id": "360fc22758814a7c6b910201b8c27552", "text": "def __dir__ ( self ) : return sorted ( self . keys ( ) | { m for m in dir ( self . __class__ ) if m . startswith ( 'to_' ) } )\n", "title": "", "metadata": ""}
{"_id": "a747d5419a3317e37db3fc22ddaa2fa0", "text": "def non_zero_row ( arr ) : if len ( arr ) == 0 : return False for item in arr : if item == 0 : return False return True\n", "title": "", "metadata": ""}
{"_id": "9fd4d5eb41a4d4a07b81a7611ae634d1", "text": "async def delete ( self ) : the_tuple = await self . queue . delete ( self . tube , self . task_id ) self . update_from_tuple ( the_tuple ) return bool ( self . state == DONE )\n", "title": "", "metadata": ""}
{"_id": "40314d4b787d61ce8de5952f99c2e3bb", "text": "def median_date ( dt_list ) : #dt_list_sort = sorted(dt_list) idx = len ( dt_list ) / 2 if len ( dt_list ) % 2 == 0 : md = mean_date ( [ dt_list [ idx - 1 ] , dt_list [ idx ] ] ) else : md = dt_list [ idx ] return md\n", "title": "", "metadata": ""}
{"_id": "c117d3108c2b166e8f084a18abf2b6ab", "text": "def set ( cls , color ) : sys . stdout . write ( cls . colors . get ( color , cls . colors [ 'RESET' ] ) )\n", "title": "", "metadata": ""}
{"_id": "a12f4b6ada6237d66f7fa7a32aab4255", "text": "def gen_api_key ( username ) : salt = str ( os . urandom ( 64 ) ) . encode ( 'utf-8' ) return hash_password ( username , salt )\n", "title": "", "metadata": ""}
{"_id": "6ca343e1d7e46de2a292783680467deb", "text": "def _stop_instance ( self ) : instance = self . _get_instance ( ) instance . stop ( ) self . _wait_on_instance ( 'stopped' , self . timeout )\n", "title": "", "metadata": ""}
{"_id": "006163658996cf4ee66043128278a858", "text": "def to_linspace ( self ) : num = int ( ( self . stop - self . start ) / ( self . step ) ) return Linspace ( self . start , self . stop - self . step , num )\n", "title": "", "metadata": ""}
{"_id": "38da2dc7af3451a0874f75e096138d6e", "text": "def createArgumentParser ( description ) : parser = argparse . ArgumentParser ( description = description , formatter_class = SortedHelpFormatter ) return parser\n", "title": "", "metadata": ""}
{"_id": "43455fbc0db520a3eca1bc1199bafdc8", "text": "def isetdiff_flags ( list1 , list2 ) : set2 = set ( list2 ) return ( item not in set2 for item in list1 )\n", "title": "", "metadata": ""}
{"_id": "c4981495ce1294c9ad06e91a424af615", "text": "def _column_resized ( self , col , old_width , new_width ) : self . dataTable . setColumnWidth ( col , new_width ) self . _update_layout ( )\n", "title": "", "metadata": ""}
{"_id": "e47fd9f2b1430736cce8fff36eb14df7", "text": "def is_end_of_month ( self ) -> bool : end_of_month = Datum ( ) # get_end_of_month(value) end_of_month . end_of_month ( ) return self . value == end_of_month . value\n", "title": "", "metadata": ""}
{"_id": "7e332d3d832453c373fd999b4b29f406", "text": "def rpc_fix_code_with_black ( self , source , directory ) : source = get_source ( source ) return fix_code_with_black ( source , directory )\n", "title": "", "metadata": ""}
{"_id": "2263e9151370b84d359b677b21366bc8", "text": "def _mid ( string , start , end = None ) : if end is None : end = len ( string ) return string [ start : start + end ]\n", "title": "", "metadata": ""}
{"_id": "fd70c975f77b49d3b1a9885dcbb7270b", "text": "def text_remove_empty_lines ( text ) : lines = [ line . rstrip ( ) for line in text . splitlines ( ) if line . strip ( ) ] return \"\\n\" . join ( lines )\n", "title": "", "metadata": ""}
{"_id": "d9e97c24c7b9d16cccf0c1025f695b44", "text": "def remove_empty_text ( utterances : List [ Utterance ] ) -> List [ Utterance ] : return [ utter for utter in utterances if utter . text . strip ( ) != \"\" ]\n", "title": "", "metadata": ""}
{"_id": "e8bd687272e3b230aa407e70bd05a1d4", "text": "def accuracy ( conf_matrix ) : total , correct = 0.0 , 0.0 for true_response , guess_dict in conf_matrix . items ( ) : for guess , count in guess_dict . items ( ) : if true_response == guess : correct += count total += count return correct / total\n", "title": "", "metadata": ""}
{"_id": "1e3537ce0afbc090a8fdf17f705a3c70", "text": "def step_table_made ( self ) : try : empty = self . step_table . empty except AttributeError : empty = True return not empty\n", "title": "", "metadata": ""}
{"_id": "10e836ff4160c3b5a3d9886efb895bbe", "text": "def _uptime_syllable ( ) : global __boottime try : __boottime = os . stat ( '/dev/pty/mst/pty0' ) . st_mtime return time . time ( ) - __boottime except ( NameError , OSError ) : return None\n", "title": "", "metadata": ""}
{"_id": "c6e4847b6660f9677e23835e28abfa31", "text": "def find_one ( cls , * args , * * kw ) : if len ( args ) == 1 and not isinstance ( args [ 0 ] , Filter ) : args = ( getattr ( cls , cls . __pk__ ) == args [ 0 ] , ) Doc , collection , query , options = cls . _prepare_find ( * args , * * kw ) result = Doc . from_mongo ( collection . find_one ( query , * * options ) ) return result\n", "title": "", "metadata": ""}
{"_id": "d969126a8571f1ee6d7bd8cfcd251a67", "text": "def _module_name_from_previous_frame ( num_frames_back ) : frm = inspect . stack ( ) [ num_frames_back + 1 ] return inspect . getmodule ( frm [ 0 ] ) . __name__\n", "title": "", "metadata": ""}
{"_id": "22ae418ebdda1df73af59e3b155c0614", "text": "def prin ( * args , * * kwargs ) : print >> kwargs . get ( 'out' , None ) , \" \" . join ( [ str ( arg ) for arg in args ] )\n", "title": "", "metadata": ""}
{"_id": "e88b32e366573d360532faa99c79c639", "text": "def _dotify ( cls , data ) : return '' . join ( char if char in cls . PRINTABLE_DATA else '.' for char in data )\n", "title": "", "metadata": ""}
{"_id": "84c1d047a4a2f6e702002ce241c44487", "text": "def makeBiDirectional ( d ) : dTmp = d . copy ( ) for k in d : dTmp [ d [ k ] ] = k return dTmp\n", "title": "", "metadata": ""}
{"_id": "886d75bf10d947ae65745f8dc075a68c", "text": "def convert_str_to_datetime ( df , * , column : str , format : str ) : df [ column ] = pd . to_datetime ( df [ column ] , format = format ) return df\n", "title": "", "metadata": ""}
{"_id": "625e36d74521633dd0af13a47aae8196", "text": "def mcc ( y , z ) : tp , tn , fp , fn = contingency_table ( y , z ) return ( tp * tn - fp * fn ) / K . sqrt ( ( tp + fp ) * ( tp + fn ) * ( tn + fp ) * ( tn + fn ) )\n", "title": "", "metadata": ""}
{"_id": "79f9d536c17fe77d4ab0c1f70e4fbde8", "text": "def parse_form ( self , req , name , field ) : return get_value ( req . body_arguments , name , field )\n", "title": "", "metadata": ""}
{"_id": "1be4d0a106bdf52fc1343b83d801973b", "text": "def ReverseV2 ( a , axes ) : idxs = tuple ( slice ( None , None , 2 * int ( i not in axes ) - 1 ) for i in range ( len ( a . shape ) ) ) return np . copy ( a [ idxs ] ) ,\n", "title": "", "metadata": ""}
{"_id": "b61f3ddd084f97c8f0c45d8d9a5e53fd", "text": "def rollback ( self ) : try : if self . connection is not None : self . connection . rollback ( ) self . _updateCheckTime ( ) self . release ( ) except Exception , e : pass\n", "title": "", "metadata": ""}
{"_id": "814ce23b7219c57946b33019f7253f92", "text": "def update ( self , params ) : dev_info = self . json_state . get ( 'deviceInfo' ) dev_info . update ( { k : params [ k ] for k in params if dev_info . get ( k ) } )\n", "title": "", "metadata": ""}
{"_id": "492fa787577a6c82dc732af458febdfd", "text": "def py ( self , output ) : import pprint pprint . pprint ( output , stream = self . outfile )\n", "title": "", "metadata": ""}
{"_id": "82b615003a85ed18eb305e1361f87aff", "text": "def prepend_line ( filepath , line ) : with open ( filepath ) as f : lines = f . readlines ( ) lines . insert ( 0 , line ) with open ( filepath , 'w' ) as f : f . writelines ( lines )\n", "title": "", "metadata": ""}
{"_id": "384df6c3ac4ecff2c0755f02f84693ff", "text": "def replaceNewlines ( string , newlineChar ) : if newlineChar in string : segments = string . split ( newlineChar ) string = \"\" for segment in segments : string += segment return string\n", "title": "", "metadata": ""}
{"_id": "9ebb066aa3200f90a440b829894eb639", "text": "def local_accuracy ( X_train , y_train , X_test , y_test , attr_test , model_generator , metric , trained_model ) : X_train , X_test = to_array ( X_train , X_test ) # how many features to mask assert X_train . shape [ 1 ] == X_test . shape [ 1 ] # keep nkeep top features and re-train the model for each test explanation yp_test = trained_model . predict ( X_test ) return metric ( yp_test , strip_list ( attr_test ) . sum ( 1 ) )\n", "title": "", "metadata": ""}
{"_id": "f32f4ccd6cae97b5daec992c6934232f", "text": "def load_fasta_file ( filename ) : with open ( filename , \"r\" ) as handle : records = list ( SeqIO . parse ( handle , \"fasta\" ) ) return records\n", "title": "", "metadata": ""}
{"_id": "d5abc1b13d15a72b16755cd1e4c07f8a", "text": "def _sort_tensor ( tensor ) : sorted_ , _ = tf . nn . top_k ( tensor , k = tf . shape ( input = tensor ) [ - 1 ] ) sorted_ . set_shape ( tensor . shape ) return sorted_\n", "title": "", "metadata": ""}
{"_id": "a214c5b128ea70e1be952a82255ffcde", "text": "def _replace_token_range ( tokens , start , end , replacement ) : tokens = tokens [ : start ] + replacement + tokens [ end : ] return tokens\n", "title": "", "metadata": ""}
{"_id": "b8c7dee03895f84ed2cf5e948d0ba4c0", "text": "def position ( self , x , y , text ) : sys . stdout . write ( \"\\x1b7\\x1b[%d;%df%s\\x1b8\" % ( x , y , text ) ) sys . stdout . flush ( )\n", "title": "", "metadata": ""}
{"_id": "6edd827ccf673cda4d10e89f76d91e2b", "text": "def dictfetchall ( cursor : Cursor ) -> List [ Dict [ str , Any ] ] : columns = get_fieldnames_from_cursor ( cursor ) return [ OrderedDict ( zip ( columns , row ) ) for row in cursor . fetchall ( ) ]\n", "title": "", "metadata": ""}
{"_id": "b20237ce8131a88a3743edb51cee999e", "text": "def check_valid ( number , input_base = 10 ) : for n in number : if n in ( \".\" , \"[\" , \"]\" ) : continue elif n >= input_base : if n == 1 and input_base == 1 : continue else : return False return True\n", "title": "", "metadata": ""}
{"_id": "b8ea4ce9b0cc6f7e2e80dae69625ac42", "text": "def normalize ( X ) : X = coo_matrix ( X ) X . data = X . data / sqrt ( bincount ( X . row , X . data ** 2 ) ) [ X . row ] return X\n", "title": "", "metadata": ""}
{"_id": "054e9599a099023d1995b3a071b620b6", "text": "def sent2features ( sentence , template ) : return [ word2features ( sentence , i , template ) for i in range ( len ( sentence ) ) ]\n", "title": "", "metadata": ""}
{"_id": "f5e21f0e85c3d5d4e50629bd9b9f27cb", "text": "def commit ( self , session = None ) : if self . __cleared : return if self . _parent : # nested transaction self . _commit_parent ( ) else : self . _commit_repository ( ) self . _clear ( )\n", "title": "", "metadata": ""}
{"_id": "92570cdece75b95bd9d3aa1033529f54", "text": "def rank ( idx , dim ) : idxm = multi_index ( idx , dim ) out = 0 while idxm [ - 1 : ] == ( 0 , ) : out += 1 idxm = idxm [ : - 1 ] return out\n", "title": "", "metadata": ""}
{"_id": "c3d018f369308e73f9c54e7c7686730d", "text": "def IsBinary ( self , filename ) : mimetype = mimetypes . guess_type ( filename ) [ 0 ] if not mimetype : return False # e.g. README, \"real\" binaries usually have an extension # special case for text files which don't start with text/ if mimetype in TEXT_MIMETYPES : return False return not mimetype . startswith ( \"text/\" )\n", "title": "", "metadata": ""}
{"_id": "4fd90d7501a6e7fdbe1bf46b7b0dc665", "text": "def predict ( self , X ) : Xt , _ , _ = self . _transform ( X ) return self . _final_estimator . predict ( Xt )\n", "title": "", "metadata": ""}
{"_id": "508100ca8145a7800f82b76cc644a44f", "text": "def trim_trailing_silence ( self ) : length = self . get_active_length ( ) self . pianoroll = self . pianoroll [ : length ]\n", "title": "", "metadata": ""}
{"_id": "c61d196ec86c61d849a9b9ec75e3d28f", "text": "def reraise ( error ) : if hasattr ( error , \"_type_\" ) : six . reraise ( type ( error ) , error , error . _traceback ) raise error\n", "title": "", "metadata": ""}
{"_id": "fb345709aebe01092bba263cb060b67d", "text": "def is_adb_detectable ( self ) : serials = list_adb_devices ( ) if self . serial in serials : self . log . debug ( 'Is now adb detectable.' ) return True return False\n", "title": "", "metadata": ""}
{"_id": "2b6cb0991eabdc1de910b6892f3f564c", "text": "def _factor_generator ( n ) : p = prime_factors ( n ) factors = { } for p1 in p : try : factors [ p1 ] += 1 except KeyError : factors [ p1 ] = 1 return factors\n", "title": "", "metadata": ""}
{"_id": "e92d9ac7049fd8158b13de8d1728d595", "text": "def _parse_string_to_list_of_pairs ( s , seconds_to_int = False ) : ret = [ ] for p in [ s . split ( \":\" ) for s in re . sub ( \"[,.;]\" , \" \" , s ) . split ( ) ] : if len ( p ) != 2 : raise ValueError ( \"bad input to _parse_string_to_list_of_pairs %s\" % s ) if seconds_to_int : ret . append ( ( p [ 0 ] , int ( p [ 1 ] ) ) ) else : ret . append ( tuple ( p ) ) return ret\n", "title": "", "metadata": ""}
{"_id": "07ee8ad53a5b32361c8ef5a69e719291", "text": "def main ( ) : time . sleep ( 1 ) with Input ( ) as input_generator : for e in input_generator : print ( repr ( e ) )\n", "title": "", "metadata": ""}
{"_id": "65359793621ad85abe523911b2275233", "text": "def find_ge ( a , x ) : i = bs . bisect_left ( a , x ) if i != len ( a ) : return i raise ValueError\n", "title": "", "metadata": ""}
{"_id": "8f332eac90564733afa41b860bb00a5d", "text": "def format_op_hdr ( ) : txt = 'Base Filename' . ljust ( 36 ) + ' ' txt += 'Lines' . rjust ( 7 ) + ' ' txt += 'Words' . rjust ( 7 ) + '  ' txt += 'Unique' . ljust ( 8 ) + '' return txt\n", "title": "", "metadata": ""}
{"_id": "3b62966801b0329f82e0d62115de3f34", "text": "def pickle_save ( thing , fname ) : pickle . dump ( thing , open ( fname , \"wb\" ) , pickle . HIGHEST_PROTOCOL ) return thing\n", "title": "", "metadata": ""}
{"_id": "a19d5e6023d56767e97e5fcdc2617c54", "text": "def mean_cl_boot ( series , n_samples = 1000 , confidence_interval = 0.95 , random_state = None ) : return bootstrap_statistics ( series , np . mean , n_samples = n_samples , confidence_interval = confidence_interval , random_state = random_state )\n", "title": "", "metadata": ""}
{"_id": "3ef463b0771b0db4e368634478840369", "text": "def mkdir ( dir , enter ) : if not os . path . exists ( dir ) : os . makedirs ( dir )\n", "title": "", "metadata": ""}
{"_id": "8790d62cdf0522c19b3d663ab69f37f1", "text": "def decode_bytes ( string ) : if is_string_type ( type ( string ) ) : string = bytes ( string , \"utf-8\" ) return base64 . decodebytes ( string )\n", "title": "", "metadata": ""}
{"_id": "0226c213e357ef6433044bacd4894de8", "text": "def split_comma_argument ( comma_sep_str ) : terms = [ ] for term in comma_sep_str . split ( ',' ) : if term : terms . append ( term ) return terms\n", "title": "", "metadata": ""}
{"_id": "2de658689f13e3138377d10716004a8c", "text": "def _histplot_op ( ax , data , * * kwargs ) : bins = get_bins ( data ) ax . hist ( data , bins = bins , align = \"left\" , density = True , * * kwargs ) return ax\n", "title": "", "metadata": ""}
{"_id": "b57c83c890fd7b7fe053c4d43fda6996", "text": "def step_impl06 ( context ) : store = context . SingleStore context . st_1 = store ( ) context . st_2 = store ( ) context . st_3 = store ( )\n", "title": "", "metadata": ""}
{"_id": "9c9778de5bc85d4e28adc51fc74e20ea", "text": "def resetScale ( self ) : self . img . scale ( 1. / self . imgScale [ 0 ] , 1. / self . imgScale [ 1 ] ) self . imgScale = ( 1. , 1. )\n", "title": "", "metadata": ""}
{"_id": "a1c4a137fd380975ca46bbda08c791bc", "text": "def matches ( self , s ) : regex_matches = self . compiled_regex . search ( s ) is not None return not regex_matches if self . inverted else regex_matches\n", "title": "", "metadata": ""}
{"_id": "f04ec36d580d655f8898e6b97734a68f", "text": "def guess_title ( basename ) : base , _ = os . path . splitext ( basename ) return re . sub ( r'[ _-]+' , r' ' , base ) . title ( )\n", "title": "", "metadata": ""}
{"_id": "d67a23cdab348a13d3b07faf22a3d4ee", "text": "def parse_timestamp ( timestamp ) : dt = dateutil . parser . parse ( timestamp ) return dt . astimezone ( dateutil . tz . tzutc ( ) )\n", "title": "", "metadata": ""}
{"_id": "ee057749477029b1acb9dffecc1c1e0a", "text": "def value_left ( self , other ) : return other . value if isinstance ( other , self . __class__ ) else other\n", "title": "", "metadata": ""}
{"_id": "338a0c22ff79b59e82998f1fb7550136", "text": "def _request ( self , method : str , endpoint : str , params : dict = None , data : dict = None , headers : dict = None ) -> dict :\n", "title": "", "metadata": ""}
{"_id": "e5a5fb0c611bd49b4a5b5ef7c1415b2f", "text": "def debugTreePrint ( node , pfx = \"->\" ) : print pfx , node . item for c in node . children : debugTreePrint ( c , \"  \" + pfx )\n", "title": "", "metadata": ""}
{"_id": "985334625368b99833290fdb85d64e94", "text": "def inpaint ( self ) : import inpaint filled = inpaint . replace_nans ( np . ma . filled ( self . raster_data , np . NAN ) . astype ( np . float32 ) , 3 , 0.01 , 2 ) self . raster_data = np . ma . masked_invalid ( filled )\n", "title": "", "metadata": ""}
{"_id": "70119bdfc5bfee0fa3ede4ab4d90ad7f", "text": "def ms_to_datetime ( ms ) : dt = datetime . datetime . utcfromtimestamp ( ms / 1000 ) return dt . replace ( microsecond = ( ms % 1000 ) * 1000 ) . replace ( tzinfo = pytz . utc )\n", "title": "", "metadata": ""}
{"_id": "3a749baf751537528722b65a054890aa", "text": "def multi_pop ( d , * args ) : retval = { } for key in args : if key in d : retval [ key ] = d . pop ( key ) return retval\n", "title": "", "metadata": ""}
{"_id": "e3bef8dd2c83d593cc138ace6932a6cc", "text": "def convert_2_utc ( self , datetime_ , timezone ) : datetime_ = self . tz_mapper [ timezone ] . localize ( datetime_ ) return datetime_ . astimezone ( pytz . UTC )\n", "title": "", "metadata": ""}
{"_id": "e3e6740d59de0d734f9918d7e8bb2621", "text": "def exists ( self , filepath ) : if self . is_ssh ( filepath ) : self . _check_ftp ( ) remotepath = self . _get_remote ( filepath ) try : self . ftp . stat ( remotepath ) except IOError as e : if e . errno == errno . ENOENT : return False else : return True else : return os . path . exists ( filepath )\n", "title": "", "metadata": ""}
{"_id": "a14d83b6689c569d278fb117c34d2984", "text": "def size_on_disk ( self ) : return int ( self . connection . query ( \"\"\"             SELECT SUM(data_length + index_length)             FROM information_schema.tables WHERE table_schema='{db}'             \"\"\" . format ( db = self . database ) ) . fetchone ( ) [ 0 ] )\n", "title": "", "metadata": ""}
{"_id": "42741427842eb8cecf4ef5e96c9f6377", "text": "def combine_pdf_as_bytes ( pdfs : List [ BytesIO ] ) -> bytes : writer = PdfWriter ( ) for pdf in pdfs : writer . addpages ( PdfReader ( pdf ) . pages ) bio = BytesIO ( ) writer . write ( bio ) bio . seek ( 0 ) output = bio . read ( ) bio . close ( ) return output\n", "title": "", "metadata": ""}
{"_id": "28e9b4ff83cf6120b4ce526c4f8d54bb", "text": "def gcd_float ( numbers , tol = 1e-8 ) : def pair_gcd_tol ( a , b ) : \"\"\"Calculate the Greatest Common Divisor of a and b.          Unless b==0, the result will have the same sign as b (so that when         b is divided by it, the result comes out positive).         \"\"\" while b > tol : a , b = b , a % b return a n = numbers [ 0 ] for i in numbers : n = pair_gcd_tol ( n , i ) return n\n", "title": "", "metadata": ""}
{"_id": "823189fba3c3a39f34be9ca410d456f0", "text": "def shutdown ( ) : global handler , transport , protocol if handler is not None : handler . close ( ) transport . close ( ) handler = None transport = None protocol = None\n", "title": "", "metadata": ""}
{"_id": "d7df3f0c3c7f754bcaaf415fb62b0ed7", "text": "def do_history ( self , line ) : self . _split_args ( line , 0 , 0 ) for idx , item in enumerate ( self . _history ) : d1_cli . impl . util . print_info ( \"{0: 3d} {1}\" . format ( idx , item ) )\n", "title": "", "metadata": ""}
{"_id": "83975b0a0aa933818b8cec4ec343f25b", "text": "def generate_random_string ( chars = 7 ) : return u\"\" . join ( random . sample ( string . ascii_letters * 2 + string . digits , chars ) )\n", "title": "", "metadata": ""}
{"_id": "b4d601b0b45ed62f3fa877ae51e7bd7d", "text": "def format_time ( time ) : h , r = divmod ( time / 1000 , 3600 ) m , s = divmod ( r , 60 ) return \"%02d:%02d:%02d\" % ( h , m , s )\n", "title": "", "metadata": ""}
{"_id": "1c9a795fc9e8b04ff54685bd7041d713", "text": "def localize ( dt ) : if dt . tzinfo is UTC : return ( dt + LOCAL_UTC_OFFSET ) . replace ( tzinfo = None ) # No TZ info so not going to assume anything, return as-is. return dt\n", "title": "", "metadata": ""}
{"_id": "1528a821d764f8f1d5222aa4c86b76fb", "text": "def is_bool_matrix ( l ) : if isinstance ( l , np . ndarray ) : if l . ndim == 2 and ( l . dtype == bool ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "c0c3f7d9001f23f398524a87721c6c0b", "text": "def spline_interpolate_by_datetime ( datetime_axis , y_axis , datetime_new_axis ) : numeric_datetime_axis = [ totimestamp ( a_datetime ) for a_datetime in datetime_axis ] numeric_datetime_new_axis = [ totimestamp ( a_datetime ) for a_datetime in datetime_new_axis ] return spline_interpolate ( numeric_datetime_axis , y_axis , numeric_datetime_new_axis )\n", "title": "", "metadata": ""}
{"_id": "68faca9617a06aa482b50cca203edd13", "text": "def pair_strings_sum_formatter ( a , b ) : if b [ : 1 ] == \"-\" : return \"{0} - {1}\" . format ( a , b [ 1 : ] ) return \"{0} + {1}\" . format ( a , b )\n", "title": "", "metadata": ""}
{"_id": "6ad324c36c09def37038bf260da07b79", "text": "def replace_month_abbr_with_num ( date_str , lang = DEFAULT_DATE_LANG ) : num , abbr = get_month_from_date_str ( date_str , lang ) return re . sub ( abbr , str ( num ) , date_str , flags = re . IGNORECASE )\n", "title": "", "metadata": ""}
{"_id": "a38654ade9c1b3d20900d6a2eb12ebfb", "text": "def get_view_selection ( self ) : if not self . MODEL_STORAGE_ID : return None , None # avoid selection requests on empty tree views -> case warnings in gtk3 if len ( self . store ) == 0 : paths = [ ] else : model , paths = self . _tree_selection . get_selected_rows ( ) # get all related models for selection from respective tree store field selected_model_list = [ ] for path in paths : model = self . store [ path ] [ self . MODEL_STORAGE_ID ] selected_model_list . append ( model ) return self . _tree_selection , selected_model_list\n", "title": "", "metadata": ""}
{"_id": "175305a7b3568a786286579bf35e963d", "text": "def get_prop_value ( name , props , default = None ) : # type: (str, Dict[str, Any], Any) -> Any if not props : return default try : return props [ name ] except KeyError : return default\n", "title": "", "metadata": ""}
{"_id": "2c243ee7492f6e7bbb65658eadf9554e", "text": "def method_caller ( method_name , * args , * * kwargs ) : def call_method ( target ) : func = getattr ( target , method_name ) return func ( * args , * * kwargs ) return call_method\n", "title": "", "metadata": ""}
{"_id": "e17b98a1c0445863372d7f6d48229707", "text": "def web ( host , port ) : from . webserver . web import get_app get_app ( ) . run ( host = host , port = port )\n", "title": "", "metadata": ""}
{"_id": "18c92b0ba8592e107f31f6936dd04244", "text": "def write_enum ( fo , datum , schema ) : index = schema [ 'symbols' ] . index ( datum ) write_int ( fo , index )\n", "title": "", "metadata": ""}
{"_id": "6acd0d99ab27a923e098e4403c762630", "text": "def read_proto_object ( fobj , klass ) : log . debug ( '%s chunk' , klass . __name__ ) obj = klass ( ) obj . ParseFromString ( read_block ( fobj ) ) log . debug ( 'Header: %s' , str ( obj ) ) return obj\n", "title": "", "metadata": ""}
{"_id": "79e2fa28d6214634367285394d6f1e17", "text": "def describe_unique_1d ( series ) : return pd . Series ( [ base . S_TYPE_UNIQUE ] , index = [ 'type' ] , name = series . name )\n", "title": "", "metadata": ""}
{"_id": "1ac19ba519ca757e2daf6c0adce644ef", "text": "def main ( argv , version = DEFAULT_VERSION ) : tarball = download_setuptools ( ) _install ( tarball , _build_install_args ( argv ) )\n", "title": "", "metadata": ""}
{"_id": "0cb33d4ebdfd5707e3d8c119bfeb3139", "text": "def readable ( path ) : try : st = os . stat ( path ) return 0 != st . st_mode & READABLE_MASK except os . error : return None return True\n", "title": "", "metadata": ""}
{"_id": "ee71e2c2b9fb4c8e474e98307abe7df9", "text": "def safe_call ( cls , method , * args ) : return cls . call ( method , * args , safe = True )\n", "title": "", "metadata": ""}
{"_id": "4b09fbccfa124ec9a89837221f0d23da", "text": "def test_value ( self , value ) : if not isinstance ( value , int ) : raise ValueError ( 'expected int value: ' + str ( type ( value ) ) )\n", "title": "", "metadata": ""}
{"_id": "49cc2741d68b2091e603dbb6e58c08ff", "text": "def intersect ( self , other ) : return DataFrame ( self . _jdf . intersect ( other . _jdf ) , self . sql_ctx )\n", "title": "", "metadata": ""}
{"_id": "72bbe98c1cd999024541e14426ade7c7", "text": "def move_back ( self , dt ) : self . _position = self . _old_position self . rect . topleft = self . _position self . feet . midbottom = self . rect . midbottom\n", "title": "", "metadata": ""}
{"_id": "eb0eea65f2cfc4e397dd5b6abd91d97d", "text": "def parse_datetime ( dt_str ) : date_format = \"%Y-%m-%dT%H:%M:%S %z\" dt_str = dt_str . replace ( \"Z\" , \" +0000\" ) return datetime . datetime . strptime ( dt_str , date_format )\n", "title": "", "metadata": ""}
{"_id": "35c77e049d74363effd7a0a08d2d75c2", "text": "def uuid2buid ( value ) : if six . PY3 : # pragma: no cover return urlsafe_b64encode ( value . bytes ) . decode ( 'utf-8' ) . rstrip ( '=' ) else : return six . text_type ( urlsafe_b64encode ( value . bytes ) . rstrip ( '=' ) )\n", "title": "", "metadata": ""}
{"_id": "134f2cc47c63e9c4541f0ad10f066369", "text": "def cell_normalize ( data ) : if sparse . issparse ( data ) : data = sparse . csc_matrix ( data . astype ( float ) ) # normalize in-place sparse_cell_normalize ( data . data , data . indices , data . indptr , data . shape [ 1 ] , data . shape [ 0 ] ) return data data_norm = data . astype ( float ) total_umis = [ ] for i in range ( data . shape [ 1 ] ) : di = data_norm [ : , i ] total_umis . append ( di . sum ( ) ) di /= total_umis [ i ] med = np . median ( total_umis ) data_norm *= med return data_norm\n", "title": "", "metadata": ""}
{"_id": "f0110a16dd13f180f809906bf8800420", "text": "def isfunc ( x ) : return any ( [ inspect . isfunction ( x ) and not asyncio . iscoroutinefunction ( x ) , inspect . ismethod ( x ) and not asyncio . iscoroutinefunction ( x ) ] )\n", "title": "", "metadata": ""}
{"_id": "1de6c29d5e179b3b7d01bdb732162be3", "text": "def parse_query_string ( query ) : result = { } qparts = query . split ( '&' ) for item in qparts : key , value = item . split ( '=' ) key = key . strip ( ) value = value . strip ( ) result [ key ] = unquote_plus ( value ) return result\n", "title": "", "metadata": ""}
{"_id": "7f69eca5fe59d4596b414205018474a6", "text": "def matshow ( * args , * * kwargs ) : kwargs [ 'interpolation' ] = kwargs . pop ( 'interpolation' , 'none' ) return plt . imshow ( * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "0358025cc5a38940789d8d08f3893b1c", "text": "def format_screen ( strng ) : # Paragraph continue par_re = re . compile ( r'\\\\$' , re . MULTILINE ) strng = par_re . sub ( '' , strng ) return strng\n", "title": "", "metadata": ""}
{"_id": "7ad7b78019c500b3c2490f5de72bc71d", "text": "def print_bintree ( tree , indent = '  ' ) : for n in sorted ( tree . keys ( ) ) : print \"%s%s\" % ( indent * depth ( n , tree ) , n )\n", "title": "", "metadata": ""}
{"_id": "c8b3cd1ae0857bd69436f4d7312958f3", "text": "def _findNearest ( arr , value ) : arr = np . array ( arr ) # find nearest value in array idx = ( abs ( arr - value ) ) . argmin ( ) return arr [ idx ]\n", "title": "", "metadata": ""}
{"_id": "d1343e7385a970aa33223e8e9d39a467", "text": "def parse ( self , data , mimetype ) : encoding = mimetype . params . get ( 'charset' ) or 'utf-8' return json . loads ( data . decode ( encoding ) )\n", "title": "", "metadata": ""}
{"_id": "80123fd7bb05c301abf0336fe879a811", "text": "def render_template_string ( source , * * context ) : ctx = _app_ctx_stack . top ctx . app . update_template_context ( context ) return _render ( ctx . app . jinja_env . from_string ( source ) , context , ctx . app )\n", "title": "", "metadata": ""}
{"_id": "16c647106a5806e8ef34cd1801331a75", "text": "async def disconnect ( self ) : if not self . connected : return self . writer . close ( ) self . reader = None self . writer = None\n", "title": "", "metadata": ""}
{"_id": "67f4c3bf68ddd6aac457de1d5e67a494", "text": "def get_filetype_icon ( fname ) : ext = osp . splitext ( fname ) [ 1 ] if ext . startswith ( '.' ) : ext = ext [ 1 : ] return get_icon ( \"%s.png\" % ext , ima . icon ( 'FileIcon' ) )\n", "title": "", "metadata": ""}
{"_id": "712a1bb5c62192dffe89fb06c51be8c8", "text": "def __get_registry_key ( self , key ) : import winreg root = winreg . OpenKey ( winreg . HKEY_CURRENT_USER , r'SOFTWARE\\GSettings\\org\\gnucash\\general' , 0 , winreg . KEY_READ ) [ pathname , regtype ] = ( winreg . QueryValueEx ( root , key ) ) winreg . CloseKey ( root ) return pathname\n", "title": "", "metadata": ""}
{"_id": "3ecb521d0d4ac0bff7c9296529dec8af", "text": "def url_to_image ( url ) : r = requests . get ( url ) image = StringIO ( r . content ) return image\n", "title": "", "metadata": ""}
{"_id": "b69167e61ef98d4d946372bbcc9c6c3b", "text": "def subn_filter ( s , find , replace , count = 0 ) : return re . gsub ( find , replace , count , s )\n", "title": "", "metadata": ""}
{"_id": "ccaf0596b91c7eac6b09e4fc734a5596", "text": "def is_admin ( self ) : return self . role == self . roles . administrator . value and self . state == State . approved\n", "title": "", "metadata": ""}
{"_id": "f469e887b6b7188a510d2c6638e27b63", "text": "def disable_stdout_buffering ( ) : stdout_orig = sys . stdout sys . stdout = os . fdopen ( sys . stdout . fileno ( ) , 'w' , 0 ) # NOTE(brandyn): This removes the original stdout return stdout_orig\n", "title": "", "metadata": ""}
{"_id": "69af5ea7b2fe5a6a027e34441705dc80", "text": "def debug ( sequence ) : points = [ ] for i , p in enumerate ( sequence ) : copy = Point ( p ) copy [ 'index' ] = i points . append ( copy ) return sequence . __class__ ( points )\n", "title": "", "metadata": ""}
{"_id": "35b89af583235fccab1c5c569b968b3f", "text": "def assert_list ( self , putative_list , expected_type = string_types , key_arg = None ) : return assert_list ( putative_list , expected_type , key_arg = key_arg , raise_type = lambda msg : TargetDefinitionException ( self , msg ) )\n", "title": "", "metadata": ""}
{"_id": "977bbb355a342f2999a2e0350ecfad9e", "text": "def remove_duplicates ( lst ) : dset = set ( ) return [ l for l in lst if l not in dset and not dset . add ( l ) ]\n", "title": "", "metadata": ""}
{"_id": "fc0df6146f58e8c26785fff8bc855942", "text": "def check_consistent_length ( * arrays ) : uniques = np . unique ( [ _num_samples ( X ) for X in arrays if X is not None ] ) if len ( uniques ) > 1 : raise ValueError ( \"Found arrays with inconsistent numbers of samples: %s\" % str ( uniques ) )\n", "title": "", "metadata": ""}
{"_id": "771ea467bbe5f7e3e7603c57e98ec4eb", "text": "def get_active_window ( self ) : app = get_app ( ) try : return self . _active_window_for_cli [ app ] except KeyError : self . _active_window_for_cli [ app ] = self . _last_active_window or self . windows [ 0 ] return self . windows [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "746bb0f484a5df9b4f8923bd7db5dbea", "text": "def first_location_of_maximum ( x ) : if not isinstance ( x , ( np . ndarray , pd . Series ) ) : x = np . asarray ( x ) return np . argmax ( x ) / len ( x ) if len ( x ) > 0 else np . NaN\n", "title": "", "metadata": ""}
{"_id": "76a3036b8f65cda6637d62e1043fbacb", "text": "def dimension_size ( x , axis ) : # Since tf.gather isn't \"constant-in, constant-out\", we must first check the # static shape or fallback to dynamic shape. s = tf . compat . dimension_value ( tensorshape_util . with_rank_at_least ( x . shape , np . abs ( axis ) ) [ axis ] ) if s is not None : return s return tf . shape ( input = x ) [ axis ]\n", "title": "", "metadata": ""}
{"_id": "5f575e1f0ebbc05aed54799ffc68b8a2", "text": "def infer_format ( filename : str ) -> str : _ , ext = os . path . splitext ( filename ) return ext\n", "title": "", "metadata": ""}
{"_id": "f63ccc5e9edab10de8d52ea7f0c79d29", "text": "def close_all ( ) : # Windows can be closed by releasing all references to them so they can be # garbage collected. May not be necessary to call close(). global _qtg_windows for window in _qtg_windows : window . close ( ) _qtg_windows = [ ] global _qtg_widgets for widget in _qtg_widgets : widget . close ( ) _qtg_widgets = [ ] global _plt_figures for fig in _plt_figures : _ , plt , _ = _import_plt ( ) plt . close ( fig ) _plt_figures = [ ]\n", "title": "", "metadata": ""}
{"_id": "e9a3dc6c91230e83f87e1088525a17a5", "text": "def _to_java_object_rdd ( rdd ) : rdd = rdd . _reserialize ( AutoBatchedSerializer ( PickleSerializer ( ) ) ) return rdd . ctx . _jvm . org . apache . spark . ml . python . MLSerDe . pythonToJava ( rdd . _jrdd , True )\n", "title": "", "metadata": ""}
{"_id": "9786d3545e06712d0ec8ab770de35ded", "text": "def stringify_col ( df , col_name ) : df = df . copy ( ) df [ col_name ] = df [ col_name ] . fillna ( \"\" ) df [ col_name ] = df [ col_name ] . astype ( str ) return df\n", "title": "", "metadata": ""}
{"_id": "88f2b463f5f972a34903ba3ec80d48ed", "text": "def _indexes ( arr ) : myarr = np . array ( arr ) if myarr . ndim == 1 : return list ( range ( len ( myarr ) ) ) elif myarr . ndim == 2 : return tuple ( itertools . product ( list ( range ( arr . shape [ 0 ] ) ) , list ( range ( arr . shape [ 1 ] ) ) ) ) else : raise NotImplementedError ( 'Only supporting arrays of dimension 1 and 2 as yet.' )\n", "title": "", "metadata": ""}
{"_id": "70c63583ed6356a315a2bbfa7d3cac8b", "text": "def get_method_names ( obj ) : method_names = [ ] for method_name in dir ( obj ) : method = getattr ( obj , method_name ) if MethodReflector . _is_method ( method , method_name ) : method_names . append ( method_name ) return method_names\n", "title": "", "metadata": ""}
{"_id": "600db6a22c997a8fd6c96c5f9a35f45f", "text": "def concat ( cls , iterables ) : def generator ( ) : for it in iterables : for element in it : yield element return cls ( generator ( ) )\n", "title": "", "metadata": ""}
{"_id": "1e12177d2c4cb367f4db0aacfd627b3e", "text": "def __call__ ( self , r ) : r . headers [ 'Authorization' ] = 'JWT {jwt}' . format ( jwt = self . token ) return r\n", "title": "", "metadata": ""}
{"_id": "eddb3eaa337bbd75708836aedc3eda50", "text": "def _set_tab_width ( self , tab_width ) : font_metrics = QtGui . QFontMetrics ( self . font ) self . _control . setTabStopWidth ( tab_width * font_metrics . width ( ' ' ) ) self . _tab_width = tab_width\n", "title": "", "metadata": ""}
{"_id": "f210137a1b475890ef6c587b27fd5ce6", "text": "def read_sphinx_environment ( pth ) : with open ( pth , 'rb' ) as fo : env = pickle . load ( fo ) return env\n", "title": "", "metadata": ""}
{"_id": "1ef529a67af83001b3520ac12510fac2", "text": "def make_dep_graph ( depender ) : shutit_global . shutit_global_object . yield_to_draw ( ) digraph = '' for dependee_id in depender . depends_on : digraph = ( digraph + '\"' + depender . module_id + '\"->\"' + dependee_id + '\";\\n' ) return digraph\n", "title": "", "metadata": ""}
{"_id": "32908c472ef8b5781910ad81d8751109", "text": "def to_iso_string ( self ) -> str : assert isinstance ( self . value , datetime ) return datetime . isoformat ( self . value )\n", "title": "", "metadata": ""}
{"_id": "01baf32813372d3109dfb3cb5c98376a", "text": "def get_obj ( ref ) : oid = int ( ref ) return server . id2ref . get ( oid ) or server . id2obj [ oid ]\n", "title": "", "metadata": ""}
{"_id": "3baa745dd023a947ae9321b52365318a", "text": "def as_list ( self ) : return [ self . name , self . value , [ x . as_list for x in self . children ] ]\n", "title": "", "metadata": ""}
{"_id": "5b445c31613c6f8b6d9a6f24183970fb", "text": "def format_exc ( limit = None ) : try : etype , value , tb = sys . exc_info ( ) return '' . join ( traceback . format_exception ( etype , value , tb , limit ) ) finally : etype = value = tb = None\n", "title": "", "metadata": ""}
{"_id": "af8c98148873e655ee5fc12543366027", "text": "def _trace_full ( frame , event , arg ) : if event == \"line\" : _trace_line ( frame , event , arg ) else : _trace ( frame , event , arg ) return _trace_full\n", "title": "", "metadata": ""}
{"_id": "280292be2fb3b4856098f0b05c2b5736", "text": "def correlation ( df , rowvar = False ) : # Create a correlation matrix for all correlations # of the columns (filled with na for all values) df = df . copy ( ) maskv = np . ma . masked_where ( np . isnan ( df . values ) , df . values ) cdf = np . ma . corrcoef ( maskv , rowvar = False ) cdf = pd . DataFrame ( np . array ( cdf ) ) cdf . columns = df . columns cdf . index = df . columns cdf = cdf . sort_index ( level = 0 , axis = 1 ) cdf = cdf . sort_index ( level = 0 ) return cdf\n", "title": "", "metadata": ""}
{"_id": "38d53c9beac9d4b6976ef675cbc921ee", "text": "def _wait_for_response ( self ) : while not self . server . response_code : time . sleep ( 2 ) time . sleep ( 5 ) self . server . shutdown ( )\n", "title": "", "metadata": ""}
{"_id": "bae42e0f6ccfc38b996134758a877d1d", "text": "def __call__ ( self , _ ) : if self . iter % self . step == 0 : self . pbar . update ( self . step ) self . iter += 1\n", "title": "", "metadata": ""}
{"_id": "82a0f54812dd6449123337e3db86f669", "text": "def _index_range ( self , version , symbol , from_version = None , * * kwargs ) : from_index = None if from_version : from_index = from_version [ 'up_to' ] return from_index , None\n", "title": "", "metadata": ""}
{"_id": "594336bd03a987004f34888422e9cc51", "text": "def csv_matrix_print ( classes , table ) : result = \"\" classes . sort ( ) for i in classes : for j in classes : result += str ( table [ i ] [ j ] ) + \",\" result = result [ : - 1 ] + \"\\n\" return result [ : - 1 ]\n", "title": "", "metadata": ""}
{"_id": "a1a94ccb1762511c5d3e8bc3bba501f3", "text": "def deskew ( S ) : x = np . zeros ( 3 ) x [ 0 ] = S [ 2 , 1 ] x [ 1 ] = S [ 0 , 2 ] x [ 2 ] = S [ 1 , 0 ] return x\n", "title": "", "metadata": ""}
{"_id": "41e491b0b9491d4919ec95de18200bef", "text": "def launch_server ( ) : print ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) cur_dir = os . getcwd ( ) path = os . path . dirname ( os . path . abspath ( __file__ ) ) run = True os . chdir ( path ) os . system ( 'python manage.py runserver --nostatic' ) os . chdir ( cur_dir )\n", "title": "", "metadata": ""}
{"_id": "6e8e099079215b79f2b40bbc5edbc008", "text": "def map_wrap ( f ) : @ functools . wraps ( f ) def wrapper ( * args , * * kwargs ) : return f ( * args , * * kwargs ) return wrapper\n", "title": "", "metadata": ""}
{"_id": "5223b7afce29d414cdfcbb68a19af6ad", "text": "def compose_all ( tups ) : from . import ast # I weep for humanity return functools . reduce ( lambda x , y : x . compose ( y ) , map ( ast . make_tuple , tups ) , ast . make_tuple ( { } ) )\n", "title": "", "metadata": ""}
{"_id": "ae977ffc7e62439b695d351a92299d6c", "text": "def auto_up ( self , count = 1 , go_to_start_of_line_if_history_changes = False ) : if self . complete_state : self . complete_previous ( count = count ) elif self . document . cursor_position_row > 0 : self . cursor_up ( count = count ) elif not self . selection_state : self . history_backward ( count = count ) # Go to the start of the line? if go_to_start_of_line_if_history_changes : self . cursor_position += self . document . get_start_of_line_position ( )\n", "title": "", "metadata": ""}
{"_id": "03feb82cd76ea0039edec8638fe40351", "text": "def ToDatetime ( self ) : return datetime . utcfromtimestamp ( self . seconds + self . nanos / float ( _NANOS_PER_SECOND ) )\n", "title": "", "metadata": ""}
{"_id": "35868aeb780dc9cb9e29d7806506b07c", "text": "def calculate_month ( birth_date ) : year = int ( birth_date . strftime ( '%Y' ) ) month = int ( birth_date . strftime ( '%m' ) ) + ( ( int ( year / 100 ) - 14 ) % 5 ) * 20 return month\n", "title": "", "metadata": ""}
{"_id": "e0d32a1e7064dffb061477cce239ed8d", "text": "def any_of ( value , * args ) : if len ( args ) : value = ( value , ) + args return ExpectationAny ( value )\n", "title": "", "metadata": ""}
{"_id": "72173432903d8d8f9520089216a6b974", "text": "def urljoin ( * urls ) : return reduce ( urlparse . urljoin , [ u . strip ( '/' ) + '/' for u in urls if u . strip ( '/' ) ] , '' ) . rstrip ( '/' )\n", "title": "", "metadata": ""}
{"_id": "11f9214f075ffd34e093a05b1c152bf3", "text": "def _environment_variables ( ) -> Dict [ str , str ] : return { key : value for key , value in os . environ . items ( ) if _is_encodable ( value ) }\n", "title": "", "metadata": ""}
{"_id": "2a9851c12b01319fe4600bba4dfa7111", "text": "def first_unique_char ( s ) : if ( len ( s ) == 1 ) : return 0 ban = [ ] for i in range ( len ( s ) ) : if all ( s [ i ] != s [ k ] for k in range ( i + 1 , len ( s ) ) ) == True and s [ i ] not in ban : return i else : ban . append ( s [ i ] ) return - 1\n", "title": "", "metadata": ""}
{"_id": "077bc2a3cfdac8f14d437340c7a75ae1", "text": "def stop ( pid ) : if psutil . pid_exists ( pid ) : try : p = psutil . Process ( pid ) p . kill ( ) except Exception : pass\n", "title": "", "metadata": ""}
{"_id": "23a34b5bef22a5d5b060c98b55f30253", "text": "def circles_pycairo ( width , height , color ) : cairo_color = color / rgb ( 255 , 255 , 255 ) surface = cairo . ImageSurface ( cairo . FORMAT_ARGB32 , width , height ) ctx = cairo . Context ( surface ) # draw a circle in the center ctx . new_path ( ) ctx . set_source_rgb ( cairo_color . red , cairo_color . green , cairo_color . blue ) ctx . arc ( width / 2 , height / 2 , width / 2 , 0 , 2 * pi ) ctx . fill ( ) surface . write_to_png ( 'circles.png' )\n", "title": "", "metadata": ""}
{"_id": "0519fd1136eb442e2a1cb3b20ac36048", "text": "def ansi ( color , text ) : code = COLOR_CODES [ color ] return '\\033[1;{0}m{1}{2}' . format ( code , text , RESET_TERM )\n", "title": "", "metadata": ""}
{"_id": "7fa1f4eabbcf1d8c795cf9c385b63f07", "text": "def fmt_camel ( name ) : words = split_words ( name ) assert len ( words ) > 0 first = words . pop ( 0 ) . lower ( ) return first + '' . join ( [ word . capitalize ( ) for word in words ] )\n", "title": "", "metadata": ""}
{"_id": "78075a811fcb375fafac2caef4940a70", "text": "def get_language ( ) : from parler import appsettings language = dj_get_language ( ) if language is None and appsettings . PARLER_DEFAULT_ACTIVATE : return appsettings . PARLER_DEFAULT_LANGUAGE_CODE else : return language\n", "title": "", "metadata": ""}
{"_id": "81cfa0c2a54cdee9960b7b7d094d3f25", "text": "def test_python_java_rt ( ) : sub_env = { 'PYTHONPATH' : _build_dir ( ) } log . info ( 'Executing Python unit tests (against Java runtime classes)...' ) return jpyutil . _execute_python_scripts ( python_java_rt_tests , env = sub_env )\n", "title": "", "metadata": ""}
{"_id": "070471e2f132708fd129399a20adf090", "text": "def do_striptags ( value ) : if hasattr ( value , '__html__' ) : value = value . __html__ ( ) return Markup ( unicode ( value ) ) . striptags ( )\n", "title": "", "metadata": ""}
{"_id": "961b642590f5fe759fad6dc7d1ababf1", "text": "def file_to_str ( fname ) : data = None # rU = read with Universal line terminator with open ( fname , 'rU' ) as fd : data = fd . read ( ) return data\n", "title": "", "metadata": ""}
{"_id": "47ecd659806f3f2c3696d83f1f801c76", "text": "def PopTask ( self ) : try : _ , task = heapq . heappop ( self . _heap ) except IndexError : return None self . _task_identifiers . remove ( task . identifier ) return task\n", "title": "", "metadata": ""}
{"_id": "209c56247d5051190735a0b330f9540d", "text": "def union_overlapping ( intervals ) : disjoint_intervals = [ ] for interval in intervals : if disjoint_intervals and disjoint_intervals [ - 1 ] . overlaps ( interval ) : disjoint_intervals [ - 1 ] = disjoint_intervals [ - 1 ] . union ( interval ) else : disjoint_intervals . append ( interval ) return disjoint_intervals\n", "title": "", "metadata": ""}
{"_id": "8869fc7e290e4f5c3759520401220688", "text": "def validate_multiindex ( self , obj ) : levels = [ l if l is not None else \"level_{0}\" . format ( i ) for i , l in enumerate ( obj . index . names ) ] try : return obj . reset_index ( ) , levels except ValueError : raise ValueError ( \"duplicate names/columns in the multi-index when \" \"storing as a table\" )\n", "title": "", "metadata": ""}
{"_id": "d86f6ebad3e668bb600361d07396572c", "text": "def get_page_text ( self , page ) : url = self . get_page_text_url ( page ) return self . _get_url ( url )\n", "title": "", "metadata": ""}
{"_id": "8f7e06614529978000a65322c109b98b", "text": "def _requiredSize ( shape , dtype ) : return math . floor ( np . prod ( np . asarray ( shape , dtype = np . uint64 ) ) * np . dtype ( dtype ) . itemsize )\n", "title": "", "metadata": ""}
{"_id": "c60567e88393c9a4d74b81ec6e5a1245", "text": "def _check_color_dim ( val ) : val = np . atleast_2d ( val ) if val . shape [ 1 ] not in ( 3 , 4 ) : raise RuntimeError ( 'Value must have second dimension of size 3 or 4' ) return val , val . shape [ 1 ]\n", "title": "", "metadata": ""}
{"_id": "132363728124a27b79dbcafab889dfae", "text": "def perform_pca ( A ) : # First subtract the mean M = ( A - numpy . mean ( A . T , axis = 1 ) ) . T # Get eigenvectors and values of covariance matrix return numpy . linalg . eig ( numpy . cov ( M ) )\n", "title": "", "metadata": ""}
{"_id": "08f6706514069eac884051c9b4598aaf", "text": "def replace ( scope , strings , source , dest ) : return [ s . replace ( source [ 0 ] , dest [ 0 ] ) for s in strings ]\n", "title": "", "metadata": ""}
{"_id": "a6aca826179dce504145132f91145e42", "text": "def fix_missing ( df , col , name , na_dict ) : if is_numeric_dtype ( col ) : if pd . isnull ( col ) . sum ( ) or ( name in na_dict ) : df [ name + '_na' ] = pd . isnull ( col ) filler = na_dict [ name ] if name in na_dict else col . median ( ) df [ name ] = col . fillna ( filler ) na_dict [ name ] = filler return na_dict\n", "title": "", "metadata": ""}
{"_id": "ed28e2137f7dc630208ebf005973b6e0", "text": "def eval_Rf ( self , Vf ) : return sl . inner ( self . Df , Vf , axis = self . cri . axisM ) - self . Sf\n", "title": "", "metadata": ""}
{"_id": "08ba8271b88a02cfa20ee7f29bb3e41c", "text": "def _read_preference_for ( self , session ) : # Override this operation's read preference with the transaction's. if session : return session . _txn_read_preference ( ) or self . __read_preference return self . __read_preference\n", "title": "", "metadata": ""}
{"_id": "66bf1c571678690d64f1f9a14ab32eff", "text": "def binary ( length ) : num = randint ( 1 , 999999 ) mask = '0' * length return ( mask + '' . join ( [ str ( num >> i & 1 ) for i in range ( 7 , - 1 , - 1 ) ] ) ) [ - length : ]\n", "title": "", "metadata": ""}
{"_id": "141ebe0746552c760d655bfd9438af8c", "text": "def block ( seed ) : num = SAMPLE_RATE * BLOCK_SIZE rng = RandomState ( seed % 2 ** 32 ) variance = SAMPLE_RATE / 2 return rng . normal ( size = num , scale = variance ** 0.5 )\n", "title": "", "metadata": ""}
{"_id": "c57104cd5619560459c050a3e7b92bae", "text": "def public ( self ) -> 'PrettyDir' : return PrettyDir ( self . obj , [ pattr for pattr in self . pattrs if not pattr . name . startswith ( '_' ) ] )\n", "title": "", "metadata": ""}
{"_id": "7104a83f4cbe49129f197cbded679a42", "text": "def get_median ( temp_list ) : num = len ( temp_list ) temp_list . sort ( ) print ( temp_list ) if num % 2 == 0 : median = ( temp_list [ int ( num / 2 ) ] + temp_list [ int ( num / 2 ) - 1 ] ) / 2 else : median = temp_list [ int ( num / 2 ) ] return median\n", "title": "", "metadata": ""}
{"_id": "5e07e1abad7ba96073a23d94224bf734", "text": "def make_prefixed_stack_name ( prefix , template_path ) : parts = os . path . basename ( template_path ) . split ( '-' ) parts = parts if len ( parts ) == 1 else parts [ : - 1 ] return ( '%s-%s' % ( prefix , '-' . join ( parts ) ) ) . split ( '.' ) [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "d33e8e258d9f84f436682f3e149f1d9a", "text": "def fib ( n ) : assert n > 0 a , b = 1 , 1 for i in range ( n - 1 ) : a , b = b , a + b return a\n", "title": "", "metadata": ""}
{"_id": "32b366ae8d3d85598da742e5fe8edc8d", "text": "def is_local_url ( target ) : ref_url = urlparse ( request . host_url ) test_url = urlparse ( urljoin ( request . host_url , target ) ) return test_url . scheme in ( 'http' , 'https' ) and ref_url . netloc == test_url . netloc\n", "title": "", "metadata": ""}
{"_id": "513907f5aaba77cb36d5e7e3678e2bee", "text": "def close_session ( self ) : with self . _graph . as_default ( ) : self . _sess . close ( ) self . _sess = None\n", "title": "", "metadata": ""}
{"_id": "dbe5fa20b0a6e57fe14e9e467c1b3949", "text": "def last_month ( ) : since = TODAY + delta ( day = 1 , months = - 1 ) until = since + delta ( months = 1 ) return Date ( since ) , Date ( until )\n", "title": "", "metadata": ""}
{"_id": "21bc66b7bdaf4b6c248ebd1b44bc9589", "text": "def findfirst ( f , coll ) : result = list ( dropwhile ( f , coll ) ) return result [ 0 ] if result else None\n", "title": "", "metadata": ""}
{"_id": "802cece9c969a4dca87b6db067bf8e4e", "text": "def from_array ( cls , arr ) : return cls ( ) . with_columns ( [ ( f , arr [ f ] ) for f in arr . dtype . names ] )\n", "title": "", "metadata": ""}
{"_id": "0ad3996170fc74a4078f34a7f2dbd93a", "text": "def translate_index_to_position ( self , index ) : # Find start of this line. row , row_index = self . _find_line_start_index ( index ) col = index - row_index return row , col\n", "title": "", "metadata": ""}
{"_id": "648f419835f8ae040791d4283d43de49", "text": "def chunked ( l , n ) : return [ l [ i : i + n ] for i in range ( 0 , len ( l ) , n ) ]\n", "title": "", "metadata": ""}
{"_id": "30f256b6b4cbe3ae3eae14baffac1e49", "text": "def compute_capture ( args ) : x , y , w , h , params = args return x , y , mandelbrot_capture ( x , y , w , h , params )\n", "title": "", "metadata": ""}
{"_id": "0d66a93b06545e89d8631dbd1e60e596", "text": "def to_unicode_repr ( _letter ) : # Python 2-3 compatible return u\"u'\" + u\"\" . join ( [ u\"\\\\u%04x\" % ord ( l ) for l in _letter ] ) + u\"'\"\n", "title": "", "metadata": ""}
{"_id": "392429e3b91f65c8f821e29be12058c8", "text": "def tag_to_dict ( html ) : element = document_fromstring ( html ) . xpath ( \"//html/body/child::*\" ) [ 0 ] attributes = dict ( element . attrib ) attributes [ \"text\" ] = element . text_content ( ) return attributes\n", "title": "", "metadata": ""}
{"_id": "0fc976fe195f94d29e346973f4e122f6", "text": "def image_format ( value ) : if value . image . format . upper ( ) not in constants . ALLOWED_IMAGE_FORMATS : raise ValidationError ( MESSAGE_INVALID_IMAGE_FORMAT )\n", "title": "", "metadata": ""}
{"_id": "be70aad49380d1545d4e9d58dc1b1782", "text": "def cols_strip ( df , col_list , dest = False ) : if not dest : return _pd . DataFrame ( { col_name : col_strip ( df , col_name ) for col_name in col_list } ) for col_name in col_list : col_strip ( df , col_name , dest )\n", "title": "", "metadata": ""}
{"_id": "5310852298d7399e791e6c22dff3a34e", "text": "def create_symlink ( source , link_name ) : os_symlink = getattr ( os , \"symlink\" , None ) if isinstance ( os_symlink , collections . Callable ) : os_symlink ( source , link_name ) else : import ctypes csl = ctypes . windll . kernel32 . CreateSymbolicLinkW csl . argtypes = ( ctypes . c_wchar_p , ctypes . c_wchar_p , ctypes . c_uint32 ) csl . restype = ctypes . c_ubyte flags = 1 if os . path . isdir ( source ) else 0 if csl ( link_name , source , flags ) == 0 : raise ctypes . WinError ( )\n", "title": "", "metadata": ""}
{"_id": "b38e212bd19c5ed22fb30c1c01eaba32", "text": "def colorbar ( height , length , colormap ) : cbar = np . tile ( np . arange ( length ) * 1.0 / ( length - 1 ) , ( height , 1 ) ) cbar = ( cbar * ( colormap . values . max ( ) - colormap . values . min ( ) ) + colormap . values . min ( ) ) return colormap . colorize ( cbar )\n", "title": "", "metadata": ""}
{"_id": "8f67da806dd99cd72acdf0b953c7214f", "text": "def equal ( obj1 , obj2 ) : Comparable . log ( obj1 , obj2 , '==' ) equality = obj1 . equality ( obj2 ) Comparable . log ( obj1 , obj2 , '==' , result = equality ) return equality\n", "title": "", "metadata": ""}
{"_id": "a23210c77795a72d957fd61d171c5260", "text": "def task_property_present_predicate ( service , task , prop ) : try : response = get_service_task ( service , task ) except Exception as e : pass return ( response is not None ) and ( prop in response )\n", "title": "", "metadata": ""}
{"_id": "da318aaf72cdff970f60ef1083870f14", "text": "def natural_sort ( list_to_sort : Iterable [ str ] ) -> List [ str ] : return sorted ( list_to_sort , key = natural_keys )\n", "title": "", "metadata": ""}
{"_id": "2b4340738e1a45c7c68667faac0d4a49", "text": "def __absolute__ ( self , uri ) : return op . abspath ( op . join ( self . __path__ , uri ) )\n", "title": "", "metadata": ""}
{"_id": "6646c597c78843832d9b8bce69e5e919", "text": "def consistent_shuffle ( * lists ) : perm = list ( range ( len ( lists [ 0 ] ) ) ) random . shuffle ( perm ) lists = tuple ( [ sublist [ index ] for index in perm ] for sublist in lists ) return lists\n", "title": "", "metadata": ""}
{"_id": "31dc93e45a81b3c76d05053c64975332", "text": "def cleanup ( self ) : for instance in self . context : del ( instance ) for plugin in self . plugins : del ( plugin )\n", "title": "", "metadata": ""}
{"_id": "f427fda3258823c5434888d26ac9fb92", "text": "def find_object ( self , object_type ) : node = self while node is not None : if isinstance ( node . obj , object_type ) : return node . obj node = node . parent\n", "title": "", "metadata": ""}
{"_id": "e725e3f422f0dfcc0785c7e9549c9a13", "text": "def argmax ( attrs , inputs , proto_obj ) : axis = attrs . get ( 'axis' , 0 ) keepdims = attrs . get ( 'keepdims' , 1 ) argmax_op = symbol . argmax ( inputs [ 0 ] , axis = axis , keepdims = keepdims ) # onnx argmax operator always expects int64 as output type cast_attrs = { 'dtype' : 'int64' } return 'cast' , cast_attrs , argmax_op\n", "title": "", "metadata": ""}
{"_id": "ceea3dc80fc22a56ecbfb003700591b8", "text": "def ruler_line ( self , widths , linetype = '-' ) : cells = [ ] for w in widths : cells . append ( linetype * ( w + 2 ) ) return '+' + '+' . join ( cells ) + '+'\n", "title": "", "metadata": ""}
{"_id": "5bc209ed5eb3de306ac8356b2ed237de", "text": "def get_data ( ) : # pretend we're measuring a noisy resonance at zero y = 1.0 / ( 1.0 + 1j * ( n_x . get_value ( ) - 0.002 ) * 1000 ) + _n . random . rand ( ) * 0.1 # and that it takes time to do so _t . sleep ( 0.1 ) # return mag phase return abs ( y ) , _n . angle ( y , True )\n", "title": "", "metadata": ""}
{"_id": "16bafe403037657c525bf8053e8208a0", "text": "def dumps ( obj ) : return json . dumps ( obj , indent = 4 , sort_keys = True , cls = CustomEncoder )\n", "title": "", "metadata": ""}
{"_id": "8f4e3ffbcb6ad1b64129165ffba7cf98", "text": "def get_wordnet_syns ( word ) : synonyms = [ ] regex = r\"_\" pat = re . compile ( regex ) synset = nltk . wordnet . wordnet . synsets ( word ) for ss in synset : for swords in ss . lemma_names : synonyms . append ( pat . sub ( \" \" , swords . lower ( ) ) ) synonyms = f7 ( synonyms ) return synonyms\n", "title": "", "metadata": ""}
{"_id": "e2ac97a007bbda11fff34bc51304b1d2", "text": "def rms ( x ) : try : return ( np . array ( x ) ** 2 ) . mean ( ) ** 0.5 except : x = np . array ( dropna ( x ) ) invN = 1.0 / len ( x ) return ( sum ( invN * ( x_i ** 2 ) for x_i in x ) ) ** .5\n", "title": "", "metadata": ""}
{"_id": "03fd91a8e02a20a7fa274ce2f7ccc88d", "text": "def call_and_exit ( self , cmd , shell = True ) : sys . exit ( subprocess . call ( cmd , shell = shell ) )\n", "title": "", "metadata": ""}
{"_id": "a8fc3ec13d977801534d3d60203e75e4", "text": "def load ( cls , fname ) : with open ( fname ) as f : content = f . readlines ( ) return Flow . from_json ( '' . join ( content ) )\n", "title": "", "metadata": ""}
{"_id": "f000d52ffe56c71cdb8fd1f1810edded", "text": "def is_square_matrix ( mat ) : mat = np . array ( mat ) if mat . ndim != 2 : return False shape = mat . shape return shape [ 0 ] == shape [ 1 ]\n", "title": "", "metadata": ""}
{"_id": "12e05fe899a132a95e770656bf6e3576", "text": "def _convert_dict_to_json ( array ) : return json . dumps ( array , skipkeys = False , allow_nan = False , indent = None , separators = ( \",\" , \":\" ) , sort_keys = True , default = lambda o : o . __dict__ , )\n", "title": "", "metadata": ""}
{"_id": "48ee3a7a000e2f73da1b761fbf4022f3", "text": "def resize_by_area ( img , size ) : return tf . to_int64 ( tf . image . resize_images ( img , [ size , size ] , tf . image . ResizeMethod . AREA ) )\n", "title": "", "metadata": ""}
{"_id": "9aaf05c23cf6fee393ce57a441432fc5", "text": "def get_single_value ( d ) : assert len ( d ) == 1 , 'Single-item dict must have just one item, not %d.' % len ( d ) return next ( six . itervalues ( d ) )\n", "title": "", "metadata": ""}
{"_id": "4dac03f6162a560b3de4d16ac8092ff2", "text": "def pwm ( host , seq , m1 , m2 , m3 , m4 ) : at ( host , 'PWM' , seq , [ m1 , m2 , m3 , m4 ] )\n", "title": "", "metadata": ""}
{"_id": "ba0af85249084ce93a4a97b888e81100", "text": "def _linear_seaborn_ ( self , label = None , style = None , opts = None ) : xticks , yticks = self . _get_ticks ( opts ) try : fig = sns . lmplot ( self . x , self . y , data = self . df ) fig = self . _set_with_height ( fig , opts ) return fig except Exception as e : self . err ( e , self . linear_ , \"Can not draw linear regression chart\" )\n", "title": "", "metadata": ""}
{"_id": "dacfebe5cf3582339309ef208fc95414", "text": "def display_list_by_prefix ( names_list , starting_spaces = 0 ) : cur_prefix , result_lines = None , [ ] space = \" \" * starting_spaces for name in sorted ( names_list ) : split = name . split ( \"_\" , 1 ) prefix = split [ 0 ] if cur_prefix != prefix : result_lines . append ( space + prefix + \":\" ) cur_prefix = prefix result_lines . append ( space + \"  * \" + name ) return \"\\n\" . join ( result_lines )\n", "title": "", "metadata": ""}
{"_id": "29740520106537f0cf7e26576a7faa14", "text": "def _request_modify_dns_record ( self , record ) : return self . _request_internal ( \"Modify_DNS_Record\" , domain = self . domain , record = record )\n", "title": "", "metadata": ""}
{"_id": "ed2c9e2bcbe37f9a0b6531630bd16c39", "text": "def _clear_dir ( dirName ) : # If we got here, clear dir   for fname in os . listdir ( dirName ) : try : os . remove ( os . path . join ( dirName , fname ) ) except Exception : pass try : os . rmdir ( dirName ) except Exception : pass\n", "title": "", "metadata": ""}
{"_id": "3c510ce44fe39a02c75ae3588bce98d7", "text": "def get_image ( self , source ) : buf = StringIO ( source . read ( ) ) return Image . open ( buf )\n", "title": "", "metadata": ""}
{"_id": "155f4560450e79be0c607b9d9ebefbd0", "text": "def _unique_rows_numpy ( a ) : a = np . ascontiguousarray ( a ) unique_a = np . unique ( a . view ( [ ( '' , a . dtype ) ] * a . shape [ 1 ] ) ) return unique_a . view ( a . dtype ) . reshape ( ( unique_a . shape [ 0 ] , a . shape [ 1 ] ) )\n", "title": "", "metadata": ""}
{"_id": "40967f8a0f3d012a36eaec2f9b1c8e48", "text": "def decode ( self , bytes , raw = False ) : return struct . unpack ( self . format , buffer ( bytes ) ) [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "5b9d422a29fc3f23ffac64f1b2fd4761", "text": "def to_pydatetime ( self ) : dt = datetime . datetime . combine ( self . _date . to_pydate ( ) , self . _time . to_pytime ( ) ) from . tz import FixedOffsetTimezone return dt . replace ( tzinfo = _utc ) . astimezone ( FixedOffsetTimezone ( self . _offset ) )\n", "title": "", "metadata": ""}
{"_id": "3a91b6b4a57c8f6caf1f840a4d1f842a", "text": "def _synced ( method , self , args , kwargs ) : with self . _lock : return method ( * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "1e5b628a317a7b9e2b07ae483f213e26", "text": "def add_matplotlib_cmap ( cm , name = None ) : global cmaps cmap = matplotlib_to_ginga_cmap ( cm , name = name ) cmaps [ cmap . name ] = cmap\n", "title": "", "metadata": ""}
{"_id": "717eb1bd34695049ae8b06192db1c6f8", "text": "def empty_wav ( wav_path : Union [ Path , str ] ) -> bool : with wave . open ( str ( wav_path ) , 'rb' ) as wav_f : return wav_f . getnframes ( ) == 0\n", "title": "", "metadata": ""}
{"_id": "957d115fa0450382fd00fb7198df2b84", "text": "def binSearch ( arr , val ) : i = bisect_left ( arr , val ) if i != len ( arr ) and arr [ i ] == val : return i return - 1\n", "title": "", "metadata": ""}
{"_id": "d145e52fac46ea308975ff362af5b6ef", "text": "def robust_int ( v ) : if isinstance ( v , int ) : return v if isinstance ( v , float ) : return int ( v ) v = str ( v ) . replace ( ',' , '' ) if not v : return None return int ( v )\n", "title": "", "metadata": ""}
{"_id": "5cfd4ce3d72101d7eb6b3e908febf8e1", "text": "def get_data_table ( filename ) : with get_file_object ( filename , \"r\" ) as rf : return DataTable ( list ( csv . reader ( rf ) ) )\n", "title": "", "metadata": ""}
{"_id": "ee040d41c948ede3ae17241d18377114", "text": "def log_to_json ( log ) : return [ log . timestamp . isoformat ( ) [ : 22 ] , log . level , log . process , log . message ]\n", "title": "", "metadata": ""}
{"_id": "69aa14403687c69a37625482dd6385ec", "text": "def BROADCAST_FILTER_NOT ( func ) : return lambda u , command , * args , * * kwargs : not func ( u , command , * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "a24a48c36803d37a74fef888fa615766", "text": "def get_shape ( self ) : return tuple ( int ( c . pcdata ) for c in self . getElementsByTagName ( ligolw . Dim . tagName ) ) [ : : - 1 ]\n", "title": "", "metadata": ""}
{"_id": "aac5cdb1bf7ff2949711c27b095cfc62", "text": "def ylabelsize ( self , size , index = 1 ) : self . layout [ 'yaxis' + str ( index ) ] [ 'titlefont' ] [ 'size' ] = size return self\n", "title": "", "metadata": ""}
{"_id": "68a304a54dd71570a2d3f33e3d8c72a6", "text": "def lengths ( self ) : return ( np . array ( [ math . sqrt ( sum ( row ** 2 ) ) for row in self . matrix ] ) )\n", "title": "", "metadata": ""}
{"_id": "e0b9e9e2ca8d8eb43c3e29bc7bc41f17", "text": "def require ( executable : str , explanation : str = \"\" ) -> None : assert shutil . which ( executable ) , \"Need {!r} on the PATH.{}\" . format ( executable , \"\\n\" + explanation if explanation else \"\" )\n", "title": "", "metadata": ""}
{"_id": "dc4e25f64d43dec7c286a4dacee65035", "text": "def _validate_image_rank ( self , img_array ) : if img_array . ndim == 1 or img_array . ndim > 3 : msg = \"{0}D imagery is not allowed.\" . format ( img_array . ndim ) raise IOError ( msg )\n", "title": "", "metadata": ""}
{"_id": "52993fde33f254b7ba4e35d662ec9d07", "text": "def list_formatter ( handler , item , value ) : return u', ' . join ( str ( v ) for v in value )\n", "title": "", "metadata": ""}
{"_id": "cfbe71e29fa4d4f42ef83e43c00b8a4d", "text": "def fields ( self ) : return ( self . attributes . values ( ) + self . lists . values ( ) + self . references . values ( ) )\n", "title": "", "metadata": ""}
{"_id": "8aa6f6095787e2c6bbe218a3b5f9fe2f", "text": "def endless_permutations ( N , random_state = None ) : generator = check_random_state ( random_state ) while True : batch_inds = generator . permutation ( N ) for b in batch_inds : yield b\n", "title": "", "metadata": ""}
{"_id": "5d30e1f57a923eadcace7514e1e48e32", "text": "def _get_str_columns ( sf ) : return [ name for name in sf . column_names ( ) if sf [ name ] . dtype == str ]\n", "title": "", "metadata": ""}
{"_id": "e71e5b125c00e59fd3851f0eb111d7cd", "text": "def rewrap ( s , width = COLS ) : s = ' ' . join ( [ l . strip ( ) for l in s . strip ( ) . split ( '\\n' ) ] ) return '\\n' . join ( textwrap . wrap ( s , width ) )\n", "title": "", "metadata": ""}
{"_id": "44e6203d588a2d662895b8171c8d2e55", "text": "def on_property_change ( self , name , old_value , new_value ) : if self . _registration is not None : # use the registration to trigger the service event self . _registration . set_properties ( { name : new_value } )\n", "title": "", "metadata": ""}
{"_id": "1c1de0b42cc9abfc38af55e291a1cbaf", "text": "def strToBool ( val ) : if isinstance ( val , str ) : val = val . lower ( ) return val in [ 'true' , 'on' , 'yes' , True ]\n", "title": "", "metadata": ""}
{"_id": "17444ac2b1affbf52b6b9dc753804657", "text": "def correspond ( text ) : subproc . stdin . write ( text ) subproc . stdin . flush ( ) return drain ( )\n", "title": "", "metadata": ""}
{"_id": "36f86c9dc7d99e743cef2aecaba604c4", "text": "def is_element_present ( driver , selector , by = By . CSS_SELECTOR ) : try : driver . find_element ( by = by , value = selector ) return True except Exception : return False\n", "title": "", "metadata": ""}
{"_id": "5e5d2083b1427f19cfad6b0754e14ea3", "text": "def get_auth ( ) : import getpass user = input ( \"User Name: \" ) # noqa pswd = getpass . getpass ( 'Password: ' ) return Github ( user , pswd )\n", "title": "", "metadata": ""}
{"_id": "aa084308bb5176672d73d987f0a2c311", "text": "def printOut ( value , end = '\\n' ) : sys . stdout . write ( value ) sys . stdout . write ( end ) sys . stdout . flush ( )\n", "title": "", "metadata": ""}
{"_id": "959338c1df6d38700ce90d31f4172133", "text": "def flush ( self ) : if not self . nostdout : self . stdout . flush ( ) if self . file is not None : self . file . flush ( )\n", "title": "", "metadata": ""}
{"_id": "3e5871ceb27aa5f6b3747055e62764d3", "text": "def write_json_corpus ( documents , fnm ) : with codecs . open ( fnm , 'wb' , 'ascii' ) as f : for document in documents : f . write ( json . dumps ( document ) + '\\n' ) return documents\n", "title": "", "metadata": ""}
{"_id": "0bfd1444e52bd3b8ff3659e5c0329ee2", "text": "def csv2yaml ( in_file , out_file = None ) : if out_file is None : out_file = \"%s.yaml\" % os . path . splitext ( in_file ) [ 0 ] barcode_ids = _generate_barcode_ids ( _read_input_csv ( in_file ) ) lanes = _organize_lanes ( _read_input_csv ( in_file ) , barcode_ids ) with open ( out_file , \"w\" ) as out_handle : out_handle . write ( yaml . safe_dump ( lanes , default_flow_style = False ) ) return out_file\n", "title": "", "metadata": ""}
{"_id": "da403938eeaede5bbdfea2866d38bfb7", "text": "def plot_pauli_transfer_matrix ( self , ax ) : title = \"Estimated process\" ut . plot_pauli_transfer_matrix ( self . r_est , ax , self . pauli_basis . labels , title )\n", "title": "", "metadata": ""}
{"_id": "372b93bb28e29fa877178ae1dd3c393a", "text": "def get_all_files ( folder ) : for path , dirlist , filelist in os . walk ( folder ) : for fn in filelist : yield op . join ( path , fn )\n", "title": "", "metadata": ""}
{"_id": "aa9755b05556352ccbe8a9ba9bae614f", "text": "def min_depth ( self , root ) : if root is None : return 0 if root . left is not None or root . right is not None : return max ( self . minDepth ( root . left ) , self . minDepth ( root . right ) ) + 1 return min ( self . minDepth ( root . left ) , self . minDepth ( root . right ) ) + 1\n", "title": "", "metadata": ""}
{"_id": "a73fb920175df3223522b4ec03652529", "text": "def to_str ( s ) : if isinstance ( s , bytes ) : s = s . decode ( 'utf-8' ) elif not isinstance ( s , str ) : s = str ( s ) return s\n", "title": "", "metadata": ""}
{"_id": "d17523d4cf6ec34bde7639b6caa667bc", "text": "def generate_chunks ( string , num_chars ) : for start in range ( 0 , len ( string ) , num_chars ) : yield string [ start : start + num_chars ]\n", "title": "", "metadata": ""}
{"_id": "515ddc3d1ea44e0dc2cb1566e6a59411", "text": "def empty ( self , start = None , stop = None ) : self . set ( NOT_SET , start = start , stop = stop )\n", "title": "", "metadata": ""}
{"_id": "06443014edfbe605a2abf3668227cbd0", "text": "def timedelta_seconds ( timedelta ) : return ( timedelta . total_seconds ( ) if hasattr ( timedelta , \"total_seconds\" ) else timedelta . days * 24 * 3600 + timedelta . seconds + timedelta . microseconds / 1000000. )\n", "title": "", "metadata": ""}
{"_id": "51b60eb5cbc83fbfe7090631d8b26b7d", "text": "def experiment_property ( prop ) : exp = experiment ( session ) p = getattr ( exp , prop ) return success_response ( field = prop , data = p , request_type = prop )\n", "title": "", "metadata": ""}
{"_id": "84be133d17dd6f77f952df304f75682b", "text": "def checksum ( path ) : hasher = hashlib . sha1 ( ) with open ( path , 'rb' ) as stream : buf = stream . read ( BLOCKSIZE ) while len ( buf ) > 0 : hasher . update ( buf ) buf = stream . read ( BLOCKSIZE ) return hasher . hexdigest ( )\n", "title": "", "metadata": ""}
{"_id": "99f1958b22ee86e19ca2d1003840e904", "text": "def discard ( self , element ) : try : i = int ( element ) set . discard ( self , i ) except ValueError : pass\n", "title": "", "metadata": ""}
{"_id": "dc56e5622288f77cf8be618ec51f7ae0", "text": "def ensure_dtype_float ( x , default = np . float64 ) : if isinstance ( x , np . ndarray ) : if x . dtype . kind == 'f' : return x elif x . dtype . kind == 'i' : return x . astype ( default ) else : raise TypeError ( 'x is of type ' + str ( x . dtype ) + ' that cannot be converted to float' ) else : raise TypeError ( 'x is not an array' )\n", "title": "", "metadata": ""}
{"_id": "546c64cfb31bfc56cb18dc402a692f36", "text": "def get_combined_size ( tiles ) : # TODO: Refactor calculating layout to avoid repetition. columns , rows = calc_columns_rows ( len ( tiles ) ) tile_size = tiles [ 0 ] . image . size return ( tile_size [ 0 ] * columns , tile_size [ 1 ] * rows )\n", "title": "", "metadata": ""}
{"_id": "42c50a0477165d2b3e5b0432f600f29e", "text": "def do_help ( self , arg ) : print ( self . response_prompt , file = self . stdout ) return cmd . Cmd . do_help ( self , arg )\n", "title": "", "metadata": ""}
{"_id": "d11f6f98c85315ff7d1434dcb91aa32f", "text": "def read ( self , count = 0 ) : return self . f . read ( count ) if count > 0 else self . f . read ( )\n", "title": "", "metadata": ""}
{"_id": "4e16dc34246db65d92439830304389f7", "text": "def strip_codes ( s : Any ) -> str : return codepat . sub ( '' , str ( s ) if ( s or ( s == 0 ) ) else '' )\n", "title": "", "metadata": ""}
{"_id": "239257c4378eacfc2e52a41964d827c0", "text": "def Date ( value ) : from datetime import datetime try : return datetime ( * reversed ( [ int ( val ) for val in value . split ( '/' ) ] ) ) except Exception as err : raise argparse . ArgumentTypeError ( \"invalid date '%s'\" % value )\n", "title": "", "metadata": ""}
{"_id": "f4f71f2b4e0ae22fa428809bff778c1b", "text": "def has_multiline_items ( maybe_list : Optional [ Sequence [ str ] ] ) : return maybe_list and any ( is_multiline ( item ) for item in maybe_list )\n", "title": "", "metadata": ""}
{"_id": "85d0ceb73eaa82eb6cc08c3432d907e3", "text": "def to_comment ( value ) : if value is None : return if len ( value . split ( '\\n' ) ) == 1 : return \"* \" + value else : return '\\n' . join ( [ ' * ' + l for l in value . split ( '\\n' ) [ : - 1 ] ] )\n", "title": "", "metadata": ""}
{"_id": "71e557aaec183ab39aaac9562f2b6911", "text": "def fillna ( series_or_arr , missing_value = 0.0 ) : if pandas . notnull ( missing_value ) : if isinstance ( series_or_arr , ( numpy . ndarray ) ) : series_or_arr [ numpy . isnan ( series_or_arr ) ] = missing_value else : series_or_arr . fillna ( missing_value , inplace = True ) return series_or_arr\n", "title": "", "metadata": ""}
{"_id": "124a89f3d45f4ca426c174e5bb152ea2", "text": "def page_guiref ( arg_s = None ) : from IPython . core import page page . page ( gui_reference , auto_html = True )\n", "title": "", "metadata": ""}
{"_id": "55451f94267e768fd4830ab1ca826d28", "text": "def prevmonday ( num ) : today = get_today ( ) lastmonday = today - timedelta ( days = today . weekday ( ) , weeks = num ) return lastmonday\n", "title": "", "metadata": ""}
{"_id": "fa6dd355c23efa0b1e52d2c56f12f092", "text": "def url_fix_common_typos ( url ) : if url . startswith ( \"http//\" ) : url = \"http://\" + url [ 6 : ] elif url . startswith ( \"https//\" ) : url = \"https://\" + url [ 7 : ] return url\n", "title": "", "metadata": ""}
{"_id": "13a5b0ca0b306e946c8b92cd4522d8f9", "text": "def std_datestr ( self , datestr ) : return date . strftime ( self . str2date ( datestr ) , self . std_dateformat )\n", "title": "", "metadata": ""}
{"_id": "202971f238be9db9137abf07b7ca5d05", "text": "def ReadManyFromPath ( filepath ) : with io . open ( filepath , mode = \"r\" , encoding = \"utf-8\" ) as filedesc : return ReadManyFromFile ( filedesc )\n", "title": "", "metadata": ""}
{"_id": "453a3e729ea4f8da4880f50cf5671cba", "text": "def in_transaction ( self ) : if not hasattr ( self . local , 'tx' ) : return False return len ( self . local . tx ) > 0\n", "title": "", "metadata": ""}
{"_id": "bc429e8a30d1f535cf24c82aa43031f6", "text": "def contextMenuEvent ( self , event ) : self . update_menu ( ) self . menu . popup ( event . globalPos ( ) )\n", "title": "", "metadata": ""}
{"_id": "6d0a5ec06d5df57d830abe991ce872be", "text": "def entropy ( string ) : p , lns = Counter ( string ) , float ( len ( string ) ) return - sum ( count / lns * math . log ( count / lns , 2 ) for count in p . values ( ) )\n", "title": "", "metadata": ""}
{"_id": "816206f5872454b240ad53e9f05f1a86", "text": "def is_readable_dir ( path ) : return os . path . isdir ( path ) and os . access ( path , os . R_OK ) and os . access ( path , os . X_OK )\n", "title": "", "metadata": ""}
{"_id": "36befbc1164d3c80bfb0625f49f19819", "text": "def find_if_expression_as_statement ( node ) : return ( isinstance ( node , ast . Expr ) and isinstance ( node . value , ast . IfExp ) )\n", "title": "", "metadata": ""}
{"_id": "2fbd77972c7048e71ad842d01d1fcb71", "text": "def load ( raw_bytes ) : try : if not isinstance ( raw_bytes , string_type ) : raw_bytes = raw_bytes . decode ( ) return json . loads ( raw_bytes ) except ValueError as e : raise SerializationException ( str ( e ) )\n", "title": "", "metadata": ""}
{"_id": "dcee066af4452636db4d6949fecd3e2b", "text": "def mark ( self , lineno , count = 1 ) : self . sourcelines [ lineno ] = self . sourcelines . get ( lineno , 0 ) + count\n", "title": "", "metadata": ""}
{"_id": "658c693fd07e17d3fe7f3ab8a2da58ac", "text": "def sql ( self , sql : str , * qmark_params , * * named_params ) : statement = SingleSqlStatement ( sql ) return self . statement ( statement ) . execute ( * qmark_params , * * named_params )\n", "title": "", "metadata": ""}
{"_id": "50416c8accda270f35a1fd973cb0c6dc", "text": "def flattened_nested_key_indices ( nested_dict ) : outer_keys , inner_keys = collect_nested_keys ( nested_dict ) combined_keys = list ( sorted ( set ( outer_keys + inner_keys ) ) ) return { k : i for ( i , k ) in enumerate ( combined_keys ) }\n", "title": "", "metadata": ""}
{"_id": "b3d14ed0e5685302f5287c5a486ed748", "text": "def print_matrix ( X , decimals = 1 ) : for row in np . round ( X , decimals = decimals ) : print ( row )\n", "title": "", "metadata": ""}
{"_id": "2624bdc4c5980867b75c0e6a79a4a0f6", "text": "def get_scalar_product ( self , other ) : return self . x * other . x + self . y * other . y\n", "title": "", "metadata": ""}
{"_id": "793e6411488a2a99b08ddc0dfd2787d5", "text": "def is_alive ( self ) : response = self . get_monitoring_heartbeat ( ) if response . status_code == 200 and response . content == 'alive' : return True return False\n", "title": "", "metadata": ""}
{"_id": "957c1d81794876740958dfe06a4da777", "text": "def items ( self , section_name ) : return [ ( k , v ) for k , v in super ( GitConfigParser , self ) . items ( section_name ) if k != '__name__' ]\n", "title": "", "metadata": ""}
{"_id": "1957d429c57b0a1036de8efe7d7205c0", "text": "def from_file ( cls , file_path , validate = True ) : return xmlmap . load_xmlobject_from_file ( file_path , xmlclass = cls , validate = validate )\n", "title": "", "metadata": ""}
{"_id": "99e6bd937d5da3ed49cf9bb46095839e", "text": "def interface_direct_class ( data_class ) : if data_class in ASSET : interface = AssetsInterface ( ) elif data_class in PARTY : interface = PartiesInterface ( ) elif data_class in BOOK : interface = BooksInterface ( ) elif data_class in CORPORATE_ACTION : interface = CorporateActionsInterface ( ) elif data_class in MARKET_DATA : interface = MarketDataInterface ( ) elif data_class in TRANSACTION : interface = TransactionsInterface ( ) else : interface = AssetManagersInterface ( ) return interface\n", "title": "", "metadata": ""}
{"_id": "50ec89c1a9a8d2eac425ba51f64e1e4f", "text": "def load_preprocess_images ( image_paths : List [ str ] , image_size : tuple ) -> List [ np . ndarray ] : image_size = image_size [ 1 : ] # we do not need the number of channels images = [ ] for image_path in image_paths : images . append ( load_preprocess_image ( image_path , image_size ) ) return images\n", "title": "", "metadata": ""}
{"_id": "bc20240cc87e8ef67d95343889a4f5ce", "text": "def get_args ( method_or_func ) : try : # Python 3.0+ args = list ( inspect . signature ( method_or_func ) . parameters . keys ( ) ) except AttributeError : # Python 2.7 args = inspect . getargspec ( method_or_func ) . args return args\n", "title": "", "metadata": ""}
{"_id": "30a2d830e66f364c04e0cdbaa1012d43", "text": "def sem ( inlist ) : sd = stdev ( inlist ) n = len ( inlist ) return sd / math . sqrt ( n )\n", "title": "", "metadata": ""}
{"_id": "de41ada6a616a7686d1a810852e1145e", "text": "def calculate_top_margin ( self ) : self . border_top = 5 if self . show_graph_title : self . border_top += self . title_font_size self . border_top += 5 if self . show_graph_subtitle : self . border_top += self . subtitle_font_size\n", "title": "", "metadata": ""}
{"_id": "e1729d7acd916c6e01d3afff78652354", "text": "def save_hdf ( self , filename , path = '' ) : self . dataframe . to_hdf ( filename , '{}/df' . format ( path ) )\n", "title": "", "metadata": ""}
{"_id": "054b2ee8e093010cbf4bcd79ae7db63e", "text": "def set_limits ( self , min_ = None , max_ = None ) : self . _min , self . _max = min_ , max_\n", "title": "", "metadata": ""}
{"_id": "4bd72326749f0ccebfd81203bba235ac", "text": "def _or ( ctx , * logical ) : for arg in logical : if conversions . to_boolean ( arg , ctx ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "d61e73b3a14e0274bf4dee1529e74093", "text": "def c_array ( ctype , values ) : if isinstance ( values , np . ndarray ) and values . dtype . itemsize == ctypes . sizeof ( ctype ) : return ( ctype * len ( values ) ) . from_buffer_copy ( values ) return ( ctype * len ( values ) ) ( * values )\n", "title": "", "metadata": ""}
{"_id": "696b8635c8943b6dacdc0c6f93707fd6", "text": "def run ( args ) : raw_arguments = get_arguments ( args [ 1 : ] ) process_arguments ( raw_arguments ) walk . run ( ) return True\n", "title": "", "metadata": ""}
{"_id": "975160c50b6ca4f34e856b6678f71529", "text": "def is_value_type_valid_for_exact_conditions ( self , value ) : # No need to check for bool since bool is a subclass of int if isinstance ( value , string_types ) or isinstance ( value , ( numbers . Integral , float ) ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "849067b61da26ea505ae8f7a4975d6fc", "text": "def _replace ( self , data , replacements ) : for find , repl in replacements : data = data . replace ( find , repl ) return data\n", "title": "", "metadata": ""}
{"_id": "41c71c06b7a44b647d60023dfb30a6e6", "text": "def conv_dict ( self ) : return dict ( integer = self . integer , real = self . real , no_type = self . no_type )\n", "title": "", "metadata": ""}
{"_id": "ac31e2917a70ae4d3db17221f0904fd5", "text": "def _size_36 ( ) : from shutil import get_terminal_size dim = get_terminal_size ( ) if isinstance ( dim , list ) : return dim [ 0 ] , dim [ 1 ] return dim . lines , dim . columns\n", "title": "", "metadata": ""}
{"_id": "8cbcc9208445b61cbbfa5317760e1df0", "text": "def confirm ( question , default = True ) : valid = { \"\" : default , \"yes\" : True , \"y\" : True , \"no\" : False , \"n\" : False } while 1 : choice = input ( question + ( \" [Y/n] \" if default else \" [y/N] \" ) ) . lower ( ) if choice in valid : return valid [ choice ] print ( \"Please respond with 'y' or 'n' \" )\n", "title": "", "metadata": ""}
{"_id": "fb82671dba92f9e3fe8c1eecdaefcd81", "text": "def standard_deviation ( numbers ) : numbers = list ( numbers ) if not numbers : return 0 mean = sum ( numbers ) / len ( numbers ) return ( sum ( ( n - mean ) ** 2 for n in numbers ) / len ( numbers ) ) ** .5\n", "title": "", "metadata": ""}
{"_id": "2e994f764406fb39ffc7e34c3f16eec1", "text": "def afx_small ( ) : hparams = transformer . transformer_tpu ( ) hparams . filter_size = 1024 hparams . num_heads = 4 hparams . num_hidden_layers = 3 hparams . batch_size = 512 return hparams\n", "title": "", "metadata": ""}
{"_id": "6b4b1b38231cc972beaa35eed4232b8e", "text": "def get_deprecation_reason ( node : Union [ EnumValueDefinitionNode , FieldDefinitionNode ] ) -> Optional [ str ] : from . . execution import get_directive_values deprecated = get_directive_values ( GraphQLDeprecatedDirective , node ) return deprecated [ \"reason\" ] if deprecated else None\n", "title": "", "metadata": ""}
{"_id": "e608bf7846a87cbd870b061b11c5daab", "text": "def _validate_simple ( email ) : name , address = parseaddr ( email ) if not re . match ( '[^@]+@[^@]+\\.[^@]+' , address ) : raise ValueError ( 'Invalid email :{email}' . format ( email = email ) ) return address\n", "title": "", "metadata": ""}
{"_id": "ac6206f33e45dcb75a108bcdafa53584", "text": "def is_float_array ( l ) : if isinstance ( l , np . ndarray ) : if l . dtype . kind == 'f' : return True return False\n", "title": "", "metadata": ""}
{"_id": "13f184a1ef42ea641357250b4ca94e38", "text": "def wait_and_join ( self , task ) : while not task . has_started : time . sleep ( self . _polling_time ) task . thread . join ( )\n", "title": "", "metadata": ""}
{"_id": "f77b053a8d0b4a2552b5b21d498b6e9e", "text": "def _request_limit_reached ( exception ) : return isinstance ( exception , requests . HTTPError ) and exception . response . status_code == requests . status_codes . codes . TOO_MANY_REQUESTS\n", "title": "", "metadata": ""}
{"_id": "e788f12b00a290eb46494bd9ecb2c82c", "text": "def _shutdown_proc ( p , timeout ) : freq = 10 # how often to check per second for _ in range ( 1 + timeout * freq ) : ret = p . poll ( ) if ret is not None : logging . info ( \"Shutdown gracefully.\" ) return ret time . sleep ( 1 / freq ) logging . warning ( \"Killing the process.\" ) p . kill ( ) return p . wait ( )\n", "title": "", "metadata": ""}
{"_id": "3e2d0b053894b10605f9af9ca92a04d3", "text": "def auth_request ( self , url , headers , body ) : return self . req . post ( url , headers , body = body )\n", "title": "", "metadata": ""}
{"_id": "a5cff63c6338fc582e4fb0d11066487d", "text": "def write_wav ( path , samples , sr = 16000 ) : max_value = np . abs ( np . iinfo ( np . int16 ) . min ) data = ( samples * max_value ) . astype ( np . int16 ) scipy . io . wavfile . write ( path , sr , data )\n", "title": "", "metadata": ""}
{"_id": "ec51e29ab42ff98a4d2f1691cc64adef", "text": "def has_changed ( filename ) : key = os . path . abspath ( filename ) mtime = get_mtime ( key ) if key not in _mtime_cache : _mtime_cache [ key ] = mtime return True return mtime > _mtime_cache [ key ]\n", "title": "", "metadata": ""}
{"_id": "e61ca70e6d5576c80c92d61297518672", "text": "def batch ( items , size ) : return [ items [ x : x + size ] for x in xrange ( 0 , len ( items ) , size ) ]\n", "title": "", "metadata": ""}
{"_id": "b87accac727dfe5d65caca624ba7f883", "text": "def clear ( self ) : self . adj . clear ( ) self . node . clear ( ) self . graph . clear ( )\n", "title": "", "metadata": ""}
{"_id": "a81d8386db7cdef46762f6a545a89791", "text": "def index ( self , value ) : for i in xrange ( len ( self . parentNode ) ) : if getattr ( self . parentNode [ i ] , self . Name ) == value : return i raise ValueError ( value )\n", "title": "", "metadata": ""}
{"_id": "7114eb50ad99aa1873a08edaf3bbdf58", "text": "def as_tuple ( self , value ) : if isinstance ( value , list ) : value = tuple ( value ) return value\n", "title": "", "metadata": ""}
{"_id": "83614218a2e146df9a29988f7ed30a65", "text": "def glob_by_extensions ( directory , extensions ) : directorycheck ( directory ) files = [ ] xt = files . extend for ex in extensions : xt ( glob . glob ( '{0}/*.{1}' . format ( directory , ex ) ) ) return files\n", "title": "", "metadata": ""}
{"_id": "d7d3abb29f4d0630b01286de422a00a5", "text": "def vector_distance ( a , b ) : a = np . array ( a ) b = np . array ( b ) return np . linalg . norm ( a - b )\n", "title": "", "metadata": ""}
{"_id": "0212f27099b61f7ce664f17ec55b9363", "text": "def to_bipartite_matrix ( A ) : m , n = A . shape return four_blocks ( zeros ( m , m ) , A , A . T , zeros ( n , n ) )\n", "title": "", "metadata": ""}
{"_id": "6ad3d1b9febe693cf1f540d354d76253", "text": "def getTopRight ( self ) : return ( float ( self . get_cx ( ) ) + float ( self . get_rx ( ) ) , float ( self . get_cy ( ) ) + float ( self . get_ry ( ) ) )\n", "title": "", "metadata": ""}
{"_id": "57397a034fb8c136f77d570eefd79e76", "text": "def check_key ( self , key : str ) -> bool : keys = self . get_keys ( ) return key in keys\n", "title": "", "metadata": ""}
{"_id": "4d85adf10c30cbc1d00e7188201f53b9", "text": "def from_rotation_vector ( rot ) : rot = np . array ( rot , copy = False ) quats = np . zeros ( rot . shape [ : - 1 ] + ( 4 , ) ) quats [ ... , 1 : ] = rot [ ... ] / 2 quats = as_quat_array ( quats ) return np . exp ( quats )\n", "title": "", "metadata": ""}
{"_id": "d3d829d6417e36191cbbdf35bd419ecb", "text": "def screen_to_client ( self , x , y ) : return tuple ( win32 . ScreenToClient ( self . get_handle ( ) , ( x , y ) ) )\n", "title": "", "metadata": ""}
{"_id": "56624676b574d391628fb7ec615ef155", "text": "def merge ( self , other ) : newstart = min ( self . _start , other . start ) newend = max ( self . _end , other . end ) return Range ( newstart , newend )\n", "title": "", "metadata": ""}
{"_id": "5e17b2740ddfaf0b2b360af26df54110", "text": "def skip_connection_distance ( a , b ) : if a [ 2 ] != b [ 2 ] : return 1.0 len_a = abs ( a [ 1 ] - a [ 0 ] ) len_b = abs ( b [ 1 ] - b [ 0 ] ) return ( abs ( a [ 0 ] - b [ 0 ] ) + abs ( len_a - len_b ) ) / ( max ( a [ 0 ] , b [ 0 ] ) + max ( len_a , len_b ) )\n", "title": "", "metadata": ""}
{"_id": "531c65b1aecad6291c442cf2507de057", "text": "def sorted_index ( values , x ) : i = bisect_left ( values , x ) j = bisect_right ( values , x ) return values [ i : j ] . index ( x ) + i\n", "title": "", "metadata": ""}
{"_id": "b0751a3f04b2973ef3b94a1154448f91", "text": "def mimetype ( self ) : return ( self . environment . mimetypes . get ( self . format_extension ) or self . compiler_mimetype or 'application/octet-stream' )\n", "title": "", "metadata": ""}
{"_id": "eab506205299f7fe9e8287f8010815d5", "text": "def _jit_pairwise_distances ( pos1 , pos2 ) : n1 = pos1 . shape [ 0 ] n2 = pos2 . shape [ 0 ] D = np . empty ( ( n1 , n2 ) ) for i in range ( n1 ) : for j in range ( n2 ) : D [ i , j ] = np . sqrt ( ( ( pos1 [ i ] - pos2 [ j ] ) ** 2 ) . sum ( ) ) return D\n", "title": "", "metadata": ""}
{"_id": "e1a9191e9a44759516ce605406596fbc", "text": "def get_substring_idxs ( substr , string ) : return [ match . start ( ) for match in re . finditer ( substr , string ) ]\n", "title": "", "metadata": ""}
{"_id": "e25f51c0d7cde561ad096dfca236c6c6", "text": "def _close_websocket ( self ) : close_method = getattr ( self . _websocket , \"close\" , None ) if callable ( close_method ) : asyncio . ensure_future ( close_method ( ) , loop = self . _event_loop ) self . _websocket = None self . _dispatch_event ( event = \"close\" )\n", "title": "", "metadata": ""}
{"_id": "833f0a11c5d1afdc5fd63180b84d970a", "text": "def unique ( transactions ) : seen = set ( ) # TODO: Handle comments return [ x for x in transactions if not ( x in seen or seen . add ( x ) ) ]\n", "title": "", "metadata": ""}
{"_id": "384360f83124f5188511b60a6608465b", "text": "def safe_dump_all ( documents , stream = None , * * kwds ) : return dump_all ( documents , stream , Dumper = SafeDumper , * * kwds )\n", "title": "", "metadata": ""}
{"_id": "3107942e8559b679bf76c78b01defba6", "text": "def _normalize_abmn ( abmn ) : abmn_2d = np . atleast_2d ( abmn ) abmn_normalized = np . hstack ( ( np . sort ( abmn_2d [ : , 0 : 2 ] , axis = 1 ) , np . sort ( abmn_2d [ : , 2 : 4 ] , axis = 1 ) , ) ) return abmn_normalized\n", "title": "", "metadata": ""}
{"_id": "afaf0aefb351a682733d065667096c03", "text": "def sinwave ( n = 4 , inc = .25 ) : x = np . arange ( - n , n , inc ) y = np . arange ( - n , n , inc ) X , Y = np . meshgrid ( x , y ) R = np . sqrt ( X ** 2 + Y ** 2 ) Z = np . sin ( R ) / ( .5 * R ) return pd . DataFrame ( Z , index = x , columns = y )\n", "title": "", "metadata": ""}
{"_id": "c928f03740afae14f4082c162bc228fc", "text": "def get_index_nested ( x , i ) : for ind in range ( len ( x ) ) : if i == x [ ind ] : return ind return - 1\n", "title": "", "metadata": ""}
{"_id": "59926283ff20ac9b4e70c374e094cd0b", "text": "def _guess_extract_method ( fname ) : for method , extensions in _EXTRACTION_METHOD_TO_EXTS : for ext in extensions : if fname . endswith ( ext ) : return method return ExtractMethod . NO_EXTRACT\n", "title": "", "metadata": ""}
{"_id": "13c36782a6f8b2476a35c6e731f70173", "text": "def _join ( verb ) : data = pd . merge ( verb . x , verb . y , * * verb . kwargs ) # Preserve x groups if isinstance ( verb . x , GroupedDataFrame ) : data . plydata_groups = list ( verb . x . plydata_groups ) return data\n", "title": "", "metadata": ""}
{"_id": "5f773cbadddc887917427c424ac1e858", "text": "def remove_node ( self , node ) : if _debug : Network . _debug ( \"remove_node %r\" , node ) self . nodes . remove ( node ) node . lan = None\n", "title": "", "metadata": ""}
{"_id": "4a9264659fd4456472dba5f0856ed797", "text": "def filter_useless_pass ( source ) : try : marked_lines = frozenset ( useless_pass_line_numbers ( source ) ) except ( SyntaxError , tokenize . TokenError ) : marked_lines = frozenset ( ) sio = io . StringIO ( source ) for line_number , line in enumerate ( sio . readlines ( ) , start = 1 ) : if line_number not in marked_lines : yield line\n", "title": "", "metadata": ""}
{"_id": "646eb3a6ac78647e69b441eef9460a01", "text": "def normalize_pattern ( pattern ) : if not ( pattern . startswith ( 'RE:' ) or pattern . startswith ( '!RE:' ) ) : pattern = _slashes . sub ( '/' , pattern ) if len ( pattern ) > 1 : pattern = pattern . rstrip ( '/' ) return pattern\n", "title": "", "metadata": ""}
{"_id": "f321fd32cd1a998948131e227a5095e2", "text": "def each_img ( img_dir ) : for fname in utils . each_img ( img_dir ) : fname = os . path . join ( img_dir , fname ) yield cv . imread ( fname ) , fname\n", "title": "", "metadata": ""}
{"_id": "e90923482e8df5345a4b8d4cb1f1cbeb", "text": "def _stream_docker_logs ( self ) : thread = threading . Thread ( target = self . _stderr_stream_worker ) thread . start ( ) for line in self . docker_client . logs ( self . container , stdout = True , stderr = False , stream = True ) : sys . stdout . write ( line ) thread . join ( )\n", "title": "", "metadata": ""}
{"_id": "3b7aa1e9277b3c8a432de8249c4b8b2b", "text": "def replace_keys ( record : Mapping , key_map : Mapping ) -> dict : return { key_map [ k ] : v for k , v in record . items ( ) if k in key_map }\n", "title": "", "metadata": ""}
{"_id": "a9acbe1479523db7a17383ea0de84e36", "text": "def argmax ( l , f = None ) : if f : l = [ f ( i ) for i in l ] return max ( enumerate ( l ) , key = lambda x : x [ 1 ] ) [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "77231b076cd1df3355de02c219039481", "text": "def _check_elements_equal ( lst ) : assert isinstance ( lst , list ) , \"Input value must be a list.\" return not lst or lst . count ( lst [ 0 ] ) == len ( lst )\n", "title": "", "metadata": ""}
{"_id": "143e6b75f2b178d9241a92e156617769", "text": "def get_encoding ( binary ) : try : from chardet import detect except ImportError : LOGGER . error ( \"Please install the 'chardet' module\" ) sys . exit ( 1 ) encoding = detect ( binary ) . get ( 'encoding' ) return 'iso-8859-1' if encoding == 'CP949' else encoding\n", "title": "", "metadata": ""}
{"_id": "a24f5d45efafd99be88d10bfcc78028a", "text": "def parse ( text , showToc = True ) : p = Parser ( show_toc = showToc ) return p . parse ( text )\n", "title": "", "metadata": ""}
{"_id": "5d98046121ad7f9c5d5284e28e59681e", "text": "def output_dir ( self , * args ) -> str : return os . path . join ( self . project_dir , 'output' , * args )\n", "title": "", "metadata": ""}
{"_id": "8432b88715698d9eb85af55299ec7a83", "text": "def do_forceescape ( value ) : if hasattr ( value , '__html__' ) : value = value . __html__ ( ) return escape ( text_type ( value ) )\n", "title": "", "metadata": ""}
{"_id": "e2236b6f79bdb228b48d4731e110d924", "text": "def find_editor ( ) -> str : editor = os . environ . get ( 'EDITOR' ) if not editor : if sys . platform [ : 3 ] == 'win' : editor = 'notepad' else : # Favor command-line editors first so we don't leave the terminal to edit for editor in [ 'vim' , 'vi' , 'emacs' , 'nano' , 'pico' , 'gedit' , 'kate' , 'subl' , 'geany' , 'atom' ] : if which ( editor ) : break return editor\n", "title": "", "metadata": ""}
{"_id": "52dfc22ae10fdcd4857f5232f14f7113", "text": "def identify_request ( request : RequestType ) -> bool : # noinspection PyBroadException try : data = json . loads ( decode_if_bytes ( request . body ) ) if \"@context\" in data : return True except Exception : pass return False\n", "title": "", "metadata": ""}
{"_id": "0c930aa7333e2281c57e56fdc53af395", "text": "def delete_entry ( self , key ) : pipe = self . client . pipeline ( ) pipe . srem ( self . keys_container , key ) pipe . delete ( key ) pipe . execute ( )\n", "title": "", "metadata": ""}
{"_id": "9a503050ef44e1dc2e814253d8da1e2b", "text": "def dumps ( obj , indent = None , default = None , sort_keys = False , * * kw ) : return YAMLEncoder ( indent = indent , default = default , sort_keys = sort_keys , * * kw ) . encode ( obj )\n", "title": "", "metadata": ""}
{"_id": "b72ae2a1d0f40a9bd46b33fab570b45b", "text": "def get_object_attrs ( obj ) : attrs = [ k for k in dir ( obj ) if not k . startswith ( '__' ) ] if not attrs : attrs = dir ( obj ) return attrs\n", "title": "", "metadata": ""}
{"_id": "d4238d39a27319706ea7f9a44c498202", "text": "def __convert_none_to_zero ( self , ts ) : if not ts : return ts ts_clean = [ val if val else 0 for val in ts ] return ts_clean\n", "title": "", "metadata": ""}
{"_id": "78e4f4a57caaffa63676325aa8463bf0", "text": "def acquire_nix ( lock_file ) : # pragma: no cover fd = os . open ( lock_file , OPEN_MODE ) try : fcntl . flock ( fd , fcntl . LOCK_EX | fcntl . LOCK_NB ) except ( IOError , OSError ) : os . close ( fd ) else : return fd\n", "title": "", "metadata": ""}
{"_id": "d7083b096ac91f4107bf1210aaff963d", "text": "def stft_magnitude ( signal , fft_length , hop_length = None , window_length = None ) : frames = frame ( signal , window_length , hop_length ) # Apply frame window to each frame. We use a periodic Hann (cosine of period # window_length) instead of the symmetric Hann of np.hanning (period # window_length-1). window = periodic_hann ( window_length ) windowed_frames = frames * window return np . abs ( np . fft . rfft ( windowed_frames , int ( fft_length ) ) )\n", "title": "", "metadata": ""}
{"_id": "2a3623569f8ecfd5da9d070af92f211a", "text": "def parsePoint ( line ) : values = [ float ( s ) for s in line . split ( ' ' ) ] if values [ 0 ] == - 1 : # Convert -1 labels to 0 for MLlib values [ 0 ] = 0 return LabeledPoint ( values [ 0 ] , values [ 1 : ] )\n", "title": "", "metadata": ""}
{"_id": "55602cac7a991bc9119f543b3d4616b5", "text": "def device_state ( device_id ) : if device_id not in devices : return jsonify ( success = False ) return jsonify ( state = devices [ device_id ] . state )\n", "title": "", "metadata": ""}
{"_id": "e4669e4e560d58936f22e29d1096aba8", "text": "def create_pie_chart ( self , snapshot , filename = '' ) : try : from pylab import figure , title , pie , axes , savefig from pylab import sum as pylab_sum except ImportError : return self . nopylab_msg % ( \"pie_chart\" ) # Don't bother illustrating a pie without pieces. if not snapshot . tracked_total : return '' classlist = [ ] sizelist = [ ] for k , v in list ( snapshot . classes . items ( ) ) : if v [ 'pct' ] > 3.0 : classlist . append ( k ) sizelist . append ( v [ 'sum' ] ) sizelist . insert ( 0 , snapshot . asizeof_total - pylab_sum ( sizelist ) ) classlist . insert ( 0 , 'Other' ) #sizelist = [x*0.01 for x in sizelist] title ( \"Snapshot (%s) Memory Distribution\" % ( snapshot . desc ) ) figure ( figsize = ( 8 , 8 ) ) axes ( [ 0.1 , 0.1 , 0.8 , 0.8 ] ) pie ( sizelist , labels = classlist ) savefig ( filename , dpi = 50 ) return self . chart_tag % ( self . relative_path ( filename ) )\n", "title": "", "metadata": ""}
{"_id": "5efd3d6018796d4f0a7634d4ae801ae8", "text": "def to_dict ( cls ) : return dict ( ( item . name , item . number ) for item in iter ( cls ) )\n", "title": "", "metadata": ""}
{"_id": "5e34ef6ab8ca62cc852eb8797540320d", "text": "def _config_section ( config , section ) : path = os . path . join ( config . get ( 'config_path' ) , config . get ( 'config_file' ) ) conf = _config_ini ( path ) return conf . get ( section )\n", "title": "", "metadata": ""}
{"_id": "a1af47f996d5b736649d2e57a5c3951a", "text": "def load_object_at_path ( path ) : with open ( path , 'r' ) as f : data = _deserialize ( f . read ( ) ) return aadict ( data )\n", "title": "", "metadata": ""}
{"_id": "21cbf6d6b41ded1464f8e4763cdeffb6", "text": "def validate ( self ) : validator = Draft4Validator ( self . SCHEMA ) if not validator . is_valid ( self . config ) : for err in validator . iter_errors ( self . config ) : LOGGER . error ( str ( err . message ) ) validator . validate ( self . config )\n", "title": "", "metadata": ""}
{"_id": "aa1df2136ec8d090fe8dec43821315b2", "text": "def _add_params_docstring ( params ) : p_string = \"\\nAccepts the following paramters: \\n\" for param in params : p_string += \"name: %s, required: %s, description: %s \\n\" % ( param [ 'name' ] , param [ 'required' ] , param [ 'description' ] ) return p_string\n", "title": "", "metadata": ""}
{"_id": "7ace02cecce8e211a88a3ce3ef2453cd", "text": "def branches ( ) : # type: () -> List[str] out = shell . run ( 'git branch' , capture = True , never_pretend = True ) . stdout . strip ( ) return [ x . strip ( '* \\t\\n' ) for x in out . splitlines ( ) ]\n", "title": "", "metadata": ""}
{"_id": "b12685de748e91e25a0095ef9f5317ff", "text": "def map ( cls , iterable , func , * a , * * kw ) : return cls ( func ( x , * a , * * kw ) for x in iterable )\n", "title": "", "metadata": ""}
{"_id": "fa3a67b43997c3cb8fc9f24be7fd9d3f", "text": "def mouse_get_pos ( ) : p = POINT ( ) AUTO_IT . AU3_MouseGetPos ( ctypes . byref ( p ) ) return p . x , p . y\n", "title": "", "metadata": ""}
{"_id": "9a9d4882d8944a221c0d3186595e37a5", "text": "def selecttrue ( table , field , complement = False ) : return select ( table , field , lambda v : bool ( v ) , complement = complement )\n", "title": "", "metadata": ""}
{"_id": "66bdc3c4b02516d2b1d7d44eae513e34", "text": "def _draw_lines_internal ( self , coords , colour , bg ) : for i , ( x , y ) in enumerate ( coords ) : if i == 0 : self . _screen . move ( x , y ) else : self . _screen . draw ( x , y , colour = colour , bg = bg , thin = True )\n", "title": "", "metadata": ""}
{"_id": "c2dfc29205574ebaecf4ea8aa0bb1cf7", "text": "def _removeTags ( tags , objects ) : for t in tags : for o in objects : o . tags . remove ( t ) return True\n", "title": "", "metadata": ""}
{"_id": "af5b4d7e409d142a8d00f116a151853f", "text": "def datetime64_to_datetime ( dt ) : dt64 = np . datetime64 ( dt ) ts = ( dt64 - np . datetime64 ( '1970-01-01T00:00:00' ) ) / np . timedelta64 ( 1 , 's' ) return datetime . datetime . utcfromtimestamp ( ts )\n", "title": "", "metadata": ""}
{"_id": "757f135a90d2ff50c123ef3ec93bd25f", "text": "def __reversed__ ( self ) : _dict = self . _dict return iter ( ( key , _dict [ key ] ) for key in reversed ( self . _list ) )\n", "title": "", "metadata": ""}
{"_id": "8863c41bc1588d6d7eeaf5b8833c49f2", "text": "def get_unique_indices ( df , axis = 1 ) : return dict ( zip ( df . columns . names , dif . columns . levels ) )\n", "title": "", "metadata": ""}
{"_id": "1c9af0df956ff9e22252a2c48075fed1", "text": "def copy ( string , * * kwargs ) : window = Tk ( ) window . withdraw ( ) window . clipboard_clear ( ) window . clipboard_append ( string ) window . destroy ( ) return\n", "title": "", "metadata": ""}
{"_id": "8ede12f66c24dcd714d16154892538f1", "text": "def register_logging_factories ( loader ) : loader . register_factory ( logging . Logger , LoggerFactory ) loader . register_factory ( logging . Handler , LoggingHandlerFactory )\n", "title": "", "metadata": ""}
{"_id": "67ab6da2c02858de2efe099410759a04", "text": "def process_literal_param ( self , value : Optional [ List [ int ] ] , dialect : Dialect ) -> str : retval = self . _intlist_to_dbstr ( value ) return retval\n", "title": "", "metadata": ""}
{"_id": "ca252a51f07e99ffd40389d74cb0fc2a", "text": "def save_list ( key , * values ) : return json . dumps ( { key : [ _get_json ( value ) for value in values ] } )\n", "title": "", "metadata": ""}
{"_id": "4692f0eb8d72153a5defd99af61dbe1c", "text": "def check64bit ( current_system = \"python\" ) : if current_system == \"python\" : return sys . maxsize > 2147483647 elif current_system == \"os\" : import platform pm = platform . machine ( ) if pm != \"..\" and pm . endswith ( '64' ) : # recent Python (not Iron) return True else : if 'PROCESSOR_ARCHITEW6432' in os . environ : return True # 32 bit program running on 64 bit Windows try : # 64 bit Windows 64 bit program return os . environ [ 'PROCESSOR_ARCHITECTURE' ] . endswith ( '64' ) except IndexError : pass # not Windows try : # this often works in Linux return '64' in platform . architecture ( ) [ 0 ] except Exception : # is an older version of Python, assume also an older os@ # (best we can guess) return False\n", "title": "", "metadata": ""}
{"_id": "93bc7b5520778fb2cd610f4874379c9d", "text": "def c2s ( self , p = [ 0 , 0 ] ) : return ( ( p [ 0 ] - self . canvasx ( self . cx1 ) , p [ 1 ] - self . canvasy ( self . cy1 ) ) )\n", "title": "", "metadata": ""}
{"_id": "c3b41fb99832e934a90b61ce0d1bc580", "text": "def check_github ( self ) : for name , req in list ( self . reqs . items ( ) ) : req_url = req [ \"url\" ] if not req_url : continue req_url = str ( req_url ) if req_url . startswith ( \"git\" ) and \"github.com/\" not in req_url : continue if req_url . endswith ( ( \".tar.gz\" , \".tar.bz2\" , \".zip\" ) ) : continue headers = { \"content-type\" : \"application/json\" , } if self . github_api_token : headers [ \"Authorization\" ] = \"token {0}\" . format ( self . github_api_token ) try : path_parts = urlparse ( req_url ) . path . split ( \"#\" , 1 ) [ 0 ] . strip ( \"/\" ) . rstrip ( \"/\" ) . split ( \"/\" ) if len ( path_parts ) == 2 : user , repo = path_parts elif 'archive' in path_parts : # Supports URL of format: # https://github.com/django/django/archive/master.tar.gz#egg=Django # https://github.com/django/django/archive/master.zip#egg=Django user , repo = path_parts [ : 2 ] repo += '@' + path_parts [ - 1 ] . replace ( '.tar.gz' , '' ) . replace ( '.zip' , '' ) else : self . style . ERROR ( \"\\nFailed to parse %r\\n\" % ( req_url , ) ) continue except ( ValueError , IndexError ) as e : self . stdout . write ( self . style . ERROR ( \"\\nFailed to parse %r: %s\\n\" % ( req_url , e ) ) ) continue try : test_auth = requests . get ( \"https://api.github.com/django/\" , headers = headers ) . json ( ) except HTTPError as e : self . stdout . write ( \"\\n%s\\n\" % str ( e ) ) return if \"message\" in test_auth and test_auth [ \"message\" ] == \"Bad credentials\" : self . stdout . write ( self . style . ERROR ( \"\\nGithub API: Bad credentials. Aborting!\\n\" ) ) return elif \"message\" in test_auth and test_auth [ \"message\" ] . startswith ( \"API Rate Limit Exceeded\" ) : self . stdout . write ( self . style . ERROR ( \"\\nGithub API: Rate Limit Exceeded. Aborting!\\n\" ) ) return frozen_commit_sha = None if \".git\" in repo : repo_name , frozen_commit_full = repo . split ( \".git\" ) if frozen_commit_full . startswith ( \"@\" ) : frozen_commit_sha = frozen_commit_full [ 1 : ] elif \"@\" in repo : repo_name , frozen_commit_sha = repo . split ( \"@\" ) if frozen_commit_sha is None : msg = self . style . ERROR ( \"repo is not frozen\" ) if frozen_commit_sha : branch_url = \"https://api.github.com/repos/{0}/{1}/branches\" . format ( user , repo_name ) branch_data = requests . get ( branch_url , headers = headers ) . json ( ) frozen_commit_url = \"https://api.github.com/repos/{0}/{1}/commits/{2}\" . format ( user , repo_name , frozen_commit_sha ) frozen_commit_data = requests . get ( frozen_commit_url , headers = headers ) . json ( ) if \"message\" in frozen_commit_data and frozen_commit_data [ \"message\" ] == \"Not Found\" : msg = self . style . ERROR ( \"{0} not found in {1}. Repo may be private.\" . format ( frozen_commit_sha [ : 10 ] , name ) ) elif frozen_commit_data [ \"sha\" ] in [ branch [ \"commit\" ] [ \"sha\" ] for branch in branch_data ] : msg = self . style . BOLD ( \"up to date\" ) else : msg = self . style . INFO ( \"{0} is not the head of any branch\" . format ( frozen_commit_data [ \"sha\" ] [ : 10 ] ) ) if \"dist\" in req : pkg_info = \"{dist.project_name} {dist.version}\" . format ( dist = req [ \"dist\" ] ) elif frozen_commit_sha is None : pkg_info = name else : pkg_info = \"{0} {1}\" . format ( name , frozen_commit_sha [ : 10 ] ) self . stdout . write ( \"{pkg_info:40} {msg}\" . format ( pkg_info = pkg_info , msg = msg ) ) del self . reqs [ name ]\n", "title": "", "metadata": ""}
{"_id": "c212a09753f77c4a8e52c180ad653c28", "text": "def print_param_values ( self_ ) : self = self_ . self for name , val in self . param . get_param_values ( ) : print ( '%s.%s = %s' % ( self . name , name , val ) )\n", "title": "", "metadata": ""}
{"_id": "21dc9576dcc8a39d65ffdbe180b1dbf2", "text": "def __init__ ( self , operand , operator , * * args ) : # Note that it's currently not possible to set # parameters in the superclass when creating an instance, # because **args is used by this class itself. super ( UnaryOperator , self ) . __init__ ( ) self . operand = operand self . operator = operator self . args = args\n", "title": "", "metadata": ""}
{"_id": "da664164a002d3464d4c92ece127c2b6", "text": "def replace_in_list ( stringlist : Iterable [ str ] , replacedict : Dict [ str , str ] ) -> List [ str ] : newlist = [ ] for fromstring in stringlist : newlist . append ( multiple_replace ( fromstring , replacedict ) ) return newlist\n", "title": "", "metadata": ""}
{"_id": "b165a1251839325c9cd6b839550696a7", "text": "def _frombuffer ( ptr , frames , channels , dtype ) : framesize = channels * dtype . itemsize data = np . frombuffer ( ffi . buffer ( ptr , frames * framesize ) , dtype = dtype ) data . shape = - 1 , channels return data\n", "title": "", "metadata": ""}
{"_id": "6250cf4c92f2127efc54d80acdf4e2f0", "text": "def weighted_std ( values , weights ) : average = np . average ( values , weights = weights ) variance = np . average ( ( values - average ) ** 2 , weights = weights ) return np . sqrt ( variance )\n", "title": "", "metadata": ""}
{"_id": "e310a85dd946e6a54671c985bd08f4c3", "text": "def get_sql ( query ) : sql = str ( query . statement . compile ( dialect = sqlite . dialect ( ) , compile_kwargs = { \"literal_binds\" : True } ) ) return sql\n", "title": "", "metadata": ""}
{"_id": "1efc12c14aa6cbb322ca99c817422bd2", "text": "def get_width ( ) : # Get terminal size ws = struct . pack ( \"HHHH\" , 0 , 0 , 0 , 0 ) ws = fcntl . ioctl ( sys . stdout . fileno ( ) , termios . TIOCGWINSZ , ws ) lines , columns , x , y = struct . unpack ( \"HHHH\" , ws ) width = min ( columns * 39 // 40 , columns - 2 ) return width\n", "title": "", "metadata": ""}
{"_id": "811b253fb41b31336ab511b03ef57f82", "text": "def update_redirect ( self ) : page_history = Stack ( session . get ( \"page_history\" , [ ] ) ) page_history . push ( request . url ) session [ \"page_history\" ] = page_history . to_json ( )\n", "title": "", "metadata": ""}
{"_id": "7b8d20001d69f1506038411ed6d270df", "text": "def create_rot2d ( angle ) : ca = math . cos ( angle ) sa = math . sin ( angle ) return np . array ( [ [ ca , - sa ] , [ sa , ca ] ] )\n", "title": "", "metadata": ""}
{"_id": "7a5adba9d86e0dfba1650a01ae7091a8", "text": "def to_gtp ( coord ) : if coord is None : return 'pass' y , x = coord return '{}{}' . format ( _GTP_COLUMNS [ x ] , go . N - y )\n", "title": "", "metadata": ""}
{"_id": "5f50ea70be9d48956d1e5ecb6ba7b0eb", "text": "def __unixify ( self , s ) : return os . path . normpath ( s ) . replace ( os . sep , \"/\" )\n", "title": "", "metadata": ""}
{"_id": "f1c3be6cf36f961d9e69f1f12a8bae7c", "text": "def triangle_normal ( a , b , c ) : normal = np . cross ( a - c , b - c ) norm = np . linalg . norm ( normal ) return normal / norm\n", "title": "", "metadata": ""}
{"_id": "b4c504d2a6974c6851ad96622131302e", "text": "def set_user_password ( environment , parameter , password ) : username = '%s:%s' % ( environment , parameter ) return password_set ( username , password )\n", "title": "", "metadata": ""}
{"_id": "118e3bc4a41393484ed5b9e67661b40a", "text": "def restore_button_state ( self ) : self . parent . pbnNext . setEnabled ( self . next_button_state ) self . parent . pbnBack . setEnabled ( self . back_button_state )\n", "title": "", "metadata": ""}
{"_id": "7d4dcd2876d23ee0550b8cf56339e527", "text": "def on_IOError ( self , e ) : sys . stderr . write ( \"Error: %s: \\\"%s\\\"\\n\" % ( e . strerror , e . filename ) )\n", "title": "", "metadata": ""}
{"_id": "94d325315ac398ebdd74e3dc4524cf0f", "text": "def build_output ( self , fout ) : fout . write ( '\\n' . join ( [ s for s in self . out ] ) )\n", "title": "", "metadata": ""}
{"_id": "a48b1d7cd6ac93c2cde5ceba8c310c3c", "text": "def data_from_file ( file ) : fp = wave . open ( file , 'r' ) data = fp . readframes ( fp . getnframes ( ) ) channels = fp . getnchannels ( ) freq = fp . getframerate ( ) bits = fp . getsampwidth ( ) # Unpack bytes -- warning currently only tested with 16 bit wavefiles. 32 # bit not supported. data = struct . unpack ( ( '%sh' % fp . getnframes ( ) ) * channels , data ) # Only use first channel channel1 = [ ] n = 0 for d in data : if n % channels == 0 : channel1 . append ( d ) n += 1 fp . close ( ) return ( channel1 , freq , bits )\n", "title": "", "metadata": ""}
{"_id": "a0b60981dda8219d7bae34d94e74299b", "text": "def merge ( left , right , how = 'inner' , key = None , left_key = None , right_key = None , left_as = 'left' , right_as = 'right' ) : return join ( left , right , how , key , left_key , right_key , join_fn = make_union_join ( left_as , right_as ) )\n", "title": "", "metadata": ""}
{"_id": "2b4444b9cc3a8057054e89e0baf488f9", "text": "def col_rename ( df , col_name , new_col_name ) : col_list = list ( df . columns ) for index , value in enumerate ( col_list ) : if value == col_name : col_list [ index ] = new_col_name break df . columns = col_list\n", "title": "", "metadata": ""}
{"_id": "57a26b8126193a1412a1462965c87a1d", "text": "async def _thread_coro ( self , * args ) : return await self . _loop . run_in_executor ( self . _executor , self . _function , * args )\n", "title": "", "metadata": ""}
{"_id": "aa2852fa6f6e852c1be31988da25af46", "text": "def python_mime ( fn ) : @ wraps ( fn ) def python_mime_decorator ( * args , * * kwargs ) : response . content_type = \"text/x-python\" return fn ( * args , * * kwargs ) return python_mime_decorator\n", "title": "", "metadata": ""}
{"_id": "af2bfd874d6c12a736bbe5f398a2ef04", "text": "def _brief_print_list ( lst , limit = 7 ) : lst = list ( lst ) if len ( lst ) > limit : return _brief_print_list ( lst [ : limit // 2 ] , limit ) + ', ..., ' + _brief_print_list ( lst [ - limit // 2 : ] , limit ) return ', ' . join ( [ \"'%s'\" % str ( i ) for i in lst ] )\n", "title": "", "metadata": ""}
{"_id": "d23797a3a9ef3550e5812d6b26dc9ec4", "text": "def _get_local_ip ( ) : return set ( [ x [ 4 ] [ 0 ] for x in socket . getaddrinfo ( socket . gethostname ( ) , 80 , socket . AF_INET ) ] ) . pop ( )\n", "title": "", "metadata": ""}
{"_id": "99ea0f23352a22fd56d3eb7b8f344021", "text": "def remove_file_from_s3 ( awsclient , bucket , key ) : client_s3 = awsclient . get_client ( 's3' ) response = client_s3 . delete_object ( Bucket = bucket , Key = key )\n", "title": "", "metadata": ""}
{"_id": "cc52dd8b33b55e57c606fb6d181aba27", "text": "def method ( func ) : attr = abc . abstractmethod ( func ) attr . __imethod__ = True return attr\n", "title": "", "metadata": ""}
{"_id": "cbed6e4d8e1912446813985f17cd437e", "text": "def rl_get_point ( ) -> int : # pragma: no cover if rl_type == RlType . GNU : return ctypes . c_int . in_dll ( readline_lib , \"rl_point\" ) . value elif rl_type == RlType . PYREADLINE : return readline . rl . mode . l_buffer . point else : return 0\n", "title": "", "metadata": ""}
{"_id": "89fc7996be67f61abcfa16cc66cf9ad2", "text": "def get_grid_spatial_dimensions ( self , variable ) : data = self . open_dataset ( self . service ) . variables [ variable . variable ] dimensions = list ( data . dimensions ) return data . shape [ dimensions . index ( variable . x_dimension ) ] , data . shape [ dimensions . index ( variable . y_dimension ) ]\n", "title": "", "metadata": ""}
{"_id": "b9f9357c3ba80c82469f7092d83c19b6", "text": "def get_line_ending ( line ) : non_whitespace_index = len ( line . rstrip ( ) ) - len ( line ) if not non_whitespace_index : return '' else : return line [ non_whitespace_index : ]\n", "title": "", "metadata": ""}
{"_id": "fd20dd72c9c5241375ac50a0c2a0e740", "text": "def safe_quotes ( text , escape_single_quotes = False ) : if isinstance ( text , str ) : safe_text = text . replace ( '\"' , \"&quot;\" ) if escape_single_quotes : safe_text = safe_text . replace ( \"'\" , \"&#92;'\" ) return safe_text . replace ( 'True' , 'true' ) return text\n", "title": "", "metadata": ""}
{"_id": "854dac000bf6eb5da04ecdf6b8fe2500", "text": "def cudaMalloc ( count , ctype = None ) : ptr = ctypes . c_void_p ( ) status = _libcudart . cudaMalloc ( ctypes . byref ( ptr ) , count ) cudaCheckStatus ( status ) if ctype != None : ptr = ctypes . cast ( ptr , ctypes . POINTER ( ctype ) ) return ptr\n", "title": "", "metadata": ""}
{"_id": "8c35f0107cdfeedd588cdd844fa9710a", "text": "def send_dir ( self , local_path , remote_path , user = 'root' ) : self . enable_user ( user ) return self . ssh_pool . send_dir ( user , local_path , remote_path )\n", "title": "", "metadata": ""}
{"_id": "15d6a2a10719d093aee676c3bc263633", "text": "def _guess_type ( val ) : if isinstance ( val , bool ) : return \"choice\" elif isinstance ( val , int ) : return \"number\" elif isinstance ( val , float ) : return \"number\" elif isinstance ( val , str ) : return \"text\" elif hasattr ( val , 'read' ) : return \"file\" else : return \"text\"\n", "title": "", "metadata": ""}
{"_id": "f0d68b8894d5a3f5cc9ea81db30dc899", "text": "def this_week ( ) : since = TODAY + delta ( weekday = MONDAY ( - 1 ) ) until = since + delta ( weeks = 1 ) return Date ( since ) , Date ( until )\n", "title": "", "metadata": ""}
{"_id": "264111d35426ec54f4ed3f1eae81cb38", "text": "def shannon_entropy ( p ) : return - np . sum ( np . where ( p != 0 , p * np . log2 ( p ) , 0 ) )\n", "title": "", "metadata": ""}
{"_id": "14e8bd411249966b42a90c23aecb0258", "text": "def revnet_164_cifar ( ) : hparams = revnet_cifar_base ( ) hparams . bottleneck = True hparams . num_channels = [ 16 , 32 , 64 ] hparams . num_layers_per_block = [ 8 , 8 , 8 ] return hparams\n", "title": "", "metadata": ""}
{"_id": "0d6a9176831c598dbbff31cab35028e5", "text": "def specialRound ( number , rounding ) : temp = 0 if rounding == 0 : temp = number else : temp = round ( number , rounding ) if temp % 1 == 0 : return int ( temp ) else : return float ( temp )\n", "title": "", "metadata": ""}
{"_id": "b14e71600cb3f987d2f717972176f9c0", "text": "def send ( self , topic , * args , * * kwargs ) : prefix_topic = self . heroku_kafka . prefix_topic ( topic ) return super ( HerokuKafkaProducer , self ) . send ( prefix_topic , * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "76c9bb9f9242cd8b6e9732441ba31bfc", "text": "def _get_device_id ( self , bus ) : _dbus = bus . get ( SERVICE_BUS , PATH ) devices = _dbus . devices ( ) if self . device is None and self . device_id is None and len ( devices ) == 1 : return devices [ 0 ] for id in devices : self . _dev = bus . get ( SERVICE_BUS , DEVICE_PATH + \"/%s\" % id ) if self . device == self . _dev . name : return id return None\n", "title": "", "metadata": ""}
{"_id": "0b41879c44fc44c9469eeb4611b95387", "text": "def pick_unused_port ( self ) : s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) s . bind ( ( '127.0.0.1' , 0 ) ) _ , port = s . getsockname ( ) s . close ( ) return port\n", "title": "", "metadata": ""}
{"_id": "5ced689fda47d794496ce1e18f2372c1", "text": "def intToBin ( i ) : # divide in two parts (bytes) i1 = i % 256 i2 = int ( i / 256 ) # make string (little endian) return i . to_bytes ( 2 , byteorder = 'little' )\n", "title": "", "metadata": ""}
{"_id": "2da2fc78e2b79bd84e8ffe9b31d7f0cd", "text": "def to_capitalized_camel_case ( snake_case_string ) : parts = snake_case_string . split ( '_' ) return '' . join ( [ i . title ( ) for i in parts ] )\n", "title": "", "metadata": ""}
{"_id": "2a88c30390a3df2cce04acf25f71a347", "text": "def seconds_to_time ( x ) : t = int ( x * 10 ** 6 ) ms = t % 10 ** 6 t = t // 10 ** 6 s = t % 60 t = t // 60 m = t % 60 t = t // 60 h = t return time ( h , m , s , ms )\n", "title": "", "metadata": ""}
{"_id": "2a236712a330a46ee4e47ab55f934f53", "text": "def get_tri_area ( pts ) : a , b , c = pts [ 0 ] , pts [ 1 ] , pts [ 2 ] v1 = np . array ( b ) - np . array ( a ) v2 = np . array ( c ) - np . array ( a ) area_tri = abs ( sp . linalg . norm ( sp . cross ( v1 , v2 ) ) / 2 ) return area_tri\n", "title": "", "metadata": ""}
{"_id": "b4b88a4de1a6804c0330a908cef10238", "text": "def ensure_dir_exists ( directory ) : if directory and not os . path . exists ( directory ) : os . makedirs ( directory )\n", "title": "", "metadata": ""}
{"_id": "108f49fd83435c4fdc903bd5cf67470b", "text": "def check_update ( ) : logging . info ( 'Check for app updates.' ) try : update = updater . check_for_app_updates ( ) except Exception : logging . exception ( 'Check for updates failed.' ) return if update : print ( \"!!! UPDATE AVAILABLE !!!\\n\" \"\" + static_data . PROJECT_URL + \"\\n\\n\" ) logging . info ( \"Update available: \" + static_data . PROJECT_URL ) else : logging . info ( \"No update available.\" )\n", "title": "", "metadata": ""}
{"_id": "49ffd51dd667d48432ea62c9b60b37c1", "text": "def clean_with_zeros ( self , x ) : x [ ~ np . any ( np . isnan ( x ) | np . isinf ( x ) , axis = 1 ) ] = 0 return x\n", "title": "", "metadata": ""}
{"_id": "c14d2c0871b5343ca4a69b4b14b3bbd7", "text": "def get_language ( self ) : return get_language_parameter ( self . request , self . query_language_key , default = self . get_default_language ( object = object ) )\n", "title": "", "metadata": ""}
{"_id": "09b3e5c86fdd142f65496add57c8f55d", "text": "async def list ( source ) : result = [ ] async with streamcontext ( source ) as streamer : async for item in streamer : result . append ( item ) yield result\n", "title": "", "metadata": ""}
{"_id": "24cef43d4536e34c6f410326d2175edf", "text": "def is_set ( self , key ) : data = self . model . get_data ( ) return isinstance ( data [ key ] , set )\n", "title": "", "metadata": ""}
{"_id": "f4c750c18055ea7d885b1abd52b34fe2", "text": "def convert_camel_case_to_snake_case ( name ) : s1 = re . sub ( '(.)([A-Z][a-z]+)' , r'\\1_\\2' , name ) return re . sub ( '([a-z0-9])([A-Z])' , r'\\1_\\2' , s1 ) . lower ( )\n", "title": "", "metadata": ""}
{"_id": "d0c6d0d2bcaefb7d940d13367586e030", "text": "def get_model_index_properties ( instance , index ) : mapping = get_index_mapping ( index ) doc_type = instance . _meta . model_name . lower ( ) return list ( mapping [ \"mappings\" ] [ doc_type ] [ \"properties\" ] . keys ( ) )\n", "title": "", "metadata": ""}
{"_id": "50ca587212ea5003c292d1be876f0345", "text": "def get_raw_input ( description , default = False ) : additional = ' (default: %s)' % default if default else '' prompt = '    %s%s: ' % ( description , additional ) user_input = input_ ( prompt ) return user_input\n", "title": "", "metadata": ""}
{"_id": "7cf2f9dc5178ab98fae7e1d164b1ac14", "text": "def py3round ( number ) : if abs ( round ( number ) - number ) == 0.5 : return int ( 2.0 * round ( number / 2.0 ) ) return int ( round ( number ) )\n", "title": "", "metadata": ""}
{"_id": "2b7dbe6191baa10960cc9eaf010baf3d", "text": "def rgb2gray ( img ) : T = np . linalg . inv ( np . array ( [ [ 1.0 , 0.956 , 0.621 ] , [ 1.0 , - 0.272 , - 0.647 ] , [ 1.0 , - 1.106 , 1.703 ] , ] ) ) r_c , g_c , b_c = T [ 0 ] r , g , b = np . rollaxis ( as_float_image ( img ) , axis = - 1 ) return r_c * r + g_c * g + b_c * b\n", "title": "", "metadata": ""}
{"_id": "db33dac83c927247c9fb395f6e54b422", "text": "def prox_zero ( X , step ) : return np . zeros ( X . shape , dtype = X . dtype )\n", "title": "", "metadata": ""}
{"_id": "0db0c9dd2d64bb45bedd499c56208e9a", "text": "def filter_none ( list_of_points ) : remove_elementnone = filter ( lambda p : p is not None , list_of_points ) remove_sublistnone = filter ( lambda p : not contains_none ( p ) , remove_elementnone ) return list ( remove_sublistnone )\n", "title": "", "metadata": ""}
{"_id": "c4cff704e300c0b28aafabcf64c55549", "text": "def is_float_array ( val ) : return is_np_array ( val ) and issubclass ( val . dtype . type , np . floating )\n", "title": "", "metadata": ""}
{"_id": "73738cacaf630946ab4439ed82705697", "text": "def get_buffer ( self , data_np , header , format , output = None ) : if not have_pil : raise Exception ( \"Install PIL to use this method\" ) image = PILimage . fromarray ( data_np ) buf = output if buf is None : buf = BytesIO ( ) image . save ( buf , format ) return buf\n", "title": "", "metadata": ""}
{"_id": "d1f22b6428027e4cfde55b7f5ea043c0", "text": "def kubectl ( * args , input = None , * * flags ) : # Build command line call. line = [ 'kubectl' ] + list ( args ) line = line + get_flag_args ( * * flags ) if input is not None : line = line + [ '-f' , '-' ] # Run subprocess output = subprocess . run ( line , input = input , capture_output = True , text = True ) return output\n", "title": "", "metadata": ""}
{"_id": "310a479c24f6cbf4d419f0b51e6ba0ea", "text": "def log_exception ( exc_info = None , stream = None ) : exc_info = exc_info or sys . exc_info ( ) stream = stream or sys . stderr try : from traceback import print_exception print_exception ( exc_info [ 0 ] , exc_info [ 1 ] , exc_info [ 2 ] , None , stream ) stream . flush ( ) finally : exc_info = None\n", "title": "", "metadata": ""}
{"_id": "3bd25da951be763a132016cb0cc2e80b", "text": "def _merge_maps ( m1 , m2 ) : return type ( m1 ) ( chain ( m1 . items ( ) , m2 . items ( ) ) )\n", "title": "", "metadata": ""}
{"_id": "ebb229c0e69f5c7ff7fb3b85bb8d89d9", "text": "def find_model_by_table_name ( name ) : for model in ModelBase . _decl_class_registry . values ( ) : if hasattr ( model , '__table__' ) and model . __table__ . fullname == name : return model return None\n", "title": "", "metadata": ""}
{"_id": "e07765b28e172a3b6f1aabdbf4bc18ad", "text": "def find_frequencies ( data , freq = 44100 , bits = 16 ) : # Fast fourier transform n = len ( data ) p = _fft ( data ) uniquePts = numpy . ceil ( ( n + 1 ) / 2.0 ) # Scale by the length (n) and square the value to get the amplitude p = [ ( abs ( x ) / float ( n ) ) ** 2 * 2 for x in p [ 0 : uniquePts ] ] p [ 0 ] = p [ 0 ] / 2 if n % 2 == 0 : p [ - 1 ] = p [ - 1 ] / 2 # Generate the frequencies and zip with the amplitudes s = freq / float ( n ) freqArray = numpy . arange ( 0 , uniquePts * s , s ) return zip ( freqArray , p )\n", "title": "", "metadata": ""}
{"_id": "8035b6aee34820dd686543ea73c21579", "text": "def indexTupleFromItem ( self , treeItem ) : # TODO: move to BaseTreeItem? if not treeItem : return ( QtCore . QModelIndex ( ) , QtCore . QModelIndex ( ) ) if not treeItem . parentItem : # TODO: only necessary because of childNumber? return ( QtCore . QModelIndex ( ) , QtCore . QModelIndex ( ) ) # Is there a bug in Qt in QStandardItemModel::indexFromItem? # It passes the parent in createIndex. TODO: investigate row = treeItem . childNumber ( ) return ( self . createIndex ( row , 0 , treeItem ) , self . createIndex ( row , self . columnCount ( ) - 1 , treeItem ) )\n", "title": "", "metadata": ""}
{"_id": "abc34280a1b622688ef958cb24173149", "text": "def figsize ( x = 8 , y = 7. , aspect = 1. ) : # update rcparams with adjusted figsize params mpl . rcParams . update ( { 'figure.figsize' : ( x * aspect , y ) } )\n", "title": "", "metadata": ""}
{"_id": "402791ef87b49595f66d97d7b2005612", "text": "def tab ( self , output ) : import csv csvwriter = csv . writer ( self . outfile , dialect = csv . excel_tab ) csvwriter . writerows ( output )\n", "title": "", "metadata": ""}
{"_id": "f7c77b8d99d87f46f1ff7438e08013a7", "text": "def query_collision ( collision_object ) : global collidable_objects # Note that we use a Brute Force approach for the time being. # It performs horribly under heavy loads, but it meets # our needs for the time being. for obj in collidable_objects : # Make sure we don't check ourself against ourself. if obj . obj_id is not collision_object . obj_id : if collision_object . is_colliding ( obj ) : # A collision has been detected. Return the object that we are colliding with. return obj # No collision was noticed. Return None. return None\n", "title": "", "metadata": ""}
{"_id": "e53bfb535fcae1d374914a3c9a9142ab", "text": "def replace ( table , field , a , b , * * kwargs ) : return convert ( table , field , { a : b } , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "2f0d9b969709b84f90aa978df6af32a0", "text": "def enbw ( wnd ) : return sum ( el ** 2 for el in wnd ) / sum ( wnd ) ** 2 * len ( wnd )\n", "title": "", "metadata": ""}
{"_id": "5aced3e48bcdec901ef6644d7eb28a69", "text": "def __str__ ( self ) : if not hasattr ( self , '_str' ) : self . _str = self . function ( * self . args , * * self . kwargs ) return self . _str\n", "title": "", "metadata": ""}
{"_id": "ac8e0b8251ba05021c90f27e4acc2206", "text": "def _config_session ( ) : config = tf . ConfigProto ( ) config . gpu_options . allow_growth = True config . gpu_options . visible_device_list = '0' return tf . Session ( config = config )\n", "title": "", "metadata": ""}
{"_id": "2a82679540f49d816c2a5fad5ed8b941", "text": "def user_exists ( username ) : try : pwd . getpwnam ( username ) user_exists = True except KeyError : user_exists = False return user_exists\n", "title": "", "metadata": ""}
{"_id": "a6857f4020a1ea845867c3092f25085d", "text": "def determine_interactive ( self ) : try : if not sys . stdout . isatty ( ) or os . getpgrp ( ) != os . tcgetpgrp ( sys . stdout . fileno ( ) ) : self . interactive = 0 return False except Exception : self . interactive = 0 return False if self . interactive == 0 : return False return True\n", "title": "", "metadata": ""}
{"_id": "6550ac2c5c1382dfe8e2a64b92a132a3", "text": "def sha1 ( s ) : h = hashlib . new ( 'sha1' ) h . update ( s ) return h . hexdigest ( )\n", "title": "", "metadata": ""}
{"_id": "9ab08835e7c79d5fd02c29fc4782b951", "text": "def read ( * args ) : return io . open ( os . path . join ( HERE , * args ) , encoding = \"utf-8\" ) . read ( )\n", "title": "", "metadata": ""}
{"_id": "ed62904fdb7ee9ce247c780da16f4581", "text": "def _show ( self , message , indent = 0 , enable_verbose = True ) : # pragma: no cover if enable_verbose : print ( \"    \" * indent + message )\n", "title": "", "metadata": ""}
{"_id": "358bfebfd81563fe79033bc67e93af9c", "text": "def run_func ( self , func_path , * func_args , * * kwargs ) : if not self . started : raise ValueError ( 'Session not started, use start()' ) nargout = kwargs . pop ( 'nargout' , 1 ) func_args += tuple ( item for pair in zip ( kwargs . keys ( ) , kwargs . values ( ) ) for item in pair ) dname = os . path . dirname ( func_path ) fname = os . path . basename ( func_path ) func_name , ext = os . path . splitext ( fname ) if ext and not ext == '.m' : raise TypeError ( 'Need to give path to .m file' ) return self . _json_response ( cmd = 'eval' , func_name = func_name , func_args = func_args or '' , dname = dname , nargout = nargout )\n", "title": "", "metadata": ""}
{"_id": "dfd43b5298377719a86f2e84a713e979", "text": "def dot_product ( self , other ) : return self . x * other . x + self . y * other . y\n", "title": "", "metadata": ""}
{"_id": "fb36f46ed0338e62845642b6e25f1035", "text": "def get_pull_request ( project , num , auth = False ) : url = \"https://api.github.com/repos/{project}/pulls/{num}\" . format ( project = project , num = num ) if auth : header = make_auth_header ( ) else : header = None response = requests . get ( url , headers = header ) response . raise_for_status ( ) return json . loads ( response . text , object_hook = Obj )\n", "title": "", "metadata": ""}
{"_id": "12edbb512ad0c556609f98e4ef2df850", "text": "def deserialize_date ( string ) : try : from dateutil . parser import parse return parse ( string ) . date ( ) except ImportError : return string\n", "title": "", "metadata": ""}
{"_id": "1b05ff848e1295524e769c61c54d578d", "text": "def cprint ( string , fg = None , bg = None , end = '\\n' , target = sys . stdout ) : _color_manager . set_color ( fg , bg ) target . write ( string + end ) target . flush ( ) # Needed for Python 3.x _color_manager . set_defaults ( )\n", "title": "", "metadata": ""}
{"_id": "abfeabf69ee57ae364201effe8489be4", "text": "def close ( self ) : if self . _initialized : self . stop ( ) self . logged_in = False return self . serial_h . close ( )\n", "title": "", "metadata": ""}
{"_id": "704a38012487cebe70bab37159056276", "text": "def expect_all ( a , b ) : assert all ( _a == _b for _a , _b in zip_longest ( a , b ) )\n", "title": "", "metadata": ""}
{"_id": "20f7be98fd3dde8159bf3adcedbe568c", "text": "def lengths_offsets ( value ) : values = [ ] for item in value . split ( ',' ) : item = int ( item ) values . append ( item ) return values\n", "title": "", "metadata": ""}
{"_id": "40f0f7bf79a580142bef59070e9cc2fc", "text": "def check_if_branch_exist ( db , root_hash , key_prefix ) : validate_is_bytes ( key_prefix ) return _check_if_branch_exist ( db , root_hash , encode_to_bin ( key_prefix ) )\n", "title": "", "metadata": ""}
{"_id": "ff04c3d17ce8d05a8264444674930b5e", "text": "def compose ( * funcs ) : return lambda x : reduce ( lambda v , f : f ( v ) , reversed ( funcs ) , x )\n", "title": "", "metadata": ""}
{"_id": "35f0e7071508db9484032ec405bac620", "text": "def make_qs ( n , m = None ) : try : import sympy except ImportError : raise ImportError ( \"This function requires sympy. Please install it.\" ) if m is None : syms = sympy . symbols ( \" \" . join ( f\"q{i}\" for i in range ( n ) ) ) if isinstance ( syms , tuple ) : return syms else : return ( syms , ) syms = sympy . symbols ( \" \" . join ( f\"q{i}\" for i in range ( n , m ) ) ) if isinstance ( syms , tuple ) : return syms else : return ( syms , )\n", "title": "", "metadata": ""}
{"_id": "68b0e52b702b32173b2b3cecf0489cfc", "text": "def elXpath ( self , xpath , dom = None ) : if dom is None : dom = self . browser return expect ( dom . is_element_present_by_xpath , args = [ xpath ] )\n", "title": "", "metadata": ""}
{"_id": "985226543eeac0d1aa50268297f2bcfe", "text": "def dedup ( seq ) : seen = set ( ) for item in seq : if item not in seen : seen . add ( item ) yield item\n", "title": "", "metadata": ""}
{"_id": "a2c29fddd4b09a86f2d8842203a0201c", "text": "def get_size ( self ) : self . curses . setupterm ( ) return self . curses . tigetnum ( 'cols' ) , self . curses . tigetnum ( 'lines' )\n", "title": "", "metadata": ""}
{"_id": "a62e3c7e786c1c4c61988639e4cc2750", "text": "def zoom_out ( self ) : index = self . _zoom_factors . index ( self . _zoom_factor ) if index == 0 : # Already zoomed out all the way return self . _zoom_factor = self . _zoom_factors [ index - 1 ] if self . _zoom_factors . index ( self . _zoom_factor ) == 0 : self . _button_zoom_out . config ( state = tk . DISABLED ) self . _button_zoom_in . config ( state = tk . NORMAL ) self . draw_timeline ( )\n", "title": "", "metadata": ""}
{"_id": "1fca7cc49e27ba24d38368a337999a8a", "text": "def dict_to_ddb ( item ) : # type: (Dict[str, Any]) -> Dict[str, Any] # TODO: narrow these types down serializer = TypeSerializer ( ) return { key : serializer . serialize ( value ) for key , value in item . items ( ) }\n", "title": "", "metadata": ""}
{"_id": "3b4064ae428dfa3103e4eb05e8285434", "text": "def has_jongsung ( letter ) : if len ( letter ) != 1 : raise Exception ( 'The target string must be one letter.' ) if not is_hangul ( letter ) : raise NotHangulException ( 'The target string must be Hangul' ) code = lt . hangul_index ( letter ) return code % NUM_JONG > 0\n", "title": "", "metadata": ""}
{"_id": "76962c5a6bb328646cbe8d9a7b73d0e8", "text": "def _numpy_char_to_bytes ( arr ) : # based on: http://stackoverflow.com/a/10984878/809705 arr = np . array ( arr , copy = False , order = 'C' ) dtype = 'S' + str ( arr . shape [ - 1 ] ) return arr . view ( dtype ) . reshape ( arr . shape [ : - 1 ] )\n", "title": "", "metadata": ""}
{"_id": "d5261138a81fdf49390903914a3e9fc9", "text": "def search_index_file ( ) : from metapack import Downloader from os import environ return environ . get ( 'METAPACK_SEARCH_INDEX' , Downloader . get_instance ( ) . cache . getsyspath ( 'index.json' ) )\n", "title": "", "metadata": ""}
{"_id": "c6d97627b7093f80b8f6be4be6b5cf48", "text": "def from_json ( s ) : d = json . loads ( s ) sbp = SBP . from_json_dict ( d ) return sbp\n", "title": "", "metadata": ""}
{"_id": "5d50bd0253b983db24f367708d6f92c1", "text": "def _check_methods ( self , methods ) : for method in methods : if method not in self . ALLOWED_METHODS : raise Exception ( 'Invalid \\'%s\\' method' % method )\n", "title": "", "metadata": ""}
{"_id": "e0096823cfcdf061323026f8443e2192", "text": "def read_full ( stream ) : assert stream , \"stream is required\" chunks = [ ] chunk = yield stream . read ( ) while chunk : chunks . append ( chunk ) chunk = yield stream . read ( ) raise tornado . gen . Return ( b'' . join ( chunks ) )\n", "title": "", "metadata": ""}
{"_id": "b3c7b9730caa2d5486381253999de8a8", "text": "def uniq ( seq ) : seen = set ( ) return [ x for x in seq if str ( x ) not in seen and not seen . add ( str ( x ) ) ]\n", "title": "", "metadata": ""}
{"_id": "effb5743ac09e5ac86ac65336484041e", "text": "def Fsphere ( q , R ) : return 4 * np . pi / q ** 3 * ( np . sin ( q * R ) - q * R * np . cos ( q * R ) )\n", "title": "", "metadata": ""}
{"_id": "a9a3a50a8df0b6954f630df184f234f4", "text": "def _is_subsequence_of ( self , sub , sup ) : return bool ( re . search ( \".*\" . join ( sub ) , sup ) )\n", "title": "", "metadata": ""}
{"_id": "2a80aa2b73d26662660b5c9cd012ef19", "text": "def dedupFasta ( reads ) : seen = set ( ) add = seen . add for read in reads : hash_ = md5 ( read . sequence . encode ( 'UTF-8' ) ) . digest ( ) if hash_ not in seen : add ( hash_ ) yield read\n", "title": "", "metadata": ""}
{"_id": "dd59507b69752e95b39135bed86b1b10", "text": "def add_queue_handler ( queue ) : handler = QueueLogHandler ( queue ) handler . setFormatter ( QueueFormatter ( ) ) handler . setLevel ( DEBUG ) GLOBAL_LOGGER . addHandler ( handler )\n", "title": "", "metadata": ""}
{"_id": "a107e63f3e5b03e95be5caf19397b8a3", "text": "def read_flat ( self ) : x , y , pixel , meta = self . read ( ) arraycode = 'BH' [ meta [ 'bitdepth' ] > 8 ] pixel = array ( arraycode , itertools . chain ( * pixel ) ) return x , y , pixel , meta\n", "title": "", "metadata": ""}
{"_id": "fc8ab6a3e1c74c55a2c7a543aad5d281", "text": "def unescape_all ( string ) : def escape_single ( matchobj ) : return _unicode_for_entity_with_name ( matchobj . group ( 1 ) ) return entities . sub ( escape_single , string )\n", "title": "", "metadata": ""}
{"_id": "8ea18e95c3a1fd148e5e33837c9b18a8", "text": "def shape ( self ) : return tuple ( len ( self . _get_axis ( a ) ) for a in self . _AXIS_ORDERS )\n", "title": "", "metadata": ""}
{"_id": "3a3c867d9c7a4dbcb865b592efc46e8d", "text": "def yn_prompt ( msg , default = True ) : ret = custom_prompt ( msg , [ \"y\" , \"n\" ] , \"y\" if default else \"n\" ) if ret == \"y\" : return True return False\n", "title": "", "metadata": ""}
{"_id": "a03aff5a5fc685838a815dea04e47bef", "text": "def rm ( venv_name ) : inenv = InenvManager ( ) venv = inenv . get_venv ( venv_name ) click . confirm ( \"Delete dir {}\" . format ( venv . path ) ) shutil . rmtree ( venv . path )\n", "title": "", "metadata": ""}
{"_id": "7f3cb8b29c859f059ec2f8060f82ea03", "text": "def head_and_tail_print ( self , n = 5 ) : from IPython import display display . display ( display . HTML ( self . _head_and_tail_table ( n ) ) )\n", "title": "", "metadata": ""}
{"_id": "b7bcf48f354bee9906d4fb4139ae1d49", "text": "def plot_target ( target , ax ) : ax . scatter ( target [ 0 ] , target [ 1 ] , target [ 2 ] , c = \"red\" , s = 80 )\n", "title": "", "metadata": ""}
{"_id": "7b05ad441e40639f566bc8d7ecf91d90", "text": "def keyPressEvent ( self , event ) : self . keyboard_event ( event . key ( ) , self . keys . ACTION_PRESS , 0 )\n", "title": "", "metadata": ""}
{"_id": "a95673de8f538c48b4becec3bfc6a137", "text": "def standard_input ( ) : with click . get_text_stream ( \"stdin\" ) as stdin : while stdin . readable ( ) : line = stdin . readline ( ) if line : yield line . strip ( ) . encode ( \"utf-8\" )\n", "title": "", "metadata": ""}
{"_id": "83bdfa1b0f4be02c6eae0cafec829e88", "text": "def from_pb ( cls , pb ) : obj = cls . _from_pb ( pb ) obj . _pb = pb return obj\n", "title": "", "metadata": ""}
{"_id": "01229ea08d89372219a226e7d9ffc7df", "text": "def token ( name ) : def wrap ( f ) : tokenizers . append ( ( name , f ) ) return f return wrap\n", "title": "", "metadata": ""}
{"_id": "6d33a8e12ababf8c23231c3aee832f23", "text": "def _get_session ( ) : session = getattr ( g , '_session' , None ) if session is None : session = g . _session = db . session ( ) return session\n", "title": "", "metadata": ""}
{"_id": "fac56d0918ccf1f25c0cc60c2dc3c3be", "text": "def __sort_up ( self ) : if self . __do_need_sort_up : self . __up_objects . sort ( key = cmp_to_key ( self . __up_cmp ) ) self . __do_need_sort_up = False\n", "title": "", "metadata": ""}
{"_id": "ce4506416181878c3b0f5eabafe5640a", "text": "def getlines ( filename , module_globals = None ) : if filename in cache : return cache [ filename ] [ 2 ] try : return updatecache ( filename , module_globals ) except MemoryError : clearcache ( ) return [ ]\n", "title": "", "metadata": ""}
{"_id": "c34dd2d08fefcd9ea4e1530cd4dce056", "text": "def classify_clusters ( points , n = 10 ) : arr = [ [ p . x , p . y ] for p in points . values ] clf = KMeans ( n_clusters = n ) clf . fit ( arr ) classes = clf . predict ( arr ) return classes\n", "title": "", "metadata": ""}
{"_id": "511e177dc62e7399d969c4d03e53e350", "text": "def minify ( path ) : if 'http' in path : data = requests . get ( path ) . content . decode ( 'ascii' , errors = 'ignore' ) else : with open ( path , 'rb' ) as f : # some of these assholes use unicode spaces -_- data = f . read ( ) . decode ( 'ascii' , errors = 'ignore' ) # don't re- minify if '.min.' in path : return data try : return jsmin . jsmin ( data ) except BaseException : return data\n", "title": "", "metadata": ""}
{"_id": "1f1d5e6b52d8db6687c79b375b196895", "text": "def __isub__ ( self , other ) : self . _binary_sanity_check ( other ) set . difference_update ( self , other ) return self\n", "title": "", "metadata": ""}
{"_id": "eb45d294cf23ee100bd103c2c4db9354", "text": "def is_break_tag ( self , el ) : name = el . name return name in self . break_tags or name in self . user_break_tags\n", "title": "", "metadata": ""}
{"_id": "7892e41f81084bdb95c646f1ed23ddc8", "text": "def normalize ( im , invert = False , scale = None , dtype = np . float64 ) : if dtype not in { np . float16 , np . float32 , np . float64 } : raise ValueError ( 'dtype must be numpy.float16, float32, or float64.' ) out = im . astype ( 'float' ) . copy ( ) scale = scale or ( 0.0 , 255.0 ) l , u = ( float ( i ) for i in scale ) out = ( out - l ) / ( u - l ) if invert : out = - out + ( out . max ( ) + out . min ( ) ) return out . astype ( dtype )\n", "title": "", "metadata": ""}
{"_id": "e85067d16b2bbce5e0f000cbccc26a40", "text": "def get_bin_edges_from_axis ( axis ) -> np . ndarray : # Don't include over- or underflow bins bins = range ( 1 , axis . GetNbins ( ) + 1 ) # Bin edges bin_edges = np . empty ( len ( bins ) + 1 ) bin_edges [ : - 1 ] = [ axis . GetBinLowEdge ( i ) for i in bins ] bin_edges [ - 1 ] = axis . GetBinUpEdge ( axis . GetNbins ( ) ) return bin_edges\n", "title": "", "metadata": ""}
{"_id": "c68eecf6fbf2bc35fc6846b5b8fb0158", "text": "def reprkwargs ( kwargs , sep = ', ' , fmt = \"{0!s}={1!r}\" ) : return sep . join ( fmt . format ( k , v ) for k , v in kwargs . iteritems ( ) )\n", "title": "", "metadata": ""}
{"_id": "e1c72a6569b2fc4f524a2694848ac8c6", "text": "def __init__ ( self ) : self . state = self . STATE_INITIALIZING self . state_start = time . time ( )\n", "title": "", "metadata": ""}
{"_id": "5f3b1b64566270df51f19c0ee8344651", "text": "def _sort_r ( sorted , processed , key , deps , dependency_tree ) : if key in processed : return processed . add ( key ) for dep_key in deps : dep_deps = dependency_tree . get ( dep_key ) if dep_deps is None : log . debug ( '\"%s\" not found, skipped' , Repr ( dep_key ) ) continue _sort_r ( sorted , processed , dep_key , dep_deps , dependency_tree ) sorted . append ( ( key , deps ) )\n", "title": "", "metadata": ""}
{"_id": "98fef40c58eb2695aca69cac8950c276", "text": "def maxId ( self ) : if len ( self . model . db ) == 0 : return 0 return max ( map ( lambda obj : obj [ \"id\" ] , self . model . db ) )\n", "title": "", "metadata": ""}
{"_id": "a5951cdc1746a8228113ca1778317c83", "text": "def test ( * args ) : subprocess . call ( [ \"py.test-2.7\" ] + list ( args ) ) subprocess . call ( [ \"py.test-3.4\" ] + list ( args ) )\n", "title": "", "metadata": ""}
{"_id": "655aed0940711d61029464abe124a627", "text": "def _configure_logger ( ) : if not app . debug : _configure_logger_for_production ( logging . getLogger ( ) ) elif not app . testing : _configure_logger_for_debugging ( logging . getLogger ( ) )\n", "title": "", "metadata": ""}
{"_id": "049e185d1880a8e3911d970379dc95c3", "text": "def snake_to_camel ( name ) : ret = \"\" . join ( x . title ( ) for x in name . split ( \"_\" ) ) ret = ret [ 0 ] . lower ( ) + ret [ 1 : ] return ret\n", "title": "", "metadata": ""}
{"_id": "3935829ff546f54ca3719f390cba86e1", "text": "def multiply ( traj ) : z = traj . x * traj . y traj . f_add_result ( 'z' , z = z , comment = 'I am the product of two reals!' )\n", "title": "", "metadata": ""}
{"_id": "18a5b5b20720048b800209991f12ded1", "text": "def chunks ( iterable , size = 1 ) : iterator = iter ( iterable ) for element in iterator : yield chain ( [ element ] , islice ( iterator , size - 1 ) )\n", "title": "", "metadata": ""}
{"_id": "a6f8952836d7606b657e1034a103de87", "text": "def gaussian_kernel ( sigma , truncate = 4.0 ) : sigma = float ( sigma ) radius = int ( truncate * sigma + 0.5 ) x , y = np . mgrid [ - radius : radius + 1 , - radius : radius + 1 ] sigma = sigma ** 2 k = 2 * np . exp ( - 0.5 * ( x ** 2 + y ** 2 ) / sigma ) k = k / np . sum ( k ) return k\n", "title": "", "metadata": ""}
{"_id": "42aa54cbc8f2fe3b1e931e83c885c0ea", "text": "def after_epoch ( self , * * _ ) -> None : SaveEvery . save_model ( model = self . _model , name_suffix = self . _OUTPUT_NAME , on_failure = self . _on_save_failure )\n", "title": "", "metadata": ""}
{"_id": "fa04498d4b3c8d80f990761f7534c86a", "text": "def unapostrophe ( text ) : text = re . sub ( r'[%s]s?$' % '' . join ( APOSTROPHES ) , '' , text ) return text\n", "title": "", "metadata": ""}
{"_id": "511feadf9d0a131d650f3086be64eafe", "text": "def quaternion_imag ( quaternion ) : return numpy . array ( quaternion [ 1 : 4 ] , dtype = numpy . float64 , copy = True )\n", "title": "", "metadata": ""}
{"_id": "3a9b78a8c4b84b0f629fc6da608b057c", "text": "async def write_register ( self , address , value , skip_encode = False ) : await self . _request ( 'write_registers' , address , value , skip_encode = skip_encode )\n", "title": "", "metadata": ""}
{"_id": "6f598eae62daf170ab716fe8ca52a396", "text": "def _GetValue ( self , name ) : for value in self . values : if value . name == name : return value\n", "title": "", "metadata": ""}
{"_id": "af685fb48d89fc245866a515e5a51878", "text": "def make_exception_message ( exc ) : if str ( exc ) : return '%s: %s\\n' % ( exc . __class__ . __name__ , exc ) else : return '%s\\n' % ( exc . __class__ . __name__ )\n", "title": "", "metadata": ""}
{"_id": "b558174196dd8fd3b2758900ac06ac67", "text": "def get_plugin_icon ( self ) : path = osp . join ( self . PLUGIN_PATH , self . IMG_PATH ) return ima . icon ( 'pylint' , icon_path = path )\n", "title": "", "metadata": ""}
{"_id": "e5776e1cf22f3f4d7b5ea045dcea049e", "text": "def _loadf ( ins ) : output = _float_oper ( ins . quad [ 2 ] ) output . extend ( _fpush ( ) ) return output\n", "title": "", "metadata": ""}
{"_id": "2609c67984b1062739c8a5b2816bf235", "text": "def url ( self ) : with switch_window ( self . _browser , self . name ) : return self . _browser . url\n", "title": "", "metadata": ""}
{"_id": "8a92ea1279f05e6ae104707cf61c9675", "text": "def delegate ( self , fn , * args , * * kwargs ) : callback = functools . partial ( fn , * args , * * kwargs ) coro = self . loop . run_in_executor ( self . subexecutor , callback ) return asyncio . ensure_future ( coro )\n", "title": "", "metadata": ""}
{"_id": "62bf3682c2bf480ba203b3efea6d63e0", "text": "def sort_filenames ( filenames ) : basenames = [ os . path . basename ( x ) for x in filenames ] indexes = [ i [ 0 ] for i in sorted ( enumerate ( basenames ) , key = lambda x : x [ 1 ] ) ] return [ filenames [ x ] for x in indexes ]\n", "title": "", "metadata": ""}
{"_id": "d2c1542b03b42070c1ccdac005b0ca34", "text": "def conv2d ( x_input , w_matrix ) : return tf . nn . conv2d ( x_input , w_matrix , strides = [ 1 , 1 , 1 , 1 ] , padding = 'SAME' )\n", "title": "", "metadata": ""}
{"_id": "45a1dbac75186036160d8fd58cf6ea9d", "text": "def is_connected ( self ) : try : return self . socket is not None and self . socket . getsockname ( ) [ 1 ] != 0 and BaseTransport . is_connected ( self ) except socket . error : return False\n", "title": "", "metadata": ""}
{"_id": "1c4a4884f5d2fdec91cbef57971a2f35", "text": "def matching_line ( lines , keyword ) : for line in lines : matching = match ( line , keyword ) if matching != None : return matching return None\n", "title": "", "metadata": ""}
{"_id": "c4fbcb5d95847a49715c718bf4d2356c", "text": "def get_body_size ( params , boundary ) : size = sum ( p . get_size ( boundary ) for p in MultipartParam . from_params ( params ) ) return size + len ( boundary ) + 6\n", "title": "", "metadata": ""}
{"_id": "115ae4de6d9c1b1687dbaca6895dd881", "text": "def get_stripped_file_lines ( filename ) : try : lines = open ( filename ) . readlines ( ) except FileNotFoundError : fatal ( \"Could not open file: {!r}\" . format ( filename ) ) return [ line . strip ( ) for line in lines ]\n", "title": "", "metadata": ""}
{"_id": "f3af73d0d3504b8ce9caeb29e7e81d9b", "text": "def _remove_keywords ( d ) : return { k : v for k , v in iteritems ( d ) if k not in RESERVED }\n", "title": "", "metadata": ""}
{"_id": "7934e7f87a1fec4299908f363b69430d", "text": "def find_le ( a , x ) : i = bs . bisect_right ( a , x ) if i : return i - 1 raise ValueError\n", "title": "", "metadata": ""}
{"_id": "8552c4e0f84dc1d669bc9803a72a74e9", "text": "def safe_format ( s , * * kwargs ) : return string . Formatter ( ) . vformat ( s , ( ) , defaultdict ( str , * * kwargs ) )\n", "title": "", "metadata": ""}
{"_id": "892f049f316a1b43f7a34528409f94c1", "text": "def trim_decimals ( s , precision = - 3 ) : encoded = s . encode ( 'ascii' , 'ignore' ) str_val = \"\" if six . PY3 : str_val = str ( encoded , encoding = 'ascii' , errors = 'ignore' ) [ : precision ] else : # If precision is 0, this must be handled seperately if precision == 0 : str_val = str ( encoded ) else : str_val = str ( encoded ) [ : precision ] if len ( str_val ) > 0 : return float ( str_val ) else : return 0\n", "title": "", "metadata": ""}
{"_id": "7f175e52b95a0423e2ab68b51f19c9b6", "text": "def init_rotating_logger ( level , logfile , max_files , max_bytes ) : logging . basicConfig ( ) root_logger = logging . getLogger ( ) log_format = \"[%(asctime)s] [%(levelname)s] %(filename)s: %(message)s\" root_logger . setLevel ( level ) handler = RotatingFileHandler ( logfile , maxBytes = max_bytes , backupCount = max_files ) handler . setFormatter ( logging . Formatter ( fmt = log_format , datefmt = date_format ) ) root_logger . addHandler ( handler ) for handler in root_logger . handlers : root_logger . debug ( \"Associated handlers - \" + str ( handler ) ) if isinstance ( handler , logging . StreamHandler ) : root_logger . debug ( \"Removing StreamHandler: \" + str ( handler ) ) root_logger . handlers . remove ( handler )\n", "title": "", "metadata": ""}
{"_id": "aa0bb8133a2b410687585710b3a74fac", "text": "def add_datetime ( dataframe , timestamp_key = 'UNIXTIME' ) : def convert_data ( timestamp ) : return datetime . fromtimestamp ( float ( timestamp ) / 1e3 , UTC_TZ ) try : log . debug ( \"Adding DATETIME column to the data\" ) converted = dataframe [ timestamp_key ] . apply ( convert_data ) dataframe [ 'DATETIME' ] = converted except KeyError : log . warning ( \"Could not add DATETIME column\" )\n", "title": "", "metadata": ""}
{"_id": "fa86a3748156ec62487078b1f225b7c4", "text": "def tokenize ( self , s ) : return [ s [ start : end ] for start , end in self . span_tokenize ( s ) ]\n", "title": "", "metadata": ""}
{"_id": "1b13c6f2b146ed3e81eb5a760de1b1ce", "text": "def unbroadcast_numpy_to ( array , shape ) : axis = create_unbroadcast_axis ( shape , numpy . shape ( array ) ) return numpy . reshape ( numpy . sum ( array , axis = axis ) , shape )\n", "title": "", "metadata": ""}
{"_id": "31d9d20384a1615a34cd8b203badad30", "text": "def sprint ( text , * colors ) : return \"\\33[{}m{content}\\33[{}m\" . format ( \";\" . join ( [ str ( color ) for color in colors ] ) , RESET , content = text ) if IS_ANSI_TERMINAL and colors else text\n", "title": "", "metadata": ""}
{"_id": "999b903b0a4fd8ea8dd8793a74df4eb9", "text": "def nmse ( a , b ) : return np . square ( a - b ) . mean ( ) / ( a . mean ( ) * b . mean ( ) )\n", "title": "", "metadata": ""}
{"_id": "44f91ba7a06498186cf3a0aba7c389f6", "text": "def _end_del ( self ) : text = self . edit_text [ : self . edit_pos ] self . set_edit_text ( text )\n", "title": "", "metadata": ""}
{"_id": "c64442911447f4bdb51ab95009a28b75", "text": "def register ( ) : signals . article_generator_finalized . connect ( link_source_files ) signals . page_generator_finalized . connect ( link_source_files ) signals . page_writer_finalized . connect ( write_source_files )\n", "title": "", "metadata": ""}
{"_id": "4d49e3b83292a6c8fdd268871ef8f554", "text": "def subsystem ( s ) : node_states ( s . state ) cut ( s . cut , s . cut_indices ) if config . VALIDATE_SUBSYSTEM_STATES : state_reachable ( s ) return True\n", "title": "", "metadata": ""}
{"_id": "68dbce4f26b0b83fee18f7ccf95ae9e7", "text": "def sorted_chain ( * ranges : Iterable [ Tuple [ int , int ] ] ) -> List [ Tuple [ int , int ] ] : return sorted ( itertools . chain ( * ranges ) )\n", "title": "", "metadata": ""}
{"_id": "f996692713d4942d1732cac0a0e52667", "text": "def colorize ( string , color , * args , * * kwargs ) : string = string . format ( * args , * * kwargs ) return color + string + colorama . Fore . RESET\n", "title": "", "metadata": ""}
{"_id": "19c1f9ae5a54c307e5f5e6d996e14bd7", "text": "def sample_correlations ( self ) : C = np . corrcoef ( self . X . T ) corr_matrix = ExpMatrix ( genes = self . samples , samples = self . samples , X = C ) return corr_matrix\n", "title": "", "metadata": ""}
{"_id": "c694fd05ca15669c37dc6aee61ee6e52", "text": "def int_to_date ( date ) : year = date // 10 ** 4 month = date % 10 ** 4 // 10 ** 2 day = date % 10 ** 2 return datetime . date ( year , month , day )\n", "title": "", "metadata": ""}
{"_id": "0db4561a1891427ce237f7e188a9b28f", "text": "def iterlists ( self ) : for key , values in dict . iteritems ( self ) : yield key , list ( values )\n", "title": "", "metadata": ""}
{"_id": "5c9937db90533809adde9e18782f75a6", "text": "def static_method ( cls , f ) : setattr ( cls , f . __name__ , staticmethod ( f ) ) return f\n", "title": "", "metadata": ""}
{"_id": "a1bf46c97d9293b0ef123d47462d8aa3", "text": "def scopes_as ( self , new_scopes ) : old_scopes , self . scopes = self . scopes , new_scopes yield self . scopes = old_scopes\n", "title": "", "metadata": ""}
{"_id": "c7202d44a27ac92800c99c971f86c09d", "text": "def download_file_from_bucket ( self , bucket , file_path , key ) : with open ( file_path , 'wb' ) as data : self . __s3 . download_fileobj ( bucket , key , data ) return file_path\n", "title": "", "metadata": ""}
{"_id": "91e5bc3b08f3e641d53c98e9e7dc46e7", "text": "def create_path ( path ) : import os if not os . path . exists ( path ) : os . makedirs ( path )\n", "title": "", "metadata": ""}
{"_id": "1bb7187040feee3ef00564b053a12bb9", "text": "def fit_linear ( X , y ) : model = linear_model . LinearRegression ( ) model . fit ( X , y ) return model\n", "title": "", "metadata": ""}
{"_id": "1daf4ecb71c9b0c68c9b73795a3bc830", "text": "def _series_col_letter ( self , series ) : column_number = 1 + series . categories . depth + series . index return self . _column_reference ( column_number )\n", "title": "", "metadata": ""}
{"_id": "e8a1931607f6a1104302eb48f5e005a5", "text": "def __init__ ( self , filename , mode , encoding = None ) : FileHandler . __init__ ( self , filename , mode , encoding ) self . mode = mode self . encoding = encoding\n", "title": "", "metadata": ""}
{"_id": "91185853c210352d6a25d32345ef96f5", "text": "def check_cv ( self , y ) : y_arr = None if self . stratified : # Try to convert y to numpy for sklearn's check_cv; if conversion # doesn't work, still try. try : y_arr = to_numpy ( y ) except ( AttributeError , TypeError ) : y_arr = y if self . _is_float ( self . cv ) : return self . _check_cv_float ( ) return self . _check_cv_non_float ( y_arr )\n", "title": "", "metadata": ""}
{"_id": "59de82cf2edb2e07801ae413b666c0f4", "text": "def is_number ( obj ) : return isinstance ( obj , ( int , float , np . int_ , np . float_ ) )\n", "title": "", "metadata": ""}
{"_id": "cb3f595162dc36bb49e7a8887cb1aa2e", "text": "def zero_pad ( m , n = 1 ) : return np . pad ( m , ( n , n ) , mode = 'constant' , constant_values = [ 0 ] )\n", "title": "", "metadata": ""}
{"_id": "23f8cfd64c70a6826cdc1ad902d95946", "text": "def force_stop ( self ) : r = self . local_renderer with self . settings ( warn_only = True ) : r . sudo ( 'pkill -9 -f celery' ) r . sudo ( 'rm -f /tmp/celery*.pid' )\n", "title": "", "metadata": ""}
{"_id": "a3bd4796a5185fa4e5e755c69bab59a5", "text": "def is_client ( self ) : return ( self . args . client or self . args . browser ) and not self . args . server\n", "title": "", "metadata": ""}
{"_id": "37f622aefced8fb71f7b7beda37ef87e", "text": "def name2rgb ( hue ) : r , g , b = colorsys . hsv_to_rgb ( hue / 360.0 , .8 , .7 ) return tuple ( int ( x * 256 ) for x in [ r , g , b ] )\n", "title": "", "metadata": ""}
{"_id": "468d0a2c44943168efebf4b222caa407", "text": "def _wrap ( text , columns = 80 ) : out = [ ] for cnt , char in enumerate ( text ) : out . append ( char ) if ( cnt + 1 ) % columns == 0 : out . append ( \"\\n\" ) return \"\" . join ( out )\n", "title": "", "metadata": ""}
{"_id": "2f272c54b656f5072088d3c2d84eccdd", "text": "def compress ( data , * * kwargs ) : \"\"\"zlib.compress(data, **kwargs)          \"\"\" + zopfli . __COMPRESSOR_DOCSTRING__ + \"\"\"     Returns:       String containing a zlib container     \"\"\" kwargs [ 'gzip_mode' ] = 0 return zopfli . zopfli . compress ( data , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "3d13cb3049e3b604ef76a3ba6845bbc3", "text": "def log_stop ( logger ) : handlers = logger . handlers [ : ] for handler in handlers : handler . close ( ) logger . removeHandler ( handler )\n", "title": "", "metadata": ""}
{"_id": "3abd7f4caeaa5032034ad9016f9399c2", "text": "def styles ( self , dictobj ) : for k in dictobj : self . chart_style [ k ] = dictobj [ k ]\n", "title": "", "metadata": ""}
{"_id": "5f02fda614aaed6c5717f60b1a4011fa", "text": "def safe_repr ( obj ) : name = getattr ( obj , '__name__' , getattr ( obj . __class__ , '__name__' ) ) if name == 'ndict' : name = 'dict' return name or repr ( obj )\n", "title": "", "metadata": ""}
{"_id": "d74824967ab7fbeda6bf6adb882bac2b", "text": "def deduplicate ( list_object ) : new = [ ] for item in list_object : if item not in new : new . append ( item ) return new\n", "title": "", "metadata": ""}
{"_id": "ddcf16393e2581614fee6051d70ef5ac", "text": "def empty_line_count_at_the_end ( self ) : count = 0 for line in self . lines [ : : - 1 ] : if not line or line . isspace ( ) : count += 1 else : break return count\n", "title": "", "metadata": ""}
{"_id": "68fb5daf20b74eda0631154fc1d341e5", "text": "def load_feature ( fname , language ) : fname = os . path . abspath ( fname ) feat = parse_file ( fname , language ) return feat\n", "title": "", "metadata": ""}
{"_id": "f032324bbfac455391fbb153369d5489", "text": "def is_power_of_2 ( num ) : log = math . log2 ( num ) return int ( log ) == float ( log )\n", "title": "", "metadata": ""}
{"_id": "c62326919dfd4aa5776a85d4f111db7d", "text": "def get_points ( self ) : return [ ( k , self . runtime . _ring [ k ] ) for k in self . runtime . _keys ]\n", "title": "", "metadata": ""}
{"_id": "9f34999e9d10924accbddf4cf66c2733", "text": "def get_checkerboard_matrix ( kernel_width ) : return np . vstack ( ( np . hstack ( ( - 1 * np . ones ( ( kernel_width , kernel_width ) ) , np . ones ( ( kernel_width , kernel_width ) ) ) ) , np . hstack ( ( np . ones ( ( kernel_width , kernel_width ) ) , - 1 * np . ones ( ( kernel_width , kernel_width ) ) ) ) ) )\n", "title": "", "metadata": ""}
{"_id": "ec4c067d0948ce0508939e16d43cb9c7", "text": "def find_all ( self , string , callback ) : for index , output in self . iter ( string ) : callback ( index , output )\n", "title": "", "metadata": ""}
{"_id": "ba9ee614d843af456158581357dcb42b", "text": "def old_pad ( s ) : if len ( s ) % OLD_BLOCK_SIZE == 0 : return s return Padding . appendPadding ( s , blocksize = OLD_BLOCK_SIZE )\n", "title": "", "metadata": ""}
{"_id": "628b64b35382f9a797c2aa2b04febcc6", "text": "def unpack ( self , s ) : return self . _create ( super ( NamedStruct , self ) . unpack ( s ) )\n", "title": "", "metadata": ""}
{"_id": "d441b5f8171b9c8b03a41da58b1f02a9", "text": "def del_object_from_parent ( self ) : if self . parent : self . parent . objects . pop ( self . ref )\n", "title": "", "metadata": ""}
{"_id": "5f73a2290fff31391b22c1d5a4359f2d", "text": "def autoconvert ( string ) : for fn in ( boolify , int , float ) : try : return fn ( string ) except ValueError : pass return string\n", "title": "", "metadata": ""}
{"_id": "d24fd6f9c05227d060d2e7c5b2c76859", "text": "def safe_setattr ( obj , name , value ) : try : setattr ( obj , name , value ) return True except AttributeError : return False\n", "title": "", "metadata": ""}
{"_id": "b4189a9e3186d330c6ae29d22d5331ab", "text": "def eqstr ( a , b ) : return bool ( libspice . eqstr_c ( stypes . stringToCharP ( a ) , stypes . stringToCharP ( b ) ) )\n", "title": "", "metadata": ""}
{"_id": "03cab8b5895e672c90ea98b979f94cbb", "text": "def run ( self ) : try : import nose arguments = [ sys . argv [ 0 ] ] + list ( self . test_args ) return nose . run ( argv = arguments ) except ImportError : print ( ) print ( \"*** Nose library missing. Please install it. ***\" ) print ( ) raise\n", "title": "", "metadata": ""}
{"_id": "6e3009afc83820e07fc541483c28ac01", "text": "def vectorsToMatrix ( aa , bb ) : MM = np . zeros ( [ 3 , 3 ] , np . float ) for ii in range ( 3 ) : for jj in range ( 3 ) : MM [ ii , jj ] = aa [ ii ] * bb [ jj ] return MM\n", "title": "", "metadata": ""}
{"_id": "7c778a84692d86fb5606d95e91b9b4d8", "text": "def dashrepl ( value ) : patt = re . compile ( r'\\W' , re . UNICODE ) return re . sub ( patt , '-' , value )\n", "title": "", "metadata": ""}
{"_id": "d401ed6e4d2b26ae1add262fd1d8da7a", "text": "def sorted_product_set ( array_a , array_b ) : return np . sort ( np . concatenate ( [ array_a [ i ] * array_b for i in xrange ( len ( array_a ) ) ] , axis = 0 ) ) [ : : - 1 ]\n", "title": "", "metadata": ""}
{"_id": "c6b7bbfd995f91639a6a7c6a49817035", "text": "def set_header ( self , name , value ) : self . _headers [ _hkey ( name ) ] = [ _hval ( value ) ]\n", "title": "", "metadata": ""}
{"_id": "070e37e2f2e5ded4b92c287a3bb1b0c4", "text": "def encode_to_shape ( inputs , shape , scope ) : with tf . variable_scope ( scope , reuse = tf . AUTO_REUSE ) : w , h = shape [ 1 ] , shape [ 2 ] x = inputs x = tfl . flatten ( x ) x = tfl . dense ( x , w * h , activation = None , name = \"enc_dense\" ) x = tf . reshape ( x , ( - 1 , w , h , 1 ) ) return x\n", "title": "", "metadata": ""}
{"_id": "066a6a7f71ab5131a1dc9f4e1e750e3a", "text": "def iter_with_last ( iterable ) : # Ensure it's an iterator and get the first field iterable = iter ( iterable ) prev = next ( iterable ) for item in iterable : # Lag by one item so I know I'm not at the end yield False , prev prev = item # Last item yield True , prev\n", "title": "", "metadata": ""}
{"_id": "a81789f0212d64ebc18ac16f03089d96", "text": "def alter_change_column ( self , table , column , field ) : return self . _update_column ( table , column , lambda a , b : b )\n", "title": "", "metadata": ""}
{"_id": "236d2d15343783a658492caa5dfc881a", "text": "def isbinary ( * args ) : return all ( map ( lambda c : isnumber ( c ) or isbool ( c ) , args ) )\n", "title": "", "metadata": ""}
{"_id": "257f7ef2ba8e01cd55f30bc42689030a", "text": "def random_int ( self , min = 0 , max = 9999 , step = 1 ) : return self . generator . random . randrange ( min , max + 1 , step )\n", "title": "", "metadata": ""}
{"_id": "ac5d22d8a625cfaea7573db1a7758ec9", "text": "def kill ( self ) : if self . process : self . process . kill ( ) self . process . wait ( )\n", "title": "", "metadata": ""}
{"_id": "345c32a6c9e7f6750638911d96e59a20", "text": "def _letter_map ( word ) : lmap = { } for letter in word : try : lmap [ letter ] += 1 except KeyError : lmap [ letter ] = 1 return lmap\n", "title": "", "metadata": ""}
{"_id": "b01abf799e6c5cfc3287bb94df0d62b5", "text": "def haversine ( x ) : y = .5 * x y = np . sin ( y ) return y * y\n", "title": "", "metadata": ""}
{"_id": "190e9c17caa8a8d1c62e5eb7a92e6e50", "text": "def append_query_parameter ( url , parameters , ignore_if_exists = True ) : if ignore_if_exists : for key in parameters . keys ( ) : if key + \"=\" in url : del parameters [ key ] parameters_str = \"&\" . join ( k + \"=\" + v for k , v in parameters . items ( ) ) append_token = \"&\" if \"?\" in url else \"?\" return url + append_token + parameters_str\n", "title": "", "metadata": ""}
{"_id": "84804836e653c756b886ae77de351d8f", "text": "def flatten ( nested ) : flat_return = list ( ) def __inner_flat ( nested , flat ) : for i in nested : __inner_flat ( i , flat ) if isinstance ( i , list ) else flat . append ( i ) return flat __inner_flat ( nested , flat_return ) return flat_return\n", "title": "", "metadata": ""}
{"_id": "2e529508d5a49033c01e0cc5795a2cd7", "text": "def left_zero_pad ( s , blocksize ) : if blocksize > 0 and len ( s ) % blocksize : s = ( blocksize - len ( s ) % blocksize ) * b ( '\\000' ) + s return s\n", "title": "", "metadata": ""}
{"_id": "cc9878004d0544ab207d06770733cdee", "text": "def resize ( self , width , height ) : if not self . fbo : return # pyqt reports sizes in actual buffer size self . width = width // self . widget . devicePixelRatio ( ) self . height = height // self . widget . devicePixelRatio ( ) self . buffer_width = width self . buffer_height = height super ( ) . resize ( width , height )\n", "title": "", "metadata": ""}
{"_id": "0e2fe5b25fe791c80090eced0eb166d4", "text": "async def _send_plain_text ( self , request : Request , stack : Stack ) : await self . _send_text ( request , stack , None )\n", "title": "", "metadata": ""}
{"_id": "64bffb02d20980db3ef4b443358513c1", "text": "def _ignore_comments ( lines_enum ) : for line_number , line in lines_enum : line = COMMENT_RE . sub ( '' , line ) line = line . strip ( ) if line : yield line_number , line\n", "title": "", "metadata": ""}
{"_id": "666d062bb62aa08891ed2227fe0877f6", "text": "def print_log ( value_color = \"\" , value_noncolor = \"\" ) : HEADER = '\\033[92m' ENDC = '\\033[0m' print ( HEADER + value_color + ENDC + str ( value_noncolor ) )\n", "title": "", "metadata": ""}
{"_id": "95018ffe61a6f5a33a28e13f648de02b", "text": "def default_static_path ( ) : fdir = os . path . dirname ( __file__ ) return os . path . abspath ( os . path . join ( fdir , '../assets/' ) )\n", "title": "", "metadata": ""}
{"_id": "72af9318a4ef13e988bc73388cf9128a", "text": "def average_gradient ( data , * kwargs ) : return np . average ( np . array ( np . gradient ( data ) ) ** 2 )\n", "title": "", "metadata": ""}
{"_id": "4855e8ecea41749ca93f2680865b0a93", "text": "def _sort_lambda ( sortedby = 'cpu_percent' , sortedby_secondary = 'memory_percent' ) : ret = None if sortedby == 'io_counters' : ret = _sort_io_counters elif sortedby == 'cpu_times' : ret = _sort_cpu_times return ret\n", "title": "", "metadata": ""}
{"_id": "7afa15d5df3225dd9768aac7138b9c57", "text": "def read_json ( location ) : location = ensure_path ( location ) with location . open ( 'r' , encoding = 'utf8' ) as f : return ujson . load ( f )\n", "title": "", "metadata": ""}
{"_id": "186c395b8dad778b50ccff65e58cc340", "text": "def delete ( filething ) : f = FLAC ( filething ) filething . fileobj . seek ( 0 ) f . delete ( filething )\n", "title": "", "metadata": ""}
{"_id": "0e4367609f27717269c25a929de0ad33", "text": "def _valid_other_type ( x , types ) : return all ( any ( isinstance ( el , t ) for t in types ) for el in np . ravel ( x ) )\n", "title": "", "metadata": ""}
{"_id": "90eff75d5bbbd315ad9834856f2cc27c", "text": "def activate ( self ) : add_builtin = self . add_builtin for name , func in self . auto_builtins . iteritems ( ) : add_builtin ( name , func )\n", "title": "", "metadata": ""}
{"_id": "3617a7e2725b5110af0a32d3794a7a35", "text": "def load ( cls , filename ) : filename = cls . correct_file_extension ( filename ) with open ( filename , 'rb' ) as f : return pickle . load ( f )\n", "title": "", "metadata": ""}
{"_id": "50440c55cee08e57e90250d657738b14", "text": "def partition_all ( n , iterable ) : it = iter ( iterable ) while True : chunk = list ( itertools . islice ( it , n ) ) if not chunk : break yield chunk\n", "title": "", "metadata": ""}
{"_id": "9d102909c564adbc0816f03288eb6790", "text": "def set_primary_key ( self , table , column ) : self . execute ( 'ALTER TABLE {0} ADD PRIMARY KEY ({1})' . format ( wrap ( table ) , column ) ) self . _printer ( '\\tAdded primary key to {0} on column {1}' . format ( wrap ( table ) , column ) )\n", "title": "", "metadata": ""}
{"_id": "206d634730bfcac43f94221292908bcd", "text": "def close_all ( ) : for key , p in _ALL_PLOTTERS . items ( ) : p . close ( ) _ALL_PLOTTERS . clear ( ) return True\n", "title": "", "metadata": ""}
{"_id": "fca23b0a57bee9dfdca2343e672b5cdd", "text": "def _generate_key_map ( entity_list , key , entity_class ) : key_map = { } for obj in entity_list : key_map [ obj [ key ] ] = entity_class ( * * obj ) return key_map\n", "title": "", "metadata": ""}
{"_id": "f2836ef4a42e87633dd3e2e1cb3342c5", "text": "def stringToDate ( fmt = \"%Y-%m-%d\" ) : import time import datetime def conv_func ( s ) : return datetime . date ( * time . strptime ( s , fmt ) [ : 3 ] ) return conv_func\n", "title": "", "metadata": ""}
{"_id": "7427bf83e1f5d6ec669484c55c2b5454", "text": "def str_to_class ( class_name ) : mod_str , cls_str = class_name . rsplit ( '.' , 1 ) mod = __import__ ( mod_str , globals ( ) , locals ( ) , [ '' ] ) cls = getattr ( mod , cls_str ) return cls\n", "title": "", "metadata": ""}
{"_id": "140e21838647fb2105e242f30025753c", "text": "def _openpyxl_read_xl ( xl_path : str ) : try : wb = load_workbook ( filename = xl_path , read_only = True ) except : raise else : return wb\n", "title": "", "metadata": ""}
{"_id": "66479b43333ad62ae25d53ee82a79271", "text": "def text_alignment ( x , y ) : if x == 0 : ha = \"center\" elif x > 0 : ha = \"left\" else : ha = \"right\" if y == 0 : va = \"center\" elif y > 0 : va = \"bottom\" else : va = \"top\" return ha , va\n", "title": "", "metadata": ""}
{"_id": "a75a5290d438bff5a798c27ebbdf86b4", "text": "def get_area ( self ) : return ( self . p2 . x - self . p1 . x ) * ( self . p2 . y - self . p1 . y )\n", "title": "", "metadata": ""}
{"_id": "6d560dd675abfe71afe6b6d046917db8", "text": "def printc ( cls , txt , color = colors . red ) : print ( cls . color_txt ( txt , color ) )\n", "title": "", "metadata": ""}
{"_id": "6461483c42a21d87a1e19e505552f183", "text": "def check ( modname ) : for dependency in DEPENDENCIES : if dependency . modname == modname : return dependency . check ( ) else : raise RuntimeError ( \"Unkwown dependency %s\" % modname )\n", "title": "", "metadata": ""}
{"_id": "4be389b01a6694c4b6c24640e3ae3c69", "text": "def connect ( self , A , B , distance = 1 ) : self . connect1 ( A , B , distance ) if not self . directed : self . connect1 ( B , A , distance )\n", "title": "", "metadata": ""}
{"_id": "9ae065e311e5f57654784cb5953a75ec", "text": "def schedule_task ( self ) : from . tasks import publish_task publish_task . apply_async ( kwargs = { 'pk' : self . pk } , eta = self . scheduled_time )\n", "title": "", "metadata": ""}
{"_id": "846ad7fe41ab6e99328f4226bba7e40a", "text": "def get_typecast_value ( self , value , type ) : if type == entities . Variable . Type . BOOLEAN : return value == 'true' elif type == entities . Variable . Type . INTEGER : return int ( value ) elif type == entities . Variable . Type . DOUBLE : return float ( value ) else : return value\n", "title": "", "metadata": ""}
{"_id": "5f72d0895c2ec8f1e5780b905accf03c", "text": "def page_title ( step , title ) : with AssertContextManager ( step ) : assert_equals ( world . browser . title , title )\n", "title": "", "metadata": ""}
{"_id": "7279e4274e6fc136e9c63cb5a1274035", "text": "def to_percentage ( number , rounding = 2 ) : number = float ( number ) * 100 number_as_int = int ( number ) rounded = round ( number , rounding ) return '{}%' . format ( number_as_int if number_as_int == rounded else rounded )\n", "title": "", "metadata": ""}
{"_id": "077aabdd2c19a6da2bfd251616631852", "text": "def lint ( args ) : application = get_current_application ( ) if not args : args = [ application . name , 'tests' ] args = [ 'flake8' ] + list ( args ) run . main ( args , standalone_mode = False )\n", "title": "", "metadata": ""}
{"_id": "a188b7b289b96a4eab2dff93d71b4c37", "text": "def ResetConsoleColor ( ) -> bool : if sys . stdout : sys . stdout . flush ( ) bool ( ctypes . windll . kernel32 . SetConsoleTextAttribute ( _ConsoleOutputHandle , _DefaultConsoleColor ) )\n", "title": "", "metadata": ""}
{"_id": "e274df91c96a331ddedcdb0d177a536d", "text": "def label_from_bin ( buf ) : mpls_label = type_desc . Int3 . to_user ( six . binary_type ( buf ) ) return mpls_label >> 4 , mpls_label & 1\n", "title": "", "metadata": ""}
{"_id": "a8254f635fed480c27e5b8c50d41bd30", "text": "def is_unix_style ( flags ) : return ( util . platform ( ) != \"windows\" or ( not bool ( flags & REALPATH ) and get_case ( flags ) ) ) and not flags & _FORCEWIN\n", "title": "", "metadata": ""}
{"_id": "41040085b5165ca427f19f65d2dabd70", "text": "def resize ( im , short , max_size ) : im_shape = im . shape im_size_min = np . min ( im_shape [ 0 : 2 ] ) im_size_max = np . max ( im_shape [ 0 : 2 ] ) im_scale = float ( short ) / float ( im_size_min ) # prevent bigger axis from being more than max_size: if np . round ( im_scale * im_size_max ) > max_size : im_scale = float ( max_size ) / float ( im_size_max ) im = cv2 . resize ( im , None , None , fx = im_scale , fy = im_scale , interpolation = cv2 . INTER_LINEAR ) return im , im_scale\n", "title": "", "metadata": ""}
{"_id": "bf06a577e8a76883a63f740559f0d31b", "text": "def prune ( self , n ) : if self . minimize : self . data = self . data [ : n ] else : self . data = self . data [ - 1 * n : ]\n", "title": "", "metadata": ""}
{"_id": "9daaa4b0d79564879bc0eb28fce3a979", "text": "def exit ( self ) : if self . _server is not None : self . _server . shutdown ( ) self . _server . server_close ( ) self . _server = None\n", "title": "", "metadata": ""}
{"_id": "7b53a021578cb5fa594498aa78cd6c71", "text": "def load ( self , filename = 'classifier.dump' ) : ifile = open ( filename , 'r+' ) self . classifier = pickle . load ( ifile ) ifile . close ( )\n", "title": "", "metadata": ""}
{"_id": "778cd51491adf831ded7a390d8c63b32", "text": "def findLastCharIndexMatching ( text , func ) : for i in range ( len ( text ) - 1 , - 1 , - 1 ) : if func ( text [ i ] ) : return i\n", "title": "", "metadata": ""}
{"_id": "ff3b88b27e866ddb741d770b1dd096e2", "text": "def file_found ( filename , force ) : if os . path . exists ( filename ) and not force : logger . info ( \"Found %s; skipping...\" % filename ) return True else : return False\n", "title": "", "metadata": ""}
{"_id": "592d4f5d4e848ac17e0506c3f57a9181", "text": "def split_strings_in_list_retain_spaces ( orig_list ) : temp_list = list ( ) for line in orig_list : line_split = __re . split ( r'(\\s+)' , line ) temp_list . append ( line_split ) return temp_list\n", "title": "", "metadata": ""}
{"_id": "086d9d2e8c9dfa3318eed8465362fab6", "text": "def get_height_for_line ( self , lineno ) : if self . wrap_lines : return self . ui_content . get_height_for_line ( lineno , self . window_width ) else : return 1\n", "title": "", "metadata": ""}
{"_id": "e9743d47512e9b675af27bb71dda2bf0", "text": "def generate_id ( self , obj ) : object_type = type ( obj ) . __name__ . lower ( ) return '{}_{}' . format ( object_type , self . get_object_id ( obj ) )\n", "title": "", "metadata": ""}
{"_id": "1e04fbd857af10900338a6a1e7185358", "text": "def delete ( self , key_name ) : self . db . remove ( Query ( ) . name == key_name ) return self . get ( key_name ) == { }\n", "title": "", "metadata": ""}
{"_id": "06bd602f08cb2833ce072343878f6f3a", "text": "def generate_hash ( self , length = 30 ) : import random , string chars = string . ascii_letters + string . digits ran = random . SystemRandom ( ) . choice hash = '' . join ( ran ( chars ) for i in range ( length ) ) return hash\n", "title": "", "metadata": ""}
{"_id": "3496b3b15941495adca9f4f607dae3eb", "text": "def get_title ( soup ) : if soup . title : return soup . title . string if soup . h1 : return soup . h1 . string return ''\n", "title": "", "metadata": ""}
{"_id": "03f030fd08df935c42a309838f7c2a17", "text": "def replace ( s , replace ) : for r in replace : s = s . replace ( * r ) return s\n", "title": "", "metadata": ""}
{"_id": "c248889ae66e48ad549925171d8c9204", "text": "def timestamping_validate ( data , schema ) : jsonschema . validate ( data , schema ) data [ 'timestamp' ] = str ( time . time ( ) )\n", "title": "", "metadata": ""}
{"_id": "34919c152f6bccd67dbe65a39c47b99b", "text": "def get_url ( self , routename , * * kargs ) : return '/' + self . routes . build ( routename , * * kargs ) . split ( ';' , 1 ) [ 1 ]\n", "title": "", "metadata": ""}
{"_id": "8a38012519d5bb24dedc6f6682a0ef05", "text": "def get_builder_toplevel ( self , builder ) : toplevel = builder . get_object ( self . toplevel_name ) if not gobject . type_is_a ( toplevel , gtk . Window ) : toplevel = None if toplevel is None : toplevel = get_first_builder_window ( builder ) return toplevel\n", "title": "", "metadata": ""}
{"_id": "40a2857dc310d34a88d1d90585698f36", "text": "def convert_ajax_data ( self , field_data ) : data = [ key for key , val in field_data . items ( ) if val ] return data\n", "title": "", "metadata": ""}
{"_id": "b996d27b0019a924edf9fbf7ee46f4f7", "text": "def covstr ( s ) : try : ret = int ( s ) except ValueError : ret = float ( s ) return ret\n", "title": "", "metadata": ""}
{"_id": "6d4eeec60a12cb6ef53dc96d4216a39d", "text": "def fopen ( name , mode = 'r' , buffering = - 1 ) : f = _fopen ( name , mode , buffering ) return _FileObjectThreadWithContext ( f , mode , buffering )\n", "title": "", "metadata": ""}
{"_id": "8e8b20159fc9e4ba960d18bb2495d2c2", "text": "def test ( nose_argsuments ) : from nose import run params = [ '__main__' , '-c' , 'nose.ini' ] params . extend ( nose_argsuments ) run ( argv = params )\n", "title": "", "metadata": ""}
{"_id": "6aa9436566ba4f13740296481df9118b", "text": "def mostLikely ( self , pred ) : if len ( pred ) == 1 : return pred . keys ( ) [ 0 ] mostLikelyOutcome = None maxProbability = 0 for prediction , probability in pred . items ( ) : if probability > maxProbability : mostLikelyOutcome = prediction maxProbability = probability return mostLikelyOutcome\n", "title": "", "metadata": ""}
{"_id": "b6c52481ed1d892b3441cfaf2d9a79ab", "text": "def linedelimited ( inlist , delimiter ) : outstr = '' for item in inlist : if type ( item ) != StringType : item = str ( item ) outstr = outstr + item + delimiter outstr = outstr [ 0 : - 1 ] return outstr\n", "title": "", "metadata": ""}
{"_id": "ec6a03ff18ef19ca9fe5f300f8c9b283", "text": "def register_modele ( self , modele : Modele ) : self . lemmatiseur . _modeles [ modele . gr ( ) ] = modele\n", "title": "", "metadata": ""}
{"_id": "6c43b78049bfeb16cda32118a51c806b", "text": "def _uniqueid ( n = 30 ) : return '' . join ( random . SystemRandom ( ) . choice ( string . ascii_uppercase + string . ascii_lowercase ) for _ in range ( n ) )\n", "title": "", "metadata": ""}
{"_id": "010b3d01b3391a7c6c3b7f7359df8379", "text": "def _str_to_list ( s ) : _list = s . split ( \",\" ) return list ( map ( lambda i : i . lstrip ( ) , _list ) )\n", "title": "", "metadata": ""}
{"_id": "b811c3d74d92d4213901671bf5c72ea7", "text": "def split ( s ) : l = [ _split ( x ) for x in _SPLIT_RE . split ( s ) ] return [ item for sublist in l for item in sublist ]\n", "title": "", "metadata": ""}
{"_id": "176781b7f23eb72b1084fa71859f45f3", "text": "def chunks ( dictionary , chunk_size ) : iterable = iter ( dictionary ) for __ in range ( 0 , len ( dictionary ) , chunk_size ) : yield { key : dictionary [ key ] for key in islice ( iterable , chunk_size ) }\n", "title": "", "metadata": ""}
{"_id": "8558db14a4e31ae48f70fbd7747a0161", "text": "def remove_from_string ( string , values ) : for v in values : string = string . replace ( v , '' ) return string\n", "title": "", "metadata": ""}
{"_id": "24b5d55bc4fb69244b7c02e09543d8c3", "text": "def is_valid_row ( cls , row ) : for k in row . keys ( ) : if row [ k ] is None : return False return True\n", "title": "", "metadata": ""}
{"_id": "4db4be3a038fd5c1c84bdc204aeef877", "text": "def is_instance_or_subclass ( val , class_ ) : try : return issubclass ( val , class_ ) except TypeError : return isinstance ( val , class_ )\n", "title": "", "metadata": ""}
{"_id": "d378d56d98c32dad2a0a0030e16c9f1e", "text": "def series_table_row_offset ( self , series ) : title_and_spacer_rows = series . index * 2 data_point_rows = series . data_point_offset return title_and_spacer_rows + data_point_rows\n", "title": "", "metadata": ""}
{"_id": "1ef0e0dcfc53e2a51c314d811cd236dc", "text": "def getCursor ( self ) : if self . connection is None : self . Connect ( ) return self . connection . cursor ( MySQLdb . cursors . DictCursor )\n", "title": "", "metadata": ""}
{"_id": "51c2fb09ac5f19428dd8470332bdb8ed", "text": "def dict_self ( self ) : return { k : v for k , v in self . __dict__ . items ( ) if k in FSM_ATTRS }\n", "title": "", "metadata": ""}
{"_id": "66fda40670b336f36d73817aae0af56f", "text": "def get_api_url ( self , lambda_name , stage_name ) : api_id = self . get_api_id ( lambda_name ) if api_id : return \"https://{}.execute-api.{}.amazonaws.com/{}\" . format ( api_id , self . boto_session . region_name , stage_name ) else : return None\n", "title": "", "metadata": ""}
{"_id": "b222d7bb890200ffe25455ecda11b3e4", "text": "def iter_finds ( regex_obj , s ) : if isinstance ( regex_obj , str ) : for m in re . finditer ( regex_obj , s ) : yield m . group ( ) else : for m in regex_obj . finditer ( s ) : yield m . group ( )\n", "title": "", "metadata": ""}
{"_id": "d1a640df71a98c201349d895d30d6302", "text": "def write_float ( self , number ) : buf = pack ( self . byte_order + \"f\" , number ) self . write ( buf )\n", "title": "", "metadata": ""}
{"_id": "71ded548ef88161a9eea7b50c7ec383f", "text": "def _converter ( self , value ) : if not isinstance ( value , datetime . date ) : raise TypeError ( '{0} is not valid date' . format ( value ) ) return value\n", "title": "", "metadata": ""}
{"_id": "349fe910a3fcec1a05f04854652b5bef", "text": "def prevPlot ( self ) : if self . stacker . currentIndex ( ) > 0 : self . stacker . setCurrentIndex ( self . stacker . currentIndex ( ) - 1 )\n", "title": "", "metadata": ""}
{"_id": "40a289f8bd2d555081430cf02e09dc1a", "text": "def validate ( self , value , model_instance , * * kwargs ) : self . get_choices_form_class ( ) . validate ( value , model_instance , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "41f2ba328422021253fca35e7e1fb7e2", "text": "def is_port_open ( port , host = \"127.0.0.1\" ) : s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) try : s . connect ( ( host , int ( port ) ) ) s . shutdown ( 2 ) return True except Exception as e : return False\n", "title": "", "metadata": ""}
{"_id": "1f7774a3af88b47b65f6d0893003b546", "text": "def create ( parallel ) : queue = { k : v for k , v in parallel . items ( ) if k in [ \"queue\" , \"cores_per_job\" , \"mem\" ] } yield queue\n", "title": "", "metadata": ""}
{"_id": "3b74731d339770ae404ea60d9cdc5db4", "text": "def _text_to_graphiz ( self , text ) : dot = Source ( text , format = 'svg' ) return dot . pipe ( ) . decode ( 'utf-8' )\n", "title": "", "metadata": ""}
{"_id": "d2e99bfb9ee4ac045f4ad3ad494f7bcc", "text": "def zoom_out ( self ) : if self . _scalefactor >= self . _sfmin : self . _scalefactor -= 1 self . scale_image ( ) self . _adjust_scrollbar ( 1 / self . _scalestep ) self . sig_zoom_changed . emit ( self . get_scaling ( ) )\n", "title": "", "metadata": ""}
{"_id": "31c2c8f1c9b1c3a8a3509d53816e47fc", "text": "def abs_img ( img ) : bool_img = np . abs ( read_img ( img ) . get_data ( ) ) return bool_img . astype ( int )\n", "title": "", "metadata": ""}
{"_id": "94c70b122cdaef049f8e17f9a6b89fc8", "text": "def months_ago ( date , nb_months = 1 ) : nb_years = nb_months // 12 nb_months = nb_months % 12 month_diff = date . month - nb_months if month_diff > 0 : new_month = month_diff else : new_month = 12 + month_diff nb_years += 1 return date . replace ( day = 1 , month = new_month , year = date . year - nb_years )\n", "title": "", "metadata": ""}
{"_id": "cd713036c2f3c9dd5af5e6b368dbfe3e", "text": "def polyline ( self , arr ) : for i in range ( 0 , len ( arr ) - 1 ) : self . line ( arr [ i ] [ 0 ] , arr [ i ] [ 1 ] , arr [ i + 1 ] [ 0 ] , arr [ i + 1 ] [ 1 ] )\n", "title": "", "metadata": ""}
{"_id": "0bb506f13339125edb1fe76e304828ad", "text": "def zoomed_scaled_array_around_mask ( self , mask , buffer = 1 ) : return self . new_with_array ( array = array_util . extracted_array_2d_from_array_2d_and_coordinates ( array_2d = self , y0 = mask . zoom_region [ 0 ] - buffer , y1 = mask . zoom_region [ 1 ] + buffer , x0 = mask . zoom_region [ 2 ] - buffer , x1 = mask . zoom_region [ 3 ] + buffer ) )\n", "title": "", "metadata": ""}
{"_id": "253c1a2da53729b67f747a7f121365b0", "text": "def decode_example ( self , example ) : img = tf . image . decode_image ( example , channels = self . _shape [ - 1 ] , dtype = tf . uint8 ) img . set_shape ( self . _shape ) return img\n", "title": "", "metadata": ""}
{"_id": "965b12d5ab0a1f89c1965904d80ff3b3", "text": "def _eager_tasklet ( tasklet ) : @ utils . wrapping ( tasklet ) def eager_wrapper ( * args , * * kwds ) : fut = tasklet ( * args , * * kwds ) _run_until_rpc ( ) return fut return eager_wrapper\n", "title": "", "metadata": ""}
{"_id": "8e80a64a7ecb9f17021c00ec9e9c6a2c", "text": "def isnumber ( * args ) : return all ( map ( lambda c : isinstance ( c , int ) or isinstance ( c , float ) , args ) )\n", "title": "", "metadata": ""}
{"_id": "530d8eb87ad05b347734c1cec7d9e1c0", "text": "def camel_to_underscore ( string ) : string = FIRST_CAP_RE . sub ( r'\\1_\\2' , string ) return ALL_CAP_RE . sub ( r'\\1_\\2' , string ) . lower ( )\n", "title": "", "metadata": ""}
{"_id": "ecbefe5fb1b89a65cf31984b7e7fee28", "text": "def to_index ( self , index_type , index_name , includes = None ) : return IndexField ( self . name , self . data_type , index_type , index_name , includes )\n", "title": "", "metadata": ""}
{"_id": "3c2f8835e8b43e30af10a06bb4134cfd", "text": "def get_default_args ( func ) : args , varargs , keywords , defaults = getargspec_no_self ( func ) return dict ( zip ( args [ - len ( defaults ) : ] , defaults ) )\n", "title": "", "metadata": ""}
{"_id": "7daf3c3b2bba878fc8036426d0e1f666", "text": "def R_rot_3d ( th ) : sx , sy , sz = np . sin ( th ) . T cx , cy , cz = np . cos ( th ) . T R = np . empty ( ( len ( th ) , 3 , 3 ) , dtype = np . float ) R [ : , 0 , 0 ] = cy * cz R [ : , 0 , 1 ] = - cy * sz R [ : , 0 , 2 ] = sy R [ : , 1 , 0 ] = sx * sy * cz + cx * sz R [ : , 1 , 1 ] = - sx * sy * sz + cx * cz R [ : , 1 , 2 ] = - sx * cy R [ : , 2 , 0 ] = - cx * sy * cz + sx * sz R [ : , 2 , 1 ] = cx * sy * sz + sx * cz R [ : , 2 , 2 ] = cx * cy return R\n", "title": "", "metadata": ""}
{"_id": "aa3995a8fb080e2d846e73cbcb22c7fe", "text": "def input_yn ( conf_mess ) : ui_erase_ln ( ) ui_print ( conf_mess ) with term . cbreak ( ) : input_flush ( ) val = input_by_key ( ) return bool ( val . lower ( ) == 'y' )\n", "title": "", "metadata": ""}
{"_id": "34831f0b3c5f5718e97cf7eb090bc864", "text": "def __deepcopy__ ( self , memo ) : # noinspection PyArgumentList return self . __class__ ( * * { key : deepcopy ( getattr ( self , key ) , memo ) for key in self . keys } )\n", "title": "", "metadata": ""}
{"_id": "dc4809e11ee58fce56ed5d0d8c52321a", "text": "def replace_sys_args ( new_args ) : # Replace sys.argv arguments # for module import old_args = sys . argv sys . argv = new_args try : yield finally : sys . argv = old_args\n", "title": "", "metadata": ""}
{"_id": "0e302fd46c34870dc327e32246363ebf", "text": "def coerce ( self , value ) : if isinstance ( value , dict ) : value = [ value ] if not isiterable_notstring ( value ) : value = [ value ] return [ coerce_single_instance ( self . lookup_field , v ) for v in value ]\n", "title": "", "metadata": ""}
{"_id": "333910481b91db8f551a9d2687d3ca42", "text": "def remover ( file_path ) : if os . path . isfile ( file_path ) : os . remove ( file_path ) return True elif os . path . isdir ( file_path ) : shutil . rmtree ( file_path ) return True else : return False\n", "title": "", "metadata": ""}
{"_id": "4dd4bed305fb1ab7a81409b2751df734", "text": "def make_symmetric ( dict ) : for key , value in list ( dict . items ( ) ) : dict [ value ] = key return dict\n", "title": "", "metadata": ""}
{"_id": "a426c9b9c3b0f537a6b125f40c41c49b", "text": "def init_mq ( self ) : mq = self . init_connection ( ) self . init_consumer ( mq ) return mq . connection\n", "title": "", "metadata": ""}
{"_id": "06446001e457e3f5e8f788fe5977ca0b", "text": "def to_tree ( self ) : tree = TreeLibTree ( ) for node in self : tree . create_node ( node , node . node_id , parent = node . parent ) return tree\n", "title": "", "metadata": ""}
{"_id": "0c22dd9758a668fa98d5e5de1a3f2e58", "text": "def _euclidean_dist ( vector_a , vector_b ) : dist = 0 for ( x , y ) in zip ( vector_a , vector_b ) : dist += ( x - y ) * ( x - y ) return math . sqrt ( dist )\n", "title": "", "metadata": ""}
{"_id": "5f1a785c6c0642d21c7a4b6abb2afcc9", "text": "def set_float ( val ) : out = None if not val in ( None , '' ) : try : out = float ( val ) except ValueError : return None if numpy . isnan ( out ) : out = default return out\n", "title": "", "metadata": ""}
{"_id": "7c7464ffae3266b50129c700f01d0b49", "text": "def info ( txt ) : print ( \"%s# %s%s%s\" % ( PR_EMPH_CC , get_time_stamp ( ) , txt , PR_NC ) ) sys . stdout . flush ( )\n", "title": "", "metadata": ""}
{"_id": "a4f46922e3fcf98221859f35200186a2", "text": "def set_strict ( self , value ) : assert isinstance ( value , bool ) self . __settings . set_strict ( value )\n", "title": "", "metadata": ""}
{"_id": "6acd2365cbb38fed44e85ab73ba36e9c", "text": "def rfft2d_freqs ( h , w ) : fy = np . fft . fftfreq ( h ) [ : , None ] # when we have an odd input dimension we need to keep one additional # frequency and later cut off 1 pixel if w % 2 == 1 : fx = np . fft . fftfreq ( w ) [ : w // 2 + 2 ] else : fx = np . fft . fftfreq ( w ) [ : w // 2 + 1 ] return np . sqrt ( fx * fx + fy * fy )\n", "title": "", "metadata": ""}
{"_id": "996cf01079412669b82fbca6b59fa411", "text": "def autoscan ( ) : for port in serial . tools . list_ports . comports ( ) : if is_micropython_usb_device ( port ) : connect_serial ( port [ 0 ] )\n", "title": "", "metadata": ""}
{"_id": "e6017b93959c998fcc52d47394739d03", "text": "def vline ( self , x , y , height , color ) : self . rect ( x , y , 1 , height , color , fill = True )\n", "title": "", "metadata": ""}
{"_id": "532549b2116a1f50ef5d0944ca2382b4", "text": "def stop_containers ( self ) : while len ( self . _containers ) : container = self . _containers . pop ( ) try : container . kill ( signal . SIGKILL ) except docker . errors . APIError : # probably doesn't exist anymore pass\n", "title": "", "metadata": ""}
{"_id": "b1fcbffb9a37bc98594ab01fdd6a9b3c", "text": "def serialize_me ( self , account , bucket_details ) : return self . dumps ( { \"account\" : account , \"detail\" : { \"request_parameters\" : { \"bucket_name\" : bucket_details [ \"Name\" ] , \"creation_date\" : bucket_details [ \"CreationDate\" ] . replace ( tzinfo = None , microsecond = 0 ) . isoformat ( ) + \"Z\" } } } ) . data\n", "title": "", "metadata": ""}
{"_id": "b5c146c75e2b496467d4d9124736c9f9", "text": "def get_keys_from_shelve ( file_name , file_location ) : temp_list = list ( ) file = __os . path . join ( file_location , file_name ) shelve_store = __shelve . open ( file ) for key in shelve_store : temp_list . append ( key ) shelve_store . close ( ) return temp_list\n", "title": "", "metadata": ""}
{"_id": "b3ab9f99d5caf82b27aeb3b8e946092e", "text": "def flush ( self ) : if self . _cache_modified_count > 0 : self . storage . write ( self . cache ) self . _cache_modified_count = 0\n", "title": "", "metadata": ""}
{"_id": "43a76fc9d1e6f8a9a17e6ed1f43e01fe", "text": "def force_iterable ( f ) : def wrapper ( * args , * * kwargs ) : r = f ( * args , * * kwargs ) if hasattr ( r , '__iter__' ) : return r else : return [ r ] return wrapper\n", "title": "", "metadata": ""}
{"_id": "aaabacd605abb851ac588dca4f948338", "text": "def is_orthogonal ( matrix : np . ndarray , * , rtol : float = 1e-5 , atol : float = 1e-8 ) -> bool : return ( matrix . shape [ 0 ] == matrix . shape [ 1 ] and np . all ( np . imag ( matrix ) == 0 ) and np . allclose ( matrix . dot ( matrix . T ) , np . eye ( matrix . shape [ 0 ] ) , rtol = rtol , atol = atol ) )\n", "title": "", "metadata": ""}
{"_id": "d3ca33adb212d51f8fee524080e46313", "text": "def image_load_time ( self ) : load_times = self . get_load_times ( 'image' ) return round ( mean ( load_times ) , self . decimal_precision )\n", "title": "", "metadata": ""}
{"_id": "518c34a5d5193bdd2c6adef424b2353b", "text": "def logout ( cache ) : cache . set ( flask . session [ 'auth0_key' ] , None ) flask . session . clear ( ) return True\n", "title": "", "metadata": ""}
{"_id": "37763a9e00b270c850f37fffd2865f9e", "text": "def save ( self ) : self . session . add ( self ) self . session . flush ( ) return self\n", "title": "", "metadata": ""}
{"_id": "1064b6ad7d1f9e0e9af66e4660ef7f5d", "text": "def cmyk ( c , m , y , k ) : return Color ( \"cmyk\" , c , m , y , k )\n", "title": "", "metadata": ""}
{"_id": "40fb82e13d2b80112805affe48caf5ed", "text": "def format ( x , format ) : # don't change the dtype, otherwise for each block the dtype may be different (string length) sl = vaex . strings . format ( x , format ) return column . ColumnStringArrow ( sl . bytes , sl . indices , sl . length , sl . offset , string_sequence = sl )\n", "title": "", "metadata": ""}
{"_id": "47e00b2529a1963f286e394842bd4c87", "text": "def _nth ( arr , n ) : try : return arr . iloc [ n ] except ( KeyError , IndexError ) : return np . nan\n", "title": "", "metadata": ""}
{"_id": "de194b043cd7b8ac31f9d944bf6d932b", "text": "def get_uniques ( l ) : result = [ ] for i in l : if i not in result : result . append ( i ) return result\n", "title": "", "metadata": ""}
{"_id": "b688a0cd51f6e06301241943d55e7cf9", "text": "def SetCursorPos ( x : int , y : int ) -> bool : return bool ( ctypes . windll . user32 . SetCursorPos ( x , y ) )\n", "title": "", "metadata": ""}
{"_id": "5786af37eabf245919459fc9ad764e4a", "text": "def make_key ( self , key , version = None ) : return '{}:{}:{}' . format ( self . prefix , version or self . version , key , )\n", "title": "", "metadata": ""}
{"_id": "afcacb1ba7733b3511e83f18a6eaab89", "text": "def get_dates_link ( url ) : urllib . request . urlretrieve ( url , \"temp.txt\" ) dates = get_dates_file ( \"temp.txt\" ) os . remove ( \"temp.txt\" ) return dates\n", "title": "", "metadata": ""}
{"_id": "9be1f3c6fdba5631a8cd2b9f6e237697", "text": "def from_years_range ( start_year , end_year ) : start = datetime . date ( start_year , 1 , 1 ) end = datetime . date ( end_year , 12 , 31 ) return DateRange ( start , end )\n", "title": "", "metadata": ""}
{"_id": "940aeb4a2964942f0385956988eb0386", "text": "def download_json ( local_filename , url , clobber = False ) : with open ( local_filename , 'w' ) as json_file : json_file . write ( json . dumps ( requests . get ( url ) . json ( ) , sort_keys = True , indent = 2 , separators = ( ',' , ': ' ) ) )\n", "title": "", "metadata": ""}
{"_id": "a88aa5deea208bf7d868ee9a09587842", "text": "def dump_nparray ( self , obj , class_name = numpy_ndarray_class_name ) : return { \"$\" + class_name : self . _json_convert ( obj . tolist ( ) ) }\n", "title": "", "metadata": ""}
{"_id": "d2b4957422355b886b24c1d48e5514c4", "text": "def _parse_boolean ( value , default = False ) : if value is None : return default try : return bool ( value ) except ValueError : return default\n", "title": "", "metadata": ""}
{"_id": "3d011d8bc9e59f140a9d24ee8b0b0da4", "text": "def write_fits ( data , header , file_name ) : hdu = fits . PrimaryHDU ( data ) hdu . header = header hdulist = fits . HDUList ( [ hdu ] ) hdulist . writeto ( file_name , overwrite = True ) logging . info ( \"Wrote {0}\" . format ( file_name ) ) return\n", "title": "", "metadata": ""}
{"_id": "f08d6e4b3422097d21d97b4c9182ee01", "text": "def parse_prefix ( identifier ) : pf , id = ( ) , identifier if \"|\" in identifier : pf , id = tuple ( identifier . split ( '|' ) [ : - 1 ] ) , identifier . split ( '|' ) [ - 1 ] return pf , id\n", "title": "", "metadata": ""}
{"_id": "7ca48a3c15ac699791336d7a86664dc0", "text": "def boxes_intersect ( box1 , box2 ) : xmin1 , xmax1 , ymin1 , ymax1 = box1 xmin2 , xmax2 , ymin2 , ymax2 = box2 if interval_intersection_width ( xmin1 , xmax1 , xmin2 , xmax2 ) and interval_intersection_width ( ymin1 , ymax1 , ymin2 , ymax2 ) : return True else : return False\n", "title": "", "metadata": ""}
{"_id": "a5c83501f4b31e7bf69c6f4f88d5d007", "text": "def block_diag ( * blocks : np . ndarray ) -> np . ndarray : for b in blocks : if b . shape [ 0 ] != b . shape [ 1 ] : raise ValueError ( 'Blocks must be square.' ) if not blocks : return np . zeros ( ( 0 , 0 ) , dtype = np . complex128 ) n = sum ( b . shape [ 0 ] for b in blocks ) dtype = functools . reduce ( _merge_dtypes , ( b . dtype for b in blocks ) ) result = np . zeros ( shape = ( n , n ) , dtype = dtype ) i = 0 for b in blocks : j = i + b . shape [ 0 ] result [ i : j , i : j ] = b i = j return result\n", "title": "", "metadata": ""}
{"_id": "1cf8e98291cab1a8941b60d789ec94b6", "text": "def delete_duplicates ( seq ) : seen = set ( ) seen_add = seen . add return [ x for x in seq if not ( x in seen or seen_add ( x ) ) ]\n", "title": "", "metadata": ""}
{"_id": "5c5807691731f188018579730434fbd8", "text": "def get_column_keys_and_names ( table ) : ins = inspect ( table ) return ( ( k , c . name ) for k , c in ins . mapper . c . items ( ) )\n", "title": "", "metadata": ""}
{"_id": "7e23659169baafb9a586a8f49291de48", "text": "def str_to_boolean ( input_str ) : if not isinstance ( input_str , six . string_types ) : raise ValueError ( input_str ) input_str = str_quote_stripper ( input_str ) return input_str . lower ( ) in ( \"true\" , \"t\" , \"1\" , \"y\" , \"yes\" )\n", "title": "", "metadata": ""}
{"_id": "77860262a8fc335ace8d710a36cca020", "text": "def as_dict ( df , ix = ':' ) : if isinstance ( df . index , pd . DatetimeIndex ) : df [ 'datetime' ] = df . index return df . to_dict ( orient = 'records' ) [ ix ]\n", "title": "", "metadata": ""}
{"_id": "8fa5dd94ced7a76463d7de2695ea2a8a", "text": "def ask_str ( question : str , default : str = None ) : default_q = \" [default: {0}]: \" . format ( default ) if default is not None else \"\" answer = input ( \"{0} [{1}]: \" . format ( question , default_q ) ) if answer == \"\" : return default return answer\n", "title": "", "metadata": ""}
{"_id": "d2ae4f7b30bdfa317a33012475b768a1", "text": "def include_raw_constructor ( self , loader , node ) : path = convert_path ( node . value ) with open ( path , 'r' ) as f : config = f . read ( ) config = self . inject_include_info ( path , config , include_type = 'include-raw' ) self . add_file ( path , config ) return config\n", "title": "", "metadata": ""}
{"_id": "0ea345009fc31a12f212d627d2280839", "text": "def _shape ( self ) : return tuple ( reversed ( self . output_dims ( ) ) ) + tuple ( reversed ( self . input_dims ( ) ) )\n", "title": "", "metadata": ""}
{"_id": "5cdd870fb1df1f55cf5ca038b1dfefec", "text": "def _split ( string , splitters ) : part = '' for character in string : if character in splitters : yield part part = '' else : part += character yield part\n", "title": "", "metadata": ""}
{"_id": "83acf629eadb9876bb35f298c0382e6b", "text": "def comments ( tag , limit = 0 , flags = 0 , * * kwargs ) : return [ comment for comment in cm . CommentsMatch ( tag ) . get_comments ( limit ) ]\n", "title": "", "metadata": ""}
{"_id": "9ee487347f55050f51f5f426e3fe610b", "text": "def triangle_area ( pt1 , pt2 , pt3 ) : a = 0.0 a += pt1 [ 0 ] * pt2 [ 1 ] - pt2 [ 0 ] * pt1 [ 1 ] a += pt2 [ 0 ] * pt3 [ 1 ] - pt3 [ 0 ] * pt2 [ 1 ] a += pt3 [ 0 ] * pt1 [ 1 ] - pt1 [ 0 ] * pt3 [ 1 ] return abs ( a ) / 2\n", "title": "", "metadata": ""}
{"_id": "e49b30aa6b5861103a798c0d01c93ef9", "text": "def mixedcase ( path ) : words = path . split ( '_' ) return words [ 0 ] + '' . join ( word . title ( ) for word in words [ 1 : ] )\n", "title": "", "metadata": ""}
{"_id": "d09fa3ff45c8b83accd29e77892a0484", "text": "def update ( self , * * kwargs ) : for key , value in kwargs . items ( ) : setattr ( self , key , value )\n", "title": "", "metadata": ""}
{"_id": "1de1744fe4942e846d13cbf38af259ab", "text": "def get_cached_data ( datatable , * * kwargs ) : cache_key = '%s%s' % ( CACHE_PREFIX , datatable . get_cache_key ( * * kwargs ) ) data = cache . get ( cache_key ) log . debug ( \"Reading data from cache at %r: %r\" , cache_key , data ) return data\n", "title": "", "metadata": ""}
{"_id": "2e8dda263b58209ba9dc0581f862d5bb", "text": "def getTypeStr ( _type ) : if isinstance ( _type , CustomType ) : return str ( _type ) if hasattr ( _type , '__name__' ) : return _type . __name__ return ''\n", "title": "", "metadata": ""}
{"_id": "ced54eda5a7189d3b284e8577b25427e", "text": "def _initialize_id ( self ) : self . id = str ( self . db . incr ( self . _key [ 'id' ] ) )\n", "title": "", "metadata": ""}
{"_id": "958f181b872ff1965169336cec21a610", "text": "def puts_err ( s = '' , newline = True , stream = STDERR ) : puts ( s , newline , stream )\n", "title": "", "metadata": ""}
{"_id": "321bd85fda72414d54c6a7c3b6ff6ba8", "text": "def load_db ( file , db , verbose = True ) : db_data = json . load ( file , verbose = verbose ) return _load ( db_data , db )\n", "title": "", "metadata": ""}
{"_id": "027d6c866a00ee4f91a267ac1164d772", "text": "def WritePythonFile ( file_descriptor , package , version , printer ) : _WriteFile ( file_descriptor , package , version , _ProtoRpcPrinter ( printer ) )\n", "title": "", "metadata": ""}
{"_id": "b54bf1eb3cc17685410874d72c390d00", "text": "def normalize ( name ) : # Name should not contain some specials chars (issue #1068) ret = name . replace ( ':' , '' ) ret = ret . replace ( '%' , '' ) ret = ret . replace ( ' ' , '_' ) return ret\n", "title": "", "metadata": ""}
{"_id": "5234a7019e3c8bc7e4cae1510649001f", "text": "def _getVirtualScreenRect ( self ) : SM_XVIRTUALSCREEN = 76 # Left of virtual screen SM_YVIRTUALSCREEN = 77 # Top of virtual screen SM_CXVIRTUALSCREEN = 78 # Width of virtual screen SM_CYVIRTUALSCREEN = 79 # Height of virtual screen return ( self . _user32 . GetSystemMetrics ( SM_XVIRTUALSCREEN ) , self . _user32 . GetSystemMetrics ( SM_YVIRTUALSCREEN ) , self . _user32 . GetSystemMetrics ( SM_CXVIRTUALSCREEN ) , self . _user32 . GetSystemMetrics ( SM_CYVIRTUALSCREEN ) )\n", "title": "", "metadata": ""}
{"_id": "70bba726b9e9310a7cf571b5c0af0a08", "text": "def unique_element ( ll ) : seen = { } result = [ ] for item in ll : if item in seen : continue seen [ item ] = 1 result . append ( item ) return result\n", "title": "", "metadata": ""}
{"_id": "99e2775603ed563345d344c577ca0d69", "text": "def convertDatetime ( t ) : epoch = datetime . datetime . utcfromtimestamp ( 0 ) delta = t - epoch millis = delta . total_seconds ( ) * 1000 return int ( millis )\n", "title": "", "metadata": ""}
{"_id": "843c6f06d9351176b1354e6c16f63b41", "text": "def matrix_at_check ( self , original , loc , tokens ) : return self . check_py ( \"35\" , \"matrix multiplication\" , original , loc , tokens )\n", "title": "", "metadata": ""}
{"_id": "c830148ad490d2b103cdc6648011614f", "text": "def stdout_display ( ) : if sys . version_info [ 0 ] == 2 : yield SmartBuffer ( sys . stdout ) else : yield SmartBuffer ( sys . stdout . buffer )\n", "title": "", "metadata": ""}
{"_id": "105487842c314d43df5ca6be58de4c2d", "text": "def lpush ( self , key , * args ) : redis_list = self . _get_list ( key , 'LPUSH' , create = True ) # Creates the list at this key if it doesn't exist, and appends args to its beginning args_reversed = [ self . _encode ( arg ) for arg in args ] args_reversed . reverse ( ) updated_list = args_reversed + redis_list self . redis [ self . _encode ( key ) ] = updated_list # Return the length of the list after the push operation return len ( updated_list )\n", "title": "", "metadata": ""}
{"_id": "269a2123cb40b9991f717b08ad0480a7", "text": "def _make_sql_params ( self , kw ) : return [ '%s=?' % k for k in kw . keys ( ) ] for k , v in kw . iteritems ( ) : vals . append ( '%s=?' % k ) return vals\n", "title": "", "metadata": ""}
{"_id": "d2339e28e7c1b961cec3a9079439dec1", "text": "def reset_params ( self ) : self . __params = dict ( [ p , None ] for p in self . param_names ) self . set_params ( self . param_defaults )\n", "title": "", "metadata": ""}
{"_id": "79b2904a6226fa8b0d22817326f64633", "text": "def get_current_item ( self ) : l = self . selectedIndexes ( ) if len ( l ) > 0 : return self . model ( ) . get_item ( l [ 0 ] )\n", "title": "", "metadata": ""}
{"_id": "65955804bf41ac064541a4d2d8cf45fa", "text": "def numpy ( self ) : # load GDCM's image reading functionality image_reader = gdcm . ImageReader ( ) image_reader . SetFileName ( self . fname ) if not image_reader . Read ( ) : raise IOError ( \"Could not read DICOM image\" ) pixel_array = self . _gdcm_to_numpy ( image_reader . GetImage ( ) ) return pixel_array\n", "title": "", "metadata": ""}
{"_id": "8d72d252f2a791606e0c7c886e3989e7", "text": "def l2_norm ( params ) : flattened , _ = flatten ( params ) return np . dot ( flattened , flattened )\n", "title": "", "metadata": ""}
{"_id": "879cc496e4b3f87950b40b3bbbaed997", "text": "def _resizeColumnsToContents ( self , header , data , limit_ms ) : max_col = data . model ( ) . columnCount ( ) if limit_ms is None : max_col_ms = None else : max_col_ms = limit_ms / max ( 1 , max_col ) for col in range ( max_col ) : self . _resizeColumnToContents ( header , data , col , max_col_ms )\n", "title": "", "metadata": ""}
{"_id": "e675c59e724911b056efd5a9f5117498", "text": "def create_aws_lambda ( ctx , bucket , region_name , aws_access_key_id , aws_secret_access_key ) : from canari . commands . create_aws_lambda import create_aws_lambda create_aws_lambda ( ctx . project , bucket , region_name , aws_access_key_id , aws_secret_access_key )\n", "title": "", "metadata": ""}
{"_id": "3e9a1fe4034050846ca6f8f2d6137a46", "text": "def unique_iter ( seq ) : seen = set ( ) return [ x for x in seq if x not in seen and not seen . add ( x ) ]\n", "title": "", "metadata": ""}
{"_id": "4b50793a55a819c0a9ae3d494880249c", "text": "def apply ( self , func , args = ( ) , kwds = dict ( ) ) : return self . apply_async ( func , args , kwds ) . get ( )\n", "title": "", "metadata": ""}
{"_id": "3197cc7917a3abb422bc8b907bfb1ad7", "text": "def _print_memory ( self , memory ) : for addr , value in memory . items ( ) : print ( \"    0x%08x : 0x%08x (%d)\" % ( addr , value , value ) )\n", "title": "", "metadata": ""}
{"_id": "81d3f5246c0210be10cec1c3832d4118", "text": "def isin ( value , values ) : for i , v in enumerate ( value ) : if v not in np . array ( values ) [ : , i ] : return False return True\n", "title": "", "metadata": ""}
{"_id": "a9a12b7e22e95894c4daae847d78367a", "text": "def from_file ( filename , mime = False ) : head , foot = _file_details ( filename ) return _magic ( head , foot , mime , ext_from_filename ( filename ) )\n", "title": "", "metadata": ""}
{"_id": "73ef1ee7a49d21d6489032dcf953debe", "text": "def load ( cls , tree_path ) : with open ( tree_path ) as f : tree_dict = json . load ( f ) return cls . from_dict ( tree_dict )\n", "title": "", "metadata": ""}
{"_id": "cd59a17b608ab3bc19922d5b23d250cf", "text": "def json_pretty_dump ( obj , filename ) : with open ( filename , \"wt\" ) as fh : json . dump ( obj , fh , indent = 4 , sort_keys = 4 )\n", "title": "", "metadata": ""}
{"_id": "9b6b19837bcdb706fc801ae7c8b0100f", "text": "def replace ( self , text ) : for ( pattern , repl ) in self . patterns : text = re . subn ( pattern , repl , text ) [ 0 ] return text\n", "title": "", "metadata": ""}
{"_id": "b0d43f5c6a41b2f5e9f5822385321079", "text": "def copyFile ( input , output , replace = None ) : _found = findFile ( output ) if not _found or ( _found and replace ) : shutil . copy2 ( input , output )\n", "title": "", "metadata": ""}
{"_id": "0fb42c18a7167d7bf96c2bef96d7fe55", "text": "def alert ( text = '' , title = '' , button = OK_TEXT , root = None , timeout = None ) : assert TKINTER_IMPORT_SUCCEEDED , 'Tkinter is required for pymsgbox' return _buttonbox ( msg = text , title = title , choices = [ str ( button ) ] , root = root , timeout = timeout )\n", "title": "", "metadata": ""}
{"_id": "c55b847d3ff7acd56e41e976a14e761c", "text": "def parse_s3_url ( url ) : bucket = '' path = '' if url : result = urlparse ( url ) bucket = result . netloc path = result . path . strip ( '/' ) return bucket , path\n", "title": "", "metadata": ""}
{"_id": "4f0733de7aff3dedb91a942bb6c2f5b0", "text": "def is_valid_ipv6 ( ip_str ) : try : socket . inet_pton ( socket . AF_INET6 , ip_str ) except socket . error : return False return True\n", "title": "", "metadata": ""}
{"_id": "2944bee1808e3aa38190b4bfd4e80129", "text": "def requests_request ( method , url , * * kwargs ) : session = local_sessions . session response = session . request ( method = method , url = url , * * kwargs ) session . close ( ) return response\n", "title": "", "metadata": ""}
{"_id": "6dffa45014db145b42eafdfac440610f", "text": "def is_in ( self , point_x , point_y ) : point_array = array ( ( ( point_x , point_y ) , ) ) vertices = array ( self . points ) winding = self . inside_rule == \"winding\" result = points_in_polygon ( point_array , vertices , winding ) return result [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "c093c78afc7c0883839622987d693830", "text": "def from_uuid ( value : uuid . UUID ) -> ulid . ULID : return ulid . ULID ( value . bytes )\n", "title": "", "metadata": ""}
{"_id": "3e9c14e060b767b1dda1beef5109151a", "text": "def _weighted_selection ( l , n ) : cuml = [ ] items = [ ] total_weight = 0.0 for weight , item in l : total_weight += weight cuml . append ( total_weight ) items . append ( item ) return [ items [ bisect . bisect ( cuml , random . random ( ) * total_weight ) ] for _ in range ( n ) ]\n", "title": "", "metadata": ""}
{"_id": "3892757cffa27a6e3a0e675cf17a983c", "text": "def str2int ( string_with_int ) : return int ( \"\" . join ( [ char for char in string_with_int if char in string . digits ] ) or 0 )\n", "title": "", "metadata": ""}
{"_id": "46524939692a376b0d94db4f990766b7", "text": "def sbessely ( x , N ) : out = np . zeros ( N , dtype = np . float64 ) out [ 0 ] = - np . cos ( x ) / x out [ 1 ] = - np . cos ( x ) / ( x ** 2 ) - np . sin ( x ) / x for n in xrange ( 2 , N ) : out [ n ] = ( ( 2.0 * n - 1.0 ) / x ) * out [ n - 1 ] - out [ n - 2 ] return out\n", "title": "", "metadata": ""}
{"_id": "b503d3dfee78f4a5de21f9d2e8fc0b34", "text": "def setup ( self , pin , mode , pull_up_down = PUD_OFF ) : self . rpi_gpio . setup ( pin , self . _dir_mapping [ mode ] , pull_up_down = self . _pud_mapping [ pull_up_down ] )\n", "title": "", "metadata": ""}
{"_id": "4397496fa83b17d73cde5df6f306560c", "text": "def barv ( d , plt , title = None , rotation = 'vertical' ) : labels = sorted ( d , key = d . get , reverse = True ) index = range ( len ( labels ) ) plt . xticks ( index , labels , rotation = rotation ) plt . bar ( index , [ d [ v ] for v in labels ] ) if title is not None : plt . title ( title )\n", "title": "", "metadata": ""}
{"_id": "a25537163e530e4a5f5e0f74637f1159", "text": "def xyz2lonlat ( x , y , z ) : lon = xu . rad2deg ( xu . arctan2 ( y , x ) ) lat = xu . rad2deg ( xu . arctan2 ( z , xu . sqrt ( x ** 2 + y ** 2 ) ) ) return lon , lat\n", "title": "", "metadata": ""}
{"_id": "db61e0714091d31272bc291f7782fe84", "text": "def typename ( obj ) : if hasattr ( obj , '__class__' ) : return getattr ( obj , '__class__' ) . __name__ else : return type ( obj ) . __name__\n", "title": "", "metadata": ""}
{"_id": "e832284553231f45871cde46f0fd4293", "text": "def uint8sc ( im ) : im = np . asarray ( im ) immin = im . min ( ) immax = im . max ( ) imrange = immax - immin return cv2 . convertScaleAbs ( im - immin , alpha = 255 / imrange )\n", "title": "", "metadata": ""}
{"_id": "55b321a725a6f38efd02eec6fce36fd8", "text": "def to_json ( obj ) : i = StringIO . StringIO ( ) w = Writer ( i , encoding = 'UTF-8' ) w . write_value ( obj ) return i . getvalue ( )\n", "title": "", "metadata": ""}
{"_id": "4b245d2e4ef0f516215feb1c1883f4fb", "text": "def filtered_image ( self , im ) : q = np . fft . fftn ( im ) for k , v in self . filters : q [ k ] -= v return np . real ( np . fft . ifftn ( q ) )\n", "title": "", "metadata": ""}
{"_id": "777cbdec0431f547401dd466ead35158", "text": "def library ( func ) : @ wraps ( func ) def wrapped ( * args , * * kwargs ) : \"\"\"Transparent wrapper.\"\"\" return func ( * args , * * kwargs ) SINGLES . append ( wrapped ) return wrapped\n", "title": "", "metadata": ""}
{"_id": "b5cdecdcdf0b407e8ecc98dfd87a66f5", "text": "def get_element_with_id ( self , id ) : # Should we maintain a hashmap of ids to make this more efficient? Probably overkill. # TODO: Elements can contain nested elements (captions, footnotes, table cells, etc.) return next ( ( el for el in self . elements if el . id == id ) , None )\n", "title": "", "metadata": ""}
{"_id": "5c7152c58e89fd9d76ecedd2d6c8ed21", "text": "def adapt_array ( arr ) : out = io . BytesIO ( ) np . save ( out , arr ) out . seek ( 0 ) return sqlite3 . Binary ( out . read ( ) )\n", "title": "", "metadata": ""}
{"_id": "2ced768d2e1f9197cb5867f437b2f7d1", "text": "def _session_set ( self , key , value ) : self . session [ self . _session_key ( key ) ] = value\n", "title": "", "metadata": ""}
{"_id": "8adb0877fb531055864adf3fe99d7049", "text": "def arglexsort ( arrays ) : dtypes = ',' . join ( array . dtype . str for array in arrays ) recarray = np . empty ( len ( arrays [ 0 ] ) , dtype = dtypes ) for i , array in enumerate ( arrays ) : recarray [ 'f%s' % i ] = array return recarray . argsort ( )\n", "title": "", "metadata": ""}
{"_id": "5ce127abcaeb359bf59d6f2a05ec6e9e", "text": "def next ( self ) : # File-like object. result = self . readline ( ) if result == self . _empty_buffer : raise StopIteration return result\n", "title": "", "metadata": ""}
{"_id": "9d1b7fe7d5d5910a99fd851765c660f8", "text": "def __str__ ( self ) : return \", \" . join ( \"{:02x}{:02x}={:02x}{:02x}\" . format ( c [ 0 ] [ 0 ] , c [ 0 ] [ 1 ] , c [ 1 ] [ 0 ] , c [ 1 ] [ 1 ] ) for c in self . alias_array_ )\n", "title": "", "metadata": ""}
{"_id": "9bb2c8b66ff9adff8cb8c8182b215bb0", "text": "def filter_greys_using_image ( image , target ) : maskbase = numpy . array ( range ( 256 ) , dtype = numpy . uint8 ) mask = numpy . where ( numpy . in1d ( maskbase , numpy . unique ( image ) ) , maskbase , 0 ) return mask [ target ]\n", "title": "", "metadata": ""}
{"_id": "82b2ea47873264813f5e4eff0cf52d17", "text": "def _get_url ( url ) : try : data = HTTP_SESSION . get ( url , stream = True ) data . raise_for_status ( ) except requests . exceptions . RequestException as exc : raise FetcherException ( exc ) return data\n", "title": "", "metadata": ""}
{"_id": "a51cdc9ab04373408b1bdbd3b609dde8", "text": "def is_primary ( self ) : return isinstance ( self . _key , Primary ) and not isinstance ( self . _key , Sub )\n", "title": "", "metadata": ""}
{"_id": "42783240c6fd1532a85b182ce748b062", "text": "def _squeeze ( x , axis ) : x = tf . convert_to_tensor ( value = x , name = 'x' ) if axis is None : return tf . squeeze ( x , axis = None ) axis = tf . convert_to_tensor ( value = axis , name = 'axis' , dtype = tf . int32 ) axis += tf . zeros ( [ 1 ] , dtype = axis . dtype ) # Make axis at least 1d. keep_axis , _ = tf . compat . v1 . setdiff1d ( tf . range ( 0 , tf . rank ( x ) ) , axis ) return tf . reshape ( x , tf . gather ( tf . shape ( input = x ) , keep_axis ) )\n", "title": "", "metadata": ""}
{"_id": "fc738580af5995f4ad38e19a857ba717", "text": "def kill_process ( process ) : logger = logging . getLogger ( 'xenon' ) logger . info ( 'Terminating Xenon-GRPC server.' ) os . kill ( process . pid , signal . SIGINT ) process . wait ( )\n", "title": "", "metadata": ""}
{"_id": "ce8f53b6e8939cbcf4f3cb4f726028fc", "text": "def get_month_namedays ( self , month = None ) : if month is None : month = datetime . now ( ) . month return self . NAMEDAYS [ month - 1 ]\n", "title": "", "metadata": ""}
{"_id": "aceb07d00d1518672f22e38fe5c235f3", "text": "def filehash ( path ) : with open ( path , \"rU\" ) as f : return md5 ( py3compat . str_to_bytes ( f . read ( ) ) ) . hexdigest ( )\n", "title": "", "metadata": ""}
{"_id": "ea04df2eedd0e885ddcaa5f7620a2aa5", "text": "def get_variables ( args ) : variables_dict = { } if args . variables : for var in args . variables : words = var . split ( '=' ) variables_dict [ words [ 0 ] ] = words [ 1 ] return variables_dict\n", "title": "", "metadata": ""}
{"_id": "f621821d181fb306adf5922c6663c9c5", "text": "def flipwritable ( fn , mode = None ) : if os . access ( fn , os . W_OK ) : return None old_mode = os . stat ( fn ) . st_mode os . chmod ( fn , stat . S_IWRITE | old_mode ) return old_mode\n", "title": "", "metadata": ""}
{"_id": "4d6deb1b1605608aae17f8b52f57f33d", "text": "def add_url_rule ( self , route , endpoint , handler ) : self . app . add_url_rule ( route , endpoint , handler )\n", "title": "", "metadata": ""}
{"_id": "0bf21461e22ba9b26eeac8b09990fde6", "text": "def is_integer_array ( val ) : return is_np_array ( val ) and issubclass ( val . dtype . type , np . integer )\n", "title": "", "metadata": ""}
{"_id": "686f76e0cb30c05fa61b9a091b839adb", "text": "def ReadTif ( tifFile ) : img = Image . open ( tifFile ) img = np . array ( img ) return img\n", "title": "", "metadata": ""}
{"_id": "e57e1c8fa2a58f9b4606955aef96dd30", "text": "def encode_dataset ( dataset , vocabulary ) : def encode ( features ) : return { k : vocabulary . encode_tf ( v ) for k , v in features . items ( ) } return dataset . map ( encode , num_parallel_calls = tf . data . experimental . AUTOTUNE )\n", "title": "", "metadata": ""}
{"_id": "f5c1463610fcdd4def11148b05707700", "text": "def getBuffer ( x ) : b = bytes ( x ) return ( c_ubyte * len ( b ) ) . from_buffer_copy ( bytes ( x ) )\n", "title": "", "metadata": ""}
{"_id": "5b6a646061da49fd156a8e34a0efe799", "text": "def add_to_toolbar ( self , toolbar , widget ) : actions = widget . toolbar_actions if actions is not None : add_actions ( toolbar , actions )\n", "title": "", "metadata": ""}
{"_id": "8edd8855aa54cacd02a419c7eb41d5b7", "text": "def write_string ( value , buff , byteorder = 'big' ) : data = value . encode ( 'utf-8' ) write_numeric ( USHORT , len ( data ) , buff , byteorder ) buff . write ( data )\n", "title": "", "metadata": ""}
{"_id": "a799c7f4e3aa903eb33f9297149eed8b", "text": "def has_field ( mc , field_name ) : try : mc . _meta . get_field ( field_name ) except FieldDoesNotExist : return False return True\n", "title": "", "metadata": ""}
{"_id": "e573e52bc360a61098b410ffab1a96e6", "text": "def cover ( session ) : session . interpreter = 'python3.6' session . install ( 'coverage' , 'pytest-cov' ) session . run ( 'coverage' , 'report' , '--show-missing' , '--fail-under=100' ) session . run ( 'coverage' , 'erase' )\n", "title": "", "metadata": ""}
{"_id": "40eb85b5514f7495958ae9e83d2b0470", "text": "def get_oauth_token ( ) : url = \"{0}/token\" . format ( DEFAULT_ORIGIN [ \"Origin\" ] ) r = s . get ( url = url ) return r . json ( ) [ \"t\" ]\n", "title": "", "metadata": ""}
{"_id": "efcdadb6904cdaff1c9f4c88510eab03", "text": "def numberp ( v ) : return ( not ( isinstance ( v , bool ) ) and ( isinstance ( v , int ) or isinstance ( v , float ) ) )\n", "title": "", "metadata": ""}
{"_id": "f21243ae3fea8310f2072d20694434d0", "text": "def column ( self ) : line , column = self . source_buffer . decompose_position ( self . begin_pos ) return column\n", "title": "", "metadata": ""}
{"_id": "4428c71416716f26a46ce374ccd57f02", "text": "def property_as_list ( self , property_name ) : try : res = self . _a_tags [ property_name ] except KeyError : return [ ] if type ( res ) == list : return res else : return [ res ]\n", "title": "", "metadata": ""}
{"_id": "cde75342a10ce8ddac04d8346938f2e7", "text": "def random_letters ( n ) : return '' . join ( random . SystemRandom ( ) . choice ( string . ascii_letters ) for _ in range ( n ) )\n", "title": "", "metadata": ""}
{"_id": "7376cdb7d77a753f2f5210ca2e3574e4", "text": "def ancestors ( self , node ) : if isinstance ( node , int ) : warnings . warn ( 'Calling ancestors() with a node id is deprecated,' ' use a DAGNode instead' , DeprecationWarning , 2 ) node = self . _id_to_node [ node ] return nx . ancestors ( self . _multi_graph , node )\n", "title": "", "metadata": ""}
{"_id": "995a400b70378d076f4bfd8b378063ef", "text": "def __init__ ( self , scope , parent ) : CodeStatement . __init__ ( self , scope , parent ) self . body = CodeBlock ( scope , self , explicit = True ) self . catches = [ ] self . finally_body = CodeBlock ( scope , self , explicit = True )\n", "title": "", "metadata": ""}
{"_id": "634899617eb12fc4605ebbbb2610c728", "text": "def kindex ( matrix , k ) : ix = ( np . arange ( len ( matrix ) ) , matrix . argsort ( axis = 0 ) [ k ] ) return ix\n", "title": "", "metadata": ""}
{"_id": "972f1f8de4ec76fe2f54e8cf1b5aeaba", "text": "def dict_keys_without_hyphens ( a_dict ) : return dict ( ( key . replace ( '-' , '_' ) , val ) for key , val in a_dict . items ( ) )\n", "title": "", "metadata": ""}
{"_id": "6d216704b6036d8332452e63253557b1", "text": "def get_java_path ( ) : java_home = os . environ . get ( \"JAVA_HOME\" ) return os . path . join ( java_home , BIN_DIR , \"java\" )\n", "title": "", "metadata": ""}
{"_id": "c03f9a643beb900f300b9c057374e52b", "text": "def warn_if_nans_exist ( X ) : null_count = count_rows_with_nans ( X ) total = len ( X ) percent = 100 * null_count / total if null_count > 0 : warning_message = 'Warning! Found {} rows of {} ({:0.2f}%) with nan values. Only ' 'complete rows will be plotted.' . format ( null_count , total , percent ) warnings . warn ( warning_message , DataWarning )\n", "title": "", "metadata": ""}
{"_id": "17788949fc3d71ace9c739ca17134954", "text": "def chunks ( arr , size ) : for i in _range ( 0 , len ( arr ) , size ) : yield arr [ i : i + size ]\n", "title": "", "metadata": ""}
{"_id": "b6a5882626c4373b7a5bc7ed635ed3f7", "text": "def get_list_dimensions ( _list ) : if isinstance ( _list , list ) or isinstance ( _list , tuple ) : return [ len ( _list ) ] + get_list_dimensions ( _list [ 0 ] ) return [ ]\n", "title": "", "metadata": ""}
{"_id": "15bffb4b4e7e6f30bbe1e4fdefe9df68", "text": "def ss ( * args , * * kwargs ) : if not args : raise ValueError ( \"you didn't pass any arguments to print out\" ) with Reflect . context ( args , * * kwargs ) as r : instance = V_CLASS ( r , stream , * * kwargs ) return instance . value ( ) . strip ( )\n", "title": "", "metadata": ""}
{"_id": "ca0d08e92835051854a9151eae2e270e", "text": "def atlasdb_format_query ( query , values ) : return \"\" . join ( [ \"%s %s\" % ( frag , \"'%s'\" % val if type ( val ) in [ str , unicode ] else val ) for ( frag , val ) in zip ( query . split ( \"?\" ) , values + ( \"\" , ) ) ] )\n", "title": "", "metadata": ""}
{"_id": "ccdb060c47ea128b5208fe40bd73ff2a", "text": "def filter_symlog ( y , base = 10.0 ) : log_base = np . log ( base ) sign = np . sign ( y ) logs = np . log ( np . abs ( y ) / log_base ) return sign * logs\n", "title": "", "metadata": ""}
{"_id": "dc9fefdc2e30d41d84f8e4ee91a2718c", "text": "def run_tests ( self ) : with _save_argv ( _sys . argv [ : 1 ] + self . addopts ) : result_code = __import__ ( 'pytest' ) . main ( ) if result_code : raise SystemExit ( result_code )\n", "title": "", "metadata": ""}
{"_id": "2893c24aab2f018beb90fd8a639dac06", "text": "def delete ( self , mutagen_file ) : for cover_tag in self . TAG_NAMES . values ( ) : try : del mutagen_file [ cover_tag ] except KeyError : pass\n", "title": "", "metadata": ""}
{"_id": "608c4feb2ac803a3da3c711d3056c829", "text": "def generic_div ( a , b ) : logger . debug ( 'Called generic_div({}, {})' . format ( a , b ) ) return a / b\n", "title": "", "metadata": ""}
{"_id": "9626a84f0e9c6c4938a7becc3c739214", "text": "def correlation_2D ( image ) : # Take the fourier transform of the image. F1 = fftpack . fft2 ( image ) # Now shift the quadrants around so that low spatial frequencies are in # the center of the 2D fourier transformed image. F2 = fftpack . fftshift ( F1 ) # Calculate a 2D power spectrum psd2D = np . abs ( F2 ) # Calculate the azimuthally averaged 1D power spectrum psd1D = analysis_util . azimuthalAverage ( psd2D ) return psd1D , psd2D\n", "title": "", "metadata": ""}
{"_id": "6519cd02c557804856677171ae06350f", "text": "def list_replace ( subject_list , replacement , string ) : for s in subject_list : string = string . replace ( s , replacement ) return string\n", "title": "", "metadata": ""}
{"_id": "7d20d4840fe4bb20ea5adcd5e98fb233", "text": "def clean_colnames ( df ) : col_list = [ ] for index in range ( _dutils . cols ( df ) ) : col_list . append ( df . columns [ index ] . strip ( ) . lower ( ) . replace ( ' ' , '_' ) ) df . columns = col_list\n", "title": "", "metadata": ""}
{"_id": "4b0d781db0311919cd4fa941415009c5", "text": "def _DateToEpoch ( date ) : tz_zero = datetime . datetime . utcfromtimestamp ( 0 ) diff_sec = int ( ( date - tz_zero ) . total_seconds ( ) ) return diff_sec * 1000000\n", "title": "", "metadata": ""}
{"_id": "45d26a678ebd0b7535331ab4c507a1e0", "text": "def close ( self ) : if not self . _closed : self . __flush ( ) object . __setattr__ ( self , \"_closed\" , True )\n", "title": "", "metadata": ""}
{"_id": "80869aa9f15989de27ca481daaf11610", "text": "def get_best_encoding ( stream ) : rv = getattr ( stream , 'encoding' , None ) or sys . getdefaultencoding ( ) if is_ascii_encoding ( rv ) : return 'utf-8' return rv\n", "title": "", "metadata": ""}
{"_id": "70af26b09e18f6e14c76af39946e1875", "text": "def debug ( ftn , txt ) : if debug_p : sys . stdout . write ( \"{0}.{1}:{2}\\n\" . format ( modname , ftn , txt ) ) sys . stdout . flush ( )\n", "title": "", "metadata": ""}
{"_id": "4ac038800d9d7c35ad57d99be3d36355", "text": "def _split_comma_separated ( string ) : return set ( text . strip ( ) for text in string . split ( ',' ) if text . strip ( ) )\n", "title": "", "metadata": ""}
{"_id": "b148a06a2b2642b422125b6ff79a42f7", "text": "def __init__ ( self , response ) : self . response = response super ( ResponseException , self ) . __init__ ( \"received {} HTTP response\" . format ( response . status_code ) )\n", "title": "", "metadata": ""}
{"_id": "ec883a4d5022cd6afa715dc7be81df9a", "text": "def http_request_json ( * args , * * kwargs ) : ret , status = http_request ( * args , * * kwargs ) return json . loads ( ret ) , status\n", "title": "", "metadata": ""}
{"_id": "acb1bf45ceee1105a581bc0324d424b0", "text": "def update ( self ) : if not self . canvas : return for visual in self . canvas . visuals : self . update_program ( visual . program ) self . canvas . update ( )\n", "title": "", "metadata": ""}
{"_id": "0898ab2ce6b13c997f55c6c286498e0c", "text": "def get_average_color ( colors ) : c = reduce ( color_reducer , colors ) total = len ( colors ) return tuple ( v / total for v in c )\n", "title": "", "metadata": ""}
{"_id": "44c8cc0527ae40aa979abef9ae03a570", "text": "def insert_ordered ( value , array ) : index = 0 # search for the last array item that value is larger than for n in range ( 0 , len ( array ) ) : if value >= array [ n ] : index = n + 1 array . insert ( index , value ) return index\n", "title": "", "metadata": ""}
{"_id": "0419a3129e0445892def001d8772f5c2", "text": "def _get_line_no_from_comments ( py_line ) : matched = LINECOL_COMMENT_RE . match ( py_line ) if matched : return int ( matched . group ( 1 ) ) else : return 0\n", "title": "", "metadata": ""}
{"_id": "ea4c5d2a50c48e42e31c7e9c226fe930", "text": "def backward_delete_word ( self , e ) : # (Control-Rubout)  self . l_buffer . backward_delete_word ( self . argument_reset ) self . finalize ( )\n", "title": "", "metadata": ""}
{"_id": "4b93039c09eb873544f5bf8e6896cf28", "text": "def cache_page ( page_cache , page_hash , cache_size ) : page_cache . append ( page_hash ) if len ( page_cache ) > cache_size : page_cache . pop ( 0 )\n", "title": "", "metadata": ""}
{"_id": "2cdd2400753723229e0562d0d81e9bad", "text": "def test ( ) : dns = ReverseDNS ( ) print ( dns . lookup ( '192.168.0.1' ) ) print ( dns . lookup ( '8.8.8.8' ) ) # Test cache print ( dns . lookup ( '8.8.8.8' ) )\n", "title": "", "metadata": ""}
{"_id": "def55ad1d18b656a233616918a523394", "text": "def setdict ( self , D ) : self . D = np . asarray ( D , dtype = self . dtype )\n", "title": "", "metadata": ""}
{"_id": "8d45e391c110ed66e82c6aaee34b71c6", "text": "def _modify ( item , func ) : result = dict ( ) for key in item : result [ func ( key ) ] = item [ key ] return result\n", "title": "", "metadata": ""}
{"_id": "1508815cfd6206dafd5c9e121f8b8a15", "text": "def copy_and_update ( dictionary , update ) : newdict = dictionary . copy ( ) newdict . update ( update ) return newdict\n", "title": "", "metadata": ""}
{"_id": "0a119dc73e1ff05156c83cacab414e60", "text": "def write_wave ( path , audio , sample_rate ) : with contextlib . closing ( wave . open ( path , 'wb' ) ) as wf : wf . setnchannels ( 1 ) wf . setsampwidth ( 2 ) wf . setframerate ( sample_rate ) wf . writeframes ( audio )\n", "title": "", "metadata": ""}
{"_id": "89eaa17f7c25cf069781463b0243d3ed", "text": "def read32 ( bytestream ) : dt = np . dtype ( np . uint32 ) . newbyteorder ( '>' ) return np . frombuffer ( bytestream . read ( 4 ) , dtype = dt ) [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "839d14f099d579f693da6df6727c03d9", "text": "def fcast ( value : float ) -> TensorLike : newvalue = tf . cast ( value , FTYPE ) if DEVICE == 'gpu' : newvalue = newvalue . gpu ( ) # Why is this needed?  # pragma: no cover return newvalue\n", "title": "", "metadata": ""}
{"_id": "e05af6194e4b4b8aad8105a9e16ff5f5", "text": "def args_update ( self ) : for key , value in self . _config_data . items ( ) : setattr ( self . _default_args , key , value )\n", "title": "", "metadata": ""}
{"_id": "44d70c8dc607c255b762e644b04a6191", "text": "def allclose ( a , b ) : from numpy import allclose return ( a . shape == b . shape ) and allclose ( a , b )\n", "title": "", "metadata": ""}
{"_id": "f5289e48ed26a6d10c3bf4d55bbd96d9", "text": "def parse_dim ( features , check = True ) : # try: dim = features [ 0 ] . shape [ 1 ] # except IndexError: #     dim = 1 if check and not dim > 0 : raise IOError ( 'features dimension must be strictly positive' ) if check and not all ( [ d == dim for d in [ x . shape [ 1 ] for x in features ] ] ) : raise IOError ( 'all files must have the same feature dimension' ) return dim\n", "title": "", "metadata": ""}
{"_id": "3e912dad073e5d8fa2dd386e303bc49d", "text": "def set_constraint_bound ( self , name , value ) : index = self . _get_constraint_index ( name ) self . upper_bounds [ index ] = value self . _reset_solution ( )\n", "title": "", "metadata": ""}
{"_id": "964d3eb87fab992421e169f10b23cec2", "text": "def is_changed ( ) : executed , changed_lines = execute_git ( 'status --porcelain' , output = False ) merge_not_finished = mod_path . exists ( '.git/MERGE_HEAD' ) return changed_lines . strip ( ) or merge_not_finished\n", "title": "", "metadata": ""}
{"_id": "32755fa76662e2ebe0ea4090815670ba", "text": "def _stdout_raw ( self , s ) : print ( s , end = '' , file = sys . stdout ) sys . stdout . flush ( )\n", "title": "", "metadata": ""}
{"_id": "7925018c6f2c2e72d506426f83d24804", "text": "def calculate_dimensions ( image , long_side , short_side ) : if image . width >= image . height : return '{0}x{1}' . format ( long_side , short_side ) return '{0}x{1}' . format ( short_side , long_side )\n", "title": "", "metadata": ""}
{"_id": "02f7a51502f50b2bb5c0890d3946b739", "text": "def _check_for_duplicate_sequence_names ( self , fasta_file_path ) : found_sequence_names = set ( ) for record in SeqIO . parse ( fasta_file_path , 'fasta' ) : name = record . name if name in found_sequence_names : return name found_sequence_names . add ( name ) return False\n", "title": "", "metadata": ""}
{"_id": "c38495e0a6c77d05260e52ed933d9474", "text": "def getDimensionForImage ( filename , maxsize ) : try : from PIL import Image except ImportError : return None img = Image . open ( filename ) width , height = img . size if width > maxsize [ 0 ] or height > maxsize [ 1 ] : img . thumbnail ( maxsize ) out . info ( \"Downscaled display size from %s to %s\" % ( ( width , height ) , img . size ) ) return img . size\n", "title": "", "metadata": ""}
{"_id": "98a806d135c905f2a0cd9b14a7db9dc4", "text": "def sub ( name , func , * * kwarg ) : sp = subparsers . add_parser ( name , * * kwarg ) sp . set_defaults ( func = func ) sp . arg = sp . add_argument return sp\n", "title": "", "metadata": ""}
{"_id": "6ec4d1af6a0751b3ae7d7b206a60eb50", "text": "def retrieve_by_id ( self , id_ ) : items_with_id = [ item for item in self if item . id == int ( id_ ) ] if len ( items_with_id ) == 1 : return items_with_id [ 0 ] . retrieve ( )\n", "title": "", "metadata": ""}
{"_id": "e4b5cd18c31f3f8d422cf1a5825c3202", "text": "def byteswap ( data , word_size = 4 ) : return reduce ( lambda x , y : x + '' . join ( reversed ( y ) ) , chunks ( data , word_size ) , '' )\n", "title": "", "metadata": ""}
{"_id": "bc810064e61281ba9956e75d7ef2ad7b", "text": "def compute_depth ( self ) : left_depth = self . left_node . compute_depth ( ) if self . left_node else 0 right_depth = self . right_node . compute_depth ( ) if self . right_node else 0 return 1 + max ( left_depth , right_depth )\n", "title": "", "metadata": ""}
{"_id": "1810dff2635b7b7dcda0d97e5c7e41f1", "text": "def _stdin_ready_posix ( ) : infds , outfds , erfds = select . select ( [ sys . stdin ] , [ ] , [ ] , 0 ) return bool ( infds )\n", "title": "", "metadata": ""}
{"_id": "555070975429aaf14f659129584191cd", "text": "def attach_to_container ( self , container_id ) : sock = self . _docker . containers . get ( container_id ) . attach_socket ( params = { 'stdin' : 1 , 'stdout' : 1 , 'stderr' : 0 , 'stream' : 1 , } ) # fix a problem with docker-py; we must keep a reference of sock at every time return FixDockerSocket ( sock )\n", "title": "", "metadata": ""}
{"_id": "cd87b48e31593eebb7d7c7e5f56c74ef", "text": "def validate_args ( * * args ) : if not args [ 'query' ] : print ( \"\\nMissing required query argument.\" ) sys . exit ( ) for key in DEFAULTS : if key not in args : args [ key ] = DEFAULTS [ key ] return args\n", "title": "", "metadata": ""}
{"_id": "3db8e8e330ee86e9c4949b80f572ab30", "text": "def _closeResources ( self ) : logger . info ( \"Closing: {}\" . format ( self . _fileName ) ) self . _h5Group . close ( ) self . _h5Group = None\n", "title": "", "metadata": ""}
{"_id": "c5bd4b1fbe378c3831174333ad0e888f", "text": "def putkeyword ( self , keyword , value , makesubrecord = False ) : return self . _table . putcolkeyword ( self . _column , keyword , value , makesubrecord )\n", "title": "", "metadata": ""}
{"_id": "9a1560695a5c25f085b45621ead08a66", "text": "def included_length ( self ) : return sum ( [ shot . length for shot in self . shots if shot . is_included ] )\n", "title": "", "metadata": ""}
{"_id": "a8d16f1cf1783524127881cbc3e0681f", "text": "def save_to_16bit_wave_file ( fname , sig , rate ) : with closing ( wave . open ( fname , \"wb\" ) ) as wave_file : wave_file . setnchannels ( 1 ) wave_file . setsampwidth ( 2 ) wave_file . setframerate ( rate ) for chunk in chunks ( ( clip ( sig ) * 2 ** 15 ) . map ( int ) , dfmt = \"h\" , padval = 0 ) : wave_file . writeframes ( chunk )\n", "title": "", "metadata": ""}
{"_id": "d5e3f1198e9e8b5ef8a6ed6e6729c15a", "text": "def to_bytes_or_none ( value ) : if value == ffi . NULL : return None elif isinstance ( value , ffi . CData ) : return ffi . string ( value ) else : raise ValueError ( 'Value must be char[] or NULL' )\n", "title": "", "metadata": ""}
{"_id": "b5c4afda39a643d23ae05baecb5a7b51", "text": "def incr ( self , key , incr_by = 1 ) : return self . database . hincrby ( self . key , key , incr_by )\n", "title": "", "metadata": ""}
{"_id": "156dfaeb5eb7cf723bd822b6fecc150d", "text": "def _chunks ( l , n ) : for i in xrange ( 0 , len ( l ) , n ) : yield l [ i : i + n ]\n", "title": "", "metadata": ""}
{"_id": "f724a2716403caecc84815532ba98d26", "text": "def callable_validator ( v : Any ) -> AnyCallable : if callable ( v ) : return v raise errors . CallableError ( value = v )\n", "title": "", "metadata": ""}
{"_id": "c25e53ed85c0124abd78ef1c886693a7", "text": "def set_default ( self , section , option , default ) : if not self . parser . has_option ( section , option ) : self . parser . set ( section , option , default )\n", "title": "", "metadata": ""}
{"_id": "0b612964fd1ddd346e2a469af0c6ea3e", "text": "def cos_sin_deg ( deg ) : deg = deg % 360.0 if deg == 90.0 : return 0.0 , 1.0 elif deg == 180.0 : return - 1.0 , 0 elif deg == 270.0 : return 0 , - 1.0 rad = math . radians ( deg ) return math . cos ( rad ) , math . sin ( rad )\n", "title": "", "metadata": ""}
{"_id": "c5170d0627e2e65162db5cd320cd93b2", "text": "def tsv_escape ( x : Any ) -> str : if x is None : return \"\" x = str ( x ) return x . replace ( \"\\t\" , \"\\\\t\" ) . replace ( \"\\n\" , \"\\\\n\" )\n", "title": "", "metadata": ""}
{"_id": "d0f7c1fccd9d4c82bbe1f61c3db0ed60", "text": "def argsort_k_smallest ( x , k ) : if k == 0 : return np . array ( [ ] , dtype = np . intp ) if k is None or k >= len ( x ) : return np . argsort ( x ) indices = np . argpartition ( x , k ) [ : k ] values = x [ indices ] return indices [ np . argsort ( values ) ]\n", "title": "", "metadata": ""}
{"_id": "1c3500e76bc0349e7b4a1ae577c80b7f", "text": "def doc_to_html ( doc , doc_format = \"ROBOT\" ) : from robot . libdocpkg . htmlwriter import DocToHtml return DocToHtml ( doc_format ) ( doc )\n", "title": "", "metadata": ""}
{"_id": "490ee6a2adb1827f80efd86d4a695e84", "text": "def coverage ( ctx , opts = \"\" ) : return test ( ctx , coverage = True , include_slow = True , opts = opts )\n", "title": "", "metadata": ""}
{"_id": "d262f04cd9f5abddec5c8987f063d943", "text": "def select_random ( engine , table_or_columns , limit = 5 ) : s = select ( table_or_columns ) . order_by ( func . random ( ) ) . limit ( limit ) return engine . execute ( s ) . fetchall ( )\n", "title": "", "metadata": ""}
{"_id": "d6fb5b4ce076f5f4fc850b892d488741", "text": "def add_exec_permission_to ( target_file ) : mode = os . stat ( target_file ) . st_mode os . chmod ( target_file , mode | stat . S_IXUSR )\n", "title": "", "metadata": ""}
{"_id": "04b251497ffef05f567547725b12e6d8", "text": "def parse_value ( self , value ) : parsed = super ( BoolField , self ) . parse_value ( value ) return bool ( parsed ) if parsed is not None else None\n", "title": "", "metadata": ""}
{"_id": "746bdf74690fcf4d714b17ec90dc4d2e", "text": "def get_site_name ( request ) : urlparts = request . urlparts return ':' . join ( [ urlparts . hostname , str ( urlparts . port ) ] )\n", "title": "", "metadata": ""}
{"_id": "a7f91d67ee852f0c57afad7e14ff0f43", "text": "def get_longest_line_length ( text ) : lines = text . split ( \"\\n\" ) length = 0 for i in range ( len ( lines ) ) : if len ( lines [ i ] ) > length : length = len ( lines [ i ] ) return length\n", "title": "", "metadata": ""}
{"_id": "de3a48ec0ad21869e7a61ef5429fc94b", "text": "def compare_dict ( da , db ) : sa = set ( da . items ( ) ) sb = set ( db . items ( ) ) diff = sa & sb return dict ( sa - diff ) , dict ( sb - diff )\n", "title": "", "metadata": ""}
{"_id": "0696ceec79ed318f721381f03d7bd6b3", "text": "def RoundToSeconds ( cls , timestamp ) : leftovers = timestamp % definitions . MICROSECONDS_PER_SECOND scrubbed = timestamp - leftovers rounded = round ( float ( leftovers ) / definitions . MICROSECONDS_PER_SECOND ) return int ( scrubbed + rounded * definitions . MICROSECONDS_PER_SECOND )\n", "title": "", "metadata": ""}
{"_id": "6b8387ca0c5234fd77deba18a8c4f562", "text": "def _is_one_arg_pos_call ( call ) : return isinstance ( call , astroid . Call ) and len ( call . args ) == 1 and not call . keywords\n", "title": "", "metadata": ""}
{"_id": "c371ca04381549d0fb1ef8f5deba6789", "text": "def sed ( match , replacement , path , modifiers = \"\" ) : cmd = \"sed -r -i 's/%s/%s/%s' %s\" % ( match , replacement , modifiers , path ) process = Subprocess ( cmd , shell = True ) ret , out , err = process . run ( timeout = 60 ) if ret : raise SubprocessError ( \"Sed command failed!\" )\n", "title": "", "metadata": ""}
{"_id": "d08d6a2e54b274c6a762d3d73cdd6f0a", "text": "def generate_device_id ( steamid ) : h = hexlify ( sha1_hash ( str ( steamid ) . encode ( 'ascii' ) ) ) . decode ( 'ascii' ) return \"android:%s-%s-%s-%s-%s\" % ( h [ : 8 ] , h [ 8 : 12 ] , h [ 12 : 16 ] , h [ 16 : 20 ] , h [ 20 : 32 ] )\n", "title": "", "metadata": ""}
{"_id": "7141600e2d9b6bfa39d0aeac22bd5ef2", "text": "def transform_to_3d ( points , normal , z = 0 ) : d = np . cross ( normal , ( 0 , 0 , 1 ) ) M = rotation_matrix ( d ) transformed_points = M . dot ( points . T ) . T + z return transformed_points\n", "title": "", "metadata": ""}
{"_id": "d6d7e2d05a120aedefd4ef760729fd6e", "text": "def autoreload ( self , parameter_s = '' ) : if parameter_s == '' : self . _reloader . check ( True ) elif parameter_s == '0' : self . _reloader . enabled = False elif parameter_s == '1' : self . _reloader . check_all = False self . _reloader . enabled = True elif parameter_s == '2' : self . _reloader . check_all = True self . _reloader . enabled = True\n", "title": "", "metadata": ""}
{"_id": "9bc8f12196b92b62efaaae2ad4dcec1d", "text": "def random_numbers ( n ) : return '' . join ( random . SystemRandom ( ) . choice ( string . digits ) for _ in range ( n ) )\n", "title": "", "metadata": ""}
{"_id": "091a3e903e6b1895125dc0672aa8d670", "text": "def _pick_attrs ( attrs , keys ) : return dict ( ( k , v ) for k , v in attrs . items ( ) if k in keys )\n", "title": "", "metadata": ""}
{"_id": "cd9a8fbc8eed3ebb8843c413f4b244d7", "text": "def make_regex ( separator ) : return re . compile ( r'(?:' + re . escape ( separator ) + r')?((?:[^' + re . escape ( separator ) + r'\\\\]|\\\\.)+)' )\n", "title": "", "metadata": ""}
{"_id": "932d63a125348e8351b2bc40008262de", "text": "def get_ips ( self , instance_id ) : instance = self . _load_instance ( instance_id ) IPs = sum ( instance . networks . values ( ) , [ ] ) return IPs\n", "title": "", "metadata": ""}
{"_id": "759bd2d7420b9fa637c2ec80074621fd", "text": "def hmean_int ( a , a_min = 5778 , a_max = 1149851 ) : from scipy . stats import hmean return int ( round ( hmean ( np . clip ( a , a_min , a_max ) ) ) )\n", "title": "", "metadata": ""}
{"_id": "acd38f0ffba68c15fe4abd72b019138f", "text": "def end ( self ) : if not self . args . disable_autodiscover : self . autodiscover_client . close ( ) self . server . end ( )\n", "title": "", "metadata": ""}
{"_id": "14cf7c08e2b36beefdfa43a48db6c8ad", "text": "def detach ( self , * items ) : self . _visual_drag . detach ( * items ) ttk . Treeview . detach ( self , * items )\n", "title": "", "metadata": ""}
{"_id": "c8c0cf513d2bd8d9032356e45caac2ab", "text": "def to_bytes ( s , encoding = \"utf-8\" ) : if isinstance ( s , six . binary_type ) : return s if six . PY3 : return bytes ( s , encoding ) return s . encode ( encoding )\n", "title": "", "metadata": ""}
{"_id": "4c573e802f6fd0d03fcc6202ebff838c", "text": "def load_from_file ( module_path ) : from imp import load_module , PY_SOURCE imported = None if module_path : with open ( module_path , 'r' ) as openfile : imported = load_module ( 'mod' , openfile , module_path , ( 'imported' , 'r' , PY_SOURCE ) ) return imported\n", "title": "", "metadata": ""}
{"_id": "124139034f21caaa9aabaf7e954ca690", "text": "def make_bound ( lower , upper , lineno ) : return symbols . BOUND . make_node ( lower , upper , lineno )\n", "title": "", "metadata": ""}
{"_id": "06cd16f60cef3c75d7284c5c93406f12", "text": "def is_valid_image_extension ( file_path ) : valid_extensions = [ '.jpeg' , '.jpg' , '.gif' , '.png' ] _ , extension = os . path . splitext ( file_path ) return extension . lower ( ) in valid_extensions\n", "title": "", "metadata": ""}
{"_id": "35fd614b8de855619fc33ebac1ecac00", "text": "def signed_distance ( mesh , points ) : # make sure we have a numpy array points = np . asanyarray ( points , dtype = np . float64 ) # find the closest point on the mesh to the queried points closest , distance , triangle_id = closest_point ( mesh , points ) # we only care about nonzero distances nonzero = distance > tol . merge if not nonzero . any ( ) : return distance inside = mesh . ray . contains_points ( points [ nonzero ] ) sign = ( inside . astype ( int ) * 2 ) - 1 # apply sign to previously computed distance distance [ nonzero ] *= sign return distance\n", "title": "", "metadata": ""}
{"_id": "c9895e9530a78dbef71e2c824ca2afff", "text": "def all_versions ( req ) : import requests url = \"https://pypi.python.org/pypi/\" + req + \"/json\" return tuple ( requests . get ( url ) . json ( ) [ \"releases\" ] . keys ( ) )\n", "title": "", "metadata": ""}
{"_id": "d528c88eb9e43fa9bda92fb080fb5584", "text": "def yaml_to_param ( obj , name ) : return from_pyvalue ( u\"yaml:%s\" % name , unicode ( yaml . dump ( obj ) ) )\n", "title": "", "metadata": ""}
{"_id": "9ee089c8af6659e01c35769457b23b42", "text": "def _encode_bool ( name , value , dummy0 , dummy1 ) : return b\"\\x08\" + name + ( value and b\"\\x01\" or b\"\\x00\" )\n", "title": "", "metadata": ""}
{"_id": "740e4e899ce7e1ae2889db65d1e04a7f", "text": "def get_average_length_of_string ( strings ) : if not strings : return 0 return sum ( len ( word ) for word in strings ) / len ( strings )\n", "title": "", "metadata": ""}
{"_id": "df16b613e278c14bd94e6ad32e88dca7", "text": "def apply ( filter ) : def decorator ( callable ) : return lambda * args , * * kwargs : filter ( callable ( * args , * * kwargs ) ) return decorator\n", "title": "", "metadata": ""}
{"_id": "af239d6addbcc87014b10a460e31e0d0", "text": "def _scaleSinglePoint ( point , scale = 1 , convertToInteger = True ) : x , y = point if convertToInteger : return int ( round ( x * scale ) ) , int ( round ( y * scale ) ) else : return ( x * scale , y * scale )\n", "title": "", "metadata": ""}
{"_id": "4733d4224ff5551f6b75ea4ac7bf7ae7", "text": "def has_permission ( user , permission_name ) : if user and user . is_superuser : return True return permission_name in available_perm_names ( user )\n", "title": "", "metadata": ""}
{"_id": "b5b1c38dac70cb349b449ca023aac141", "text": "def set_attr ( self , name , value ) : self . exec_script ( \"node.setAttribute(%s, %s)\" % ( repr ( name ) , repr ( value ) ) )\n", "title": "", "metadata": ""}
{"_id": "dcd55284b6134691d0e6df27647058e6", "text": "def __pop_top_frame ( self ) : popped = self . __stack . pop ( ) if self . __stack : self . __stack [ - 1 ] . process_subframe ( popped )\n", "title": "", "metadata": ""}
{"_id": "47f12249a14940d3628c6f0b58eaef2d", "text": "def get_focused_window_sane ( self ) : window_ret = window_t ( 0 ) _libxdo . xdo_get_focused_window_sane ( self . _xdo , ctypes . byref ( window_ret ) ) return window_ret . value\n", "title": "", "metadata": ""}
{"_id": "39782c5fb63d5934b7d6748cdc8911af", "text": "def get_lines ( handle , line ) : for i , l in enumerate ( handle ) : if i == line : return l\n", "title": "", "metadata": ""}
{"_id": "56ca91ebd79b0b327725f3c6f3688d9b", "text": "def get_power ( self ) : power = ( yield from self . handle_int ( self . API . get ( 'power' ) ) ) return bool ( power )\n", "title": "", "metadata": ""}
{"_id": "3c710515df78119304fc70b4da08e2c0", "text": "def __len__ ( self ) : length = 0 for typ , siz , _ in self . format : length += siz return length\n", "title": "", "metadata": ""}
{"_id": "beff42f6882990270870f9530e4a7d08", "text": "def median ( ls ) : ls = sorted ( ls ) return ls [ int ( floor ( len ( ls ) / 2.0 ) ) ]\n", "title": "", "metadata": ""}
{"_id": "b1272087eebdae2245cf5f94d0679f57", "text": "def get_available_gpus ( ) : local_device_protos = device_lib . list_local_devices ( ) return [ x . name for x in local_device_protos if x . device_type == 'GPU' ]\n", "title": "", "metadata": ""}
{"_id": "f2ab72c455de8e397ba52bbf6651aba8", "text": "def pylog ( self , * args , * * kwargs ) : printerr ( self . name , args , kwargs , traceback . format_exc ( ) )\n", "title": "", "metadata": ""}
{"_id": "e9d6f1ff27ebf748a66af7b3aedec02b", "text": "def reload_localzone ( ) : global _cache_tz _cache_tz = pytz . timezone ( get_localzone_name ( ) ) utils . assert_tz_offset ( _cache_tz ) return _cache_tz\n", "title": "", "metadata": ""}
{"_id": "69ca578586b032cbf0aff46c57705773", "text": "def MessageToDict ( message , including_default_value_fields = False , preserving_proto_field_name = False ) : printer = _Printer ( including_default_value_fields , preserving_proto_field_name ) # pylint: disable=protected-access return printer . _MessageToJsonObject ( message )\n", "title": "", "metadata": ""}
{"_id": "c8a7c83ef7f79d7e906c070de72bd989", "text": "def weekly ( date = datetime . date . today ( ) ) : return date - datetime . timedelta ( days = date . weekday ( ) )\n", "title": "", "metadata": ""}
{"_id": "3c71a855859375ed7c715b59b159e7a5", "text": "def datetime_from_isoformat ( value : str ) : if sys . version_info >= ( 3 , 7 ) : return datetime . fromisoformat ( value ) return datetime . strptime ( value , '%Y-%m-%dT%H:%M:%S.%f' )\n", "title": "", "metadata": ""}
{"_id": "881e228fb90c2465748671c1c21c2a65", "text": "def retry_test ( func ) : success = False ex = Exception ( \"Unknown\" ) for i in six . moves . range ( 3 ) : try : result = func ( ) except Exception as e : time . sleep ( 1 ) ex = e else : success = True break if not success : raise ex assert success return result\n", "title": "", "metadata": ""}
{"_id": "bb4e67d43615debccfe95325d0ae251a", "text": "def set_property ( self , key , value ) : self . properties [ key ] = value self . sync_properties ( )\n", "title": "", "metadata": ""}
{"_id": "e007062d21df9caacfd348eabc24d430", "text": "def str_check ( * args , func = None ) : func = func or inspect . stack ( ) [ 2 ] [ 3 ] for var in args : if not isinstance ( var , ( str , collections . UserString , collections . abc . Sequence ) ) : name = type ( var ) . __name__ raise StringError ( f'Function {func} expected str, {name} got instead.' )\n", "title": "", "metadata": ""}
{"_id": "8c67419518e1c3fb7ffa191395049224", "text": "def local_minima ( img , min_distance = 4 ) : # @TODO: Write a unittest for this. fits = numpy . asarray ( img ) minfits = minimum_filter ( fits , size = min_distance ) # default mode is reflect minima_mask = fits == minfits good_indices = numpy . transpose ( minima_mask . nonzero ( ) ) good_fits = fits [ minima_mask ] order = good_fits . argsort ( ) return good_indices [ order ] , good_fits [ order ]\n", "title": "", "metadata": ""}
{"_id": "85b6fcdaa5d8755f30beb5f1b737e2cd", "text": "def extract ( self , destination ) : with zipfile . ZipFile ( self . archive , 'r' ) as zip_ref : zip_ref . extractall ( destination )\n", "title": "", "metadata": ""}
{"_id": "eed175e9c51ecb19f85e7cf0e5767bbd", "text": "def remove_all_handler ( self ) : for handler in self . logger . handlers [ : ] : self . logger . removeHandler ( handler ) self . _handler_cache . append ( handler )\n", "title": "", "metadata": ""}
{"_id": "d01129de2c3401c177186d3389bf9282", "text": "def Distance ( lat1 , lon1 , lat2 , lon2 ) : az12 , az21 , dist = wgs84_geod . inv ( lon1 , lat1 , lon2 , lat2 ) return az21 , dist\n", "title": "", "metadata": ""}
{"_id": "dde78972b942299174602d61384f771f", "text": "def closeEvent ( self , e ) : self . emit ( 'close_widget' ) super ( DockWidget , self ) . closeEvent ( e )\n", "title": "", "metadata": ""}
{"_id": "12d4da11f1c856b443a2ad3843a81d33", "text": "def size ( self ) : if self is NULL : return 0 return 1 + self . left . size ( ) + self . right . size ( )\n", "title": "", "metadata": ""}
{"_id": "f7704cf98f52de39f9e36067f8907d6b", "text": "def __iter__ ( self ) : for bit , mask in zip ( self . _bits , self . _mask ) : yield bit if mask else None\n", "title": "", "metadata": ""}
{"_id": "44cf1ac7ec76faebf1c00989f9e2c60b", "text": "def check_player_collision ( self ) : player_tiles = r . TileMapManager . active_map . grab_collisions ( self . char . coords ) enemy_tiles = r . TileMapManager . active_map . grab_collisions ( self . coords ) #Check to see if any of the tiles are the same. If so, there is a collision. for ptile in player_tiles : for etile in enemy_tiles : if r . TileMapManager . active_map . pixels_to_tiles ( ptile . coords ) == r . TileMapManager . active_map . pixels_to_tiles ( etile . coords ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "44603b8469d0d9a6e16eb885c8fb01ea", "text": "def with_args ( self , * args , * * kwargs ) : self . args = args self . kwargs = kwargs self . verify_arguments ( ) return self\n", "title": "", "metadata": ""}
{"_id": "f562e1a4e69cf70602eb15609911fcb8", "text": "def to_array ( self ) : dt = np . dtype ( list ( zip ( self . labels , ( c . dtype for c in self . columns ) ) ) ) arr = np . empty_like ( self . columns [ 0 ] , dt ) for label in self . labels : arr [ label ] = self [ label ] return arr\n", "title": "", "metadata": ""}
{"_id": "f0a1cddb970b7e71095028311d5a9bd9", "text": "def reverse_mapping ( mapping ) : keys , values = zip ( * mapping . items ( ) ) return dict ( zip ( values , keys ) )\n", "title": "", "metadata": ""}
{"_id": "e1958fff4ae4f7553526b879e48cce53", "text": "def plfit_lsq ( x , y ) : n = len ( x ) btop = n * ( log ( x ) * log ( y ) ) . sum ( ) - ( log ( x ) ) . sum ( ) * ( log ( y ) ) . sum ( ) bbottom = n * ( log ( x ) ** 2 ) . sum ( ) - ( log ( x ) . sum ( ) ) ** 2 b = btop / bbottom a = ( log ( y ) . sum ( ) - b * log ( x ) . sum ( ) ) / n A = exp ( a ) return A , b\n", "title": "", "metadata": ""}
{"_id": "390d0d11748841cd4c849dfef84216d6", "text": "def remove_unsafe_chars ( text ) : if isinstance ( text , six . string_types ) : text = UNSAFE_RE . sub ( '' , text ) return text\n", "title": "", "metadata": ""}
{"_id": "70f2d4efea523ac1b24de40429bb4311", "text": "def ismatch ( text , pattern ) : if hasattr ( pattern , 'search' ) : return pattern . search ( text ) is not None else : return pattern in text if Config . options . case_sensitive else pattern . lower ( ) in text . lower ( )\n", "title": "", "metadata": ""}
{"_id": "ecf6a8056a5743ea986a253ff3c85d32", "text": "def projR ( gamma , p ) : return np . multiply ( gamma . T , p / np . maximum ( np . sum ( gamma , axis = 1 ) , 1e-10 ) ) . T\n", "title": "", "metadata": ""}
{"_id": "e1e810700bf1159ec33539f869c3ce32", "text": "def get_function_class ( function_name ) : if function_name in _known_functions : return _known_functions [ function_name ] else : raise UnknownFunction ( \"Function %s is not known. Known functions are: %s\" % ( function_name , \",\" . join ( _known_functions . keys ( ) ) ) )\n", "title": "", "metadata": ""}
{"_id": "97267b556f65d63a3da44c610af2d2d0", "text": "def compare ( self , first , second ) : if first . lower ( ) == second . lower ( ) : return True else : return False\n", "title": "", "metadata": ""}
{"_id": "ae99b4549a195446704bc9785d6fd7d7", "text": "def add_range ( self , sequence , begin , end ) : sequence . parser_tree = parsing . Range ( self . value ( begin ) . strip ( \"'\" ) , self . value ( end ) . strip ( \"'\" ) ) return True\n", "title": "", "metadata": ""}
{"_id": "c2d451a2dddc6f555cd7b0e6382e8e4b", "text": "def parent ( self , index ) : childItem = self . item ( index ) parentItem = childItem . parent if parentItem == self . rootItem : parentIndex = QModelIndex ( ) else : parentIndex = self . createIndex ( parentItem . row ( ) , 0 , parentItem ) return parentIndex\n", "title": "", "metadata": ""}
{"_id": "dd7d1f5fd066e9fda5fd8ba371f902ff", "text": "def __exit__ ( self , * args ) : sys . stdout = self . _orig self . _devnull . close ( )\n", "title": "", "metadata": ""}
{"_id": "d598a51417823873d869c95ed81c5307", "text": "def runcode ( code ) : for line in code : print ( '# ' + line ) exec ( line , globals ( ) ) print ( '# return ans' ) return ans\n", "title": "", "metadata": ""}
{"_id": "f4baa7d607b02f0ca5149cc7073e13e6", "text": "def _ram_buffer ( self ) : # get the address of the RAM address = _LIB . Memory ( self . _env ) # create a buffer from the contents of the address location buffer_ = ctypes . cast ( address , ctypes . POINTER ( RAM_VECTOR ) ) . contents # create a NumPy array from the buffer return np . frombuffer ( buffer_ , dtype = 'uint8' )\n", "title": "", "metadata": ""}
{"_id": "6f9f9c731165ad2e2cc50f891cd6ec62", "text": "def total_seconds ( td ) : secs = td . seconds + td . days * 24 * 3600 if td . microseconds : secs += 1 return secs\n", "title": "", "metadata": ""}
{"_id": "f1e4e129b6faf8f6300ce6c35c9b8059", "text": "def PopAttributeContainer ( self ) : try : serialized_data = self . _list . pop ( 0 ) self . data_size -= len ( serialized_data ) return serialized_data except IndexError : return None\n", "title": "", "metadata": ""}
{"_id": "025454592af7889f83d1851129271ed1", "text": "def _correct_args ( func , kwargs ) : args = inspect . getargspec ( func ) [ 0 ] return [ kwargs [ arg ] for arg in args ] + kwargs [ '__args' ]\n", "title": "", "metadata": ""}
{"_id": "70f6f0c8e148e71c9380addc336e2c1f", "text": "def prepare ( doc ) : doc . caption_found = False doc . plot_found = False doc . listings_counter = 0\n", "title": "", "metadata": ""}
{"_id": "896538b4b255bb55d910308ef69d8776", "text": "def read_string ( buff , byteorder = 'big' ) : length = read_numeric ( USHORT , buff , byteorder ) return buff . read ( length ) . decode ( 'utf-8' )\n", "title": "", "metadata": ""}
{"_id": "4aac6465248251f658b45609891310ae", "text": "def import_path ( self ) : return os . path . join ( self . remote_root , self . pkg ) if self . pkg else self . remote_root\n", "title": "", "metadata": ""}
{"_id": "b6302cc332e8ffdfc86d21f9d2f55b85", "text": "def __delitem__ ( self , key ) : self . _keys . remove ( key ) super ( ListDict , self ) . __delitem__ ( key )\n", "title": "", "metadata": ""}
{"_id": "5c0fe60a8deb394a385608ce8f0ff26e", "text": "def is_alive ( self ) : try : self . wait ( 0 ) except WindowsError : e = sys . exc_info ( ) [ 1 ] return e . winerror == win32 . WAIT_TIMEOUT return False\n", "title": "", "metadata": ""}
{"_id": "b941f6cf5c250d9c9ff46acc8a9bd896", "text": "def smooth_array ( array , amount = 1 ) : if amount == 0 : return array # we have to store the old values in a temp array to keep the # smoothing from affecting the smoothing new_array = _n . array ( array ) for n in range ( len ( array ) ) : new_array [ n ] = smooth ( array , n , amount ) return new_array\n", "title": "", "metadata": ""}
{"_id": "0135a840972c51c66ed072197a92cf01", "text": "def step_next_line ( self ) : self . _eol . append ( self . position ) self . _lineno += 1 self . _col_offset = 0\n", "title": "", "metadata": ""}
{"_id": "84d62a2c06e6da9961fb4ac4b1380762", "text": "def str_upper ( x ) : sl = _to_string_sequence ( x ) . upper ( ) return column . ColumnStringArrow ( sl . bytes , sl . indices , sl . length , sl . offset , string_sequence = sl )\n", "title": "", "metadata": ""}
{"_id": "f67832d29466e9dc618722c2b431dc66", "text": "def dispatch ( self ) : try : webapp2 . RequestHandler . dispatch ( self ) finally : self . session_store . save_sessions ( self . response )\n", "title": "", "metadata": ""}
{"_id": "c4cd4985f91de0f9e865412138696934", "text": "def we_are_in_lyon ( ) : import socket try : hostname = socket . gethostname ( ) ip = socket . gethostbyname ( hostname ) except socket . gaierror : return False return ip . startswith ( \"134.158.\" )\n", "title": "", "metadata": ""}
{"_id": "0391ff235b2ed764fa8a2ab9cd447133", "text": "def unfolding ( tens , i ) : return reshape ( tens . full ( ) , ( np . prod ( tens . n [ 0 : ( i + 1 ) ] ) , - 1 ) )\n", "title": "", "metadata": ""}
{"_id": "5c2c9ad5f1f2ea5d4bcc31863cead7c5", "text": "def update_context ( self , ctx ) : assert isinstance ( ctx , dict ) ctx [ str ( self . context_id ) ] = self . value\n", "title": "", "metadata": ""}
{"_id": "b42ff644af823036b2e115de035a80ec", "text": "def _get_xy_scaling_parameters ( self ) : return self . mx , self . bx , self . my , self . by\n", "title": "", "metadata": ""}
{"_id": "a14f134c18abc25436b956f230e05e45", "text": "def mouseMoveEvent ( self , event ) : self . declaration . mouse_move_event ( event ) super ( QtGraphicsView , self ) . mouseMoveEvent ( event )\n", "title": "", "metadata": ""}
{"_id": "b3e9edaf093abe83d24b59b56a6e8e32", "text": "def average_price ( quantity_1 , price_1 , quantity_2 , price_2 ) : return ( quantity_1 * price_1 + quantity_2 * price_2 ) / ( quantity_1 + quantity_2 )\n", "title": "", "metadata": ""}
{"_id": "70b6316a09260c87aeb45e78c108634e", "text": "def _genTex2D ( self ) : for face in range ( 6 ) : gl . glTexImage2D ( self . target0 + face , 0 , self . internal_fmt , self . width , self . height , 0 , self . pixel_fmt , gl . GL_UNSIGNED_BYTE , 0 )\n", "title": "", "metadata": ""}
{"_id": "adb7e43bb973ee8af4b56a2d62819ba9", "text": "def _maybe_cast_to_float64 ( da ) : if da . dtype == np . float32 : logging . warning ( 'Datapoints were stored using the np.float32 datatype.' 'For accurate reduction operations using bottleneck, ' 'datapoints are being cast to the np.float64 datatype.' ' For more information see: https://github.com/pydata/' 'xarray/issues/1346' ) return da . astype ( np . float64 ) else : return da\n", "title": "", "metadata": ""}
{"_id": "f06943263ce4f238b574e11ae18219bb", "text": "def current_timestamp ( ) : now = datetime . utcnow ( ) timestamp = now . isoformat ( ) [ 0 : 19 ] + 'Z' debug ( \"generated timestamp: {now}\" . format ( now = timestamp ) ) return timestamp\n", "title": "", "metadata": ""}
{"_id": "56bd7aa60a90db25ab12d41c9c8df2a8", "text": "def clear_worker_output ( self ) : self . data_store . clear_worker_output ( ) # Have the plugin manager reload all the plugins self . plugin_manager . load_all_plugins ( ) # Store information about commands and workbench self . _store_information ( )\n", "title": "", "metadata": ""}
{"_id": "d1b90a7b8693143cb3d5adbdb1a03e80", "text": "def _power ( ctx , number , power ) : return decimal_pow ( conversions . to_decimal ( number , ctx ) , conversions . to_decimal ( power , ctx ) )\n", "title": "", "metadata": ""}
{"_id": "0d409ee2de1a521e59cc86ea979f8c3a", "text": "def init ( ) : print ( yellow ( \"# Setting up environment...\\n\" , True ) ) virtualenv . init ( ) virtualenv . update_requirements ( ) print ( green ( \"\\n# DONE.\" , True ) ) print ( green ( \"Type \" ) + green ( \"activate\" , True ) + green ( \" to enable your virtual environment.\" ) )\n", "title": "", "metadata": ""}
{"_id": "f81351780a7d6590f5f595eb07b4b128", "text": "def _reshuffle ( mat , shape ) : return np . reshape ( np . transpose ( np . reshape ( mat , shape ) , ( 3 , 1 , 2 , 0 ) ) , ( shape [ 3 ] * shape [ 1 ] , shape [ 0 ] * shape [ 2 ] ) )\n", "title": "", "metadata": ""}
{"_id": "f14140acc29530bc3c3da6c5be049694", "text": "def idx ( df , index ) : if isinstance ( df , ( pd . DataFrame , pd . Series ) ) : return df . iloc [ index ] else : return df [ index , : ]\n", "title": "", "metadata": ""}
{"_id": "0a3b5b6886922e051c3f3889e8d136a8", "text": "def visit_BinOp ( self , node ) : args = [ self . visit ( arg ) for arg in ( node . left , node . right ) ] return list ( { frozenset . union ( * x ) for x in itertools . product ( * args ) } )\n", "title": "", "metadata": ""}
{"_id": "81818a503caf9faef343a8f9c2ad232f", "text": "def reset ( self ) : self . __iterator , self . __saved = itertools . tee ( self . __saved )\n", "title": "", "metadata": ""}
{"_id": "268fa916020802702bee942c4a89f801", "text": "def circstd ( dts , axis = 2 ) : R = np . abs ( np . exp ( 1.0j * dts ) . mean ( axis = axis ) ) return np . sqrt ( - 2.0 * np . log ( R ) )\n", "title": "", "metadata": ""}
{"_id": "11324f1bf76987682904607f1a347204", "text": "def required_attributes ( element , * attributes ) : if not reduce ( lambda still_valid , param : still_valid and param in element . attrib , attributes , True ) : raise NotValidXmlException ( msg_err_missing_attributes ( element . tag , * attributes ) )\n", "title": "", "metadata": ""}
{"_id": "35a03139ea3128271e3d0eca63732620", "text": "def calculate_delay ( original , delay ) : original = datetime . strptime ( original , '%H:%M' ) delayed = datetime . strptime ( delay , '%H:%M' ) diff = delayed - original return diff . total_seconds ( ) // 60\n", "title": "", "metadata": ""}
{"_id": "0c552fdf9f828391a0b2a601305098ae", "text": "def price_rounding ( price , decimals = 2 ) : try : exponent = D ( '.' + decimals * '0' ) except InvalidOperation : # Currencies with no decimal places, ex. JPY, HUF exponent = D ( ) return price . quantize ( exponent , rounding = ROUND_UP )\n", "title": "", "metadata": ""}
{"_id": "b8525458f17811d687b0278f8104240e", "text": "def stderr ( a ) : return np . nanstd ( a ) / np . sqrt ( sum ( np . isfinite ( a ) ) )\n", "title": "", "metadata": ""}
{"_id": "95176ecae5f5fff3121ba15b7d8e0828", "text": "def _get_compiled_ext ( ) : for ext , mode , typ in imp . get_suffixes ( ) : if typ == imp . PY_COMPILED : return ext\n", "title": "", "metadata": ""}
{"_id": "d866baf510b35dd78cea3209e6c0433f", "text": "def represented_args ( args , separator = \" \" ) : result = [ ] if args : for text in args : result . append ( quoted ( short ( text ) ) ) return separator . join ( result )\n", "title": "", "metadata": ""}
{"_id": "d26801221daa2e9fae1bc798ce07b507", "text": "def get_hash ( self , handle ) : fpath = self . _fpath_from_handle ( handle ) return DiskStorageBroker . hasher ( fpath )\n", "title": "", "metadata": ""}
{"_id": "955b4ee9a7705744737aa71cc2bfcd66", "text": "def is_parameter ( self ) : return ( isinstance ( self . scope , CodeFunction ) and self in self . scope . parameters )\n", "title": "", "metadata": ""}
{"_id": "ea7a9df21a3194bf433adb73ffc485db", "text": "def get_attr ( self , method_name ) : return self . attrs . get ( method_name ) or self . get_callable_attr ( method_name )\n", "title": "", "metadata": ""}
{"_id": "a81e3d82000b462afbf947b79ad02702", "text": "def contains_all ( self , array ) : dtype = getattr ( array , 'dtype' , None ) if dtype is None : dtype = np . result_type ( * array ) return is_real_dtype ( dtype )\n", "title": "", "metadata": ""}
{"_id": "5942c5e4ae949d3b1952b0481b8b59fd", "text": "def h5ToDict ( h5 , readH5pyDataset = True ) : h = h5py . File ( h5 , \"r\" ) ret = unwrapArray ( h , recursive = True , readH5pyDataset = readH5pyDataset ) if readH5pyDataset : h . close ( ) return ret\n", "title": "", "metadata": ""}
{"_id": "7b953afa90479d96f0f84c7efc9b3f55", "text": "def is_running ( process_id : int ) -> bool : pstr = str ( process_id ) encoding = sys . getdefaultencoding ( ) s = subprocess . Popen ( [ \"ps\" , \"-p\" , pstr ] , stdout = subprocess . PIPE ) for line in s . stdout : strline = line . decode ( encoding ) if pstr in strline : return True return False\n", "title": "", "metadata": ""}
{"_id": "1aae61c0d509671f9e148f4128a824e2", "text": "def _strip_empty_keys ( self , params ) : keys = [ k for k , v in params . items ( ) if v == '' ] for key in keys : del params [ key ]\n", "title": "", "metadata": ""}
{"_id": "fa734a49f11a21b29b23e7be280f85c8", "text": "def stop ( self ) : with self . lock : self . halting = True self . go . clear ( )\n", "title": "", "metadata": ""}
{"_id": "20b39fd2230524f8520ccf40c5e9bc3c", "text": "def execfile ( fname , variables ) : with open ( fname ) as f : code = compile ( f . read ( ) , fname , 'exec' ) exec ( code , variables )\n", "title": "", "metadata": ""}
{"_id": "85620d42d92405d1469c178f7fbb08ca", "text": "def _ParseYamlFromFile ( filedesc ) : content = filedesc . read ( ) return yaml . Parse ( content ) or collections . OrderedDict ( )\n", "title": "", "metadata": ""}
{"_id": "dc5cd74e1dc375c05d56dddc20900aa5", "text": "def maybeparens ( lparen , item , rparen ) : return item | lparen . suppress ( ) + item + rparen . suppress ( )\n", "title": "", "metadata": ""}
{"_id": "ebf1b80068bc468fd72b981ae5da0274", "text": "def detach_index ( self , name ) : assert type ( name ) == str if name in self . _indexes : del self . _indexes [ name ]\n", "title": "", "metadata": ""}
{"_id": "5defb930f674e05b70131a5e7632f5b4", "text": "def get_long_description ( ) : here = path . abspath ( path . dirname ( __file__ ) ) with open ( path . join ( here , 'README.rst' ) ) as readme : return readme . read ( ) return None\n", "title": "", "metadata": ""}
{"_id": "e8a0ef663c1064c6e6df22c59038eed7", "text": "def _dfs_cycle_detect ( graph , node , path , visited_nodes ) : visited_nodes . add ( node ) for target in graph [ node ] : if target in path : # cycle found => return current path return path + [ target ] else : return _dfs_cycle_detect ( graph , target , path + [ target ] , visited_nodes ) return None\n", "title": "", "metadata": ""}
{"_id": "5025bd0244af30fcc447c4e2fad9ba47", "text": "def fn_abs ( self , value ) : if is_ndarray ( value ) : return numpy . absolute ( value ) else : return abs ( value )\n", "title": "", "metadata": ""}
{"_id": "d4f65a49cea7d3ead25352b95facafda", "text": "def instance_name ( string ) : invalid = ':/@' if set ( string ) . intersection ( invalid ) : msg = 'Invalid instance name {}' . format ( string ) raise argparse . ArgumentTypeError ( msg ) return string\n", "title": "", "metadata": ""}
{"_id": "5a7dd2e25cc5dba33ecf6b8688a479ef", "text": "def fromiterable ( cls , itr ) : x , y , z = itr return cls ( x , y , z )\n", "title": "", "metadata": ""}
{"_id": "304dfb80c0e566ad450485d7f739d840", "text": "def remove_links ( text ) : tco_link_regex = re . compile ( \"https?://t.co/[A-z0-9].*\" ) generic_link_regex = re . compile ( \"(https?://)?(\\w*[.]\\w+)+([/?=&]+\\w+)*\" ) remove_tco = re . sub ( tco_link_regex , \" \" , text ) remove_generic = re . sub ( generic_link_regex , \" \" , remove_tco ) return remove_generic\n", "title": "", "metadata": ""}
{"_id": "fbb24d51c900293e2d6f402dcf257825", "text": "def multiple_replace ( string , replacements ) : # type: (str, Dict[str,str]) -> str pattern = re . compile ( \"|\" . join ( [ re . escape ( k ) for k in sorted ( replacements , key = len , reverse = True ) ] ) , flags = re . DOTALL ) return pattern . sub ( lambda x : replacements [ x . group ( 0 ) ] , string )\n", "title": "", "metadata": ""}
{"_id": "e363f4196065c6d6b620a2a5c7a6fd7f", "text": "def session_to_epoch ( timestamp ) : utc_timetuple = datetime . strptime ( timestamp , SYNERGY_SESSION_PATTERN ) . replace ( tzinfo = None ) . utctimetuple ( ) return calendar . timegm ( utc_timetuple )\n", "title": "", "metadata": ""}
{"_id": "33c1ae1d9bd05c6de860fc732ffacce9", "text": "def area ( self ) : area = 0.0 for segment in self . segments ( ) : area += ( ( segment . p . x * segment . q . y ) - ( segment . q . x * segment . p . y ) ) / 2 return area\n", "title": "", "metadata": ""}
{"_id": "a5bdcf29e7f04faa112a4c52a6f9363d", "text": "def _single_page_pdf ( page ) : pdf = Pdf . new ( ) pdf . pages . append ( page ) bio = BytesIO ( ) pdf . save ( bio ) bio . seek ( 0 ) return bio . read ( )\n", "title": "", "metadata": ""}
{"_id": "d3924278da6cc18af1ea4cf0eaa34dc2", "text": "def get_order ( self , codes ) : return sorted ( codes , key = lambda e : [ self . ev2idx . get ( e ) ] )\n", "title": "", "metadata": ""}
{"_id": "11c077ceb52bcde853c43e01d7ad9159", "text": "def drop_column ( self , tablename : str , fieldname : str ) -> int : sql = \"ALTER TABLE {} DROP COLUMN {}\" . format ( tablename , fieldname ) log . info ( sql ) return self . db_exec_literal ( sql )\n", "title": "", "metadata": ""}
{"_id": "84d7fa83ef948adf449de2a6cb1b6413", "text": "def timeit ( method ) : def timed ( * args , * * kw ) : time_start = time . time ( ) result = method ( * args , * * kw ) time_end = time . time ( ) print ( 'timeit: %r %2.2f sec (%r, %r) ' % ( method . __name__ , time_end - time_start , str ( args ) [ : 20 ] , kw ) ) return result return timed\n", "title": "", "metadata": ""}
{"_id": "208f69db7a6af269b13f9a4a3cd943b0", "text": "def are_token_parallel ( sequences : Sequence [ Sized ] ) -> bool : if not sequences or len ( sequences ) == 1 : return True return all ( len ( s ) == len ( sequences [ 0 ] ) for s in sequences )\n", "title": "", "metadata": ""}
{"_id": "1928161a4cc451c785cb684b3f96c9d2", "text": "def exit ( self ) : if self . confirm_exit : if self . ask_yes_no ( 'Do you really want to exit ([y]/n)?' , 'y' ) : self . ask_exit ( ) else : self . ask_exit ( )\n", "title": "", "metadata": ""}
{"_id": "ef0467f82579aa1437056b34a82b8983", "text": "def is_real_floating_dtype ( dtype ) : dtype = np . dtype ( dtype ) return np . issubsctype ( getattr ( dtype , 'base' , None ) , np . floating )\n", "title": "", "metadata": ""}
{"_id": "811355f56fd1e8af53ffdbcdc5acef6f", "text": "def focusNext ( self , event ) : try : event . widget . tk_focusNext ( ) . focus_set ( ) except TypeError : # see tkinter equivalent code for tk_focusNext to see # commented original version name = event . widget . tk . call ( 'tk_focusNext' , event . widget . _w ) event . widget . _nametowidget ( str ( name ) ) . focus_set ( )\n", "title": "", "metadata": ""}
{"_id": "8cf6b6a7b2128982cb48a27cc2ba33f5", "text": "def cfloat32_array_to_numpy ( cptr , length ) : if isinstance ( cptr , ctypes . POINTER ( ctypes . c_float ) ) : return np . fromiter ( cptr , dtype = np . float32 , count = length ) else : raise RuntimeError ( 'Expected float pointer' )\n", "title": "", "metadata": ""}
{"_id": "ac518f6e7101ae29d6d482221d697802", "text": "def _timestamp_to_json_row ( value ) : if isinstance ( value , datetime . datetime ) : value = _microseconds_from_datetime ( value ) * 1e-6 return value\n", "title": "", "metadata": ""}
{"_id": "0f76abf81dc8f71c8f51e4f6f658b96c", "text": "def super_lm_tpu_memtest ( ) : hparams = super_lm_base ( ) hparams . num_model_shards = 1 hparams . layers = \"ffn,\" * 8 hparams . hidden_size = 4096 hparams . filter_size = 12000 hparams . batch_size = 512 return hparams\n", "title": "", "metadata": ""}
{"_id": "ed8df8d1492160728c0a05e6190ad61a", "text": "def selectnotin ( table , field , value , complement = False ) : return select ( table , field , lambda v : v not in value , complement = complement )\n", "title": "", "metadata": ""}
{"_id": "4c0e2c2c59a46ae2cafbe871424c1fe5", "text": "def add_device_callback ( self , callback ) : _LOGGER . debug ( 'Added new callback %s ' , callback ) self . _cb_new_device . append ( callback )\n", "title": "", "metadata": ""}
{"_id": "5133c5796472f9f1e6245a1757741e01", "text": "def resize ( self , size ) : return Image ( self . pil_image . resize ( size , PIL . Image . ANTIALIAS ) )\n", "title": "", "metadata": ""}
{"_id": "d5f0b290242d05ee17ccc99717f7a2da", "text": "def create_db ( app , appbuilder ) : from flask_appbuilder . models . sqla import Base _appbuilder = import_application ( app , appbuilder ) engine = _appbuilder . get_session . get_bind ( mapper = None , clause = None ) Base . metadata . create_all ( engine ) click . echo ( click . style ( \"DB objects created\" , fg = \"green\" ) )\n", "title": "", "metadata": ""}
{"_id": "ede0d7e481cbf6a7d4d02e97c054adbe", "text": "def require_root ( fn ) : @ wraps ( fn ) def xex ( * args , * * kwargs ) : assert os . geteuid ( ) == 0 , \"You have to be root to run function '%s'.\" % fn . __name__ return fn ( * args , * * kwargs ) return xex\n", "title": "", "metadata": ""}
{"_id": "80387fa542182d949d7c65ca72fa9c8b", "text": "def safe_int_conv ( number ) : try : return int ( np . array ( number ) . astype ( int , casting = 'safe' ) ) except TypeError : raise ValueError ( 'cannot safely convert {} to integer' . format ( number ) )\n", "title": "", "metadata": ""}
{"_id": "6ff83a51d746375c2e41eddae7d510cb", "text": "def index ( m , val ) : mm = np . array ( m ) idx_tuple = np . where ( mm == val ) idx = idx_tuple [ 0 ] . tolist ( ) return idx\n", "title": "", "metadata": ""}
{"_id": "3f6238246963233ec1b34c732582b46a", "text": "def read ( fname ) : content = None with open ( os . path . join ( here , fname ) ) as f : content = f . read ( ) return content\n", "title": "", "metadata": ""}
{"_id": "60e41b7f14355407c77cbab4e57116d6", "text": "def _insert_row ( self , i , index ) : if i == len ( self . _index ) : self . _add_row ( index ) else : self . _index . insert ( i , index ) self . _data . insert ( i , None )\n", "title": "", "metadata": ""}
{"_id": "c3d81302fb39e19d5177e85788a47049", "text": "def normalize_text ( text , line_len = 80 , indent = \"\" ) : return \"\\n\" . join ( textwrap . wrap ( text , width = line_len , initial_indent = indent , subsequent_indent = indent ) )\n", "title": "", "metadata": ""}
{"_id": "5a68dd6b591e2d78221a4150f87c0e16", "text": "def get_item_from_queue ( Q , timeout = 0.01 ) : try : item = Q . get ( True , 0.01 ) except Queue . Empty : return None return item\n", "title": "", "metadata": ""}
{"_id": "ee5628e94604f7a8443e3eb7e23b9805", "text": "def md5_hash_file ( fh ) : md5 = hashlib . md5 ( ) while True : data = fh . read ( 8192 ) if not data : break md5 . update ( data ) return md5 . hexdigest ( )\n", "title": "", "metadata": ""}
{"_id": "92e9a490dda25f73f0d0b54bac0d103e", "text": "def is_empty ( self ) : if ( ( ( self . channels == [ ] ) and ( not self . shape == ( 0 , 0 ) ) ) or ( ( not self . channels == [ ] ) and ( self . shape == ( 0 , 0 ) ) ) ) : raise RuntimeError ( \"Channels-shape mismatch.\" ) return self . channels == [ ] and self . shape == ( 0 , 0 )\n", "title": "", "metadata": ""}
{"_id": "cdf1c91fbb842012e1b94ed2b0ebbe05", "text": "def is_inside_lambda ( node : astroid . node_classes . NodeNG ) -> bool : parent = node . parent while parent is not None : if isinstance ( parent , astroid . Lambda ) : return True parent = parent . parent return False\n", "title": "", "metadata": ""}
{"_id": "829aa3a376ba8c8eb52660de1b0ac92a", "text": "def scale_v2 ( vec , amount ) : return Vec2 ( vec . x * amount , vec . y * amount )\n", "title": "", "metadata": ""}
{"_id": "40200ef4e38e530ac0670b27928cb31f", "text": "def input ( self , pin ) : return self . mraa_gpio . Gpio . read ( self . mraa_gpio . Gpio ( pin ) )\n", "title": "", "metadata": ""}
{"_id": "4b9efb8b88f0e16f9e8b105cfb909906", "text": "def assert_lock ( fname ) : if not set_lock ( fname ) : logger . error ( 'File {} is already locked. Terminating.' . format ( fname ) ) sys . exit ( )\n", "title": "", "metadata": ""}
{"_id": "45d86847861edd0431aa8c40592db8fd", "text": "def get_example_features ( example ) : return ( example . features . feature if isinstance ( example , tf . train . Example ) else example . context . feature )\n", "title": "", "metadata": ""}
{"_id": "0cd363e49906665ab0d11c49dfa8c9cf", "text": "def columns_equal ( a : Column , b : Column ) -> bool : return ( a . name == b . name and column_types_equal ( a . type , b . type ) and a . nullable == b . nullable )\n", "title": "", "metadata": ""}
{"_id": "568d5ab1e15fde7385119e3076b49d4c", "text": "def PrintIndented ( self , file , ident , code ) : for entry in code : print >> file , '%s%s' % ( ident , entry )\n", "title": "", "metadata": ""}
{"_id": "5e5530d1fa23d1d10d4689b232958d50", "text": "def psutil_phymem_usage ( ) : import psutil # This is needed to avoid a deprecation warning error with  # newer psutil versions  try : percent = psutil . virtual_memory ( ) . percent except : percent = psutil . phymem_usage ( ) . percent return percent\n", "title": "", "metadata": ""}
{"_id": "16cdfeebb1e69e5c04fb6aa542eeb2e0", "text": "def getWindowPID ( self , hwnd ) : pid = ctypes . c_ulong ( ) ctypes . windll . user32 . GetWindowThreadProcessId ( hwnd , ctypes . byref ( pid ) ) return int ( pid . value )\n", "title": "", "metadata": ""}
{"_id": "9f8963a60c198a6361c46bbbad4e637e", "text": "def standardize ( table , with_std = True ) : if isinstance ( table , pandas . DataFrame ) : cat_columns = table . select_dtypes ( include = [ 'category' ] ) . columns else : cat_columns = [ ] new_frame = _apply_along_column ( table , standardize_column , with_std = with_std ) # work around for apply converting category dtype to object # https://github.com/pydata/pandas/issues/9573 for col in cat_columns : new_frame [ col ] = table [ col ] . copy ( ) return new_frame\n", "title": "", "metadata": ""}
{"_id": "4b38bf85116f75f8e35dd5b1d7d24799", "text": "def utcfromtimestamp ( cls , timestamp ) : obj = datetime . datetime . utcfromtimestamp ( timestamp ) obj = pytz . utc . localize ( obj ) return cls ( obj )\n", "title": "", "metadata": ""}
{"_id": "ef786d3d6b8fc537c44119d8f155190e", "text": "def pretty_dict_str ( d , indent = 2 ) : b = StringIO ( ) write_pretty_dict_str ( b , d , indent = indent ) return b . getvalue ( )\n", "title": "", "metadata": ""}
{"_id": "2ac6156b51e408049a0782a44c78eaa6", "text": "def datetime_to_timezone ( date , tz = \"UTC\" ) : if not date . tzinfo : date = date . replace ( tzinfo = timezone ( get_timezone ( ) ) ) return date . astimezone ( timezone ( tz ) )\n", "title": "", "metadata": ""}
{"_id": "6d1da526a93c7d72fe68caf12c86cb47", "text": "def __deepcopy__ ( self , memo ) : return type ( self ) ( value = self . _value , enum_ref = self . enum_ref )\n", "title": "", "metadata": ""}
{"_id": "47f11acc32a4f1938326fff3ddd4cd28", "text": "def add_xlabel ( self , text = None ) : x = self . fit . meta [ 'independent' ] if not text : text = '$' + x [ 'tex_symbol' ] + r'$ $(\\si{' + x [ 'siunitx' ] + r'})$' self . plt . set_xlabel ( text )\n", "title": "", "metadata": ""}
{"_id": "9af8e49ec87efc4fe9b0fc601030298c", "text": "def symbol_pos_int ( * args , * * kwargs ) : kwargs . update ( { 'positive' : True , 'integer' : True } ) return sympy . Symbol ( * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "ff27be1bf6c4325067a82520ef277e34", "text": "def none ( self ) : return EmptyQuerySet ( model = self . model , using = self . _using , connection = self . _connection )\n", "title": "", "metadata": ""}
{"_id": "5b402b2f046c5a84e2dddcc96d4a4362", "text": "def _config_parse ( self ) : res = super ( cfg . ConfigParser , self ) . parse ( Backend . _config_string_io ) return res\n", "title": "", "metadata": ""}
{"_id": "f573d7ab58d40194a9d3bcc73ca5b117", "text": "def resize_image ( self , data , size ) : from machina . core . compat import PILImage as Image image = Image . open ( BytesIO ( data ) ) # Resize! image . thumbnail ( size , Image . ANTIALIAS ) string = BytesIO ( ) image . save ( string , format = 'PNG' ) return string . getvalue ( )\n", "title": "", "metadata": ""}
{"_id": "6fb6cf61ab4765b656c06318293e44d3", "text": "def _normalize_instancemethod ( instance_method ) : if not hasattr ( instance_method , 'im_self' ) : return instance_method def _func ( * args , * * kwargs ) : return instance_method ( * args , * * kwargs ) _func . __name__ = repr ( instance_method ) return _func\n", "title": "", "metadata": ""}
{"_id": "6c8315398aea890cc0ef53371cc6a2d4", "text": "def timestamp_to_microseconds ( timestamp ) : timestamp_str = datetime . datetime . strptime ( timestamp , ISO_DATETIME_REGEX ) epoch_time_secs = calendar . timegm ( timestamp_str . timetuple ( ) ) epoch_time_mus = epoch_time_secs * 1e6 + timestamp_str . microsecond return epoch_time_mus\n", "title": "", "metadata": ""}
{"_id": "9e60797715aca380d149514435fe7ac9", "text": "def get_var ( name , factory = None ) : if name not in _VARS and factory is not None : _VARS [ name ] = factory ( ) return _VARS . get ( name )\n", "title": "", "metadata": ""}
{"_id": "f90eecf2685454ad0a93fd0eb0b834cd", "text": "def run_func ( entry ) : if entry . func : if entry . args and entry . krgs : return entry . func ( * entry . args , * * entry . krgs ) if entry . args : return entry . func ( * entry . args ) if entry . krgs : return entry . func ( * * entry . krgs ) return entry . func ( )\n", "title": "", "metadata": ""}
{"_id": "49feb37e18411c767a5bf23b8c106f11", "text": "def __init__ ( self , encoding = 'utf-8' ) : super ( StdinInputReader , self ) . __init__ ( sys . stdin , encoding = encoding )\n", "title": "", "metadata": ""}
{"_id": "12134f68ec2cd03dd17430364d8f2f63", "text": "def set_cursor ( self , x , y ) : curses . curs_set ( 1 ) self . screen . move ( y , x )\n", "title": "", "metadata": ""}
{"_id": "75e3f619daf57380dcd155ea4d113039", "text": "def get_file_size ( fileobj ) : currpos = fileobj . tell ( ) fileobj . seek ( 0 , 2 ) total_size = fileobj . tell ( ) fileobj . seek ( currpos ) return total_size\n", "title": "", "metadata": ""}
{"_id": "42b5426887b09f6d6172195f3c3b3d5a", "text": "def fetchallfirstvalues ( self , sql : str , * args ) -> List [ Any ] : rows = self . fetchall ( sql , * args ) return [ row [ 0 ] for row in rows ]\n", "title": "", "metadata": ""}
{"_id": "749768b74b3dbfc360bbdd8b45d00aec", "text": "def wait ( self , timeout = None ) : if not self . __running : raise RuntimeError ( \"ThreadPool ain't running\" ) self . __queue . wait ( timeout )\n", "title": "", "metadata": ""}
{"_id": "c81351778927e1ad336daf580649f01e", "text": "def stack_push ( self , thing ) : # increment sp sp = self . regs . sp + self . arch . stack_change self . regs . sp = sp return self . memory . store ( sp , thing , endness = self . arch . memory_endness )\n", "title": "", "metadata": ""}
{"_id": "3192e2da4978e1f7eda31a4f496d5349", "text": "def symmetrise ( matrix , tri = 'upper' ) : if tri == 'upper' : tri_fn = np . triu_indices else : tri_fn = np . tril_indices size = matrix . shape [ 0 ] matrix [ tri_fn ( size ) [ : : - 1 ] ] = matrix [ tri_fn ( size ) ] return matrix\n", "title": "", "metadata": ""}
{"_id": "6004e8190e9b42f6734d180a5957aba5", "text": "def assign_parent ( node : astroid . node_classes . NodeNG ) -> astroid . node_classes . NodeNG : while node and isinstance ( node , ( astroid . AssignName , astroid . Tuple , astroid . List ) ) : node = node . parent return node\n", "title": "", "metadata": ""}
{"_id": "1cfed1a7bf9f448e4e8a97b641003f4f", "text": "def each_img ( dir_path ) : for fname in os . listdir ( dir_path ) : if fname . endswith ( '.jpg' ) or fname . endswith ( '.png' ) or fname . endswith ( '.bmp' ) : yield fname\n", "title": "", "metadata": ""}
{"_id": "f71b135c346bda02e962d8c9c1051156", "text": "def _width_is_big_enough ( image , width ) : if width > image . size [ 0 ] : raise ImageSizeError ( image . size [ 0 ] , width )\n", "title": "", "metadata": ""}
{"_id": "dd5c9ecaefdb81e236fcddc29c0c4d63", "text": "def unicode_is_ascii ( u_string ) : assert isinstance ( u_string , str ) try : u_string . encode ( 'ascii' ) return True except UnicodeEncodeError : return False\n", "title": "", "metadata": ""}
{"_id": "22eb30078ec39366bc46275a57991150", "text": "def reset_namespace ( self ) : self . shellwidget . reset_namespace ( warning = self . reset_warning , message = True )\n", "title": "", "metadata": ""}
{"_id": "ea5ad7d92094bef2c32d0e4c892102ca", "text": "def _GetFieldByName ( message_descriptor , field_name ) : try : return message_descriptor . fields_by_name [ field_name ] except KeyError : raise ValueError ( 'Protocol message %s has no \"%s\" field.' % ( message_descriptor . name , field_name ) )\n", "title": "", "metadata": ""}
{"_id": "d556a8c19d4794363a7759191a5c9f1a", "text": "def save_notebook ( work_notebook , write_file ) : with open ( write_file , 'w' ) as out_nb : json . dump ( work_notebook , out_nb , indent = 2 )\n", "title": "", "metadata": ""}
{"_id": "f2352eea8e0acddc81d0ec9c71cda18d", "text": "def set_default ( self , key , value ) : k = self . _real_key ( key . lower ( ) ) self . _defaults [ k ] = value\n", "title": "", "metadata": ""}
{"_id": "9e72f77dc7a61c0b1a7a286e5f0dd9f3", "text": "def returns ( self ) -> T . Optional [ DocstringReturns ] : try : return next ( DocstringReturns . from_meta ( meta ) for meta in self . meta if meta . args [ 0 ] in { \"return\" , \"returns\" , \"yield\" , \"yields\" } ) except StopIteration : return None\n", "title": "", "metadata": ""}
{"_id": "6bd27fed40fb30cc1af729def3e26f4e", "text": "def factorial ( n , mod = None ) : if not ( isinstance ( n , int ) and n >= 0 ) : raise ValueError ( \"'n' must be a non-negative integer.\" ) if mod is not None and not ( isinstance ( mod , int ) and mod > 0 ) : raise ValueError ( \"'mod' must be a positive integer\" ) result = 1 if n == 0 : return 1 for i in range ( 2 , n + 1 ) : result *= i if mod : result %= mod return result\n", "title": "", "metadata": ""}
{"_id": "6bf7029b40879e3d73a0a0b02d776223", "text": "def format_result ( input ) : items = list ( iteritems ( input ) ) return OrderedDict ( sorted ( items , key = lambda x : x [ 0 ] ) )\n", "title": "", "metadata": ""}
{"_id": "9f639a284af0f709c7e55c0920f67b8f", "text": "def A ( * a ) : return np . array ( a [ 0 ] ) if len ( a ) == 1 else [ np . array ( o ) for o in a ]\n", "title": "", "metadata": ""}
{"_id": "8ee6a0827524712cf14602e67db6a5c3", "text": "def distance_matrix ( trains1 , trains2 , cos , tau ) : return dissimilarity_matrix ( trains1 , trains2 , cos , tau , \"distance\" )\n", "title": "", "metadata": ""}
{"_id": "67f74ea93baa4fbff86d3d16ba0fa7f5", "text": "def assert_iter ( * * kw ) : for name , value in kw . items ( ) : if not isiter ( value ) : raise TypeError ( 'paco: {} must be an iterable object' . format ( name ) )\n", "title": "", "metadata": ""}
{"_id": "305a73cb9dbdb513646130c558c40e58", "text": "def _set_module_names_for_sphinx ( modules : List , new_name : str ) : for obj in modules : obj . __module__ = new_name\n", "title": "", "metadata": ""}
{"_id": "11c9ab50aa4eaf096914a72149ec5db7", "text": "def tail ( filename , number_of_bytes ) : with open ( filename , \"rb\" ) as f : if os . stat ( filename ) . st_size > number_of_bytes : f . seek ( - number_of_bytes , 2 ) return f . read ( )\n", "title": "", "metadata": ""}
{"_id": "3764d926a631f31ca9793bed130ca85d", "text": "def stop_logging ( ) : from . import log logger = logging . getLogger ( \"gromacs\" ) logger . info ( \"GromacsWrapper %s STOPPED logging\" , get_version ( ) ) log . clear_handlers ( logger )\n", "title": "", "metadata": ""}
{"_id": "ae80a0293da81d06bf95e44be9ab9be6", "text": "def nearest_intersection_idx ( a , b ) : # Difference in the two y-value sets difference = a - b # Determine the point just before the intersection of the lines # Will return multiple points for multiple intersections sign_change_idx , = np . nonzero ( np . diff ( np . sign ( difference ) ) ) return sign_change_idx\n", "title": "", "metadata": ""}
{"_id": "36a93607a82916883c0b010e31ec3b07", "text": "def angle ( x , y ) : return arccos ( dot ( x , y ) / ( norm ( x ) * norm ( y ) ) ) * 180. / pi\n", "title": "", "metadata": ""}
{"_id": "3867dc9bfc4e2ec90937d01c3eb8f3d3", "text": "def email_user ( self , subject , message , from_email = None ) : send_mail ( subject , message , from_email , [ self . email ] )\n", "title": "", "metadata": ""}
{"_id": "1a1137be8be7856ab446ee87cfdb32aa", "text": "def tokenize ( string ) : for match in TOKENS_REGEX . finditer ( string ) : yield Token ( match . lastgroup , match . group ( ) . strip ( ) , match . span ( ) )\n", "title": "", "metadata": ""}
{"_id": "99fe1c5bcd03645ba981956b4182cac6", "text": "def show ( self ) : self . visible = True if self . proxy_is_active : self . proxy . ensure_visible ( )\n", "title": "", "metadata": ""}
{"_id": "2ce8213c8cd19d7036479f9edf4ce8a6", "text": "def get_content_type ( headers ) : ptype = headers . get ( 'Content-Type' , 'application/octet-stream' ) if \";\" in ptype : # split off not needed extension info ptype = ptype . split ( ';' ) [ 0 ] return ptype . strip ( ) . lower ( )\n", "title": "", "metadata": ""}
{"_id": "487f9f9976d34938f97064eb8bff364a", "text": "def get_property ( self , name ) : # type: (str) -> object with self . __properties_lock : return self . __properties . get ( name , os . getenv ( name ) )\n", "title": "", "metadata": ""}
{"_id": "8f85a74e9582d4c1d5a1930d6758dfa4", "text": "def unique_inverse ( item_list ) : import utool as ut unique_items = ut . unique ( item_list ) inverse = list_alignment ( unique_items , item_list ) return unique_items , inverse\n", "title": "", "metadata": ""}
{"_id": "313cbf2a4c4c093aca1f43f7fb4de1c5", "text": "def _bind_parameter ( self , parameter , value ) : for ( instr , param_index ) in self . _parameter_table [ parameter ] : instr . params [ param_index ] = value\n", "title": "", "metadata": ""}
{"_id": "6a924fef221314180c7b97803611ffd8", "text": "def rowlenselect ( table , n , complement = False ) : where = lambda row : len ( row ) == n return select ( table , where , complement = complement )\n", "title": "", "metadata": ""}
{"_id": "acc294713f82983b545f422765109c4a", "text": "def lin_interp ( x , rangeX , rangeY ) : s = ( x - rangeX [ 0 ] ) / mag ( rangeX [ 1 ] - rangeX [ 0 ] ) y = rangeY [ 0 ] * ( 1 - s ) + rangeY [ 1 ] * s return y\n", "title": "", "metadata": ""}
{"_id": "e98ce4f3f5913d3bedce59ea424ccc56", "text": "def parse_cookies ( self , req , name , field ) : return core . get_value ( req . COOKIES , name , field )\n", "title": "", "metadata": ""}
{"_id": "4630f03fd0fcfdab895609c15fe2bd0d", "text": "def lint_file ( in_file , out_file = None ) : for line in in_file : print ( line . strip ( ) , file = out_file )\n", "title": "", "metadata": ""}
{"_id": "829eb7f02a98ea5a3dcb3a062d7e61a8", "text": "def top_class ( self ) : curr = self parent = self . parent while isinstance ( parent , class_t ) : curr = parent parent = parent . parent return curr\n", "title": "", "metadata": ""}
{"_id": "73a6a081f1bca844195c53dcc70d65aa", "text": "def sav_to_pandas_rpy2 ( input_file ) : import pandas . rpy . common as com w = com . robj . r ( 'foreign::read.spss(\"%s\", to.data.frame=TRUE)' % input_file ) return com . convert_robj ( w )\n", "title": "", "metadata": ""}
{"_id": "cd7417e0514a00b465b58552fbafc9cd", "text": "def is_valid ( data ) : return bool ( data ) and isinstance ( data , dict ) and bool ( data . get ( \"swagger\" ) ) and isinstance ( data . get ( 'paths' ) , dict )\n", "title": "", "metadata": ""}
{"_id": "9bc4f15effea447776030a95876edf94", "text": "def safe_dump ( data , stream = None , * * kwds ) : return yaml . dump ( data , stream = stream , Dumper = ODYD , * * kwds )\n", "title": "", "metadata": ""}
{"_id": "3cf3f8acba7b3f1192fefa3c49a13839", "text": "def stop ( self ) : if self . stream and self . stream . session . state != STATE_STOPPED : self . stream . stop ( )\n", "title": "", "metadata": ""}
{"_id": "4d35989c2ad53c3fc831b0c6f9a5802e", "text": "def click_by_selector ( self , selector ) : # No need for separate button press step with selector style. elem = find_element_by_jquery ( world . browser , selector ) elem . click ( )\n", "title": "", "metadata": ""}
{"_id": "ecec739730a73289adb2a4c663189e01", "text": "def __init__ ( self , collection , index_type_obj ) : self . collection = collection self . index_type_obj = index_type_obj\n", "title": "", "metadata": ""}
{"_id": "d97888b53f85f122231c0a774547d7cc", "text": "def open ( name = None , fileobj = None , closefd = True ) : return Guesser ( ) . open ( name = name , fileobj = fileobj , closefd = closefd )\n", "title": "", "metadata": ""}
{"_id": "a05f63695e4ff63218d8235804fdf19d", "text": "def _internet_on ( address ) : try : urllib2 . urlopen ( address , timeout = 1 ) return True except urllib2 . URLError as err : return False\n", "title": "", "metadata": ""}
{"_id": "2919577744241f6664a1d4b638170c68", "text": "def define_macro ( self , name , themacro ) : from IPython . core import macro if isinstance ( themacro , basestring ) : themacro = macro . Macro ( themacro ) if not isinstance ( themacro , macro . Macro ) : raise ValueError ( 'A macro must be a string or a Macro instance.' ) self . user_ns [ name ] = themacro\n", "title": "", "metadata": ""}
{"_id": "e36b64f934c51a9b9eef9415a3ebea57", "text": "def test_replace_colon ( ) : data = ( ( \"zone:aap\" , '@' , \"zone@aap\" ) , # s, r, replaced ) for s , r , replaced in data : result = replace_colon ( s , r ) assert result == replaced\n", "title": "", "metadata": ""}
{"_id": "07daea8eb24143d983a0033dce3b16ce", "text": "def url_syntax_check ( url ) : # pragma: no cover if url and isinstance ( url , str ) : # The given URL is not empty nor None. # and # * The given URL is a string. # We silently load the configuration. load_config ( True ) return Check ( url ) . is_url_valid ( ) # We return None, there is nothing to check. return None\n", "title": "", "metadata": ""}
{"_id": "81b64fdff1809b40859f75e15eff5ab5", "text": "def on_train_end ( self , logs ) : duration = timeit . default_timer ( ) - self . train_start print ( 'done, took {:.3f} seconds' . format ( duration ) )\n", "title": "", "metadata": ""}
{"_id": "9c6b34c9d8f88fa41e37611b484ce320", "text": "def _hide_tick_lines_and_labels ( axis ) : for item in axis . get_ticklines ( ) + axis . get_ticklabels ( ) : item . set_visible ( False )\n", "title": "", "metadata": ""}
{"_id": "74500c4e1a3daa931f5eb1ca1caf7f5a", "text": "def get_instance ( key , expire = None ) : global _instances try : instance = _instances [ key ] except KeyError : instance = RedisSet ( key , _redis , expire = expire ) _instances [ key ] = instance return instance\n", "title": "", "metadata": ""}
{"_id": "19fb35135a76b9a024070281eefb330c", "text": "def load_yaml ( yaml_file : str ) -> Any : with open ( yaml_file , 'r' ) as file : return ruamel . yaml . load ( file , ruamel . yaml . RoundTripLoader )\n", "title": "", "metadata": ""}
{"_id": "8005650a9fbea4de2085da3b731ece95", "text": "def from_url ( url , db = None , * * kwargs ) : from redis . client import Redis return Redis . from_url ( url , db , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "321ed01522889f1effea188540ddebf9", "text": "def get ( cls ) : return { SourceRootConfig , Reporting , Reproducer , RunTracker , Changed , BinaryUtil . Factory , Subprocess . Factory }\n", "title": "", "metadata": ""}
{"_id": "33d4a67be034175f6ff79a421bf7445c", "text": "def equal ( x , y ) : x = BigFloat . _implicit_convert ( x ) y = BigFloat . _implicit_convert ( y ) return mpfr . mpfr_equal_p ( x , y )\n", "title": "", "metadata": ""}
{"_id": "5842dfa1df524a29411217b36c31fff9", "text": "def _check_valid_key ( self , key ) : if not isinstance ( key , key_type ) : raise ValueError ( '%r is not a valid key type' % key ) if not VALID_KEY_RE . match ( key ) : raise ValueError ( '%r contains illegal characters' % key )\n", "title": "", "metadata": ""}
{"_id": "75df6276af2338faba69f7a9987cf55b", "text": "def get_url_file_name ( url ) : assert isinstance ( url , ( str , _oldstr ) ) return urlparse . urlparse ( url ) . path . split ( '/' ) [ - 1 ]\n", "title": "", "metadata": ""}
{"_id": "f684970942a10b13d1323b05f761de48", "text": "def print_fatal_results ( results , level = 0 ) : print_level ( logger . critical , _RED + \"[X] Fatal Error: %s\" , level , results . error )\n", "title": "", "metadata": ""}
{"_id": "ab38a81fd24c4aa7bb40dd6464feb60f", "text": "def expandpath ( path ) : return os . path . expandvars ( os . path . expanduser ( path ) ) . replace ( \"//\" , \"/\" )\n", "title": "", "metadata": ""}
{"_id": "2f7004d38619d0c5be1d0b66944811e6", "text": "def _varargs_to_iterable_method ( func ) : def wrapped ( self , iterable , * * kwargs ) : return func ( self , * iterable , * * kwargs ) return wrapped\n", "title": "", "metadata": ""}
{"_id": "d615c2f17c1ef51be5681899672b9674", "text": "def last ( self ) : if self . _last is UNDETERMINED : # not necessarily the last one... self . _last = self . sdat . tseries . index [ - 1 ] return self [ self . _last ]\n", "title": "", "metadata": ""}
{"_id": "f6806dc9629d4e4f64769d6c9b012bff", "text": "def is_SYMBOL ( token , * symbols ) : from symbols . symbol_ import Symbol assert all ( isinstance ( x , Symbol ) for x in symbols ) for sym in symbols : if sym . token != token : return False return True\n", "title": "", "metadata": ""}
{"_id": "84d930d7500ab390a0f4610878575d0a", "text": "def get_user_by_id ( self , id ) : return self . db_adapter . get_object ( self . UserClass , id = id )\n", "title": "", "metadata": ""}
{"_id": "03d4e55d74b55c141aa19befc1fc1481", "text": "def _aws_get_instance_by_tag ( region , name , tag , raw ) : client = boto3 . session . Session ( ) . client ( 'ec2' , region ) matching_reservations = client . describe_instances ( Filters = [ { 'Name' : tag , 'Values' : [ name ] } ] ) . get ( 'Reservations' , [ ] ) instances = [ ] [ [ instances . append ( _aws_instance_from_dict ( region , instance , raw ) ) # pylint: disable=expression-not-assigned for instance in reservation . get ( 'Instances' ) ] for reservation in matching_reservations if reservation ] return instances\n", "title": "", "metadata": ""}
{"_id": "eb5e30e83bfb582bbc0547dac606e47e", "text": "def _prepare_proxy ( self , conn ) : conn . set_tunnel ( self . _proxy_host , self . port , self . proxy_headers ) conn . connect ( )\n", "title": "", "metadata": ""}
{"_id": "d1ff1bcac13d23ee0eddcf29f762019d", "text": "def register_blueprints ( app ) : app . register_blueprint ( public . public_bp ) app . register_blueprint ( genes . genes_bp ) app . register_blueprint ( cases . cases_bp ) app . register_blueprint ( login . login_bp ) app . register_blueprint ( variants . variants_bp ) app . register_blueprint ( panels . panels_bp ) app . register_blueprint ( dashboard . dashboard_bp ) app . register_blueprint ( api . api_bp ) app . register_blueprint ( alignviewers . alignviewers_bp ) app . register_blueprint ( phenotypes . hpo_bp ) app . register_blueprint ( institutes . overview )\n", "title": "", "metadata": ""}
{"_id": "b6e914beb00f08d5181d622920dd23b9", "text": "def sync_s3 ( self ) : bucket , key = self . open_s3 ( ) for directory in self . DIRECTORIES : for root , dirs , files in os . walk ( directory ) : self . upload_s3 ( ( bucket , key , self . AWS_BUCKET_NAME , directory ) , root , files , dirs )\n", "title": "", "metadata": ""}
{"_id": "1bfe87235f8bedac2bd3e581efd55ac3", "text": "def de_duplicate ( items ) : result = [ ] for item in items : if item not in result : result . append ( item ) return result\n", "title": "", "metadata": ""}
{"_id": "0ebeb37a8ca10418cd08e46d852652e6", "text": "def _validate_key ( self , key ) : return not any ( [ key . startswith ( i ) for i in self . EXCEPTIONS ] )\n", "title": "", "metadata": ""}
{"_id": "f92d2cba4d986f8e7de168688e9df115", "text": "def _parallel_compare_helper ( class_obj , pairs , x , x_link = None ) : return class_obj . _compute ( pairs , x , x_link )\n", "title": "", "metadata": ""}
{"_id": "317254fd5f9b0a80b3124ba5f34da7fc", "text": "def load_config ( filename = \"logging.ini\" , * args , * * kwargs ) : logging . config . fileConfig ( filename , * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "4b9c1adc583d51723fc808bb5148e2a0", "text": "def exponential_backoff ( attempt : int , cap : int = 1200 ) -> timedelta : base = 3 temp = min ( base * 2 ** attempt , cap ) return timedelta ( seconds = temp / 2 + random . randint ( 0 , temp / 2 ) )\n", "title": "", "metadata": ""}
{"_id": "d1187a82e0eb301fae6c77dfbc0abbf7", "text": "def bounding_box ( img ) : locations = numpy . argwhere ( img ) mins = locations . min ( 0 ) maxs = locations . max ( 0 ) + 1 return [ slice ( x , y ) for x , y in zip ( mins , maxs ) ]\n", "title": "", "metadata": ""}
{"_id": "fdba1a033fb7eba96d425cac8ed989f0", "text": "def removeFromRegistery ( obj ) : if isRabaObject ( obj ) : _unregisterRabaObjectInstance ( obj ) elif isRabaList ( obj ) : _unregisterRabaListInstance ( obj )\n", "title": "", "metadata": ""}
{"_id": "a847066de9dc9b8ef8f5dded48c0e579", "text": "def get_subject ( self , msg ) : text , encoding = decode_header ( msg [ 'subject' ] ) [ - 1 ] try : text = text . decode ( encoding ) # If it's already decoded, ignore error except AttributeError : pass return text\n", "title": "", "metadata": ""}
{"_id": "d592412865b7b28e040ce5645a8fdd79", "text": "def focusInEvent ( self , event ) : self . focus_changed . emit ( ) return super ( ControlWidget , self ) . focusInEvent ( event )\n", "title": "", "metadata": ""}
{"_id": "5383a80b06135534532badf3f9ddfd74", "text": "def lspearmanr ( x , y ) : TINY = 1e-30 if len ( x ) != len ( y ) : raise ValueError ( 'Input values not paired in spearmanr.  Aborting.' ) n = len ( x ) rankx = rankdata ( x ) ranky = rankdata ( y ) dsq = sumdiffsquared ( rankx , ranky ) rs = 1 - 6 * dsq / float ( n * ( n ** 2 - 1 ) ) t = rs * math . sqrt ( ( n - 2 ) / ( ( rs + 1.0 ) * ( 1.0 - rs ) ) ) df = n - 2 probrs = betai ( 0.5 * df , 0.5 , df / ( df + t * t ) ) # t already a float # probability values for rs are from part 2 of the spearman function in # Numerical Recipies, p.510.  They are close to tables, but not exact. (?) return rs , probrs\n", "title": "", "metadata": ""}
{"_id": "4fb90a23f955fe45c7088d04812bbf3d", "text": "def validate_django_compatible_with_python ( ) : python_version = sys . version [ : 5 ] django_version = django . get_version ( ) if sys . version_info == ( 2 , 7 ) and django_version >= \"2\" : click . BadArgumentUsage ( \"Please install Django v1.11 for Python {}, or switch to Python >= v3.4\" . format ( python_version ) )\n", "title": "", "metadata": ""}
{"_id": "28ca18511568a6eebeb0584e69400631", "text": "def line_line_collide ( line1 , line2 ) : s , t , success = segment_intersection ( line1 [ : , 0 ] , line1 [ : , 1 ] , line2 [ : , 0 ] , line2 [ : , 1 ] ) if success : return _helpers . in_interval ( s , 0.0 , 1.0 ) and _helpers . in_interval ( t , 0.0 , 1.0 ) else : disjoint , _ = parallel_lines_parameters ( line1 [ : , 0 ] , line1 [ : , 1 ] , line2 [ : , 0 ] , line2 [ : , 1 ] ) return not disjoint\n", "title": "", "metadata": ""}
{"_id": "ec473cfd2cdd1cf1832a21857eda60d4", "text": "def list ( self , table , * * kparams ) : result = self . table_api_get ( table , * * kparams ) return self . to_records ( result , table )\n", "title": "", "metadata": ""}
{"_id": "dd42724b120c55d4e2906da0aa1cf9e2", "text": "def access_to_sympy ( self , var_name , access ) : base_sizes = self . variables [ var_name ] [ 1 ] expr = sympy . Number ( 0 ) for dimension , a in enumerate ( access ) : base_size = reduce ( operator . mul , base_sizes [ dimension + 1 : ] , sympy . Integer ( 1 ) ) expr += base_size * a return expr\n", "title": "", "metadata": ""}
{"_id": "7cb638588821283693470a71e3231949", "text": "def clear_all ( self ) : self . injections . clear_all ( ) for config_file in CONFIG_FILES : self . injections . clear ( os . path . join ( \"~\" , config_file ) )\n", "title": "", "metadata": ""}
{"_id": "e87ad7f3ed6ac4e7d930ceed0698b671", "text": "def get_feature_order ( dataset , features ) : all_features = dataset . get_feature_names ( ) i = [ all_features . index ( f ) for f in features ] return i\n", "title": "", "metadata": ""}
{"_id": "6121a4f3077e1785805eb8bd3cd46506", "text": "def getoutput_pexpect ( self , cmd ) : try : return pexpect . run ( self . sh , args = [ '-c' , cmd ] ) . replace ( '\\r\\n' , '\\n' ) except KeyboardInterrupt : print ( '^C' , file = sys . stderr , end = '' )\n", "title": "", "metadata": ""}
{"_id": "561b1640f637515d3e881c84ebdd5fcd", "text": "def decamelise ( text ) : s = re . sub ( '(.)([A-Z][a-z]+)' , r'\\1_\\2' , text ) return re . sub ( '([a-z0-9])([A-Z])' , r'\\1_\\2' , s ) . lower ( )\n", "title": "", "metadata": ""}
{"_id": "19a5e059932a4ed2970dddfacde3611b", "text": "def filter_ ( stream_spec , filter_name , * args , * * kwargs ) : return filter ( stream_spec , filter_name , * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "6d73dc7991cd9e5fd6deac54c5f3da45", "text": "def repl_complete ( text : str , state : int ) -> Optional [ str ] : # Can't complete Keywords, Numerals if __NOT_COMPLETEABLE . match ( text ) : return None elif text . startswith ( \":\" ) : completions = kw . complete ( text ) else : ns = get_current_ns ( ) completions = ns . complete ( text ) return list ( completions ) [ state ] if completions is not None else None\n", "title": "", "metadata": ""}
{"_id": "29259262566a5641815218f1909886bd", "text": "def from_string ( cls , s ) : for num , text in cls . _STATUS2STR . items ( ) : if text == s : return cls ( num ) else : raise ValueError ( \"Wrong string %s\" % s )\n", "title": "", "metadata": ""}
{"_id": "8c94211fad2a4c331fea1a0480241b93", "text": "def fourier_series ( x , f , n = 0 ) : # Make the parameter objects for all the terms a0 ,  * cos_a = parameters ( ',' . join ( [ 'a{}' . format ( i ) for i in range ( 0 , n + 1 ) ] ) ) sin_b = parameters ( ',' . join ( [ 'b{}' . format ( i ) for i in range ( 1 , n + 1 ) ] ) ) # Construct the series series = a0 + sum ( ai * cos ( i * f * x ) + bi * sin ( i * f * x ) for i , ( ai , bi ) in enumerate ( zip ( cos_a , sin_b ) , start = 1 ) ) return series\n", "title": "", "metadata": ""}
{"_id": "c4dbcd3f2ee5eadfdc1dfa50d5854fb0", "text": "def duplicated_rows ( df , col_name ) : _check_cols ( df , [ col_name ] ) dups = df [ pd . notnull ( df [ col_name ] ) & df . duplicated ( subset = [ col_name ] ) ] return dups\n", "title": "", "metadata": ""}
{"_id": "e1a3dc123d6691c95f1bf246db52e405", "text": "def _increment_numeric_suffix ( s ) : if re . match ( r\".*\\d+$\" , s ) : return re . sub ( r\"\\d+$\" , lambda n : str ( int ( n . group ( 0 ) ) + 1 ) , s ) return s + \"_2\"\n", "title": "", "metadata": ""}
{"_id": "7db3d0f04ffacf249d98a99425184c6f", "text": "def numpy_to_yaml ( representer : Representer , data : np . ndarray ) -> Sequence [ Any ] : return representer . represent_sequence ( \"!numpy_array\" , data . tolist ( ) )\n", "title": "", "metadata": ""}
{"_id": "6e2b79c4bcff3903467be8a6593c5769", "text": "def floor ( self ) : return Point ( int ( math . floor ( self . x ) ) , int ( math . floor ( self . y ) ) )\n", "title": "", "metadata": ""}
{"_id": "673d3b61e261cc6021da190cd968222f", "text": "def generic_add ( a , b ) : logger . debug ( 'Called generic_add({}, {})' . format ( a , b ) ) return a + b\n", "title": "", "metadata": ""}
{"_id": "33ddeeb220aaf1b947c9ab411b74818e", "text": "def has_value ( cls , value : int ) -> bool : return any ( value == item . value for item in cls )\n", "title": "", "metadata": ""}
{"_id": "54dbe699e4abafd0d5bb2f70b21a1e82", "text": "def incr ( name , value = 1 , rate = 1 , tags = None ) : client ( ) . incr ( name , value , rate , tags )\n", "title": "", "metadata": ""}
{"_id": "b1e5b2214db1ce04a33ccf58a72ec94f", "text": "def delete ( self , id ) : if id in self . _images . keys ( ) : del self . _images [ id ] self . tk . delete ( id )\n", "title": "", "metadata": ""}
{"_id": "1a6ba309285347d4cc7ca9d4736aec70", "text": "def multiprocess_mapping ( func , iterable ) : if os . name == 'nt' : # In Windows there is no fork. return list ( map ( func , iterable ) ) try : p = multiprocessing . Pool ( ) return_data = list ( p . imap ( func , iterable ) ) p . close ( ) p . join ( ) return return_data except OSError : return list ( map ( func , iterable ) )\n", "title": "", "metadata": ""}
{"_id": "09aa0cb23d309ebbf1e43a25f308466d", "text": "def get_pid_list ( ) : pids = [ int ( x ) for x in os . listdir ( '/proc' ) if x . isdigit ( ) ] return pids\n", "title": "", "metadata": ""}
{"_id": "6d3b7b879ead58f18a2677d120876743", "text": "def _write_separator ( self ) : tmp = self . _page_width - ( ( 4 * self . __indent_level ) + 2 ) self . _write_line ( '# ' + ( '-' * tmp ) )\n", "title": "", "metadata": ""}
{"_id": "0c72664cc3e86ca880679c3e8ba02fc4", "text": "def list_blobs ( self , prefix = '' ) : return [ b . name for b in self . bucket . list_blobs ( prefix = prefix ) ]\n", "title": "", "metadata": ""}
{"_id": "d0f9278b7dd5c29844077d1625afb4f0", "text": "def strip_tweet ( text , remove_url = True ) : if remove_url : text = url_pattern . sub ( '' , text ) else : text = expand_url ( text ) text = mention_pattern . sub ( '' , text ) text = html_parser . unescape ( text ) text = text . strip ( ) return text\n", "title": "", "metadata": ""}
{"_id": "c32032a16bc63433866efcc73a47fe96", "text": "def blueprint_name_to_url ( name ) : if name [ - 1 : ] == \".\" : name = name [ : - 1 ] name = str ( name ) . replace ( \".\" , \"/\" ) return name\n", "title": "", "metadata": ""}
{"_id": "31871581e6bf62eb8d0c0a508318f2cb", "text": "def _re_raise_as ( NewExc , * args , * * kw ) : etype , val , tb = sys . exc_info ( ) raise NewExc ( * args , * * kw ) , None , tb\n", "title": "", "metadata": ""}
{"_id": "d3867efb42e471ba85c713712334e33e", "text": "def GetAllPixelColors ( self ) -> ctypes . Array : return self . GetPixelColorsOfRect ( 0 , 0 , self . Width , self . Height )\n", "title": "", "metadata": ""}
{"_id": "84249fbbee55d4e9050ce7464f2e91c3", "text": "def last_modified ( self ) -> Optional [ datetime . datetime ] : httpdate = self . _headers . get ( hdrs . LAST_MODIFIED ) if httpdate is not None : timetuple = parsedate ( httpdate ) if timetuple is not None : return datetime . datetime ( * timetuple [ : 6 ] , tzinfo = datetime . timezone . utc ) return None\n", "title": "", "metadata": ""}
{"_id": "a3b070ff5d49cba5e73146cb7f8c3b76", "text": "def __add__ ( self , other ) : return self . _handle_type ( other ) ( self . value + other . value )\n", "title": "", "metadata": ""}
{"_id": "94f8d6c323153f4d8d955a5ae054f6d0", "text": "def as_dict ( self ) : dicts = [ x . as_dict for x in self . children ] return { '{0} {1}' . format ( self . name , self . value ) : dicts }\n", "title": "", "metadata": ""}
{"_id": "4354af0b251ab091bcfb8cf7850ab401", "text": "def is_floating ( self ) : return ( self . is_numpy_compatible and np . issubdtype ( self . as_numpy_dtype , np . floating ) ) or self . base_dtype == bfloat16\n", "title": "", "metadata": ""}
{"_id": "07f3363372202cf4f3f54bc75ea6ccbd", "text": "def install_from_zip ( url ) : fname = 'tmp.zip' downlad_file ( url , fname ) unzip_file ( fname ) print ( \"Removing {}\" . format ( fname ) ) os . unlink ( fname )\n", "title": "", "metadata": ""}
{"_id": "07807bc17e603d96aba285fd88ce6911", "text": "def index ( self , item ) : for i , x in enumerate ( self . iter ( ) ) : if x == item : return i return None\n", "title": "", "metadata": ""}
{"_id": "babfa3c1c16799f49cefbd287262085a", "text": "def print_message ( message = None ) : kwargs = { 'stdout' : sys . stdout , 'stderr' : sys . stderr , 'shell' : True } return subprocess . call ( 'echo \"{0}\"' . format ( message or '' ) , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "cbdc6f01be5e68af95a52234599a9252", "text": "def forward ( self , step ) : x = self . pos_x + math . cos ( math . radians ( self . rotation ) ) * step y = self . pos_y + math . sin ( math . radians ( self . rotation ) ) * step prev_brush_state = self . brush_on self . brush_on = True self . move ( x , y ) self . brush_on = prev_brush_state\n", "title": "", "metadata": ""}
{"_id": "69d0e967ad24f351d74c1187f953689d", "text": "def str_to_num ( str_value ) : str_value = str ( str_value ) try : return int ( str_value ) except ValueError : return float ( str_value )\n", "title": "", "metadata": ""}
{"_id": "9dc2b2f91bdbcbafa1a08a62079ede36", "text": "def flatten_all_but_last ( a ) : ret = tf . reshape ( a , [ - 1 , tf . shape ( a ) [ - 1 ] ] ) if not tf . executing_eagerly ( ) : ret . set_shape ( [ None ] + a . get_shape ( ) . as_list ( ) [ - 1 : ] ) return ret\n", "title": "", "metadata": ""}
{"_id": "277582780aaa8aecd71acc4a41ad9f07", "text": "def align_file_position ( f , size ) : align = ( size - 1 ) - ( f . tell ( ) % size ) f . seek ( align , 1 )\n", "title": "", "metadata": ""}
{"_id": "4252a12e4faa6c585400dc6f6820cba5", "text": "def send_post ( self , url , data , remove_header = None ) : return self . send_request ( method = \"post\" , url = url , data = data , remove_header = remove_header )\n", "title": "", "metadata": ""}
{"_id": "6c7905d53e523d96b8f6ec7a84dcc3d2", "text": "def distinct_permutations ( iterable ) : def make_new_permutations ( permutations , e ) : \"\"\"Internal helper function.         The output permutations are built up by adding element *e* to the         current *permutations* at every possible position.         The key idea is to keep repeated elements (reverse) ordered:         if e1 == e2 and e1 is before e2 in the iterable, then all permutations         with e1 before e2 are ignored.          \"\"\" for permutation in permutations : for j in range ( len ( permutation ) ) : yield permutation [ : j ] + [ e ] + permutation [ j : ] if permutation [ j ] == e : break else : yield permutation + [ e ] permutations = [ [ ] ] for e in iterable : permutations = make_new_permutations ( permutations , e ) return ( tuple ( t ) for t in permutations )\n", "title": "", "metadata": ""}
{"_id": "0d92a587751a4b004e017de8cc6da6c6", "text": "def content_type ( self ) -> ContentType : return self . _ctype if self . _ctype else self . parent . content_type ( )\n", "title": "", "metadata": ""}
{"_id": "f1d78aaed00a1c451c33a7b6113950ef", "text": "def values ( self ) : lower = float ( self . lowerSpnbx . value ( ) ) upper = float ( self . upperSpnbx . value ( ) ) return ( lower , upper )\n", "title": "", "metadata": ""}
{"_id": "23589bac3f0c9af7aae06960b77cbbfa", "text": "def should_rollover ( self , record : LogRecord ) -> bool : t = int ( time . time ( ) ) if t >= self . rollover_at : return True return False\n", "title": "", "metadata": ""}
{"_id": "58e2e75eca0ee4636c39b9af18fb19e5", "text": "def stack_as_string ( ) : if sys . version_info . major == 3 : stack = io . StringIO ( ) else : stack = io . BytesIO ( ) traceback . print_stack ( file = stack ) stack . seek ( 0 ) stack = stack . read ( ) return stack\n", "title": "", "metadata": ""}
{"_id": "b11e4d5ffc4ac1ea80efd7d091b0a4dc", "text": "def indent ( block , spaces ) : new_block = '' for line in block . split ( '\\n' ) : new_block += spaces + line + '\\n' return new_block\n", "title": "", "metadata": ""}
{"_id": "e5ecd1b2b8bb4d2fa1c1adbfe984cad9", "text": "def delete_environment ( self , environment_name ) : self . ebs . terminate_environment ( environment_name = environment_name , terminate_resources = True )\n", "title": "", "metadata": ""}
{"_id": "f5fcb6867d77b59ba197255a7d9abbd0", "text": "def shader_string ( body , glsl_version = '450 core' ) : line_count = len ( body . split ( '\\n' ) ) line_number = inspect . currentframe ( ) . f_back . f_lineno + 1 - line_count return \"\"\"\\ #version %s %s \"\"\" % ( glsl_version , shader_substring ( body , stack_frame = 2 ) )\n", "title": "", "metadata": ""}
{"_id": "23250fbb25e69437a32706cd4021c7a9", "text": "def CreateVertices ( self , points ) : gr = digraph ( ) for z , x , Q in points : node = ( z , x , Q ) gr . add_nodes ( [ node ] ) return gr\n", "title": "", "metadata": ""}
{"_id": "e1fcded4593b9c7a9af5c557d0616652", "text": "def mark ( self , n = 1 ) : self . tick_if_necessary ( ) self . count += n self . m1_rate . update ( n ) self . m5_rate . update ( n ) self . m15_rate . update ( n )\n", "title": "", "metadata": ""}
{"_id": "71aa7ac768fdc76e05acaec6fb646d90", "text": "def remove_element ( self , e ) : if e . label is not None : self . elementdict . pop ( e . label ) self . elementlist . remove ( e )\n", "title": "", "metadata": ""}
{"_id": "fac7458a3d4d757498713ea35caa33e7", "text": "def header_status ( header ) : status_line = header [ : header . find ( '\\r' ) ] # 'HTTP/1.1 200 OK' -> (200, 'OK') fields = status_line . split ( None , 2 ) return int ( fields [ 1 ] ) , fields [ 2 ]\n", "title": "", "metadata": ""}
{"_id": "dd41c0019cd6b8913e1c5d9b558b2cc0", "text": "def parse_date ( s ) : try : return datetime . date ( int ( s [ : 4 ] ) , int ( s [ 5 : 7 ] ) , int ( s [ 8 : 10 ] ) ) except ValueError : # other accepted format used in one-day data set return datetime . datetime . strptime ( s , '%d %B %Y' ) . date ( )\n", "title": "", "metadata": ""}
{"_id": "b80e2ac9f64566b3216f1caba443d9fa", "text": "def win32_refresh_window ( cls ) : # Get console handle handle = windll . kernel32 . GetConsoleWindow ( ) RDW_INVALIDATE = 0x0001 windll . user32 . RedrawWindow ( handle , None , None , c_uint ( RDW_INVALIDATE ) )\n", "title": "", "metadata": ""}
{"_id": "cfe1b68f1428c59adb16acf9b5f14a5c", "text": "def unique ( iterable ) : seen = set ( ) for item in iterable : if item not in seen : seen . add ( item ) yield item\n", "title": "", "metadata": ""}
{"_id": "39660bfe859fd6b921a22afbc732a5f5", "text": "def lock_file ( f , block = False ) : try : flags = fcntl . LOCK_EX if not block : flags |= fcntl . LOCK_NB fcntl . flock ( f . fileno ( ) , flags ) except IOError as e : if e . errno in ( errno . EACCES , errno . EAGAIN ) : raise SystemExit ( \"ERROR: %s is locked by another process.\" % f . name ) raise\n", "title": "", "metadata": ""}
{"_id": "25b3e744a3b4001fd510b6083fc02497", "text": "def polite_string ( a_string ) : if is_py3 ( ) and hasattr ( a_string , 'decode' ) : try : return a_string . decode ( 'utf-8' ) except UnicodeDecodeError : return a_string return a_string\n", "title": "", "metadata": ""}
{"_id": "1707b87ab38f1e63fcc04edfe227b4af", "text": "def get_system_cpu_times ( ) : user , nice , system , idle = _psutil_osx . get_system_cpu_times ( ) return _cputimes_ntuple ( user , nice , system , idle )\n", "title": "", "metadata": ""}
{"_id": "543151aeac1800d75ff516ac6bd68ce8", "text": "def phase_correct_first ( spec , freq , k ) : c_factor = np . exp ( - 1j * k * freq ) c_factor = c_factor . reshape ( ( len ( spec . shape ) - 1 ) * ( 1 , ) + c_factor . shape ) return spec * c_factor\n", "title": "", "metadata": ""}
{"_id": "86fb0bc76a035d54abfa4dfc19a680a1", "text": "def register_extension_class ( ext , base , * args , * * kwargs ) : ext_instance = ext . plugin ( base , * args , * * kwargs ) setattr ( base , ext . name . lstrip ( '_' ) , ext_instance )\n", "title": "", "metadata": ""}
{"_id": "98f2fd516bc85f0c950850d7cb148f16", "text": "def __remove_method ( m : lmap . Map , key : T ) -> lmap . Map : return m . dissoc ( key )\n", "title": "", "metadata": ""}
{"_id": "29bd885b4141f801f7123f54b1b4b95a", "text": "def get_model ( name ) : model = MODELS . get ( name . lower ( ) , None ) assert model , \"Could not locate model by name '%s'\" % name return model\n", "title": "", "metadata": ""}
{"_id": "45c0699d44010767f47656a120626fb7", "text": "def _get_latest_version ( ) : url = 'https://api.github.com/repos/{}/releases/latest' . format ( constants . DUSTY_GITHUB_PATH ) conn = urllib . urlopen ( url ) if conn . getcode ( ) >= 300 : raise RuntimeError ( 'GitHub api returned code {}; can\\'t determine latest version.  Aborting' . format ( conn . getcode ( ) ) ) json_data = conn . read ( ) return json . loads ( json_data ) [ 'tag_name' ]\n", "title": "", "metadata": ""}
{"_id": "8c4d16efb6c4579e28894f1bc017516e", "text": "def calc_base64 ( s ) : s = compat . to_bytes ( s ) s = compat . base64_encodebytes ( s ) . strip ( ) # return bytestring return compat . to_native ( s )\n", "title": "", "metadata": ""}
{"_id": "eaef14bdceb1c9a10d19f1d799b1dd89", "text": "def csvtolist ( inputstr ) : reader = csv . reader ( [ inputstr ] , skipinitialspace = True ) output = [ ] for r in reader : output += r return output\n", "title": "", "metadata": ""}
{"_id": "428c7b725d140623c00e9d47a4ccf631", "text": "def convert_camel_case_string ( name : str ) -> str : string = re . sub ( \"(.)([A-Z][a-z]+)\" , r\"\\1_\\2\" , name ) return re . sub ( \"([a-z0-9])([A-Z])\" , r\"\\1_\\2\" , string ) . lower ( )\n", "title": "", "metadata": ""}
{"_id": "0457981ae79650970954151219425e9a", "text": "def package_in_pypi ( package ) : url = 'http://pypi.python.org/simple/%s' % package try : urllib . request . urlopen ( url ) return True except urllib . error . HTTPError as e : logger . debug ( \"Package not found on pypi: %s\" , e ) return False\n", "title": "", "metadata": ""}
{"_id": "e6ffd4c43831a1f0d5104dfcd4a6530d", "text": "def _check_list_len ( row , length ) : if len ( row ) != length : raise Exception ( \"row length does not match expected length of \" + str ( length ) + \"\\nrow: \" + str ( row ) )\n", "title": "", "metadata": ""}
{"_id": "71fd1460ad295af1ce16f96374af5a44", "text": "def get_as_string ( self , s3_path , encoding = 'utf-8' ) : content = self . get_as_bytes ( s3_path ) return content . decode ( encoding )\n", "title": "", "metadata": ""}
{"_id": "38c5589ba749e151093c05d7cfea12cf", "text": "def register_service ( self , service ) : if service not in self . services : self . services . append ( service )\n", "title": "", "metadata": ""}
{"_id": "02104bc5f2fa52af5a9e031e59851da1", "text": "def cluster_kmeans ( data , n_clusters , * * kwargs ) : km = cl . KMeans ( n_clusters , * * kwargs ) kmf = km . fit ( data ) labels = kmf . labels_ return labels , [ np . nan ]\n", "title": "", "metadata": ""}
{"_id": "572ebc5617ed1b57d11fa266b1505f6a", "text": "def plot_dot_graph ( graph , filename = None ) : if not plot . pygraphviz_available : logger . error ( \"Pygraphviz is not installed, cannot generate graph plot!\" ) return if not plot . PIL_available : logger . error ( \"PIL is not installed, cannot display graph plot!\" ) return agraph = AGraph ( graph ) agraph . layout ( prog = 'dot' ) if filename is None : filename = tempfile . mktemp ( suffix = \".png\" ) agraph . draw ( filename ) image = Image . open ( filename ) image . show ( )\n", "title": "", "metadata": ""}
{"_id": "c1d4ac40a86b6020044423d90f5dc0ff", "text": "def isreal ( obj ) : return ( ( obj is not None ) and ( not isinstance ( obj , bool ) ) and isinstance ( obj , ( int , float ) ) )\n", "title": "", "metadata": ""}
{"_id": "e9532e5b0b577230b71ca96eec232bdb", "text": "def enumerate_chunks ( phrase , spacy_nlp ) : if ( len ( phrase ) > 1 ) : found = False text = \" \" . join ( [ rl . text for rl in phrase ] ) doc = spacy_nlp ( text . strip ( ) , parse = True ) for np in doc . noun_chunks : if np . text != text : found = True yield np . text , find_chunk ( phrase , np . text . split ( \" \" ) ) if not found and all ( [ rl . pos [ 0 ] != \"v\" for rl in phrase ] ) : yield text , phrase\n", "title": "", "metadata": ""}
{"_id": "987afdfb7773b0689b728c5727cd47e6", "text": "def _file_chunks ( self , data , chunk_size ) : for i in xrange ( 0 , len ( data ) , chunk_size ) : yield self . compressor ( data [ i : i + chunk_size ] )\n", "title": "", "metadata": ""}
{"_id": "e8073e2bd927ad6b6ef9e1424f1efa08", "text": "def create_ellipse ( width , height , angle ) : angle = angle / 180.0 * np . pi thetas = np . linspace ( 0 , 2 * np . pi , 200 ) a = width / 2.0 b = height / 2.0 x = a * np . cos ( thetas ) * np . cos ( angle ) - b * np . sin ( thetas ) * np . sin ( angle ) y = a * np . cos ( thetas ) * np . sin ( angle ) + b * np . sin ( thetas ) * np . cos ( angle ) z = np . zeros ( thetas . shape ) return np . vstack ( ( x , y , z ) ) . T\n", "title": "", "metadata": ""}
{"_id": "27f2f376bcdd2c98cf0fa76c4d7d7d39", "text": "def check_lengths ( * arrays ) : lengths = [ len ( array ) for array in arrays ] if len ( np . unique ( lengths ) ) > 1 : raise ValueError ( 'Inconsistent data lengths: {}' . format ( lengths ) )\n", "title": "", "metadata": ""}
{"_id": "12793121c1f33ecde3f2ec0e91349617", "text": "def _stdin_ ( p ) : _v = sys . version [ 0 ] return input ( p ) if _v is '3' else raw_input ( p )\n", "title": "", "metadata": ""}
{"_id": "1d337dbbf830c4b68754251aa345466e", "text": "def create_widget ( self ) : d = self . declaration button_type = UIButton . UIButtonTypeSystem if d . flat else UIButton . UIButtonTypeRoundedRect self . widget = UIButton ( buttonWithType = button_type )\n", "title": "", "metadata": ""}
{"_id": "991f9273a24a4cf8f9c72bad6c898fed", "text": "def _tree_line ( self , no_type : bool = False ) -> str : return self . _tree_line_prefix ( ) + \" \" + self . iname ( )\n", "title": "", "metadata": ""}
{"_id": "9eaab2357f9b52c6405227380c2b3659", "text": "def guess_file_type ( kind , filepath = None , youtube_id = None , web_url = None , encoding = None ) : if youtube_id : return FileTypes . YOUTUBE_VIDEO_FILE elif web_url : return FileTypes . WEB_VIDEO_FILE elif encoding : return FileTypes . BASE64_FILE else : ext = os . path . splitext ( filepath ) [ 1 ] [ 1 : ] . lower ( ) if kind in FILE_TYPE_MAPPING and ext in FILE_TYPE_MAPPING [ kind ] : return FILE_TYPE_MAPPING [ kind ] [ ext ] return None\n", "title": "", "metadata": ""}
{"_id": "f43fd368e152a7868beb147543d4fe50", "text": "def vec ( self ) : return np . r_ [ self . fx , self . fy , self . cx , self . cy , self . skew , self . height , self . width ]\n", "title": "", "metadata": ""}
{"_id": "4d6a28047c0c8da4d9f877cdbdb7d009", "text": "def size ( ) : try : assert os != 'nt' and sys . stdout . isatty ( ) rows , columns = os . popen ( 'stty size' , 'r' ) . read ( ) . split ( ) except ( AssertionError , AttributeError , ValueError ) : # in case of failure, use dimensions of a full screen 13\" laptop rows , columns = DEFAULT_HEIGHT , DEFAULT_WIDTH return int ( rows ) , int ( columns )\n", "title": "", "metadata": ""}
{"_id": "a3384edf63fd6bba5132e858a2530dd0", "text": "def paste ( xsel = False ) : selection = \"primary\" if xsel else \"clipboard\" try : return subprocess . Popen ( [ \"xclip\" , \"-selection\" , selection , \"-o\" ] , stdout = subprocess . PIPE ) . communicate ( ) [ 0 ] . decode ( \"utf-8\" ) except OSError as why : raise XclipNotFound\n", "title": "", "metadata": ""}
{"_id": "806d8b44cc787945dc23580880b507f6", "text": "def unique ( list ) : unique = [ ] [ unique . append ( x ) for x in list if x not in unique ] return unique\n", "title": "", "metadata": ""}
{"_id": "2547001475964cd39b8933e48db7b660", "text": "def convert ( self , value , _type ) : return self . type_convertors . get ( _type , lambda x : x ) ( value )\n", "title": "", "metadata": ""}
{"_id": "32b1c96e380741d6b28ddbcf027569a8", "text": "def setwinsize ( self , rows , cols ) : self . _winsize = ( rows , cols ) self . pty . set_size ( cols , rows )\n", "title": "", "metadata": ""}
{"_id": "3d89f254a953015ca0936b6c797d01a4", "text": "def clean_int ( x ) -> int : try : return int ( x ) except ValueError : raise forms . ValidationError ( \"Cannot convert to integer: {}\" . format ( repr ( x ) ) )\n", "title": "", "metadata": ""}
{"_id": "12266ecbc2208a95c8dc1a6ead077114", "text": "def draw_tree ( t , df , size = 10 , ratio = 0.6 , precision = 0 ) : s = export_graphviz ( t , out_file = None , feature_names = df . columns , filled = True , special_characters = True , rotate = True , precision = precision ) IPython . display . display ( graphviz . Source ( re . sub ( 'Tree {' , f'Tree {{ size={size}; ratio={ratio}' , s ) ) )\n", "title": "", "metadata": ""}
{"_id": "7f973fb9633e9f914ab20de3dd0147c5", "text": "def optional ( self , value = None ) : # If there's no value, this is a getter if value is None : return this . _optional # Else, set the flag else : this . _optional = value and True or False\n", "title": "", "metadata": ""}
{"_id": "d34b5a047b533eb59c94f7db70bec6a1", "text": "def test ( ctx , all = False , verbose = False ) : cmd = 'tox' if all else 'py.test' if verbose : cmd += ' -v' return ctx . run ( cmd , pty = True ) . return_code\n", "title": "", "metadata": ""}
{"_id": "7f7ef6747a91f9dcf71a4ecfca62b6f2", "text": "def get_size_in_bytes ( self , handle ) : fpath = self . _fpath_from_handle ( handle ) return os . stat ( fpath ) . st_size\n", "title": "", "metadata": ""}
{"_id": "a2289ed792c33171f2d6eba74361d962", "text": "def _svd ( cls , matrix , num_concepts = 5 ) : u , s , v = svds ( matrix , k = num_concepts ) return u , s , v\n", "title": "", "metadata": ""}
{"_id": "3df63f5d1905f58ba4a510d71ce5e026", "text": "def __Logout ( si ) : try : if si : content = si . RetrieveContent ( ) content . sessionManager . Logout ( ) except Exception as e : pass\n", "title": "", "metadata": ""}
{"_id": "d2fc5dbe98dd02a4e7f7e9082137782f", "text": "def distance ( vec1 , vec2 ) : if isinstance ( vec1 , Vector2 ) and isinstance ( vec2 , Vector2 ) : dist_vec = vec2 - vec1 return dist_vec . length ( ) else : raise TypeError ( \"vec1 and vec2 must be Vector2's\" )\n", "title": "", "metadata": ""}
{"_id": "294632522c761222e3106de9b62e439b", "text": "def clean ( dry_run = 'n' ) : file_patterns = [ '*.pyc' , '*.pyo' , '*~' ] dir_patterns = [ '__pycache__' ] recursive_pattern_delete ( project_paths . root , file_patterns , dir_patterns , dry_run = bool ( dry_run . lower ( ) == 'y' ) )\n", "title": "", "metadata": ""}
{"_id": "d3d9eb11becb82b98befcfe530cea757", "text": "def _read_indexlist ( self , name ) : setattr ( self , '_' + name , [ self . _timeline [ int ( i ) ] for i in self . db . lrange ( 'site:{0}' . format ( name ) , 0 , - 1 ) ] )\n", "title": "", "metadata": ""}
{"_id": "6ca7311ea028e2e209a35447e2ef9fc9", "text": "def get_groups ( self , username ) : username = ldap . filter . escape_filter_chars ( self . _byte_p2 ( username ) ) userdn = self . _get_user ( username , NO_ATTR ) searchfilter = self . group_filter_tmpl % { 'userdn' : userdn , 'username' : username } groups = self . _search ( searchfilter , NO_ATTR , self . groupdn ) ret = [ ] for entry in groups : ret . append ( self . _uni ( entry [ 0 ] ) ) return ret\n", "title": "", "metadata": ""}
{"_id": "1ec1988e7d09cdd0fbaf5bf382ab874f", "text": "def _calculate_similarity ( c ) : ma = { } for idc in c : set1 = _get_seqs ( c [ idc ] ) [ ma . update ( { ( idc , idc2 ) : _common ( set1 , _get_seqs ( c [ idc2 ] ) , idc , idc2 ) } ) for idc2 in c if idc != idc2 and ( idc2 , idc ) not in ma ] # logger.debug(\"_calculate_similarity_ %s\" % ma) return ma\n", "title": "", "metadata": ""}
{"_id": "f9589af64c89a07a8515dbbbe9065a75", "text": "def compute_ssim ( image1 , image2 , gaussian_kernel_sigma = 1.5 , gaussian_kernel_width = 11 ) : gaussian_kernel_1d = get_gaussian_kernel ( gaussian_kernel_width , gaussian_kernel_sigma ) return SSIM ( image1 , gaussian_kernel_1d ) . ssim_value ( image2 )\n", "title": "", "metadata": ""}
{"_id": "0bd5b378cc075caddc1dd1948e69f87f", "text": "def max ( self ) : if len ( self . regions ) != 1 : raise ClaripyVSAOperationError ( \"'max()' onlly works on single-region value-sets.\" ) return self . get_si ( next ( iter ( self . regions ) ) ) . max\n", "title": "", "metadata": ""}
{"_id": "2c0f3d715d2fe870f902083d87d34b92", "text": "def _get_node_path ( self , node ) : path = [ ] while node . up : path . append ( node . name ) node = node . up return list ( reversed ( path ) )\n", "title": "", "metadata": ""}
{"_id": "724e26e0d5245c52ed57bc5370a2e842", "text": "def bulk_load_docs ( es , docs ) : chunk_size = 200 try : results = elasticsearch . helpers . bulk ( es , docs , chunk_size = chunk_size ) log . debug ( f\"Elasticsearch documents loaded: {results[0]}\" ) # elasticsearch.helpers.parallel_bulk(es, terms, chunk_size=chunk_size, thread_count=4) if len ( results [ 1 ] ) > 0 : log . error ( \"Bulk load errors {}\" . format ( results ) ) except elasticsearch . ElasticsearchException as e : log . error ( \"Indexing error: {}\\n\" . format ( e ) )\n", "title": "", "metadata": ""}
{"_id": "12c65e010c7c99b6fa884fe62ce30efa", "text": "def focus ( self ) : self . _has_focus = True self . _frame . move_to ( self . _x , self . _y , self . _h ) if self . _on_focus is not None : self . _on_focus ( )\n", "title": "", "metadata": ""}
{"_id": "3840e2292c103c5d7076ed87c55bcc8f", "text": "def memory_read ( self , start_position : int , size : int ) -> memoryview : return self . _memory . read ( start_position , size )\n", "title": "", "metadata": ""}
{"_id": "cc79fef6db255bb7b4a550267e5090a1", "text": "def file_writelines_flush_sync ( path , lines ) : fp = open ( path , 'w' ) try : fp . writelines ( lines ) flush_sync_file_object ( fp ) finally : fp . close ( )\n", "title": "", "metadata": ""}
{"_id": "9410c91bf5c3a7aaa079f598fa395f2a", "text": "def __getattr__ ( self , * args , * * kwargs ) : return xmlrpc . client . _Method ( self . __request , * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "613e7960c3db5fbc7f0e507d0f372b5c", "text": "def is_numeric ( value ) : return type ( value ) in [ int , float , np . int8 , np . int16 , np . int32 , np . int64 , np . float16 , np . float32 , np . float64 , np . float128 ]\n", "title": "", "metadata": ""}
{"_id": "90ccb5889e849e1ae69cf45ab58fbcf5", "text": "def __init__ ( self , find , subcon ) : Subconstruct . __init__ ( self , subcon ) self . find = find\n", "title": "", "metadata": ""}
{"_id": "9d65e0cd8e793fc232e8d723dc0958cc", "text": "def isdir ( path , * * kwargs ) : import os . path return os . path . isdir ( path , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "35b9eb19f6cb2eb7e90e47b15574fb5e", "text": "def wrap_count ( method ) : number = 0 while hasattr ( method , '__aspects_orig' ) : number += 1 method = method . __aspects_orig return number\n", "title": "", "metadata": ""}
{"_id": "d1ed327feee6963501bd7762cd84092f", "text": "def __init__ ( self , usb ) : self . _usb = usb self . _protocol = self . protocol_handler ( usb )\n", "title": "", "metadata": ""}
{"_id": "410283f224aed7d7cdfa40b9857eacca", "text": "def from_json ( cls , json_doc ) : try : d = json . load ( json_doc ) except AttributeError : # catch the read() error d = json . loads ( json_doc ) return cls . from_dict ( d )\n", "title": "", "metadata": ""}
{"_id": "030a9390f8990e5a031ea5180631ee61", "text": "def cli ( ctx , project_dir ) : exit_code = SCons ( project_dir ) . clean ( ) ctx . exit ( exit_code )\n", "title": "", "metadata": ""}
{"_id": "300d0746fff039dedd8f972ab3afa144", "text": "def best ( self ) : b = ( - 1e999999 , None ) for k , c in iteritems ( self . counts ) : b = max ( b , ( c , k ) ) return b [ 1 ]\n", "title": "", "metadata": ""}
{"_id": "8e01d17e4c95c3b20e4723d4d93fa9a6", "text": "def comment ( self , s , * * args ) : self . writeln ( s = u'comment \"%s\"' % s , * * args )\n", "title": "", "metadata": ""}
{"_id": "35b19a3aad62ad22a67bb7381c08d24a", "text": "def is_unix_like ( platform = None ) : platform = platform or sys . platform platform = platform . lower ( ) return platform . startswith ( \"linux\" ) or platform . startswith ( \"darwin\" ) or platform . startswith ( \"cygwin\" )\n", "title": "", "metadata": ""}
{"_id": "562e0a99e423088a47aad241f43dcc0f", "text": "def drag_and_drop ( self , droppable ) : self . scroll_to ( ) ActionChains ( self . parent . driver ) . drag_and_drop ( self . _element , droppable . _element ) . perform ( )\n", "title": "", "metadata": ""}
{"_id": "894724aca3e1b004e8b3b15d1597807f", "text": "def clear ( ) : if sys . platform . startswith ( \"win\" ) : call ( \"cls\" , shell = True ) else : call ( \"clear\" , shell = True )\n", "title": "", "metadata": ""}
{"_id": "f2b4e28cbce31a01faa1195b0e49d553", "text": "def is_array ( type_ ) : nake_type = remove_alias ( type_ ) nake_type = remove_reference ( nake_type ) nake_type = remove_cv ( nake_type ) return isinstance ( nake_type , cpptypes . array_t )\n", "title": "", "metadata": ""}
{"_id": "e6eca421018beb3180acaf1497bb1bc1", "text": "def _check_surrounded_by_space ( self , tokens , i ) : self . _check_space ( tokens , i , ( _MUST , _MUST ) )\n", "title": "", "metadata": ""}
{"_id": "b4b214ebf75b6ac526fc36f1734e9dcb", "text": "def has_table ( self , name ) : return len ( self . sql ( \"SELECT name FROM sqlite_master WHERE type='table' AND name=?\" , parameters = ( name , ) , asrecarray = False , cache = False ) ) > 0\n", "title": "", "metadata": ""}
{"_id": "ea372a078b3f658c5df72f36b146e454", "text": "def method_header ( method_name , nogil = False , idx_as_arg = False ) : if not config . FASTCYTHON : nogil = False header = 'cpdef inline void %s(self' % method_name header += ', int idx)' if idx_as_arg else ')' header += ' nogil:' if nogil else ':' return header\n", "title": "", "metadata": ""}
{"_id": "52f4ba657e4e6d91a0c42557f48e425b", "text": "def test_value ( self , value ) : if not isinstance ( value , float ) : raise ValueError ( 'expected float value: ' + str ( type ( value ) ) )\n", "title": "", "metadata": ""}
{"_id": "31638acab14254c2662fafb8eaa20d0d", "text": "def __PrintEnumDocstringLines ( self , enum_type ) : description = enum_type . description or '%s enum type.' % enum_type . name for line in textwrap . wrap ( 'r\"\"\"%s' % description , self . __printer . CalculateWidth ( ) ) : self . __printer ( line ) PrintIndentedDescriptions ( self . __printer , enum_type . values , 'Values' ) self . __printer ( '\"\"\"' )\n", "title": "", "metadata": ""}
{"_id": "4fa596be101a5eba337c6d9459cf4eb8", "text": "def distinct ( xs ) : # don't use collections.OrderedDict because we do support Python 2.6 seen = set ( ) return [ x for x in xs if x not in seen and not seen . add ( x ) ]\n", "title": "", "metadata": ""}
{"_id": "2dbd7a3c9ea83c043d5e049bfd504428", "text": "def dict_to_enum_fn ( d : Dict [ str , Any ] , enum_class : Type [ Enum ] ) -> Enum : return enum_class [ d [ 'name' ] ]\n", "title": "", "metadata": ""}
{"_id": "7df5eedf1adc5c0496ff6266f1aaa968", "text": "def _GetProxies ( self ) : # Detect proxies from the OS environment. result = client_utils . FindProxies ( ) # Also try to connect directly if all proxies fail. result . append ( \"\" ) # Also try all proxies configured in the config system. result . extend ( config . CONFIG [ \"Client.proxy_servers\" ] ) return result\n", "title": "", "metadata": ""}
{"_id": "2f80d336988a2b3a734c54cc8fac0076", "text": "def import_js ( path , lib_name , globals ) : with codecs . open ( path_as_local ( path ) , \"r\" , \"utf-8\" ) as f : js = f . read ( ) e = EvalJs ( ) e . execute ( js ) var = e . context [ 'var' ] globals [ lib_name ] = var . to_python ( )\n", "title": "", "metadata": ""}
{"_id": "9c2266c9ee00c4838f92e90273014a4f", "text": "def trans_from_matrix ( matrix ) : t = np . zeros ( ( 4 , 4 ) ) for i in range ( 4 ) : for j in range ( 4 ) : t [ i , j ] = matrix . GetElement ( i , j ) return t\n", "title": "", "metadata": ""}
{"_id": "89f56aae2de2f621ee4b425e116b5eac", "text": "def callproc ( self , name , params , param_types = None ) : if param_types : placeholders = [ self . sql_writer . typecast ( self . sql_writer . to_placeholder ( ) , t ) for t in param_types ] else : placeholders = [ self . sql_writer . to_placeholder ( ) for p in params ] # TODO: This may be Postgres specific... qs = \"select * from {0}({1});\" . format ( name , \", \" . join ( placeholders ) ) return self . execute ( qs , params ) , params\n", "title": "", "metadata": ""}
{"_id": "0f5d48701b1177e9170abd92da824ba5", "text": "def raw ( self ) : es = self . get_es ( ) params = dict ( self . query_params ) mlt_fields = self . mlt_fields or params . pop ( 'mlt_fields' , [ ] ) body = self . s . build_search ( ) if self . s else '' hits = es . mlt ( index = self . index , doc_type = self . doctype , id = self . id , mlt_fields = mlt_fields , body = body , * * params ) log . debug ( hits ) return hits\n", "title": "", "metadata": ""}
{"_id": "93c562b4689b0ed0826dbd7a3bfc346d", "text": "def nlevels ( self ) : levels = self . levels ( ) return [ len ( l ) for l in levels ] if levels else 0\n", "title": "", "metadata": ""}
{"_id": "b6d8470698ddd0e2d6dc0a4e0524d49d", "text": "def _get_image_numpy_dtype ( self ) : try : ftype = self . _info [ 'img_equiv_type' ] npy_type = _image_bitpix2npy [ ftype ] except KeyError : raise KeyError ( \"unsupported fits data type: %d\" % ftype ) return npy_type\n", "title": "", "metadata": ""}
{"_id": "fe38bdcb2a0edb63741e4180f8d91b3b", "text": "def get_path_from_query_string ( req ) : if req . args . get ( 'path' ) is None : raise exceptions . UserError ( 'Path not found in query string' ) return req . args . get ( 'path' )\n", "title": "", "metadata": ""}
{"_id": "debf7dd3f83e8b66142b71cd37629af0", "text": "def build_docs ( directory ) : os . chdir ( directory ) process = subprocess . Popen ( [ \"make\" , \"html\" ] , cwd = directory ) process . communicate ( )\n", "title": "", "metadata": ""}
{"_id": "aa1281eec70034a14a2372cd03b07594", "text": "def _latest_date ( self , query , datetime_field_name ) : return list ( query . aggregate ( django . db . models . Max ( datetime_field_name ) ) . values ( ) ) [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "ad3c3c5590b95550d2be5629d49e923d", "text": "def min_values ( args ) : return Interval ( min ( x . low for x in args ) , min ( x . high for x in args ) )\n", "title": "", "metadata": ""}
{"_id": "bb26550e6732f7e09732903c77e9d4fa", "text": "def EvalPoissonPmf ( k , lam ) : # don't use the scipy function (yet).  for lam=0 it returns NaN; # should be 0.0 # return scipy.stats.poisson.pmf(k, lam) return lam ** k * math . exp ( - lam ) / math . factorial ( k )\n", "title": "", "metadata": ""}
{"_id": "8bd41ef8e6a51a1f17df5b86e6f3911c", "text": "def capture_stdout ( ) : stdout = sys . stdout sys . stdout = six . moves . cStringIO ( ) try : yield sys . stdout finally : sys . stdout = stdout\n", "title": "", "metadata": ""}
{"_id": "34768ccc8abcaf3a18468eb7a4f08580", "text": "def timestamp_to_datetime ( cls , dt , dt_format = DATETIME_FORMAT ) : return cls . convert_datetime ( cls . get_datetime ( dt ) , dt_format = dt_format )\n", "title": "", "metadata": ""}
{"_id": "913908ac54c1804dbe46f1196277fe00", "text": "def setVolume ( self , volume ) : val = float ( val ) cmd = \"volume %s\" % val self . _execute ( cmd )\n", "title": "", "metadata": ""}
{"_id": "f7aa03bd2786a11dcaa995a68df628db", "text": "def _ndarray_representer ( dumper , data ) : mapping = [ ( 'object' , data . tolist ( ) ) , ( 'dtype' , data . dtype . name ) ] return dumper . represent_mapping ( _NUMPY_ARRAY_TAG , mapping )\n", "title": "", "metadata": ""}
{"_id": "e8d39d9be0dfa13f3f2046954a9244b3", "text": "def get_case_insensitive_dict_key ( d : Dict , k : str ) -> Optional [ str ] : for key in d . keys ( ) : if k . lower ( ) == key . lower ( ) : return key return None\n", "title": "", "metadata": ""}
{"_id": "eebe15c1d89799acd81917062acbed01", "text": "def _image_field ( self ) : for field in self . model . _meta . fields : if isinstance ( field , ImageField ) : return field . name\n", "title": "", "metadata": ""}
{"_id": "b29009734767041c3ec7857b7ff20f31", "text": "def gevent_monkey_patch_report ( self ) : try : import gevent . socket import socket if gevent . socket . socket is socket . socket : self . log ( \"gevent monkey patching is active\" ) return True else : self . notify_user ( \"gevent monkey patching failed.\" ) except ImportError : self . notify_user ( \"gevent is not installed, monkey patching failed.\" ) return False\n", "title": "", "metadata": ""}
{"_id": "dbf7dafe5765c8bb1f0e81b055ac4411", "text": "def run ( context , port ) : global ctx ctx = context app . run ( port = port )\n", "title": "", "metadata": ""}
{"_id": "ac3f0010dac52a6289601b308f56c6db", "text": "def _rnd_datetime ( self , start , end ) : return self . from_utctimestamp ( random . randint ( int ( self . to_utctimestamp ( start ) ) , int ( self . to_utctimestamp ( end ) ) , ) )\n", "title": "", "metadata": ""}
{"_id": "c17bca793d140cf546d9d7dce6f64eae", "text": "def create ( self , ami , count , config = None ) : return self . Launcher ( config = config ) . launch ( ami , count )\n", "title": "", "metadata": ""}
{"_id": "c8356bb14fe236da6a52063ab6060aed", "text": "def toJson ( protoObject , indent = None ) : # Using the internal method because this way we can reformat the JSON js = json_format . MessageToDict ( protoObject , False ) return json . dumps ( js , indent = indent )\n", "title": "", "metadata": ""}
{"_id": "ef01ef4dbbf3320b73a2cca8bbf0b5d8", "text": "def get_indentation ( line ) : if line . strip ( ) : non_whitespace_index = len ( line ) - len ( line . lstrip ( ) ) return line [ : non_whitespace_index ] else : return ''\n", "title": "", "metadata": ""}
{"_id": "070fe1eaad46bb0c9bca539c8bacca6d", "text": "def do_exit ( self , arg ) : if self . current : self . current . close ( ) self . resource_manager . close ( ) del self . resource_manager return True\n", "title": "", "metadata": ""}
{"_id": "03df61ce7a4e39324e1164afb382397d", "text": "def hflip ( img ) : if not _is_pil_image ( img ) : raise TypeError ( 'img should be PIL Image. Got {}' . format ( type ( img ) ) ) return img . transpose ( Image . FLIP_LEFT_RIGHT )\n", "title": "", "metadata": ""}
{"_id": "c1d16ca24d6f1f0fe40d43176f49f65d", "text": "def input ( self , prompt , default = None , show_default = True ) : return click . prompt ( prompt , default = default , show_default = show_default )\n", "title": "", "metadata": ""}
{"_id": "287743af6e5862714e3eda3c76017da3", "text": "def update ( self , iterable ) : e = self . evolver ( ) for element in iterable : e . add ( element ) return e . persistent ( )\n", "title": "", "metadata": ""}
{"_id": "ebdc84f9a0cc6d537858931729bad974", "text": "def search ( self , filterstr , attrlist ) : return self . _paged_search_ext_s ( self . settings . BASE , ldap . SCOPE_SUBTREE , filterstr = filterstr , attrlist = attrlist , page_size = self . settings . PAGE_SIZE )\n", "title": "", "metadata": ""}
{"_id": "02de2eaa078f3308fa40f6894db3d355", "text": "def s3_connect ( bucket_name , s3_access_key_id , s3_secret_key ) : conn = connect_s3 ( s3_access_key_id , s3_secret_key ) try : return conn . get_bucket ( bucket_name ) except S3ResponseError as e : if e . status == 403 : raise Exception ( \"Bad Amazon S3 credentials.\" ) raise\n", "title": "", "metadata": ""}
{"_id": "52efb25383462e40c7c1e1827cdd6433", "text": "def average ( iterator ) : count = 0 total = 0 for num in iterator : count += 1 total += num return float ( total ) / count\n", "title": "", "metadata": ""}
{"_id": "73666653490379be2fa9b31a5c8d3702", "text": "def do_quit ( self , arg ) : for name , fh in self . _backup : setattr ( sys , name , fh ) self . console . writeline ( '*** Aborting program ***\\n' ) self . console . flush ( ) self . console . close ( ) WebPdb . active_instance = None return Pdb . do_quit ( self , arg )\n", "title": "", "metadata": ""}
{"_id": "639e3efbb1cc3716f4b05ef0994be597", "text": "def get_last_commit ( git_path = None ) : if git_path is None : git_path = GIT_PATH line = get_last_commit_line ( git_path ) revision_id = line . split ( ) [ 1 ] return revision_id\n", "title": "", "metadata": ""}
{"_id": "28a64fe95b02602a15202bfd8a768749", "text": "def login ( self , user : str , passwd : str ) -> None : self . context . login ( user , passwd )\n", "title": "", "metadata": ""}
{"_id": "c63dd53b8446a0932c88a51e57a72bf0", "text": "def typescript_compile ( source ) : with open ( TS_COMPILER , 'r' ) as tsservices_js : return evaljs ( ( tsservices_js . read ( ) , 'ts.transpile(dukpy.tscode, {options});' . format ( options = TSC_OPTIONS ) ) , tscode = source )\n", "title": "", "metadata": ""}
{"_id": "1d2aa849fab295cd401835bb98b75da8", "text": "def export ( defn ) : globals ( ) [ defn . __name__ ] = defn __all__ . append ( defn . __name__ ) return defn\n", "title": "", "metadata": ""}
{"_id": "94a6b9b615d7169470fe95321341e257", "text": "def get_gzipped_contents ( input_file ) : zbuf = StringIO ( ) zfile = GzipFile ( mode = \"wb\" , compresslevel = 6 , fileobj = zbuf ) zfile . write ( input_file . read ( ) ) zfile . close ( ) return ContentFile ( zbuf . getvalue ( ) )\n", "title": "", "metadata": ""}
{"_id": "b57c88ef7226f29bd91a750c8bd79cb9", "text": "def remove_dups ( seq ) : seen = set ( ) seen_add = seen . add return [ x for x in seq if not ( x in seen or seen_add ( x ) ) ]\n", "title": "", "metadata": ""}
{"_id": "ecb6b1470f37c85d2efb46090f3c1664", "text": "def build_service_class ( metadata ) : i = importlib . import_module ( metadata ) service = i . service env = get_jinja_env ( ) service_template = env . get_template ( 'service.py.jinja2' ) with open ( api_path ( service . name . lower ( ) ) , 'w' ) as t : t . write ( service_template . render ( service_md = service ) )\n", "title": "", "metadata": ""}
{"_id": "d1c3080d95bce2864d5098595f5de719", "text": "def get_unique_links ( self ) : page_url = self . get_current_url ( ) soup = self . get_beautiful_soup ( self . get_page_source ( ) ) links = page_utils . _get_unique_links ( page_url , soup ) return links\n", "title": "", "metadata": ""}
{"_id": "e15cf25dff86a70453b2f098c5bf9eae", "text": "def save_json ( object , handle , indent = 2 ) : obj_json = json . dumps ( object , indent = indent , cls = NumpyJSONEncoder ) handle . write ( obj_json )\n", "title": "", "metadata": ""}
{"_id": "9cc2b2a32ea03536818c3edad2dcef9d", "text": "def coords_on_grid ( self , x , y ) : if isinstance ( x , float ) : x = int ( self . _round ( x ) ) if isinstance ( y , float ) : y = int ( self . _round ( y ) ) if not self . _y_coord_down : y = self . _extents - y return x , y\n", "title": "", "metadata": ""}
{"_id": "4698e108b39e290aa3a5b0701acc6a2e", "text": "def transformer_ae_a3 ( ) : hparams = transformer_ae_base ( ) hparams . batch_size = 4096 hparams . layer_prepostprocess_dropout = 0.3 hparams . optimizer = \"Adafactor\" hparams . learning_rate = 0.25 hparams . learning_rate_warmup_steps = 10000 return hparams\n", "title": "", "metadata": ""}
{"_id": "cbadbe55f16fc788ee1e6c3d12747942", "text": "def build_columns ( self , X , verbose = False ) : return sp . sparse . csc_matrix ( X [ : , self . feature ] [ : , np . newaxis ] )\n", "title": "", "metadata": ""}
{"_id": "4cc5292e124dc67353afd47fbe8f20e7", "text": "async def handle ( self , record ) : if ( not self . disabled ) and self . filter ( record ) : await self . callHandlers ( record )\n", "title": "", "metadata": ""}
{"_id": "4c036b2aca42d7ed5eac23efc2823c22", "text": "def run ( self ) : try : self . run_checked ( ) except KeyboardInterrupt : thread . interrupt_main ( ) except Exception : self . internal_error ( )\n", "title": "", "metadata": ""}
{"_id": "4ca136e515bf8e7b4f50905bcaf1003a", "text": "def querySQL ( self , sql , args = ( ) ) : if self . debug : result = timeinto ( self . queryTimes , self . _queryandfetch , sql , args ) else : result = self . _queryandfetch ( sql , args ) return result\n", "title": "", "metadata": ""}
{"_id": "b9a404e278c4a3db4f80978a7cfe0cc4", "text": "def _tofloat ( obj ) : if \"inf\" in obj . lower ( ) . strip ( ) : return obj try : return int ( obj ) except ValueError : try : return float ( obj ) except ValueError : return obj\n", "title": "", "metadata": ""}
{"_id": "4e256e446e4ca6a9e535ae61c3a8571a", "text": "def value_for_key ( membersuite_object_data , key ) : key_value_dicts = { d [ 'Key' ] : d [ 'Value' ] for d in membersuite_object_data [ \"Fields\" ] [ \"KeyValueOfstringanyType\" ] } return key_value_dicts [ key ]\n", "title": "", "metadata": ""}
{"_id": "1d06f7f427c4e69bff2d2b910aef31fa", "text": "def _convert ( tup , dictlist ) : di = { } for a , b in tup : di . setdefault ( a , [ ] ) . append ( b ) for key , val in di . items ( ) : dictlist . append ( ( key , val ) ) return dictlist\n", "title": "", "metadata": ""}
{"_id": "2dbfa0a623db68946160c2bb27fa5a0b", "text": "def qth_pw ( self , q ) : return heapq . nlargest ( q + 2 , self . _T . iteritems ( ) , key = operator . itemgetter ( 1 ) ) [ - 1 ]\n", "title": "", "metadata": ""}
{"_id": "e738d6ae19addb95572efa00707947af", "text": "def decode ( string , base ) : base = int ( base ) code_string = get_code_string ( base ) result = 0 if base == 16 : string = string . lower ( ) while len ( string ) > 0 : result *= base result += code_string . find ( string [ 0 ] ) string = string [ 1 : ] return result\n", "title": "", "metadata": ""}
{"_id": "bd7ff38c9b3aac689123f90679b4db6d", "text": "def twitter_timeline ( screen_name , since_id = None ) : consumer_key = twitter_credential ( 'consumer_key' ) consumer_secret = twitter_credential ( 'consumer_secret' ) access_token = twitter_credential ( 'access_token' ) access_token_secret = twitter_credential ( 'access_secret' ) auth = tweepy . OAuthHandler ( consumer_key , consumer_secret ) auth . set_access_token ( access_token , access_token_secret ) api = tweepy . API ( auth ) return get_all_tweets ( screen_name , api , since_id )\n", "title": "", "metadata": ""}
{"_id": "30e043003c3c9f42c02157c414a400e7", "text": "def threadid ( self ) : current = self . thread . ident main = get_main_thread ( ) if main is None : return current else : return current if current != main . ident else None\n", "title": "", "metadata": ""}
{"_id": "f17bf07a4569444d9dedfa45fa8a7331", "text": "def loads ( string ) : f = StringIO . StringIO ( string ) marshaller = JavaObjectUnmarshaller ( f ) marshaller . add_transformer ( DefaultObjectTransformer ( ) ) return marshaller . readObject ( )\n", "title": "", "metadata": ""}
{"_id": "f934057fbf94ad15390254217d7b57db", "text": "def ask_folder ( message = 'Select folder.' , default = '' , title = '' ) : return backend_api . opendialog ( \"ask_folder\" , dict ( message = message , default = default , title = title ) )\n", "title": "", "metadata": ""}
{"_id": "0b43b7fd61557e1aa6fea58f9f90b245", "text": "def parse ( filename ) : with open ( filename ) as f : parser = ASDLParser ( ) return parser . parse ( f . read ( ) )\n", "title": "", "metadata": ""}
{"_id": "0f46842cc83fe68dfce6911c23d0b3df", "text": "def glpk_read_cplex ( path ) : from swiglpk import glp_create_prob , glp_read_lp problem = glp_create_prob ( ) glp_read_lp ( problem , None , path ) return problem\n", "title": "", "metadata": ""}
{"_id": "798bb2b02c8f46745110ae02ff359da7", "text": "def LogBinomialCoef ( n , k ) : return n * log ( n ) - k * log ( k ) - ( n - k ) * log ( n - k )\n", "title": "", "metadata": ""}
{"_id": "3b8351157fe672a96921b040248a837a", "text": "def run ( self , forever = True ) : loop = self . create_connection ( ) self . add_signal_handlers ( ) if forever : loop . run_forever ( )\n", "title": "", "metadata": ""}
{"_id": "7bc2ddac41c3455227112d6a999c553e", "text": "def _infer_interval_breaks ( coord ) : coord = np . asarray ( coord ) deltas = 0.5 * ( coord [ 1 : ] - coord [ : - 1 ] ) first = coord [ 0 ] - deltas [ 0 ] last = coord [ - 1 ] + deltas [ - 1 ] return np . r_ [ [ first ] , coord [ : - 1 ] + deltas , [ last ] ]\n", "title": "", "metadata": ""}
{"_id": "544174e9d497a794f538fcfada3870bc", "text": "def Exponential ( x , a , tau , y0 ) : return np . exp ( x / tau ) * a + y0\n", "title": "", "metadata": ""}
{"_id": "7236871ab13a630a26ddda4f847d80c4", "text": "def row_to_dict ( row ) : o = { } for colname in row . colnames : if isinstance ( row [ colname ] , np . string_ ) and row [ colname ] . dtype . kind in [ 'S' , 'U' ] : o [ colname ] = str ( row [ colname ] ) else : o [ colname ] = row [ colname ] return o\n", "title": "", "metadata": ""}
{"_id": "f24725cf8593cc3708dde2e0932e1d3c", "text": "def write ( self , text ) : self . logger . log ( self . loglevel , text , extra = { 'terminator' : None } )\n", "title": "", "metadata": ""}
{"_id": "8a1c66e2572c5405661d2f9c3b11bfab", "text": "def is_integer ( dtype ) : dtype = tf . as_dtype ( dtype ) if hasattr ( dtype , 'is_integer' ) : return dtype . is_integer return np . issubdtype ( np . dtype ( dtype ) , np . integer )\n", "title": "", "metadata": ""}
{"_id": "755f53054a4bc4b06ea07a5eb87fb90c", "text": "def run_command ( cmd , * args ) : command = ' ' . join ( ( cmd , args ) ) p = Popen ( command , shell = True , stdout = PIPE , stderr = PIPE ) stdout , stderr = p . communicate ( ) return p . retcode , stdout , stderr\n", "title": "", "metadata": ""}
{"_id": "399e06882e7cbf8ad441ff074384f667", "text": "def get_known_read_position ( fp , buffered = True ) : buffer_size = io . DEFAULT_BUFFER_SIZE if buffered else 0 return max ( fp . tell ( ) - buffer_size , 0 )\n", "title": "", "metadata": ""}
{"_id": "0f5e7e7360a510b08ca43257bfb66557", "text": "def __similarity ( s1 , s2 , ngrams_fn , n = 3 ) : ngrams1 , ngrams2 = set ( ngrams_fn ( s1 , n = n ) ) , set ( ngrams_fn ( s2 , n = n ) ) matches = ngrams1 . intersection ( ngrams2 ) return 2 * len ( matches ) / ( len ( ngrams1 ) + len ( ngrams2 ) )\n", "title": "", "metadata": ""}
{"_id": "9b600eb108e1f4a554b3ec062ac58c8c", "text": "def pad_image ( arr , max_size = 400 ) : dim = np . max ( arr . shape ) img = np . zeros ( ( dim , dim , 3 ) , dtype = arr . dtype ) xl = ( dim - arr . shape [ 0 ] ) // 2 yl = ( dim - arr . shape [ 1 ] ) // 2 img [ xl : arr . shape [ 0 ] + xl , yl : arr . shape [ 1 ] + yl , : ] = arr return resample_image ( img , max_size = max_size )\n", "title": "", "metadata": ""}
{"_id": "4d5b8e3aad3bd622464c54298c85e95d", "text": "def fail ( message = None , exit_status = None ) : print ( 'Error:' , message , file = sys . stderr ) sys . exit ( exit_status or 1 )\n", "title": "", "metadata": ""}
{"_id": "ac383001692a0a1f302a0a1ffe51a20b", "text": "def get_filename_safe_string ( string ) : invalid_filename_chars = [ '\\\\' , '/' , ':' , '\"' , '*' , '?' , '|' , '\\n' , '\\r' ] if string is None : string = \"None\" for char in invalid_filename_chars : string = string . replace ( char , \"\" ) string = string . rstrip ( \".\" ) return string\n", "title": "", "metadata": ""}
{"_id": "ea969d0698636cda17ab832f9ed22542", "text": "def _defaultdict ( dct , fallback = _illegal_character ) : out = defaultdict ( lambda : fallback ) for k , v in six . iteritems ( dct ) : out [ k ] = v return out\n", "title": "", "metadata": ""}
{"_id": "1d25edb0dc244bf5ccacd0273f205ef4", "text": "def _string_width ( self , s ) : s = str ( s ) w = 0 for i in s : w += self . character_widths [ i ] return w * self . font_size / 1000.0\n", "title": "", "metadata": ""}
{"_id": "c37358bce1f68144f36f554adbd69631", "text": "def _file_type ( self , field ) : type = mimetypes . guess_type ( self . _files [ field ] ) [ 0 ] return type . encode ( \"utf-8\" ) if isinstance ( type , unicode ) else str ( type )\n", "title": "", "metadata": ""}
{"_id": "7661ebe2c2cb01b46440b38d22e4eec7", "text": "def show ( self , imgs , ax = None ) : ax = ax or plt . gca ( ) if type ( imgs ) is not list : imgs = [ imgs ] for i , img in enumerate ( imgs ) : ax . imshow ( img , cmap = plt . get_cmap ( \"plasma\" ) ) ax . axis ( \"off\" )\n", "title": "", "metadata": ""}
{"_id": "8da9376c5425f45e368c7e301e156f3f", "text": "def accuracy ( self ) : true_pos = self . matrix [ 0 ] [ 0 ] false_pos = self . matrix [ 1 ] [ 0 ] false_neg = self . matrix [ 0 ] [ 1 ] true_neg = self . matrix [ 1 ] [ 1 ] num = 1.0 * ( true_pos + true_neg ) den = true_pos + true_neg + false_pos + false_neg return divide ( num , den )\n", "title": "", "metadata": ""}
{"_id": "107bcac00da119cbcf74fe6737dac8be", "text": "def async_update ( self , event ) : self . update_attr ( event . get ( 'state' , { } ) ) super ( ) . async_update ( event )\n", "title": "", "metadata": ""}
{"_id": "754597136da85ef10bbca10d0d681b6b", "text": "def prepare_path ( path ) : if type ( path ) == list : return os . path . join ( * path ) return path\n", "title": "", "metadata": ""}
{"_id": "66772d44522f891837b10b6d0b0e631d", "text": "def _list_available_rest_versions ( self ) : url = \"https://{0}/api/api_version\" . format ( self . _target ) data = self . _request ( \"GET\" , url , reestablish_session = False ) return data [ \"version\" ]\n", "title": "", "metadata": ""}
{"_id": "e43874ea941163f8bcdd354a01274d0b", "text": "def _get_tuple ( self , fields ) : v1 = '' v2 = '' if len ( fields ) > 0 : v1 = fields [ 0 ] if len ( fields ) > 1 : v2 = fields [ 1 ] return v1 , v2\n", "title": "", "metadata": ""}
{"_id": "d9a213e5aa5c915f5cc49b7b83873ff3", "text": "def coords_string_parser ( self , coords ) : lat , lon = coords . split ( ',' ) return { \"lat\" : lat . strip ( ) , \"lon\" : lon . strip ( ) , \"bounds\" : { } }\n", "title": "", "metadata": ""}
{"_id": "a11b9cbc20a6a97c307b8e00f59ca359", "text": "def println ( msg ) : sys . stdout . write ( msg ) sys . stdout . flush ( ) sys . stdout . write ( '\\x08' * len ( msg ) ) sys . stdout . flush ( )\n", "title": "", "metadata": ""}
{"_id": "52eb94b70fd1b2ff559ab7917c0d12a7", "text": "def _grammatical_join_filter ( l , arg = None ) : if not arg : arg = \" and |, \" try : final_join , initial_joins = arg . split ( \"|\" ) except ValueError : final_join = arg initial_joins = \", \" return grammatical_join ( l , initial_joins , final_join )\n", "title": "", "metadata": ""}
{"_id": "157758e09e6294632b8a63a65c258e73", "text": "def find_commons ( lists ) : others = lists [ 1 : ] return [ val for val in lists [ 0 ] if is_in_all ( val , others ) ]\n", "title": "", "metadata": ""}
{"_id": "850e9a407d22a12708f3a325a5616617", "text": "def listfolderpath ( p ) : for entry in scandir . scandir ( p ) : if entry . is_dir ( ) : yield entry . path\n", "title": "", "metadata": ""}
{"_id": "ef05c90583baa3bddcc900c253c7171c", "text": "def decode_value ( stream ) : length = decode_length ( stream ) ( value , ) = unpack_value ( \">{:d}s\" . format ( length ) , stream ) return value\n", "title": "", "metadata": ""}
{"_id": "c2b3e3ba2be704328d3529681c15daa4", "text": "def pop ( ) : pid = os . getpid ( ) thread = threading . current_thread ( ) Wdb . _instances . pop ( ( pid , thread ) )\n", "title": "", "metadata": ""}
{"_id": "77c3f7358a4bf8803e5c469a47512209", "text": "def _psutil_kill_pid ( pid ) : try : parent = Process ( pid ) for child in parent . children ( recursive = True ) : child . kill ( ) parent . kill ( ) except NoSuchProcess : return\n", "title": "", "metadata": ""}
{"_id": "570cdf07c2426f6d66246b56f52f0b48", "text": "def __iter__ ( self ) : for value , count in self . counts ( ) : for _ in range ( count ) : yield value\n", "title": "", "metadata": ""}
{"_id": "1b8898d88c7d3c0a030e5a033ff64397", "text": "def __init__ ( self , name , flag , * * kwargs ) : self . name = name self . flag = flag self . options = kwargs\n", "title": "", "metadata": ""}
{"_id": "676413b61e4660916c2a991515bd6cf3", "text": "def get_class_method ( cls_or_inst , method_name ) : cls = cls_or_inst if isinstance ( cls_or_inst , type ) else cls_or_inst . __class__ meth = getattr ( cls , method_name , None ) if isinstance ( meth , property ) : meth = meth . fget elif isinstance ( meth , cached_property ) : meth = meth . func return meth\n", "title": "", "metadata": ""}
{"_id": "65a5515fcf6ff4c05310510ba1e5dcf0", "text": "def remove_leading_zeros ( num : str ) -> str : if not num : return num if num . startswith ( 'M' ) : ret = 'M' + num [ 1 : ] . lstrip ( '0' ) elif num . startswith ( '-' ) : ret = '-' + num [ 1 : ] . lstrip ( '0' ) else : ret = num . lstrip ( '0' ) return '0' if ret in ( '' , 'M' , '-' ) else ret\n", "title": "", "metadata": ""}
{"_id": "1291c4c9ee5b0dde35df9691de7bfdac", "text": "def ynticks ( self , nticks , index = 1 ) : self . layout [ 'yaxis' + str ( index ) ] [ 'nticks' ] = nticks return self\n", "title": "", "metadata": ""}
{"_id": "774c80301a1d09b413c4997d3ccf6d9e", "text": "def set_float ( self , option , value ) : if not isinstance ( value , float ) : raise TypeError ( \"Value must be a float\" ) self . options [ option ] = value\n", "title": "", "metadata": ""}
{"_id": "1bd2a50c660b244e3532e297eeeb2acb", "text": "def redirect_stdout ( new_stdout ) : old_stdout , sys . stdout = sys . stdout , new_stdout try : yield None finally : sys . stdout = old_stdout\n", "title": "", "metadata": ""}
{"_id": "63a39fb1b8df83c5a08b76e56664c393", "text": "def __call__ ( self , actual_value , expect ) : self . _expect = expect if self . expected_value is NO_ARG : return self . asserts ( actual_value ) return self . asserts ( actual_value , self . expected_value )\n", "title": "", "metadata": ""}
{"_id": "00f12b0706b1e99c8538ce5c642e07df", "text": "def _centroids ( n_clusters : int , points : List [ List [ float ] ] ) -> List [ List [ float ] ] : k_means = KMeans ( n_clusters = n_clusters ) k_means . fit ( points ) closest , _ = pairwise_distances_argmin_min ( k_means . cluster_centers_ , points ) return list ( map ( list , np . array ( points ) [ closest . tolist ( ) ] ) )\n", "title": "", "metadata": ""}
{"_id": "7d41a6234d63256baadf9690a4b5506e", "text": "def json_decode ( data ) : if isinstance ( data , six . binary_type ) : data = data . decode ( 'utf-8' ) return json . loads ( data )\n", "title": "", "metadata": ""}
{"_id": "13d203348d054830a3683c7450786d41", "text": "def _tostr ( self , obj ) : if not obj : return '' if isinstance ( obj , list ) : return ', ' . join ( map ( self . _tostr , obj ) ) return str ( obj )\n", "title": "", "metadata": ""}
{"_id": "a64c3baf16a0f276224949bac0c1407a", "text": "def update ( kernel = False ) : manager = MANAGER cmds = { 'yum -y --color=never' : { False : '--exclude=kernel* update' , True : 'update' } } cmd = cmds [ manager ] [ kernel ] run_as_root ( \"%(manager)s %(cmd)s\" % locals ( ) )\n", "title": "", "metadata": ""}
{"_id": "82faccae496a29941ed5ad26867ed9b5", "text": "def items_to_dict ( items ) : res = collections . defaultdict ( list ) for k , v in items : res [ k ] . append ( v ) return normalize_dict ( dict ( res ) )\n", "title": "", "metadata": ""}
{"_id": "538f3a74d35c990ff1158ab6ae73d9e3", "text": "def reconnect ( self ) : import pika import pika . exceptions self . connection = pika . BlockingConnection ( pika . URLParameters ( self . amqp_url ) ) self . channel = self . connection . channel ( ) try : self . channel . queue_declare ( self . name ) except pika . exceptions . ChannelClosed : self . connection = pika . BlockingConnection ( pika . URLParameters ( self . amqp_url ) ) self . channel = self . connection . channel ( )\n", "title": "", "metadata": ""}
{"_id": "56851b86de7ef9706c7d0e28c10809c7", "text": "def delete_collection ( mongo_uri , database_name , collection_name ) : client = pymongo . MongoClient ( mongo_uri ) db = client [ database_name ] db . drop_collection ( collection_name )\n", "title": "", "metadata": ""}
{"_id": "d107dfa55989d4dff80e6d8faae573ff", "text": "def timestamp_filename ( basename , ext = None ) : dt = datetime . now ( ) . strftime ( '%Y%m%d-%H%M%S-%f' ) if ext : return '%s-%s.%s' % ( basename , dt , ext ) return '%s-%s' % ( basename , dt )\n", "title": "", "metadata": ""}
{"_id": "752a874b3f892cd637dc47fb40b194c9", "text": "def serialize ( self ) : data = { 'doc' : self . doc } if isinstance ( self . query , Query ) : data [ 'query' ] = self . query . serialize ( ) return data\n", "title": "", "metadata": ""}
{"_id": "ea71c546c60619972236dcad8b25a8e1", "text": "def apply_to_field_if_exists ( effect , field_name , fn , default ) : value = getattr ( effect , field_name , None ) if value is None : return default else : return fn ( value )\n", "title": "", "metadata": ""}
{"_id": "b47492851e1785ce094cbff08f70f966", "text": "def stats ( self ) : import ns1 . rest . stats return ns1 . rest . stats . Stats ( self . config )\n", "title": "", "metadata": ""}
{"_id": "320de41c1f5bb0663bb305ab943b2d12", "text": "def vals2bins ( vals , res = 100 ) : # flatten if list of lists if any ( isinstance ( el , list ) for el in vals ) : vals = list ( itertools . chain ( * vals ) ) return list ( np . digitize ( vals , np . linspace ( np . min ( vals ) , np . max ( vals ) + 1 , res + 1 ) ) - 1 )\n", "title": "", "metadata": ""}
{"_id": "500e85f17a0e38acf4ac9efc3992281a", "text": "def send_request ( self , * args , * * kwargs ) : try : return self . session . request ( * args , * * kwargs ) except ConnectionError : self . session . close ( ) return self . session . request ( * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "6d6a99613d5350ae084e867b7f31c2c3", "text": "def string_to_date ( value ) : if isinstance ( value , datetime . date ) : return value return dateutil . parser . parse ( value ) . date ( )\n", "title": "", "metadata": ""}
{"_id": "2c928f6e591864617d7e79d8ad6aac0d", "text": "def get_cell ( self , index ) : i = sorted_index ( self . _index , index ) if self . _sort else self . _index . index ( index ) return self . _data [ i ]\n", "title": "", "metadata": ""}
{"_id": "8245d12f1935f00fc549a214068ae29e", "text": "def closeEvent ( self , event ) : logger . debug ( \"closeEvent\" ) self . argosApplication . saveSettingsIfNeeded ( ) self . finalize ( ) self . argosApplication . removeMainWindow ( self ) event . accept ( ) logger . debug ( \"closeEvent accepted\" )\n", "title": "", "metadata": ""}
{"_id": "8dadd4d043521d6dd1cb6a68d98e1ad3", "text": "def initialize_api ( flask_app ) : if not flask_restplus : return api = flask_restplus . Api ( version = \"1.0\" , title = \"My Example API\" ) api . add_resource ( HelloWorld , \"/hello\" ) blueprint = flask . Blueprint ( \"api\" , __name__ , url_prefix = \"/api\" ) api . init_app ( blueprint ) flask_app . register_blueprint ( blueprint )\n", "title": "", "metadata": ""}
{"_id": "7e8ce2bce1e19b083e47438411515236", "text": "def revrank_dict ( dict , key = lambda t : t [ 1 ] , as_tuple = False ) : sorted_list = sorted ( dict . items ( ) , key = key , reverse = True ) return OrderedDict ( sorted_list ) if not as_tuple else tuple ( sorted_list )\n", "title": "", "metadata": ""}
{"_id": "b6365709c4e02a2f893667ec5b6c241e", "text": "def logv ( msg , * args , * * kwargs ) : if settings . VERBOSE : log ( msg , * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "daa59233bc7fd7d984df43dfe19b17b4", "text": "def serialize_yaml_tofile ( filename , resource ) : stream = file ( filename , \"w\" ) yaml . dump ( resource , stream , default_flow_style = False )\n", "title": "", "metadata": ""}
{"_id": "a33a06375f72d10203bf67c832e4dc6f", "text": "def write_json_response ( self , response ) : self . write ( tornado . escape . json_encode ( response ) ) self . set_header ( \"Content-Type\" , \"application/json\" )\n", "title": "", "metadata": ""}
{"_id": "89107eab0f0bea4163b42301d88aafcd", "text": "def u2b ( string ) : if ( ( PY2 and isinstance ( string , unicode ) ) or ( ( not PY2 ) and isinstance ( string , str ) ) ) : return string . encode ( 'utf-8' ) return string\n", "title": "", "metadata": ""}
{"_id": "3b635c0a6a8ce9af119dd1f12544f008", "text": "def refresh_core ( self ) : self . log . info ( 'Sending out mass query for all attributes' ) for key in ATTR_CORE : self . query ( key )\n", "title": "", "metadata": ""}
{"_id": "5ded46df61d2e9e8cd7de105812d7f5c", "text": "def write ( url , content , * * args ) : with FTPSResource ( url , * * args ) as resource : resource . write ( content )\n", "title": "", "metadata": ""}
{"_id": "6f93d429a53208cfe59df9cf8ba179c4", "text": "def create_dir_rec ( path : Path ) : if not path . exists ( ) : Path . mkdir ( path , parents = True , exist_ok = True )\n", "title": "", "metadata": ""}
{"_id": "5a76f07b7c5d84fce641a8c7cedcab5b", "text": "def _startswith ( expr , pat ) : return _string_op ( expr , Startswith , output_type = types . boolean , _pat = pat )\n", "title": "", "metadata": ""}
{"_id": "2bace45d2a98d667c4053f40a0f520f8", "text": "def replace_tab_indent ( s , replace = \"    \" ) : prefix = get_indent_prefix ( s ) return prefix . replace ( \"\\t\" , replace ) + s [ len ( prefix ) : ]\n", "title": "", "metadata": ""}
{"_id": "1a51623df9dbc13cba402e0e9eed32e9", "text": "def count ( self ) : c = self . main_tab_widget . count ( ) for child in self . child_splitters : c += child . count ( ) return c\n", "title": "", "metadata": ""}
{"_id": "b40bebb9b67abb415d6d60c38804885d", "text": "def yesno ( prompt ) : prompt += \" [y/n]\" a = \"\" while a not in [ \"y\" , \"n\" ] : a = input ( prompt ) . lower ( ) return a == \"y\"\n", "title": "", "metadata": ""}
{"_id": "a302f83a9185b9f352659619c17f174f", "text": "def addfield ( self , pkt , buf , val ) : self . set_endianess ( pkt ) return self . fld . addfield ( pkt , buf , val )\n", "title": "", "metadata": ""}
{"_id": "dd4dd94b39e85125bbd3d7b3f026ca0a", "text": "def filter_query_string ( query ) : return '&' . join ( [ q for q in query . split ( '&' ) if not ( q . startswith ( '_k=' ) or q . startswith ( '_e=' ) or q . startswith ( '_s' ) ) ] )\n", "title": "", "metadata": ""}
{"_id": "d44f7be461ad138b44fbcc17e43b2893", "text": "def free ( self ) : if self . _ptr is None : return Gauged . array_free ( self . ptr ) FloatArray . ALLOCATIONS -= 1 self . _ptr = None\n", "title": "", "metadata": ""}
{"_id": "8131e527bf14b3e1ea5b3a4657f82b0a", "text": "def __init__ ( self ) : super ( FilterObject , self ) . __init__ ( ) self . _filter_expression = None self . _matcher = None\n", "title": "", "metadata": ""}
{"_id": "5cc5df2f0f8a348d0516176177036af7", "text": "def diff ( file_ , imports ) : modules_not_imported = compare_modules ( file_ , imports ) logging . info ( \"The following modules are in {} but do not seem to be imported: \" \"{}\" . format ( file_ , \", \" . join ( x for x in modules_not_imported ) ) )\n", "title": "", "metadata": ""}
{"_id": "ce80d919929e10ce78b6a75ef1a6511b", "text": "def set_header ( self , key , value ) : self . conn . issue_command ( \"Header\" , _normalize_header ( key ) , value )\n", "title": "", "metadata": ""}
{"_id": "37ed9cf5cce64a2c0c80598c88bdd36c", "text": "def matrix_to_gl ( matrix ) : matrix = np . asanyarray ( matrix , dtype = np . float64 ) if matrix . shape != ( 4 , 4 ) : raise ValueError ( 'matrix must be (4,4)!' ) # switch to column major and flatten to (16,) column = matrix . T . flatten ( ) # convert to GLfloat glmatrix = ( gl . GLfloat * 16 ) ( * column ) return glmatrix\n", "title": "", "metadata": ""}
{"_id": "d68c3392238eed298a0bb6c8f8f9a07a", "text": "def contains ( self , element ) : self . _run ( unittest_case . assertIn , ( element , self . _subject ) ) return ChainInspector ( self . _subject )\n", "title": "", "metadata": ""}
{"_id": "e0ac6615d1dfbfc602dc0cb56cc099ef", "text": "def java_version ( ) : result = subprocess . check_output ( [ c . JAVA , '-version' ] , stderr = subprocess . STDOUT ) first_line = result . splitlines ( ) [ 0 ] return first_line . decode ( )\n", "title": "", "metadata": ""}
{"_id": "c30ab2a43abcb9d4003166421ac11aa1", "text": "def to_0d_array ( value : Any ) -> np . ndarray : if np . isscalar ( value ) or ( isinstance ( value , np . ndarray ) and value . ndim == 0 ) : return np . array ( value ) else : return to_0d_object_array ( value )\n", "title": "", "metadata": ""}
{"_id": "8c96613951f0825897ee4682685b5cbb", "text": "def load ( cls , fp , * * kwargs ) : json_obj = json . load ( fp , * * kwargs ) return parse ( cls , json_obj )\n", "title": "", "metadata": ""}
{"_id": "da8fcf316d9dd5aea94778f5dcd7646a", "text": "def normalize ( data ) : out_data = data . copy ( ) for i , sample in enumerate ( out_data ) : out_data [ i ] /= sum ( out_data [ i ] ) return out_data\n", "title": "", "metadata": ""}
{"_id": "a4e4c61d63c28cc06b07d5079535bd0d", "text": "def _parse_canonical_int64 ( doc ) : l_str = doc [ '$numberLong' ] if len ( doc ) != 1 : raise TypeError ( 'Bad $numberLong, extra field(s): %s' % ( doc , ) ) return Int64 ( l_str )\n", "title": "", "metadata": ""}
{"_id": "810ab09a5840fc6cf140a06d75eeffc6", "text": "def int32_to_negative ( int32 ) : dct = { } if int32 == 4294967295 : # Special case in some structures (note, this is just a workaround) return - 1 for i in range ( - 1000 , - 1 ) : dct [ np . uint32 ( i ) ] = i if int32 in dct : return dct [ int32 ] else : return int32\n", "title": "", "metadata": ""}
{"_id": "7f81596653c29bf5d34ec0cddfedc090", "text": "def getEdges ( npArr ) : edges = np . concatenate ( ( [ 0 ] , npArr [ : , 0 ] + npArr [ : , 2 ] ) ) return np . array ( [ Decimal ( str ( i ) ) for i in edges ] )\n", "title": "", "metadata": ""}
{"_id": "cac31a2ea2db012d91451ea53b46cb3d", "text": "def get_all_names ( self ) : result = set ( ) for module in self . names : result . update ( set ( self . names [ module ] ) ) return result\n", "title": "", "metadata": ""}
{"_id": "4609ab71c9ef4fdcefa23d60e028b0b6", "text": "def _float_almost_equal ( float1 , float2 , places = 7 ) : if round ( abs ( float2 - float1 ) , places ) == 0 : return True return False\n", "title": "", "metadata": ""}
{"_id": "a8c272b974b2125fc4479113ff37b562", "text": "def wrap ( s , width = 80 ) : return '\\n' . join ( textwrap . wrap ( str ( s ) , width = width ) )\n", "title": "", "metadata": ""}
{"_id": "af6ffa816fd3bc21c84711fc39c2ed07", "text": "def _add_default_arguments ( parser ) : parser . add_argument ( '-c' , '--config' , action = 'store' , dest = 'config' , help = 'Path to the configuration file' ) parser . add_argument ( '-f' , '--foreground' , action = 'store_true' , dest = 'foreground' , help = 'Run the application interactively' )\n", "title": "", "metadata": ""}
{"_id": "08716bdea7f95ce457fbad1d95776161", "text": "def get_span_char_width ( span , column_widths ) : start_column = span [ 0 ] [ 1 ] column_count = get_span_column_count ( span ) total_width = 0 for i in range ( start_column , start_column + column_count ) : total_width += column_widths [ i ] total_width += column_count - 1 return total_width\n", "title": "", "metadata": ""}
{"_id": "e1e51f3849be6488f62d8a264de004a3", "text": "def ceil_nearest ( x , dx = 1 ) : precision = get_sig_digits ( dx ) return round ( math . ceil ( float ( x ) / dx ) * dx , precision )\n", "title": "", "metadata": ""}
{"_id": "1231bda3a29f096a5da17d2a7824dfff", "text": "def jupytext_cli ( args = None ) : try : jupytext ( args ) except ( ValueError , TypeError , IOError ) as err : sys . stderr . write ( '[jupytext] Error: ' + str ( err ) + '\\n' ) exit ( 1 )\n", "title": "", "metadata": ""}
{"_id": "b4b790ad2ff281f1c2811df2877426db", "text": "def get_db_version ( session ) : value = session . query ( ProgramInformation . value ) . filter ( ProgramInformation . name == \"db_version\" ) . scalar ( ) return int ( value )\n", "title": "", "metadata": ""}
{"_id": "4e495a17ef0af663839c5f91d623cbf0", "text": "def as_dict ( self ) : attrs = vars ( self ) return { key : attrs [ key ] for key in attrs if not key . startswith ( '_' ) }\n", "title": "", "metadata": ""}
{"_id": "7dae7a4cd875fc6707f4adf3f8c29c11", "text": "def inc_date ( date_obj , num , date_fmt ) : return ( date_obj + timedelta ( days = num ) ) . strftime ( date_fmt )\n", "title": "", "metadata": ""}
{"_id": "6e3b0123aaa4e43b252b8285e9bf9867", "text": "def _get_wow64 ( ) : # Try to determine if the debugger itself is running on WOW64. # On error assume False. if bits == 64 : wow64 = False else : try : wow64 = IsWow64Process ( GetCurrentProcess ( ) ) except Exception : wow64 = False return wow64\n", "title": "", "metadata": ""}
{"_id": "c7fa86cf3e94891acaf4197704ac4200", "text": "def parse_parameter ( value ) : if any ( ( isinstance ( value , float ) , isinstance ( value , int ) , isinstance ( value , bool ) ) ) : return value try : return int ( value ) except ValueError : try : return float ( value ) except ValueError : if value in string_aliases . true_boolean_aliases : return True elif value in string_aliases . false_boolean_aliases : return False else : return str ( value )\n", "title": "", "metadata": ""}
{"_id": "ec84215175038c242c6aab5e71813f30", "text": "def get_value ( self , context ) : if self . value : return expressions . eval_string ( self . value , context ) else : # Empty input raises cryptic EOF syntax err, this more human # friendly raise ValueError ( '!py string expression is empty. It must be a ' 'valid python expression instead.' )\n", "title": "", "metadata": ""}
{"_id": "6789bac861671999f3edc0a5be3ff4a4", "text": "def visit_ellipsis ( self , node , parent ) : return nodes . Ellipsis ( getattr ( node , \"lineno\" , None ) , getattr ( node , \"col_offset\" , None ) , parent )\n", "title": "", "metadata": ""}
{"_id": "e15ca5b0cfc3490b3d2387d1ea478878", "text": "def round_corner ( radius , fill ) : corner = Image . new ( 'L' , ( radius , radius ) , 0 ) # (0, 0, 0, 0)) draw = ImageDraw . Draw ( corner ) draw . pieslice ( ( 0 , 0 , radius * 2 , radius * 2 ) , 180 , 270 , fill = fill ) return corner\n", "title": "", "metadata": ""}
{"_id": "5fe9f4405a0f542c04e75f32617bdeef", "text": "def append_position_to_token_list ( token_list ) : return [ PositionToken ( value . content , value . gd , index , index + 1 ) for ( index , value ) in enumerate ( token_list ) ]\n", "title": "", "metadata": ""}
{"_id": "8a10c27c139b1d19f338d95de2df4f81", "text": "def uri_to_iri_parts ( path , query , fragment ) : path = url_unquote ( path , '%/;?' ) query = url_unquote ( query , '%;/?:@&=+,$#' ) fragment = url_unquote ( fragment , '%;/?:@&=+,$#' ) return path , query , fragment\n", "title": "", "metadata": ""}
{"_id": "a1c3cf059a37da225b75bd6d08acb875", "text": "def clean_text_by_sentences ( text , language = \"english\" , additional_stopwords = None ) : init_textcleanner ( language , additional_stopwords ) original_sentences = split_sentences ( text ) filtered_sentences = filter_words ( original_sentences ) return merge_syntactic_units ( original_sentences , filtered_sentences )\n", "title": "", "metadata": ""}
{"_id": "88a8303444893d1f2c1c978a3bee93f7", "text": "def pairwise_indices ( self ) : return np . array ( [ sig . pairwise_indices for sig in self . values ] ) . T\n", "title": "", "metadata": ""}
{"_id": "0335cb1e2257e228107ec9cc3b82be48", "text": "def _run_asyncio ( loop , zmq_context ) : try : asyncio . set_event_loop ( loop ) loop . run_forever ( ) except : pass finally : loop . close ( ) zmq_context . destroy ( 1000 )\n", "title": "", "metadata": ""}
{"_id": "e16522d4b4f69113f47947a067a74131", "text": "def _cast_to_type ( self , value ) : if isinstance ( value , str ) or value is None : return value return str ( value )\n", "title": "", "metadata": ""}
{"_id": "45a8dfd0b82726919497fb5e3fc797a2", "text": "def set_mlimits ( self , row , column , min = None , max = None ) : subplot = self . get_subplot_at ( row , column ) subplot . set_mlimits ( min , max )\n", "title": "", "metadata": ""}
{"_id": "ed61c73b5806bc966f18e4f64c144130", "text": "def exception_format ( ) : return \"\" . join ( traceback . format_exception ( sys . exc_info ( ) [ 0 ] , sys . exc_info ( ) [ 1 ] , sys . exc_info ( ) [ 2 ] ) )\n", "title": "", "metadata": ""}
{"_id": "d30425ba55aea318a5402b6c965173ca", "text": "def json_serial ( obj ) : if isinstance ( obj , LegipyModel ) : return obj . to_json ( ) elif isinstance ( obj , ( datetime . date , datetime . datetime ) ) : return obj . isoformat ( ) raise TypeError ( \"Type {0} not serializable\" . format ( repr ( type ( obj ) ) ) )\n", "title": "", "metadata": ""}
{"_id": "ba86ef68c926dfd6799daef4f0683127", "text": "def get_now_utc_notz_datetime ( ) -> datetime . datetime : now = datetime . datetime . utcnow ( ) return now . replace ( tzinfo = None )\n", "title": "", "metadata": ""}
{"_id": "00fbd4b52f5cd923ef905e2f0e735387", "text": "def get_environment_info ( ) -> dict : data = _environ . systems . get_system_data ( ) data [ 'cauldron' ] = _environ . package_settings . copy ( ) return data\n", "title": "", "metadata": ""}
{"_id": "6b75ac86df45757d3919b6beec7da2be", "text": "def get_services ( ) : with win32 . OpenSCManager ( dwDesiredAccess = win32 . SC_MANAGER_ENUMERATE_SERVICE ) as hSCManager : try : return win32 . EnumServicesStatusEx ( hSCManager ) except AttributeError : return win32 . EnumServicesStatus ( hSCManager )\n", "title": "", "metadata": ""}
{"_id": "d596cc0d483c8d4f8980ffeec3f9a66d", "text": "def compute_number_edges ( function ) : n = 0 for node in function . nodes : n += len ( node . sons ) return n\n", "title": "", "metadata": ""}
{"_id": "baa8a79e0627a15e22ac77c289f32e0a", "text": "def _to_hours_mins_secs ( time_taken ) : mins , secs = divmod ( time_taken , 60 ) hours , mins = divmod ( mins , 60 ) return hours , mins , secs\n", "title": "", "metadata": ""}
{"_id": "3bf81f82369fc9451adaf67760c4a5eb", "text": "def change_dir ( directory ) : def cd_decorator ( func ) : @ wraps ( func ) def wrapper ( * args , * * kwargs ) : org_path = os . getcwd ( ) os . chdir ( directory ) func ( * args , * * kwargs ) os . chdir ( org_path ) return wrapper return cd_decorator\n", "title": "", "metadata": ""}
{"_id": "7e01c054edb14a4e8087a1f0b3649aa3", "text": "def coords_from_query ( query ) : try : coords = json . loads ( query ) except ValueError : vals = re . split ( r'[,\\s]+' , query . strip ( ) ) coords = [ float ( v ) for v in vals ] return tuple ( coords [ : 2 ] )\n", "title": "", "metadata": ""}
{"_id": "f38efc2cc509448a8ceb5ffed677274a", "text": "def _screen ( self , s , newline = False ) : if self . verbose : if newline : print ( s ) else : print ( s , end = ' ' )\n", "title": "", "metadata": ""}
{"_id": "6510962d97928b8ee469c6584b9d0858", "text": "def sets_are_rooted_compat ( one_set , other ) : if one_set . issubset ( other ) or other . issubset ( one_set ) : return True return not intersection_not_empty ( one_set , other )\n", "title": "", "metadata": ""}
{"_id": "50839ad9ec28ddd2acb52107a134dd9c", "text": "def is_iterable ( obj ) : return ( hasattr ( obj , \"__iter__\" ) and not isinstance ( obj , str ) and not isinstance ( obj , tuple ) )\n", "title": "", "metadata": ""}
{"_id": "bf97a4ee3d9ebb3b0388a9e33bd63535", "text": "def reload ( self , save_config = True ) : if save_config : self . device . send ( \"copy running-config startup-config\" ) self . device ( \"reload\" , wait_for_string = \"This command will reboot the system\" ) self . device . ctrl . sendline ( \"y\" )\n", "title": "", "metadata": ""}
{"_id": "1c65267171e07a2eeb94199ce3634a28", "text": "def _xls2col_widths ( self , worksheet , tab ) : for col in xrange ( worksheet . ncols ) : try : xls_width = worksheet . colinfo_map [ col ] . width pys_width = self . xls_width2pys_width ( xls_width ) self . code_array . col_widths [ col , tab ] = pys_width except KeyError : pass\n", "title": "", "metadata": ""}
{"_id": "99b7f5bf1fa680065a34b4df74302fa5", "text": "def base_path ( self ) : return os . path . join ( self . container . base_path , self . name )\n", "title": "", "metadata": ""}
{"_id": "69fc6745a75869b0a46d9654b175f5ec", "text": "def clear_instance ( cls ) : if not cls . initialized ( ) : return for subclass in cls . _walk_mro ( ) : if isinstance ( subclass . _instance , cls ) : # only clear instances that are instances # of the calling class subclass . _instance = None\n", "title": "", "metadata": ""}
{"_id": "852061b762e8c941582e7d1fb3038643", "text": "def word_matches ( s1 , s2 , n = 3 ) : return __matches ( s1 , s2 , word_ngrams , n = n )\n", "title": "", "metadata": ""}
{"_id": "c33296f0d54a6ee17ba39f7e05dae6a7", "text": "def compress ( obj ) : return json . dumps ( obj , sort_keys = True , separators = ( ',' , ':' ) , cls = CustomEncoder )\n", "title": "", "metadata": ""}
{"_id": "82b535fa33f5b0076816e6fe20084b7c", "text": "def lcm ( num1 , num2 ) : if num1 > num2 : bigger = num1 else : bigger = num2 while True : if bigger % num1 == 0 and bigger % num2 == 0 : return bigger bigger += 1\n", "title": "", "metadata": ""}
{"_id": "c462137d6d18c33d83340b9900e02426", "text": "def _parse_config ( config_file_path ) : config_file = open ( config_file_path , 'r' ) config = yaml . load ( config_file ) config_file . close ( ) return config\n", "title": "", "metadata": ""}
{"_id": "dca511223e52a7651090b4186a672de4", "text": "def returns ( self ) : return_type = self . signature . return_type none_type = type ( None ) if return_type is not None and return_type is not none_type : return return_type . __name__\n", "title": "", "metadata": ""}
{"_id": "c99bae5db1cc40f85240e0da42d3a2a2", "text": "def to_bool ( value : Any ) -> bool : return bool ( strtobool ( value ) if isinstance ( value , str ) else value )\n", "title": "", "metadata": ""}
{"_id": "a37794730e38b22b6db3ef87945d7bdc", "text": "def update_menu ( self ) : self . menu . clear ( ) add_actions ( self . menu , self . create_context_menu_actions ( ) )\n", "title": "", "metadata": ""}
{"_id": "8a95dc44f2b73cc27ae96390941f1503", "text": "def writefile ( openedfile , newcontents ) : openedfile . seek ( 0 ) openedfile . truncate ( ) openedfile . write ( newcontents )\n", "title": "", "metadata": ""}
{"_id": "ae4c108a675bfc7781641982c2e90e28", "text": "def _calc_overlap_count ( markers1 : dict , markers2 : dict , ) : overlaps = np . zeros ( ( len ( markers1 ) , len ( markers2 ) ) ) j = 0 for marker_group in markers1 : tmp = [ len ( markers2 [ i ] . intersection ( markers1 [ marker_group ] ) ) for i in markers2 . keys ( ) ] overlaps [ j , : ] = tmp j += 1 return overlaps\n", "title": "", "metadata": ""}
{"_id": "ca71f96d75dc4e246b5821177f7973d9", "text": "def get_labels ( labels ) : label_u = unique_labels ( labels ) label_u_line = [ i + \"_line\" for i in label_u ] return label_u , label_u_line\n", "title": "", "metadata": ""}
{"_id": "58fe4b93a3709f5389dbfc6581496cac", "text": "def upgrade ( directory , sql , tag , x_arg , revision ) : _upgrade ( directory , revision , sql , tag , x_arg )\n", "title": "", "metadata": ""}
{"_id": "69f1d1f451a18eae2fb183ebece2ec66", "text": "def find_dist_to_centroid ( cvects , idx_list , weights = None ) : centroid = find_centroid ( cvects , idx_list , weights ) dist_vals = np . degrees ( np . arccos ( ( centroid * cvects . T [ idx_list ] ) . sum ( 1 ) ) ) return dist_vals , centroid\n", "title": "", "metadata": ""}
{"_id": "5a02d5991613f3204188734fd699eb81", "text": "def _group_dict_set ( iterator ) : d = defaultdict ( set ) for key , value in iterator : d [ key ] . add ( value ) return dict ( d )\n", "title": "", "metadata": ""}
{"_id": "a71791b21dee4e0b57a0afffbbd11b5e", "text": "def __del__ ( self ) : if self . _delete_file : try : os . remove ( self . name ) except ( OSError , IOError ) : pass\n", "title": "", "metadata": ""}
{"_id": "3ee7bbfcc634072ccdf49f9ccaba22f9", "text": "def start_task ( self , task ) : self . info ( \"Calculating {}...\" . format ( task ) ) self . tasks [ task ] = self . timer ( )\n", "title": "", "metadata": ""}
{"_id": "dea068ca714544182c6aca63ac440b2f", "text": "def rdist ( x , y ) : result = 0.0 for i in range ( x . shape [ 0 ] ) : result += ( x [ i ] - y [ i ] ) ** 2 return result\n", "title": "", "metadata": ""}
{"_id": "995973e74a4b83bf398ad5b2cc8f5635", "text": "def magic ( self , alias ) : if alias in self . aliases : return self . aliases [ alias ] else : return \"%%{}\\n\" . format ( alias )\n", "title": "", "metadata": ""}
{"_id": "cf114bfac39a17c92eda60ff87629b46", "text": "def testable_memoized_property ( func = None , key_factory = per_instance , * * kwargs ) : getter = memoized_method ( func = func , key_factory = key_factory , * * kwargs ) def setter ( self , val ) : with getter . put ( self ) as putter : putter ( val ) return property ( fget = getter , fset = setter , fdel = lambda self : getter . forget ( self ) )\n", "title": "", "metadata": ""}
{"_id": "89aa647b25001ff93e6d1eee7c009489", "text": "def go_to_background ( ) : try : if os . fork ( ) : sys . exit ( ) except OSError as errmsg : LOGGER . error ( 'Fork failed: {0}' . format ( errmsg ) ) sys . exit ( 'Fork failed' )\n", "title": "", "metadata": ""}
{"_id": "6b1ae251d093e80048f1d603485ef6e8", "text": "def add_option ( self , * args , * * kwargs ) : if self . parseTool == 'argparse' : if args and args [ 0 ] == '' : # no short option args = args [ 1 : ] return self . parser . add_argument ( * args , * * kwargs ) else : return self . parser . add_option ( * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "b865e6755eb7130395f42b525e3e4503", "text": "def normalize_matrix ( matrix ) : abs_matrix = np . abs ( matrix . copy ( ) ) return abs_matrix / abs_matrix . max ( )\n", "title": "", "metadata": ""}
{"_id": "4d70eb6bd16f3667adc6ad84b68e5967", "text": "def pagerank_limit_push ( s , r , w_i , a_i , push_node , rho ) : # Calculate the A and B quantities to infinity A_inf = rho * r [ push_node ] B_inf = ( 1 - rho ) * r [ push_node ] # Update approximate Pagerank and residual vectors s [ push_node ] += A_inf r [ push_node ] = 0.0 # Update residual vector at push node's adjacent nodes r [ a_i ] += B_inf * w_i\n", "title": "", "metadata": ""}
{"_id": "c4006da50f324afd0f5c4ae16ca52714", "text": "def settimeout ( self , timeout ) : self . sock_opt . timeout = timeout if self . sock : self . sock . settimeout ( timeout )\n", "title": "", "metadata": ""}
{"_id": "e35498b9c5e353e725228e67a49bce77", "text": "def sequence_molecular_weight ( seq ) : if 'X' in seq : warnings . warn ( _nc_warning_str , NoncanonicalWarning ) return sum ( [ residue_mwt [ aa ] * n for aa , n in Counter ( seq ) . items ( ) ] ) + water_mass\n", "title": "", "metadata": ""}
{"_id": "f97e966dcf80c7baa002a08e938fa418", "text": "def get_period_last_3_months ( ) -> str : today = Datum ( ) today . today ( ) # start_date = today - timedelta(weeks=13) start_date = today . clone ( ) start_date . subtract_months ( 3 ) period = get_period ( start_date . date , today . date ) return period\n", "title": "", "metadata": ""}
{"_id": "8763b0e237879cec8cc0121be3e1ee00", "text": "def from_buffer ( buffer , mime = False ) : m = _get_magic_type ( mime ) return m . from_buffer ( buffer )\n", "title": "", "metadata": ""}
{"_id": "4504edb86044457e05fbe19b6a215348", "text": "def euclidean ( x , y ) : result = 0.0 for i in range ( x . shape [ 0 ] ) : result += ( x [ i ] - y [ i ] ) ** 2 return np . sqrt ( result )\n", "title": "", "metadata": ""}
{"_id": "afcc4203b90c76e7cda807b81caca114", "text": "def file_to_png ( fp ) : import PIL . Image # pylint: disable=import-error with io . BytesIO ( ) as dest : PIL . Image . open ( fp ) . save ( dest , \"PNG\" , optimize = True ) return dest . getvalue ( )\n", "title": "", "metadata": ""}
{"_id": "4129f8e19f107b5fd91101492dd45f61", "text": "def __is_bound_method ( method ) : if not ( hasattr ( method , \"__func__\" ) and hasattr ( method , \"__self__\" ) ) : return False # Bound methods have a __self__ attribute pointing to the owner instance return six . get_method_self ( method ) is not None\n", "title": "", "metadata": ""}
{"_id": "e9ad7bb8d1445931ed562c8b686773e2", "text": "def eval ( self , expression , use_compilation_plan = False ) : code = 'PyJsEvalResult = eval(%s)' % json . dumps ( expression ) self . execute ( code , use_compilation_plan = use_compilation_plan ) return self [ 'PyJsEvalResult' ]\n", "title": "", "metadata": ""}
{"_id": "378bff3bffb4be1345cf70ff9efbea32", "text": "def main ( filename ) : # Prepare font. font_family = 'arial' font = Font ( font_family , bold = True ) if not font : raise RuntimeError ( 'No font found for %r' % font_family ) # Initialize PDF document on a stream. with Document ( 'output.pdf' ) as document : # Initialize a new page and begin its context. with document . Page ( ) as ctx : # Open the image to embed. with Image ( filename ) as embed : # Set the media box for the page to the same as the # image to embed. ctx . box = embed . box # Embed the image. ctx . embed ( embed ) # Write some text. ctx . add ( Text ( 'Hello World' , font , size = 14 , x = 100 , y = 60 ) )\n", "title": "", "metadata": ""}
{"_id": "8e50589d14a56abfb325f875219f104b", "text": "def call_alias ( self , alias , rest = '' ) : cmd = self . transform_alias ( alias , rest ) try : self . shell . system ( cmd ) except : self . shell . showtraceback ( )\n", "title": "", "metadata": ""}
{"_id": "719ebe18ce689d12cef9735936195abd", "text": "def _save_file ( self , filename , contents ) : with open ( filename , 'w' ) as f : f . write ( contents )\n", "title": "", "metadata": ""}
{"_id": "b7acb31124919b2c01063dcbda962624", "text": "def read_image ( filepath ) : im_bytes = tf . io . read_file ( filepath ) im = tf . image . decode_image ( im_bytes , channels = CHANNELS ) im = tf . image . convert_image_dtype ( im , tf . float32 ) return im\n", "title": "", "metadata": ""}
{"_id": "368c93523a38b1350ebd75ebfc7ae03e", "text": "def get_mtime ( fname ) : try : mtime = os . stat ( fname ) . st_mtime_ns except OSError : # The file might be right in the middle of being written # so sleep time . sleep ( 1 ) mtime = os . stat ( fname ) . st_mtime_ns return mtime\n", "title": "", "metadata": ""}
{"_id": "8d6e3f3a814274445b0327ff10033125", "text": "def save_partial ( self , obj ) : self . save_reduce ( _genpartial , ( obj . func , obj . args , obj . keywords ) )\n", "title": "", "metadata": ""}
{"_id": "fbc9d387bb0cba10cc08f7f6ead1ad17", "text": "def click_estimate_slope ( ) : c1 = _pylab . ginput ( ) if len ( c1 ) == 0 : return None c2 = _pylab . ginput ( ) if len ( c2 ) == 0 : return None return ( c1 [ 0 ] [ 1 ] - c2 [ 0 ] [ 1 ] ) / ( c1 [ 0 ] [ 0 ] - c2 [ 0 ] [ 0 ] )\n", "title": "", "metadata": ""}
{"_id": "679b9655934826f477a811ced9537bab", "text": "def pruning ( self , X , y , cost_mat ) : self . tree_ . tree_pruned = copy . deepcopy ( self . tree_ . tree ) if self . tree_ . n_nodes > 0 : self . _pruning ( X , y , cost_mat ) nodes_pruned = self . _nodes ( self . tree_ . tree_pruned ) self . tree_ . n_nodes_pruned = len ( nodes_pruned )\n", "title": "", "metadata": ""}
{"_id": "571ca8d7ef7097c4b453437250afaab9", "text": "def covariance ( self , pt0 , pt1 ) : x = np . array ( [ pt0 [ 0 ] , pt1 [ 0 ] ] ) y = np . array ( [ pt0 [ 1 ] , pt1 [ 1 ] ] ) names = [ \"n1\" , \"n2\" ] return self . covariance_matrix ( x , y , names = names ) . x [ 0 , 1 ]\n", "title": "", "metadata": ""}
{"_id": "b34bf290c3695969ca634532b32b57be", "text": "def numchannels ( samples : np . ndarray ) -> int : if len ( samples . shape ) == 1 : return 1 else : return samples . shape [ 1 ]\n", "title": "", "metadata": ""}
{"_id": "64ef1d6070cd5d385056c021c665c95a", "text": "def inverse ( self ) : invr = np . linalg . inv ( self . affine_matrix ) return SymmOp ( invr )\n", "title": "", "metadata": ""}
{"_id": "156318f751bb79b2e8a31e1fdf95b4bc", "text": "def _rm_name_match ( s1 , s2 ) : m_len = min ( len ( s1 ) , len ( s2 ) ) return s1 [ : m_len ] == s2 [ : m_len ]\n", "title": "", "metadata": ""}
{"_id": "529b7f9dca37e8bb1d37bd8580563b05", "text": "def get_cov ( config ) : # Check with hasplugin to avoid getplugin exception in older pytest. if config . pluginmanager . hasplugin ( '_cov' ) : plugin = config . pluginmanager . getplugin ( '_cov' ) if plugin . cov_controller : return plugin . cov_controller . cov return None\n", "title": "", "metadata": ""}
{"_id": "6263efa2bab61d6cc6b66f69712bda2a", "text": "def line_segment ( X0 , X1 ) : X0 = sp . around ( X0 ) . astype ( int ) X1 = sp . around ( X1 ) . astype ( int ) if len ( X0 ) == 3 : L = sp . amax ( sp . absolute ( [ [ X1 [ 0 ] - X0 [ 0 ] ] , [ X1 [ 1 ] - X0 [ 1 ] ] , [ X1 [ 2 ] - X0 [ 2 ] ] ] ) ) + 1 x = sp . rint ( sp . linspace ( X0 [ 0 ] , X1 [ 0 ] , L ) ) . astype ( int ) y = sp . rint ( sp . linspace ( X0 [ 1 ] , X1 [ 1 ] , L ) ) . astype ( int ) z = sp . rint ( sp . linspace ( X0 [ 2 ] , X1 [ 2 ] , L ) ) . astype ( int ) return [ x , y , z ] else : L = sp . amax ( sp . absolute ( [ [ X1 [ 0 ] - X0 [ 0 ] ] , [ X1 [ 1 ] - X0 [ 1 ] ] ] ) ) + 1 x = sp . rint ( sp . linspace ( X0 [ 0 ] , X1 [ 0 ] , L ) ) . astype ( int ) y = sp . rint ( sp . linspace ( X0 [ 1 ] , X1 [ 1 ] , L ) ) . astype ( int ) return [ x , y ]\n", "title": "", "metadata": ""}
{"_id": "02dcbb02fbcc4575a0b6baec34b10ea4", "text": "def find_one_by_id ( self , _id ) : document = ( yield self . collection . find_one ( { \"_id\" : ObjectId ( _id ) } ) ) raise Return ( self . _obj_cursor_to_dictionary ( document ) )\n", "title": "", "metadata": ""}
{"_id": "afae3edf39c9f0fe63fb4bd2fb0c5749", "text": "def expand_path ( path ) : return os . path . abspath ( os . path . expandvars ( os . path . expanduser ( path ) ) )\n", "title": "", "metadata": ""}
{"_id": "265f9fe533cee89e5bb208058f2f9f79", "text": "def _get_sql ( filename ) : with open ( os . path . join ( SQL_DIR , filename ) , 'r' ) as f : return f . read ( )\n", "title": "", "metadata": ""}
{"_id": "acc4840892608d9cbdf78a7b307801bd", "text": "def load ( self ) : glTexImage3D ( GL_TEXTURE_3D , 0 , GL_LUMINANCE16_ALPHA16 , self . width , self . width , self . width , 0 , GL_LUMINANCE_ALPHA , GL_UNSIGNED_SHORT , ctypes . byref ( self . data ) )\n", "title": "", "metadata": ""}
{"_id": "e63d05e34f1aa18f9b5f303ec23e0faa", "text": "def _check_model ( obj , models = None ) : return isinstance ( obj , type ) and issubclass ( obj , pw . Model ) and hasattr ( obj , '_meta' )\n", "title": "", "metadata": ""}
{"_id": "abc5adf8ed3f73705206441a33930a07", "text": "def join_states ( * states : State ) -> State : vectors = [ ket . vec for ket in states ] vec = reduce ( outer_product , vectors ) return State ( vec . tensor , vec . qubits )\n", "title": "", "metadata": ""}
{"_id": "188bc665d4bc8f74aaa34cfd38c82567", "text": "def get_soup ( page = '' ) : content = requests . get ( '%s/%s' % ( BASE_URL , page ) ) . text return BeautifulSoup ( content )\n", "title": "", "metadata": ""}
{"_id": "68bd26cf2b640499c023859e9a5d2666", "text": "def drop_post ( self ) : post_index = self . version . find ( '.post' ) if post_index >= 0 : self . version = self . version [ : post_index ]\n", "title": "", "metadata": ""}
{"_id": "4e6f5454f67205f7078782d9bc657c9b", "text": "def empty ( self , name , * * kwargs ) : return self . _write_op ( self . _empty_nosync , name , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "f99e90f38bdc908631532d5da185c386", "text": "def db_exists ( ) : logger . info ( \"Checking to see if %s already exists\" , repr ( DB [ \"NAME\" ] ) ) try : # Hide stderr since it is confusing here psql ( \"\" , stderr = subprocess . STDOUT ) except subprocess . CalledProcessError : return False return True\n", "title": "", "metadata": ""}
{"_id": "4a3021dfb33736184aa0d5e7ed157fdd", "text": "def __call__ ( self , factory_name , * args , * * kwargs ) : return self . factories [ factory_name ] ( * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "1c8f4721c17b568edbf9bdd9e812eb1e", "text": "def inFocus ( self ) : previous_flags = self . window . flags ( ) self . window . setFlags ( previous_flags | QtCore . Qt . WindowStaysOnTopHint )\n", "title": "", "metadata": ""}
{"_id": "27a32f8250d44e86b2834d8d841c592c", "text": "def toarray ( self ) : rdd = self . _rdd . map ( lambda x : x . toarray ( ) ) return np . concatenate ( rdd . collect ( ) )\n", "title": "", "metadata": ""}
{"_id": "b1fceb5775d73844717e206626a80861", "text": "def created_today ( self ) : if self . datetime . date ( ) == datetime . today ( ) . date ( ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "86b248ae8b020bf15ff438e6b53ea0dc", "text": "def reportMemory ( k , options , field = None , isBytes = False ) : if options . pretty : return prettyMemory ( int ( k ) , field = field , isBytes = isBytes ) else : if isBytes : k /= 1024. if field is not None : return \"%*dK\" % ( field - 1 , k ) # -1 for the \"K\" else : return \"%dK\" % int ( k )\n", "title": "", "metadata": ""}
