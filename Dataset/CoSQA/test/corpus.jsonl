{"_id": "31f86ebb9a6bc1a7314c456fd6ec6d49", "text": "def shot_noise ( x , severity = 1 ) : c = [ 60 , 25 , 12 , 5 , 3 ] [ severity - 1 ] x = np . array ( x ) / 255. x_clip = np . clip ( np . random . poisson ( x * c ) / float ( c ) , 0 , 1 ) * 255 return around_and_astype ( x_clip )\n", "title": "", "metadata": ""}
{"_id": "82d251718f286d51b4f398b20085e23c", "text": "def comma_delimited_to_list ( list_param ) : if isinstance ( list_param , list ) : return list_param if isinstance ( list_param , str ) : return list_param . split ( ',' ) else : return [ ]\n", "title": "", "metadata": ""}
{"_id": "afcaafd3848670c0377987287abf8df5", "text": "def _last_index ( x , default_dim ) : if x . get_shape ( ) . ndims is not None : return len ( x . get_shape ( ) ) - 1 else : return default_dim\n", "title": "", "metadata": ""}
{"_id": "dd0a24fb5faf30fa450eff02e5eff524", "text": "def tag ( self , nerdoc ) : labels = [ ] for snt in nerdoc . sentences : xseq = [ t . feature_list ( ) for t in snt ] yseq = self . tagger . tag ( xseq ) labels . append ( yseq ) return labels\n", "title": "", "metadata": ""}
{"_id": "d2f4705089f5135636f7bb8a3ae0bfde", "text": "def SegmentMin ( a , ids ) : func = lambda idxs : np . amin ( a [ idxs ] , axis = 0 ) return seg_map ( func , a , ids ) ,\n", "title": "", "metadata": ""}
{"_id": "d754734f3d331b3927da3dc529b22fe1", "text": "def title ( msg ) : if sys . platform . startswith ( \"win\" ) : ctypes . windll . kernel32 . SetConsoleTitleW ( tounicode ( msg ) )\n", "title": "", "metadata": ""}
{"_id": "8e769355e5b421481b9594d243500b38", "text": "def _gcd_array ( X ) : greatest_common_divisor = 0.0 for x in X : greatest_common_divisor = _gcd ( greatest_common_divisor , x ) return greatest_common_divisor\n", "title": "", "metadata": ""}
{"_id": "f0934b3adbefcf6e092336ab4574f98d", "text": "def __next__ ( self , reward , ask_id , lbl ) : return self . next ( reward , ask_id , lbl )\n", "title": "", "metadata": ""}
{"_id": "ef9dc207d14740c1b2befe7f117970c0", "text": "def b2u ( string ) : if ( isinstance ( string , bytes ) or ( PY2 and isinstance ( string , str ) ) ) : return string . decode ( 'utf-8' ) return string\n", "title": "", "metadata": ""}
{"_id": "43a76fc9d1e6f8a9a17e6ed1f43e01fe", "text": "def force_iterable ( f ) : def wrapper ( * args , * * kwargs ) : r = f ( * args , * * kwargs ) if hasattr ( r , '__iter__' ) : return r else : return [ r ] return wrapper\n", "title": "", "metadata": ""}
{"_id": "580951d998b747c345b64d568819eb11", "text": "def _linear_interpolation ( x , X , Y ) : return ( Y [ 1 ] * ( x - X [ 0 ] ) + Y [ 0 ] * ( X [ 1 ] - x ) ) / ( X [ 1 ] - X [ 0 ] )\n", "title": "", "metadata": ""}
{"_id": "4ade47a63a89d2146e039e1d849cbea9", "text": "def graphql_queries_to_json ( * queries ) : rtn = { } for i , query in enumerate ( queries ) : rtn [ \"q{}\" . format ( i ) ] = query . value return json . dumps ( rtn )\n", "title": "", "metadata": ""}
{"_id": "98fef40c58eb2695aca69cac8950c276", "text": "def maxId ( self ) : if len ( self . model . db ) == 0 : return 0 return max ( map ( lambda obj : obj [ \"id\" ] , self . model . db ) )\n", "title": "", "metadata": ""}
{"_id": "d0f365fddf2ee7c02e03edfa97f884be", "text": "def update ( self , other_dict ) : for key , value in iter_multi_items ( other_dict ) : MultiDict . add ( self , key , value )\n", "title": "", "metadata": ""}
{"_id": "1342af964de96c77edfb65dc24029ce0", "text": "def n_choose_k ( n , k ) : return int ( reduce ( MUL , ( Fraction ( n - i , i + 1 ) for i in range ( k ) ) , 1 ) )\n", "title": "", "metadata": ""}
{"_id": "780fe72b8f929a07592bcc63b5b00c81", "text": "def _make_index ( df , cols = META_IDX ) : return pd . MultiIndex . from_tuples ( pd . unique ( list ( zip ( * [ df [ col ] for col in cols ] ) ) ) , names = tuple ( cols ) )\n", "title": "", "metadata": ""}
{"_id": "a65bc35439ff52550b1498b85396a261", "text": "def test3 ( ) : import time p = MVisionProcess ( ) p . start ( ) time . sleep ( 5 ) p . stop ( )\n", "title": "", "metadata": ""}
{"_id": "ea4c5d2a50c48e42e31c7e9c226fe930", "text": "def backward_delete_word ( self , e ) : # (Control-Rubout)  self . l_buffer . backward_delete_word ( self . argument_reset ) self . finalize ( )\n", "title": "", "metadata": ""}
{"_id": "c885f2eab575614069d86f699de16ba9", "text": "def print_yaml ( o ) : print ( yaml . dump ( o , default_flow_style = False , indent = 4 , encoding = 'utf-8' ) )\n", "title": "", "metadata": ""}
{"_id": "429c3737b37f1bebc8e68b24f653245c", "text": "async def vc_check ( ctx : commands . Context ) : # pylint: disable=unused-argument if not discord . voice_client . has_nacl : raise commands . CheckFailure ( \"voice cannot be used because PyNaCl is not loaded\" ) if not discord . opus . is_loaded ( ) : raise commands . CheckFailure ( \"voice cannot be used because libopus is not loaded\" ) return True\n", "title": "", "metadata": ""}
{"_id": "29517e1ce9c58d8e6a73f27163de9262", "text": "def info ( self , text ) : self . logger . info ( \"{}{}\" . format ( self . message_prefix , text ) )\n", "title": "", "metadata": ""}
{"_id": "7d6ad5fc9e40239a0ec88c04e5f887b1", "text": "def cric__decision_tree ( ) : model = sklearn . tree . DecisionTreeClassifier ( random_state = 0 , max_depth = 4 ) # we want to explain the raw probability outputs of the trees model . predict = lambda X : model . predict_proba ( X ) [ : , 1 ] return model\n", "title": "", "metadata": ""}
{"_id": "01193442472d219e594e042e8943f70e", "text": "def index ( self , elem ) : return _coconut . len ( self . _iter ) - self . _iter . index ( elem ) - 1\n", "title": "", "metadata": ""}
{"_id": "a12f7555f666d9b276b263c8d7d8967c", "text": "def is_numeric_dtype ( dtype ) : dtype = np . dtype ( dtype ) return np . issubsctype ( getattr ( dtype , 'base' , None ) , np . number )\n", "title": "", "metadata": ""}
{"_id": "4c128533546bbd9cfb5d1d04612b34d1", "text": "def shape ( self ) : if not self . data : return ( 0 , 0 ) return ( len ( self . data ) , len ( self . dimensions ) )\n", "title": "", "metadata": ""}
{"_id": "35b19a3aad62ad22a67bb7381c08d24a", "text": "def is_unix_like ( platform = None ) : platform = platform or sys . platform platform = platform . lower ( ) return platform . startswith ( \"linux\" ) or platform . startswith ( \"darwin\" ) or platform . startswith ( \"cygwin\" )\n", "title": "", "metadata": ""}
{"_id": "0214d72377d667515c738a791d451514", "text": "def check_hash_key ( query_on , key ) : return ( isinstance ( key , BaseCondition ) and ( key . operation == \"==\" ) and ( key . column is query_on . hash_key ) )\n", "title": "", "metadata": ""}
{"_id": "1e6feb9c0d81112cea1e8a8f04c4ac09", "text": "def cleanup_nodes ( doc ) : for node in doc . documentElement . childNodes : if node . nodeType == Node . TEXT_NODE and node . nodeValue . isspace ( ) : doc . documentElement . removeChild ( node ) return doc\n", "title": "", "metadata": ""}
{"_id": "a6f331b870c73f3c4884fcbb5cae9eb4", "text": "def datetime_is_iso ( date_str ) : try : if len ( date_str ) > 10 : dt = isodate . parse_datetime ( date_str ) else : dt = isodate . parse_date ( date_str ) return True , [ ] except : # Any error qualifies as not ISO format return False , [ 'Datetime provided is not in a valid ISO 8601 format' ]\n", "title": "", "metadata": ""}
{"_id": "2dce25ea73917bba7ba7d99d13132dbc", "text": "def uniqued ( iterable ) : seen = set ( ) add = seen . add return [ i for i in iterable if i not in seen and not add ( i ) ]\n", "title": "", "metadata": ""}
{"_id": "5dee2a7f1963473daf78b4b2a34de72d", "text": "def isstring ( value ) : classes = ( str , bytes ) if pyutils . PY3 else basestring # noqa: F821 return isinstance ( value , classes )\n", "title": "", "metadata": ""}
{"_id": "be9ee0c4852f4f07b24b007a91a0a694", "text": "def asMaskedArray ( self ) : return ma . masked_array ( data = self . data , mask = self . mask , fill_value = self . fill_value )\n", "title": "", "metadata": ""}
{"_id": "d76d60c7f3c443d6901686b0ec19950c", "text": "def _trim ( self , somestr ) : tmp = RE_LSPACES . sub ( \"\" , somestr ) tmp = RE_TSPACES . sub ( \"\" , tmp ) return str ( tmp )\n", "title": "", "metadata": ""}
{"_id": "60cc7a34359b44e5212225986f36d7ef", "text": "def start_of_month ( val ) : if type ( val ) == date : val = datetime . fromordinal ( val . toordinal ( ) ) return start_of_day ( val ) . replace ( day = 1 )\n", "title": "", "metadata": ""}
{"_id": "a608d66f8611c277483d6cb617e84d83", "text": "def cleanup ( self , app ) : if hasattr ( self . database . obj , 'close_all' ) : self . database . close_all ( )\n", "title": "", "metadata": ""}
{"_id": "d23797a3a9ef3550e5812d6b26dc9ec4", "text": "def _get_local_ip ( ) : return set ( [ x [ 4 ] [ 0 ] for x in socket . getaddrinfo ( socket . gethostname ( ) , 80 , socket . AF_INET ) ] ) . pop ( )\n", "title": "", "metadata": ""}
{"_id": "3ef463b0771b0db4e368634478840369", "text": "def mkdir ( dir , enter ) : if not os . path . exists ( dir ) : os . makedirs ( dir )\n", "title": "", "metadata": ""}
{"_id": "c921bee6424b83efe233e3183372e17b", "text": "def generate ( env ) : cplusplus . generate ( env ) env [ 'CXX' ] = 'CC' env [ 'CXXFLAGS' ] = SCons . Util . CLVar ( '-LANG:std' ) env [ 'SHCXX' ] = '$CXX' env [ 'SHOBJSUFFIX' ] = '.o' env [ 'STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME' ] = 1\n", "title": "", "metadata": ""}
{"_id": "5e8749de956ad6fdf00f5d43ef20c05f", "text": "def scale_image ( image , new_width ) : ( original_width , original_height ) = image . size aspect_ratio = original_height / float ( original_width ) new_height = int ( aspect_ratio * new_width ) # This scales it wider than tall, since characters are biased new_image = image . resize ( ( new_width * 2 , new_height ) ) return new_image\n", "title": "", "metadata": ""}
{"_id": "da4f3ea95c06d9d18e42ad5d97ee6f44", "text": "def where_is ( strings , pattern , n = 1 , lookup_func = re . match ) : count = 0 for idx , item in enumerate ( strings ) : if lookup_func ( pattern , item ) : count += 1 if count == n : return idx return - 1\n", "title": "", "metadata": ""}
{"_id": "ef0467f82579aa1437056b34a82b8983", "text": "def is_real_floating_dtype ( dtype ) : dtype = np . dtype ( dtype ) return np . issubsctype ( getattr ( dtype , 'base' , None ) , np . floating )\n", "title": "", "metadata": ""}
{"_id": "290e1def0547d90a41fdacf4fd7834a8", "text": "def create_bigquery_table ( self , database , schema , table_name , callback , sql ) : conn = self . get_thread_connection ( ) client = conn . handle view_ref = self . table_ref ( database , schema , table_name , conn ) view = google . cloud . bigquery . Table ( view_ref ) callback ( view ) with self . exception_handler ( sql ) : client . create_table ( view )\n", "title": "", "metadata": ""}
{"_id": "5bb312a7934fee380aae8b32c4ca8065", "text": "def software_fibonacci ( n ) : a , b = 0 , 1 for i in range ( n ) : a , b = b , a + b return a\n", "title": "", "metadata": ""}
{"_id": "6d6a99613d5350ae084e867b7f31c2c3", "text": "def string_to_date ( value ) : if isinstance ( value , datetime . date ) : return value return dateutil . parser . parse ( value ) . date ( )\n", "title": "", "metadata": ""}
{"_id": "b1d802dbf9edb9076ea2547867595502", "text": "def _RetryRequest ( self , timeout = None , * * request_args ) : while True : try : now = time . time ( ) if not timeout : timeout = config . CONFIG [ \"Client.http_timeout\" ] result = requests . request ( * * request_args ) # By default requests doesn't raise on HTTP error codes. result . raise_for_status ( ) # Requests does not always raise an exception when an incorrect response # is received. This fixes that behaviour. if not result . ok : raise requests . RequestException ( response = result ) return time . time ( ) - now , result # Catch any exceptions that dont have a code (e.g. socket.error). except IOError as e : self . consecutive_connection_errors += 1 # Request failed. If we connected successfully before we attempt a few # connections before we determine that it really failed. This might # happen if the front end is loaded and returns a few throttling 500 # messages. if self . active_base_url is not None : # Propagate 406 immediately without retrying, as 406 is a valid # response that indicates a need for enrollment. response = getattr ( e , \"response\" , None ) if getattr ( response , \"status_code\" , None ) == 406 : raise if self . consecutive_connection_errors >= self . retry_error_limit : # We tried several times but this really did not work, just fail it. logging . info ( \"Too many connection errors to %s, retrying another URL\" , self . active_base_url ) self . active_base_url = None raise e # Back off hard to allow the front end to recover. logging . debug ( \"Unable to connect to frontend. Backing off %s seconds.\" , self . error_poll_min ) self . Wait ( self . error_poll_min ) # We never previously connected, maybe the URL/proxy is wrong? Just fail # right away to allow callers to try a different URL. else : raise e\n", "title": "", "metadata": ""}
{"_id": "b12c53c9be8ab5d18600180118d4152f", "text": "def _read_json_file ( self , json_file ) : self . log . debug ( \"Reading '%s' JSON file...\" % json_file ) with open ( json_file , 'r' ) as f : return json . load ( f , object_pairs_hook = OrderedDict )\n", "title": "", "metadata": ""}
{"_id": "8af9af3891992aab43904b2aeaa8384f", "text": "def __replace_all ( repls : dict , input : str ) -> str : return re . sub ( '|' . join ( re . escape ( key ) for key in repls . keys ( ) ) , lambda k : repls [ k . group ( 0 ) ] , input )\n", "title": "", "metadata": ""}
{"_id": "32911f6be92f498909fc79ed7546d934", "text": "def cross_join ( df1 , df2 ) : if len ( df1 ) == 0 : return df2 if len ( df2 ) == 0 : return df1 # Add as lists so that the new index keeps the items in # the order that they are added together all_columns = pd . Index ( list ( df1 . columns ) + list ( df2 . columns ) ) df1 [ 'key' ] = 1 df2 [ 'key' ] = 1 return pd . merge ( df1 , df2 , on = 'key' ) . loc [ : , all_columns ]\n", "title": "", "metadata": ""}
{"_id": "6b09c1ac9d929498873fe5f8304d51c1", "text": "def flatten_list ( x : List [ Any ] ) -> List [ Any ] : # noqa return [ item for sublist in x for item in sublist ]\n", "title": "", "metadata": ""}
{"_id": "9e5024b10a6d2900ad5e89bbaad730e7", "text": "def write_color ( string , name , style = 'normal' , when = 'auto' ) : write ( color ( string , name , style , when ) )\n", "title": "", "metadata": ""}
{"_id": "cc3139e4ceb22437471639d3191d57cc", "text": "def _update_globals ( ) : if not sys . platform . startswith ( 'java' ) and sys . platform != 'cli' : return incompatible = 'extract_constant' , 'get_module_constant' for name in incompatible : del globals ( ) [ name ] __all__ . remove ( name )\n", "title": "", "metadata": ""}
{"_id": "c2c7eabdc0f0966292118804716ce48f", "text": "def good ( txt ) : print ( \"%s# %s%s%s\" % ( PR_GOOD_CC , get_time_stamp ( ) , txt , PR_NC ) ) sys . stdout . flush ( )\n", "title": "", "metadata": ""}
{"_id": "1b3f51b65a975d24377cd37f71a41750", "text": "def is_image_file_valid ( file_path_name ) : # Image.verify is only implemented for PNG images, and it only verifies # the CRC checksum in the image.  The only way to check from within # Pillow is to load the image in a try/except and check the error.  If # as much info as possible is from the image is needed, # ``ImageFile.LOAD_TRUNCATED_IMAGES=True`` needs to bet set and it # will attempt to parse as much as possible. try : with Image . open ( file_path_name ) as image : image . load ( ) except IOError : return False return True\n", "title": "", "metadata": ""}
{"_id": "dc3bcbed736190974cb45784a262c380", "text": "def Flush ( self ) : while self . _age : node = self . _age . PopLeft ( ) self . KillObject ( node . data ) self . _hash = dict ( )\n", "title": "", "metadata": ""}
{"_id": "00a471d6bba925cf8a6426a771c06155", "text": "def print_error ( msg ) : if IS_POSIX : print ( u\"%s[ERRO] %s%s\" % ( ANSI_ERROR , msg , ANSI_END ) ) else : print ( u\"[ERRO] %s\" % ( msg ) )\n", "title": "", "metadata": ""}
{"_id": "3a749baf751537528722b65a054890aa", "text": "def multi_pop ( d , * args ) : retval = { } for key in args : if key in d : retval [ key ] = d . pop ( key ) return retval\n", "title": "", "metadata": ""}
{"_id": "818f1b31a73d713b678cc10e2fad65ef", "text": "def model_field_attr ( model , model_field , attr ) : fields = dict ( [ ( field . name , field ) for field in model . _meta . fields ] ) return getattr ( fields [ model_field ] , attr )\n", "title": "", "metadata": ""}
{"_id": "d281a3893f1659ad88441d53d34c5ca7", "text": "def fix_call ( callable , * args , * * kw ) : try : val = callable ( * args , * * kw ) except TypeError : exc_info = fix_type_error ( None , callable , args , kw ) reraise ( * exc_info ) return val\n", "title": "", "metadata": ""}
{"_id": "6efb7ce3ffb2613ce415f9b7bc591e5a", "text": "def make_table_map ( table , headers ) : header_parts = { } for i , h in enumerate ( headers ) : header_parts [ h ] = 'row[{}]' . format ( i ) body_code = 'lambda row: [{}]' . format ( ',' . join ( header_parts . get ( c . name , 'None' ) for c in table . columns ) ) header_code = 'lambda row: [{}]' . format ( ',' . join ( header_parts . get ( c . name , \"'{}'\" . format ( c . name ) ) for c in table . columns ) ) return eval ( header_code ) , eval ( body_code )\n", "title": "", "metadata": ""}
{"_id": "8fbb50a7cba37fe9e83abdf1b5ea60c8", "text": "def round_sig ( x , sig ) : return round ( x , sig - int ( floor ( log10 ( abs ( x ) ) ) ) - 1 )\n", "title": "", "metadata": ""}
{"_id": "81270b78351ad81ae99cd00fbc72705c", "text": "def _interface_exists ( self , interface ) : ios_cfg = self . _get_running_config ( ) parse = HTParser ( ios_cfg ) itfcs_raw = parse . find_lines ( \"^interface \" + interface ) return len ( itfcs_raw ) > 0\n", "title": "", "metadata": ""}
{"_id": "79c6dab32af2171d2cd9e2a496b10e64", "text": "def is_non_empty_string ( input_string ) : try : if not input_string . strip ( ) : raise ValueError ( ) except AttributeError as error : raise TypeError ( error ) return True\n", "title": "", "metadata": ""}
{"_id": "19e17b044aacb50752f1de0bc5ac0c72", "text": "def strip_spaces ( value , sep = None , join = True ) : value = value . strip ( ) value = [ v . strip ( ) for v in value . split ( sep ) ] join_sep = sep or ' ' return join_sep . join ( value ) if join else value\n", "title": "", "metadata": ""}
{"_id": "ca46911da6d4287718734a3ac1561c79", "text": "def contains_geometric_info ( var ) : return isinstance ( var , tuple ) and len ( var ) == 2 and all ( isinstance ( val , ( int , float ) ) for val in var )\n", "title": "", "metadata": ""}
{"_id": "f5ffc09302a526b18a57a9e380e08733", "text": "def rq_job ( self ) : if not self . rq_id or not self . rq_origin : return try : return RQJob . fetch ( self . rq_id , connection = get_connection ( self . rq_origin ) ) except NoSuchJobError : return\n", "title": "", "metadata": ""}
{"_id": "ef05c90583baa3bddcc900c253c7171c", "text": "def decode_value ( stream ) : length = decode_length ( stream ) ( value , ) = unpack_value ( \">{:d}s\" . format ( length ) , stream ) return value\n", "title": "", "metadata": ""}
{"_id": "1e352af2a88b2bfb5c33a272de6bc43b", "text": "def iprotate ( l , steps = 1 ) : if len ( l ) : steps %= len ( l ) if steps : firstPart = l [ : steps ] del l [ : steps ] l . extend ( firstPart ) return l\n", "title": "", "metadata": ""}
{"_id": "c522ebd117b24de2e338bcc6a432a66a", "text": "def array2string ( arr : numpy . ndarray ) -> str : shape = str ( arr . shape ) [ 1 : - 1 ] if shape . endswith ( \",\" ) : shape = shape [ : - 1 ] return numpy . array2string ( arr , threshold = 11 ) + \"%s[%s]\" % ( arr . dtype , shape )\n", "title": "", "metadata": ""}
{"_id": "d016cbbb3aeb8ae1b5e51b4fce66d047", "text": "def _duplicates ( list_ ) : item_indices = { } for i , item in enumerate ( list_ ) : try : item_indices [ item ] . append ( i ) except KeyError : # First time seen item_indices [ item ] = [ i ] return item_indices\n", "title": "", "metadata": ""}
{"_id": "d6fb5b4ce076f5f4fc850b892d488741", "text": "def add_exec_permission_to ( target_file ) : mode = os . stat ( target_file ) . st_mode os . chmod ( target_file , mode | stat . S_IXUSR )\n", "title": "", "metadata": ""}
{"_id": "a02c07155b13136e17e6fa2651b7abd7", "text": "def starts_with_prefix_in_list ( text , prefixes ) : for prefix in prefixes : if text . startswith ( prefix ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "54d7fe42c18cb439a8a9c97870f4d196", "text": "def _IsDirectory ( parent , item ) : return tf . io . gfile . isdir ( os . path . join ( parent , item ) )\n", "title": "", "metadata": ""}
{"_id": "6ff83a51d746375c2e41eddae7d510cb", "text": "def index ( m , val ) : mm = np . array ( m ) idx_tuple = np . where ( mm == val ) idx = idx_tuple [ 0 ] . tolist ( ) return idx\n", "title": "", "metadata": ""}
{"_id": "5cb108fb21441e2217a66590245f92bf", "text": "def empty_tree ( input_list ) : for item in input_list : if not isinstance ( item , list ) or not empty_tree ( item ) : return False return True\n", "title": "", "metadata": ""}
{"_id": "5a448d76e670884855cac5a1717e06bc", "text": "def OnDoubleClick ( self , event ) : node = HotMapNavigator . findNodeAtPosition ( self . hot_map , event . GetPosition ( ) ) if node : wx . PostEvent ( self , SquareActivationEvent ( node = node , point = event . GetPosition ( ) , map = self ) )\n", "title": "", "metadata": ""}
{"_id": "746f14cebbf23b8a7984623ddf1f0653", "text": "def dfs_recursive ( graph , node , seen ) : seen [ node ] = True for neighbor in graph [ node ] : if not seen [ neighbor ] : dfs_recursive ( graph , neighbor , seen )\n", "title": "", "metadata": ""}
{"_id": "ae7d3e652d42f619058fe7a2131a6f86", "text": "def long_substr ( data ) : substr = '' if len ( data ) > 1 and len ( data [ 0 ] ) > 0 : for i in range ( len ( data [ 0 ] ) ) : for j in range ( len ( data [ 0 ] ) - i + 1 ) : if j > len ( substr ) and all ( data [ 0 ] [ i : i + j ] in x for x in data ) : substr = data [ 0 ] [ i : i + j ] elif len ( data ) == 1 : substr = data [ 0 ] return substr\n", "title": "", "metadata": ""}
{"_id": "e88b32e366573d360532faa99c79c639", "text": "def _dotify ( cls , data ) : return '' . join ( char if char in cls . PRINTABLE_DATA else '.' for char in data )\n", "title": "", "metadata": ""}
{"_id": "c297c5ea8408cc8833ebbc4ec5633cd6", "text": "def a2s ( a ) : s = np . zeros ( ( 6 , ) , 'f' ) # make the a matrix for i in range ( 3 ) : s [ i ] = a [ i ] [ i ] s [ 3 ] = a [ 0 ] [ 1 ] s [ 4 ] = a [ 1 ] [ 2 ] s [ 5 ] = a [ 0 ] [ 2 ] return s\n", "title": "", "metadata": ""}
{"_id": "f0d40cb5df73891aa6c7b87cbc471036", "text": "def arr_to_vector ( arr ) : dim = array_dim ( arr ) tmp_arr = [ ] for n in range ( len ( dim ) - 1 ) : for inner in arr : for i in inner : tmp_arr . append ( i ) arr = tmp_arr tmp_arr = [ ] return arr\n", "title": "", "metadata": ""}
{"_id": "ec6a03ff18ef19ca9fe5f300f8c9b283", "text": "def register_modele ( self , modele : Modele ) : self . lemmatiseur . _modeles [ modele . gr ( ) ] = modele\n", "title": "", "metadata": ""}
{"_id": "acb6e2d393f09c2970ffbc685a2dad8c", "text": "def _render_table ( data , fields = None ) : return IPython . core . display . HTML ( datalab . utils . commands . HtmlBuilder . render_table ( data , fields ) )\n", "title": "", "metadata": ""}
{"_id": "70119bdfc5bfee0fa3ede4ab4d90ad7f", "text": "def ms_to_datetime ( ms ) : dt = datetime . datetime . utcfromtimestamp ( ms / 1000 ) return dt . replace ( microsecond = ( ms % 1000 ) * 1000 ) . replace ( tzinfo = pytz . utc )\n", "title": "", "metadata": ""}
{"_id": "2a5a0932ebc1a41db79ed7f503e45541", "text": "def to_camel_case ( text ) : split = text . split ( '_' ) return split [ 0 ] + \"\" . join ( x . title ( ) for x in split [ 1 : ] )\n", "title": "", "metadata": ""}
{"_id": "39782c5fb63d5934b7d6748cdc8911af", "text": "def get_lines ( handle , line ) : for i , l in enumerate ( handle ) : if i == line : return l\n", "title": "", "metadata": ""}
{"_id": "9e60797715aca380d149514435fe7ac9", "text": "def get_var ( name , factory = None ) : if name not in _VARS and factory is not None : _VARS [ name ] = factory ( ) return _VARS . get ( name )\n", "title": "", "metadata": ""}
{"_id": "0e4863da3a39de76743dcae94ab85611", "text": "def replace_all ( text , dic ) : for i , j in dic . iteritems ( ) : text = text . replace ( i , j ) return text\n", "title": "", "metadata": ""}
{"_id": "c03f9a643beb900f300b9c057374e52b", "text": "def warn_if_nans_exist ( X ) : null_count = count_rows_with_nans ( X ) total = len ( X ) percent = 100 * null_count / total if null_count > 0 : warning_message = 'Warning! Found {} rows of {} ({:0.2f}%) with nan values. Only ' 'complete rows will be plotted.' . format ( null_count , total , percent ) warnings . warn ( warning_message , DataWarning )\n", "title": "", "metadata": ""}
{"_id": "e4510071327734db61b266616b49e830", "text": "def __call__ ( self , obj , * arg , * * kw ) : bound_method = self . _manager . __get__ ( obj , obj . __class__ ) return bound_method ( * arg , * * kw )\n", "title": "", "metadata": ""}
{"_id": "ead98a745a75ecc76f7d097ff77b61e7", "text": "def list_to_str ( list , separator = ',' ) : list = [ str ( x ) for x in list ] return separator . join ( list )\n", "title": "", "metadata": ""}
{"_id": "0364525ca46d118fbda2fb1fc9512d67", "text": "def _split_str ( s , n ) : length = len ( s ) return [ s [ i : i + n ] for i in range ( 0 , length , n ) ]\n", "title": "", "metadata": ""}
{"_id": "158303a6820593dad57576b9b7f54758", "text": "def csort ( objs , key ) : idxs = dict ( ( obj , i ) for ( i , obj ) in enumerate ( objs ) ) return sorted ( objs , key = lambda obj : ( key ( obj ) , idxs [ obj ] ) )\n", "title": "", "metadata": ""}
{"_id": "a7941ee9608dbf02fc4617c3a6466e20", "text": "def sanitize_word ( s ) : s = re . sub ( '[^\\w-]+' , '_' , s ) s = re . sub ( '__+' , '_' , s ) return s . strip ( '_' )\n", "title": "", "metadata": ""}
{"_id": "4f90876c59620a25a6a6cd52c339d4ed", "text": "def _renamer ( self , tre ) : ## get the tre with numbered tree tip labels names = tre . get_leaves ( ) ## replace numbered names with snames for name in names : name . name = self . samples [ int ( name . name ) ] ## return with only topology and leaf labels return tre . write ( format = 9 )\n", "title": "", "metadata": ""}
{"_id": "28e9b4ff83cf6120b4ce526c4f8d54bb", "text": "def gcd_float ( numbers , tol = 1e-8 ) : def pair_gcd_tol ( a , b ) : \"\"\"Calculate the Greatest Common Divisor of a and b.          Unless b==0, the result will have the same sign as b (so that when         b is divided by it, the result comes out positive).         \"\"\" while b > tol : a , b = b , a % b return a n = numbers [ 0 ] for i in numbers : n = pair_gcd_tol ( n , i ) return n\n", "title": "", "metadata": ""}
{"_id": "2b081b7dd47c73c681492ada8d02929b", "text": "def is_listish ( obj ) : if isinstance ( obj , ( list , tuple , set ) ) : return True return is_sequence ( obj )\n", "title": "", "metadata": ""}
{"_id": "b28b171972de87e3b1c78332e12721e4", "text": "def split_elements ( value ) : l = [ v . strip ( ) for v in value . split ( ',' ) ] if len ( l ) == 1 : l = value . split ( ) return l\n", "title": "", "metadata": ""}
{"_id": "66296604630be9053b0d1803ef8d931c", "text": "def get_datatype ( self , table : str , column : str ) -> str : return self . flavour . get_datatype ( self , table , column ) . upper ( )\n", "title": "", "metadata": ""}
{"_id": "76d0e04de0bce2f9da200eb1d0d50ebd", "text": "def median_high ( data ) : data = sorted ( data ) n = len ( data ) if n == 0 : raise StatisticsError ( \"no median for empty data\" ) return data [ n // 2 ]\n", "title": "", "metadata": ""}
{"_id": "6958318af9cc785cce50ba2313a3ea57", "text": "def _possibly_convert_objects ( values ) : return np . asarray ( pd . Series ( values . ravel ( ) ) ) . reshape ( values . shape )\n", "title": "", "metadata": ""}
{"_id": "77f0c4601515de33faf05d1d8783dc30", "text": "def make_coord_dict ( coord ) : return dict ( z = int_if_exact ( coord . zoom ) , x = int_if_exact ( coord . column ) , y = int_if_exact ( coord . row ) , )\n", "title": "", "metadata": ""}
{"_id": "0ad33ab3a4fd422755a71c50d8ed9c48", "text": "def hkm_fc ( fdata , Nmax , m , s ) : f = fdata [ : , m ] L1 = f . size MM = int ( L1 / 2 ) Q = s . size ff = np . zeros ( Q , dtype = np . complex128 ) for n in xrange ( MM , L1 ) : ff [ n ] = f [ n - MM ] for n in xrange ( 0 , MM ) : ff [ n ] = f [ n + MM ] # For larger problems, this speeds things up pretty good.  F = np . fft . fft ( ff ) S = np . fft . fft ( s ) out = 4 * np . pi * np . fft . ifft ( F * S ) return out [ 0 : Nmax + 1 ]\n", "title": "", "metadata": ""}
{"_id": "9dc2b2f91bdbcbafa1a08a62079ede36", "text": "def flatten_all_but_last ( a ) : ret = tf . reshape ( a , [ - 1 , tf . shape ( a ) [ - 1 ] ] ) if not tf . executing_eagerly ( ) : ret . set_shape ( [ None ] + a . get_shape ( ) . as_list ( ) [ - 1 : ] ) return ret\n", "title": "", "metadata": ""}
{"_id": "47e00b2529a1963f286e394842bd4c87", "text": "def _nth ( arr , n ) : try : return arr . iloc [ n ] except ( KeyError , IndexError ) : return np . nan\n", "title": "", "metadata": ""}
{"_id": "dd1bea7104409ed1c4159b40a83f92c6", "text": "def stylize ( text , styles , reset = True ) : terminator = attr ( \"reset\" ) if reset else \"\" return \"{}{}{}\" . format ( \"\" . join ( styles ) , text , terminator )\n", "title": "", "metadata": ""}
{"_id": "8e462830b16aa39a98da0e700166e3ec", "text": "def monthly ( date = datetime . date . today ( ) ) : return datetime . date ( date . year , date . month , 1 )\n", "title": "", "metadata": ""}
{"_id": "d34b5a047b533eb59c94f7db70bec6a1", "text": "def test ( ctx , all = False , verbose = False ) : cmd = 'tox' if all else 'py.test' if verbose : cmd += ' -v' return ctx . run ( cmd , pty = True ) . return_code\n", "title": "", "metadata": ""}
{"_id": "d8c52f279b8ddf27e9c6da1b0530c135", "text": "def normalized ( vector ) : length = numpy . sum ( vector * vector , axis = - 1 ) length = numpy . sqrt ( length . reshape ( length . shape + ( 1 , ) ) ) return vector / length\n", "title": "", "metadata": ""}
{"_id": "b6927cdfc5bcb3a4c4c93c22ffd7985d", "text": "def year ( date ) : try : fmt = '%m/%d/%Y' return datetime . strptime ( date , fmt ) . timetuple ( ) . tm_year except ValueError : return 0\n", "title": "", "metadata": ""}
{"_id": "69e9da73f477e7c435340e7d23516f15", "text": "def _rank ( self , ranking , n ) : return nlargest ( n , ranking , key = ranking . get )\n", "title": "", "metadata": ""}
{"_id": "aa64d44cc79e8ca310e83ce70b0e1fd3", "text": "def json_template ( data , template_name , template_context ) : html = render_to_string ( template_name , template_context ) data = data or { } data [ 'html' ] = html return HttpResponse ( json_encode ( data ) , content_type = 'application/json' )\n", "title": "", "metadata": ""}
{"_id": "76d577b346859863f2683e71175ba01d", "text": "def argmax ( self , rows : List [ Row ] , column : ComparableColumn ) -> List [ Row ] : if not rows : return [ ] value_row_pairs = [ ( row . values [ column . name ] , row ) for row in rows ] if not value_row_pairs : return [ ] # Returns a list containing the row with the max cell value. return [ sorted ( value_row_pairs , key = lambda x : x [ 0 ] , reverse = True ) [ 0 ] [ 1 ] ]\n", "title": "", "metadata": ""}
{"_id": "03f030fd08df935c42a309838f7c2a17", "text": "def replace ( s , replace ) : for r in replace : s = s . replace ( * r ) return s\n", "title": "", "metadata": ""}
{"_id": "cfa7601910b16d636d51912f21e997e7", "text": "def get_property ( self , filename ) : with open ( self . filepath ( filename ) ) as f : return f . read ( ) . strip ( )\n", "title": "", "metadata": ""}
{"_id": "3baa745dd023a947ae9321b52365318a", "text": "def as_list ( self ) : return [ self . name , self . value , [ x . as_list for x in self . children ] ]\n", "title": "", "metadata": ""}
{"_id": "75cbc7070411c9f5f1847b2c89bc5dd7", "text": "def fast_median ( a ) : a = checkma ( a ) #return scoreatpercentile(a.compressed(), 50) if a . count ( ) > 0 : out = np . percentile ( a . compressed ( ) , 50 ) else : out = np . ma . masked return out\n", "title": "", "metadata": ""}
{"_id": "f48f7191de8195028b0b9df5caceeab1", "text": "def kill_mprocess ( process ) : if process and proc_alive ( process ) : process . terminate ( ) process . communicate ( ) return not proc_alive ( process )\n", "title": "", "metadata": ""}
{"_id": "d9c1c3da0e367b310d6177eeba3128af", "text": "def is_in ( self , search_list , pair ) : index = - 1 for nr , i in enumerate ( search_list ) : if ( np . all ( i == pair ) ) : return nr return index\n", "title": "", "metadata": ""}
{"_id": "9a9d4882d8944a221c0d3186595e37a5", "text": "def selecttrue ( table , field , complement = False ) : return select ( table , field , lambda v : bool ( v ) , complement = complement )\n", "title": "", "metadata": ""}
{"_id": "07daea8eb24143d983a0033dce3b16ce", "text": "def url_syntax_check ( url ) : # pragma: no cover if url and isinstance ( url , str ) : # The given URL is not empty nor None. # and # * The given URL is a string. # We silently load the configuration. load_config ( True ) return Check ( url ) . is_url_valid ( ) # We return None, there is nothing to check. return None\n", "title": "", "metadata": ""}
{"_id": "f01d2e44209bd5d287bfd08a87a1923e", "text": "def _format_title_string ( self , title_string ) : return self . _title_string_format_text_tag ( title_string . replace ( self . icy_tokkens [ 0 ] , self . icy_title_prefix ) )\n", "title": "", "metadata": ""}
{"_id": "12ecefdd6bc394d0b0435fc5d253a0d0", "text": "def fft_bandpassfilter ( data , fs , lowcut , highcut ) : fft = np . fft . fft ( data ) # n = len(data) # timestep = 1.0 / fs # freq = np.fft.fftfreq(n, d=timestep) bp = fft . copy ( ) # Zero out fft coefficients # bp[10:-10] = 0 # Normalise # bp *= real(fft.dot(fft))/real(bp.dot(bp)) bp *= fft . dot ( fft ) / bp . dot ( bp ) # must multipy by 2 to get the correct amplitude ibp = 12 * np . fft . ifft ( bp ) return ibp\n", "title": "", "metadata": ""}
{"_id": "4d892952a52392014aac6b1dd8e06df0", "text": "def normcdf ( x , log = False ) : y = np . atleast_1d ( x ) . copy ( ) flib . normcdf ( y ) if log : if ( y > 0 ) . all ( ) : return np . log ( y ) return - np . inf return y\n", "title": "", "metadata": ""}
{"_id": "991f9273a24a4cf8f9c72bad6c898fed", "text": "def _tree_line ( self , no_type : bool = False ) -> str : return self . _tree_line_prefix ( ) + \" \" + self . iname ( )\n", "title": "", "metadata": ""}
{"_id": "6ec4d1af6a0751b3ae7d7b206a60eb50", "text": "def retrieve_by_id ( self , id_ ) : items_with_id = [ item for item in self if item . id == int ( id_ ) ] if len ( items_with_id ) == 1 : return items_with_id [ 0 ] . retrieve ( )\n", "title": "", "metadata": ""}
{"_id": "69b4952f6863f84479d0c218dd5ee3b6", "text": "def compose ( func_list ) : def f ( G , bim ) : for func in func_list : G , bim = func ( G , bim ) return G , bim return f\n", "title": "", "metadata": ""}
{"_id": "80f4e2f103204d3516c80a0aadce7e9b", "text": "def _get_ipv4_from_binary ( self , bin_addr ) : return socket . inet_ntop ( socket . AF_INET , struct . pack ( \"!L\" , bin_addr ) )\n", "title": "", "metadata": ""}
{"_id": "9a387031d01aa778de722fcb327e5be6", "text": "def print_log ( text , * colors ) : sys . stderr . write ( sprint ( \"{}: {}\" . format ( script_name , text ) , * colors ) + \"\\n\" )\n", "title": "", "metadata": ""}
{"_id": "664633d019f6eb9b79974eef42e7f951", "text": "def get_table_names ( connection ) : cursor = connection . cursor ( ) cursor . execute ( \"SELECT name FROM sqlite_master WHERE type == 'table'\" ) return [ name for ( name , ) in cursor ]\n", "title": "", "metadata": ""}
{"_id": "e9c684332eb0308b101f79264b4b361f", "text": "def exists ( self ) : resp = self . r_session . head ( self . database_url ) if resp . status_code not in [ 200 , 404 ] : resp . raise_for_status ( ) return resp . status_code == 200\n", "title": "", "metadata": ""}
{"_id": "c3e6fc98aa8f4740fa68d604a785f7fc", "text": "def getSystemVariable ( self , remote , name ) : if self . _server is not None : return self . _server . getSystemVariable ( remote , name )\n", "title": "", "metadata": ""}
{"_id": "4aac6465248251f658b45609891310ae", "text": "def import_path ( self ) : return os . path . join ( self . remote_root , self . pkg ) if self . pkg else self . remote_root\n", "title": "", "metadata": ""}
{"_id": "5c82c612053d275eff0a1179a32829ce", "text": "def rmglob ( pattern : str ) -> None : for f in glob . glob ( pattern ) : os . remove ( f )\n", "title": "", "metadata": ""}
{"_id": "52993fde33f254b7ba4e35d662ec9d07", "text": "def list_formatter ( handler , item , value ) : return u', ' . join ( str ( v ) for v in value )\n", "title": "", "metadata": ""}
{"_id": "c1462c32a5ffbee34e07c32e153216e5", "text": "def _read_stream_for_size ( stream , buf_size = 65536 ) : size = 0 while True : buf = stream . read ( buf_size ) size += len ( buf ) if not buf : break return size\n", "title": "", "metadata": ""}
{"_id": "0c3b9ce04232bf1f388eda811b6b1c7d", "text": "def out ( self , output , newline = True ) : click . echo ( output , nl = newline )\n", "title": "", "metadata": ""}
{"_id": "bcc3496e3abe5d9dfd636cba4a74ad28", "text": "def most_even ( number , group ) : count , rest = divmod ( number , group ) counts = zip_longest ( [ count ] * group , [ 1 ] * rest , fillvalue = 0 ) chunks = [ sum ( one ) for one in counts ] logging . debug ( 'chunks: %s' , chunks ) return chunks\n", "title": "", "metadata": ""}
{"_id": "b422b385fe6a4a247882755f3dd7ed0d", "text": "def _send_file ( self , filename ) : # pylint: disable=E1101 ftp = ftplib . FTP ( host = self . host ) ftp . login ( user = self . user , passwd = self . password ) ftp . set_pasv ( True ) ftp . storbinary ( \"STOR %s\" % os . path . basename ( filename ) , file ( filename , 'rb' ) )\n", "title": "", "metadata": ""}
{"_id": "3e46fd5746fe7ad066f7096cedf5b9f0", "text": "def _listify ( collection ) : new_list = [ ] for index in range ( len ( collection ) ) : new_list . append ( collection [ index ] ) return new_list\n", "title": "", "metadata": ""}
{"_id": "8a3aca37372ec6424bdc0260d31ede96", "text": "def _saferound ( value , decimal_places ) : try : f = float ( value ) except ValueError : return '' format = '%%.%df' % decimal_places return format % f\n", "title": "", "metadata": ""}
{"_id": "79b9de354fdb389c1d31272988e75ad7", "text": "def date_to_timestamp ( date ) : date_tuple = date . timetuple ( ) timestamp = calendar . timegm ( date_tuple ) * 1000 return timestamp\n", "title": "", "metadata": ""}
{"_id": "4fa596be101a5eba337c6d9459cf4eb8", "text": "def distinct ( xs ) : # don't use collections.OrderedDict because we do support Python 2.6 seen = set ( ) return [ x for x in xs if x not in seen and not seen . add ( x ) ]\n", "title": "", "metadata": ""}
{"_id": "d9cc5c6fb19f55ee3e319cbff074403a", "text": "def value ( self ) : if self . _prop . fget is None : raise AttributeError ( 'Unable to read attribute' ) return self . _prop . fget ( self . _obj )\n", "title": "", "metadata": ""}
{"_id": "6408897396b2154ee83e93295d53eedb", "text": "def linearRegressionAnalysis ( series ) : n = safeLen ( series ) sumI = sum ( [ i for i , v in enumerate ( series ) if v is not None ] ) sumV = sum ( [ v for i , v in enumerate ( series ) if v is not None ] ) sumII = sum ( [ i * i for i , v in enumerate ( series ) if v is not None ] ) sumIV = sum ( [ i * v for i , v in enumerate ( series ) if v is not None ] ) denominator = float ( n * sumII - sumI * sumI ) if denominator == 0 : return None else : factor = ( n * sumIV - sumI * sumV ) / denominator / series . step offset = sumII * sumV - sumIV * sumI offset = offset / denominator - factor * series . start return factor , offset\n", "title": "", "metadata": ""}
{"_id": "aa9835fa6b4979e66e0516ae8b73f208", "text": "def remove_once ( gset , elem ) : remove = getattr ( gset , 'remove' , None ) if remove is not None : remove ( elem ) else : del gset [ elem ] return elem\n", "title": "", "metadata": ""}
{"_id": "518c34a5d5193bdd2c6adef424b2353b", "text": "def logout ( cache ) : cache . set ( flask . session [ 'auth0_key' ] , None ) flask . session . clear ( ) return True\n", "title": "", "metadata": ""}
{"_id": "cf91ef3baf0528a715ee2b728e18c611", "text": "def _get_background_color ( self ) : color = self . cell_attributes [ self . key ] [ \"bgcolor\" ] return tuple ( c / 255.0 for c in color_pack2rgb ( color ) )\n", "title": "", "metadata": ""}
{"_id": "b8c6d53306671d9fcec25c2329c14c08", "text": "def pdf ( x , mu , std ) : return ( 1.0 / ( std * sqrt ( 2 * pi ) ) ) * np . exp ( - ( x - mu ) ** 2 / ( 2 * std ** 2 ) )\n", "title": "", "metadata": ""}
{"_id": "cb02093e54f97b36b74c60de72418221", "text": "def get_nt_system_uid ( ) : try : import _winreg as winreg except ImportError : import winreg lm = winreg . ConnectRegistry ( None , winreg . HKEY_LOCAL_MACHINE ) try : key = winreg . OpenKey ( lm , r\"Software\\Microsoft\\Cryptography\" ) try : return winreg . QueryValueEx ( key , \"MachineGuid\" ) [ 0 ] finally : key . Close ( ) finally : lm . Close ( )\n", "title": "", "metadata": ""}
{"_id": "d528c88eb9e43fa9bda92fb080fb5584", "text": "def yaml_to_param ( obj , name ) : return from_pyvalue ( u\"yaml:%s\" % name , unicode ( yaml . dump ( obj ) ) )\n", "title": "", "metadata": ""}
{"_id": "8e90eaf142fa83b13f187d5f4801af38", "text": "def exp_fit_fun ( x , a , tau , c ) : # pylint: disable=invalid-name return a * np . exp ( - x / tau ) + c\n", "title": "", "metadata": ""}
{"_id": "33b5888bab73e0701df2831cc061234e", "text": "def invalidate_cache ( cpu , address , size ) : cache = cpu . instruction_cache for offset in range ( size ) : if address + offset in cache : del cache [ address + offset ]\n", "title": "", "metadata": ""}
{"_id": "4f553c1fab495c8943acbed15e36cb3b", "text": "def getfirstline ( file , default ) : with open ( file , 'rb' ) as fh : content = fh . readlines ( ) if len ( content ) == 1 : return content [ 0 ] . decode ( 'utf-8' ) . strip ( '\\n' ) return default\n", "title": "", "metadata": ""}
{"_id": "023117f69c3b381cfb2e6d67b31cf36f", "text": "def token_list_len ( tokenlist ) : ZeroWidthEscape = Token . ZeroWidthEscape return sum ( len ( item [ 1 ] ) for item in tokenlist if item [ 0 ] != ZeroWidthEscape )\n", "title": "", "metadata": ""}
{"_id": "7db13a8fdb6e50566ce1b9e36f1ea041", "text": "def fuzzy_get_tuple ( dict_obj , approximate_key , dict_keys = None , key_and_value = False , similarity = 0.6 , default = None ) : return fuzzy_get ( dict ( ( '|' . join ( str ( k2 ) for k2 in k ) , v ) for ( k , v ) in viewitems ( dict_obj ) ) , '|' . join ( str ( k ) for k in approximate_key ) , dict_keys = dict_keys , key_and_value = key_and_value , similarity = similarity , default = default )\n", "title": "", "metadata": ""}
{"_id": "c03b8d15aadaa8c3d9da77b6aedd1283", "text": "def read_set_from_file ( filename : str ) -> Set [ str ] : collection = set ( ) with open ( filename , 'r' ) as file_ : for line in file_ : collection . add ( line . rstrip ( ) ) return collection\n", "title": "", "metadata": ""}
{"_id": "3002de73eecf2675a9eaf415ef1d8279", "text": "def import_by_path ( path : str ) -> Callable : module_path , _ , class_name = path . rpartition ( '.' ) return getattr ( import_module ( module_path ) , class_name )\n", "title": "", "metadata": ""}
{"_id": "137ecfa9bae7c30cad0e7e160b5088b6", "text": "def print_verbose ( * args , * * kwargs ) : if kwargs . pop ( 'verbose' , False ) is True : gprint ( * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "015c6d01f13d0931169c10162d7e9197", "text": "def softplus ( attrs , inputs , proto_obj ) : new_attrs = translation_utils . _add_extra_attributes ( attrs , { 'act_type' : 'softrelu' } ) return 'Activation' , new_attrs , inputs\n", "title": "", "metadata": ""}
{"_id": "01ca29382b2e035cdcb25b89218341b8", "text": "def json_iter ( path ) : with open ( path , 'r' ) as f : for line in f . readlines ( ) : yield json . loads ( line )\n", "title": "", "metadata": ""}
{"_id": "a24f91c198fee8f8e7ad1b24f01cf728", "text": "def findMax ( arr ) : out = np . zeros ( shape = arr . shape , dtype = bool ) _calcMax ( arr , out ) return out\n", "title": "", "metadata": ""}
{"_id": "f1e572ea11e6715023fc228b58860615", "text": "def __remove_trailing_zeros ( self , collection ) : index = len ( collection ) - 1 while index >= 0 and collection [ index ] == 0 : index -= 1 return collection [ : index + 1 ]\n", "title": "", "metadata": ""}
{"_id": "92bd88d2b8ec5f0f3b17302b3c734f8b", "text": "def Max ( a , axis , keep_dims ) : return np . amax ( a , axis = axis if not isinstance ( axis , np . ndarray ) else tuple ( axis ) , keepdims = keep_dims ) ,\n", "title": "", "metadata": ""}
{"_id": "51991bdcddfef6a5a29f1184362bba41", "text": "def hash_iterable ( it ) : hash_value = hash ( type ( it ) ) for value in it : hash_value = hash ( ( hash_value , value ) ) return hash_value\n", "title": "", "metadata": ""}
{"_id": "3995674e8ca276a731bfee35e85ffb70", "text": "def has_key ( cls , * args ) : key = args if len ( args ) > 1 else args [ 0 ] return key in cls . _instances\n", "title": "", "metadata": ""}
{"_id": "8e8ff5ecc2e3a4d307f2b075c699fbd1", "text": "def copy ( self ) : out = type ( self ) ( ) for series in self : out . append ( series . copy ( ) ) return out\n", "title": "", "metadata": ""}
{"_id": "6a0605cbb75dfc014d2df2569703f3da", "text": "def cell ( self , rowName , columnName ) : return self . matrix [ self . rowIndices [ rowName ] , self . columnIndices [ columnName ] ]\n", "title": "", "metadata": ""}
{"_id": "94d325315ac398ebdd74e3dc4524cf0f", "text": "def build_output ( self , fout ) : fout . write ( '\\n' . join ( [ s for s in self . out ] ) )\n", "title": "", "metadata": ""}
{"_id": "60f39e74c61e4f052213f045dae28537", "text": "def __delitem__ ( self , resource ) : self . __caches [ type ( resource ) ] . pop ( resource . get_cache_internal_key ( ) , None )\n", "title": "", "metadata": ""}
{"_id": "5373a73bb71e95831362132d372f9573", "text": "def test ( ) : import unittest tests = unittest . TestLoader ( ) . discover ( 'tests' ) unittest . TextTestRunner ( verbosity = 2 ) . run ( tests )\n", "title": "", "metadata": ""}
{"_id": "9ac681e06d4edcde424ba0bb3324c1bd", "text": "def _str_to_list ( value , separator ) : value_list = [ item . strip ( ) for item in value . split ( separator ) ] value_list_sanitized = builtins . list ( filter ( None , value_list ) ) if len ( value_list_sanitized ) > 0 : return value_list_sanitized else : raise ValueError ( 'Invalid list variable.' )\n", "title": "", "metadata": ""}
{"_id": "79b5a93251dd5381c782ca835957dbc3", "text": "def new ( self , size , fill ) : return Image ( PIL . Image . new ( \"RGB\" , size , fill ) )\n", "title": "", "metadata": ""}
{"_id": "638fa22c38d5b3de23550c5dae577a04", "text": "def _string_hash ( s ) : h = 5381 for c in s : h = h * 33 + ord ( c ) return h\n", "title": "", "metadata": ""}
{"_id": "c1fe8f64c65b3aa02ec3570bb79a6ecf", "text": "def listen_for_updates ( self ) : self . toredis . subscribe ( self . group_pubsub , callback = self . callback )\n", "title": "", "metadata": ""}
{"_id": "f2ab72c455de8e397ba52bbf6651aba8", "text": "def pylog ( self , * args , * * kwargs ) : printerr ( self . name , args , kwargs , traceback . format_exc ( ) )\n", "title": "", "metadata": ""}
{"_id": "6cedd458824c5acdcd34692394eb1b20", "text": "def string_list_to_array ( l ) : result = javabridge . get_env ( ) . make_object_array ( len ( l ) , javabridge . get_env ( ) . find_class ( \"java/lang/String\" ) ) for i in range ( len ( l ) ) : javabridge . get_env ( ) . set_object_array_element ( result , i , javabridge . get_env ( ) . new_string_utf ( l [ i ] ) ) return result\n", "title": "", "metadata": ""}
{"_id": "504500f36bdbdc19844a64b66bfce7e9", "text": "def vsh ( cmd , * args , * * kw ) : args = '\" \"' . join ( i . replace ( '\"' , r'\\\"' ) for i in args ) easy . sh ( '\"%s\" \"%s\"' % ( venv_bin ( cmd ) , args ) )\n", "title": "", "metadata": ""}
{"_id": "f43ce19f7e6fc1f87f6e727dcb270f4b", "text": "def _get_set ( self , key , operation , create = False ) : return self . _get_by_type ( key , operation , create , b'set' , set ( ) )\n", "title": "", "metadata": ""}
{"_id": "dc8f7894f86d7b8be312f001e5e22b1b", "text": "def calculate_bounding_box_from_image ( im , curr_page ) : xMax , y_max = im . size bounding_box = im . getbbox ( ) # note this uses ltrb convention if not bounding_box : #print(\"\\nWarning: could not calculate a bounding box for this page.\" #      \"\\nAn empty page is assumed.\", file=sys.stderr) bounding_box = ( xMax / 2 , y_max / 2 , xMax / 2 , y_max / 2 ) bounding_box = list ( bounding_box ) # make temporarily mutable # Compensate for reversal of the image y convention versus PDF. bounding_box [ 1 ] = y_max - bounding_box [ 1 ] bounding_box [ 3 ] = y_max - bounding_box [ 3 ] full_page_box = curr_page . mediaBox # should have been set already to chosen box # Convert pixel units to PDF's bp units. convert_x = float ( full_page_box . getUpperRight_x ( ) - full_page_box . getLowerLeft_x ( ) ) / xMax convert_y = float ( full_page_box . getUpperRight_y ( ) - full_page_box . getLowerLeft_y ( ) ) / y_max # Get final box; note conversion to lower-left point, upper-right point format. final_box = [ bounding_box [ 0 ] * convert_x , bounding_box [ 3 ] * convert_y , bounding_box [ 2 ] * convert_x , bounding_box [ 1 ] * convert_y ] return final_box\n", "title": "", "metadata": ""}
{"_id": "a00ae88e47ee23df7564991bb242ab55", "text": "def parse ( self ) : standard_formatters = re . compile ( r'\\((.+?)\\)' , re . IGNORECASE ) return standard_formatters . findall ( self . _fmt )\n", "title": "", "metadata": ""}
{"_id": "9058b467a02038d9daaf811790dea580", "text": "def dictlist_wipe_key ( dict_list : Iterable [ Dict ] , key : str ) -> None : for d in dict_list : d . pop ( key , None )\n", "title": "", "metadata": ""}
{"_id": "e1c72a6569b2fc4f524a2694848ac8c6", "text": "def __init__ ( self ) : self . state = self . STATE_INITIALIZING self . state_start = time . time ( )\n", "title": "", "metadata": ""}
{"_id": "cbecc15fb00cad2727ff40590342005d", "text": "def calculate_single_tanimoto_set_distances ( target : Iterable [ X ] , dict_of_sets : Mapping [ Y , Set [ X ] ] ) -> Mapping [ Y , float ] : target_set = set ( target ) return { k : tanimoto_set_similarity ( target_set , s ) for k , s in dict_of_sets . items ( ) }\n", "title": "", "metadata": ""}
{"_id": "dcb1c81bd6a9f0ef66129ef52b821df5", "text": "def getRect ( self ) : return ( self . x , self . y , self . w , self . h )\n", "title": "", "metadata": ""}
{"_id": "457ebcf84c792396cd9013569aa80b02", "text": "def _delete_local ( self , filename ) : if os . path . exists ( filename ) : os . remove ( filename )\n", "title": "", "metadata": ""}
{"_id": "c7eb0a9ebccc1dc280b0e256b71f489f", "text": "def valid_date ( x : str ) -> bool : try : if x != dt . datetime . strptime ( x , DATE_FORMAT ) . strftime ( DATE_FORMAT ) : raise ValueError return True except ValueError : return False\n", "title": "", "metadata": ""}
{"_id": "80387fa542182d949d7c65ca72fa9c8b", "text": "def safe_int_conv ( number ) : try : return int ( np . array ( number ) . astype ( int , casting = 'safe' ) ) except TypeError : raise ValueError ( 'cannot safely convert {} to integer' . format ( number ) )\n", "title": "", "metadata": ""}
{"_id": "8c268880e6b21883a6236f1574ab5792", "text": "def format_timestamp ( timestamp ) : tz_info = tz . tzutc ( ) return datetime . fromtimestamp ( timestamp , tz = tz_info ) . strftime ( \"%Y-%m-%dT%H:%M:%S.000Z\" )\n", "title": "", "metadata": ""}
{"_id": "8570175ba51d0cf53e24e4a8dc4564fa", "text": "def md_to_text ( content ) : text = None html = markdown . markdown ( content ) if html : text = html_to_text ( content ) return text\n", "title": "", "metadata": ""}
{"_id": "e0582b3a80f2c3aefa859d0c95577b09", "text": "def datetime_iso_format ( date ) : return \"{0:0>4}-{1:0>2}-{2:0>2}T{3:0>2}:{4:0>2}:{5:0>2}Z\" . format ( date . year , date . month , date . day , date . hour , date . minute , date . second )\n", "title": "", "metadata": ""}
{"_id": "a39f42ee90794e6e1ace39444b8cfbae", "text": "def to_bytes ( value ) : vtype = type ( value ) if vtype == bytes or vtype == type ( None ) : return value try : return vtype . encode ( value ) except UnicodeEncodeError : pass return value\n", "title": "", "metadata": ""}
{"_id": "d145e52fac46ea308975ff362af5b6ef", "text": "def robust_int ( v ) : if isinstance ( v , int ) : return v if isinstance ( v , float ) : return int ( v ) v = str ( v ) . replace ( ',' , '' ) if not v : return None return int ( v )\n", "title": "", "metadata": ""}
{"_id": "08030afc1d020140a09c31ebd19751c5", "text": "def read_text_from_file ( path : str ) -> str : with open ( path ) as text_file : content = text_file . read ( ) return content\n", "title": "", "metadata": ""}
{"_id": "a8cdb2d268f01753c6c4506a3514646f", "text": "def normalize_array ( lst ) : np_arr = np . array ( lst ) x_normalized = np_arr / np_arr . max ( axis = 0 ) return list ( x_normalized )\n", "title": "", "metadata": ""}
{"_id": "cef5b6cf6922b9b7492984889dc2d49e", "text": "def server ( port ) : args = [ 'python' , 'manage.py' , 'runserver' ] if port : args . append ( port ) run . main ( args )\n", "title": "", "metadata": ""}
{"_id": "bfba8f7af6328fe8caceae9b4fc680e1", "text": "def get_abi3_suffix ( ) : for suffix , _ , _ in ( s for s in imp . get_suffixes ( ) if s [ 2 ] == imp . C_EXTENSION ) : if '.abi3' in suffix : # Unix return suffix elif suffix == '.pyd' : # Windows return suffix\n", "title": "", "metadata": ""}
{"_id": "d9e97c24c7b9d16cccf0c1025f695b44", "text": "def remove_empty_text ( utterances : List [ Utterance ] ) -> List [ Utterance ] : return [ utter for utter in utterances if utter . text . strip ( ) != \"\" ]\n", "title": "", "metadata": ""}
{"_id": "b5b285e489a8e31ac23d2524cec63ea0", "text": "def do_files_exist ( filenames ) : preexisting = [ tf . io . gfile . exists ( f ) for f in filenames ] return any ( preexisting )\n", "title": "", "metadata": ""}
{"_id": "2246cffd10fb5806358ad5a7480eb247", "text": "def test_kwargs_are_optional ( self ) : with patch ( \"sys.exit\" ) as mock_exit : cli = MicroCLITestCase . T ( \"script_name f3\" . split ( ) ) . run ( ) # kwargs are optional mock_exit . assert_called_with ( 4 )\n", "title": "", "metadata": ""}
{"_id": "f321fd32cd1a998948131e227a5095e2", "text": "def each_img ( img_dir ) : for fname in utils . each_img ( img_dir ) : fname = os . path . join ( img_dir , fname ) yield cv . imread ( fname ) , fname\n", "title": "", "metadata": ""}
{"_id": "67a5c0a0efea52daacd1ed08fa2afa79", "text": "def url_host ( url : str ) -> str : from urllib . parse import urlparse res = urlparse ( url ) return res . netloc . split ( ':' ) [ 0 ] if res . netloc else ''\n", "title": "", "metadata": ""}
{"_id": "a05cce593e32fe979a49a1c1205fc57c", "text": "def Slice ( a , begin , size ) : return np . copy ( a ) [ [ slice ( * tpl ) for tpl in zip ( begin , begin + size ) ] ] ,\n", "title": "", "metadata": ""}
{"_id": "1c1900e59ab8deede6a6bc02398335ec", "text": "def _getTypename ( self , defn ) : return 'REAL' if defn . type . float or 'TIME' in defn . type . name or defn . dntoeu else 'INTEGER'\n", "title": "", "metadata": ""}
{"_id": "b10ee76149658245d1f0367c0fe6c783", "text": "def _sim_fill ( r1 , r2 , imsize ) : bbsize = ( ( max ( r1 [ \"max_x\" ] , r2 [ \"max_x\" ] ) - min ( r1 [ \"min_x\" ] , r2 [ \"min_x\" ] ) ) * ( max ( r1 [ \"max_y\" ] , r2 [ \"max_y\" ] ) - min ( r1 [ \"min_y\" ] , r2 [ \"min_y\" ] ) ) ) return 1.0 - ( bbsize - r1 [ \"size\" ] - r2 [ \"size\" ] ) / imsize\n", "title": "", "metadata": ""}
{"_id": "a150acdaebe4f511edee1ec8d54d0d31", "text": "def remove_series ( self , series ) : if len ( self . all_series ( ) ) == 1 : raise ValueError ( \"Cannot remove last series from %s\" % str ( self ) ) self . _all_series . remove ( series ) series . _chart = None\n", "title": "", "metadata": ""}
{"_id": "1ef466bc1b50b06ed3268e4f3df0520b", "text": "def dtypes ( self ) : return [ ( str ( f . name ) , f . dataType . simpleString ( ) ) for f in self . schema . fields ]\n", "title": "", "metadata": ""}
{"_id": "8cf6b6a7b2128982cb48a27cc2ba33f5", "text": "def cfloat32_array_to_numpy ( cptr , length ) : if isinstance ( cptr , ctypes . POINTER ( ctypes . c_float ) ) : return np . fromiter ( cptr , dtype = np . float32 , count = length ) else : raise RuntimeError ( 'Expected float pointer' )\n", "title": "", "metadata": ""}
{"_id": "ff1f157cf2f8dac17bcd574231229a8f", "text": "def clean_strings ( iterable ) : retval = [ ] for val in iterable : try : retval . append ( val . strip ( ) ) except ( AttributeError ) : retval . append ( val ) return retval\n", "title": "", "metadata": ""}
{"_id": "0e302fd46c34870dc327e32246363ebf", "text": "def coerce ( self , value ) : if isinstance ( value , dict ) : value = [ value ] if not isiterable_notstring ( value ) : value = [ value ] return [ coerce_single_instance ( self . lookup_field , v ) for v in value ]\n", "title": "", "metadata": ""}
{"_id": "ac3f0010dac52a6289601b308f56c6db", "text": "def _rnd_datetime ( self , start , end ) : return self . from_utctimestamp ( random . randint ( int ( self . to_utctimestamp ( start ) ) , int ( self . to_utctimestamp ( end ) ) , ) )\n", "title": "", "metadata": ""}
{"_id": "ed60c46668831e87ba3651237336cee2", "text": "def zfill ( x , width ) : if not isinstance ( x , basestring ) : x = repr ( x ) return x . zfill ( width )\n", "title": "", "metadata": ""}
{"_id": "96d99f6a00dcc756153f64011dc2566d", "text": "def encode_list ( key , list_ ) : # type: (str, Iterable) -> Dict[str, str] if not list_ : return { } return { key : \" \" . join ( str ( i ) for i in list_ ) }\n", "title": "", "metadata": ""}
{"_id": "c50df3b056e25f1044fb4875643a0978", "text": "def normal_noise ( points ) : return np . random . rand ( 1 ) * np . random . randn ( points , 1 ) + random . sample ( [ 2 , - 2 ] , 1 )\n", "title": "", "metadata": ""}
{"_id": "fdf2943f522c3a315c803d8638fec2e0", "text": "def column_names ( self , table ) : table_info = self . execute ( u'PRAGMA table_info(%s)' % quote ( table ) ) return ( column [ 'name' ] for column in table_info )\n", "title": "", "metadata": ""}
{"_id": "e49b30aa6b5861103a798c0d01c93ef9", "text": "def mixedcase ( path ) : words = path . split ( '_' ) return words [ 0 ] + '' . join ( word . title ( ) for word in words [ 1 : ] )\n", "title": "", "metadata": ""}
{"_id": "eda192ddccc8fe36652e312950bb8ac4", "text": "def create_conda_env ( sandbox_dir , env_name , dependencies , options = ( ) ) : env_dir = os . path . join ( sandbox_dir , env_name ) cmdline = [ \"conda\" , \"create\" , \"--yes\" , \"--copy\" , \"--quiet\" , \"-p\" , env_dir ] + list ( options ) + dependencies log . info ( \"Creating conda environment: \" ) log . info ( \"  command line: %s\" , cmdline ) subprocess . check_call ( cmdline , stderr = subprocess . PIPE , stdout = subprocess . PIPE ) log . debug ( \"Environment created\" ) return env_dir , env_name\n", "title": "", "metadata": ""}
{"_id": "91047a1734113e902a1874a29ecc124a", "text": "def add_column ( connection , column ) : stmt = alembic . ddl . base . AddColumn ( _State . table . name , column ) connection . execute ( stmt ) _State . reflect_metadata ( )\n", "title": "", "metadata": ""}
{"_id": "57397a034fb8c136f77d570eefd79e76", "text": "def check_key ( self , key : str ) -> bool : keys = self . get_keys ( ) return key in keys\n", "title": "", "metadata": ""}
{"_id": "e5a5fb0c611bd49b4a5b5ef7c1415b2f", "text": "def debugTreePrint ( node , pfx = \"->\" ) : print pfx , node . item for c in node . children : debugTreePrint ( c , \"  \" + pfx )\n", "title": "", "metadata": ""}
{"_id": "d506b80f1ff2ddeac8ccabdc6ca1ff1c", "text": "def to_distribution_values ( self , values ) : with warnings . catch_warnings ( ) : warnings . simplefilter ( \"ignore\" ) # avoid RuntimeWarning: divide by zero encountered in log return numpy . log ( values )\n", "title": "", "metadata": ""}
{"_id": "cb99f737709560a6d78424da4d04693a", "text": "def OnUpdateFigurePanel ( self , event ) : if self . updating : return self . updating = True self . figure_panel . update ( self . get_figure ( self . code ) ) self . updating = False\n", "title": "", "metadata": ""}
{"_id": "0d8cf9ca1a5252e6040f22d58d221f21", "text": "def GaussianBlur ( X , ksize_width , ksize_height , sigma_x , sigma_y ) : return image_transform ( X , cv2 . GaussianBlur , ksize = ( ksize_width , ksize_height ) , sigmaX = sigma_x , sigmaY = sigma_y )\n", "title": "", "metadata": ""}
{"_id": "c3981bac18e412b967c4575aa82ae85a", "text": "def set_value ( self , value ) : if value : self . setChecked ( Qt . Checked ) else : self . setChecked ( Qt . Unchecked )\n", "title": "", "metadata": ""}
{"_id": "fbf80011e871a38a348b8f473198772a", "text": "def stringify_dict_contents ( dct ) : return { str_if_nested_or_str ( k ) : str_if_nested_or_str ( v ) for k , v in dct . items ( ) }\n", "title": "", "metadata": ""}
{"_id": "58a5df183428ce9c6978beb2e90fa5d5", "text": "def _fullname ( o ) : return o . __module__ + \".\" + o . __name__ if o . __module__ else o . __name__\n", "title": "", "metadata": ""}
{"_id": "e2655edf09695a3e7c2ad99644277058", "text": "def read_corpus ( file_name ) : with io . open ( file_name , encoding = 'utf-8' ) as data_file : return yaml . load ( data_file )\n", "title": "", "metadata": ""}
{"_id": "def619500222b257c34b517f20f898b6", "text": "def is_scalar ( value ) : return np . isscalar ( value ) or ( isinstance ( value , np . ndarray ) and ( len ( np . squeeze ( value ) . shape ) == 0 ) )\n", "title": "", "metadata": ""}
{"_id": "e93311076b4a9ec06118d594a0567573", "text": "def _swap_rows ( self , i , j ) : L = np . eye ( 3 , dtype = 'intc' ) L [ i , i ] = 0 L [ j , j ] = 0 L [ i , j ] = 1 L [ j , i ] = 1 self . _L . append ( L . copy ( ) ) self . _A = np . dot ( L , self . _A )\n", "title": "", "metadata": ""}
{"_id": "a29e3f561f72972adc63fa5bebb81c22", "text": "def test ( ) : from spyder . utils . qthelpers import qapplication app = qapplication ( ) dlg = ProjectDialog ( None ) dlg . show ( ) sys . exit ( app . exec_ ( ) )\n", "title": "", "metadata": ""}
{"_id": "cd67f0008ee07a5b1981e39787e9e84e", "text": "def datetime_to_ms ( dt ) : seconds = calendar . timegm ( dt . utctimetuple ( ) ) return seconds * 1000 + int ( dt . microsecond / 1000 )\n", "title": "", "metadata": ""}
{"_id": "1a7662d20b4bcc214d5ed4e968b6ac3e", "text": "def list_depth ( list_ , func = max , _depth = 0 ) : depth_list = [ list_depth ( item , func = func , _depth = _depth + 1 ) for item in list_ if util_type . is_listlike ( item ) ] if len ( depth_list ) > 0 : return func ( depth_list ) else : return _depth\n", "title": "", "metadata": ""}
{"_id": "b029b81c7f735005e3920040704d9274", "text": "def get_iter_string_reader ( stdin ) : bufsize = 1024 iter_str = ( stdin [ i : i + bufsize ] for i in range ( 0 , len ( stdin ) , bufsize ) ) return get_iter_chunk_reader ( iter_str )\n", "title": "", "metadata": ""}
{"_id": "0ad159bb6e4d513a0ce1327f0dc3a5f4", "text": "def _uniquify ( _list ) : seen = set ( ) result = [ ] for x in _list : if x not in seen : result . append ( x ) seen . add ( x ) return result\n", "title": "", "metadata": ""}
{"_id": "eb8e920d884257e143a71536f08df3b9", "text": "def _go_to_line ( editor , line ) : b = editor . application . current_buffer b . cursor_position = b . document . translate_row_col_to_index ( max ( 0 , int ( line ) - 1 ) , 0 )\n", "title": "", "metadata": ""}
{"_id": "476561afc1b32dbde7a6372b2696b576", "text": "def set_trace ( ) : # https://github.com/nose-devs/nose/blob/master/nose/tools/nontrivial.py pdb . Pdb ( stdout = sys . __stdout__ ) . set_trace ( sys . _getframe ( ) . f_back )\n", "title": "", "metadata": ""}
{"_id": "ecf8cc55d76c6572fd6cfd2980876060", "text": "def normalize ( numbers ) : total = float ( sum ( numbers ) ) return [ n / total for n in numbers ]\n", "title": "", "metadata": ""}
{"_id": "2b4444b9cc3a8057054e89e0baf488f9", "text": "def col_rename ( df , col_name , new_col_name ) : col_list = list ( df . columns ) for index , value in enumerate ( col_list ) : if value == col_name : col_list [ index ] = new_col_name break df . columns = col_list\n", "title": "", "metadata": ""}
{"_id": "1be08f63eb7c7373a8963d45fded8684", "text": "def ip_address_list ( ips ) : # first, try it as a single IP address try : return ip_address ( ips ) except ValueError : pass # then, consider it as an ipaddress.IPv[4|6]Network instance and expand it return list ( ipaddress . ip_network ( u ( ips ) ) . hosts ( ) )\n", "title": "", "metadata": ""}
{"_id": "ca3bfb84e35ec7c10a6cc0c970b30b33", "text": "def adapt_array ( arr ) : out = io . BytesIO ( ) np . save ( out , arr ) , out . seek ( 0 ) return buffer ( out . read ( ) )\n", "title": "", "metadata": ""}
{"_id": "fe7ee3c9cd87e69f971e6e1873c28e66", "text": "def _removeStopwords ( text_list ) : output_list = [ ] for word in text_list : if word . lower ( ) not in _stopwords : output_list . append ( word ) return output_list\n", "title": "", "metadata": ""}
{"_id": "b4b88a4de1a6804c0330a908cef10238", "text": "def ensure_dir_exists ( directory ) : if directory and not os . path . exists ( directory ) : os . makedirs ( directory )\n", "title": "", "metadata": ""}
{"_id": "1528a821d764f8f1d5222aa4c86b76fb", "text": "def is_bool_matrix ( l ) : if isinstance ( l , np . ndarray ) : if l . ndim == 2 and ( l . dtype == bool ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "bdf3e3573bb5b88311a11cba73052662", "text": "def qsize ( self ) : self . mutex . acquire ( ) n = self . _qsize ( ) self . mutex . release ( ) return n\n", "title": "", "metadata": ""}
{"_id": "faced5c157a77d222b39c57dba510df5", "text": "def commajoin_as_strings ( iterable ) : return _ ( u',' ) . join ( ( six . text_type ( i ) for i in iterable ) )\n", "title": "", "metadata": ""}
{"_id": "ae44ccfa01440b90de46761118494c09", "text": "def heappush_max ( heap , item ) : heap . append ( item ) _siftdown_max ( heap , 0 , len ( heap ) - 1 )\n", "title": "", "metadata": ""}
{"_id": "53e32ee39f2add69d06fbcba9dfd7394", "text": "def retry_on_signal ( function ) : while True : try : return function ( ) except EnvironmentError , e : if e . errno != errno . EINTR : raise\n", "title": "", "metadata": ""}
{"_id": "e2d342b53411c31052460a67c3320c70", "text": "def _pdf_at_peak ( self ) : return ( self . peak - self . low ) / ( self . high - self . low )\n", "title": "", "metadata": ""}
{"_id": "9940ba135362848c4c0519f33f9c9884", "text": "def split_comment ( cls , code ) : if '#' not in code : return code #: Remove comments only (leave quoted strings as they are) subf = lambda m : '' if m . group ( 0 ) [ 0 ] == '#' else m . group ( 0 ) return re . sub ( cls . re_pytokens , subf , code )\n", "title": "", "metadata": ""}
{"_id": "949576976d1917a62fd3e03d0b0d020f", "text": "def is_relative_url ( url ) : if url . startswith ( \"#\" ) : return None if url . find ( \"://\" ) > 0 or url . startswith ( \"//\" ) : # either 'http(s)://...' or '//cdn...' and therefore absolute return False return True\n", "title": "", "metadata": ""}
{"_id": "42f0d5a4e4e3ed47be23b92b6534003d", "text": "def insert_many ( self , items ) : return SessionContext . session . execute ( self . insert ( values = [ to_dict ( item , self . c ) for item in items ] ) , ) . rowcount\n", "title": "", "metadata": ""}
{"_id": "d7b4a4a14decfd198dca97f120205af7", "text": "def isarray ( array , test , dim = 2 ) : if dim > 1 : return all ( isarray ( array [ i ] , test , dim - 1 ) for i in range ( len ( array ) ) ) return all ( test ( i ) for i in array )\n", "title": "", "metadata": ""}
{"_id": "e416d9c2fdd539292bc87b3117e39807", "text": "def bytesize ( arr ) : byte_size = np . prod ( arr . shape ) * np . dtype ( arr . dtype ) . itemsize return byte_size\n", "title": "", "metadata": ""}
{"_id": "0649aead5583f612cd654a74ab06e391", "text": "def remove_bad ( string ) : remove = [ ':' , ',' , '(' , ')' , ' ' , '|' , ';' , '\\'' ] for c in remove : string = string . replace ( c , '_' ) return string\n", "title": "", "metadata": ""}
{"_id": "90675184045d2b13eec438747e1a76d1", "text": "def x_values_ref ( self , series ) : top_row = self . series_table_row_offset ( series ) + 2 bottom_row = top_row + len ( series ) - 1 return \"Sheet1!$A$%d:$A$%d\" % ( top_row , bottom_row )\n", "title": "", "metadata": ""}
{"_id": "6d03dbdae014d1cd0bf879b6736c0497", "text": "def random_string ( string_length = 10 ) : random = str ( uuid . uuid4 ( ) ) # Convert UUID format to a Python string. random = random . upper ( ) # Make all characters uppercase. random = random . replace ( \"-\" , \"\" ) # Remove the UUID '-'. return random [ 0 : string_length ]\n", "title": "", "metadata": ""}
{"_id": "802cece9c969a4dca87b6db067bf8e4e", "text": "def from_array ( cls , arr ) : return cls ( ) . with_columns ( [ ( f , arr [ f ] ) for f in arr . dtype . names ] )\n", "title": "", "metadata": ""}
{"_id": "263e264f10f905fc481ac98cb052e6ee", "text": "def HttpResponse401 ( request , template = KEY_AUTH_401_TEMPLATE , content = KEY_AUTH_401_CONTENT , content_type = KEY_AUTH_401_CONTENT_TYPE ) : return AccessFailedResponse ( request , template , content , content_type , status = 401 )\n", "title": "", "metadata": ""}
{"_id": "01426736b14d233f0a327aea44d7671b", "text": "def stop ( self ) : if self . _progressing : self . _progressing = False self . _thread . join ( )\n", "title": "", "metadata": ""}
{"_id": "1b19197971ad8e6bcc597b9a0b1c32c9", "text": "def tick ( self ) : self . current += 1 if self . current == self . factor : sys . stdout . write ( '+' ) sys . stdout . flush ( ) self . current = 0\n", "title": "", "metadata": ""}
{"_id": "d3690e65fb2a9e4678f8e992f0d70078", "text": "def to_dict ( self ) : return { 'schema' : self . schema , 'table' : self . table , 'name' : self . name , 'type' : self . type }\n", "title": "", "metadata": ""}
{"_id": "66229cf1336306e53245156cd9f89a49", "text": "def get_handler ( self , * args , * * options ) : handler = get_internal_wsgi_application ( ) from django . contrib . staticfiles . handlers import StaticFilesHandler return StaticFilesHandler ( handler )\n", "title": "", "metadata": ""}
{"_id": "7124ffe9af70b802dd6725bb8850e92a", "text": "def str_time_to_day_seconds ( time ) : t = str ( time ) . split ( ':' ) seconds = int ( t [ 0 ] ) * 3600 + int ( t [ 1 ] ) * 60 + int ( t [ 2 ] ) return seconds\n", "title": "", "metadata": ""}
{"_id": "478994a3492ed6407f1844bbae905d93", "text": "def restore_scrollbar_position ( self ) : scrollbar_pos = self . get_option ( 'scrollbar_position' , None ) if scrollbar_pos is not None : self . explorer . treewidget . set_scrollbar_position ( scrollbar_pos )\n", "title": "", "metadata": ""}
{"_id": "72773e86f747d5352b0089596a76bf1a", "text": "def strids2ids ( tokens : Iterable [ str ] ) -> List [ int ] : return list ( map ( int , tokens ) )\n", "title": "", "metadata": ""}
{"_id": "1cf8e98291cab1a8941b60d789ec94b6", "text": "def delete_duplicates ( seq ) : seen = set ( ) seen_add = seen . add return [ x for x in seq if not ( x in seen or seen_add ( x ) ) ]\n", "title": "", "metadata": ""}
{"_id": "13b1d3fe72b09169b84dd80b269668b7", "text": "def walk_tree ( root ) : yield root for child in root . children : for el in walk_tree ( child ) : yield el\n", "title": "", "metadata": ""}
{"_id": "e8b3afebd0f39b89066231aa350cdc63", "text": "def make_file_readable ( filename ) : if not os . path . islink ( filename ) : util . set_mode ( filename , stat . S_IRUSR )\n", "title": "", "metadata": ""}
{"_id": "f001cdb06f03b5d9bb5f4259b1c9306d", "text": "def _write_color_colorama ( fp , text , color ) : foreground , background , style = get_win_color ( color ) colorama . set_console ( foreground = foreground , background = background , style = style ) fp . write ( text ) colorama . reset_console ( )\n", "title": "", "metadata": ""}
{"_id": "2701e5a9a40477630233e29db0428abd", "text": "def get_method_from_module ( module_path , method_name ) : top_module = __import__ ( module_path ) module = top_module # we tunnel down until we find the module we want for submodule_name in module_path . split ( '.' ) [ 1 : ] : module = getattr ( module , submodule_name ) assert hasattr ( module , method_name ) , \"unable to find method {0} from module {1}. does the method exist?\" . format ( method_name , module_path ) return getattr ( module , method_name )\n", "title": "", "metadata": ""}
{"_id": "2e22a4cab88bed72538194753e1f8cf6", "text": "def _from_bytes ( bytes , byteorder = \"big\" , signed = False ) : return int . from_bytes ( bytes , byteorder = byteorder , signed = signed )\n", "title": "", "metadata": ""}
{"_id": "6da7a4f13ea4b9672b2fd5d0b1a8a8a1", "text": "def is_datetime_like ( dtype ) : return ( np . issubdtype ( dtype , np . datetime64 ) or np . issubdtype ( dtype , np . timedelta64 ) )\n", "title": "", "metadata": ""}
{"_id": "8dc8a3fbc46ebcfc8e950872ada8a56c", "text": "def _get_os_environ_dict ( keys ) : return { k : os . environ . get ( k , _UNDEFINED ) for k in keys }\n", "title": "", "metadata": ""}
{"_id": "5984c7dceacd86ba2c63fdf10888732c", "text": "def get_image_dimension ( self , url ) : w_h = ( None , None ) try : if url . startswith ( '//' ) : url = 'http:' + url data = requests . get ( url ) . content im = Image . open ( BytesIO ( data ) ) w_h = im . size except Exception : logger . warning ( \"Error getting image size {}\" . format ( url ) , exc_info = True ) return w_h\n", "title": "", "metadata": ""}
{"_id": "0cd31f47f6c3737b606d8ca01e607943", "text": "def _get_config_or_default ( self , key , default , as_type = lambda x : x ) : if self . main_config . has_option ( self . main_section , key ) : return as_type ( self . main_config . get ( self . main_section , key ) ) return default\n", "title": "", "metadata": ""}
{"_id": "915cd83e9d0548e8584d4f19f5ad907f", "text": "def set_color ( self , fg = None , bg = None , intensify = False , target = sys . stdout ) : raise NotImplementedError\n", "title": "", "metadata": ""}
{"_id": "5567c7b268bf52a8879e7d2d9980b833", "text": "def write_str2file ( pathname , astr ) : fname = pathname fhandle = open ( fname , 'wb' ) fhandle . write ( astr ) fhandle . close ( )\n", "title": "", "metadata": ""}
{"_id": "75471c2447671e3ae941120df1cb70b0", "text": "def sorted ( self ) : for i in range ( 0 , self . tabs . tabBar ( ) . count ( ) - 1 ) : if ( self . tabs . tabBar ( ) . tabText ( i ) > self . tabs . tabBar ( ) . tabText ( i + 1 ) ) : return False return True\n", "title": "", "metadata": ""}
{"_id": "253c1a2da53729b67f747a7f121365b0", "text": "def decode_example ( self , example ) : img = tf . image . decode_image ( example , channels = self . _shape [ - 1 ] , dtype = tf . uint8 ) img . set_shape ( self . _shape ) return img\n", "title": "", "metadata": ""}
{"_id": "db33dac83c927247c9fb395f6e54b422", "text": "def prox_zero ( X , step ) : return np . zeros ( X . shape , dtype = X . dtype )\n", "title": "", "metadata": ""}
{"_id": "d0c5377d19ce2fb412efdf8277426757", "text": "def get_parent_dir ( name ) : parent_dir = os . path . dirname ( os . path . dirname ( name ) ) if parent_dir : return parent_dir return os . path . abspath ( '.' )\n", "title": "", "metadata": ""}
{"_id": "b1e6eebc0cbfb55a4ce055dc9307550f", "text": "def flatten_array ( grid ) : grid = [ grid [ i ] [ j ] for i in range ( len ( grid ) ) for j in range ( len ( grid [ i ] ) ) ] while type ( grid [ 0 ] ) is list : grid = flatten_array ( grid ) return grid\n", "title": "", "metadata": ""}
{"_id": "56dcb4f8f0508da10cebf1b521befb92", "text": "def get ( url ) : response = urllib . request . urlopen ( url ) data = response . read ( ) data = data . decode ( \"utf-8\" ) data = json . loads ( data ) return data\n", "title": "", "metadata": ""}
{"_id": "d949ba4cb29180434a89fe7ea73a5d0f", "text": "def compile ( expr , params = None ) : from ibis . sql . alchemy import to_sqlalchemy return to_sqlalchemy ( expr , dialect . make_context ( params = params ) )\n", "title": "", "metadata": ""}
{"_id": "cea9041cb19750da2f83e2a3abfe4f97", "text": "def _gevent_patch ( ) : try : assert gevent assert grequests except NameError : logger . warn ( 'gevent not exist, fallback to multiprocess...' ) return MULTITHREAD else : monkey . patch_all ( ) # Must patch before get_photos_info return GEVENT\n", "title": "", "metadata": ""}
{"_id": "9688737cfc1a7a406bcbce7d3444a600", "text": "def has_synset ( word : str ) -> list : return wn . synsets ( lemmatize ( word , neverstem = True ) )\n", "title": "", "metadata": ""}
{"_id": "68aeb0fdabc7fcc35f670a926b8882c8", "text": "def get_longest_orf ( orfs ) : sorted_orf = sorted ( orfs , key = lambda x : len ( x [ 'sequence' ] ) , reverse = True ) [ 0 ] return sorted_orf\n", "title": "", "metadata": ""}
{"_id": "ace8582ddaf780ac1d80071fd81dc5ec", "text": "def get_git_branch ( git_path = 'git' ) : branch_match = call ( ( git_path , 'rev-parse' , '--symbolic-full-name' , 'HEAD' ) ) if branch_match == \"HEAD\" : return None else : return os . path . basename ( branch_match )\n", "title": "", "metadata": ""}
{"_id": "38c4d5631e7a612991aed55e0426244a", "text": "def house_explosions ( ) : chart = PieChart2D ( int ( settings . width * 1.7 ) , settings . height ) chart . add_data ( [ 10 , 10 , 30 , 200 ] ) chart . set_pie_labels ( [ 'Budding Chemists' , 'Propane issues' , 'Meth Labs' , 'Attempts to escape morgage' , ] ) chart . download ( 'pie-house-explosions.png' )\n", "title": "", "metadata": ""}
{"_id": "070fe1eaad46bb0c9bca539c8bacca6d", "text": "def do_exit ( self , arg ) : if self . current : self . current . close ( ) self . resource_manager . close ( ) del self . resource_manager return True\n", "title": "", "metadata": ""}
{"_id": "b083268d9f62bc82d30da83eb26d6d5f", "text": "def save ( self ) : if self . path : self . _saveState ( self . path ) else : self . saveAs ( )\n", "title": "", "metadata": ""}
{"_id": "0017e85eb3f7b958fe30fb3137246014", "text": "def one_hot ( x , size , dtype = np . float32 ) : return np . array ( x [ ... , np . newaxis ] == np . arange ( size ) , dtype )\n", "title": "", "metadata": ""}
{"_id": "b995290844ef4e9f543f3da3b4ea57aa", "text": "def truncate ( value : Decimal , n_digits : int ) -> Decimal : return Decimal ( math . trunc ( value * ( 10 ** n_digits ) ) ) / ( 10 ** n_digits )\n", "title": "", "metadata": ""}
{"_id": "50c080ed312a185ce85d7fddfc290f3e", "text": "def close ( self ) : if self . _subprocess is not None : os . killpg ( self . _subprocess . pid , signal . SIGTERM ) self . _subprocess = None\n", "title": "", "metadata": ""}
{"_id": "8e80a64a7ecb9f17021c00ec9e9c6a2c", "text": "def isnumber ( * args ) : return all ( map ( lambda c : isinstance ( c , int ) or isinstance ( c , float ) , args ) )\n", "title": "", "metadata": ""}
{"_id": "db9146f1c50ebbf51cb3807256e1c427", "text": "def raise_figure_window ( f = 0 ) : if _fun . is_a_number ( f ) : f = _pylab . figure ( f ) f . canvas . manager . window . raise_ ( )\n", "title": "", "metadata": ""}
{"_id": "77231b076cd1df3355de02c219039481", "text": "def _check_elements_equal ( lst ) : assert isinstance ( lst , list ) , \"Input value must be a list.\" return not lst or lst . count ( lst [ 0 ] ) == len ( lst )\n", "title": "", "metadata": ""}
{"_id": "9ac15b9fd8055a5415420484f4b569ae", "text": "def encode ( strs ) : res = '' for string in strs . split ( ) : res += str ( len ( string ) ) + \":\" + string return res\n", "title": "", "metadata": ""}
{"_id": "d17915ebf6d2ad283a06bf21451ea777", "text": "def import_public_rsa_key_from_file ( filename ) : with open ( filename , \"rb\" ) as key_file : public_key = serialization . load_pem_public_key ( key_file . read ( ) , backend = default_backend ( ) ) return public_key\n", "title": "", "metadata": ""}
{"_id": "71fd1460ad295af1ce16f96374af5a44", "text": "def get_as_string ( self , s3_path , encoding = 'utf-8' ) : content = self . get_as_bytes ( s3_path ) return content . decode ( encoding )\n", "title": "", "metadata": ""}
{"_id": "35b9eb19f6cb2eb7e90e47b15574fb5e", "text": "def wrap_count ( method ) : number = 0 while hasattr ( method , '__aspects_orig' ) : number += 1 method = method . __aspects_orig return number\n", "title": "", "metadata": ""}
{"_id": "59b5b1cfd2301d712405a74ce9e58abd", "text": "def write_fits ( self , fitsfile ) : tab = self . create_table ( ) hdu_data = fits . table_to_hdu ( tab ) hdus = [ fits . PrimaryHDU ( ) , hdu_data ] fits_utils . write_hdus ( hdus , fitsfile )\n", "title": "", "metadata": ""}
{"_id": "e6f7bb15d0b09594aa530302d395dbf7", "text": "def datetime_to_timestamp ( dt ) : delta = dt - datetime . utcfromtimestamp ( 0 ) return delta . seconds + delta . days * 24 * 3600\n", "title": "", "metadata": ""}
{"_id": "5cfd9772ecf07225bc929734b0010e42", "text": "def pop ( self , index = - 1 ) : value = self . _list . pop ( index ) del self . _dict [ value ] return value\n", "title": "", "metadata": ""}
{"_id": "022f3ff9726887fba4eb828f5a6f6b2c", "text": "def load_library ( version ) : check_version ( version ) module_name = SUPPORTED_LIBRARIES [ version ] lib = sys . modules . get ( module_name ) if lib is None : lib = importlib . import_module ( module_name ) return lib\n", "title": "", "metadata": ""}
{"_id": "889187f625cf063b245130e3127e95a1", "text": "def _unzip_handle ( handle ) : if isinstance ( handle , basestring ) : handle = _gzip_open_filename ( handle ) else : handle = _gzip_open_handle ( handle ) return handle\n", "title": "", "metadata": ""}
{"_id": "126fd19ab1462cf04e0a2adac3c69b99", "text": "def onchange ( self , value ) : log . debug ( 'combo box. selected %s' % value ) self . select_by_value ( value ) return ( value , )\n", "title": "", "metadata": ""}
{"_id": "d329490de3e84513b91672176f069388", "text": "def stddev ( values , meanval = None ) : #from AI: A Modern Appproach if meanval == None : meanval = mean ( values ) return math . sqrt ( sum ( [ ( x - meanval ) ** 2 for x in values ] ) / ( len ( values ) - 1 ) )\n", "title": "", "metadata": ""}
{"_id": "63d96270bdfcc5f30a20e0162f7e66b1", "text": "def timespan ( start_time ) : timespan = datetime . datetime . now ( ) - start_time timespan_ms = timespan . total_seconds ( ) * 1000 return timespan_ms\n", "title": "", "metadata": ""}
{"_id": "09a03775bec573371f2c4095a727da40", "text": "def add ( self , entity ) : result = self . _http_req ( 'connections' , method = 'POST' , payload = entity ) status = result [ 'status' ] if not status == 201 : raise ServiceRegistryError ( status , \"Couldn't add entity\" ) self . debug ( 0x01 , result ) return result [ 'decoded' ]\n", "title": "", "metadata": ""}
{"_id": "05e8294e6e4b612d65168bf25b57317c", "text": "def MultiArgMax ( x ) : m = x . max ( ) return ( i for i , v in enumerate ( x ) if v == m )\n", "title": "", "metadata": ""}
{"_id": "0e4367609f27717269c25a929de0ad33", "text": "def _valid_other_type ( x , types ) : return all ( any ( isinstance ( el , t ) for t in types ) for el in np . ravel ( x ) )\n", "title": "", "metadata": ""}
{"_id": "e43545d6c302717853875e858167aea2", "text": "def is_any_type_set ( sett : Set [ Type ] ) -> bool : return len ( sett ) == 1 and is_any_type ( min ( sett ) )\n", "title": "", "metadata": ""}
{"_id": "7db3d0f04ffacf249d98a99425184c6f", "text": "def numpy_to_yaml ( representer : Representer , data : np . ndarray ) -> Sequence [ Any ] : return representer . represent_sequence ( \"!numpy_array\" , data . tolist ( ) )\n", "title": "", "metadata": ""}
{"_id": "571ca8d7ef7097c4b453437250afaab9", "text": "def covariance ( self , pt0 , pt1 ) : x = np . array ( [ pt0 [ 0 ] , pt1 [ 0 ] ] ) y = np . array ( [ pt0 [ 1 ] , pt1 [ 1 ] ] ) names = [ \"n1\" , \"n2\" ] return self . covariance_matrix ( x , y , names = names ) . x [ 0 , 1 ]\n", "title": "", "metadata": ""}
{"_id": "876c60b8c9ee0c9fd462acb7801d0ddf", "text": "def assert_looks_like ( first , second , msg = None ) : first = _re . sub ( \"\\s+\" , \" \" , first . strip ( ) ) second = _re . sub ( \"\\s+\" , \" \" , second . strip ( ) ) if first != second : raise AssertionError ( msg or \"%r does not look like %r\" % ( first , second ) )\n", "title": "", "metadata": ""}
{"_id": "6461483c42a21d87a1e19e505552f183", "text": "def check ( modname ) : for dependency in DEPENDENCIES : if dependency . modname == modname : return dependency . check ( ) else : raise RuntimeError ( \"Unkwown dependency %s\" % modname )\n", "title": "", "metadata": ""}
{"_id": "57cc9fcd2fa8225407798cbb17de5072", "text": "def dump_json ( obj ) : return simplejson . dumps ( obj , ignore_nan = True , default = json_util . default )\n", "title": "", "metadata": ""}
{"_id": "62159fac679ecc034aef002c27e59610", "text": "def _if ( ctx , logical_test , value_if_true = 0 , value_if_false = False ) : return value_if_true if conversions . to_boolean ( logical_test , ctx ) else value_if_false\n", "title": "", "metadata": ""}
{"_id": "202971f238be9db9137abf07b7ca5d05", "text": "def ReadManyFromPath ( filepath ) : with io . open ( filepath , mode = \"r\" , encoding = \"utf-8\" ) as filedesc : return ReadManyFromFile ( filedesc )\n", "title": "", "metadata": ""}
{"_id": "0e01bc565ad891bbf741b39a89b3ea69", "text": "def _round_half_hour ( record ) : k = record . datetime + timedelta ( minutes = - ( record . datetime . minute % 30 ) ) return datetime ( k . year , k . month , k . day , k . hour , k . minute , 0 )\n", "title": "", "metadata": ""}
{"_id": "eb0999f4089bb700dfd898865597932f", "text": "def detach_all ( self ) : self . detach_all_classes ( ) self . objects . clear ( ) self . index . clear ( ) self . _keepalive [ : ] = [ ]\n", "title": "", "metadata": ""}
{"_id": "a23210c77795a72d957fd61d171c5260", "text": "def task_property_present_predicate ( service , task , prop ) : try : response = get_service_task ( service , task ) except Exception as e : pass return ( response is not None ) and ( prop in response )\n", "title": "", "metadata": ""}
{"_id": "5cdd870fb1df1f55cf5ca038b1dfefec", "text": "def _split ( string , splitters ) : part = '' for character in string : if character in splitters : yield part part = '' else : part += character yield part\n", "title": "", "metadata": ""}
{"_id": "515ddc3d1ea44e0dc2cb1566e6a59411", "text": "def empty ( self , start = None , stop = None ) : self . set ( NOT_SET , start = start , stop = stop )\n", "title": "", "metadata": ""}
{"_id": "2f91bb9b75e349ccc0dc171dcd579926", "text": "def convert_array ( array ) : out = io . BytesIO ( array ) out . seek ( 0 ) return np . load ( out )\n", "title": "", "metadata": ""}
{"_id": "f92d2cba4d986f8e7de168688e9df115", "text": "def _parallel_compare_helper ( class_obj , pairs , x , x_link = None ) : return class_obj . _compute ( pairs , x , x_link )\n", "title": "", "metadata": ""}
{"_id": "3c71d1583acf8dfb7bad776b617c80d4", "text": "def string_input ( prompt = '' ) : v = sys . version [ 0 ] if v == '3' : return input ( prompt ) else : return raw_input ( prompt )\n", "title": "", "metadata": ""}
{"_id": "057fb7d1c71d2d1e47a421f3467997a2", "text": "def build_parser ( ) : parser = argparse . ArgumentParser ( \"Release packages to pypi\" ) parser . add_argument ( '--check' , '-c' , action = \"store_true\" , help = \"Do a dry run without uploading\" ) parser . add_argument ( 'component' , help = \"The component to release as component-version\" ) return parser\n", "title": "", "metadata": ""}
{"_id": "b88742e36a9ccdfbc3bfcf72212a72cb", "text": "def _get_printable_columns ( columns , row ) : if not columns : return row # Extract the column values, in the order specified. return tuple ( row [ c ] for c in columns )\n", "title": "", "metadata": ""}
{"_id": "77b9ef98c491691fccfd7f38f7e9aff2", "text": "def get_last_day_of_month ( t : datetime ) -> int : tn = t + timedelta ( days = 32 ) tn = datetime ( year = tn . year , month = tn . month , day = 1 ) tt = tn - timedelta ( hours = 1 ) return tt . day\n", "title": "", "metadata": ""}
{"_id": "84804836e653c756b886ae77de351d8f", "text": "def flatten ( nested ) : flat_return = list ( ) def __inner_flat ( nested , flat ) : for i in nested : __inner_flat ( i , flat ) if isinstance ( i , list ) else flat . append ( i ) return flat __inner_flat ( nested , flat_return ) return flat_return\n", "title": "", "metadata": ""}
{"_id": "338a0c22ff79b59e82998f1fb7550136", "text": "def _request ( self , method : str , endpoint : str , params : dict = None , data : dict = None , headers : dict = None ) -> dict :\n", "title": "", "metadata": ""}
{"_id": "37ed9cf5cce64a2c0c80598c88bdd36c", "text": "def matrix_to_gl ( matrix ) : matrix = np . asanyarray ( matrix , dtype = np . float64 ) if matrix . shape != ( 4 , 4 ) : raise ValueError ( 'matrix must be (4,4)!' ) # switch to column major and flatten to (16,) column = matrix . T . flatten ( ) # convert to GLfloat glmatrix = ( gl . GLfloat * 16 ) ( * column ) return glmatrix\n", "title": "", "metadata": ""}
{"_id": "141295c274a4a28c353e158ef6a88ec4", "text": "def remove_legend ( ax = None ) : from pylab import gca , draw if ax is None : ax = gca ( ) ax . legend_ = None draw ( )\n", "title": "", "metadata": ""}
{"_id": "3c750300ffe8ac07cc8fae33d43da943", "text": "def _parse_tuple_string ( argument ) : if isinstance ( argument , str ) : return tuple ( int ( p . strip ( ) ) for p in argument . split ( ',' ) ) return argument\n", "title": "", "metadata": ""}
{"_id": "96bd9fe268899a386e6a313cbcf7da5f", "text": "def gaussian_distribution ( mean , stdev , num_pts = 50 ) : xstart = mean - ( 4.0 * stdev ) xend = mean + ( 4.0 * stdev ) x = np . linspace ( xstart , xend , num_pts ) y = ( 1.0 / np . sqrt ( 2.0 * np . pi * stdev * stdev ) ) * np . exp ( - 1.0 * ( ( x - mean ) ** 2 ) / ( 2.0 * stdev * stdev ) ) return x , y\n", "title": "", "metadata": ""}
{"_id": "663a0217760ff5f53364f97d9b99de72", "text": "def trigger ( self , target : str , trigger : str , parameters : Dict [ str , Any ] = { } ) : pass\n", "title": "", "metadata": ""}
{"_id": "f11eacfe981f46723bfb8294d8ba77f5", "text": "def string_presenter ( self , dumper , data ) : if '\\n' in data : return dumper . represent_scalar ( 'tag:yaml.org,2002:str' , data , style = '|' ) else : return dumper . represent_scalar ( 'tag:yaml.org,2002:str' , data )\n", "title": "", "metadata": ""}
{"_id": "14cd15f1d4d8373d22a0847f68d40ed2", "text": "def _callable_once ( func ) : def once ( * args , * * kwargs ) : if not once . called : once . called = True return func ( * args , * * kwargs ) once . called = False return once\n", "title": "", "metadata": ""}
{"_id": "3b74731d339770ae404ea60d9cdc5db4", "text": "def _text_to_graphiz ( self , text ) : dot = Source ( text , format = 'svg' ) return dot . pipe ( ) . decode ( 'utf-8' )\n", "title": "", "metadata": ""}
{"_id": "fd79fb90263c37588bdbd1ddeed698e9", "text": "def next ( self ) : item = six . next ( self . _item_iter ) result = self . _item_to_value ( self . _parent , item ) # Since we've successfully got the next value from the # iterator, we update the number of remaining. self . _remaining -= 1 return result\n", "title": "", "metadata": ""}
{"_id": "219d3e50b9048a2ee1fb08be054a4cb5", "text": "def __call__ ( self , * args , * * kwargs ) : kwargs [ \"mongokat_collection\" ] = self return self . document_class ( * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "140e19dbec9685e134aa9fd554eff0be", "text": "def region_from_segment ( image , segment ) : x , y , w , h = segment return image [ y : y + h , x : x + w ]\n", "title": "", "metadata": ""}
{"_id": "f8056666e49ac6960a0d8f7b3134cec4", "text": "def fixed ( ctx , number , decimals = 2 , no_commas = False ) : value = _round ( ctx , number , decimals ) format_str = '{:f}' if no_commas else '{:,f}' return format_str . format ( value )\n", "title": "", "metadata": ""}
{"_id": "40967f8a0f3d012a36eaec2f9b1c8e48", "text": "def decode ( self , bytes , raw = False ) : return struct . unpack ( self . format , buffer ( bytes ) ) [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "3ecb521d0d4ac0bff7c9296529dec8af", "text": "def url_to_image ( url ) : r = requests . get ( url ) image = StringIO ( r . content ) return image\n", "title": "", "metadata": ""}
{"_id": "758fd6eac78d43b5448a278543ade82f", "text": "def convolve_gaussian_2d ( image , gaussian_kernel_1d ) : result = scipy . ndimage . filters . correlate1d ( image , gaussian_kernel_1d , axis = 0 ) result = scipy . ndimage . filters . correlate1d ( result , gaussian_kernel_1d , axis = 1 ) return result\n", "title": "", "metadata": ""}
{"_id": "dcef5443058e65f87c35014b0b70975f", "text": "def assert_called_once ( _mock_self ) : self = _mock_self if not self . call_count == 1 : msg = ( \"Expected '%s' to have been called once. Called %s times.\" % ( self . _mock_name or 'mock' , self . call_count ) ) raise AssertionError ( msg )\n", "title": "", "metadata": ""}
{"_id": "368d62fb88efcf21cd1b1620b33d8330", "text": "def l2_norm ( arr ) : arr = np . asarray ( arr ) return np . sqrt ( np . dot ( arr . ravel ( ) . squeeze ( ) , arr . ravel ( ) . squeeze ( ) ) )\n", "title": "", "metadata": ""}
{"_id": "597aea40acc5662cb74164af2e354e6d", "text": "def lock ( self , block = True ) : self . _locked = True return self . _lock . acquire ( block )\n", "title": "", "metadata": ""}
{"_id": "10bd856c6f6b57e074b9f0c6b7fad436", "text": "def get_file_md5sum ( path ) : with open ( path , 'rb' ) as fh : h = str ( hashlib . md5 ( fh . read ( ) ) . hexdigest ( ) ) return h\n", "title": "", "metadata": ""}
{"_id": "0e68fec1e620f1362333641300c42ca7", "text": "def pointer ( self ) : return ctypes . cast ( ctypes . pointer ( ctypes . c_uint8 . from_buffer ( self . mapping , 0 ) ) , ctypes . c_void_p )\n", "title": "", "metadata": ""}
{"_id": "c4dbcd3f2ee5eadfdc1dfa50d5854fb0", "text": "def duplicated_rows ( df , col_name ) : _check_cols ( df , [ col_name ] ) dups = df [ pd . notnull ( df [ col_name ] ) & df . duplicated ( subset = [ col_name ] ) ] return dups\n", "title": "", "metadata": ""}
{"_id": "92870840ed12d6ae418e6088f849610c", "text": "def validate_email ( email ) : from django . core . validators import validate_email from django . core . exceptions import ValidationError try : validate_email ( email ) return True except ValidationError : return False\n", "title": "", "metadata": ""}
{"_id": "e5776e1cf22f3f4d7b5ea045dcea049e", "text": "def _loadf ( ins ) : output = _float_oper ( ins . quad [ 2 ] ) output . extend ( _fpush ( ) ) return output\n", "title": "", "metadata": ""}
{"_id": "13716a9d613e34564e2aa9673647009e", "text": "def create_object ( cls , members ) : obj = cls . __new__ ( cls ) obj . __dict__ = members return obj\n", "title": "", "metadata": ""}
{"_id": "864906c7e55e0f404a4ea7cdffbb035e", "text": "def normalize_value ( text ) : result = text . replace ( '\\n' , ' ' ) result = re . subn ( '[ ]{2,}' , ' ' , result ) [ 0 ] return result\n", "title": "", "metadata": ""}
{"_id": "cb32c9f70985e9b959c6535586b115df", "text": "def other_ind ( self ) : return np . full ( self . n_min , self . size - 1 , dtype = np . int )\n", "title": "", "metadata": ""}
{"_id": "5aef22905be1a88e4499e03c0492c82c", "text": "def split_multiline ( value ) : return [ element for element in ( line . strip ( ) for line in value . split ( '\\n' ) ) if element ]\n", "title": "", "metadata": ""}
{"_id": "927da92ad2d72223977a723f77f19828", "text": "def remove_namespaces ( root ) : for elem in root . getiterator ( ) : if not hasattr ( elem . tag , 'find' ) : continue i = elem . tag . find ( '}' ) if i >= 0 : elem . tag = elem . tag [ i + 1 : ] objectify . deannotate ( root , cleanup_namespaces = True )\n", "title": "", "metadata": ""}
{"_id": "a1c80d066fc444d5b34dc5b16af5b2b8", "text": "def end_block ( self ) : self . current_indent -= 1 # If we did not add a new line automatically yet, now it's the time! if not self . auto_added_line : self . writeln ( ) self . auto_added_line = True\n", "title": "", "metadata": ""}
{"_id": "d09456ac46a9f2dfa2c0f19232376c78", "text": "def var_dump ( * obs ) : i = 0 for x in obs : str = var_dump_output ( x , 0 , '  ' , '\\n' , True ) print ( str . strip ( ) ) #dump(x, 0, i, '', object) i += 1\n", "title": "", "metadata": ""}
{"_id": "f77a8ee0ea731c0f64ee647df9d6fe83", "text": "def __print_table ( table ) : col_width = [ max ( len ( x ) for x in col ) for col in zip ( * table ) ] print ( \"| \" + \" | \" . join ( \"{:{}}\" . format ( x , col_width [ i ] ) for i , x in enumerate ( table [ 0 ] ) ) + \" |\" ) print ( \"| \" + \" | \" . join ( \"{:{}}\" . format ( '-' * col_width [ i ] , col_width [ i ] ) for i , x in enumerate ( table [ 0 ] ) ) + \" |\" ) for line in table [ 1 : ] : print ( \"| \" + \" | \" . join ( \"{:{}}\" . format ( x , col_width [ i ] ) for i , x in enumerate ( line ) ) + \" |\" )\n", "title": "", "metadata": ""}
{"_id": "399607f54e73109278bff6882f3ebb4a", "text": "def get_domain ( url ) : parse_result = urlparse ( url ) domain = \"{schema}://{netloc}\" . format ( schema = parse_result . scheme , netloc = parse_result . netloc ) return domain\n", "title": "", "metadata": ""}
{"_id": "cbdc6f01be5e68af95a52234599a9252", "text": "def forward ( self , step ) : x = self . pos_x + math . cos ( math . radians ( self . rotation ) ) * step y = self . pos_y + math . sin ( math . radians ( self . rotation ) ) * step prev_brush_state = self . brush_on self . brush_on = True self . move ( x , y ) self . brush_on = prev_brush_state\n", "title": "", "metadata": ""}
{"_id": "4c49a7e80fe505a26856811657753256", "text": "def get_host_power_status ( self ) : sushy_system = self . _get_sushy_system ( PROLIANT_SYSTEM_ID ) return GET_POWER_STATE_MAP . get ( sushy_system . power_state )\n", "title": "", "metadata": ""}
{"_id": "d64d27f5fdcf6647b0ccb563159ec85a", "text": "async def sysinfo ( dev : Device ) : click . echo ( await dev . get_system_info ( ) ) click . echo ( await dev . get_interface_information ( ) )\n", "title": "", "metadata": ""}
{"_id": "937d79641c3ea6300f54cf9e1a551e91", "text": "def get_python ( self ) : if self . multiselect : return super ( MultiSelectField , self ) . get_python ( ) return self . _get ( )\n", "title": "", "metadata": ""}
{"_id": "85d0ceb73eaa82eb6cc08c3432d907e3", "text": "def to_comment ( value ) : if value is None : return if len ( value . split ( '\\n' ) ) == 1 : return \"* \" + value else : return '\\n' . join ( [ ' * ' + l for l in value . split ( '\\n' ) [ : - 1 ] ] )\n", "title": "", "metadata": ""}
{"_id": "71166539b018efd0b2e9abb3c4366e99", "text": "def get_incomplete_path ( filename ) : random_suffix = \"\" . join ( random . choice ( string . ascii_uppercase + string . digits ) for _ in range ( 6 ) ) return filename + \".incomplete\" + random_suffix\n", "title": "", "metadata": ""}
{"_id": "30a94f583973e3bbc240d7b511c3ec0a", "text": "def dir_exists ( self ) : r = requests . request ( self . method if self . method else 'HEAD' , self . url , * * self . storage_args ) try : r . raise_for_status ( ) except Exception : return False return True\n", "title": "", "metadata": ""}
{"_id": "eab010ce33f914072ad3b57524942c7a", "text": "def dedupe_list ( seq ) : seen = set ( ) return [ x for x in seq if not ( x in seen or seen . add ( x ) ) ]\n", "title": "", "metadata": ""}
{"_id": "7414232c6c8ff47612e2112082c938ce", "text": "def _validate_authority_uri_abs_path ( host , path ) : if len ( host ) > 0 and len ( path ) > 0 and not path . startswith ( \"/\" ) : raise ValueError ( \"Path in a URL with authority \" \"should start with a slash ('/') if set\" )\n", "title": "", "metadata": ""}
{"_id": "31dc93e45a81b3c76d05053c64975332", "text": "def cleanup ( self ) : for instance in self . context : del ( instance ) for plugin in self . plugins : del ( plugin )\n", "title": "", "metadata": ""}
{"_id": "5e3e278c2843bced2bddb0d76de02aea", "text": "def are_in_interval ( s , l , r , border = 'included' ) : return numpy . all ( [ IntensityRangeStandardization . is_in_interval ( x , l , r , border ) for x in s ] )\n", "title": "", "metadata": ""}
{"_id": "45aca677f29b27655d2e4612f8617f83", "text": "def do_forceescape ( value ) : if hasattr ( value , '__html__' ) : value = value . __html__ ( ) return escape ( unicode ( value ) )\n", "title": "", "metadata": ""}
{"_id": "5815e275e7337d854b7dd6a4fa9e06be", "text": "def log_loss ( preds , labels ) : log_likelihood = np . sum ( labels * np . log ( preds ) ) / len ( preds ) return - log_likelihood\n", "title": "", "metadata": ""}
{"_id": "fdcc632c93e5384bd7fcd47ef9df6a6e", "text": "def cor ( y_true , y_pred ) : y_true , y_pred = _mask_nan ( y_true , y_pred ) return np . corrcoef ( y_true , y_pred ) [ 0 , 1 ]\n", "title": "", "metadata": ""}
{"_id": "3b62966801b0329f82e0d62115de3f34", "text": "def pickle_save ( thing , fname ) : pickle . dump ( thing , open ( fname , \"wb\" ) , pickle . HIGHEST_PROTOCOL ) return thing\n", "title": "", "metadata": ""}
{"_id": "89d3b2b5e6039b195c67390df608378f", "text": "def calculate_size ( name , function ) : data_size = 0 data_size += calculate_size_str ( name ) data_size += calculate_size_data ( function ) return data_size\n", "title": "", "metadata": ""}
{"_id": "24a279db97e133fbfbb31c1a8d4a9faf", "text": "def hline ( self , x , y , width , color ) : self . rect ( x , y , width , 1 , color , fill = True )\n", "title": "", "metadata": ""}
{"_id": "1d9650880fc4c14ba8dd96a0a2a38da4", "text": "def should_skip_logging ( func ) : disabled = strtobool ( request . headers . get ( \"x-request-nolog\" , \"false\" ) ) return disabled or getattr ( func , SKIP_LOGGING , False )\n", "title": "", "metadata": ""}
{"_id": "349d76601e284622c65b2f2af23e6bcc", "text": "def strip_accents ( text ) : normalized_str = unicodedata . normalize ( 'NFD' , text ) return '' . join ( [ c for c in normalized_str if unicodedata . category ( c ) != 'Mn' ] )\n", "title": "", "metadata": ""}
{"_id": "806d8b44cc787945dc23580880b507f6", "text": "def unique ( list ) : unique = [ ] [ unique . append ( x ) for x in list if x not in unique ] return unique\n", "title": "", "metadata": ""}
{"_id": "ec7ffd742f3c561d5e2768e30edccaae", "text": "def _get_pattern ( self , pys_style ) : # Return None if there is no bgcolor if \"bgcolor\" not in pys_style : return pattern = xlwt . Pattern ( ) pattern . pattern = xlwt . Pattern . SOLID_PATTERN bgcolor = wx . Colour ( ) bgcolor . SetRGB ( pys_style [ \"bgcolor\" ] ) pattern . pattern_fore_colour = self . color2idx ( * bgcolor . Get ( ) ) return pattern\n", "title": "", "metadata": ""}
{"_id": "34a26ff0f8d0c59a0d37f14908d498f4", "text": "def previous_key ( tuple_of_tuples , key ) : for i , t in enumerate ( tuple_of_tuples ) : if t [ 0 ] == key : try : return tuple_of_tuples [ i - 1 ] [ 0 ] except IndexError : return None\n", "title": "", "metadata": ""}
{"_id": "4e24145e81d54652be345a328364c488", "text": "def synthesize ( self , duration ) : sr = self . samplerate . samples_per_second seconds = duration / Seconds ( 1 ) samples = np . random . uniform ( low = - 1. , high = 1. , size = int ( sr * seconds ) ) return AudioSamples ( samples , self . samplerate )\n", "title": "", "metadata": ""}
{"_id": "333151da923bf08f1659acb2db57545e", "text": "def seq_to_str ( obj , sep = \",\" ) : if isinstance ( obj , string_classes ) : return obj elif isinstance ( obj , ( list , tuple ) ) : return sep . join ( [ str ( x ) for x in obj ] ) else : return str ( obj )\n", "title": "", "metadata": ""}
{"_id": "ba4fcbc63c819b2b933d6d935a2626f8", "text": "def _gzip ( self , response ) : bytesio = six . BytesIO ( ) with gzip . GzipFile ( fileobj = bytesio , mode = 'w' ) as gz : gz . write ( response ) return bytesio . getvalue ( )\n", "title": "", "metadata": ""}
{"_id": "f6ea0fd0178dc459b4736d1e9293df9d", "text": "def is_punctuation ( text ) : return not ( text . lower ( ) in config . AVRO_VOWELS or text . lower ( ) in config . AVRO_CONSONANTS )\n", "title": "", "metadata": ""}
{"_id": "73ceade12bea71fae1c3600112e85abd", "text": "def contains_case_insensitive ( adict , akey ) : for key in adict : if key . lower ( ) == akey . lower ( ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "62cb0522ac1f5572b27c17743e99847c", "text": "def sortable_title ( instance ) : title = plone_sortable_title ( instance ) if safe_callable ( title ) : title = title ( ) return title . lower ( )\n", "title": "", "metadata": ""}
{"_id": "9c6be26042da245fceeb360944e1d214", "text": "def _aggr_mean ( inList ) : aggrSum = 0 nonNone = 0 for elem in inList : if elem != SENTINEL_VALUE_FOR_MISSING_DATA : aggrSum += elem nonNone += 1 if nonNone != 0 : return aggrSum / nonNone else : return None\n", "title": "", "metadata": ""}
{"_id": "7788019c6dce81645692e9c28b02e610", "text": "def _write_json ( file , contents ) : with open ( file , 'w' ) as f : return json . dump ( contents , f , indent = 2 , sort_keys = True )\n", "title": "", "metadata": ""}
{"_id": "562e0a99e423088a47aad241f43dcc0f", "text": "def drag_and_drop ( self , droppable ) : self . scroll_to ( ) ActionChains ( self . parent . driver ) . drag_and_drop ( self . _element , droppable . _element ) . perform ( )\n", "title": "", "metadata": ""}
{"_id": "233e41a883257f7ccc1b4874a22936be", "text": "def shape_list ( l , shape , dtype ) : return np . array ( l , dtype = dtype ) . reshape ( shape )\n", "title": "", "metadata": ""}
{"_id": "78516ecdd7c0af6e2e53510a76432f33", "text": "def set_font_size ( self , size ) : if self . font . font_size == size : pass else : self . font . _set_size ( size )\n", "title": "", "metadata": ""}
{"_id": "7a5adba9d86e0dfba1650a01ae7091a8", "text": "def to_gtp ( coord ) : if coord is None : return 'pass' y , x = coord return '{}{}' . format ( _GTP_COLUMNS [ x ] , go . N - y )\n", "title": "", "metadata": ""}
{"_id": "013a208b7766c2668d40bb543cfffd8c", "text": "def lint ( fmt = 'colorized' ) : if fmt == 'html' : outfile = 'pylint_report.html' local ( 'pylint -f %s davies > %s || true' % ( fmt , outfile ) ) local ( 'open %s' % outfile ) else : local ( 'pylint -f %s davies || true' % fmt )\n", "title": "", "metadata": ""}
{"_id": "fedb2ef88a1322804850596242bccf22", "text": "def selectnotnone ( table , field , complement = False ) : return select ( table , field , lambda v : v is not None , complement = complement )\n", "title": "", "metadata": ""}
{"_id": "e63b4d201f99b64f1d4064edbacf97b5", "text": "def rlognormal ( mu , tau , size = None ) : return np . random . lognormal ( mu , np . sqrt ( 1. / tau ) , size )\n", "title": "", "metadata": ""}
{"_id": "f6fcaa7e16744e28f5864870f78634b1", "text": "def last_location_of_minimum ( x ) : x = np . asarray ( x ) return 1.0 - np . argmin ( x [ : : - 1 ] ) / len ( x ) if len ( x ) > 0 else np . NaN\n", "title": "", "metadata": ""}
{"_id": "703565c8b1bbc8cbd48a2010e0484c68", "text": "def manhattan_distance_numpy ( object1 , object2 ) : return numpy . sum ( numpy . absolute ( object1 - object2 ) , axis = 1 ) . T\n", "title": "", "metadata": ""}
{"_id": "05911f7502aef4a3951f5b570177122b", "text": "def conv1x1 ( in_planes , out_planes , stride = 1 ) : return nn . Conv2d ( in_planes , out_planes , kernel_size = 1 , stride = stride , bias = False )\n", "title": "", "metadata": ""}
{"_id": "e851b9c4522c4225b6b359b525610f78", "text": "def boolean ( value ) : if isinstance ( value , bool ) : return value if value == \"\" : return False return strtobool ( value )\n", "title": "", "metadata": ""}
{"_id": "6d05119540feccdb3f040be7c8cd48ce", "text": "def get_size ( self , m ) : nrow , ncol = 0 , 0 if m [ 0 ] == 'F' : nrow = self . n elif m [ 0 ] == 'G' : nrow = self . m if m [ 1 ] == 'x' : ncol = self . n elif m [ 1 ] == 'y' : ncol = self . m return nrow , ncol\n", "title": "", "metadata": ""}
{"_id": "fbb9a447cfc6fc7100000eb627c99564", "text": "def check ( self , var ) : if not isinstance ( var , _str_type ) : return False return _enum_mangle ( var ) in self . _consts\n", "title": "", "metadata": ""}
{"_id": "06d13f4946906ac0fd0c020b258a398a", "text": "def flatten ( lis ) : new_lis = [ ] for item in lis : if isinstance ( item , collections . Sequence ) and not isinstance ( item , basestring ) : new_lis . extend ( flatten ( item ) ) else : new_lis . append ( item ) return new_lis\n", "title": "", "metadata": ""}
{"_id": "3f817fb90e6ce53c574022713a06ce47", "text": "def go_to_parent_directory ( self ) : self . chdir ( osp . abspath ( osp . join ( getcwd_or_home ( ) , os . pardir ) ) )\n", "title": "", "metadata": ""}
{"_id": "95f234d3514ae5bfef1356d3a836fada", "text": "def GeneratePassphrase ( length = 20 ) : valid_chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" valid_chars += \"0123456789 ,-_&$#\" return \"\" . join ( random . choice ( valid_chars ) for i in range ( length ) )\n", "title": "", "metadata": ""}
{"_id": "fa75a02bdb3fb5075c81294d8185a1e3", "text": "def generate_id ( self ) : if self . use_repeatable_ids : self . repeatable_id_counter += 1 return 'autobaked-{}' . format ( self . repeatable_id_counter ) else : return str ( uuid4 ( ) )\n", "title": "", "metadata": ""}
{"_id": "2e6182e1b9d01c97d58d74a6a5c6375f", "text": "def _snake_to_camel_case ( value ) : words = value . split ( \"_\" ) return words [ 0 ] + \"\" . join ( map ( str . capitalize , words [ 1 : ] ) )\n", "title": "", "metadata": ""}
{"_id": "a21271f725e0db3311685d0ef015ab88", "text": "def normalize_field ( self , value ) : if self . default is not None : if value is None or value == '' : value = self . default return value\n", "title": "", "metadata": ""}
{"_id": "c0e98f5e40c301bffa1477aa634062fb", "text": "def get_ctype ( rtype , cfunc , * args ) : val_p = backend . ffi . new ( rtype ) args = args + ( val_p , ) cfunc ( * args ) return val_p [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "a64d7bd94fbe34b32e2b88a41cf92d93", "text": "def format ( self , record , * args , * * kwargs ) : return logging . Formatter . format ( self , record , * args , * * kwargs ) . replace ( '\\n' , '\\n' + ' ' * 8 )\n", "title": "", "metadata": ""}
{"_id": "5d41b973743bb26be521a8fe9fd0807b", "text": "def setdefaults ( dct , defaults ) : for key in defaults : dct . setdefault ( key , defaults [ key ] ) return dct\n", "title": "", "metadata": ""}
{"_id": "9d74000d98fd8cc6176405af6385f93b", "text": "def move_datetime_year ( dt , direction , num_shifts ) : delta = relativedelta ( years = + num_shifts ) return _move_datetime ( dt , direction , delta )\n", "title": "", "metadata": ""}
{"_id": "9b15407b0d4192d774d4fc05de9ac861", "text": "def has_edge ( self , p_from , p_to ) : return p_from in self . _edges and p_to in self . _edges [ p_from ]\n", "title": "", "metadata": ""}
{"_id": "2e8dda263b58209ba9dc0581f862d5bb", "text": "def getTypeStr ( _type ) : if isinstance ( _type , CustomType ) : return str ( _type ) if hasattr ( _type , '__name__' ) : return _type . __name__ return ''\n", "title": "", "metadata": ""}
{"_id": "0419a3129e0445892def001d8772f5c2", "text": "def _get_line_no_from_comments ( py_line ) : matched = LINECOL_COMMENT_RE . match ( py_line ) if matched : return int ( matched . group ( 1 ) ) else : return 0\n", "title": "", "metadata": ""}
{"_id": "0d914773db44cfc7fdd888f58a30a247", "text": "def str2int ( num , radix = 10 , alphabet = BASE85 ) : return NumConv ( radix , alphabet ) . str2int ( num )\n", "title": "", "metadata": ""}
{"_id": "3d88933fae3a920e7884c212dd5e1bc4", "text": "def _is_path ( s ) : if isinstance ( s , string_types ) : try : return op . exists ( s ) except ( OSError , ValueError ) : return False else : return False\n", "title": "", "metadata": ""}
{"_id": "ff04c3d17ce8d05a8264444674930b5e", "text": "def compose ( * funcs ) : return lambda x : reduce ( lambda v , f : f ( v ) , reversed ( funcs ) , x )\n", "title": "", "metadata": ""}
{"_id": "1bfe87235f8bedac2bd3e581efd55ac3", "text": "def de_duplicate ( items ) : result = [ ] for item in items : if item not in result : result . append ( item ) return result\n", "title": "", "metadata": ""}
{"_id": "d78e969a08679faeb7cb04a543d2b419", "text": "def _cnx_is_empty ( in_file ) : with open ( in_file ) as in_handle : for i , line in enumerate ( in_handle ) : if i > 0 : return False return True\n", "title": "", "metadata": ""}
{"_id": "9a836ebd1018774b137393ad159579f4", "text": "def is_done ( self ) : return self . position . is_game_over ( ) or self . position . n >= FLAGS . max_game_length\n", "title": "", "metadata": ""}
{"_id": "848c8331302e69622e975ff6cf174b32", "text": "def get_current_desktop ( self ) : desktop = ctypes . c_long ( 0 ) _libxdo . xdo_get_current_desktop ( self . _xdo , ctypes . byref ( desktop ) ) return desktop . value\n", "title": "", "metadata": ""}
{"_id": "44662f180f49d1b7d65393f195e885dc", "text": "def get_matrix ( self ) : return np . array ( [ self . get_row_list ( i ) for i in range ( self . row_count ( ) ) ] )\n", "title": "", "metadata": ""}
{"_id": "41cb87dd5f6f18fcb2ccd3e1b17d6883", "text": "def smartread ( path ) : with open ( path , \"rb\" ) as f : content = f . read ( ) result = chardet . detect ( content ) return content . decode ( result [ \"encoding\" ] )\n", "title": "", "metadata": ""}
{"_id": "69fee0363d734d10a22377b47654e0c0", "text": "def trim ( self ) : for key , value in list ( iteritems ( self . counters ) ) : if value . empty ( ) : del self . counters [ key ]\n", "title": "", "metadata": ""}
{"_id": "82b615003a85ed18eb305e1361f87aff", "text": "def prepend_line ( filepath , line ) : with open ( filepath ) as f : lines = f . readlines ( ) lines . insert ( 0 , line ) with open ( filepath , 'w' ) as f : f . writelines ( lines )\n", "title": "", "metadata": ""}
{"_id": "3347cbf8326cb0f433e725b3e9b7342a", "text": "def distance_to_line ( a , b , p ) : return distance ( closest_point ( a , b , p ) , p )\n", "title": "", "metadata": ""}
{"_id": "ec4c067d0948ce0508939e16d43cb9c7", "text": "def find_all ( self , string , callback ) : for index , output in self . iter ( string ) : callback ( index , output )\n", "title": "", "metadata": ""}
{"_id": "80469b4f438f82f788d2960898498956", "text": "def release ( self ) : if self . errored : self . pool . delete_resource ( self ) else : self . pool . release ( self )\n", "title": "", "metadata": ""}
{"_id": "7404ffb343db9d8020f1e693ce9791c6", "text": "def flatten_list ( l ) : return list ( chain . from_iterable ( repeat ( x , 1 ) if isinstance ( x , str ) else x for x in l ) )\n", "title": "", "metadata": ""}
{"_id": "a502101ee3d57e551f5b980271b80336", "text": "def upload_as_json ( name , mylist ) : location = list ( IPList . objects . filter ( name ) ) if location : iplist = location [ 0 ] return iplist . upload ( json = mylist , as_type = 'json' )\n", "title": "", "metadata": ""}
{"_id": "100243ba2430450f30649db06ea2f86f", "text": "def get_shape ( img ) : if hasattr ( img , 'shape' ) : shape = img . shape else : shape = img . get_data ( ) . shape return shape\n", "title": "", "metadata": ""}
{"_id": "dd940d7e50e1544c7fe37042ea275a23", "text": "def get_keys_from_class ( cc ) : return [ prop . name for prop in cc . properties . values ( ) if 'key' in prop . qualifiers ]\n", "title": "", "metadata": ""}
{"_id": "ddd365b410833f09bd1b5acce9999205", "text": "def add_form_widget_attr ( field , attr_name , attr_value , replace = 0 ) : if not replace : attr = field . field . widget . attrs . get ( attr_name , '' ) attr += force_text ( attr_value ) field . field . widget . attrs [ attr_name ] = attr return field else : field . field . widget . attrs [ attr_name ] = attr_value return field\n", "title": "", "metadata": ""}
{"_id": "03fd91a8e02a20a7fa274ce2f7ccc88d", "text": "def call_and_exit ( self , cmd , shell = True ) : sys . exit ( subprocess . call ( cmd , shell = shell ) )\n", "title": "", "metadata": ""}
{"_id": "9a54af78e245ecbcd079bf500b4362d1", "text": "def extend ( a : dict , b : dict ) -> dict : res = a . copy ( ) res . update ( b ) return res\n", "title": "", "metadata": ""}
{"_id": "2e6c5e4c6e7be2d45312212080b9647c", "text": "def load_files ( files ) : for py_file in files : LOG . debug ( \"exec %s\" , py_file ) execfile ( py_file , globals ( ) , locals ( ) )\n", "title": "", "metadata": ""}
{"_id": "487253f42847d5ef29f33b95579e681d", "text": "def fill_nulls ( self , col : str ) : n = [ None , \"\" ] try : self . df [ col ] = self . df [ col ] . replace ( n , nan ) except Exception as e : self . err ( e )\n", "title": "", "metadata": ""}
{"_id": "2f935d81d15268a8957c820f3fc4a74f", "text": "def compute_boxplot ( self , series ) : from matplotlib . cbook import boxplot_stats series = series [ series . notnull ( ) ] if len ( series . values ) == 0 : return { } elif not is_numeric_dtype ( series ) : return self . non_numeric_stats ( series ) stats = boxplot_stats ( list ( series . values ) ) [ 0 ] stats [ 'count' ] = len ( series . values ) stats [ 'fliers' ] = \"|\" . join ( map ( str , stats [ 'fliers' ] ) ) return stats\n", "title": "", "metadata": ""}
{"_id": "dee0d642f873216e709487b2c2e8366d", "text": "def find_geom ( geom , geoms ) : for i , g in enumerate ( geoms ) : if g is geom : return i\n", "title": "", "metadata": ""}
{"_id": "d518e64c934d172f8fda97a597243fe9", "text": "def uncamel ( name ) : s1 = re . sub ( '(.)([A-Z][a-z]+)' , r'\\1_\\2' , name ) return re . sub ( '([a-z0-9])([A-Z])' , r'\\1_\\2' , s1 ) . lower ( )\n", "title": "", "metadata": ""}
{"_id": "14fd6c748c6525045b30f0c99e5eed29", "text": "def num_leaves ( tree ) : if tree . is_leaf : return 1 else : return num_leaves ( tree . left_child ) + num_leaves ( tree . right_child )\n", "title": "", "metadata": ""}
{"_id": "140e21838647fb2105e242f30025753c", "text": "def _openpyxl_read_xl ( xl_path : str ) : try : wb = load_workbook ( filename = xl_path , read_only = True ) except : raise else : return wb\n", "title": "", "metadata": ""}
{"_id": "36933144072760cb2b8b156213fa9471", "text": "def tuplize ( nested ) : if isinstance ( nested , str ) : return nested try : return tuple ( map ( tuplize , nested ) ) except TypeError : return nested\n", "title": "", "metadata": ""}
{"_id": "a778d5f45ee25ec2a2dd416f280f2fd5", "text": "def raises_regex ( self , expected_exception , expected_regexp ) : return unittest_case . assertRaisesRegexp ( expected_exception , expected_regexp , self . _orig_subject , * self . _args , * * self . _kwargs )\n", "title": "", "metadata": ""}
{"_id": "bb78ad5acb8e8e0f97336a7cbf61caea", "text": "def gen_lower ( x : Iterable [ str ] ) -> Generator [ str , None , None ] : for string in x : yield string . lower ( )\n", "title": "", "metadata": ""}
{"_id": "443fb1ab30cce62ce93d241c10a04d84", "text": "def to_list ( self ) : return [ [ int ( self . table . cell_values [ 0 ] [ 1 ] ) , int ( self . table . cell_values [ 0 ] [ 2 ] ) ] , [ int ( self . table . cell_values [ 1 ] [ 1 ] ) , int ( self . table . cell_values [ 1 ] [ 2 ] ) ] ]\n", "title": "", "metadata": ""}
{"_id": "462766a759b9f48e408eac7a2b709ef2", "text": "def disassemble_file ( filename , outstream = None ) : filename = check_object_path ( filename ) ( version , timestamp , magic_int , co , is_pypy , source_size ) = load_module ( filename ) if type ( co ) == list : for con in co : disco ( version , con , outstream ) else : disco ( version , co , outstream , is_pypy = is_pypy ) co = None\n", "title": "", "metadata": ""}
{"_id": "e1f50931427728fa6af9cdf3c6b95c59", "text": "async def async_run ( self ) -> None : self . main_task = self . loop . create_task ( self . main ( ) ) await self . main_task\n", "title": "", "metadata": ""}
{"_id": "6695424b11117eb38bf62b23c0fe0941", "text": "def tfds_dir ( ) : return os . path . dirname ( os . path . dirname ( os . path . dirname ( __file__ ) ) )\n", "title": "", "metadata": ""}
{"_id": "43693c8a8d3620eb40fe5db317ee2eaf", "text": "def hex_to_hsv ( color ) : color = normalize ( color ) color = color [ 1 : ] # color=tuple(ord(c)/255.0 for c in color.decode('hex')) color = ( int ( color [ 0 : 2 ] , base = 16 ) / 255.0 , int ( color [ 2 : 4 ] , base = 16 ) / 255.0 , int ( color [ 4 : 6 ] , base = 16 ) / 255.0 ) return colorsys . rgb_to_hsv ( * color )\n", "title": "", "metadata": ""}
{"_id": "197e86173e7e47e57f6f3c11bc0e8257", "text": "def plot_and_save ( self , * * kwargs ) : self . fig = pyplot . figure ( ) self . plot ( ) self . axes = pyplot . gca ( ) self . save_plot ( self . fig , self . axes , * * kwargs ) pyplot . close ( self . fig )\n", "title": "", "metadata": ""}
{"_id": "6c36746d706b9f794eb15584d85e5891", "text": "def array_dim ( arr ) : dim = [ ] while True : try : dim . append ( len ( arr ) ) arr = arr [ 0 ] except TypeError : return dim\n", "title": "", "metadata": ""}
{"_id": "2bf7bd70ec9f86655b57e69903d1d537", "text": "def build ( ctx ) : return_code = run_sphinx ( ctx . obj [ 'root_dir' ] ) if return_code > 0 : sys . exit ( return_code )\n", "title": "", "metadata": ""}
{"_id": "879563064e4b0d9c6552cbe363f10376", "text": "def connect_to_database_odbc_access ( self , dsn : str , autocommit : bool = True ) -> None : self . connect ( engine = ENGINE_ACCESS , interface = INTERFACE_ODBC , dsn = dsn , autocommit = autocommit )\n", "title": "", "metadata": ""}
{"_id": "115ae4de6d9c1b1687dbaca6895dd881", "text": "def get_stripped_file_lines ( filename ) : try : lines = open ( filename ) . readlines ( ) except FileNotFoundError : fatal ( \"Could not open file: {!r}\" . format ( filename ) ) return [ line . strip ( ) for line in lines ]\n", "title": "", "metadata": ""}
{"_id": "1d6b66fd9907bc22f7b4aa7868718a2a", "text": "def lines ( self ) : if self . _lines is None : self . _lines = self . obj . content . splitlines ( ) return self . _lines\n", "title": "", "metadata": ""}
{"_id": "66bdc3c4b02516d2b1d7d44eae513e34", "text": "def _draw_lines_internal ( self , coords , colour , bg ) : for i , ( x , y ) in enumerate ( coords ) : if i == 0 : self . _screen . move ( x , y ) else : self . _screen . draw ( x , y , colour = colour , bg = bg , thin = True )\n", "title": "", "metadata": ""}
{"_id": "2ae8ae3d82b3328165f35cbfbc091b41", "text": "def get_methods ( * objs ) : return set ( attr for obj in objs for attr in dir ( obj ) if not attr . startswith ( '_' ) and callable ( getattr ( obj , attr ) ) )\n", "title": "", "metadata": ""}
{"_id": "27003167bcd39d691b630e4d09c2da64", "text": "def is_quoted ( arg : str ) -> bool : return len ( arg ) > 1 and arg [ 0 ] == arg [ - 1 ] and arg [ 0 ] in constants . QUOTES\n", "title": "", "metadata": ""}
{"_id": "d54cb025e0b052c4e827613b942197da", "text": "def chmod_add_excute ( filename ) : st = os . stat ( filename ) os . chmod ( filename , st . st_mode | stat . S_IEXEC )\n", "title": "", "metadata": ""}
{"_id": "6c392d816352034194319fe62168537c", "text": "def All ( sequence ) : return bool ( reduce ( lambda x , y : x and y , sequence , True ) )\n", "title": "", "metadata": ""}
{"_id": "34cf69fbdadc21e60468ffc25e7f607c", "text": "def first_sunday ( self , year , month ) : date = datetime ( year , month , 1 , 0 ) days_until_sunday = 6 - date . weekday ( ) return date + timedelta ( days = days_until_sunday )\n", "title": "", "metadata": ""}
{"_id": "f38c80bb74e91dd85d2c8523718a6975", "text": "def add_input_variable ( self , var ) : assert ( isinstance ( var , Variable ) ) self . input_variable_list . append ( var )\n", "title": "", "metadata": ""}
{"_id": "0d2abb4fd07df5db7724a6efbaa8bf4a", "text": "def _npiter ( arr ) : for a in np . nditer ( arr , flags = [ \"refs_ok\" ] ) : c = a . item ( ) if c is not None : yield c\n", "title": "", "metadata": ""}
{"_id": "bf41d78be9a3308b3470f0f674c92245", "text": "def split_len ( s , length ) : return [ s [ i : i + length ] for i in range ( 0 , len ( s ) , length ) ]\n", "title": "", "metadata": ""}
{"_id": "b9a404e278c4a3db4f80978a7cfe0cc4", "text": "def _tofloat ( obj ) : if \"inf\" in obj . lower ( ) . strip ( ) : return obj try : return int ( obj ) except ValueError : try : return float ( obj ) except ValueError : return obj\n", "title": "", "metadata": ""}
{"_id": "95072191a96896b250b07a3367dd45c7", "text": "def on_key_press ( self , symbol , modifiers ) : self . keyboard_event ( symbol , self . keys . ACTION_PRESS , modifiers )\n", "title": "", "metadata": ""}
{"_id": "4d2283defd18d4a142ffc1c820e3be06", "text": "def bitsToString ( arr ) : s = array ( 'c' , '.' * len ( arr ) ) for i in xrange ( len ( arr ) ) : if arr [ i ] == 1 : s [ i ] = '*' return s\n", "title": "", "metadata": ""}
{"_id": "fd81f2ab07587f846562875e8212a694", "text": "def python ( string : str ) : return underscore ( singularize ( string ) if Naming . _pluralize ( string ) else string )\n", "title": "", "metadata": ""}
{"_id": "d82fac0c919c2160e7af46343025a243", "text": "def normalize_time ( timestamp ) : offset = timestamp . utcoffset ( ) if offset is None : return timestamp return timestamp . replace ( tzinfo = None ) - offset\n", "title": "", "metadata": ""}
{"_id": "3d011d8bc9e59f140a9d24ee8b0b0da4", "text": "def write_fits ( data , header , file_name ) : hdu = fits . PrimaryHDU ( data ) hdu . header = header hdulist = fits . HDUList ( [ hdu ] ) hdulist . writeto ( file_name , overwrite = True ) logging . info ( \"Wrote {0}\" . format ( file_name ) ) return\n", "title": "", "metadata": ""}
{"_id": "9a92a05d0e30ad027cfeb0d164d6ba38", "text": "def prettyprint ( d ) : print ( json . dumps ( d , sort_keys = True , indent = 4 , separators = ( \",\" , \": \" ) ) )\n", "title": "", "metadata": ""}
{"_id": "6216ab3cffd7977b508d7f3658c4830b", "text": "def _using_stdout ( self ) : if WINDOWS and colorama : # Then self.stream is an AnsiToWin32 object. return self . stream . wrapped is sys . stdout return self . stream is sys . stdout\n", "title": "", "metadata": ""}
{"_id": "5c3b389d15b7fdcb41ffc30145b6b3da", "text": "def is_readable ( fp , size = 1 ) : read_size = len ( fp . read ( size ) ) fp . seek ( - read_size , 1 ) return read_size == size\n", "title": "", "metadata": ""}
{"_id": "0276ea36a51f0c8e4a8ef7488616184f", "text": "def _get_mtime ( ) : return os . path . exists ( RPM_PATH ) and int ( os . path . getmtime ( RPM_PATH ) ) or 0\n", "title": "", "metadata": ""}
{"_id": "b12685de748e91e25a0095ef9f5317ff", "text": "def map ( cls , iterable , func , * a , * * kw ) : return cls ( func ( x , * a , * * kw ) for x in iterable )\n", "title": "", "metadata": ""}
{"_id": "521b40ad706aa7d1d5090e411bb62296", "text": "def stft ( func = None , * * kwparams ) : from numpy . fft import fft , ifft ifft_r = lambda * args : ifft ( * args ) . real return stft . base ( transform = fft , inverse_transform = ifft_r ) ( func , * * kwparams )\n", "title": "", "metadata": ""}
{"_id": "a11d3d9e303e4f231fbde60293e97f36", "text": "def is_archlinux ( ) : if platform . system ( ) . lower ( ) == 'linux' : if platform . linux_distribution ( ) == ( '' , '' , '' ) : # undefined distribution. Fixed in python 3. if os . path . exists ( '/etc/arch-release' ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "5ec8a8fe63446097a7ef64d08f30ff5d", "text": "def CleanseComments ( line ) : commentpos = line . find ( '//' ) if commentpos != - 1 and not IsCppString ( line [ : commentpos ] ) : line = line [ : commentpos ] . rstrip ( ) # get rid of /* ... */ return _RE_PATTERN_CLEANSE_LINE_C_COMMENTS . sub ( '' , line )\n", "title": "", "metadata": ""}
{"_id": "27d1f119e04ca39e791870181432d06e", "text": "def setAsApplication ( myappid ) : if os . name == 'nt' : import ctypes ctypes . windll . shell32 . SetCurrentProcessExplicitAppUserModelID ( myappid )\n", "title": "", "metadata": ""}
{"_id": "a2c29fddd4b09a86f2d8842203a0201c", "text": "def get_size ( self ) : self . curses . setupterm ( ) return self . curses . tigetnum ( 'cols' ) , self . curses . tigetnum ( 'lines' )\n", "title": "", "metadata": ""}
{"_id": "97351a4ebeb86f409565390167ac8f0d", "text": "def count_list ( the_list ) : count = the_list . count result = [ ( item , count ( item ) ) for item in set ( the_list ) ] result . sort ( ) return result\n", "title": "", "metadata": ""}
{"_id": "3047f5da1825425a775d749ef27eeda2", "text": "def clean ( ctx , text ) : text = conversions . to_string ( text , ctx ) return '' . join ( [ c for c in text if ord ( c ) >= 32 ] )\n", "title": "", "metadata": ""}
{"_id": "cf3568be2ad7e68d5f4ffbf4871b12dc", "text": "def metres2latlon ( mx , my , origin_shift = 2 * pi * 6378137 / 2.0 ) : lon = ( mx / origin_shift ) * 180.0 lat = ( my / origin_shift ) * 180.0 lat = 180 / pi * ( 2 * atan ( exp ( lat * pi / 180.0 ) ) - pi / 2.0 ) return lat , lon\n", "title": "", "metadata": ""}
{"_id": "ba7b6e3f13c01581d13161cdc33a697e", "text": "def printheader ( h = None ) : writer = csv . writer ( sys . stdout ) writer . writerow ( header_fields ( h ) )\n", "title": "", "metadata": ""}
{"_id": "ae4c108a675bfc7781641982c2e90e28", "text": "def _calc_overlap_count ( markers1 : dict , markers2 : dict , ) : overlaps = np . zeros ( ( len ( markers1 ) , len ( markers2 ) ) ) j = 0 for marker_group in markers1 : tmp = [ len ( markers2 [ i ] . intersection ( markers1 [ marker_group ] ) ) for i in markers2 . keys ( ) ] overlaps [ j , : ] = tmp j += 1 return overlaps\n", "title": "", "metadata": ""}
{"_id": "2ced768d2e1f9197cb5867f437b2f7d1", "text": "def _session_set ( self , key , value ) : self . session [ self . _session_key ( key ) ] = value\n", "title": "", "metadata": ""}
{"_id": "183d64edc766c9f98a3fea870b6877f9", "text": "def read_stdin ( ) : if sys . stdin . isatty ( ) and sys . stdout . isatty ( ) : print ( '\\nReading from stdin until end of file (Ctrl + D)...' ) return sys . stdin . read ( )\n", "title": "", "metadata": ""}
{"_id": "ef786d3d6b8fc537c44119d8f155190e", "text": "def pretty_dict_str ( d , indent = 2 ) : b = StringIO ( ) write_pretty_dict_str ( b , d , indent = indent ) return b . getvalue ( )\n", "title": "", "metadata": ""}
{"_id": "1081ff2840840a72e0a158e431f869a1", "text": "def chunked_list ( _list , _chunk_size = 50 ) : for i in range ( 0 , len ( _list ) , _chunk_size ) : yield _list [ i : i + _chunk_size ]\n", "title": "", "metadata": ""}
{"_id": "fe675dc76a814d11b70aacf490010c13", "text": "def uppercase_chars ( string : any ) -> str : return '' . join ( [ c if c . isupper ( ) else '' for c in str ( string ) ] )\n", "title": "", "metadata": ""}
{"_id": "eecc88c566eb7983b5fe9601710a0a45", "text": "def xeval ( source , optimize = True ) : native = xcompile ( source , optimize = optimize ) return native ( )\n", "title": "", "metadata": ""}
{"_id": "8999f80855d178d34eddcd826534d310", "text": "def get_property_by_name ( pif , name ) : return next ( ( x for x in pif . properties if x . name == name ) , None )\n", "title": "", "metadata": ""}
{"_id": "d109d9f344e949bd6670780e3a79a540", "text": "def listlike ( obj ) : return hasattr ( obj , \"__iter__\" ) and not issubclass ( type ( obj ) , str ) and not issubclass ( type ( obj ) , unicode )\n", "title": "", "metadata": ""}
{"_id": "0c3cd83d263205a1408067c07379e8ab", "text": "def transpose ( table ) : t = [ ] for i in range ( 0 , len ( table [ 0 ] ) ) : t . append ( [ row [ i ] for row in table ] ) return t\n", "title": "", "metadata": ""}
{"_id": "8863c41bc1588d6d7eeaf5b8833c49f2", "text": "def get_unique_indices ( df , axis = 1 ) : return dict ( zip ( df . columns . names , dif . columns . levels ) )\n", "title": "", "metadata": ""}
{"_id": "c79ef83a02413829565835d9473f612c", "text": "def MatrixSolve ( a , rhs , adj ) : return np . linalg . solve ( a if not adj else _adjoint ( a ) , rhs ) ,\n", "title": "", "metadata": ""}
{"_id": "4d52e83dbeb72da00c4b7b30d09eafa3", "text": "def data_directory ( ) : package_directory = os . path . abspath ( os . path . dirname ( __file__ ) ) return os . path . join ( package_directory , \"data\" )\n", "title": "", "metadata": ""}
{"_id": "42c1912e4b35e5e3bbb61dc0a44d9a50", "text": "def escapePathForShell ( path ) : if platform . system ( ) == 'Windows' : return '\"{}\"' . format ( path . replace ( '\"' , '\"\"' ) ) else : return shellescape . quote ( path )\n", "title": "", "metadata": ""}
{"_id": "b3d14ed0e5685302f5287c5a486ed748", "text": "def print_matrix ( X , decimals = 1 ) : for row in np . round ( X , decimals = decimals ) : print ( row )\n", "title": "", "metadata": ""}
{"_id": "e43cb87f45a5717aa22fedad0bef9209", "text": "def find_first ( pattern : str , path : str ) -> str : try : return find ( pattern , path ) [ 0 ] except IndexError : log . critical ( '''Couldn't find \"{}\" in \"{}\"''' , pattern , path ) raise\n", "title": "", "metadata": ""}
{"_id": "654de55584cf6bd71777cda12ad683a3", "text": "def full_like ( array , value , dtype = None ) : shared = empty_like ( array , dtype ) shared [ : ] = value return shared\n", "title": "", "metadata": ""}
{"_id": "f724a2716403caecc84815532ba98d26", "text": "def callable_validator ( v : Any ) -> AnyCallable : if callable ( v ) : return v raise errors . CallableError ( value = v )\n", "title": "", "metadata": ""}
{"_id": "abc34280a1b622688ef958cb24173149", "text": "def figsize ( x = 8 , y = 7. , aspect = 1. ) : # update rcparams with adjusted figsize params mpl . rcParams . update ( { 'figure.figsize' : ( x * aspect , y ) } )\n", "title": "", "metadata": ""}
{"_id": "04edd168a9e62eb2024f51637d7f792c", "text": "def get_file_string ( filepath ) : with open ( os . path . abspath ( filepath ) ) as f : return f . read ( )\n", "title": "", "metadata": ""}
{"_id": "ea8187c13cf2afa2ca3926134fa5e727", "text": "def _update_plot ( self , _ ) : # Since all sliders call this same callback without saying who they are # I need to update the values for all parameters. This can be # circumvented by creating a seperate callback function for each # parameter. for param in self . model . params : param . value = self . _sliders [ param ] . val for indep_var , dep_var in self . _projections : self . _update_specific_plot ( indep_var , dep_var )\n", "title": "", "metadata": ""}
{"_id": "0b0bb6f0682bc05a56ad07c4556b9d50", "text": "def valid_file ( path : str ) -> bool : path = Path ( path ) . expanduser ( ) log . debug ( \"checking if %s is a valid file\" , path ) return path . exists ( ) and path . is_file ( )\n", "title": "", "metadata": ""}
{"_id": "1f92ebe04ae8dd27b275095bdd70686e", "text": "def positive_integer ( anon , obj , field , val ) : return anon . faker . positive_integer ( field = field )\n", "title": "", "metadata": ""}
{"_id": "b3e9edaf093abe83d24b59b56a6e8e32", "text": "def average_price ( quantity_1 , price_1 , quantity_2 , price_2 ) : return ( quantity_1 * price_1 + quantity_2 * price_2 ) / ( quantity_1 + quantity_2 )\n", "title": "", "metadata": ""}
{"_id": "aaab417281cb5ac8a3e32f63af0540e2", "text": "def plot_kde ( data , ax , title = None , color = 'r' , fill_bt = True ) : if isinstance ( data , list ) : data = np . asarray ( data ) e = kde . KDEUnivariate ( data . astype ( np . float ) ) e . fit ( ) ax . plot ( e . support , e . density , color = color , alpha = 0.9 , linewidth = 2.25 ) if fill_bt : ax . fill_between ( e . support , e . density , alpha = .35 , zorder = 1 , antialiased = True , color = color ) if title is not None : t = ax . set_title ( title ) t . set_y ( 1.05 )\n", "title": "", "metadata": ""}
{"_id": "416189c0eff39720bba557b245b83f71", "text": "def console_get_background_flag ( con : tcod . console . Console ) -> int : return int ( lib . TCOD_console_get_background_flag ( _console ( con ) ) )\n", "title": "", "metadata": ""}
{"_id": "20022e2fa5c68150c61d08e89ce51fa8", "text": "def _histplot_bins ( column , bins = 100 ) : col_min = np . min ( column ) col_max = np . max ( column ) return range ( col_min , col_max + 2 , max ( ( col_max - col_min ) // bins , 1 ) )\n", "title": "", "metadata": ""}
{"_id": "1d9e8cfc2592c5a577c7d0377799ea24", "text": "def default_diff ( latest_config , current_config ) : # Pop off the fields we don't care about: pop_no_diff_fields ( latest_config , current_config ) diff = DeepDiff ( latest_config , current_config , ignore_order = True ) return diff\n", "title": "", "metadata": ""}
{"_id": "81cfa0c2a54cdee9960b7b7d094d3f25", "text": "def test_python_java_rt ( ) : sub_env = { 'PYTHONPATH' : _build_dir ( ) } log . info ( 'Executing Python unit tests (against Java runtime classes)...' ) return jpyutil . _execute_python_scripts ( python_java_rt_tests , env = sub_env )\n", "title": "", "metadata": ""}
{"_id": "27e0a36d7c815fd50c96b84fbac695f1", "text": "def wait_send ( self , timeout = None ) : self . _send_queue_cleared . clear ( ) self . _send_queue_cleared . wait ( timeout = timeout )\n", "title": "", "metadata": ""}
{"_id": "a1a94ccb1762511c5d3e8bc3bba501f3", "text": "def deskew ( S ) : x = np . zeros ( 3 ) x [ 0 ] = S [ 2 , 1 ] x [ 1 ] = S [ 0 , 2 ] x [ 2 ] = S [ 1 , 0 ] return x\n", "title": "", "metadata": ""}
{"_id": "f4b894087f4101f8bf48daeab561d27e", "text": "def get_anchor_href ( markup ) : soup = BeautifulSoup ( markup , 'lxml' ) return [ '%s' % link . get ( 'href' ) for link in soup . find_all ( 'a' ) ]\n", "title": "", "metadata": ""}
{"_id": "5d5694ffa37962d35d91effcdd3851e1", "text": "def struct2dict ( struct ) : return { x : getattr ( struct , x ) for x in dict ( struct . _fields_ ) . keys ( ) }\n", "title": "", "metadata": ""}
{"_id": "0519fd1136eb442e2a1cb3b20ac36048", "text": "def ansi ( color , text ) : code = COLOR_CODES [ color ] return '\\033[1;{0}m{1}{2}' . format ( code , text , RESET_TERM )\n", "title": "", "metadata": ""}
{"_id": "17a673ef2c71f561214430effbfcf03d", "text": "def print_runs ( query ) : if query is None : return for tup in query : print ( ( \"{0} @ {1} - {2} id: {3} group: {4}\" . format ( tup . end , tup . experiment_name , tup . project_name , tup . experiment_group , tup . run_group ) ) )\n", "title": "", "metadata": ""}
{"_id": "df16b613e278c14bd94e6ad32e88dca7", "text": "def apply ( filter ) : def decorator ( callable ) : return lambda * args , * * kwargs : filter ( callable ( * args , * * kwargs ) ) return decorator\n", "title": "", "metadata": ""}
{"_id": "5e84fbcb3649dbfff7f95eaac5ac370e", "text": "def natural_sort ( list , key = lambda s : s ) : def get_alphanum_key_func ( key ) : convert = lambda text : int ( text ) if text . isdigit ( ) else text return lambda s : [ convert ( c ) for c in re . split ( '([0-9]+)' , key ( s ) ) ] sort_key = get_alphanum_key_func ( key ) list . sort ( key = sort_key )\n", "title": "", "metadata": ""}
{"_id": "adaf9ee530ae285d8dee9ee705b38040", "text": "def _get_random_id ( ) : symbols = string . ascii_uppercase + string . ascii_lowercase + string . digits return '' . join ( random . choice ( symbols ) for _ in range ( 15 ) )\n", "title": "", "metadata": ""}
{"_id": "c373a66461a7cd806cc490dabfd1f355", "text": "def list_of_lists_to_dict ( l ) : d = { } for key , val in l : d . setdefault ( key , [ ] ) . append ( val ) return d\n", "title": "", "metadata": ""}
{"_id": "1e1b97cd63a036bef170137bd766afe8", "text": "def string ( value ) -> str : return system_json . dumps ( Json ( value ) . safe_object ( ) , ensure_ascii = False )\n", "title": "", "metadata": ""}
{"_id": "5d5a59cc1f5fe35898cdb19d3045c3bd", "text": "def _obj_cursor_to_dictionary ( self , cursor ) : if not cursor : return cursor cursor = json . loads ( json . dumps ( cursor , cls = BSONEncoder ) ) if cursor . get ( \"_id\" ) : cursor [ \"id\" ] = cursor . get ( \"_id\" ) del cursor [ \"_id\" ] return cursor\n", "title": "", "metadata": ""}
{"_id": "e3021062d6720dc05426d83e338066f9", "text": "def __call__ ( self , img ) : return F . pad ( img , self . padding , self . fill , self . padding_mode )\n", "title": "", "metadata": ""}
{"_id": "6dd4239d5c582eee744815a862ed38f8", "text": "def close_database_session ( session ) : try : session . close ( ) except OperationalError as e : raise DatabaseError ( error = e . orig . args [ 1 ] , code = e . orig . args [ 0 ] )\n", "title": "", "metadata": ""}
{"_id": "b1fceb5775d73844717e206626a80861", "text": "def created_today ( self ) : if self . datetime . date ( ) == datetime . today ( ) . date ( ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "08ba31da6f1251c0c1e7c487bc10c669", "text": "def normalize_column_names ( df ) : columns = df . columns if hasattr ( df , 'columns' ) else df columns = [ c . lower ( ) . replace ( ' ' , '_' ) for c in columns ] return columns\n", "title": "", "metadata": ""}
{"_id": "1274281b66831cb008fbd87e382b7fb6", "text": "def save ( variable , filename ) : fileObj = open ( filename , 'wb' ) pickle . dump ( variable , fileObj ) fileObj . close ( )\n", "title": "", "metadata": ""}
{"_id": "69727488792bf469d61ef1dcf19029bf", "text": "def stop ( self ) -> None : if self . _stop and not self . _posted_kork : self . _stop ( ) self . _stop = None\n", "title": "", "metadata": ""}
{"_id": "ef37956cda17d05d29b94bc098dcd629", "text": "def _ ( f , x ) : return { k : v for k , v in x . items ( ) if f ( k , v ) }\n", "title": "", "metadata": ""}
{"_id": "06370709249ef3b641aedda482c42bef", "text": "def is_enum_type ( type_ ) : return isinstance ( type_ , type ) and issubclass ( type_ , tuple ( _get_types ( Types . ENUM ) ) )\n", "title": "", "metadata": ""}
{"_id": "c8356bb14fe236da6a52063ab6060aed", "text": "def toJson ( protoObject , indent = None ) : # Using the internal method because this way we can reformat the JSON js = json_format . MessageToDict ( protoObject , False ) return json . dumps ( js , indent = indent )\n", "title": "", "metadata": ""}
{"_id": "c961892905ef117d4c1679e7811a249e", "text": "def get ( key , default = None ) : data = get_form ( ) or get_query_string ( ) return data . get ( key , default )\n", "title": "", "metadata": ""}
{"_id": "1465cf0b10bdbae965e189bd907bd2ed", "text": "def default_number_converter ( number_str ) : is_int = ( number_str . startswith ( '-' ) and number_str [ 1 : ] . isdigit ( ) ) or number_str . isdigit ( ) # FIXME: this handles a wider range of numbers than allowed by the json standard, # etc.: float('nan') and float('inf'). But is this a problem? return int ( number_str ) if is_int else float ( number_str )\n", "title": "", "metadata": ""}
{"_id": "6465b4f348c7c0883dd40fd94c29ca42", "text": "def reindex_axis ( self , labels , axis = 0 , * * kwargs ) : # for compatibility with higher dims if axis != 0 : raise ValueError ( \"cannot reindex series on non-zero axis!\" ) msg = ( \"'.reindex_axis' is deprecated and will be removed in a future \" \"version. Use '.reindex' instead.\" ) warnings . warn ( msg , FutureWarning , stacklevel = 2 ) return self . reindex ( index = labels , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "1b05ff848e1295524e769c61c54d578d", "text": "def cprint ( string , fg = None , bg = None , end = '\\n' , target = sys . stdout ) : _color_manager . set_color ( fg , bg ) target . write ( string + end ) target . flush ( ) # Needed for Python 3.x _color_manager . set_defaults ( )\n", "title": "", "metadata": ""}
{"_id": "0e6e8eeb9a3b92700ef405bb49e863fa", "text": "def get_rounded ( self , digits ) : result = self . copy ( ) result . round ( digits ) return result\n", "title": "", "metadata": ""}
{"_id": "863609479dbd69461db2991731fec6a8", "text": "def _maybe_fill ( arr , fill_value = np . nan ) : if _isna_compat ( arr , fill_value ) : arr . fill ( fill_value ) return arr\n", "title": "", "metadata": ""}
{"_id": "a07ce6f37c7b1ec95a38449f5bf0a029", "text": "def on_error ( e ) : # pragma: no cover exname = { 'RuntimeError' : 'Runtime error' , 'Value Error' : 'Value error' } sys . stderr . write ( '{}: {}\\n' . format ( exname [ e . __class__ . __name__ ] , str ( e ) ) ) sys . stderr . write ( 'See file slam_error.log for additional details.\\n' ) sys . exit ( 1 )\n", "title": "", "metadata": ""}
{"_id": "d29e4496291a3c21c39afb561f4a0844", "text": "def pretty ( obj , verbose = False , max_width = 79 , newline = '\\n' ) : stream = StringIO ( ) printer = RepresentationPrinter ( stream , verbose , max_width , newline ) printer . pretty ( obj ) printer . flush ( ) return stream . getvalue ( )\n", "title": "", "metadata": ""}
{"_id": "561b1640f637515d3e881c84ebdd5fcd", "text": "def decamelise ( text ) : s = re . sub ( '(.)([A-Z][a-z]+)' , r'\\1_\\2' , text ) return re . sub ( '([a-z0-9])([A-Z])' , r'\\1_\\2' , s ) . lower ( )\n", "title": "", "metadata": ""}
{"_id": "5cb718f98c2245a5b60c824435412a80", "text": "def is_palindrome ( string , strict = True ) : if is_full_string ( string ) : if strict : return reverse ( string ) == string return is_palindrome ( SPACES_RE . sub ( '' , string ) ) return False\n", "title": "", "metadata": ""}
{"_id": "a0708914688c490bd4d07f7dd86e2bfc", "text": "def snake_to_camel ( s : str ) -> str : fragments = s . split ( '_' ) return fragments [ 0 ] + '' . join ( x . title ( ) for x in fragments [ 1 : ] )\n", "title": "", "metadata": ""}
{"_id": "9b5a8f88fe891cf8a81114e1490a7723", "text": "def updateFromKwargs ( self , properties , kwargs , collector , * * unused ) : properties [ self . name ] = self . getFromKwargs ( kwargs )\n", "title": "", "metadata": ""}
{"_id": "5db2070c84f04b005b347aba051dc949", "text": "def disable_cert_validation ( ) : current_context = ssl . _create_default_https_context ssl . _create_default_https_context = ssl . _create_unverified_context try : yield finally : ssl . _create_default_https_context = current_context\n", "title": "", "metadata": ""}
{"_id": "1d9731f610d1d25fa5c32eccf43883b1", "text": "def size ( dtype ) : dtype = tf . as_dtype ( dtype ) if hasattr ( dtype , 'size' ) : return dtype . size return np . dtype ( dtype ) . itemsize\n", "title": "", "metadata": ""}
{"_id": "498ba15b922dd3bb796e94c620208882", "text": "def dedup_list ( l ) : dedup = set ( ) return [ x for x in l if not ( x in dedup or dedup . add ( x ) ) ]\n", "title": "", "metadata": ""}
{"_id": "433c6e36d6ba55bd0e158695f04c305c", "text": "def get_value ( key , obj , default = missing ) : if isinstance ( key , int ) : return _get_value_for_key ( key , obj , default ) return _get_value_for_keys ( key . split ( '.' ) , obj , default )\n", "title": "", "metadata": ""}
{"_id": "32755fa76662e2ebe0ea4090815670ba", "text": "def _stdout_raw ( self , s ) : print ( s , end = '' , file = sys . stdout ) sys . stdout . flush ( )\n", "title": "", "metadata": ""}
{"_id": "c1c16951206fedba08e213a319a17da5", "text": "def get_memory_usage ( ) : process = psutil . Process ( os . getpid ( ) ) mem = process . memory_info ( ) . rss return mem / ( 1024 * 1024 )\n", "title": "", "metadata": ""}
{"_id": "5cfd7e51dfca06123c0f19b3d2f93a97", "text": "def is_finite ( value : Any ) -> bool : return isinstance ( value , int ) or ( isinstance ( value , float ) and isfinite ( value ) )\n", "title": "", "metadata": ""}
{"_id": "623631efcc3089c17bec26a6ed97d8a7", "text": "def _get_column_by_db_name ( cls , name ) : return cls . _columns . get ( cls . _db_map . get ( name , name ) )\n", "title": "", "metadata": ""}
{"_id": "4959a839105e640f14848d3ab96aa727", "text": "def downsample_with_striding ( array , factor ) : return array [ tuple ( np . s_ [ : : f ] for f in factor ) ]\n", "title": "", "metadata": ""}
{"_id": "c08dae7868e7771af24fdbd31b21c8c2", "text": "def __del__ ( self ) : if self . _cleanup_session : self . _session . loop . run_until_complete ( self . _session . close ( ) )\n", "title": "", "metadata": ""}
{"_id": "20e6517019e892b28280a56a63b933c1", "text": "def strip_spaces ( x ) : x = x . replace ( b' ' , b'' ) x = x . replace ( b'\\t' , b'' ) return x\n", "title": "", "metadata": ""}
{"_id": "a23f2bf13930b21b9d21a735c171b07b", "text": "def _rindex ( mylist : Sequence [ T ] , x : T ) -> int : return len ( mylist ) - mylist [ : : - 1 ] . index ( x ) - 1\n", "title": "", "metadata": ""}
{"_id": "ceeda32c0812cee738a4a14e9bada566", "text": "def _pad ( self , text ) : top_bottom = ( \"\\n\" * self . _padding ) + \" \" right_left = \" \" * self . _padding * self . PAD_WIDTH return top_bottom + right_left + text + right_left + top_bottom\n", "title": "", "metadata": ""}
{"_id": "55d624903ae8a4dc3fa6299aec070824", "text": "def remove_punctuation ( text , exceptions = [ ] ) : all_but = [ r'\\w' , r'\\s' ] all_but . extend ( exceptions ) pattern = '[^{}]' . format ( '' . join ( all_but ) ) return re . sub ( pattern , '' , text )\n", "title": "", "metadata": ""}
{"_id": "26c75830d570d3e3be4040c429049e15", "text": "def get_tablenames ( cur ) : cur . execute ( \"SELECT name FROM sqlite_master WHERE type='table'\" ) tablename_list_ = cur . fetchall ( ) tablename_list = [ str ( tablename [ 0 ] ) for tablename in tablename_list_ ] return tablename_list\n", "title": "", "metadata": ""}
{"_id": "d09191015297a4e1823bb3063130c638", "text": "def _bytes_to_json ( value ) : if isinstance ( value , bytes ) : value = base64 . standard_b64encode ( value ) . decode ( \"ascii\" ) return value\n", "title": "", "metadata": ""}
{"_id": "ea3516df193666e1f3390568677f5262", "text": "def get_timezone ( ) -> Tuple [ datetime . tzinfo , str ] : dt = get_datetime_now ( ) . astimezone ( ) tzstr = dt . strftime ( \"%z\" ) tzstr = tzstr [ : - 2 ] + \":\" + tzstr [ - 2 : ] return dt . tzinfo , tzstr\n", "title": "", "metadata": ""}
{"_id": "462bae40ba3c89461437261b8b0fdaf5", "text": "def strip_columns ( tab ) : for colname in tab . colnames : if tab [ colname ] . dtype . kind in [ 'S' , 'U' ] : tab [ colname ] = np . core . defchararray . strip ( tab [ colname ] )\n", "title": "", "metadata": ""}
{"_id": "36f86c9dc7d99e743cef2aecaba604c4", "text": "def is_element_present ( driver , selector , by = By . CSS_SELECTOR ) : try : driver . find_element ( by = by , value = selector ) return True except Exception : return False\n", "title": "", "metadata": ""}
{"_id": "d913a3bedb9c9c73d056ad1ca740a134", "text": "def is_int_vector ( l ) : if isinstance ( l , np . ndarray ) : if l . ndim == 1 and ( l . dtype . kind == 'i' or l . dtype . kind == 'u' ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "921d7e6893931c8020ad8bcba5818aec", "text": "def create_run_logfile ( folder ) : with open ( os . path . join ( folder , \"run.log\" ) , \"w\" ) as f : datestring = datetime . datetime . utcnow ( ) . strftime ( \"%Y-%m-%d %H:%M:%S\" ) f . write ( \"timestamp: '%s'\" % datestring )\n", "title": "", "metadata": ""}
{"_id": "7e1fd9a03fb109bb2d53fe8d04fcb70b", "text": "def get_from_headers ( request , key ) : value = request . headers . get ( key ) return to_native ( value )\n", "title": "", "metadata": ""}
{"_id": "e98ce4f3f5913d3bedce59ea424ccc56", "text": "def parse_cookies ( self , req , name , field ) : return core . get_value ( req . COOKIES , name , field )\n", "title": "", "metadata": ""}
{"_id": "55668b538fd3f75c532c57ba8b5ee414", "text": "def prettifysql ( sql ) : pretty = [ ] for line in sql . split ( '\\n' ) : pretty . extend ( [ \"%s,\\n\" % x for x in line . split ( ',' ) ] ) return pretty\n", "title": "", "metadata": ""}
{"_id": "f45de954a2b8d89bb71d3a0006c62c1a", "text": "def prsint ( string ) : string = stypes . stringToCharP ( string ) intval = ctypes . c_int ( ) libspice . prsint_c ( string , ctypes . byref ( intval ) ) return intval . value\n", "title": "", "metadata": ""}
{"_id": "e5d43838002706681d328cd3d3d74834", "text": "def set_int ( bytearray_ , byte_index , _int ) : # make sure were dealing with an int _int = int ( _int ) _bytes = struct . unpack ( '2B' , struct . pack ( '>h' , _int ) ) bytearray_ [ byte_index : byte_index + 2 ] = _bytes return bytearray_\n", "title": "", "metadata": ""}
{"_id": "562ca80df5acff76b912f3b5b6afff07", "text": "def add_to_js ( self , name , var ) : frame = self . page ( ) . mainFrame ( ) frame . addToJavaScriptWindowObject ( name , var )\n", "title": "", "metadata": ""}
{"_id": "da01e9d6e8bfb09bf991762155ee7316", "text": "def itemlist ( item , sep , suppress_trailing = True ) : return condense ( item + ZeroOrMore ( addspace ( sep + item ) ) + Optional ( sep . suppress ( ) if suppress_trailing else sep ) )\n", "title": "", "metadata": ""}
{"_id": "cd9a8fbc8eed3ebb8843c413f4b244d7", "text": "def make_regex ( separator ) : return re . compile ( r'(?:' + re . escape ( separator ) + r')?((?:[^' + re . escape ( separator ) + r'\\\\]|\\\\.)+)' )\n", "title": "", "metadata": ""}
{"_id": "f079fa6ff8476291501ac54353a4dbf7", "text": "def __getattr__ ( self , name ) : return functools . partial ( self . _obj . request , self . _api_prefix + name )\n", "title": "", "metadata": ""}
{"_id": "93020a65b1ca4b807c8f6791806f9e86", "text": "def restore_default_settings ( ) : global __DEFAULTS __DEFAULTS . CACHE_DIR = defaults . CACHE_DIR __DEFAULTS . SET_SEED = defaults . SET_SEED __DEFAULTS . SEED = defaults . SEED logging . info ( 'Settings reverted to their default values.' )\n", "title": "", "metadata": ""}
{"_id": "dae102ef11010b658c26cbcb0a9a8118", "text": "def get_parent_folder_name ( file_path ) : return os . path . split ( os . path . split ( os . path . abspath ( file_path ) ) [ 0 ] ) [ - 1 ]\n", "title": "", "metadata": ""}
{"_id": "72af9318a4ef13e988bc73388cf9128a", "text": "def average_gradient ( data , * kwargs ) : return np . average ( np . array ( np . gradient ( data ) ) ** 2 )\n", "title": "", "metadata": ""}
{"_id": "b0af2ff6fa8c279b8346cb7fda89cb1f", "text": "def _get_item_position ( self , idx ) : start = 0 if idx == 0 else self . _index [ idx - 1 ] + 1 end = self . _index [ idx ] return start , end\n", "title": "", "metadata": ""}
{"_id": "8d4feff3609f23a13bb1b4ef725a8e6a", "text": "def get_adjacent_matrix ( self ) : edges = self . edges num_edges = len ( edges ) + 1 adj = np . zeros ( [ num_edges , num_edges ] ) for k in range ( num_edges - 1 ) : adj [ edges [ k ] . L , edges [ k ] . R ] = 1 adj [ edges [ k ] . R , edges [ k ] . L ] = 1 return adj\n", "title": "", "metadata": ""}
{"_id": "6f72c19075f8b7d9c9e29d14beb7412d", "text": "def get_join_cols ( by_entry ) : left_cols = [ ] right_cols = [ ] for col in by_entry : if isinstance ( col , str ) : left_cols . append ( col ) right_cols . append ( col ) else : left_cols . append ( col [ 0 ] ) right_cols . append ( col [ 1 ] ) return left_cols , right_cols\n", "title": "", "metadata": ""}
{"_id": "1051fb2c4f559d431c43b3c7906602a5", "text": "def raise_for_not_ok_status ( response ) : if response . code != OK : raise HTTPError ( 'Non-200 response code (%s) for url: %s' % ( response . code , uridecode ( response . request . absoluteURI ) ) ) return response\n", "title": "", "metadata": ""}
{"_id": "698d964841942f20e4bc7eecd30fb4de", "text": "def yaml ( self ) : return ordered_dump ( OrderedDict ( self ) , Dumper = yaml . SafeDumper , default_flow_style = False )\n", "title": "", "metadata": ""}
{"_id": "155f4560450e79be0c607b9d9ebefbd0", "text": "def _unique_rows_numpy ( a ) : a = np . ascontiguousarray ( a ) unique_a = np . unique ( a . view ( [ ( '' , a . dtype ) ] * a . shape [ 1 ] ) ) return unique_a . view ( a . dtype ) . reshape ( ( unique_a . shape [ 0 ] , a . shape [ 1 ] ) )\n", "title": "", "metadata": ""}
{"_id": "ad3c3c5590b95550d2be5629d49e923d", "text": "def min_values ( args ) : return Interval ( min ( x . low for x in args ) , min ( x . high for x in args ) )\n", "title": "", "metadata": ""}
{"_id": "056b200efd4bb5f6a459fd211aca44a4", "text": "def is_nullable_list ( val , vtype ) : return ( isinstance ( val , list ) and any ( isinstance ( v , vtype ) for v in val ) and all ( ( isinstance ( v , vtype ) or v is None ) for v in val ) )\n", "title": "", "metadata": ""}
{"_id": "771ea467bbe5f7e3e7603c57e98ec4eb", "text": "def get_active_window ( self ) : app = get_app ( ) try : return self . _active_window_for_cli [ app ] except KeyError : self . _active_window_for_cli [ app ] = self . _last_active_window or self . windows [ 0 ] return self . windows [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "058e3b2baf890fdd956b39be2952a0be", "text": "def get_table ( ports ) : table = PrettyTable ( [ \"Name\" , \"Port\" , \"Protocol\" , \"Description\" ] ) table . align [ \"Name\" ] = \"l\" table . align [ \"Description\" ] = \"l\" table . padding_width = 1 for port in ports : table . add_row ( port ) return table\n", "title": "", "metadata": ""}
{"_id": "b59941b87d070d048fff278e56b63b74", "text": "def _has_fr_route ( self ) : # 404's, 405's, which might not have a url_rule if self . _should_use_fr_error_handler ( ) : return True # for all other errors, just check if FR dispatched the route if not request . url_rule : return False return self . owns_endpoint ( request . url_rule . endpoint )\n", "title": "", "metadata": ""}
{"_id": "15b998853d9ff248568ec1c760036dd1", "text": "def read_key ( suppress = False ) : event = read_event ( suppress ) return event . name or event . scan_code\n", "title": "", "metadata": ""}
{"_id": "edc08af1134e86e7640100bd2810eb7e", "text": "def is_integer ( obj ) : if PYTHON3 : return isinstance ( obj , int ) return isinstance ( obj , ( int , long ) )\n", "title": "", "metadata": ""}
{"_id": "f4c750c18055ea7d885b1abd52b34fe2", "text": "def convert_camel_case_to_snake_case ( name ) : s1 = re . sub ( '(.)([A-Z][a-z]+)' , r'\\1_\\2' , name ) return re . sub ( '([a-z0-9])([A-Z])' , r'\\1_\\2' , s1 ) . lower ( )\n", "title": "", "metadata": ""}
{"_id": "d9c0ede41cbdcc921ac0d91adbf84166", "text": "def to_bytes ( data : Any ) -> bytearray : # noqa if isinstance ( data , int ) : return bytearray ( [ data ] ) return bytearray ( data , encoding = 'latin-1' )\n", "title": "", "metadata": ""}
{"_id": "e131e0eb1346046e808e6562ae401686", "text": "def lines ( input ) : for raw_line in input : line = raw_line . strip ( ) if line and not line . startswith ( '#' ) : yield strip_comments ( line )\n", "title": "", "metadata": ""}
{"_id": "f48eab05523e46947ccdf65ba79bcc8c", "text": "def _check_for_int ( x ) : try : y = int ( x ) except ( OverflowError , ValueError ) : pass else : # There is no way in AMF0 to distinguish between integers and floats if x == x and y == x : return y return x\n", "title": "", "metadata": ""}
{"_id": "a43f094e697e356e89335540b8b10022", "text": "def toggle_pause ( self ) : self . controller . playing = not self . controller . playing self . music . toggle_pause ( )\n", "title": "", "metadata": ""}
{"_id": "cad92fd2b754daa0563a56abf114a6b7", "text": "def bash ( filename ) : sys . stdout . flush ( ) subprocess . call ( \"bash {}\" . format ( filename ) , shell = True )\n", "title": "", "metadata": ""}
{"_id": "1b901ba1c32d8c6fc5f8e0cfb9a1a9e5", "text": "def get_object_or_child_by_type ( self , * types ) : objects = self . get_objects_or_children_by_type ( * types ) return objects [ 0 ] if any ( objects ) else None\n", "title": "", "metadata": ""}
{"_id": "d5342a8e3b9975b5dbbacdad5dd82a16", "text": "def keyReleaseEvent ( self , event ) : self . keyboard_event ( event . key ( ) , self . keys . ACTION_RELEASE , 0 )\n", "title": "", "metadata": ""}
{"_id": "cc79fef6db255bb7b4a550267e5090a1", "text": "def file_writelines_flush_sync ( path , lines ) : fp = open ( path , 'w' ) try : fp . writelines ( lines ) flush_sync_file_object ( fp ) finally : fp . close ( )\n", "title": "", "metadata": ""}
{"_id": "7b953afa90479d96f0f84c7efc9b3f55", "text": "def is_running ( process_id : int ) -> bool : pstr = str ( process_id ) encoding = sys . getdefaultencoding ( ) s = subprocess . Popen ( [ \"ps\" , \"-p\" , pstr ] , stdout = subprocess . PIPE ) for line in s . stdout : strline = line . decode ( encoding ) if pstr in strline : return True return False\n", "title": "", "metadata": ""}
{"_id": "def21bbd913b76d94ee2f2e61a27e196", "text": "def rrmdir ( directory ) : for root , dirs , files in os . walk ( directory , topdown = False ) : for name in files : os . remove ( os . path . join ( root , name ) ) for name in dirs : os . rmdir ( os . path . join ( root , name ) ) os . rmdir ( directory )\n", "title": "", "metadata": ""}
{"_id": "85ff7be29575f70c03409fdcf549e2c6", "text": "def log_normalize ( data ) : if sp . issparse ( data ) : data = data . copy ( ) data . data = np . log2 ( data . data + 1 ) return data return np . log2 ( data . astype ( np . float64 ) + 1 )\n", "title": "", "metadata": ""}
{"_id": "e0047c72169cd472ae38e460a9d9e8b3", "text": "def resources ( self ) : return [ self . pdf . getPage ( i ) for i in range ( self . pdf . getNumPages ( ) ) ]\n", "title": "", "metadata": ""}
{"_id": "a8f96ee69f87bdeb4dd48e7e8c6ad27a", "text": "def flatten_union ( table ) : op = table . op ( ) if isinstance ( op , ops . Union ) : return toolz . concatv ( flatten_union ( op . left ) , [ op . distinct ] , flatten_union ( op . right ) ) return [ table ]\n", "title": "", "metadata": ""}
{"_id": "5fcb83a54f19384b1ff60c334a45f5ff", "text": "def unit_ball_L2 ( shape ) : x = tf . Variable ( tf . zeros ( shape ) ) return constrain_L2 ( x )\n", "title": "", "metadata": ""}
{"_id": "81b07d65dc78befcc9c58ec8a39545c5", "text": "def search_script_directory ( self , path ) : for subdir , dirs , files in os . walk ( path ) : for file_name in files : if file_name . endswith ( \".py\" ) : self . search_script_file ( subdir , file_name )\n", "title": "", "metadata": ""}
{"_id": "e61ca70e6d5576c80c92d61297518672", "text": "def batch ( items , size ) : return [ items [ x : x + size ] for x in xrange ( 0 , len ( items ) , size ) ]\n", "title": "", "metadata": ""}
{"_id": "a9f68632839bc16450b0ac24ee76f795", "text": "def select_up ( self ) : r , c = self . _index self . _select_index ( r - 1 , c )\n", "title": "", "metadata": ""}
{"_id": "a859d5bcdfca972f93201a6f7e9708b3", "text": "def ratio_and_percentage ( current , total , time_remaining ) : return \"{} / {} ({}% completed)\" . format ( current , total , int ( current / total * 100 ) )\n", "title": "", "metadata": ""}
{"_id": "a4156404735a9e158fc7010c570e2ea3", "text": "def string_to_int ( s ) : result = 0 for c in s : if not isinstance ( c , int ) : c = ord ( c ) result = 256 * result + c return result\n", "title": "", "metadata": ""}
{"_id": "bb8149e33b99323aba8b7141957a3ebc", "text": "def return_letters_from_string ( text ) : out = \"\" for letter in text : if letter . isalpha ( ) : out += letter return out\n", "title": "", "metadata": ""}
{"_id": "d3b0388f30a83e202b31d7db0f68881a", "text": "def get_field_by_name ( self , name ) : for f in self . fields : if f . get_name ( ) == name : return f return None\n", "title": "", "metadata": ""}
{"_id": "4dc4aa5e7b0577e9a0d9a965750b80f7", "text": "def _check_whitespace ( string ) : if string . count ( ' ' ) + string . count ( '\\t' ) + string . count ( '\\n' ) > 0 : raise ValueError ( INSTRUCTION_HAS_WHITESPACE )\n", "title": "", "metadata": ""}
{"_id": "fd8020f7449a3ce5aca2c69e7dac919b", "text": "def nonull_dict ( self ) : return { k : v for k , v in six . iteritems ( self . dict ) if v and k != '_codes' }\n", "title": "", "metadata": ""}
{"_id": "fa1b64d78247bc5adcd5d12a31c79ca8", "text": "def _ws_on_close ( self , ws : websocket . WebSocketApp ) : self . connected = False self . logger . error ( 'Websocket closed' ) self . _reconnect_websocket ( )\n", "title": "", "metadata": ""}
{"_id": "b7da387c76b2ebdf9377f87db82d27d4", "text": "def to_snake_case ( text ) : s1 = re . sub ( '(.)([A-Z][a-z]+)' , r'\\1_\\2' , text ) return re . sub ( '([a-z0-9])([A-Z])' , r'\\1_\\2' , s1 ) . lower ( )\n", "title": "", "metadata": ""}
{"_id": "8ee750b02f284d04966fa1937c2c32e6", "text": "def is_unicode ( string ) : str_type = str ( type ( string ) ) if str_type . find ( 'str' ) > 0 or str_type . find ( 'unicode' ) > 0 : return True return False\n", "title": "", "metadata": ""}
{"_id": "aedb44d1b0e554d0254ff73fd289570b", "text": "def generate_write_yaml_to_file ( file_name ) : def write_yaml ( config ) : with open ( file_name , 'w+' ) as fh : fh . write ( yaml . dump ( config ) ) return write_yaml\n", "title": "", "metadata": ""}
{"_id": "a5cff63c6338fc582e4fb0d11066487d", "text": "def write_wav ( path , samples , sr = 16000 ) : max_value = np . abs ( np . iinfo ( np . int16 ) . min ) data = ( samples * max_value ) . astype ( np . int16 ) scipy . io . wavfile . write ( path , sr , data )\n", "title": "", "metadata": ""}
{"_id": "13dd3391b418cb725ea4bab3d73872fa", "text": "def _push_render ( self ) : bokeh . io . push_notebook ( handle = self . handle ) self . last_update = time . time ( )\n", "title": "", "metadata": ""}
{"_id": "b6a5882626c4373b7a5bc7ed635ed3f7", "text": "def get_list_dimensions ( _list ) : if isinstance ( _list , list ) or isinstance ( _list , tuple ) : return [ len ( _list ) ] + get_list_dimensions ( _list [ 0 ] ) return [ ]\n", "title": "", "metadata": ""}
{"_id": "645dcb169d2d999a3b7f1d125cfd5bf2", "text": "def load_streams ( chunks ) : chunks = peekable ( chunks ) while chunks : if six . PY3 : dc = zlib . decompressobj ( wbits = zlib . MAX_WBITS | 16 ) else : dc = zlib . decompressobj ( zlib . MAX_WBITS | 16 ) yield load_stream ( dc , chunks ) if dc . unused_data : chunks = peekable ( itertools . chain ( ( dc . unused_data , ) , chunks ) )\n", "title": "", "metadata": ""}
{"_id": "6eecea1b47859b2546a45d716053ca77", "text": "def chunk_list ( l , n ) : return [ l [ i : i + n ] for i in range ( 0 , len ( l ) , n ) ]\n", "title": "", "metadata": ""}
{"_id": "c1ec3ee126ff0adbb52192059215cd72", "text": "def strings_to_integers ( strings : Iterable [ str ] ) -> Iterable [ int ] : return strings_to_ ( strings , lambda x : int ( float ( x ) ) )\n", "title": "", "metadata": ""}
{"_id": "f4d4ecf3ef31a6dfbeaa214edf06ef86", "text": "def _remove_empty_items ( d , required ) : new_dict = { } for k , v in d . items ( ) : if k in required : new_dict [ k ] = v elif isinstance ( v , int ) or v : # \"if v\" would suppress emitting int(0) new_dict [ k ] = v return new_dict\n", "title": "", "metadata": ""}
{"_id": "1ac19ba519ca757e2daf6c0adce644ef", "text": "def main ( argv , version = DEFAULT_VERSION ) : tarball = download_setuptools ( ) _install ( tarball , _build_install_args ( argv ) )\n", "title": "", "metadata": ""}
{"_id": "c1d98f76ce3d49072fd68af78ddd42cf", "text": "def listified_tokenizer ( source ) : io_obj = io . StringIO ( source ) return [ list ( a ) for a in tokenize . generate_tokens ( io_obj . readline ) ]\n", "title": "", "metadata": ""}
{"_id": "ae99b4549a195446704bc9785d6fd7d7", "text": "def add_range ( self , sequence , begin , end ) : sequence . parser_tree = parsing . Range ( self . value ( begin ) . strip ( \"'\" ) , self . value ( end ) . strip ( \"'\" ) ) return True\n", "title": "", "metadata": ""}
{"_id": "b9af98c8ee8ce77a28a29cc8750c2386", "text": "def pout ( msg , log = None ) : _print ( msg , sys . stdout , log_func = log . info if log else None )\n", "title": "", "metadata": ""}
{"_id": "c4ac2b1a3ce212a711274130b92001ff", "text": "def get_colors ( img ) : w , h = img . size return [ color [ : 3 ] for count , color in img . convert ( 'RGB' ) . getcolors ( w * h ) ]\n", "title": "", "metadata": ""}
{"_id": "3fd813112bf5c8295d481430f7414d85", "text": "def to_pascal_case ( s ) : return re . sub ( r'(?!^)_([a-zA-Z])' , lambda m : m . group ( 1 ) . upper ( ) , s . capitalize ( ) )\n", "title": "", "metadata": ""}
{"_id": "bf4d6b706a8d4500d43bff671eaf091a", "text": "def list_to_csv ( value ) : if isinstance ( value , ( list , tuple , set ) ) : value = \",\" . join ( value ) return value\n", "title": "", "metadata": ""}
{"_id": "fbf1f45f5745842446e4d3256bb4f916", "text": "def find_duplicates ( l : list ) -> set : return set ( [ x for x in l if l . count ( x ) > 1 ] )\n", "title": "", "metadata": ""}
{"_id": "48b5c5ca34325d87c3fea50cceb1d861", "text": "def chi_square_calc ( classes , table , TOP , P , POP ) : try : result = 0 for i in classes : for index , j in enumerate ( classes ) : expected = ( TOP [ j ] * P [ i ] ) / ( POP [ i ] ) result += ( ( table [ i ] [ j ] - expected ) ** 2 ) / expected return result except Exception : return \"None\"\n", "title": "", "metadata": ""}
{"_id": "12d4da11f1c856b443a2ad3843a81d33", "text": "def size ( self ) : if self is NULL : return 0 return 1 + self . left . size ( ) + self . right . size ( )\n", "title": "", "metadata": ""}
{"_id": "f3d5d9fcab1d4c9ac56379a6ba609fe1", "text": "def get_last ( self , table = None ) : if table is None : table = self . main_table query = 'SELECT * FROM \"%s\" ORDER BY ROWID DESC LIMIT 1;' % table return self . own_cursor . execute ( query ) . fetchone ( )\n", "title": "", "metadata": ""}
{"_id": "f5f7d5749cb6be92367dc8223cd7b325", "text": "def terminate ( self ) : for t in self . _threads : t . quit ( ) self . _thread = [ ] self . _workers = [ ]\n", "title": "", "metadata": ""}
{"_id": "b6da9e73b5d34342c5ed63befe24e608", "text": "def check_clang_apply_replacements_binary ( args ) : try : subprocess . check_call ( [ args . clang_apply_replacements_binary , '--version' ] ) except : print ( 'Unable to run clang-apply-replacements. Is clang-apply-replacements ' 'binary correctly specified?' , file = sys . stderr ) traceback . print_exc ( ) sys . exit ( 1 )\n", "title": "", "metadata": ""}
{"_id": "d5e0525c66ef231eeb045a8614899e1b", "text": "def comma_converter ( float_string ) : trans_table = maketrans ( b',' , b'.' ) return float ( float_string . translate ( trans_table ) )\n", "title": "", "metadata": ""}
{"_id": "91f9d36a62f3f8d11abaa559b4e5435c", "text": "def getRandomBinaryTreeLeafNode ( binaryTree ) : if binaryTree . internal == True : if random . random ( ) > 0.5 : return getRandomBinaryTreeLeafNode ( binaryTree . left ) else : return getRandomBinaryTreeLeafNode ( binaryTree . right ) else : return binaryTree\n", "title": "", "metadata": ""}
{"_id": "bb6c5882c39251d3544e8070d6acb1d5", "text": "def call_spellchecker ( cmd , input_text = None , encoding = None ) : process = get_process ( cmd ) # A buffer has been provided if input_text is not None : for line in input_text . splitlines ( ) : # Hunspell truncates lines at `0x1fff` (at least on Windows this has been observed) # Avoid truncation by chunking the line on white space and inserting a new line to break it. offset = 0 end = len ( line ) while True : chunk_end = offset + 0x1fff m = None if chunk_end >= end else RE_LAST_SPACE_IN_CHUNK . search ( line , offset , chunk_end ) if m : chunk_end = m . start ( 1 ) chunk = line [ offset : m . start ( 1 ) ] offset = m . end ( 1 ) else : chunk = line [ offset : chunk_end ] offset = chunk_end # Avoid wasted calls to empty strings if chunk and not chunk . isspace ( ) : process . stdin . write ( chunk + b'\\n' ) if offset >= end : break return get_process_output ( process , encoding )\n", "title": "", "metadata": ""}
{"_id": "81d3f5246c0210be10cec1c3832d4118", "text": "def isin ( value , values ) : for i , v in enumerate ( value ) : if v not in np . array ( values ) [ : , i ] : return False return True\n", "title": "", "metadata": ""}
{"_id": "b037b5aec21a47fd721956dd7cc8b046", "text": "def unique_list_dicts ( dlist , key ) : return list ( dict ( ( val [ key ] , val ) for val in dlist ) . values ( ) )\n", "title": "", "metadata": ""}
{"_id": "898b4785228357c121ef19e8daf6e70e", "text": "def butlast ( iterable ) : iterable = iter ( iterable ) try : first = next ( iterable ) except StopIteration : return for second in iterable : yield first first = second\n", "title": "", "metadata": ""}
{"_id": "19eae287c0044d8f0617ec46ce608891", "text": "def primary_keys_full ( cls ) : mapper = cls . __mapper__ return [ mapper . get_property_by_column ( column ) for column in mapper . primary_key ]\n", "title": "", "metadata": ""}
{"_id": "373cecba17a4dc3ede703088887874c6", "text": "def inverted_dict ( d ) : return dict ( ( force_hashable ( v ) , k ) for ( k , v ) in viewitems ( dict ( d ) ) )\n", "title": "", "metadata": ""}
{"_id": "ef8c8542fd86dfea261b50d782ced917", "text": "def get_capture_dimensions ( capture ) : width = int ( capture . get ( cv2 . CAP_PROP_FRAME_WIDTH ) ) height = int ( capture . get ( cv2 . CAP_PROP_FRAME_HEIGHT ) ) return width , height\n", "title": "", "metadata": ""}
{"_id": "373d3f2544bbe6325f2429fefa36177e", "text": "def memory_used ( self ) : if self . _end_memory : memory_used = self . _end_memory - self . _start_memory return memory_used else : return None\n", "title": "", "metadata": ""}
{"_id": "cfd180da2fe2ca79c71f31d6c8a0d8b7", "text": "def read ( filename ) : return codecs . open ( os . path . join ( __DIR__ , filename ) , 'r' ) . read ( )\n", "title": "", "metadata": ""}
{"_id": "75ffa95f7b019202cc4b95953923a456", "text": "def __init__ ( self , name , contained_key ) : self . name = name self . contained_key = contained_key\n", "title": "", "metadata": ""}
{"_id": "ae8a5a0bacfb12355d0951540b66ea37", "text": "def cross_product_matrix ( vec ) : return np . array ( [ [ 0 , - vec [ 2 ] , vec [ 1 ] ] , [ vec [ 2 ] , 0 , - vec [ 0 ] ] , [ - vec [ 1 ] , vec [ 0 ] , 0 ] ] )\n", "title": "", "metadata": ""}
{"_id": "f5c0738264668ba63af66af9d86cb285", "text": "def find_mapping ( es_url , index ) : mapping = None backend = find_perceval_backend ( es_url , index ) if backend : mapping = backend . get_elastic_mappings ( ) if mapping : logging . debug ( \"MAPPING FOUND:\\n%s\" , json . dumps ( json . loads ( mapping [ 'items' ] ) , indent = True ) ) return mapping\n", "title": "", "metadata": ""}
{"_id": "f032324bbfac455391fbb153369d5489", "text": "def is_power_of_2 ( num ) : log = math . log2 ( num ) return int ( log ) == float ( log )\n", "title": "", "metadata": ""}
{"_id": "98ac719837c2a88d956544f04884a2ae", "text": "def is_valid_file ( parser , arg ) : arg = os . path . abspath ( arg ) if not os . path . exists ( arg ) : parser . error ( \"The file %s does not exist!\" % arg ) else : return arg\n", "title": "", "metadata": ""}
{"_id": "16a2a157b53b09d0e5fffbf05432f725", "text": "def generate_header ( headerfields , oldheader , group_by_field ) : fieldtypes = [ 'peptidefdr' , 'peptidepep' , 'nopsms' , 'proteindata' , 'precursorquant' , 'isoquant' ] return generate_general_header ( headerfields , fieldtypes , peptabledata . HEADER_PEPTIDE , oldheader , group_by_field )\n", "title": "", "metadata": ""}
{"_id": "384446d549e972d220daaac22f543076", "text": "def is_string ( val ) : try : basestring except NameError : return isinstance ( val , str ) return isinstance ( val , basestring )\n", "title": "", "metadata": ""}
{"_id": "46524939692a376b0d94db4f990766b7", "text": "def sbessely ( x , N ) : out = np . zeros ( N , dtype = np . float64 ) out [ 0 ] = - np . cos ( x ) / x out [ 1 ] = - np . cos ( x ) / ( x ** 2 ) - np . sin ( x ) / x for n in xrange ( 2 , N ) : out [ n ] = ( ( 2.0 * n - 1.0 ) / x ) * out [ n - 1 ] - out [ n - 2 ] return out\n", "title": "", "metadata": ""}
{"_id": "ffba807437a207125ca77279131475ab", "text": "def get_obj_cols ( df ) : obj_cols = [ ] for idx , dt in enumerate ( df . dtypes ) : if dt == 'object' or is_category ( dt ) : obj_cols . append ( df . columns . values [ idx ] ) return obj_cols\n", "title": "", "metadata": ""}
{"_id": "4018ea47766552a6993b0c0680e969d5", "text": "def remove_parameter ( self , name ) : if name in self . __query : self . __query . pop ( name )\n", "title": "", "metadata": ""}
{"_id": "80fde25259573ec05b84e819cd00bb85", "text": "def disconnect ( self ) : self . logger . debug ( 'Close connection...' ) self . auto_reconnect = False if self . websocket is not None : self . websocket . close ( )\n", "title": "", "metadata": ""}
{"_id": "c7202d44a27ac92800c99c971f86c09d", "text": "def download_file_from_bucket ( self , bucket , file_path , key ) : with open ( file_path , 'wb' ) as data : self . __s3 . download_fileobj ( bucket , key , data ) return file_path\n", "title": "", "metadata": ""}
{"_id": "35c1d467c0ca8b698bd69c4ba95f6fc2", "text": "def convert_value ( bind , value ) : type_name = get_type ( bind ) try : return typecast . cast ( type_name , value ) except typecast . ConverterError : return value\n", "title": "", "metadata": ""}
{"_id": "fdc84895e79432816651bf803e799f6d", "text": "def read ( self , start_position : int , size : int ) -> memoryview : return memoryview ( self . _bytes ) [ start_position : start_position + size ]\n", "title": "", "metadata": ""}
{"_id": "07fc8a512cc5d8dd026558dd39ca1cd6", "text": "def getRowCurrentIndex ( self ) : curIndex = self . currentIndex ( ) col0Index = curIndex . sibling ( curIndex . row ( ) , 0 ) return col0Index\n", "title": "", "metadata": ""}
{"_id": "dfab3baa9d70b87d7939849c1a0e93b5", "text": "def median ( data ) : if len ( data ) == 0 : return None data = sorted ( data ) return float ( ( data [ len ( data ) // 2 ] + data [ ( len ( data ) - 1 ) // 2 ] ) / 2. )\n", "title": "", "metadata": ""}
{"_id": "4609ab71c9ef4fdcefa23d60e028b0b6", "text": "def _float_almost_equal ( float1 , float2 , places = 7 ) : if round ( abs ( float2 - float1 ) , places ) == 0 : return True return False\n", "title": "", "metadata": ""}
{"_id": "d849be63ccd9ff4b83a8a82c1a60fe42", "text": "def set_xlimits_widgets ( self , set_min = True , set_max = True ) : xmin , xmax = self . tab_plot . ax . get_xlim ( ) if set_min : self . w . x_lo . set_text ( '{0}' . format ( xmin ) ) if set_max : self . w . x_hi . set_text ( '{0}' . format ( xmax ) )\n", "title": "", "metadata": ""}
{"_id": "1bd2a50c660b244e3532e297eeeb2acb", "text": "def redirect_stdout ( new_stdout ) : old_stdout , sys . stdout = sys . stdout , new_stdout try : yield None finally : sys . stdout = old_stdout\n", "title": "", "metadata": ""}
{"_id": "d7083b096ac91f4107bf1210aaff963d", "text": "def stft_magnitude ( signal , fft_length , hop_length = None , window_length = None ) : frames = frame ( signal , window_length , hop_length ) # Apply frame window to each frame. We use a periodic Hann (cosine of period # window_length) instead of the symmetric Hann of np.hanning (period # window_length-1). window = periodic_hann ( window_length ) windowed_frames = frames * window return np . abs ( np . fft . rfft ( windowed_frames , int ( fft_length ) ) )\n", "title": "", "metadata": ""}
{"_id": "01ff58d8c41c58ffc0b127052d4bea2f", "text": "def _cal_dist2center ( X , center ) : dmemb2cen = scipy . spatial . distance . cdist ( X , center . reshape ( 1 , X . shape [ 1 ] ) , metric = 'seuclidean' ) return ( np . sum ( dmemb2cen ) )\n", "title": "", "metadata": ""}
{"_id": "4220673f48534d40803faccc30ac0ca6", "text": "def rpop ( self , key ) : redis_list = self . _get_list ( key , 'RPOP' ) if self . _encode ( key ) not in self . redis : return None try : value = redis_list . pop ( ) if len ( redis_list ) == 0 : self . delete ( key ) return value except ( IndexError ) : # Redis returns nil if popping from an empty list return None\n", "title": "", "metadata": ""}
{"_id": "a6864a3cfe16618cb490e22398492113", "text": "def __exit__ ( self , type , value , traceback ) : if not self . asarfile : return self . asarfile . close ( ) self . asarfile = None\n", "title": "", "metadata": ""}
{"_id": "5310852298d7399e791e6c22dff3a34e", "text": "def create_symlink ( source , link_name ) : os_symlink = getattr ( os , \"symlink\" , None ) if isinstance ( os_symlink , collections . Callable ) : os_symlink ( source , link_name ) else : import ctypes csl = ctypes . windll . kernel32 . CreateSymbolicLinkW csl . argtypes = ( ctypes . c_wchar_p , ctypes . c_wchar_p , ctypes . c_uint32 ) csl . restype = ctypes . c_ubyte flags = 1 if os . path . isdir ( source ) else 0 if csl ( link_name , source , flags ) == 0 : raise ctypes . WinError ( )\n", "title": "", "metadata": ""}
{"_id": "2dbe2e5cfc27b147125556eb22370b6e", "text": "def hamming ( s , t ) : if len ( s ) != len ( t ) : raise ValueError ( 'Hamming distance needs strings of equal length.' ) return sum ( s_ != t_ for s_ , t_ in zip ( s , t ) )\n", "title": "", "metadata": ""}
{"_id": "c9bb26997092d23aadd6ad8043723d6a", "text": "def _interval_to_bound_points ( array ) : array_boundaries = np . array ( [ x . left for x in array ] ) array_boundaries = np . concatenate ( ( array_boundaries , np . array ( [ array [ - 1 ] . right ] ) ) ) return array_boundaries\n", "title": "", "metadata": ""}
{"_id": "1d4e2ac439d092d0ffecf69b5201fce1", "text": "def submit_form_id ( step , id ) : form = world . browser . find_element_by_xpath ( str ( 'id(\"{id}\")' . format ( id = id ) ) ) form . submit ( )\n", "title": "", "metadata": ""}
{"_id": "205bfe4a570d77bc713beaa59d27ef4e", "text": "def slugify_filename ( filename ) : name , ext = os . path . splitext ( filename ) slugified = get_slugified_name ( name ) return slugified + ext\n", "title": "", "metadata": ""}
{"_id": "03cab8b5895e672c90ea98b979f94cbb", "text": "def run ( self ) : try : import nose arguments = [ sys . argv [ 0 ] ] + list ( self . test_args ) return nose . run ( argv = arguments ) except ImportError : print ( ) print ( \"*** Nose library missing. Please install it. ***\" ) print ( ) raise\n", "title": "", "metadata": ""}
{"_id": "2ae0bfdd0b80e8a6d997de46b5e4cc3c", "text": "def parse_comments_for_file ( filename ) : return [ parse_comment ( strip_stars ( comment ) , next_line ) for comment , next_line in get_doc_comments ( read_file ( filename ) ) ]\n", "title": "", "metadata": ""}
{"_id": "1b90dc4c106aa102613296ecec1f9bfb", "text": "def register_plugin ( self ) : self . main . restore_scrollbar_position . connect ( self . restore_scrollbar_position ) self . main . add_dockwidget ( self )\n", "title": "", "metadata": ""}
{"_id": "b0b9267404e8ed6809dcafb2022f3b83", "text": "def is_writable_by_others ( filename ) : mode = os . stat ( filename ) [ stat . ST_MODE ] return mode & stat . S_IWOTH\n", "title": "", "metadata": ""}
{"_id": "db56cfc3ad8a78c68bd97a78691167f4", "text": "def dates_in_range ( start_date , end_date ) : return [ start_date + timedelta ( n ) for n in range ( int ( ( end_date - start_date ) . days ) ) ]\n", "title": "", "metadata": ""}
{"_id": "c6cbc4a875b48b8eedddbf9e5315f2d6", "text": "def array_sha256 ( a ) : dtype = str ( a . dtype ) . encode ( ) shape = numpy . array ( a . shape ) sha = hashlib . sha256 ( ) sha . update ( dtype ) sha . update ( shape ) sha . update ( a . tobytes ( ) ) return sha . hexdigest ( )\n", "title": "", "metadata": ""}
{"_id": "9c81ddf0b63d7043ed129eefad10c6bf", "text": "def img_encode ( arr , * * kwargs ) : sio = BytesIO ( ) imsave ( sio , arr , * * kwargs ) sio . seek ( 0 ) img_format = kwargs [ 'format' ] if kwargs . get ( 'format' ) else 'png' img_str = base64 . b64encode ( sio . getvalue ( ) ) . decode ( ) return 'data:image/{};base64,{}' . format ( img_format , img_str )\n", "title": "", "metadata": ""}
{"_id": "ab3e41813f90b8ec7a473fb9662346cd", "text": "def functions ( self ) : return [ v for v in self . globals . values ( ) if isinstance ( v , values . Function ) ]\n", "title": "", "metadata": ""}
{"_id": "4a717cbafad7800eca50189a41779152", "text": "def is_iter_non_string ( obj ) : if isinstance ( obj , list ) or isinstance ( obj , tuple ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "b69167e61ef98d4d946372bbcc9c6c3b", "text": "def subn_filter ( s , find , replace , count = 0 ) : return re . gsub ( find , replace , count , s )\n", "title": "", "metadata": ""}
{"_id": "8c64c063201d5e75902407d886eebb44", "text": "def to_utc ( self , dt ) : if dt . tzinfo is None : return dt . replace ( tzinfo = self . utc ) return dt . astimezone ( self . utc )\n", "title": "", "metadata": ""}
{"_id": "2486ea79a7b10427b0d431256a4eb2e2", "text": "def parse ( self , s ) : return datetime . datetime . strptime ( s , self . date_format ) . date ( )\n", "title": "", "metadata": ""}
{"_id": "2e611ea2e99c08f960d95520dd16cf3a", "text": "def retry_call ( func , cleanup = lambda : None , retries = 0 , trap = ( ) ) : attempts = count ( ) if retries == float ( 'inf' ) else range ( retries ) for attempt in attempts : try : return func ( ) except trap : cleanup ( ) return func ( )\n", "title": "", "metadata": ""}
{"_id": "4b38bf85116f75f8e35dd5b1d7d24799", "text": "def utcfromtimestamp ( cls , timestamp ) : obj = datetime . datetime . utcfromtimestamp ( timestamp ) obj = pytz . utc . localize ( obj ) return cls ( obj )\n", "title": "", "metadata": ""}
{"_id": "4d2baa2b24a2c9dba9593dd1557115e9", "text": "def get_dimension_array ( array ) : if all ( isinstance ( el , list ) for el in array ) : result = [ len ( array ) , len ( max ( [ x for x in array ] , key = len , ) ) ] # elif array and isinstance(array, list): else : result = [ len ( array ) , 1 ] return result\n", "title": "", "metadata": ""}
{"_id": "8790d62cdf0522c19b3d663ab69f37f1", "text": "def decode_bytes ( string ) : if is_string_type ( type ( string ) ) : string = bytes ( string , \"utf-8\" ) return base64 . decodebytes ( string )\n", "title": "", "metadata": ""}
{"_id": "9c3acf86bb959f104552d03d8606afdf", "text": "def set_locale ( request ) : return request . query . get ( 'lang' , app . ps . babel . select_locale_by_request ( request ) )\n", "title": "", "metadata": ""}
{"_id": "e1d027c8ce0370a545aee0b76273d885", "text": "def cpp_checker ( code , working_directory ) : return gcc_checker ( code , '.cpp' , [ os . getenv ( 'CXX' , 'g++' ) , '-std=c++0x' ] + INCLUDE_FLAGS , working_directory = working_directory )\n", "title": "", "metadata": ""}
{"_id": "45a1dbac75186036160d8fd58cf6ea9d", "text": "def is_connected ( self ) : try : return self . socket is not None and self . socket . getsockname ( ) [ 1 ] != 0 and BaseTransport . is_connected ( self ) except socket . error : return False\n", "title": "", "metadata": ""}
{"_id": "2fce3563fc08cb23906da53557719a5f", "text": "def camel_to_ ( s ) : s1 = re . sub ( '(.)([A-Z][a-z]+)' , r'\\1_\\2' , s ) return re . sub ( '([a-z0-9])([A-Z])' , r'\\1_\\2' , s1 ) . lower ( )\n", "title": "", "metadata": ""}
{"_id": "55325bcdaed944956fdd67e9cc6f623c", "text": "def fmt_sz ( intval ) : try : return fmt . human_size ( intval ) except ( ValueError , TypeError ) : return \"N/A\" . rjust ( len ( fmt . human_size ( 0 ) ) )\n", "title": "", "metadata": ""}
{"_id": "28aab19bd4a6ae9b275eb2b2e100d2f9", "text": "def copy_user_agent_from_driver ( self ) : selenium_user_agent = self . driver . execute_script ( \"return navigator.userAgent;\" ) self . headers . update ( { \"user-agent\" : selenium_user_agent } )\n", "title": "", "metadata": ""}
{"_id": "5f8c504916159b7d8ae26ee8e3a9b0c0", "text": "def is_line_in_file ( filename : str , line : str ) -> bool : assert \"\\n\" not in line with open ( filename , \"r\" ) as file : for fileline in file : if fileline == line : return True return False\n", "title": "", "metadata": ""}
{"_id": "39df0f3c0a418461d05a16acdad9c5b0", "text": "def file_exists ( fname ) : try : return fname and os . path . exists ( fname ) and os . path . getsize ( fname ) > 0 except OSError : return False\n", "title": "", "metadata": ""}
{"_id": "acc294713f82983b545f422765109c4a", "text": "def lin_interp ( x , rangeX , rangeY ) : s = ( x - rangeX [ 0 ] ) / mag ( rangeX [ 1 ] - rangeX [ 0 ] ) y = rangeY [ 0 ] * ( 1 - s ) + rangeY [ 1 ] * s return y\n", "title": "", "metadata": ""}
{"_id": "947f0c6c828656362ce1c1b0a8c833e0", "text": "def unpickle ( pickle_file ) : pickle = None with open ( pickle_file , \"rb\" ) as pickle_f : pickle = dill . load ( pickle_f ) if not pickle : LOG . error ( \"Could not load python object from file\" ) return pickle\n", "title": "", "metadata": ""}
{"_id": "70dba75e97ab093f55a5fde33a0821ab", "text": "def _isint ( string ) : return type ( string ) is int or ( isinstance ( string , _binary_type ) or isinstance ( string , _text_type ) ) and _isconvertible ( int , string )\n", "title": "", "metadata": ""}
{"_id": "3b5c71ee0b7918a73a5010f011eb431e", "text": "def issubset ( self , other ) : if len ( self ) > len ( other ) : # Fast check for obvious cases return False return all ( item in other for item in self )\n", "title": "", "metadata": ""}
{"_id": "b07c05ada33c9b2732305d8a561ea9ef", "text": "def serve_static ( request , path , insecure = False , * * kwargs ) : # Follow the same logic Django uses for determining access to the # static-serving view. if not django_settings . DEBUG and not insecure : raise ImproperlyConfigured ( \"The staticfiles view can only be used in \" \"debug mode or if the --insecure \" \"option of 'runserver' is used\" ) if not settings . PIPELINE_ENABLED and settings . PIPELINE_COLLECTOR_ENABLED : # Collect only the requested file, in order to serve the result as # fast as possible. This won't interfere with the template tags in any # way, as those will still cause Django to collect all media. default_collector . collect ( request , files = [ path ] ) return serve ( request , path , document_root = django_settings . STATIC_ROOT , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "ed2295910429e7b27e15d732a69efe6a", "text": "def update ( dct , dct_merge ) : for key , value in dct_merge . items ( ) : if key in dct and isinstance ( dct [ key ] , dict ) : dct [ key ] = update ( dct [ key ] , value ) else : dct [ key ] = value return dct\n", "title": "", "metadata": ""}
{"_id": "75b1de482180146095bdd65107640b45", "text": "def _position ( ) : cursor = POINT ( ) ctypes . windll . user32 . GetCursorPos ( ctypes . byref ( cursor ) ) return ( cursor . x , cursor . y )\n", "title": "", "metadata": ""}
{"_id": "17ea40d4c30bf159a1ebfb01dd5d305d", "text": "def browse_dialog_dir ( ) : _go_to_package ( ) logger_directory . info ( \"enter browse_dialog\" ) _path_bytes = subprocess . check_output ( [ 'python' , 'gui_dir_browse.py' ] , shell = False ) _path = _fix_path_bytes ( _path_bytes , file = False ) if len ( _path ) >= 1 : _path = _path [ 0 ] else : _path = \"\" logger_directory . info ( \"chosen path: {}\" . format ( _path ) ) logger_directory . info ( \"exit browse_dialog\" ) return _path\n", "title": "", "metadata": ""}
{"_id": "9a0ba59bd758a7c24cbbcc6f4727a84f", "text": "def _change_height ( self , ax , new_value ) : for patch in ax . patches : current_height = patch . get_height ( ) diff = current_height - new_value # we change the bar height patch . set_height ( new_value ) # we recenter the bar patch . set_y ( patch . get_y ( ) + diff * .5 )\n", "title": "", "metadata": ""}
{"_id": "d92aeffb055bd66c6ae50b185a7b5980", "text": "def checkbox_uncheck ( self , force_check = False ) : if self . get_attribute ( 'checked' ) : self . click ( force_click = force_check )\n", "title": "", "metadata": ""}
{"_id": "e34df43343df2f2e8c9b904b66fa7947", "text": "def ffmpeg_version ( ) : cmd = [ 'ffmpeg' , '-version' ] output = sp . check_output ( cmd ) aac_codecs = [ x for x in output . splitlines ( ) if \"ffmpeg version \" in str ( x ) ] [ 0 ] hay = aac_codecs . decode ( 'ascii' ) match = re . findall ( r'ffmpeg version (\\d+\\.)?(\\d+\\.)?(\\*|\\d+)' , hay ) if match : return \"\" . join ( match [ 0 ] ) else : return None\n", "title": "", "metadata": ""}
{"_id": "8132d59f0870f687fd8ef843e8a0623c", "text": "def longest_run ( da , dim = 'time' ) : d = rle ( da , dim = dim ) rl_long = d . max ( dim = dim ) return rl_long\n", "title": "", "metadata": ""}
{"_id": "7b53a021578cb5fa594498aa78cd6c71", "text": "def load ( self , filename = 'classifier.dump' ) : ifile = open ( filename , 'r+' ) self . classifier = pickle . load ( ifile ) ifile . close ( )\n", "title": "", "metadata": ""}
{"_id": "98d4f224b11ab4098fe08e89d0cd381a", "text": "def attrname_to_colname_dict ( cls ) -> Dict [ str , str ] : attr_col = { } # type: Dict[str, str] for attrname , column in gen_columns ( cls ) : attr_col [ attrname ] = column . name return attr_col\n", "title": "", "metadata": ""}
{"_id": "c52df078801dda795102f3d6ac091ad3", "text": "def __del__ ( self ) : if self . _hConv : DDE . Disconnect ( self . _hConv ) if self . _idInst : DDE . Uninitialize ( self . _idInst )\n", "title": "", "metadata": ""}
{"_id": "e9f7b152633291268285c9dbe75ecac7", "text": "def getvariable ( name ) : import inspect fr = inspect . currentframe ( ) try : while fr : fr = fr . f_back vars = fr . f_locals if name in vars : return vars [ name ] except : pass return None\n", "title": "", "metadata": ""}
{"_id": "374289f0babb9ee5463028fb888f19f4", "text": "def _read_stdin ( ) : line = sys . stdin . readline ( ) while line : yield line line = sys . stdin . readline ( )\n", "title": "", "metadata": ""}
{"_id": "93c562b4689b0ed0826dbd7a3bfc346d", "text": "def nlevels ( self ) : levels = self . levels ( ) return [ len ( l ) for l in levels ] if levels else 0\n", "title": "", "metadata": ""}
{"_id": "896538b4b255bb55d910308ef69d8776", "text": "def read_string ( buff , byteorder = 'big' ) : length = read_numeric ( USHORT , buff , byteorder ) return buff . read ( length ) . decode ( 'utf-8' )\n", "title": "", "metadata": ""}
{"_id": "d5c9e177a877ea15d3c1c131b3e087c2", "text": "def from_series ( cls , series ) : # TODO: add a 'name' parameter name = series . name df = pd . DataFrame ( { name : series } ) ds = Dataset . from_dataframe ( df ) return ds [ name ]\n", "title": "", "metadata": ""}
{"_id": "6b7c58fe2337646ff834f30c98b2f536", "text": "def compare ( string1 , string2 ) : if len ( string1 ) != len ( string2 ) : return False result = True for c1 , c2 in izip ( string1 , string2 ) : result &= c1 == c2 return result\n", "title": "", "metadata": ""}
{"_id": "d03f287b42c14d21d3347c0c32268f59", "text": "def watched_extension ( extension ) : for ext in hamlpy . VALID_EXTENSIONS : if extension . endswith ( '.' + ext ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "5257464f68c520fb1493b86342aba9a2", "text": "def extract_words ( lines ) : for line in lines : for word in re . findall ( r\"\\w+\" , line ) : yield word\n", "title": "", "metadata": ""}
{"_id": "9724110fd3dfe868c50b75da058d59a2", "text": "def query_proc_row ( procname , args = ( ) , factory = None ) : for row in query_proc ( procname , args , factory ) : return row return None\n", "title": "", "metadata": ""}
{"_id": "65fb9efed62824acc95f39542fab36ac", "text": "def apply ( f , obj , * args , * * kwargs ) : return vectorize ( f ) ( obj , * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "af523f636e115ea4a5be8bb67c153d90", "text": "def find_largest_contig ( contig_lengths_dict ) : # Initialise the dictionary longest_contig_dict = dict ( ) for file_name , contig_lengths in contig_lengths_dict . items ( ) : # As the list is sorted in descending order, the largest contig is the first entry in the list longest_contig_dict [ file_name ] = contig_lengths [ 0 ] return longest_contig_dict\n", "title": "", "metadata": ""}
{"_id": "2ef6b320b8259f8a0ca3e4a63ffdb118", "text": "def delete_connection ( ) : if _CON_SYM_ in globals ( ) : con = globals ( ) . pop ( _CON_SYM_ ) if not getattr ( con , '_session' ) . start ( ) : con . stop ( )\n", "title": "", "metadata": ""}
{"_id": "a6857f4020a1ea845867c3092f25085d", "text": "def determine_interactive ( self ) : try : if not sys . stdout . isatty ( ) or os . getpgrp ( ) != os . tcgetpgrp ( sys . stdout . fileno ( ) ) : self . interactive = 0 return False except Exception : self . interactive = 0 return False if self . interactive == 0 : return False return True\n", "title": "", "metadata": ""}
{"_id": "cd8a7018254e362909fcef29e73c3b8e", "text": "def napoleon_to_sphinx ( docstring , * * config_params ) : if \"napoleon_use_param\" not in config_params : config_params [ \"napoleon_use_param\" ] = False if \"napoleon_use_rtype\" not in config_params : config_params [ \"napoleon_use_rtype\" ] = False config = Config ( * * config_params ) return str ( GoogleDocstring ( docstring , config ) )\n", "title": "", "metadata": ""}
{"_id": "e832284553231f45871cde46f0fd4293", "text": "def uint8sc ( im ) : im = np . asarray ( im ) immin = im . min ( ) immax = im . max ( ) imrange = immax - immin return cv2 . convertScaleAbs ( im - immin , alpha = 255 / imrange )\n", "title": "", "metadata": ""}
{"_id": "d1160736065b0223d4f17c5982440f2e", "text": "def earth_orientation ( date ) : x_p , y_p , s_prime = np . deg2rad ( _earth_orientation ( date ) ) return rot3 ( - s_prime ) @ rot2 ( x_p ) @ rot1 ( y_p )\n", "title": "", "metadata": ""}
{"_id": "7c372af5b7313d7d09a8169131fac758", "text": "def validate ( self , xml_input ) : parsed_xml = etree . parse ( self . _handle_xml ( xml_input ) ) try : return self . xmlschema . validate ( parsed_xml ) except AttributeError : raise CannotValidate ( 'Set XSD to validate the XML' )\n", "title": "", "metadata": ""}
{"_id": "dc8205423f29758679adb9138ed57f26", "text": "def rand_elem ( seq , n = None ) : return map ( random . choice , repeat ( seq , n ) if n is not None else repeat ( seq ) )\n", "title": "", "metadata": ""}
{"_id": "7ca48a3c15ac699791336d7a86664dc0", "text": "def boxes_intersect ( box1 , box2 ) : xmin1 , xmax1 , ymin1 , ymax1 = box1 xmin2 , xmax2 , ymin2 , ymax2 = box2 if interval_intersection_width ( xmin1 , xmax1 , xmin2 , xmax2 ) and interval_intersection_width ( ymin1 , ymax1 , ymin2 , ymax2 ) : return True else : return False\n", "title": "", "metadata": ""}
{"_id": "9f5093c054ad81f9c3f960e828950294", "text": "def _count_leading_whitespace ( text ) : idx = 0 for idx , char in enumerate ( text ) : if not char . isspace ( ) : return idx return idx + 1\n", "title": "", "metadata": ""}
{"_id": "b8e5f6ade9e2f0cc195c10aa3861b9a7", "text": "def negate ( self ) : self . from_value , self . to_value = self . to_value , self . from_value self . include_lower , self . include_upper = self . include_upper , self . include_lower\n", "title": "", "metadata": ""}
{"_id": "10e836ff4160c3b5a3d9886efb895bbe", "text": "def _uptime_syllable ( ) : global __boottime try : __boottime = os . stat ( '/dev/pty/mst/pty0' ) . st_mtime return time . time ( ) - __boottime except ( NameError , OSError ) : return None\n", "title": "", "metadata": ""}
{"_id": "748d3f865ff2e90b2a0111a9f90a5e0c", "text": "def stop_button_click_handler ( self ) : self . stop_button . setDisabled ( True ) # Interrupt computations or stop debugging  if not self . shellwidget . _reading : self . interrupt_kernel ( ) else : self . shellwidget . write_to_stdin ( 'exit' )\n", "title": "", "metadata": ""}
{"_id": "a4fde803536756f5f68163745dd1dd22", "text": "def is_function ( self ) : if self . is_instance ( ) or self . is_class ( ) : return False return isinstance ( self . callback , ( Callable , classmethod ) )\n", "title": "", "metadata": ""}
{"_id": "4e5247fd5cd90266f5c6f6c0a0cf7337", "text": "def random_choice ( sequence ) : return random . choice ( tuple ( sequence ) if isinstance ( sequence , set ) else sequence )\n", "title": "", "metadata": ""}
{"_id": "68ee609300d02f818b120329cd5d20fb", "text": "def top_level ( url , fix_protocol = True ) : ext = tld . get_tld ( url , fix_protocol = fix_protocol ) toplevel = '.' . join ( urlparse ( url ) . netloc . split ( '.' ) [ - 2 : ] ) . split ( ext ) [ 0 ] + ext return toplevel\n", "title": "", "metadata": ""}
{"_id": "f83bcba6087771247ccdc5d2af21b065", "text": "def get_tree_type ( tree ) : tree_type = tree . label ( ) assert tree_type in SUBTREE_TYPES , \"tree_type: {}\" . format ( tree_type ) return tree_type\n", "title": "", "metadata": ""}
{"_id": "aa4df32b59287c874a32304ea24608ca", "text": "def is_not_null ( df : DataFrame , col_name : str ) -> bool : if ( isinstance ( df , pd . DataFrame ) and col_name in df . columns and df [ col_name ] . notnull ( ) . any ( ) ) : return True else : return False\n", "title": "", "metadata": ""}
{"_id": "b941f6cf5c250d9c9ff46acc8a9bd896", "text": "def smooth_array ( array , amount = 1 ) : if amount == 0 : return array # we have to store the old values in a temp array to keep the # smoothing from affecting the smoothing new_array = _n . array ( array ) for n in range ( len ( array ) ) : new_array [ n ] = smooth ( array , n , amount ) return new_array\n", "title": "", "metadata": ""}
{"_id": "f469e887b6b7188a510d2c6638e27b63", "text": "def disable_stdout_buffering ( ) : stdout_orig = sys . stdout sys . stdout = os . fdopen ( sys . stdout . fileno ( ) , 'w' , 0 ) # NOTE(brandyn): This removes the original stdout return stdout_orig\n", "title": "", "metadata": ""}
{"_id": "704afb154ddd7abc6eb6986ec74dc397", "text": "def is_json_file ( filename , show_warnings = False ) : try : config_dict = load_config ( filename , file_type = \"json\" ) is_json = True except : is_json = False return ( is_json )\n", "title": "", "metadata": ""}
{"_id": "950eb5e5618a10872f61e64db220e40c", "text": "def _tuple_repr ( data ) : if len ( data ) == 1 : return \"(%s,)\" % rpr ( data [ 0 ] ) else : return \"(%s)\" % \", \" . join ( [ rpr ( x ) for x in data ] )\n", "title": "", "metadata": ""}
{"_id": "87647ff9bae3b7bd6f4e05ee40c4cc42", "text": "def reset ( self ) : self . prevframe = None self . wasmoving = False self . t0 = 0 self . ismoving = False\n", "title": "", "metadata": ""}
{"_id": "9baebd2edf7ff99ab7dc2871f1f17c83", "text": "def __init__ ( self , capacity = 10 ) : super ( ) . __init__ ( ) self . _array = [ None ] * capacity self . _front = 0 self . _rear = 0\n", "title": "", "metadata": ""}
{"_id": "5b7e7abad0e2e5ca9d134e9413b9ff00", "text": "def process_bool_arg ( arg ) : if isinstance ( arg , bool ) : return arg elif isinstance ( arg , basestring ) : if arg . lower ( ) in [ \"true\" , \"1\" ] : return True elif arg . lower ( ) in [ \"false\" , \"0\" ] : return False\n", "title": "", "metadata": ""}
{"_id": "14eb08d01190b60a197a3f91261b1133", "text": "def aug_sysargv ( cmdstr ) : import shlex argv = shlex . split ( cmdstr ) sys . argv . extend ( argv )\n", "title": "", "metadata": ""}
{"_id": "bbf642c6f0029ee7285faf5d01a9b398", "text": "def notin ( arg , values ) : op = ops . NotContains ( arg , values ) return op . to_expr ( )\n", "title": "", "metadata": ""}
{"_id": "ab5959b215a4bf936262656511fb5bb7", "text": "def save_session_to_file ( self , sessionfile ) : pickle . dump ( requests . utils . dict_from_cookiejar ( self . _session . cookies ) , sessionfile )\n", "title": "", "metadata": ""}
{"_id": "f7bc2c3e8ffb1356b66885bf7fd72f98", "text": "def tree ( string , token = [ WORD , POS , CHUNK , PNP , REL , ANCHOR , LEMMA ] ) : return Text ( string , token )\n", "title": "", "metadata": ""}
{"_id": "1ea8c743b5ceaf65d92c134a590ba37b", "text": "def _get_user_agent ( self ) : user_agent = request . headers . get ( 'User-Agent' ) if user_agent : user_agent = user_agent . encode ( 'utf-8' ) return user_agent or ''\n", "title": "", "metadata": ""}
{"_id": "a2c55268514eb98766abe95e290c96a4", "text": "def finish_plot ( ) : plt . legend ( ) plt . grid ( color = '0.7' ) plt . xlabel ( 'x' ) plt . ylabel ( 'y' ) plt . show ( )\n", "title": "", "metadata": ""}
{"_id": "8eda259f9338a53aab85f3c85d76f770", "text": "def _is_initialized ( self , entity ) : return ( not self . _required or ( ( self . _has_value ( entity ) or self . _default is not None ) and self . _get_value ( entity ) is not None ) )\n", "title": "", "metadata": ""}
{"_id": "c1944c2914c195620af805782d6a07c1", "text": "def default_parser ( ) -> argparse . ArgumentParser : parser = argparse . ArgumentParser ( prog = CONSOLE_SCRIPT , formatter_class = argparse . ArgumentDefaultsHelpFormatter , ) build_parser ( parser ) return parser\n", "title": "", "metadata": ""}
{"_id": "8f67da806dd99cd72acdf0b953c7214f", "text": "def equal ( obj1 , obj2 ) : Comparable . log ( obj1 , obj2 , '==' ) equality = obj1 . equality ( obj2 ) Comparable . log ( obj1 , obj2 , '==' , result = equality ) return equality\n", "title": "", "metadata": ""}
{"_id": "44c75b050f548d2c0c9edc8ed1c4d930", "text": "def pop ( h ) : n = h . size ( ) - 1 h . swap ( 0 , n ) down ( h , 0 , n ) return h . pop ( )\n", "title": "", "metadata": ""}
{"_id": "44f3b1709156fecb6e635b9e6181a84b", "text": "def compressBuffer ( buffer ) : # http://jython.xhaus.com/http-compression-in-python-and-jython/ zbuf = cStringIO . StringIO ( ) zfile = gzip . GzipFile ( mode = 'wb' , fileobj = zbuf , compresslevel = 9 ) zfile . write ( buffer ) zfile . close ( ) return zbuf . getvalue ( )\n", "title": "", "metadata": ""}
{"_id": "e70436fbd13b2b3b6b66d923ca1c221f", "text": "def most_significant_bit ( lst : np . ndarray ) -> int : return np . argwhere ( np . asarray ( lst ) == 1 ) [ 0 ] [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "1437a2dc62be1f56aaf7dabeac426203", "text": "def parse_querystring ( self , req , name , field ) : return core . get_value ( req . args , name , field )\n", "title": "", "metadata": ""}
{"_id": "93f50d563933a50e2b98953194442eec", "text": "def list2dict ( lst ) : dic = { } for k , v in lst : dic [ k ] = v return dic\n", "title": "", "metadata": ""}
{"_id": "12edbb512ad0c556609f98e4ef2df850", "text": "def deserialize_date ( string ) : try : from dateutil . parser import parse return parse ( string ) . date ( ) except ImportError : return string\n", "title": "", "metadata": ""}
{"_id": "13971f1f7ace25419482c2bce52062c8", "text": "def tuple_search ( t , i , v ) : for e in t : if e [ i ] == v : return e return None\n", "title": "", "metadata": ""}
{"_id": "4439d8674ba9f3102acf1d8fe053ed98", "text": "def adapter ( data , headers , * * kwargs ) : keys = ( 'sep_title' , 'sep_character' , 'sep_length' ) return vertical_table ( data , headers , * * filter_dict_by_key ( kwargs , keys ) )\n", "title": "", "metadata": ""}
{"_id": "21dc9576dcc8a39d65ffdbe180b1dbf2", "text": "def __init__ ( self , operand , operator , * * args ) : # Note that it's currently not possible to set # parameters in the superclass when creating an instance, # because **args is used by this class itself. super ( UnaryOperator , self ) . __init__ ( ) self . operand = operand self . operator = operator self . args = args\n", "title": "", "metadata": ""}
{"_id": "86bbcadc4030e8d53c9dd99b8214d41e", "text": "def multi_replace ( instr , search_list = [ ] , repl_list = None ) : repl_list = [ '' ] * len ( search_list ) if repl_list is None else repl_list for ser , repl in zip ( search_list , repl_list ) : instr = instr . replace ( ser , repl ) return instr\n", "title": "", "metadata": ""}
{"_id": "090907ad3df7f49b646ff2a60286c64e", "text": "def do_serial ( self , p ) : try : self . serial . port = p self . serial . open ( ) print 'Opening serial port: %s' % p except Exception , e : print 'Unable to open serial port: %s' % p\n", "title": "", "metadata": ""}
{"_id": "24b027d4ff704621a539233a7296d5b8", "text": "def contains_empty ( features ) : if not features : return True for feature in features : if feature . shape [ 0 ] == 0 : return True return False\n", "title": "", "metadata": ""}
{"_id": "36798bef49b85bf5538518b0042821e6", "text": "def load_yaml ( filepath ) : with open ( filepath ) as f : txt = f . read ( ) return yaml . load ( txt )\n", "title": "", "metadata": ""}
{"_id": "785bfc00511692181394f528467519df", "text": "def show_tip ( self , tip = \"\" ) : QToolTip . showText ( self . mapToGlobal ( self . pos ( ) ) , tip , self )\n", "title": "", "metadata": ""}
{"_id": "e61557feeeabad7bdb99f8862a49814e", "text": "def _matrix3_to_dcm_array ( self , m ) : assert ( isinstance ( m , Matrix3 ) ) return np . array ( [ [ m . a . x , m . a . y , m . a . z ] , [ m . b . x , m . b . y , m . b . z ] , [ m . c . x , m . c . y , m . c . z ] ] )\n", "title": "", "metadata": ""}
{"_id": "c0ff2361d2caad6ab2654988ffc33e4f", "text": "def count ( args ) : counts = defaultdict ( int ) for arg in args : for item in arg : counts [ item ] = counts [ item ] + 1 return counts\n", "title": "", "metadata": ""}
{"_id": "40ae55b21faf092343bd222809aae5e9", "text": "def get_week_start_end_day ( ) : t = date . today ( ) wd = t . weekday ( ) return ( t - timedelta ( wd ) , t + timedelta ( 6 - wd ) )\n", "title": "", "metadata": ""}
{"_id": "5a5b2ec6d95a0895fea7f6380d3f7d3d", "text": "def parallel ( processes , threads ) : pool = multithread ( threads ) pool . map ( run_process , processes ) pool . close ( ) pool . join ( )\n", "title": "", "metadata": ""}
{"_id": "be51b0db5e3cde2d092d487b6b7ad366", "text": "def timeit ( func , log , limit ) : def newfunc ( * args , * * kwargs ) : \"\"\"Execute function and print execution time.\"\"\" t = time . time ( ) res = func ( * args , * * kwargs ) duration = time . time ( ) - t if duration > limit : print ( func . __name__ , \"took %0.2f seconds\" % duration , file = log ) print ( args , file = log ) print ( kwargs , file = log ) return res return update_func_meta ( newfunc , func )\n", "title": "", "metadata": ""}
{"_id": "11c9ab50aa4eaf096914a72149ec5db7", "text": "def tail ( filename , number_of_bytes ) : with open ( filename , \"rb\" ) as f : if os . stat ( filename ) . st_size > number_of_bytes : f . seek ( - number_of_bytes , 2 ) return f . read ( )\n", "title": "", "metadata": ""}
{"_id": "c3690c8cfd00681c04c48ee21575b139", "text": "def update_dict ( obj , dict , attributes ) : for attribute in attributes : if hasattr ( obj , attribute ) and getattr ( obj , attribute ) is not None : dict [ attribute ] = getattr ( obj , attribute )\n", "title": "", "metadata": ""}
{"_id": "83d30e57c98f9436fcdad97f02222585", "text": "def is_int ( string ) : try : a = float ( string ) b = int ( a ) except ValueError : return False else : return a == b\n", "title": "", "metadata": ""}
{"_id": "2008fdc14240119ba45f6e9fb2883e30", "text": "def _query_for_reverse_geocoding ( lat , lng ) : # have to do some stupid f/Decimal/str stuff to (a) ensure we get as much # decimal places as the user already specified and (b) to ensure we don't # get e-5 stuff return \"{0:f},{1:f}\" . format ( Decimal ( str ( lat ) ) , Decimal ( str ( lng ) ) )\n", "title": "", "metadata": ""}
{"_id": "6034f2a109916e24c2ac398801ad1164", "text": "def index_nearest ( value , array ) : a = ( array - value ) ** 2 return index ( a . min ( ) , a )\n", "title": "", "metadata": ""}
{"_id": "22c459c5541a27643465f2bc0dfb1e02", "text": "def unique ( _list ) : ret = [ ] for item in _list : if item not in ret : ret . append ( item ) return ret\n", "title": "", "metadata": ""}
{"_id": "b142b2f66684b033af6d2cf3ec5c9369", "text": "def conv_block ( inputs , filters , dilation_rates_and_kernel_sizes , * * kwargs ) : return conv_block_internal ( conv , inputs , filters , dilation_rates_and_kernel_sizes , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "72bbe98c1cd999024541e14426ade7c7", "text": "def move_back ( self , dt ) : self . _position = self . _old_position self . rect . topleft = self . _position self . feet . midbottom = self . rect . midbottom\n", "title": "", "metadata": ""}
{"_id": "19a5555a981c116b067c5af4bc22c4e3", "text": "def text ( value , encoding = \"utf-8\" , errors = \"strict\" ) : if isinstance ( value , text_type ) : return value elif isinstance ( value , bytes ) : return text_type ( value , encoding , errors ) else : return text_type ( value )\n", "title": "", "metadata": ""}
{"_id": "37f3ed2efa2705b4a7cc27e942000670", "text": "def store_many ( self , sql , values ) : cursor = self . get_cursor ( ) cursor . executemany ( sql , values ) self . conn . commit ( )\n", "title": "", "metadata": ""}
{"_id": "ff2f6c7bd9b52306efc6a7f99c91c0fc", "text": "def _loadfilepath ( self , filepath , * * kwargs ) : with open ( filepath , \"r\" ) as f : data = json . load ( f , * * kwargs ) return data\n", "title": "", "metadata": ""}
{"_id": "369d5134085f1ef41bb803ffcca9fa32", "text": "def linear_variogram_model ( m , d ) : slope = float ( m [ 0 ] ) nugget = float ( m [ 1 ] ) return slope * d + nugget\n", "title": "", "metadata": ""}
{"_id": "de41ada6a616a7686d1a810852e1145e", "text": "def calculate_top_margin ( self ) : self . border_top = 5 if self . show_graph_title : self . border_top += self . title_font_size self . border_top += 5 if self . show_graph_subtitle : self . border_top += self . subtitle_font_size\n", "title": "", "metadata": ""}
{"_id": "a4c69ac34891b094ef709755de594779", "text": "def executable_exists ( executable ) : for directory in os . getenv ( \"PATH\" ) . split ( \":\" ) : if os . path . exists ( os . path . join ( directory , executable ) ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "5516829bd26bcf76a27c6899d1e15cac", "text": "def substitute ( dict_ , source ) : d_esc = ( re . escape ( k ) for k in dict_ . keys ( ) ) pattern = re . compile ( '|' . join ( d_esc ) ) return pattern . sub ( lambda x : dict_ [ x . group ( ) ] , source )\n", "title": "", "metadata": ""}
{"_id": "d4db2a79437b18be009e026e25b1d33f", "text": "def Sum ( a , axis , keep_dims ) : return np . sum ( a , axis = axis if not isinstance ( axis , np . ndarray ) else tuple ( axis ) , keepdims = keep_dims ) ,\n", "title": "", "metadata": ""}
{"_id": "5ebb689fc9e14099f059e3db69e24359", "text": "async def i2c_write_request ( self , command ) : device_address = int ( command [ 0 ] ) params = command [ 1 ] params = [ int ( i ) for i in params ] await self . core . i2c_write_request ( device_address , params )\n", "title": "", "metadata": ""}
{"_id": "aa7b79b55d8fa9b67946f495fa88a824", "text": "def OnRootView ( self , event ) : self . adapter , tree , rows = self . RootNode ( ) self . squareMap . SetModel ( tree , self . adapter ) self . RecordHistory ( ) self . ConfigureViewTypeChoices ( )\n", "title": "", "metadata": ""}
{"_id": "2f9e4d08e0883781a997524258d3efc8", "text": "def irecarray_to_py ( a ) : pytypes = [ pyify ( typestr ) for name , typestr in a . dtype . descr ] def convert_record ( r ) : return tuple ( [ converter ( value ) for converter , value in zip ( pytypes , r ) ] ) return ( convert_record ( r ) for r in a )\n", "title": "", "metadata": ""}
{"_id": "fd64ab31cf44ccb69b23c9351711cbae", "text": "def is_password_valid ( password ) : pattern = re . compile ( r\"^.{4,75}$\" ) return bool ( pattern . match ( password ) )\n", "title": "", "metadata": ""}
{"_id": "e7425d926d497abfa95a0fff1eef6770", "text": "def round_array ( array_in ) : if isinstance ( array_in , ndarray ) : return np . round ( array_in ) . astype ( int ) else : return int ( np . round ( array_in ) )\n", "title": "", "metadata": ""}
