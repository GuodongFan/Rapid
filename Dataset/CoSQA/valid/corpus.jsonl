{"_id": "93a84df2054674d0e43b41e16aed0700", "text": "def ub_to_str ( string ) : if not isinstance ( string , str ) : if six . PY2 : return str ( string ) else : return string . decode ( ) return string\n", "title": "", "metadata": ""}
{"_id": "b36c190631154daead0d1ee038de03de", "text": "def is_same_file ( filename1 , filename2 ) : if filename1 == filename2 : return True if os . name == 'posix' : return os . path . samefile ( filename1 , filename2 ) return is_same_filename ( filename1 , filename2 )\n", "title": "", "metadata": ""}
{"_id": "277582780aaa8aecd71acc4a41ad9f07", "text": "def align_file_position ( f , size ) : align = ( size - 1 ) - ( f . tell ( ) % size ) f . seek ( align , 1 )\n", "title": "", "metadata": ""}
{"_id": "43a76fc9d1e6f8a9a17e6ed1f43e01fe", "text": "def force_iterable ( f ) : def wrapper ( * args , * * kwargs ) : r = f ( * args , * * kwargs ) if hasattr ( r , '__iter__' ) : return r else : return [ r ] return wrapper\n", "title": "", "metadata": ""}
{"_id": "ead98a745a75ecc76f7d097ff77b61e7", "text": "def list_to_str ( list , separator = ',' ) : list = [ str ( x ) for x in list ] return separator . join ( list )\n", "title": "", "metadata": ""}
{"_id": "80e4c640961ab3740cda0e09325ae653", "text": "def get_window_dim ( ) : version = sys . version_info if version >= ( 3 , 3 ) : return _size_36 ( ) if platform . system ( ) == 'Windows' : return _size_windows ( ) return _size_27 ( )\n", "title": "", "metadata": ""}
{"_id": "891630500b632e7f90faeb504ef142e0", "text": "def title ( self ) : with switch_window ( self . _browser , self . name ) : return self . _browser . title\n", "title": "", "metadata": ""}
{"_id": "4c97f6a869fb5e65643ff2fc41bc1aa0", "text": "def proper_round ( n ) : return int ( n ) + ( n / abs ( n ) ) * int ( abs ( n - int ( n ) ) >= 0.5 ) if n != 0 else 0\n", "title": "", "metadata": ""}
{"_id": "271b2703d9e4230cab5bd4cb9b706172", "text": "def get_last_modified_timestamp ( self ) : cmd = \"find . -print0 | xargs -0 stat -f '%T@ %p' | sort -n | tail -1 | cut -f2- -d' '\" ps = subprocess . Popen ( cmd , shell = True , stdout = subprocess . PIPE , stderr = subprocess . STDOUT ) output = ps . communicate ( ) [ 0 ] print output\n", "title": "", "metadata": ""}
{"_id": "83d30e57c98f9436fcdad97f02222585", "text": "def is_int ( string ) : try : a = float ( string ) b = int ( a ) except ValueError : return False else : return a == b\n", "title": "", "metadata": ""}
{"_id": "b0e57bbec8a0a8e3707c40d10d57a85a", "text": "def strip_querystring ( url ) : p = six . moves . urllib . parse . urlparse ( url ) return p . scheme + \"://\" + p . netloc + p . path\n", "title": "", "metadata": ""}
{"_id": "94d0232be0ba6170de8551e882cfcfd8", "text": "def is_valid_regex ( regex ) : if len ( regex ) == 0 : return False try : re . compile ( regex ) return True except sre_constants . error : return False\n", "title": "", "metadata": ""}
{"_id": "7788019c6dce81645692e9c28b02e610", "text": "def _write_json ( file , contents ) : with open ( file , 'w' ) as f : return json . dump ( contents , f , indent = 2 , sort_keys = True )\n", "title": "", "metadata": ""}
{"_id": "806d8b44cc787945dc23580880b507f6", "text": "def unique ( list ) : unique = [ ] [ unique . append ( x ) for x in list if x not in unique ] return unique\n", "title": "", "metadata": ""}
{"_id": "63445ff83b21f146a950e9ca3e8299db", "text": "def hex_to_int ( value ) : if version_info . major >= 3 : return int . from_bytes ( value , \"big\" ) return int ( value . encode ( \"hex\" ) , 16 )\n", "title": "", "metadata": ""}
{"_id": "46052d256e0bd139b06c73a0cde8c7c8", "text": "def _init_glyph ( self , plot , mapping , properties ) : properties = mpl_to_bokeh ( properties ) plot_method = self . _plot_methods . get ( 'batched' if self . batched else 'single' ) if isinstance ( plot_method , tuple ) : # Handle alternative plot method for flipped axes plot_method = plot_method [ int ( self . invert_axes ) ] renderer = getattr ( plot , plot_method ) ( * * dict ( properties , * * mapping ) ) return renderer , renderer . glyph\n", "title": "", "metadata": ""}
{"_id": "3098bac1b4bfb209a9c0d843efa99b89", "text": "def simple_generate ( cls , create , * * kwargs ) : strategy = enums . CREATE_STRATEGY if create else enums . BUILD_STRATEGY return cls . generate ( strategy , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "07612bf633d972ea56827f46d79c2b70", "text": "def file_empty ( fp ) : # for python 2 we need to use a homemade peek() if six . PY2 : contents = fp . read ( ) fp . seek ( 0 ) return not bool ( contents ) else : return not fp . peek ( )\n", "title": "", "metadata": ""}
{"_id": "b8ebde7f0e96cc9a56eb3bfd95874ee9", "text": "def all_strings ( arr ) : if not isinstance ( [ ] , list ) : raise TypeError ( \"non-list value found where list is expected\" ) return all ( isinstance ( x , str ) for x in arr )\n", "title": "", "metadata": ""}
{"_id": "e741a153395f2db217d9554b608913cf", "text": "def full_s ( self ) : x = np . zeros ( ( self . shape ) , dtype = np . float32 ) x [ : self . s . shape [ 0 ] , : self . s . shape [ 0 ] ] = self . s . as_2d s = Matrix ( x = x , row_names = self . row_names , col_names = self . col_names , isdiagonal = False , autoalign = False ) return s\n", "title": "", "metadata": ""}
{"_id": "4ac038800d9d7c35ad57d99be3d36355", "text": "def _split_comma_separated ( string ) : return set ( text . strip ( ) for text in string . split ( ',' ) if text . strip ( ) )\n", "title": "", "metadata": ""}
{"_id": "76d577b346859863f2683e71175ba01d", "text": "def argmax ( self , rows : List [ Row ] , column : ComparableColumn ) -> List [ Row ] : if not rows : return [ ] value_row_pairs = [ ( row . values [ column . name ] , row ) for row in rows ] if not value_row_pairs : return [ ] # Returns a list containing the row with the max cell value. return [ sorted ( value_row_pairs , key = lambda x : x [ 0 ] , reverse = True ) [ 0 ] [ 1 ] ]\n", "title": "", "metadata": ""}
{"_id": "696b914a58e9746e21914a9e533a13cb", "text": "def maybe_infer_dtype_type ( element ) : tipo = None if hasattr ( element , 'dtype' ) : tipo = element . dtype elif is_list_like ( element ) : element = np . asarray ( element ) tipo = element . dtype return tipo\n", "title": "", "metadata": ""}
{"_id": "9a4d3ca206f491e08ecefd6549e9f480", "text": "def _covariance_matrix ( self , type = 'noise' ) : if type == 'sampling' : return self . sigma ** 2 / ( self . n - 1 ) elif type == 'noise' : return 4 * self . sigma * N . var ( self . rotated ( ) , axis = 0 )\n", "title": "", "metadata": ""}
{"_id": "15e4d07344208d1d9745315ae5b573c8", "text": "async def restart ( request ) : def wait_and_restart ( ) : log . info ( 'Restarting server' ) sleep ( 1 ) os . system ( 'kill 1' ) Thread ( target = wait_and_restart ) . start ( ) return web . json_response ( { \"message\" : \"restarting\" } )\n", "title": "", "metadata": ""}
{"_id": "2dbe2e5cfc27b147125556eb22370b6e", "text": "def hamming ( s , t ) : if len ( s ) != len ( t ) : raise ValueError ( 'Hamming distance needs strings of equal length.' ) return sum ( s_ != t_ for s_ , t_ in zip ( s , t ) )\n", "title": "", "metadata": ""}
{"_id": "03df61ce7a4e39324e1164afb382397d", "text": "def hflip ( img ) : if not _is_pil_image ( img ) : raise TypeError ( 'img should be PIL Image. Got {}' . format ( type ( img ) ) ) return img . transpose ( Image . FLIP_LEFT_RIGHT )\n", "title": "", "metadata": ""}
{"_id": "d8c52f279b8ddf27e9c6da1b0530c135", "text": "def normalized ( vector ) : length = numpy . sum ( vector * vector , axis = - 1 ) length = numpy . sqrt ( length . reshape ( length . shape + ( 1 , ) ) ) return vector / length\n", "title": "", "metadata": ""}
{"_id": "d09191015297a4e1823bb3063130c638", "text": "def _bytes_to_json ( value ) : if isinstance ( value , bytes ) : value = base64 . standard_b64encode ( value ) . decode ( \"ascii\" ) return value\n", "title": "", "metadata": ""}
{"_id": "949576976d1917a62fd3e03d0b0d020f", "text": "def is_relative_url ( url ) : if url . startswith ( \"#\" ) : return None if url . find ( \"://\" ) > 0 or url . startswith ( \"//\" ) : # either 'http(s)://...' or '//cdn...' and therefore absolute return False return True\n", "title": "", "metadata": ""}
{"_id": "85496448cdeef9bdb34fc6272e813804", "text": "def get_bin_indices ( self , values ) : return tuple ( [ self . get_axis_bin_index ( values [ ax_i ] , ax_i ) for ax_i in range ( self . dimensions ) ] )\n", "title": "", "metadata": ""}
{"_id": "fb37979ad4c1d4629324c7dc2816e496", "text": "def connect_mysql ( host , port , user , password , database ) : return pymysql . connect ( host = host , port = port , user = user , passwd = password , db = database )\n", "title": "", "metadata": ""}
{"_id": "b7da387c76b2ebdf9377f87db82d27d4", "text": "def to_snake_case ( text ) : s1 = re . sub ( '(.)([A-Z][a-z]+)' , r'\\1_\\2' , text ) return re . sub ( '([a-z0-9])([A-Z])' , r'\\1_\\2' , s1 ) . lower ( )\n", "title": "", "metadata": ""}
{"_id": "a417c56d6428705f57746473ac6b0e80", "text": "def kill_process_children ( pid ) : if sys . platform == \"darwin\" : kill_process_children_osx ( pid ) elif sys . platform == \"linux\" : kill_process_children_unix ( pid ) else : pass\n", "title": "", "metadata": ""}
{"_id": "55074db162b8e9b85d025f930080965a", "text": "def into2dBlocks ( arr , n0 , n1 ) : s0 , s1 = arr . shape b = blockshaped ( arr , s0 // n0 , s1 // n1 ) return b . reshape ( n0 , n1 , * b . shape [ 1 : ] )\n", "title": "", "metadata": ""}
{"_id": "c7b7b49fb8f3974b802f66728e10edb7", "text": "def pack_bits ( longbits ) : byte = longbits & ( 0x0101010101010101 ) byte = ( byte | ( byte >> 7 ) ) & ( 0x0003000300030003 ) byte = ( byte | ( byte >> 14 ) ) & ( 0x0000000f0000000f ) byte = ( byte | ( byte >> 28 ) ) & ( 0x00000000000000ff ) return byte\n", "title": "", "metadata": ""}
{"_id": "06cd16f60cef3c75d7284c5c93406f12", "text": "def is_valid_image_extension ( file_path ) : valid_extensions = [ '.jpeg' , '.jpg' , '.gif' , '.png' ] _ , extension = os . path . splitext ( file_path ) return extension . lower ( ) in valid_extensions\n", "title": "", "metadata": ""}
{"_id": "ea5b10cf095080fa88876c3bb07d1376", "text": "def stop ( self , timeout = None ) : self . stopping = True for process in list ( self . processes ) : self . stop_process ( process , timeout = timeout )\n", "title": "", "metadata": ""}
{"_id": "4fa596be101a5eba337c6d9459cf4eb8", "text": "def distinct ( xs ) : # don't use collections.OrderedDict because we do support Python 2.6 seen = set ( ) return [ x for x in xs if x not in seen and not seen . add ( x ) ]\n", "title": "", "metadata": ""}
{"_id": "2a9a76f872062fe2d55a49090dea6591", "text": "def isin ( elems , line ) : found = False for e in elems : if e in line . lower ( ) : found = True break return found\n", "title": "", "metadata": ""}
{"_id": "2f935d81d15268a8957c820f3fc4a74f", "text": "def compute_boxplot ( self , series ) : from matplotlib . cbook import boxplot_stats series = series [ series . notnull ( ) ] if len ( series . values ) == 0 : return { } elif not is_numeric_dtype ( series ) : return self . non_numeric_stats ( series ) stats = boxplot_stats ( list ( series . values ) ) [ 0 ] stats [ 'count' ] = len ( series . values ) stats [ 'fliers' ] = \"|\" . join ( map ( str , stats [ 'fliers' ] ) ) return stats\n", "title": "", "metadata": ""}
{"_id": "b24d602fd520fdc3a71cbecc50bdf591", "text": "def MoveWindow ( handle : int , x : int , y : int , width : int , height : int , repaint : int = 1 ) -> bool : return bool ( ctypes . windll . user32 . MoveWindow ( ctypes . c_void_p ( handle ) , x , y , width , height , repaint ) )\n", "title": "", "metadata": ""}
{"_id": "37309b8dfcf5f82c81fbdea06f422b8d", "text": "def _mean_dict ( dict_list ) : return { k : np . array ( [ d [ k ] for d in dict_list ] ) . mean ( ) for k in dict_list [ 0 ] . keys ( ) }\n", "title": "", "metadata": ""}
{"_id": "ce293ff2a2c3f3e1c6ba0f96ea250a0e", "text": "def print_env_info ( key , out = sys . stderr ) : value = os . getenv ( key ) if value is not None : print ( key , \"=\" , repr ( value ) , file = out )\n", "title": "", "metadata": ""}
{"_id": "2414808b39353a013cd3bae68924e225", "text": "def _eq ( self , other ) : return ( self . type , self . value ) == ( other . type , other . value )\n", "title": "", "metadata": ""}
{"_id": "fa73ef3588c0fa01f7c95887e328594a", "text": "def get_trace_id_from_flask ( ) : if flask is None or not flask . request : return None header = flask . request . headers . get ( _FLASK_TRACE_HEADER ) if header is None : return None trace_id = header . split ( \"/\" , 1 ) [ 0 ] return trace_id\n", "title": "", "metadata": ""}
{"_id": "504228527d98eac9c705fd5a44cda926", "text": "def process_docstring ( app , what , name , obj , options , lines ) : # pylint: disable=unused-argument # pylint: disable=too-many-arguments lines . extend ( _format_contracts ( what = what , obj = obj ) )\n", "title": "", "metadata": ""}
{"_id": "740d96d67930ca3dd9a9ed7e28f17b11", "text": "def set_executable ( filename ) : st = os . stat ( filename ) os . chmod ( filename , st . st_mode | stat . S_IEXEC )\n", "title": "", "metadata": ""}
{"_id": "35868aeb780dc9cb9e29d7806506b07c", "text": "def calculate_month ( birth_date ) : year = int ( birth_date . strftime ( '%Y' ) ) month = int ( birth_date . strftime ( '%m' ) ) + ( ( int ( year / 100 ) - 14 ) % 5 ) * 20 return month\n", "title": "", "metadata": ""}
{"_id": "f74d856ec5ef4634ac4fc1324380c0da", "text": "def is_identifier ( string ) : matched = PYTHON_IDENTIFIER_RE . match ( string ) return bool ( matched ) and not keyword . iskeyword ( string )\n", "title": "", "metadata": ""}
{"_id": "687dfa3a7cd8cb4e39aeb1b9c64cdfc3", "text": "def split_every ( iterable , n ) : # TODO: Remove this, or make it return a generator. i = iter ( iterable ) piece = list ( islice ( i , n ) ) while piece : yield piece piece = list ( islice ( i , n ) )\n", "title": "", "metadata": ""}
{"_id": "7455d6c99ce4eeb532ba529bcdcf7248", "text": "def doc_parser ( ) : parser = argparse . ArgumentParser ( prog = 'ambry' , description = 'Ambry {}. Management interface for ambry, libraries ' 'and repositories. ' . format ( ambry . _meta . __version__ ) ) return parser\n", "title": "", "metadata": ""}
{"_id": "d1ac0a25d88368458f32a4d4ce3f88c2", "text": "def to_list ( var ) : if var is None : return [ ] if isinstance ( var , str ) : var = var . split ( '\\n' ) elif not isinstance ( var , list ) : try : var = list ( var ) except TypeError : raise ValueError ( \"{} cannot be converted to the list.\" . format ( var ) ) return var\n", "title": "", "metadata": ""}
{"_id": "e8e8acc635bed06fe07dcf541a79f6a7", "text": "def get_mouse_location ( self ) : x = ctypes . c_int ( 0 ) y = ctypes . c_int ( 0 ) screen_num = ctypes . c_int ( 0 ) _libxdo . xdo_get_mouse_location ( self . _xdo , ctypes . byref ( x ) , ctypes . byref ( y ) , ctypes . byref ( screen_num ) ) return mouse_location ( x . value , y . value , screen_num . value )\n", "title": "", "metadata": ""}
{"_id": "27cb8f40a7396a69474730922c347ab0", "text": "def is_iterable_but_not_string ( obj ) : return hasattr ( obj , '__iter__' ) and not isinstance ( obj , str ) and not isinstance ( obj , bytes )\n", "title": "", "metadata": ""}
{"_id": "1edd4e02362e16fa6ca370d6d09b2863", "text": "def wordfreq ( text , is_filename = False ) : if is_filename : with open ( text ) as f : text = f . read ( ) freqs = { } for word in text . split ( ) : lword = word . lower ( ) freqs [ lword ] = freqs . get ( lword , 0 ) + 1 return freqs\n", "title": "", "metadata": ""}
{"_id": "36798bef49b85bf5538518b0042821e6", "text": "def load_yaml ( filepath ) : with open ( filepath ) as f : txt = f . read ( ) return yaml . load ( txt )\n", "title": "", "metadata": ""}
{"_id": "b4b214ebf75b6ac526fc36f1734e9dcb", "text": "def has_table ( self , name ) : return len ( self . sql ( \"SELECT name FROM sqlite_master WHERE type='table' AND name=?\" , parameters = ( name , ) , asrecarray = False , cache = False ) ) > 0\n", "title": "", "metadata": ""}
{"_id": "2cb91d9a760fa88f722b7b0e7ec4f896", "text": "def unique ( seq ) : cleaned = [ ] for each in seq : if each not in cleaned : cleaned . append ( each ) return cleaned\n", "title": "", "metadata": ""}
{"_id": "0698b5c36a6b4404656e6f444d74646a", "text": "def calculate_size ( name , max_size ) : data_size = 0 data_size += calculate_size_str ( name ) data_size += INT_SIZE_IN_BYTES return data_size\n", "title": "", "metadata": ""}
{"_id": "de194b043cd7b8ac31f9d944bf6d932b", "text": "def get_uniques ( l ) : result = [ ] for i in l : if i not in result : result . append ( i ) return result\n", "title": "", "metadata": ""}
{"_id": "4e5247fd5cd90266f5c6f6c0a0cf7337", "text": "def random_choice ( sequence ) : return random . choice ( tuple ( sequence ) if isinstance ( sequence , set ) else sequence )\n", "title": "", "metadata": ""}
{"_id": "d59c77f5a682d12a0fd2fdee3d7f61d0", "text": "def get ( self , key ) : res = self . connection . get ( key ) print ( res ) return res\n", "title": "", "metadata": ""}
{"_id": "263e264f10f905fc481ac98cb052e6ee", "text": "def HttpResponse401 ( request , template = KEY_AUTH_401_TEMPLATE , content = KEY_AUTH_401_CONTENT , content_type = KEY_AUTH_401_CONTENT_TYPE ) : return AccessFailedResponse ( request , template , content , content_type , status = 401 )\n", "title": "", "metadata": ""}
{"_id": "d23797a3a9ef3550e5812d6b26dc9ec4", "text": "def _get_local_ip ( ) : return set ( [ x [ 4 ] [ 0 ] for x in socket . getaddrinfo ( socket . gethostname ( ) , 80 , socket . AF_INET ) ] ) . pop ( )\n", "title": "", "metadata": ""}
{"_id": "e3ec0c55f92f177f579b90b54dfc6dc4", "text": "def format_prettytable ( table ) : for i , row in enumerate ( table . rows ) : for j , item in enumerate ( row ) : table . rows [ i ] [ j ] = format_output ( item ) ptable = table . prettytable ( ) ptable . hrules = prettytable . FRAME ptable . horizontal_char = '.' ptable . vertical_char = ':' ptable . junction_char = ':' return ptable\n", "title": "", "metadata": ""}
{"_id": "7bff0651054034b5b27084364797c82b", "text": "def remove_blank_lines ( string ) : return \"\\n\" . join ( line for line in string . split ( \"\\n\" ) if len ( line . strip ( ) ) )\n", "title": "", "metadata": ""}
{"_id": "c0ff2361d2caad6ab2654988ffc33e4f", "text": "def count ( args ) : counts = defaultdict ( int ) for arg in args : for item in arg : counts [ item ] = counts [ item ] + 1 return counts\n", "title": "", "metadata": ""}
{"_id": "f1e572ea11e6715023fc228b58860615", "text": "def __remove_trailing_zeros ( self , collection ) : index = len ( collection ) - 1 while index >= 0 and collection [ index ] == 0 : index -= 1 return collection [ : index + 1 ]\n", "title": "", "metadata": ""}
{"_id": "6f87fc789a5f6384432c943f330a31a5", "text": "def write_line ( self , line , count = 1 ) : self . write ( line ) self . write_newlines ( count )\n", "title": "", "metadata": ""}
{"_id": "6bca691cda5907670028a60ca9771367", "text": "def timedcall ( executable_function , * args ) : time_start = time . clock ( ) result = executable_function ( * args ) time_end = time . clock ( ) return ( time_end - time_start , result )\n", "title": "", "metadata": ""}
{"_id": "7ca0ad542bed0952e5bcfb4bf66814cb", "text": "def decompress ( f ) : r = meta ( f . read ( 60 ) ) return r , decomprest ( f , r [ 4 ] )\n", "title": "", "metadata": ""}
{"_id": "787efacbe8969199df3d86c301392f9f", "text": "def main ( args = sys . argv ) : parser = create_optparser ( args [ 0 ] ) return cli ( parser . parse_args ( args [ 1 : ] ) )\n", "title": "", "metadata": ""}
{"_id": "1fecf06de14bdca77f5b3a9806d36a87", "text": "def jac ( x , a ) : return ( x - a ) / np . sqrt ( ( ( x - a ) ** 2 ) . sum ( 1 ) ) [ : , np . newaxis ]\n", "title": "", "metadata": ""}
{"_id": "ee5628e94604f7a8443e3eb7e23b9805", "text": "def md5_hash_file ( fh ) : md5 = hashlib . md5 ( ) while True : data = fh . read ( 8192 ) if not data : break md5 . update ( data ) return md5 . hexdigest ( )\n", "title": "", "metadata": ""}
{"_id": "02fe6d2d980c86b110fb583951eabad2", "text": "def construct_from_string ( cls , string ) : if string == cls . name : return cls ( ) raise TypeError ( \"Cannot construct a '{}' from \" \"'{}'\" . format ( cls , string ) )\n", "title": "", "metadata": ""}
{"_id": "e7cf6bc0a385b6b1de8023edb2d8f1ed", "text": "def get_func_name ( func ) : func_name = getattr ( func , '__name__' , func . __class__ . __name__ ) module_name = func . __module__ if module_name is not None : module_name = func . __module__ return '{}.{}' . format ( module_name , func_name ) return func_name\n", "title": "", "metadata": ""}
{"_id": "663a0217760ff5f53364f97d9b99de72", "text": "def trigger ( self , target : str , trigger : str , parameters : Dict [ str , Any ] = { } ) : pass\n", "title": "", "metadata": ""}
{"_id": "5bb5fd5a2a9c9eac655ad3daaa9c6f0e", "text": "def _clone_properties ( self ) : cls = self . __class__ if self . _properties is cls . _properties : self . _properties = dict ( cls . _properties )\n", "title": "", "metadata": ""}
{"_id": "e2a302c96ec339d6fc9ae43dd674aa13", "text": "def find_number ( regex , s ) : result = find_string ( regex , s ) if result is None : return None return int ( result )\n", "title": "", "metadata": ""}
{"_id": "0dc777b31dd6877865638a1813d9bddb", "text": "def upcaseTokens ( s , l , t ) : return [ tt . upper ( ) for tt in map ( _ustr , t ) ]\n", "title": "", "metadata": ""}
{"_id": "c4ae1b9a96de8f0a8e860f6d73d2ec80", "text": "def timeout_thread_handler ( timeout , stop_event ) : stop_happened = stop_event . wait ( timeout ) if stop_happened is False : print ( \"Killing program due to %f second timeout\" % timeout ) os . _exit ( 2 )\n", "title": "", "metadata": ""}
{"_id": "f446daf45d308b7af8b05ba4bb2694a5", "text": "def ParseMany ( text ) : precondition . AssertType ( text , Text ) if compatibility . PY2 : text = text . encode ( \"utf-8\" ) return list ( yaml . safe_load_all ( text ) )\n", "title": "", "metadata": ""}
{"_id": "bc1559b0653d297174ef1861830763dc", "text": "def isnamedtuple ( obj ) : return isinstance ( obj , tuple ) and hasattr ( obj , \"_fields\" ) and hasattr ( obj , \"_asdict\" ) and callable ( obj . _asdict )\n", "title": "", "metadata": ""}
{"_id": "ab0d205defe659a9f110190ec13af8c8", "text": "def cookies ( self ) -> Dict [ str , str ] : cookies = SimpleCookie ( ) cookies . load ( self . headers . get ( 'Cookie' , '' ) ) return { key : cookie . value for key , cookie in cookies . items ( ) }\n", "title": "", "metadata": ""}
{"_id": "d4e6c130dcc05ee56bdb3c9eb1db7cf8", "text": "def _join_masks_from_masked_array ( data ) : if not isinstance ( data . mask , np . ndarray ) : # workaround to handle mask compressed to single value mask = np . empty ( data . data . shape , dtype = np . bool ) mask . fill ( data . mask ) return mask mask = data . mask [ 0 ] . copy ( ) for i in range ( 1 , len ( data . mask ) ) : mask = np . logical_or ( mask , data . mask [ i ] ) return mask [ np . newaxis , : , : ]\n", "title": "", "metadata": ""}
{"_id": "2efe4bb292da819d284473eac4e25d59", "text": "def lognorm ( x , mu , sigma = 1.0 ) : return stats . lognorm ( sigma , scale = mu ) . pdf ( x )\n", "title": "", "metadata": ""}
{"_id": "077bc2a3cfdac8f14d437340c7a75ae1", "text": "def stop ( pid ) : if psutil . pid_exists ( pid ) : try : p = psutil . Process ( pid ) p . kill ( ) except Exception : pass\n", "title": "", "metadata": ""}
{"_id": "915cd83e9d0548e8584d4f19f5ad907f", "text": "def set_color ( self , fg = None , bg = None , intensify = False , target = sys . stdout ) : raise NotImplementedError\n", "title": "", "metadata": ""}
{"_id": "00d2ddf738fc08b0fee7761150c49a06", "text": "def batchify ( data , batch_size ) : nbatch = data . shape [ 0 ] // batch_size data = data [ : nbatch * batch_size ] data = data . reshape ( ( batch_size , nbatch ) ) . T return data\n", "title": "", "metadata": ""}
{"_id": "08fb1197204efd178b3dc65560afdf8f", "text": "def sample_colormap ( cmap_name , n_samples ) : colors = [ ] colormap = cm . cmap_d [ cmap_name ] for i in np . linspace ( 0 , 1 , n_samples ) : colors . append ( colormap ( i ) ) return colors\n", "title": "", "metadata": ""}
{"_id": "d88ca409d942876503ae2950a13d70a4", "text": "def input_int_default ( question = \"\" , default = 0 ) : answer = input_string ( question ) if answer == \"\" or answer == \"yes\" : return default else : return int ( answer )\n", "title": "", "metadata": ""}
{"_id": "1b8898d88c7d3c0a030e5a033ff64397", "text": "def __init__ ( self , name , flag , * * kwargs ) : self . name = name self . flag = flag self . options = kwargs\n", "title": "", "metadata": ""}
{"_id": "910df055af24d351ce732c10fb55c054", "text": "def cli_command_quit ( self , msg ) : if self . state == State . RUNNING and self . sprocess and self . sprocess . proc : self . sprocess . proc . kill ( ) else : sys . exit ( 0 )\n", "title": "", "metadata": ""}
{"_id": "91055ee9738860f04b0212bfb2dcf89f", "text": "def _escape ( s ) : e = s e = e . replace ( '\\\\' , '\\\\\\\\' ) e = e . replace ( '\\n' , '\\\\n' ) e = e . replace ( '\\r' , '\\\\r' ) e = e . replace ( \"'\" , \"\\\\'\" ) e = e . replace ( '\"' , '\\\\\"' ) return e\n", "title": "", "metadata": ""}
{"_id": "497ba452847158ec919bdc6eb0a450c8", "text": "def ts_func ( f ) : def wrap_func ( df , * args ) : # TODO: should vectorize to apply over all columns? return Chromatogram ( f ( df . values , * args ) , df . index , df . columns ) return wrap_func\n", "title": "", "metadata": ""}
{"_id": "5cfd4ce3d72101d7eb6b3e908febf8e1", "text": "def get_data_table ( filename ) : with get_file_object ( filename , \"r\" ) as rf : return DataTable ( list ( csv . reader ( rf ) ) )\n", "title": "", "metadata": ""}
{"_id": "d1d1b3703dcd4c89ca062958e8386020", "text": "def on_binop ( self , node ) : # ('left', 'op', 'right') return op2func ( node . op ) ( self . run ( node . left ) , self . run ( node . right ) )\n", "title": "", "metadata": ""}
{"_id": "f04ec36d580d655f8898e6b97734a68f", "text": "def guess_title ( basename ) : base , _ = os . path . splitext ( basename ) return re . sub ( r'[ _-]+' , r' ' , base ) . title ( )\n", "title": "", "metadata": ""}
{"_id": "1707b87ab38f1e63fcc04edfe227b4af", "text": "def get_system_cpu_times ( ) : user , nice , system , idle = _psutil_osx . get_system_cpu_times ( ) return _cputimes_ntuple ( user , nice , system , idle )\n", "title": "", "metadata": ""}
{"_id": "07af8f7594da14a532aeb7658c355696", "text": "def string_format_func ( s ) : return u\"\\\"%s\\\"\" % unicode ( s ) . replace ( u\"\\\\\" , u\"\\\\\\\\\" ) . replace ( u\"\\\"\" , u\"\\\\\\\"\" )\n", "title": "", "metadata": ""}
{"_id": "d1039ee5842742ed3b69de2dc0b8381e", "text": "def __del__ ( self ) : if hasattr ( self , '_Api' ) : self . _Api . close ( ) self . _Logger . info ( 'object destroyed' )\n", "title": "", "metadata": ""}
{"_id": "ee091cbad35b05c7c4dcf1b0434dbfdc", "text": "def set_axis_options ( self , row , column , text ) : subplot = self . get_subplot_at ( row , column ) subplot . set_axis_options ( text )\n", "title": "", "metadata": ""}
{"_id": "9daa6aa8bc491e5954acb1ae0bbd9f1d", "text": "def _strip_namespace ( self , xml ) : p = re . compile ( b\"xmlns=*[\\\"\\\"][^\\\"\\\"]*[\\\"\\\"]\" ) allmatches = p . finditer ( xml ) for match in allmatches : xml = xml . replace ( match . group ( ) , b\"\" ) return xml\n", "title": "", "metadata": ""}
{"_id": "b18c6b91beadac7c7bdc75156747578d", "text": "def put ( self , endpoint : str , * * kwargs ) -> dict : return self . _request ( 'PUT' , endpoint , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "25fb9e68730aae6c5ac872c2721b75ec", "text": "def __copy__ ( self ) : return self . __class__ . load ( self . dump ( ) , context = self . context )\n", "title": "", "metadata": ""}
{"_id": "51b0fdba6f6d93a0674ece8963ac7926", "text": "def feature_subset ( self , indices ) : if isinstance ( indices , np . ndarray ) : indices = indices . tolist ( ) if not isinstance ( indices , list ) : raise ValueError ( 'Can only index with lists' ) return [ self . features_ [ i ] for i in indices ]\n", "title": "", "metadata": ""}
{"_id": "82b615003a85ed18eb305e1361f87aff", "text": "def prepend_line ( filepath , line ) : with open ( filepath ) as f : lines = f . readlines ( ) lines . insert ( 0 , line ) with open ( filepath , 'w' ) as f : f . writelines ( lines )\n", "title": "", "metadata": ""}
{"_id": "a034a6347b97ac0da3c191ea80544ff5", "text": "def create_task ( coro , loop ) : # pragma: no cover if hasattr ( loop , 'create_task' ) : return loop . create_task ( coro ) return asyncio . Task ( coro , loop = loop )\n", "title": "", "metadata": ""}
{"_id": "bb748ce085545ac9bbb80e63f39d1723", "text": "def random_color ( _min = MIN_COLOR , _max = MAX_COLOR ) : return color ( random . randint ( _min , _max ) )\n", "title": "", "metadata": ""}
{"_id": "2fce3563fc08cb23906da53557719a5f", "text": "def camel_to_ ( s ) : s1 = re . sub ( '(.)([A-Z][a-z]+)' , r'\\1_\\2' , s ) return re . sub ( '([a-z0-9])([A-Z])' , r'\\1_\\2' , s1 ) . lower ( )\n", "title": "", "metadata": ""}
{"_id": "01ca29382b2e035cdcb25b89218341b8", "text": "def json_iter ( path ) : with open ( path , 'r' ) as f : for line in f . readlines ( ) : yield json . loads ( line )\n", "title": "", "metadata": ""}
{"_id": "6acd0d99ab27a923e098e4403c762630", "text": "def read_proto_object ( fobj , klass ) : log . debug ( '%s chunk' , klass . __name__ ) obj = klass ( ) obj . ParseFromString ( read_block ( fobj ) ) log . debug ( 'Header: %s' , str ( obj ) ) return obj\n", "title": "", "metadata": ""}
{"_id": "5e3e278c2843bced2bddb0d76de02aea", "text": "def are_in_interval ( s , l , r , border = 'included' ) : return numpy . all ( [ IntensityRangeStandardization . is_in_interval ( x , l , r , border ) for x in s ] )\n", "title": "", "metadata": ""}
{"_id": "a2c55268514eb98766abe95e290c96a4", "text": "def finish_plot ( ) : plt . legend ( ) plt . grid ( color = '0.7' ) plt . xlabel ( 'x' ) plt . ylabel ( 'y' ) plt . show ( )\n", "title": "", "metadata": ""}
{"_id": "a88aa5deea208bf7d868ee9a09587842", "text": "def dump_nparray ( self , obj , class_name = numpy_ndarray_class_name ) : return { \"$\" + class_name : self . _json_convert ( obj . tolist ( ) ) }\n", "title": "", "metadata": ""}
{"_id": "9a1f0e7f1084ff8300e306c076b25758", "text": "def list_rds ( region , filter_by_kwargs ) : conn = boto . rds . connect_to_region ( region ) instances = conn . get_all_dbinstances ( ) return lookup ( instances , filter_by = filter_by_kwargs )\n", "title": "", "metadata": ""}
{"_id": "f7910cee376a1714f28c4b501c7f7e31", "text": "def load ( path ) : with open ( path , 'r' ) as props : properties = Properties . load ( props ) return PushDb ( properties )\n", "title": "", "metadata": ""}
{"_id": "8d10a75400b9a25e77874009c492bfe8", "text": "def __add__ ( self , other ) : return concat ( self , other , copy = True , inplace = False )\n", "title": "", "metadata": ""}
{"_id": "fd8020f7449a3ce5aca2c69e7dac919b", "text": "def nonull_dict ( self ) : return { k : v for k , v in six . iteritems ( self . dict ) if v and k != '_codes' }\n", "title": "", "metadata": ""}
{"_id": "6fba15017ce53ecf9de8452214de3187", "text": "def __or__ ( self , other ) : if not isinstance ( other , set ) : return NotImplemented return self . union ( other )\n", "title": "", "metadata": ""}
{"_id": "1a938d206671386dbc891a931bdde9e9", "text": "def print_ldamodel_topic_words ( topic_word_distrib , vocab , n_top = 10 , row_labels = DEFAULT_TOPIC_NAME_FMT ) : print_ldamodel_distribution ( topic_word_distrib , row_labels = row_labels , val_labels = vocab , top_n = n_top )\n", "title": "", "metadata": ""}
{"_id": "c33c16a9acaa03df4148c74eb95b16df", "text": "def from_bytes ( cls , b ) : im = cls ( ) im . chunks = list ( parse_chunks ( b ) ) im . init ( ) return im\n", "title": "", "metadata": ""}
{"_id": "8cfed847c51df9c8fadcc48d0cc4a4db", "text": "def time2seconds ( t ) : return t . hour * 3600 + t . minute * 60 + t . second + float ( t . microsecond ) / 1e6\n", "title": "", "metadata": ""}
{"_id": "5815e275e7337d854b7dd6a4fa9e06be", "text": "def log_loss ( preds , labels ) : log_likelihood = np . sum ( labels * np . log ( preds ) ) / len ( preds ) return - log_likelihood\n", "title": "", "metadata": ""}
{"_id": "c297c5ea8408cc8833ebbc4ec5633cd6", "text": "def a2s ( a ) : s = np . zeros ( ( 6 , ) , 'f' ) # make the a matrix for i in range ( 3 ) : s [ i ] = a [ i ] [ i ] s [ 3 ] = a [ 0 ] [ 1 ] s [ 4 ] = a [ 1 ] [ 2 ] s [ 5 ] = a [ 0 ] [ 2 ] return s\n", "title": "", "metadata": ""}
{"_id": "74686be8528c4dec0b078babec6b1081", "text": "def caller_locals ( ) : import inspect frame = inspect . currentframe ( ) try : return frame . f_back . f_back . f_locals finally : del frame\n", "title": "", "metadata": ""}
{"_id": "9537afb19f0445681df1de525602687e", "text": "def readCommaList ( fileList ) : names = fileList . split ( ',' ) fileList = [ ] for item in names : fileList . append ( item ) return fileList\n", "title": "", "metadata": ""}
{"_id": "ce21be1f5e57fa564ae85f884be4f532", "text": "def staticdir ( ) : root = os . path . abspath ( os . path . dirname ( __file__ ) ) return os . path . join ( root , \"static\" )\n", "title": "", "metadata": ""}
{"_id": "b4db26e352942bf4af2fcbc4dc799296", "text": "def memory_full ( ) : current_process = psutil . Process ( os . getpid ( ) ) return ( current_process . memory_percent ( ) > config . MAXIMUM_CACHE_MEMORY_PERCENTAGE )\n", "title": "", "metadata": ""}
{"_id": "a8cdb2d268f01753c6c4506a3514646f", "text": "def normalize_array ( lst ) : np_arr = np . array ( lst ) x_normalized = np_arr / np_arr . max ( axis = 0 ) return list ( x_normalized )\n", "title": "", "metadata": ""}
{"_id": "a0f30432a16b012a3954bcf62b25fd87", "text": "def nTimes ( n , f , * args , * * kwargs ) : for i in xrange ( n ) : f ( * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "c5ad1e2f88cf010e3a492a46a0d687ba", "text": "def get_dict_to_encoded_url ( data ) : unicode_data = dict ( [ ( k , smart_str ( v ) ) for k , v in data . items ( ) ] ) encoded = urllib . urlencode ( unicode_data ) return encoded\n", "title": "", "metadata": ""}
{"_id": "8f382132e8d369a660426bff6c5813f9", "text": "def stackplot ( marray , seconds = None , start_time = None , ylabels = None ) : tarray = np . transpose ( marray ) stackplot_t ( tarray , seconds = seconds , start_time = start_time , ylabels = ylabels ) plt . show ( )\n", "title": "", "metadata": ""}
{"_id": "b69167e61ef98d4d946372bbcc9c6c3b", "text": "def subn_filter ( s , find , replace , count = 0 ) : return re . gsub ( find , replace , count , s )\n", "title": "", "metadata": ""}
{"_id": "6ed94f17645e0238a53b66c2d48a3c0b", "text": "def safe_delete ( filename ) : try : os . unlink ( filename ) except OSError as e : if e . errno != errno . ENOENT : raise\n", "title": "", "metadata": ""}
{"_id": "49cc2741d68b2091e603dbb6e58c08ff", "text": "def intersect ( self , other ) : return DataFrame ( self . _jdf . intersect ( other . _jdf ) , self . sql_ctx )\n", "title": "", "metadata": ""}
{"_id": "dc4809e11ee58fce56ed5d0d8c52321a", "text": "def replace_sys_args ( new_args ) : # Replace sys.argv arguments # for module import old_args = sys . argv sys . argv = new_args try : yield finally : sys . argv = old_args\n", "title": "", "metadata": ""}
{"_id": "b28b171972de87e3b1c78332e12721e4", "text": "def split_elements ( value ) : l = [ v . strip ( ) for v in value . split ( ',' ) ] if len ( l ) == 1 : l = value . split ( ) return l\n", "title": "", "metadata": ""}
{"_id": "0dc609e540b6b3fd506f579273229f32", "text": "def flatten_list ( l : List [ list ] ) -> list : return [ v for inner_l in l for v in inner_l ]\n", "title": "", "metadata": ""}
{"_id": "79c6dab32af2171d2cd9e2a496b10e64", "text": "def is_non_empty_string ( input_string ) : try : if not input_string . strip ( ) : raise ValueError ( ) except AttributeError as error : raise TypeError ( error ) return True\n", "title": "", "metadata": ""}
{"_id": "10e836ff4160c3b5a3d9886efb895bbe", "text": "def _uptime_syllable ( ) : global __boottime try : __boottime = os . stat ( '/dev/pty/mst/pty0' ) . st_mtime return time . time ( ) - __boottime except ( NameError , OSError ) : return None\n", "title": "", "metadata": ""}
{"_id": "84795fa66ef9e40cb33c2a20467bffc6", "text": "def runcoro ( async_function ) : future = _asyncio . run_coroutine_threadsafe ( async_function , client . loop ) result = future . result ( ) return result\n", "title": "", "metadata": ""}
{"_id": "d506b80f1ff2ddeac8ccabdc6ca1ff1c", "text": "def to_distribution_values ( self , values ) : with warnings . catch_warnings ( ) : warnings . simplefilter ( \"ignore\" ) # avoid RuntimeWarning: divide by zero encountered in log return numpy . log ( values )\n", "title": "", "metadata": ""}
{"_id": "752ddca898684b55cbd7ed30bc802429", "text": "def set_cell_value ( cell , value ) : if OPENPYXL_MAJOR_VERSION > 1 : cell . value = value else : cell . internal_value = value\n", "title": "", "metadata": ""}
{"_id": "681e12fa01556848368eb90fcff21512", "text": "def imapchain ( * a , * * kwa ) : imap_results = map ( * a , * * kwa ) return itertools . chain ( * imap_results )\n", "title": "", "metadata": ""}
{"_id": "140e21838647fb2105e242f30025753c", "text": "def _openpyxl_read_xl ( xl_path : str ) : try : wb = load_workbook ( filename = xl_path , read_only = True ) except : raise else : return wb\n", "title": "", "metadata": ""}
{"_id": "727116d348f0c828a9bf545b543a4fc0", "text": "def _dict_values_sorted_by_key ( dictionary ) : # This should be a yield from instead. for _ , value in sorted ( dictionary . iteritems ( ) , key = operator . itemgetter ( 0 ) ) : yield value\n", "title": "", "metadata": ""}
{"_id": "17bf06e481d132c51c1b429be06db571", "text": "def energy_string_to_float ( string ) : energy_re = re . compile ( \"(-?\\d+\\.\\d+)\" ) return float ( energy_re . match ( string ) . group ( 0 ) )\n", "title": "", "metadata": ""}
{"_id": "6250cf4c92f2127efc54d80acdf4e2f0", "text": "def weighted_std ( values , weights ) : average = np . average ( values , weights = weights ) variance = np . average ( ( values - average ) ** 2 , weights = weights ) return np . sqrt ( variance )\n", "title": "", "metadata": ""}
{"_id": "b028e48686f062a86532b1a79a5d92f1", "text": "def genfirstvalues ( cursor : Cursor , arraysize : int = 1000 ) -> Generator [ Any , None , None ] : return ( row [ 0 ] for row in genrows ( cursor , arraysize ) )\n", "title": "", "metadata": ""}
{"_id": "d9cc5c6fb19f55ee3e319cbff074403a", "text": "def value ( self ) : if self . _prop . fget is None : raise AttributeError ( 'Unable to read attribute' ) return self . _prop . fget ( self . _obj )\n", "title": "", "metadata": ""}
{"_id": "4a7b5b11fbf52e61e4acacb34935423f", "text": "def _fill_array_from_list ( the_list , the_array ) : for i , val in enumerate ( the_list ) : the_array [ i ] = val return the_array\n", "title": "", "metadata": ""}
{"_id": "8508c74be2801cc2c57c4e50e49d5cfc", "text": "def cursor_up ( self , count = 1 ) : original_column = self . preferred_column or self . document . cursor_position_col self . cursor_position += self . document . get_cursor_up_position ( count = count , preferred_column = original_column ) # Remember the original column for the next up/down movement. self . preferred_column = original_column\n", "title": "", "metadata": ""}
{"_id": "7b8d20001d69f1506038411ed6d270df", "text": "def create_rot2d ( angle ) : ca = math . cos ( angle ) sa = math . sin ( angle ) return np . array ( [ [ ca , - sa ] , [ sa , ca ] ] )\n", "title": "", "metadata": ""}
{"_id": "86c9ec16baa77d906cdbed90f188b662", "text": "def _is_name_used_as_variadic ( name , variadics ) : return any ( variadic . value == name or variadic . value . parent_of ( name ) for variadic in variadics )\n", "title": "", "metadata": ""}
{"_id": "d6290ac6fdbe09f811b5fd77ce8496c7", "text": "def get_bound ( pts ) : ( x0 , y0 , x1 , y1 ) = ( INF , INF , - INF , - INF ) for ( x , y ) in pts : x0 = min ( x0 , x ) y0 = min ( y0 , y ) x1 = max ( x1 , x ) y1 = max ( y1 , y ) return ( x0 , y0 , x1 , y1 )\n", "title": "", "metadata": ""}
{"_id": "0bdbe9af65b7f3a34686dc38a53281e7", "text": "def _pip_exists ( self ) : return os . path . isfile ( os . path . join ( self . path , 'bin' , 'pip' ) )\n", "title": "", "metadata": ""}
{"_id": "115ad43af651d4b28a045667c4029dee", "text": "def setup_path ( ) : import os . path import sys if sys . argv [ 0 ] : top_dir = os . path . dirname ( os . path . abspath ( sys . argv [ 0 ] ) ) sys . path = [ os . path . join ( top_dir , \"src\" ) ] + sys . path pass return\n", "title": "", "metadata": ""}
{"_id": "c212a09753f77c4a8e52c180ad653c28", "text": "def print_param_values ( self_ ) : self = self_ . self for name , val in self . param . get_param_values ( ) : print ( '%s.%s = %s' % ( self . name , name , val ) )\n", "title": "", "metadata": ""}
{"_id": "5ec8a8fe63446097a7ef64d08f30ff5d", "text": "def CleanseComments ( line ) : commentpos = line . find ( '//' ) if commentpos != - 1 and not IsCppString ( line [ : commentpos ] ) : line = line [ : commentpos ] . rstrip ( ) # get rid of /* ... */ return _RE_PATTERN_CLEANSE_LINE_C_COMMENTS . sub ( '' , line )\n", "title": "", "metadata": ""}
{"_id": "62bf3682c2bf480ba203b3efea6d63e0", "text": "def sort_filenames ( filenames ) : basenames = [ os . path . basename ( x ) for x in filenames ] indexes = [ i [ 0 ] for i in sorted ( enumerate ( basenames ) , key = lambda x : x [ 1 ] ) ] return [ filenames [ x ] for x in indexes ]\n", "title": "", "metadata": ""}
{"_id": "54c9248470c333c57b8a9dc3718abd9b", "text": "def _from_dict ( cls , _dict ) : args = { } if 'key' in _dict : args [ 'key' ] = Key . _from_dict ( _dict . get ( 'key' ) ) if 'value' in _dict : args [ 'value' ] = Value . _from_dict ( _dict . get ( 'value' ) ) return cls ( * * args )\n", "title": "", "metadata": ""}
{"_id": "05b39dae5f9261650f143e92c312884f", "text": "def gaussian_noise ( x , severity = 1 ) : c = [ .08 , .12 , 0.18 , 0.26 , 0.38 ] [ severity - 1 ] x = np . array ( x ) / 255. x_clip = np . clip ( x + np . random . normal ( size = x . shape , scale = c ) , 0 , 1 ) * 255 return around_and_astype ( x_clip )\n", "title": "", "metadata": ""}
{"_id": "1f7b625af164d43788296c445efd6dfd", "text": "def vadd ( v1 , v2 ) : v1 = stypes . toDoubleVector ( v1 ) v2 = stypes . toDoubleVector ( v2 ) vout = stypes . emptyDoubleVector ( 3 ) libspice . vadd_c ( v1 , v2 , vout ) return stypes . cVectorToPython ( vout )\n", "title": "", "metadata": ""}
{"_id": "4d872ca41e81e938628747288797982f", "text": "def grandparent_path ( self ) : return os . path . basename ( os . path . join ( self . path , '../..' ) )\n", "title": "", "metadata": ""}
{"_id": "e642ca82da47874e3521a36298a03f14", "text": "def center_text ( text , width = 80 ) : centered = [ ] for line in text . splitlines ( ) : centered . append ( line . center ( width ) ) return \"\\n\" . join ( centered )\n", "title": "", "metadata": ""}
{"_id": "0723873f664cd0f0ba0598bf968543de", "text": "def list_to_str ( lst ) : if len ( lst ) == 1 : str_ = lst [ 0 ] elif len ( lst ) == 2 : str_ = ' and ' . join ( lst ) elif len ( lst ) > 2 : str_ = ', ' . join ( lst [ : - 1 ] ) str_ += ', and {0}' . format ( lst [ - 1 ] ) else : raise ValueError ( 'List of length 0 provided.' ) return str_\n", "title": "", "metadata": ""}
{"_id": "19b8acd34808ce33498fbed092e361fd", "text": "def datetime_delta_to_ms ( delta ) : delta_ms = delta . days * 24 * 60 * 60 * 1000 delta_ms += delta . seconds * 1000 delta_ms += delta . microseconds / 1000 delta_ms = int ( delta_ms ) return delta_ms\n", "title": "", "metadata": ""}
{"_id": "c44ab5ff7f4ee20c48dd8fdc3f368f10", "text": "def __get_xml_text ( root ) : txt = \"\" for e in root . childNodes : if ( e . nodeType == e . TEXT_NODE ) : txt += e . data return txt\n", "title": "", "metadata": ""}
{"_id": "5cdd870fb1df1f55cf5ca038b1dfefec", "text": "def _split ( string , splitters ) : part = '' for character in string : if character in splitters : yield part part = '' else : part += character yield part\n", "title": "", "metadata": ""}
{"_id": "233e41a883257f7ccc1b4874a22936be", "text": "def shape_list ( l , shape , dtype ) : return np . array ( l , dtype = dtype ) . reshape ( shape )\n", "title": "", "metadata": ""}
{"_id": "13971f1f7ace25419482c2bce52062c8", "text": "def tuple_search ( t , i , v ) : for e in t : if e [ i ] == v : return e return None\n", "title": "", "metadata": ""}
{"_id": "95704caefcd6941a6d681d3bbe0266ce", "text": "def json ( body , charset = 'utf-8' , * * kwargs ) : return json_converter . loads ( text ( body , charset = charset ) )\n", "title": "", "metadata": ""}
{"_id": "bf4d6b706a8d4500d43bff671eaf091a", "text": "def list_to_csv ( value ) : if isinstance ( value , ( list , tuple , set ) ) : value = \",\" . join ( value ) return value\n", "title": "", "metadata": ""}
{"_id": "80869aa9f15989de27ca481daaf11610", "text": "def get_best_encoding ( stream ) : rv = getattr ( stream , 'encoding' , None ) or sys . getdefaultencoding ( ) if is_ascii_encoding ( rv ) : return 'utf-8' return rv\n", "title": "", "metadata": ""}
{"_id": "eb1ea6a44e3d03ab05716635ead5aef8", "text": "def not0 ( a ) : return matrix ( list ( map ( lambda x : 1 if x == 0 else x , a ) ) , a . size )\n", "title": "", "metadata": ""}
{"_id": "af2bfd874d6c12a736bbe5f398a2ef04", "text": "def _brief_print_list ( lst , limit = 7 ) : lst = list ( lst ) if len ( lst ) > limit : return _brief_print_list ( lst [ : limit // 2 ] , limit ) + ', ..., ' + _brief_print_list ( lst [ - limit // 2 : ] , limit ) return ', ' . join ( [ \"'%s'\" % str ( i ) for i in lst ] )\n", "title": "", "metadata": ""}
{"_id": "fb449392f8a9d52f51d5552b43054252", "text": "def show ( config ) : with open ( config , 'r' ) : main . show ( yaml . load ( open ( config ) ) )\n", "title": "", "metadata": ""}
{"_id": "cf29269ca186833be5a5e598bf77c8af", "text": "def try_cast_int ( s ) : try : temp = re . findall ( '\\d' , str ( s ) ) temp = '' . join ( temp ) return int ( temp ) except : return s\n", "title": "", "metadata": ""}
{"_id": "19d3e7a2bb84a57b35c91b9cd377968b", "text": "def cumsum ( inlist ) : newlist = copy . deepcopy ( inlist ) for i in range ( 1 , len ( newlist ) ) : newlist [ i ] = newlist [ i ] + newlist [ i - 1 ] return newlist\n", "title": "", "metadata": ""}
{"_id": "2dd005eacdfb7739259bbd6761a7fdbb", "text": "def dag_longest_path ( graph , source , target ) : if source == target : return [ source ] allpaths = nx . all_simple_paths ( graph , source , target ) longest_path = [ ] for l in allpaths : if len ( l ) > len ( longest_path ) : longest_path = l return longest_path\n", "title": "", "metadata": ""}
{"_id": "d7b7daa95d75f05fedf844fa52f8eef3", "text": "def to_str ( obj ) : if not isinstance ( obj , str ) and PY3 and isinstance ( obj , bytes ) : obj = obj . decode ( 'utf-8' ) return obj if isinstance ( obj , string_types ) else str ( obj )\n", "title": "", "metadata": ""}
{"_id": "291cae55ec05f63c5acaaa74823c6c2d", "text": "def __call__ ( self , func , * args , * * kwargs ) : return self . run ( func , * args , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "3936244130f6a743a59d96c3033b1000", "text": "def numpy_aware_eq ( a , b ) : if isinstance ( a , np . ndarray ) or isinstance ( b , np . ndarray ) : return np . array_equal ( a , b ) if ( ( isinstance ( a , Iterable ) and isinstance ( b , Iterable ) ) and not isinstance ( a , str ) and not isinstance ( b , str ) ) : if len ( a ) != len ( b ) : return False return all ( numpy_aware_eq ( x , y ) for x , y in zip ( a , b ) ) return a == b\n", "title": "", "metadata": ""}
{"_id": "f85c0f590bfe8df4427eefe22952af57", "text": "def read_numpy ( fd , byte_order , dtype , count ) : return numpy . fromfile ( fd , byte_order + dtype [ - 1 ] , count )\n", "title": "", "metadata": ""}
{"_id": "c03b8d15aadaa8c3d9da77b6aedd1283", "text": "def read_set_from_file ( filename : str ) -> Set [ str ] : collection = set ( ) with open ( filename , 'r' ) as file_ : for line in file_ : collection . add ( line . rstrip ( ) ) return collection\n", "title": "", "metadata": ""}
{"_id": "f2bba8ce436c699a5f8aaee71fb52b63", "text": "def askopenfilename ( * * kwargs ) : try : from Tkinter import Tk import tkFileDialog as filedialog except ImportError : from tkinter import Tk , filedialog root = Tk ( ) root . withdraw ( ) root . update ( ) filenames = filedialog . askopenfilename ( * * kwargs ) root . destroy ( ) return filenames\n", "title": "", "metadata": ""}
{"_id": "1ac19ba519ca757e2daf6c0adce644ef", "text": "def main ( argv , version = DEFAULT_VERSION ) : tarball = download_setuptools ( ) _install ( tarball , _build_install_args ( argv ) )\n", "title": "", "metadata": ""}
{"_id": "e4d60b5e6e87dfc8a6223aadcd721c5c", "text": "def mmap ( func , iterable ) : if sys . version_info [ 0 ] > 2 : return [ i for i in map ( func , iterable ) ] else : return map ( func , iterable )\n", "title": "", "metadata": ""}
{"_id": "863c01821ed5c4c51278feefc7d2ad01", "text": "def disable_wx ( self ) : if self . _apps . has_key ( GUI_WX ) : self . _apps [ GUI_WX ] . _in_event_loop = False self . clear_inputhook ( )\n", "title": "", "metadata": ""}
{"_id": "eb17fdf9d8f4fdc6ab3c6c3d0b61bb1f", "text": "def _get_node_parent ( self , age , pos ) : return self . nodes [ age ] [ int ( pos / self . comp ) ]\n", "title": "", "metadata": ""}
{"_id": "8ad23a382dccb0fb3e20680590dddd87", "text": "def fit_gaussian ( x , y , yerr , p0 ) : try : popt , pcov = curve_fit ( gaussian , x , y , sigma = yerr , p0 = p0 , absolute_sigma = True ) except RuntimeError : return [ 0 ] , [ 0 ] return popt , pcov\n", "title": "", "metadata": ""}
{"_id": "ec4c067d0948ce0508939e16d43cb9c7", "text": "def find_all ( self , string , callback ) : for index , output in self . iter ( string ) : callback ( index , output )\n", "title": "", "metadata": ""}
{"_id": "3aca91330a5f278a6a669564851053a1", "text": "def counter ( items ) : results = { } for item in items : results [ item ] = results . get ( item , 0 ) + 1 return results\n", "title": "", "metadata": ""}
{"_id": "27cfbe420d31db59c5b3628f08ef57bd", "text": "def get_last_weekday_in_month ( year , month , weekday ) : day = date ( year , month , monthrange ( year , month ) [ 1 ] ) while True : if day . weekday ( ) == weekday : break day = day - timedelta ( days = 1 ) return day\n", "title": "", "metadata": ""}
{"_id": "8d72d252f2a791606e0c7c886e3989e7", "text": "def l2_norm ( params ) : flattened , _ = flatten ( params ) return np . dot ( flattened , flattened )\n", "title": "", "metadata": ""}
{"_id": "13a676c923af1ed158c9517f06333184", "text": "def flatten_multidict ( multidict ) : return dict ( [ ( key , value if len ( value ) > 1 else value [ 0 ] ) for ( key , value ) in multidict . iterlists ( ) ] )\n", "title": "", "metadata": ""}
{"_id": "b0d43f5c6a41b2f5e9f5822385321079", "text": "def copyFile ( input , output , replace = None ) : _found = findFile ( output ) if not _found or ( _found and replace ) : shutil . copy2 ( input , output )\n", "title": "", "metadata": ""}
{"_id": "c5b1e91ffec3584f90ce2a227a2e8f11", "text": "def pop ( self , key ) : if key in self . _keys : self . _keys . remove ( key ) super ( ListDict , self ) . pop ( key )\n", "title": "", "metadata": ""}
{"_id": "eb5e30e83bfb582bbc0547dac606e47e", "text": "def _prepare_proxy ( self , conn ) : conn . set_tunnel ( self . _proxy_host , self . port , self . proxy_headers ) conn . connect ( )\n", "title": "", "metadata": ""}
{"_id": "f6fcaa7e16744e28f5864870f78634b1", "text": "def last_location_of_minimum ( x ) : x = np . asarray ( x ) return 1.0 - np . argmin ( x [ : : - 1 ] ) / len ( x ) if len ( x ) > 0 else np . NaN\n", "title": "", "metadata": ""}
{"_id": "fc5537788e46c8cd2b4cfbf6e247b0b8", "text": "def read_from_file ( file_path , encoding = \"utf-8\" ) : with codecs . open ( file_path , \"r\" , encoding ) as f : return f . read ( )\n", "title": "", "metadata": ""}
{"_id": "77231b076cd1df3355de02c219039481", "text": "def _check_elements_equal ( lst ) : assert isinstance ( lst , list ) , \"Input value must be a list.\" return not lst or lst . count ( lst [ 0 ] ) == len ( lst )\n", "title": "", "metadata": ""}
{"_id": "b029b81c7f735005e3920040704d9274", "text": "def get_iter_string_reader ( stdin ) : bufsize = 1024 iter_str = ( stdin [ i : i + bufsize ] for i in range ( 0 , len ( stdin ) , bufsize ) ) return get_iter_chunk_reader ( iter_str )\n", "title": "", "metadata": ""}
{"_id": "8af9af3891992aab43904b2aeaa8384f", "text": "def __replace_all ( repls : dict , input : str ) -> str : return re . sub ( '|' . join ( re . escape ( key ) for key in repls . keys ( ) ) , lambda k : repls [ k . group ( 0 ) ] , input )\n", "title": "", "metadata": ""}
{"_id": "ca46911da6d4287718734a3ac1561c79", "text": "def contains_geometric_info ( var ) : return isinstance ( var , tuple ) and len ( var ) == 2 and all ( isinstance ( val , ( int , float ) ) for val in var )\n", "title": "", "metadata": ""}
{"_id": "7a8f22984424cda1cf67f6404d4f2155", "text": "def enable_writes ( self ) : self . write_buffer = [ ] self . flush_lock = threading . RLock ( ) self . flush_thread = FlushThread ( self . max_batch_time , self . _flush_writes )\n", "title": "", "metadata": ""}
{"_id": "ab1cad0d46e961896ff1ee7d975067f1", "text": "def split ( text : str ) -> List [ str ] : return [ word for word in SEPARATOR . split ( text ) if word . strip ( ' \\t' ) ]\n", "title": "", "metadata": ""}
{"_id": "8dadd4d043521d6dd1cb6a68d98e1ad3", "text": "def initialize_api ( flask_app ) : if not flask_restplus : return api = flask_restplus . Api ( version = \"1.0\" , title = \"My Example API\" ) api . add_resource ( HelloWorld , \"/hello\" ) blueprint = flask . Blueprint ( \"api\" , __name__ , url_prefix = \"/api\" ) api . init_app ( blueprint ) flask_app . register_blueprint ( blueprint )\n", "title": "", "metadata": ""}
{"_id": "e6074dc5f06526cbfd12f9eec28a5097", "text": "def __complex__ ( self ) : if self . _t != 99 or self . key != [ 're' , 'im' ] : return complex ( float ( self ) ) return complex ( float ( self . re ) , float ( self . im ) )\n", "title": "", "metadata": ""}
{"_id": "f5fe1dd549efd1572ab1502b0089d6c5", "text": "def load ( filename ) : path , name = os . path . split ( filename ) path = path or '.' with util . indir ( path ) : return pickle . load ( open ( name , 'rb' ) )\n", "title": "", "metadata": ""}
{"_id": "51af3febabd83df812a23df309527f6f", "text": "def na_if ( series , * values ) : series = pd . Series ( series ) series [ series . isin ( values ) ] = np . nan return series\n", "title": "", "metadata": ""}
{"_id": "02efdd66aefd0572cbc99f3ab96d0cee", "text": "async def acquire_async ( self ) : r = self . acquire ( blocking = False ) while not r : await asyncio . sleep ( .01 ) r = self . acquire ( blocking = False )\n", "title": "", "metadata": ""}
{"_id": "09501b2b555eb86e6a1dfdc5a315ccab", "text": "def gday_of_year ( self ) : return ( self . date - dt . date ( self . date . year , 1 , 1 ) ) . days\n", "title": "", "metadata": ""}
{"_id": "d3fea3cec1acae15b39a8e7b0f4836fd", "text": "def direct2dDistance ( self , point ) : if not isinstance ( point , MapPoint ) : return 0.0 return ( ( self . x - point . x ) ** 2 + ( self . y - point . y ) ** 2 ) ** ( 0.5 ) # simple distance formula\n", "title": "", "metadata": ""}
{"_id": "cc79fef6db255bb7b4a550267e5090a1", "text": "def file_writelines_flush_sync ( path , lines ) : fp = open ( path , 'w' ) try : fp . writelines ( lines ) flush_sync_file_object ( fp ) finally : fp . close ( )\n", "title": "", "metadata": ""}
{"_id": "75f6233525e54c8a23ad9a2eace61854", "text": "def any_contains_any ( strings , candidates ) : for string in strings : for c in candidates : if c in string : return True\n", "title": "", "metadata": ""}
{"_id": "1528a821d764f8f1d5222aa4c86b76fb", "text": "def is_bool_matrix ( l ) : if isinstance ( l , np . ndarray ) : if l . ndim == 2 and ( l . dtype == bool ) : return True return False\n", "title": "", "metadata": ""}
{"_id": "197e86173e7e47e57f6f3c11bc0e8257", "text": "def plot_and_save ( self , * * kwargs ) : self . fig = pyplot . figure ( ) self . plot ( ) self . axes = pyplot . gca ( ) self . save_plot ( self . fig , self . axes , * * kwargs ) pyplot . close ( self . fig )\n", "title": "", "metadata": ""}
{"_id": "88f106a7773bc312b44f5915dd8f67a7", "text": "def crop_box ( im , box = False , * * kwargs ) : if box : im = im . crop ( box ) return im\n", "title": "", "metadata": ""}
{"_id": "76c779a07cef6fad1d559f8925205828", "text": "def ln_norm ( x , mu , sigma = 1.0 ) : return np . log ( stats . norm ( loc = mu , scale = sigma ) . pdf ( x ) )\n", "title": "", "metadata": ""}
{"_id": "c42deaae529d6764b313a243b5c76cc4", "text": "def _MakeExecutable ( self , metadata_script ) : mode = os . stat ( metadata_script ) . st_mode os . chmod ( metadata_script , mode | stat . S_IEXEC )\n", "title": "", "metadata": ""}
{"_id": "49c0fc20f7ca71d6ef7116814fa987ee", "text": "def timeit ( output ) : b = time . time ( ) yield print output , 'time used: %.3fs' % ( time . time ( ) - b )\n", "title": "", "metadata": ""}
{"_id": "84d930d7500ab390a0f4610878575d0a", "text": "def get_user_by_id ( self , id ) : return self . db_adapter . get_object ( self . UserClass , id = id )\n", "title": "", "metadata": ""}
{"_id": "d9c0ede41cbdcc921ac0d91adbf84166", "text": "def to_bytes ( data : Any ) -> bytearray : # noqa if isinstance ( data , int ) : return bytearray ( [ data ] ) return bytearray ( data , encoding = 'latin-1' )\n", "title": "", "metadata": ""}
{"_id": "3c1a9acde3fce79ffa7865d42a5df8d6", "text": "def __ror__ ( self , other ) : return self . callable ( * ( self . args + ( other , ) ) , * * self . kwargs )\n", "title": "", "metadata": ""}
{"_id": "183d64edc766c9f98a3fea870b6877f9", "text": "def read_stdin ( ) : if sys . stdin . isatty ( ) and sys . stdout . isatty ( ) : print ( '\\nReading from stdin until end of file (Ctrl + D)...' ) return sys . stdin . read ( )\n", "title": "", "metadata": ""}
{"_id": "229b165463eb4cd77ccec1d0e33a34f8", "text": "def s3_get ( url : str , temp_file : IO ) -> None : s3_resource = boto3 . resource ( \"s3\" ) bucket_name , s3_path = split_s3_path ( url ) s3_resource . Bucket ( bucket_name ) . download_fileobj ( s3_path , temp_file )\n", "title": "", "metadata": ""}
{"_id": "0364525ca46d118fbda2fb1fc9512d67", "text": "def _split_str ( s , n ) : length = len ( s ) return [ s [ i : i + n ] for i in range ( 0 , length , n ) ]\n", "title": "", "metadata": ""}
{"_id": "f7b1ffb8c91f38a7955efc8509d692c3", "text": "def post_worker_init ( worker ) : quit_command = 'CTRL-BREAK' if sys . platform == 'win32' else 'CONTROL-C' sys . stdout . write ( \"Django version {djangover}, Gunicorn version {gunicornver}, \" \"using settings {settings!r}\\n\" \"Starting development server at {urls}\\n\" \"Quit the server with {quit_command}.\\n\" . format ( djangover = django . get_version ( ) , gunicornver = gunicorn . __version__ , settings = os . environ . get ( 'DJANGO_SETTINGS_MODULE' ) , urls = ', ' . join ( 'http://{0}/' . format ( b ) for b in worker . cfg . bind ) , quit_command = quit_command , ) , )\n", "title": "", "metadata": ""}
{"_id": "d91ec62f4d17f72e4d3911ce10f1fdba", "text": "def pformat ( object , indent = 1 , width = 80 , depth = None ) : return PrettyPrinter ( indent = indent , width = width , depth = depth ) . pformat ( object )\n", "title": "", "metadata": ""}
{"_id": "f000d52ffe56c71cdb8fd1f1810edded", "text": "def is_square_matrix ( mat ) : mat = np . array ( mat ) if mat . ndim != 2 : return False shape = mat . shape return shape [ 0 ] == shape [ 1 ]\n", "title": "", "metadata": ""}
{"_id": "4f5e33c2083e812c1c2c04cf06b73c9b", "text": "def get_inputs_from_cm ( index , cm ) : return tuple ( i for i in range ( cm . shape [ 0 ] ) if cm [ i ] [ index ] )\n", "title": "", "metadata": ""}
{"_id": "6a9ad55c71a993b54ea13c796cdec68b", "text": "def do_next ( self , args ) : self . _do_print_from_last_cmd = True self . _interp . step_over ( ) return True\n", "title": "", "metadata": ""}
{"_id": "edc08af1134e86e7640100bd2810eb7e", "text": "def is_integer ( obj ) : if PYTHON3 : return isinstance ( obj , int ) return isinstance ( obj , ( int , long ) )\n", "title": "", "metadata": ""}
{"_id": "d754734f3d331b3927da3dc529b22fe1", "text": "def title ( msg ) : if sys . platform . startswith ( \"win\" ) : ctypes . windll . kernel32 . SetConsoleTitleW ( tounicode ( msg ) )\n", "title": "", "metadata": ""}
{"_id": "82f074d4fad5b4dedde3cd2230af21e8", "text": "def Serializable ( o ) : if isinstance ( o , ( str , dict , int ) ) : return o else : try : json . dumps ( o ) return o except Exception : LOG . debug ( \"Got a non-serilizeable object: %s\" % o ) return o . __repr__ ( )\n", "title": "", "metadata": ""}
{"_id": "d0f365fddf2ee7c02e03edfa97f884be", "text": "def update ( self , other_dict ) : for key , value in iter_multi_items ( other_dict ) : MultiDict . add ( self , key , value )\n", "title": "", "metadata": ""}
{"_id": "3a9197742e6cc1941c5d043a0c8e20b9", "text": "def object_as_dict ( obj ) : return { c . key : getattr ( obj , c . key ) for c in inspect ( obj ) . mapper . column_attrs }\n", "title": "", "metadata": ""}
{"_id": "32d4b0e4aca4371ccee737be6ae857a0", "text": "def glr_path_static ( ) : return os . path . abspath ( os . path . join ( os . path . dirname ( __file__ ) , '_static' ) )\n", "title": "", "metadata": ""}
{"_id": "99ea0f23352a22fd56d3eb7b8f344021", "text": "def remove_file_from_s3 ( awsclient , bucket , key ) : client_s3 = awsclient . get_client ( 's3' ) response = client_s3 . delete_object ( Bucket = bucket , Key = key )\n", "title": "", "metadata": ""}
{"_id": "92bd88d2b8ec5f0f3b17302b3c734f8b", "text": "def Max ( a , axis , keep_dims ) : return np . amax ( a , axis = axis if not isinstance ( axis , np . ndarray ) else tuple ( axis ) , keepdims = keep_dims ) ,\n", "title": "", "metadata": ""}
{"_id": "1a546420b4e21fa8543dfe1e834aa655", "text": "def ishex ( obj ) : return isinstance ( obj , str ) and ( len ( obj ) == 1 ) and ( obj in string . hexdigits )\n", "title": "", "metadata": ""}
{"_id": "0a750fdbe21a7264a65b0d61bfc1d7c5", "text": "def signal_handler ( signal_name , frame ) : sys . stdout . flush ( ) print ( \"\\nSIGINT in frame signal received. Quitting...\" ) sys . stdout . flush ( ) sys . exit ( 0 )\n", "title": "", "metadata": ""}
{"_id": "b12685de748e91e25a0095ef9f5317ff", "text": "def map ( cls , iterable , func , * a , * * kw ) : return cls ( func ( x , * a , * * kw ) for x in iterable )\n", "title": "", "metadata": ""}
{"_id": "bc8c9c3bc0a846608742f99155cc77d1", "text": "def IPYTHON_MAIN ( ) : import pkg_resources runner_frame = inspect . getouterframes ( inspect . currentframe ( ) ) [ - 2 ] return ( getattr ( runner_frame , \"function\" , None ) == pkg_resources . load_entry_point ( \"ipython\" , \"console_scripts\" , \"ipython\" ) . __name__ )\n", "title": "", "metadata": ""}
{"_id": "80c3b15e0c236e4cebb8ea208c32933a", "text": "def hasattrs ( object , * names ) : for name in names : if not hasattr ( object , name ) : return False return True\n", "title": "", "metadata": ""}
{"_id": "2b4340738e1a45c7c68667faac0d4a49", "text": "def __absolute__ ( self , uri ) : return op . abspath ( op . join ( self . __path__ , uri ) )\n", "title": "", "metadata": ""}
{"_id": "64a399d56ec75c6dd0421ec2e9f7b844", "text": "def issorted ( list_ , op = operator . le ) : return all ( op ( list_ [ ix ] , list_ [ ix + 1 ] ) for ix in range ( len ( list_ ) - 1 ) )\n", "title": "", "metadata": ""}
{"_id": "af22f38372fcb71604223be49da1b5c6", "text": "def algo_exp ( x , m , t , b ) : return m * np . exp ( - t * x ) + b\n", "title": "", "metadata": ""}
{"_id": "4bd6d8194069060133abec41cf3a6b54", "text": "def file_matches ( filename , patterns ) : return any ( fnmatch . fnmatch ( filename , pat ) for pat in patterns )\n", "title": "", "metadata": ""}
{"_id": "0b0bb6f0682bc05a56ad07c4556b9d50", "text": "def valid_file ( path : str ) -> bool : path = Path ( path ) . expanduser ( ) log . debug ( \"checking if %s is a valid file\" , path ) return path . exists ( ) and path . is_file ( )\n", "title": "", "metadata": ""}
{"_id": "021e9338b7593e7eac5eb9943c84947c", "text": "def _skip_section ( self ) : self . _last = self . _f . readline ( ) while len ( self . _last ) > 0 and len ( self . _last [ 0 ] . strip ( ) ) == 0 : self . _last = self . _f . readline ( )\n", "title": "", "metadata": ""}
{"_id": "303fc74aef0b36bb6fe3577166430baa", "text": "def dotproduct ( X , Y ) : return sum ( [ x * y for x , y in zip ( X , Y ) ] )\n", "title": "", "metadata": ""}
{"_id": "1113ce2228dddd3940a1dfa377f851e9", "text": "def is_int ( value ) : if isinstance ( value , bool ) : return False try : int ( value ) return True except ( ValueError , TypeError ) : return False\n", "title": "", "metadata": ""}
{"_id": "9deef06285d65be0bbe490dc9f097b7f", "text": "def gray2bgr ( img ) : img = img [ ... , None ] if img . ndim == 2 else img out_img = cv2 . cvtColor ( img , cv2 . COLOR_GRAY2BGR ) return out_img\n", "title": "", "metadata": ""}
{"_id": "85b3d27bf65b51b4d25d8a3d5e22a9bc", "text": "def service_available ( service_name ) : try : subprocess . check_output ( [ 'service' , service_name , 'status' ] , stderr = subprocess . STDOUT ) . decode ( 'UTF-8' ) except subprocess . CalledProcessError as e : return b'unrecognized service' not in e . output else : return True\n", "title": "", "metadata": ""}
{"_id": "933a3ed23f5289dcc66c1ccc79f1f18c", "text": "def _get_data ( self ) : cookie = self . adapter . cookies . get ( self . name ) return self . _deserialize ( cookie ) if cookie else { }\n", "title": "", "metadata": ""}
{"_id": "14fd6c748c6525045b30f0c99e5eed29", "text": "def num_leaves ( tree ) : if tree . is_leaf : return 1 else : return num_leaves ( tree . left_child ) + num_leaves ( tree . right_child )\n", "title": "", "metadata": ""}
{"_id": "c25195ade3ff85308e03aab7e53a0644", "text": "def less_strict_bool ( x ) : if x is None : return False elif x is True or x is False : return x else : return strict_bool ( x )\n", "title": "", "metadata": ""}
{"_id": "ad93933c01619ec74edc1cba76c1cd20", "text": "def clear_es ( ) : # TODO: should receive a catalog slug. ESHypermap . es . indices . delete ( ESHypermap . index_name , ignore = [ 400 , 404 ] ) LOGGER . debug ( 'Elasticsearch: Index cleared' )\n", "title": "", "metadata": ""}
{"_id": "1e8fad747242cf42789d56fb7c4e16ab", "text": "def assert_error ( text , check , n = 1 ) : assert_error . description = \"No {} error for '{}'\" . format ( check , text ) assert ( check in [ error [ 0 ] for error in lint ( text ) ] )\n", "title": "", "metadata": ""}
{"_id": "d2df8e8d94f4d277ae0f3f86a9f016a1", "text": "def dict_to_numpy_array ( d ) : return fromarrays ( d . values ( ) , np . dtype ( [ ( str ( k ) , v . dtype ) for k , v in d . items ( ) ] ) )\n", "title": "", "metadata": ""}
{"_id": "849b425680edc1e48d0b2b43e1febf4e", "text": "def image_to_texture ( image ) : vtex = vtk . vtkTexture ( ) vtex . SetInputDataObject ( image ) vtex . Update ( ) return vtex\n", "title": "", "metadata": ""}
{"_id": "2c9c13ffb262007fbbfb812046efad75", "text": "def find_first_in_list ( txt : str , str_list : [ str ] ) -> int : # type: ignore start = len ( txt ) + 1 for item in str_list : if start > txt . find ( item ) > - 1 : start = txt . find ( item ) return start if len ( txt ) + 1 > start > - 1 else - 1\n", "title": "", "metadata": ""}
{"_id": "19e50e0e6a06aca7d64eb8936dec3241", "text": "def closing_plugin ( self , cancelable = False ) : self . dialog_manager . close_all ( ) self . shell . exit_interpreter ( ) return True\n", "title": "", "metadata": ""}
{"_id": "2e27507165ada485672bc724ea9aa6e6", "text": "def is_natural ( x ) : try : is_integer = int ( x ) == x except ( TypeError , ValueError ) : return False return is_integer and x >= 0\n", "title": "", "metadata": ""}
{"_id": "2068314d0e1bb2a75b907a7a289aeb0e", "text": "def is_cyclic ( graph ) : path = set ( ) def visit ( vertex ) : path . add ( vertex ) for neighbour in graph . get ( vertex , ( ) ) : if neighbour in path or visit ( neighbour ) : return True path . remove ( vertex ) return False return any ( visit ( v ) for v in graph )\n", "title": "", "metadata": ""}
{"_id": "7ce51f865cc53b9d8726f62ccdd1686d", "text": "def _dt_to_epoch ( dt ) : try : epoch = dt . timestamp ( ) except AttributeError : # py2 epoch = ( dt - datetime ( 1970 , 1 , 1 ) ) . total_seconds ( ) return epoch\n", "title": "", "metadata": ""}
{"_id": "c22c94c02976d1fc61c64a70e09dd708", "text": "def apply_kwargs ( func , * * kwargs ) : new_kwargs = { } params = signature ( func ) . parameters for param_name in params . keys ( ) : if param_name in kwargs : new_kwargs [ param_name ] = kwargs [ param_name ] return func ( * * new_kwargs )\n", "title": "", "metadata": ""}
{"_id": "fd79fb90263c37588bdbd1ddeed698e9", "text": "def next ( self ) : item = six . next ( self . _item_iter ) result = self . _item_to_value ( self . _parent , item ) # Since we've successfully got the next value from the # iterator, we update the number of remaining. self . _remaining -= 1 return result\n", "title": "", "metadata": ""}
{"_id": "972f1f8de4ec76fe2f54e8cf1b5aeaba", "text": "def dict_keys_without_hyphens ( a_dict ) : return dict ( ( key . replace ( '-' , '_' ) , val ) for key , val in a_dict . items ( ) )\n", "title": "", "metadata": ""}
{"_id": "63e611e296d81ed4d3e3a368e04b816a", "text": "def get_url_nofollow ( url ) : try : response = urlopen ( url ) code = response . getcode ( ) return code except HTTPError as e : return e . code except : return 0\n", "title": "", "metadata": ""}
{"_id": "b03d8f4da0bbca9bdcfd70aba03fe997", "text": "def dump_to_log ( self , logger ) : logger . error ( \"Execution ended in %s for cmd %s\" , self . _retcode , self . _cmd ) for line in self . _collected_stdout : logger . error ( STDOUT_LOG_PREFIX + line )\n", "title": "", "metadata": ""}
{"_id": "498ba15b922dd3bb796e94c620208882", "text": "def dedup_list ( l ) : dedup = set ( ) return [ x for x in l if not ( x in dedup or dedup . add ( x ) ) ]\n", "title": "", "metadata": ""}
{"_id": "5aee773bd057905520193e919fd386d3", "text": "def set_terminate_listeners ( stream ) : def stop ( signum , frame ) : terminate ( stream . listener ) # Installs signal handlers for handling SIGINT and SIGTERM # gracefully. signal . signal ( signal . SIGINT , stop ) signal . signal ( signal . SIGTERM , stop )\n", "title": "", "metadata": ""}
{"_id": "92b709f5c39508fdc2160bf4ae4ffa8b", "text": "def add_column ( filename , column , formula , force = False ) : columns = parse_formula ( formula ) logger . info ( \"Running file: %s\" % filename ) logger . debug ( \"  Reading columns: %s\" % columns ) data = fitsio . read ( filename , columns = columns ) logger . debug ( '  Evaluating formula: %s' % formula ) col = eval ( formula ) col = np . asarray ( col , dtype = [ ( column , col . dtype ) ] ) insert_columns ( filename , col , force = force ) return True\n", "title": "", "metadata": ""}
{"_id": "a86b66da94ea089c6b98d32eaabcada3", "text": "def stretch ( iterable , n = 2 ) : times = range ( n ) for item in iterable : for i in times : yield item\n", "title": "", "metadata": ""}
{"_id": "7f8fae7cc88ec4ea447f04c227574397", "text": "def min_max_normalize ( img ) : min_img = img . min ( ) max_img = img . max ( ) return ( img - min_img ) / ( max_img - min_img )\n", "title": "", "metadata": ""}
{"_id": "5ea1c4fdc0a25263a9cb523b77d4e602", "text": "def example_write_file_to_disk_if_changed ( ) : my_file = FileAsObj ( '/tmp/example_file.txt' ) my_file . rm ( my_file . egrep ( '^#' ) ) if my_file . changed : my_file . save ( )\n", "title": "", "metadata": ""}
{"_id": "da6e3b4ced77d219db6833dc4bfb33a6", "text": "def listunion ( ListOfLists ) : u = [ ] for s in ListOfLists : if s != None : u . extend ( s ) return u\n", "title": "", "metadata": ""}
{"_id": "13b1d3fe72b09169b84dd80b269668b7", "text": "def walk_tree ( root ) : yield root for child in root . children : for el in walk_tree ( child ) : yield el\n", "title": "", "metadata": ""}
{"_id": "eae37b7f81baac9f7a4421509b343786", "text": "def _get_pretty_string ( obj ) : sio = StringIO ( ) pprint . pprint ( obj , stream = sio ) return sio . getvalue ( )\n", "title": "", "metadata": ""}
{"_id": "c12631bb7bc4e76836da2da478537a30", "text": "def clean ( ctx , dry_run = False ) : basedir = ctx . sphinx . destdir or \"build/docs\" cleanup_dirs ( [ basedir ] , dry_run = dry_run )\n", "title": "", "metadata": ""}
{"_id": "2c310fc9a4e9262acc5a056a9ef8c580", "text": "def writable_stream ( handle ) : if isinstance ( handle , io . IOBase ) and sys . version_info >= ( 3 , 5 ) : return handle . writable ( ) try : handle . write ( b'' ) except ( io . UnsupportedOperation , IOError ) : return False else : return True\n", "title": "", "metadata": ""}
{"_id": "dc38fab03591f6fcedc1d24f0605d394", "text": "def lsem ( inlist ) : sd = stdev ( inlist ) n = len ( inlist ) return sd / math . sqrt ( n )\n", "title": "", "metadata": ""}
{"_id": "c30ab2a43abcb9d4003166421ac11aa1", "text": "def to_0d_array ( value : Any ) -> np . ndarray : if np . isscalar ( value ) or ( isinstance ( value , np . ndarray ) and value . ndim == 0 ) : return np . array ( value ) else : return to_0d_object_array ( value )\n", "title": "", "metadata": ""}
{"_id": "b7609299b629cf49990778bb5ad6d87f", "text": "def debug_on_error ( type , value , tb ) : traceback . print_exc ( type , value , tb ) print ( ) pdb . pm ( )\n", "title": "", "metadata": ""}
{"_id": "32205ceed7eefbc9b6b059551e6c2c05", "text": "def to_int64 ( a ) : # build new dtype and replace i4 --> i8 def promote_i4 ( typestr ) : if typestr [ 1 : ] == 'i4' : typestr = typestr [ 0 ] + 'i8' return typestr dtype = [ ( name , promote_i4 ( typestr ) ) for name , typestr in a . dtype . descr ] return a . astype ( dtype )\n", "title": "", "metadata": ""}
{"_id": "333151da923bf08f1659acb2db57545e", "text": "def seq_to_str ( obj , sep = \",\" ) : if isinstance ( obj , string_classes ) : return obj elif isinstance ( obj , ( list , tuple ) ) : return sep . join ( [ str ( x ) for x in obj ] ) else : return str ( obj )\n", "title": "", "metadata": ""}
{"_id": "957d115fa0450382fd00fb7198df2b84", "text": "def binSearch ( arr , val ) : i = bisect_left ( arr , val ) if i != len ( arr ) and arr [ i ] == val : return i return - 1\n", "title": "", "metadata": ""}
{"_id": "c8991847dac0674e95724d482e045be4", "text": "def get_lons_from_cartesian ( x__ , y__ ) : return rad2deg ( arccos ( x__ / sqrt ( x__ ** 2 + y__ ** 2 ) ) ) * sign ( y__ )\n", "title": "", "metadata": ""}
{"_id": "a69d54a723587242da117149ee066ef5", "text": "def set_ylim ( self , xlims , dx , xscale , reverse = False ) : self . _set_axis_limits ( 'y' , xlims , dx , xscale , reverse ) return\n", "title": "", "metadata": ""}
{"_id": "dc3bcbed736190974cb45784a262c380", "text": "def Flush ( self ) : while self . _age : node = self . _age . PopLeft ( ) self . KillObject ( node . data ) self . _hash = dict ( )\n", "title": "", "metadata": ""}
{"_id": "7ece8d13642e97b42332ce5588013e6f", "text": "def positive_int ( val ) : if isinstance ( val , float ) : raise ValueError ( '\"{}\" must not be a float' . format ( val ) ) val = int ( val ) if val >= 0 : return val raise ValueError ( '\"{}\" must be positive' . format ( val ) )\n", "title": "", "metadata": ""}
{"_id": "bd7fbeb7f9bf8b090abe787525805d74", "text": "def _set_axis_limits ( self , which , lims , d , scale , reverse = False ) : setattr ( self . limits , which + 'lims' , lims ) setattr ( self . limits , 'd' + which , d ) setattr ( self . limits , which + 'scale' , scale ) if reverse : setattr ( self . limits , 'reverse_' + which + '_axis' , True ) return\n", "title": "", "metadata": ""}
{"_id": "63ba581874467d8beeaa7880176f1d99", "text": "def list_get ( l , idx , default = None ) : try : if l [ idx ] : return l [ idx ] else : return default except IndexError : return default\n", "title": "", "metadata": ""}
{"_id": "7024cc5e694f8661d79f86115b7f3381", "text": "def lazy_property ( function ) : cached_val = [ ] def _wrapper ( * args ) : try : return cached_val [ 0 ] except IndexError : ret_val = function ( * args ) cached_val . append ( ret_val ) return ret_val return _wrapper\n", "title": "", "metadata": ""}
{"_id": "08030afc1d020140a09c31ebd19751c5", "text": "def read_text_from_file ( path : str ) -> str : with open ( path ) as text_file : content = text_file . read ( ) return content\n", "title": "", "metadata": ""}
{"_id": "cfa7601910b16d636d51912f21e997e7", "text": "def get_property ( self , filename ) : with open ( self . filepath ( filename ) ) as f : return f . read ( ) . strip ( )\n", "title": "", "metadata": ""}
{"_id": "c03f9a643beb900f300b9c057374e52b", "text": "def warn_if_nans_exist ( X ) : null_count = count_rows_with_nans ( X ) total = len ( X ) percent = 100 * null_count / total if null_count > 0 : warning_message = 'Warning! Found {} rows of {} ({:0.2f}%) with nan values. Only ' 'complete rows will be plotted.' . format ( null_count , total , percent ) warnings . warn ( warning_message , DataWarning )\n", "title": "", "metadata": ""}
{"_id": "8f68f0c30268d920259266935066da12", "text": "def asynchronous ( function , event ) : thread = Thread ( target = synchronous , args = ( function , event ) ) thread . daemon = True thread . start ( )\n", "title": "", "metadata": ""}
{"_id": "746f14cebbf23b8a7984623ddf1f0653", "text": "def dfs_recursive ( graph , node , seen ) : seen [ node ] = True for neighbor in graph [ node ] : if not seen [ neighbor ] : dfs_recursive ( graph , neighbor , seen )\n", "title": "", "metadata": ""}
{"_id": "5bb312a7934fee380aae8b32c4ca8065", "text": "def software_fibonacci ( n ) : a , b = 0 , 1 for i in range ( n ) : a , b = b , a + b return a\n", "title": "", "metadata": ""}
{"_id": "aa4df32b59287c874a32304ea24608ca", "text": "def is_not_null ( df : DataFrame , col_name : str ) -> bool : if ( isinstance ( df , pd . DataFrame ) and col_name in df . columns and df [ col_name ] . notnull ( ) . any ( ) ) : return True else : return False\n", "title": "", "metadata": ""}
{"_id": "b023270437629e8ed49a28094a966b82", "text": "def log_y_cb ( self , w , val ) : self . tab_plot . logy = val self . plot_two_columns ( )\n", "title": "", "metadata": ""}
{"_id": "48199418dad8981f353f2b693672cfb5", "text": "def fmt_subst ( regex , subst ) : return lambda text : re . sub ( regex , subst , text ) if text else text\n", "title": "", "metadata": ""}
{"_id": "8ee750b02f284d04966fa1937c2c32e6", "text": "def is_unicode ( string ) : str_type = str ( type ( string ) ) if str_type . find ( 'str' ) > 0 or str_type . find ( 'unicode' ) > 0 : return True return False\n", "title": "", "metadata": ""}
{"_id": "e0c80c4222a57aaef0507115f2fefd71", "text": "def _is_root ( ) : import os import ctypes try : return os . geteuid ( ) == 0 except AttributeError : return ctypes . windll . shell32 . IsUserAnAdmin ( ) != 0 return False\n", "title": "", "metadata": ""}
{"_id": "f49cd75d106f1741345b4f63ba105991", "text": "def __as_list ( value : List [ JsonObjTypes ] ) -> List [ JsonTypes ] : return [ e . _as_dict if isinstance ( e , JsonObj ) else e for e in value ]\n", "title": "", "metadata": ""}
{"_id": "290af6bd58c761bcd4a109d6f777e7d5", "text": "def str2bytes ( x ) : if type ( x ) is bytes : return x elif type ( x ) is str : return bytes ( [ ord ( i ) for i in x ] ) else : return str2bytes ( str ( x ) )\n", "title": "", "metadata": ""}
{"_id": "9a0ba59bd758a7c24cbbcc6f4727a84f", "text": "def _change_height ( self , ax , new_value ) : for patch in ax . patches : current_height = patch . get_height ( ) diff = current_height - new_value # we change the bar height patch . set_height ( new_value ) # we recenter the bar patch . set_y ( patch . get_y ( ) + diff * .5 )\n", "title": "", "metadata": ""}
{"_id": "e077a0e63cbf14cc53acc5712923e0bd", "text": "def static_get_type_attr ( t , name ) : for type_ in t . mro ( ) : try : return vars ( type_ ) [ name ] except KeyError : pass raise AttributeError ( name )\n", "title": "", "metadata": ""}
{"_id": "082e6de6916ad0bf2d232bc7f12b1dfc", "text": "def allsame ( list_ , strict = True ) : if len ( list_ ) == 0 : return True first_item = list_ [ 0 ] return list_all_eq_to ( list_ , first_item , strict )\n", "title": "", "metadata": ""}
{"_id": "5680591432e3c1f0d1a86dd3b7b63185", "text": "def reduce_multiline ( string ) : string = str ( string ) return \" \" . join ( [ item . strip ( ) for item in string . split ( \"\\n\" ) if item . strip ( ) ] )\n", "title": "", "metadata": ""}
{"_id": "a1bfeb14695ff8810930cb55f797a1bc", "text": "def highlight ( text : str , color_code : int , bold : bool = False ) -> str : return '{}\\033[{}m{}\\033[0m' . format ( '\\033[1m' if bold else '' , color_code , text , )\n", "title": "", "metadata": ""}
{"_id": "977bbb355a342f2999a2e0350ecfad9e", "text": "def remove_duplicates ( lst ) : dset = set ( ) return [ l for l in lst if l not in dset and not dset . add ( l ) ]\n", "title": "", "metadata": ""}
{"_id": "4773b3e4c7c535467dca3d0265d277b3", "text": "def dict_to_querystring ( dictionary ) : s = u\"\" for d in dictionary . keys ( ) : s = unicode . format ( u\"{0}{1}={2}&\" , s , d , dictionary [ d ] ) return s [ : - 1 ]\n", "title": "", "metadata": ""}
{"_id": "d548be734641dfa5907558f70104a8c1", "text": "def _int64_feature ( value ) : if not isinstance ( value , list ) : value = [ value ] return tf . train . Feature ( int64_list = tf . train . Int64List ( value = value ) )\n", "title": "", "metadata": ""}
{"_id": "fd20dd72c9c5241375ac50a0c2a0e740", "text": "def safe_quotes ( text , escape_single_quotes = False ) : if isinstance ( text , str ) : safe_text = text . replace ( '\"' , \"&quot;\" ) if escape_single_quotes : safe_text = safe_text . replace ( \"'\" , \"&#92;'\" ) return safe_text . replace ( 'True' , 'true' ) return text\n", "title": "", "metadata": ""}
{"_id": "cd67f0008ee07a5b1981e39787e9e84e", "text": "def datetime_to_ms ( dt ) : seconds = calendar . timegm ( dt . utctimetuple ( ) ) return seconds * 1000 + int ( dt . microsecond / 1000 )\n", "title": "", "metadata": ""}
{"_id": "1c3c2351cf6aa8316d4ed6dc3c155a23", "text": "def _cleanup ( path : str ) -> None : if os . path . isdir ( path ) : shutil . rmtree ( path )\n", "title": "", "metadata": ""}
{"_id": "894724aca3e1b004e8b3b15d1597807f", "text": "def clear ( ) : if sys . platform . startswith ( \"win\" ) : call ( \"cls\" , shell = True ) else : call ( \"clear\" , shell = True )\n", "title": "", "metadata": ""}
{"_id": "e15cf25dff86a70453b2f098c5bf9eae", "text": "def save_json ( object , handle , indent = 2 ) : obj_json = json . dumps ( object , indent = indent , cls = NumpyJSONEncoder ) handle . write ( obj_json )\n", "title": "", "metadata": ""}
{"_id": "c3e6fc98aa8f4740fa68d604a785f7fc", "text": "def getSystemVariable ( self , remote , name ) : if self . _server is not None : return self . _server . getSystemVariable ( remote , name )\n", "title": "", "metadata": ""}
{"_id": "0be0f41ea4cf776dce4d6fc81d603fd3", "text": "def normalize ( self , dt , is_dst = False ) : if dt . tzinfo is self : return dt if dt . tzinfo is None : raise ValueError ( 'Naive time - no tzinfo set' ) return dt . astimezone ( self )\n", "title": "", "metadata": ""}
{"_id": "1cb3eb31a9d9367f8515ecde7c66b9cf", "text": "def stringc ( text , color ) : if has_colors : text = str ( text ) return \"\\033[\" + codeCodes [ color ] + \"m\" + text + \"\\033[0m\" else : return text\n", "title": "", "metadata": ""}
{"_id": "a5c83501f4b31e7bf69c6f4f88d5d007", "text": "def block_diag ( * blocks : np . ndarray ) -> np . ndarray : for b in blocks : if b . shape [ 0 ] != b . shape [ 1 ] : raise ValueError ( 'Blocks must be square.' ) if not blocks : return np . zeros ( ( 0 , 0 ) , dtype = np . complex128 ) n = sum ( b . shape [ 0 ] for b in blocks ) dtype = functools . reduce ( _merge_dtypes , ( b . dtype for b in blocks ) ) result = np . zeros ( shape = ( n , n ) , dtype = dtype ) i = 0 for b in blocks : j = i + b . shape [ 0 ] result [ i : j , i : j ] = b i = j return result\n", "title": "", "metadata": ""}
{"_id": "e2b82f3837c4c7ff98a0b1ddbc636735", "text": "def add_chart ( self , chart , row , col ) : self . __charts . append ( ( chart , ( row , col ) ) )\n", "title": "", "metadata": ""}
{"_id": "a50216ed55a577547891b636de7101b4", "text": "def _openResources ( self ) : arr = np . load ( self . _fileName , allow_pickle = ALLOW_PICKLE ) check_is_an_array ( arr ) self . _array = arr\n", "title": "", "metadata": ""}
{"_id": "b6a5882626c4373b7a5bc7ed635ed3f7", "text": "def get_list_dimensions ( _list ) : if isinstance ( _list , list ) or isinstance ( _list , tuple ) : return [ len ( _list ) ] + get_list_dimensions ( _list [ 0 ] ) return [ ]\n", "title": "", "metadata": ""}
{"_id": "9e5024b10a6d2900ad5e89bbaad730e7", "text": "def write_color ( string , name , style = 'normal' , when = 'auto' ) : write ( color ( string , name , style , when ) )\n", "title": "", "metadata": ""}
{"_id": "4d892952a52392014aac6b1dd8e06df0", "text": "def normcdf ( x , log = False ) : y = np . atleast_1d ( x ) . copy ( ) flib . normcdf ( y ) if log : if ( y > 0 ) . all ( ) : return np . log ( y ) return - np . inf return y\n", "title": "", "metadata": ""}
{"_id": "cffdbe0fab5b2448b3a516e826e6102c", "text": "def _request ( self , data ) : return requests . post ( self . endpoint , data = data . encode ( \"ascii\" ) ) . content\n", "title": "", "metadata": ""}
{"_id": "740e4e899ce7e1ae2889db65d1e04a7f", "text": "def get_average_length_of_string ( strings ) : if not strings : return 0 return sum ( len ( word ) for word in strings ) / len ( strings )\n", "title": "", "metadata": ""}
{"_id": "34cf69fbdadc21e60468ffc25e7f607c", "text": "def first_sunday ( self , year , month ) : date = datetime ( year , month , 1 , 0 ) days_until_sunday = 6 - date . weekday ( ) return date + timedelta ( days = days_until_sunday )\n", "title": "", "metadata": ""}
{"_id": "fe66604a45c76bb64be578ca9553bf4a", "text": "def _updateItemComboBoxIndex ( self , item , column , num ) : item . _combobox_current_index [ column ] = num item . _combobox_current_value [ column ] = item . _combobox_option_list [ column ] [ num ] [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "12a4872dc4289597eaa43b4ff28b0fd9", "text": "def circ_permutation ( items ) : permutations = [ ] for i in range ( len ( items ) ) : permutations . append ( items [ i : ] + items [ : i ] ) return permutations\n", "title": "", "metadata": ""}
{"_id": "aa2852fa6f6e852c1be31988da25af46", "text": "def python_mime ( fn ) : @ wraps ( fn ) def python_mime_decorator ( * args , * * kwargs ) : response . content_type = \"text/x-python\" return fn ( * args , * * kwargs ) return python_mime_decorator\n", "title": "", "metadata": ""}
{"_id": "776e01ff26dd80d5539faa0661e11615", "text": "def dt2ts ( dt ) : # Note: no assertion to really keep this fast  assert isinstance ( dt , ( datetime . datetime , datetime . date ) ) ret = time . mktime ( dt . timetuple ( ) ) if isinstance ( dt , datetime . datetime ) : ret += 1e-6 * dt . microsecond return ret\n", "title": "", "metadata": ""}
{"_id": "60208e1eb4c18e8676610a8d43bcc2b3", "text": "def from_pairs_to_array_values ( pairs ) : result = { } for pair in pairs : result [ pair [ 0 ] ] = concat ( prop_or ( [ ] , pair [ 0 ] , result ) , [ pair [ 1 ] ] ) return result\n", "title": "", "metadata": ""}
{"_id": "11ff669a5ba9ce04839071bb3fced302", "text": "def gen_random_string ( str_len ) : return '' . join ( random . choice ( string . ascii_letters + string . digits ) for _ in range ( str_len ) )\n", "title": "", "metadata": ""}
{"_id": "84a1b91c905ce43b39d62140c99edc14", "text": "def distinct ( l ) : seen = set ( ) seen_add = seen . add return ( _ for _ in l if not ( _ in seen or seen_add ( _ ) ) )\n", "title": "", "metadata": ""}
{"_id": "4814463da1420a595326cf754ba38e7b", "text": "def do_restart ( self , line ) : self . application . master . Restart ( opendnp3 . RestartType . COLD , restart_callback )\n", "title": "", "metadata": ""}
{"_id": "f959422857173ee9dafb5435201ec8ce", "text": "def _summarize_object_type ( model ) : # the fields for the service's model model_fields = { field . name : field for field in list ( model . fields ( ) ) } # summarize the model return { 'fields' : [ { 'name' : key , 'type' : type ( convert_peewee_field ( value ) ) . __name__ } for key , value in model_fields . items ( ) ] }\n", "title": "", "metadata": ""}
{"_id": "4be400d2fe5ff997ac2e74e8723b0644", "text": "def writeCSV ( data , headers , csvFile ) : with open ( csvFile , \"wb\" ) as f : writer = csv . writer ( f , delimiter = \",\" ) writer . writerow ( headers ) writer . writerows ( data )\n", "title": "", "metadata": ""}
{"_id": "36a93607a82916883c0b010e31ec3b07", "text": "def angle ( x , y ) : return arccos ( dot ( x , y ) / ( norm ( x ) * norm ( y ) ) ) * 180. / pi\n", "title": "", "metadata": ""}
{"_id": "d61e73b3a14e0274bf4dee1529e74093", "text": "def c_array ( ctype , values ) : if isinstance ( values , np . ndarray ) and values . dtype . itemsize == ctypes . sizeof ( ctype ) : return ( ctype * len ( values ) ) . from_buffer_copy ( values ) return ( ctype * len ( values ) ) ( * values )\n", "title": "", "metadata": ""}
{"_id": "29b0a8128126107fcfa80d8ca2065bbc", "text": "def mean ( inlist ) : sum = 0 for item in inlist : sum = sum + item return sum / float ( len ( inlist ) )\n", "title": "", "metadata": ""}
{"_id": "cbea8b5280f06835105c5f289163438a", "text": "def is_timestamp ( obj ) : return isinstance ( obj , datetime . datetime ) or is_string ( obj ) or is_int ( obj ) or is_float ( obj )\n", "title": "", "metadata": ""}
{"_id": "d78e969a08679faeb7cb04a543d2b419", "text": "def _cnx_is_empty ( in_file ) : with open ( in_file ) as in_handle : for i , line in enumerate ( in_handle ) : if i > 0 : return False return True\n", "title": "", "metadata": ""}
{"_id": "c4284aa0e545ea3be700b5507b43ad82", "text": "def _sum_cycles_from_tokens ( self , tokens : List [ str ] ) -> int : return sum ( ( int ( self . _nonnumber_pattern . sub ( '' , t ) ) for t in tokens ) )\n", "title": "", "metadata": ""}
{"_id": "29632493bd8a74ea831ce9232d4ac4e4", "text": "def clean_out_dir ( directory ) : if not isinstance ( directory , path ) : directory = path ( directory ) for file_path in directory . files ( ) : file_path . remove ( ) for dir_path in directory . dirs ( ) : dir_path . rmtree ( )\n", "title": "", "metadata": ""}
{"_id": "0e1cc5616da3d108743fb096147e28e5", "text": "def read_credentials ( fname ) : with open ( fname , 'r' ) as f : username = f . readline ( ) . strip ( '\\n' ) password = f . readline ( ) . strip ( '\\n' ) return username , password\n", "title": "", "metadata": ""}
{"_id": "f1d78aaed00a1c451c33a7b6113950ef", "text": "def values ( self ) : lower = float ( self . lowerSpnbx . value ( ) ) upper = float ( self . upperSpnbx . value ( ) ) return ( lower , upper )\n", "title": "", "metadata": ""}
{"_id": "5e5530d1fa23d1d10d4689b232958d50", "text": "def psutil_phymem_usage ( ) : import psutil # This is needed to avoid a deprecation warning error with  # newer psutil versions  try : percent = psutil . virtual_memory ( ) . percent except : percent = psutil . phymem_usage ( ) . percent return percent\n", "title": "", "metadata": ""}
{"_id": "0fca16efce64104ea868c7bc4ca71afa", "text": "def ensure_index ( self , key , unique = False ) : return self . collection . ensure_index ( key , unique = unique )\n", "title": "", "metadata": ""}
{"_id": "221f166fa4e8abe2e96986cd9f921faa", "text": "def accel_next ( self , * args ) : if self . get_notebook ( ) . get_current_page ( ) + 1 == self . get_notebook ( ) . get_n_pages ( ) : self . get_notebook ( ) . set_current_page ( 0 ) else : self . get_notebook ( ) . next_page ( ) return True\n", "title": "", "metadata": ""}
{"_id": "bbab89ff17c58901447ea7fcef5f561f", "text": "def to_clipboard ( self , excel = True , sep = None , * * kwargs ) : from pandas . io import clipboards clipboards . to_clipboard ( self , excel = excel , sep = sep , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "01d20a4236b4bea81f0d74b21e0d1774", "text": "def last_day ( year = _year , month = _month ) : last_day = calendar . monthrange ( year , month ) [ 1 ] return datetime . date ( year = year , month = month , day = last_day )\n", "title": "", "metadata": ""}
{"_id": "71fdcd8e4c3cfa702a602dd207783b4b", "text": "def get_column_names ( engine : Engine , tablename : str ) -> List [ str ] : return [ info . name for info in gen_columns_info ( engine , tablename ) ]\n", "title": "", "metadata": ""}
{"_id": "07daea8eb24143d983a0033dce3b16ce", "text": "def url_syntax_check ( url ) : # pragma: no cover if url and isinstance ( url , str ) : # The given URL is not empty nor None. # and # * The given URL is a string. # We silently load the configuration. load_config ( True ) return Check ( url ) . is_url_valid ( ) # We return None, there is nothing to check. return None\n", "title": "", "metadata": ""}
{"_id": "d39fca0c8581b6fd1e9565cf03a03323", "text": "def cpu_count ( ) -> int : if multiprocessing is None : return 1 try : return multiprocessing . cpu_count ( ) except NotImplementedError : pass try : return os . sysconf ( \"SC_NPROCESSORS_CONF\" ) except ( AttributeError , ValueError ) : pass gen_log . error ( \"Could not detect number of processors; assuming 1\" ) return 1\n", "title": "", "metadata": ""}
{"_id": "3d1b550c2b3aa4dfe4cc5aab91558b5e", "text": "def indent ( txt , spacing = 4 ) : return prefix ( str ( txt ) , '' . join ( [ ' ' for _ in range ( spacing ) ] ) )\n", "title": "", "metadata": ""}
{"_id": "a150acdaebe4f511edee1ec8d54d0d31", "text": "def remove_series ( self , series ) : if len ( self . all_series ( ) ) == 1 : raise ValueError ( \"Cannot remove last series from %s\" % str ( self ) ) self . _all_series . remove ( series ) series . _chart = None\n", "title": "", "metadata": ""}
{"_id": "df99de1058193b59a487107cea07c571", "text": "def indented_show ( text , howmany = 1 ) : print ( StrTemplate . pad_indent ( text = text , howmany = howmany ) )\n", "title": "", "metadata": ""}
{"_id": "cad92fd2b754daa0563a56abf114a6b7", "text": "def bash ( filename ) : sys . stdout . flush ( ) subprocess . call ( \"bash {}\" . format ( filename ) , shell = True )\n", "title": "", "metadata": ""}
{"_id": "916ec7cf00011d473529765e55ed4d79", "text": "def as_list ( callable ) : @ wraps ( callable ) def wrapper ( value_iter ) : return [ callable ( value ) for value in value_iter ] return wrapper\n", "title": "", "metadata": ""}
{"_id": "fc3e7dcf6091c09ae6e16f5f793960c1", "text": "def restart_program ( ) : python = sys . executable os . execl ( python , python , * sys . argv )\n", "title": "", "metadata": ""}
{"_id": "a0b30510513e92ea196bb9a669ef50bb", "text": "def sort_data ( x , y ) : xy = sorted ( zip ( x , y ) ) x , y = zip ( * xy ) return x , y\n", "title": "", "metadata": ""}
{"_id": "332ecb6a6ae663e80e81adecab15b3ef", "text": "def _from_list_dict ( cls , list_dic ) : return cls ( { _convert_id ( dic [ cls . CHAMP_ID ] ) : dict ( dic ) for dic in list_dic } )\n", "title": "", "metadata": ""}
{"_id": "d7f49732c6fd86cd8d4a7e40509591fb", "text": "def _depr ( fn , usage , stacklevel = 3 ) : warn ( '{0} is deprecated. Use {1} instead' . format ( fn , usage ) , stacklevel = stacklevel , category = DeprecationWarning )\n", "title": "", "metadata": ""}
{"_id": "7121cc626d28d0ffd726d9f3fbd8f43d", "text": "def custodian_archive ( packages = None ) : modules = { 'c7n' , 'pkg_resources' } if packages : modules = filter ( None , modules . union ( packages ) ) return PythonPackageArchive ( * sorted ( modules ) )\n", "title": "", "metadata": ""}
{"_id": "b8eb8b302b90c71e9cd7123b890fa15e", "text": "def replace_list ( items , match , replacement ) : return [ replace ( item , match , replacement ) for item in items ]\n", "title": "", "metadata": ""}
{"_id": "79792f112257623e63398060946b05e6", "text": "def unique_list ( lst ) : uniq = [ ] for item in lst : if item not in uniq : uniq . append ( item ) return uniq\n", "title": "", "metadata": ""}
{"_id": "6a3dbc0361b1d0d9a45bfdaf86d93719", "text": "def _scale_shape ( dshape , scale = ( 1 , 1 , 1 ) ) : nshape = np . round ( np . array ( dshape ) * np . array ( scale ) ) return tuple ( nshape . astype ( np . int ) )\n", "title": "", "metadata": ""}
{"_id": "d8a5f5b0a5da7e7d6ff2d6852f67037c", "text": "def __next__ ( self ) : res = self . _head self . _fill ( ) if res is None : raise StopIteration ( ) return res\n", "title": "", "metadata": ""}
{"_id": "9a85df5e4484bc023dd0c17423461fed", "text": "def draw_image ( self , ax , image ) : self . renderer . draw_image ( imdata = utils . image_to_base64 ( image ) , extent = image . get_extent ( ) , coordinates = \"data\" , style = { \"alpha\" : image . get_alpha ( ) , \"zorder\" : image . get_zorder ( ) } , mplobj = image )\n", "title": "", "metadata": ""}
{"_id": "0859c458d848e052496bb57772054a67", "text": "def unpickle_file ( picklefile , * * kwargs ) : with open ( picklefile , 'rb' ) as f : return pickle . load ( f , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "1ec66294e617d54b7d019390c686ac77", "text": "def message_from_string ( s , * args , * * kws ) : from future . backports . email . parser import Parser return Parser ( * args , * * kws ) . parsestr ( s )\n", "title": "", "metadata": ""}
{"_id": "340c2e2600bf3f3fda90cf6fffc79d83", "text": "def update ( self , * * kwargs ) : self . reload_context ( es_based = False , * * kwargs ) return super ( ESCollectionView , self ) . update ( * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "20e6517019e892b28280a56a63b933c1", "text": "def strip_spaces ( x ) : x = x . replace ( b' ' , b'' ) x = x . replace ( b'\\t' , b'' ) return x\n", "title": "", "metadata": ""}
{"_id": "0c552fdf9f828391a0b2a601305098ae", "text": "def price_rounding ( price , decimals = 2 ) : try : exponent = D ( '.' + decimals * '0' ) except InvalidOperation : # Currencies with no decimal places, ex. JPY, HUF exponent = D ( ) return price . quantize ( exponent , rounding = ROUND_UP )\n", "title": "", "metadata": ""}
{"_id": "bb3aa6d87cc1872bd71cdcc32cd85c47", "text": "def tail ( self , n = 10 ) : with cython_context ( ) : return SArray ( _proxy = self . __proxy__ . tail ( n ) )\n", "title": "", "metadata": ""}
{"_id": "1d200c2ae19f184194160e6cc391a0ee", "text": "def infer_dtype_from ( val , pandas_dtype = False ) : if is_scalar ( val ) : return infer_dtype_from_scalar ( val , pandas_dtype = pandas_dtype ) return infer_dtype_from_array ( val , pandas_dtype = pandas_dtype )\n", "title": "", "metadata": ""}
{"_id": "9ea11ca9fad8fb66e0526bd6b737e7c3", "text": "def remove_instance ( self , item ) : self . instances . remove ( item ) self . remove_item ( item )\n", "title": "", "metadata": ""}
{"_id": "833f0a11c5d1afdc5fd63180b84d970a", "text": "def unique ( transactions ) : seen = set ( ) # TODO: Handle comments return [ x for x in transactions if not ( x in seen or seen . add ( x ) ) ]\n", "title": "", "metadata": ""}
{"_id": "dc9d2aca44dd97b5ae3add45818d1492", "text": "def __grid_widgets ( self ) : scrollbar_column = 0 if self . __compound is tk . LEFT else 2 self . _canvas . grid ( row = 0 , column = 1 , sticky = \"nswe\" ) self . _scrollbar . grid ( row = 0 , column = scrollbar_column , sticky = \"ns\" )\n", "title": "", "metadata": ""}
{"_id": "e219f0470f9c4e44144f0784c9ec81d5", "text": "def autozoom ( self , n = None ) : if n == None : for p in self . plot_widgets : p . autoRange ( ) else : self . plot_widgets [ n ] . autoRange ( ) return self\n", "title": "", "metadata": ""}
{"_id": "1bb7187040feee3ef00564b053a12bb9", "text": "def fit_linear ( X , y ) : model = linear_model . LinearRegression ( ) model . fit ( X , y ) return model\n", "title": "", "metadata": ""}
{"_id": "49702068a1ee28d3ec12b3cc7a6b3658", "text": "def _check_valid ( key , val , valid ) : if val not in valid : raise ValueError ( '%s must be one of %s, not \"%s\"' % ( key , valid , val ) )\n", "title": "", "metadata": ""}
{"_id": "013a208b7766c2668d40bb543cfffd8c", "text": "def lint ( fmt = 'colorized' ) : if fmt == 'html' : outfile = 'pylint_report.html' local ( 'pylint -f %s davies > %s || true' % ( fmt , outfile ) ) local ( 'open %s' % outfile ) else : local ( 'pylint -f %s davies || true' % fmt )\n", "title": "", "metadata": ""}
{"_id": "4603549d930fe2f0cb9a54d6900858bd", "text": "def post ( self , endpoint : str , * * kwargs ) -> dict : return self . _request ( 'POST' , endpoint , * * kwargs )\n", "title": "", "metadata": ""}
{"_id": "5f576de741cbb9567fe1404307415a3f", "text": "def next ( self ) : _LOGGER . debug ( \"reading next\" ) if self . closed : _LOGGER . debug ( \"stream is closed\" ) raise StopIteration ( ) line = self . readline ( ) if not line : _LOGGER . debug ( \"nothing more to read\" ) raise StopIteration ( ) return line\n", "title": "", "metadata": ""}
{"_id": "1330e4d0da6223d8567c650e26146dc2", "text": "def log_no_newline ( self , msg ) : self . print2file ( self . logfile , False , False , msg )\n", "title": "", "metadata": ""}
{"_id": "7579b2f2b07523784a12a1576552fd9a", "text": "def write_file ( filename , content ) : print 'Generating {0}' . format ( filename ) with open ( filename , 'wb' ) as out_f : out_f . write ( content )\n", "title": "", "metadata": ""}
{"_id": "168df82f94c977c371cc80110a4e28ab", "text": "def get_as_bytes ( self , s3_path ) : ( bucket , key ) = self . _path_to_bucket_and_key ( s3_path ) obj = self . s3 . Object ( bucket , key ) contents = obj . get ( ) [ 'Body' ] . read ( ) return contents\n", "title": "", "metadata": ""}
{"_id": "95176ecae5f5fff3121ba15b7d8e0828", "text": "def _get_compiled_ext ( ) : for ext , mode , typ in imp . get_suffixes ( ) : if typ == imp . PY_COMPILED : return ext\n", "title": "", "metadata": ""}
{"_id": "9aaf05c23cf6fee393ce57a441432fc5", "text": "def get_single_value ( d ) : assert len ( d ) == 1 , 'Single-item dict must have just one item, not %d.' % len ( d ) return next ( six . itervalues ( d ) )\n", "title": "", "metadata": ""}
{"_id": "a00d4197be63ecc55e3dc39044a262d1", "text": "def sine_wave ( frequency ) : xs = tf . reshape ( tf . range ( _samples ( ) , dtype = tf . float32 ) , [ 1 , _samples ( ) , 1 ] ) ts = xs / FLAGS . sample_rate return tf . sin ( 2 * math . pi * frequency * ts )\n", "title": "", "metadata": ""}
{"_id": "374289f0babb9ee5463028fb888f19f4", "text": "def _read_stdin ( ) : line = sys . stdin . readline ( ) while line : yield line line = sys . stdin . readline ( )\n", "title": "", "metadata": ""}
{"_id": "293a03dba4388435ddd3bd57678c1dbf", "text": "def execute_in_background ( self ) : # http://stackoverflow.com/questions/1605520 args = shlex . split ( self . cmd ) p = Popen ( args ) return p . pid\n", "title": "", "metadata": ""}
{"_id": "af685c1926a15da1e30750cb6551843f", "text": "def dict_from_object ( obj : object ) : # If object is a dict instance, no need to convert. return ( obj if isinstance ( obj , dict ) else { attr : getattr ( obj , attr ) for attr in dir ( obj ) if not attr . startswith ( '_' ) } )\n", "title": "", "metadata": ""}
{"_id": "cd063dc0189eb50c45168d20f5b4b0bb", "text": "def dist ( x1 , x2 , axis = 0 ) : return np . linalg . norm ( x2 - x1 , axis = axis )\n", "title": "", "metadata": ""}
{"_id": "7d0f6ea0ec8c60cffcb55bf0e1c0dbb1", "text": "def remove_columns ( self , data , columns ) : for column in columns : if column in data . columns : data = data . drop ( column , axis = 1 ) return data\n", "title": "", "metadata": ""}
{"_id": "d8d3bfd4fe8da96fbca4049313f5f139", "text": "def _iterable_to_varargs_method ( func ) : def wrapped ( self , * args , * * kwargs ) : return func ( self , args , * * kwargs ) return wrapped\n", "title": "", "metadata": ""}
{"_id": "8b9b962691ba1e9b445d5707aa1b381f", "text": "def find_index ( segmentation , stroke_id ) : for i , symbol in enumerate ( segmentation ) : for sid in symbol : if sid == stroke_id : return i return - 1\n", "title": "", "metadata": ""}
{"_id": "07f6105fe3859f9680314df23c35fb90", "text": "def dimensions ( self ) : size = self . pdf . getPage ( 0 ) . mediaBox return { 'w' : float ( size [ 2 ] ) , 'h' : float ( size [ 3 ] ) }\n", "title": "", "metadata": ""}
{"_id": "a5da45719b189fe9e5e077181b8aff98", "text": "def slugify ( string ) : string = re . sub ( '[^\\w .-]' , '' , string ) string = string . replace ( \" \" , \"-\" ) return string\n", "title": "", "metadata": ""}
{"_id": "36092db3969647c862c2cc0cd192c78e", "text": "def yview ( self , * args ) : self . after_idle ( self . __updateWnds ) ttk . Treeview . yview ( self , * args )\n", "title": "", "metadata": ""}
{"_id": "0aee47141f2713d0d1aa52ff060b6b98", "text": "def is_iterable ( value ) : return isinstance ( value , np . ndarray ) or isinstance ( value , list ) or isinstance ( value , tuple ) , value\n", "title": "", "metadata": ""}
{"_id": "31f86ebb9a6bc1a7314c456fd6ec6d49", "text": "def shot_noise ( x , severity = 1 ) : c = [ 60 , 25 , 12 , 5 , 3 ] [ severity - 1 ] x = np . array ( x ) / 255. x_clip = np . clip ( np . random . poisson ( x * c ) / float ( c ) , 0 , 1 ) * 255 return around_and_astype ( x_clip )\n", "title": "", "metadata": ""}
{"_id": "4d2283defd18d4a142ffc1c820e3be06", "text": "def bitsToString ( arr ) : s = array ( 'c' , '.' * len ( arr ) ) for i in xrange ( len ( arr ) ) : if arr [ i ] == 1 : s [ i ] = '*' return s\n", "title": "", "metadata": ""}
{"_id": "273b62b3610000be5c6aa96678a8ebb4", "text": "def add_header ( self , name , value ) : self . _headers . setdefault ( _hkey ( name ) , [ ] ) . append ( _hval ( value ) )\n", "title": "", "metadata": ""}
{"_id": "0898ab2ce6b13c997f55c6c286498e0c", "text": "def get_average_color ( colors ) : c = reduce ( color_reducer , colors ) total = len ( colors ) return tuple ( v / total for v in c )\n", "title": "", "metadata": ""}
{"_id": "0604453c037cb65b7dd3f062801d431e", "text": "def is_valid_file ( parser , arg ) : if not os . path . exists ( arg ) : parser . error ( \"File %s not found\" % arg ) else : return arg\n", "title": "", "metadata": ""}
{"_id": "46eac72d2b8fe953b39e243423ec4d44", "text": "def to_unix ( cls , timestamp ) : if not isinstance ( timestamp , datetime . datetime ) : raise TypeError ( 'Time.milliseconds expects a datetime object' ) base = time . mktime ( timestamp . timetuple ( ) ) return base\n", "title": "", "metadata": ""}
{"_id": "5984c7dceacd86ba2c63fdf10888732c", "text": "def get_image_dimension ( self , url ) : w_h = ( None , None ) try : if url . startswith ( '//' ) : url = 'http:' + url data = requests . get ( url ) . content im = Image . open ( BytesIO ( data ) ) w_h = im . size except Exception : logger . warning ( \"Error getting image size {}\" . format ( url ) , exc_info = True ) return w_h\n", "title": "", "metadata": ""}
{"_id": "0e2fe5b25fe791c80090eced0eb166d4", "text": "async def _send_plain_text ( self , request : Request , stack : Stack ) : await self . _send_text ( request , stack , None )\n", "title": "", "metadata": ""}
{"_id": "e7240a10942603fa82504ebe6491c93a", "text": "def gaussian_variogram_model ( m , d ) : psill = float ( m [ 0 ] ) range_ = float ( m [ 1 ] ) nugget = float ( m [ 2 ] ) return psill * ( 1. - np . exp ( - d ** 2. / ( range_ * 4. / 7. ) ** 2. ) ) + nugget\n", "title": "", "metadata": ""}
{"_id": "1bcd8d2ebe46c358a539b512abdc32fc", "text": "def close_log ( log , verbose = True ) : if verbose : print ( 'Closing log file:' , log . name ) # Send closing message. log . info ( 'The log file has been closed.' ) # Remove all handlers from log. [ log . removeHandler ( handler ) for handler in log . handlers ]\n", "title": "", "metadata": ""}
{"_id": "aa64d44cc79e8ca310e83ce70b0e1fd3", "text": "def json_template ( data , template_name , template_context ) : html = render_to_string ( template_name , template_context ) data = data or { } data [ 'html' ] = html return HttpResponse ( json_encode ( data ) , content_type = 'application/json' )\n", "title": "", "metadata": ""}
{"_id": "92e9a490dda25f73f0d0b54bac0d103e", "text": "def is_empty ( self ) : if ( ( ( self . channels == [ ] ) and ( not self . shape == ( 0 , 0 ) ) ) or ( ( not self . channels == [ ] ) and ( self . shape == ( 0 , 0 ) ) ) ) : raise RuntimeError ( \"Channels-shape mismatch.\" ) return self . channels == [ ] and self . shape == ( 0 , 0 )\n", "title": "", "metadata": ""}
{"_id": "71adbde75511323bc68641a36c081c48", "text": "def extent ( self ) : return ( self . intervals [ 1 ] . pix1 - 0.5 , self . intervals [ 1 ] . pix2 - 0.5 , self . intervals [ 0 ] . pix1 - 0.5 , self . intervals [ 0 ] . pix2 - 0.5 , )\n", "title": "", "metadata": ""}
{"_id": "c9c8513876867d68accd9c668a586783", "text": "def dot_v2 ( vec1 , vec2 ) : return vec1 . x * vec2 . x + vec1 . y * vec2 . y\n", "title": "", "metadata": ""}
{"_id": "fe675dc76a814d11b70aacf490010c13", "text": "def uppercase_chars ( string : any ) -> str : return '' . join ( [ c if c . isupper ( ) else '' for c in str ( string ) ] )\n", "title": "", "metadata": ""}
{"_id": "955d554fd1a77abb72cfdf69e6e6dfc3", "text": "def main ( ctx , connection ) : ctx . obj = Manager ( connection = connection ) ctx . obj . bind ( )\n", "title": "", "metadata": ""}
{"_id": "3e7c385367b83fc2064497a35c5791b2", "text": "def _compress_obj ( obj , level ) : return zlib . compress ( pickle . dumps ( obj , protocol = 2 ) , level )\n", "title": "", "metadata": ""}
{"_id": "889187f625cf063b245130e3127e95a1", "text": "def _unzip_handle ( handle ) : if isinstance ( handle , basestring ) : handle = _gzip_open_filename ( handle ) else : handle = _gzip_open_handle ( handle ) return handle\n", "title": "", "metadata": ""}
{"_id": "fc53d52879933a88b300fe44d85a0cc0", "text": "def inverseHistogram ( hist , bin_range ) : data = hist . astype ( float ) / np . min ( hist [ np . nonzero ( hist ) ] ) new_data = np . empty ( shape = np . sum ( data , dtype = int ) ) i = 0 xvals = np . linspace ( bin_range [ 0 ] , bin_range [ 1 ] , len ( data ) ) for d , x in zip ( data , xvals ) : new_data [ i : i + d ] = x i += int ( d ) return new_data\n", "title": "", "metadata": ""}
{"_id": "561b1640f637515d3e881c84ebdd5fcd", "text": "def decamelise ( text ) : s = re . sub ( '(.)([A-Z][a-z]+)' , r'\\1_\\2' , text ) return re . sub ( '([a-z0-9])([A-Z])' , r'\\1_\\2' , s ) . lower ( )\n", "title": "", "metadata": ""}
{"_id": "d7c8032e87e037eb0b194ecd36ccd744", "text": "def _read_section ( self ) : lines = [ self . _last [ self . _last . find ( \":\" ) + 1 : ] ] self . _last = self . _f . readline ( ) while len ( self . _last ) > 0 and len ( self . _last [ 0 ] . strip ( ) ) == 0 : lines . append ( self . _last ) self . _last = self . _f . readline ( ) return lines\n", "title": "", "metadata": ""}
{"_id": "2dbd7a3c9ea83c043d5e049bfd504428", "text": "def dict_to_enum_fn ( d : Dict [ str , Any ] , enum_class : Type [ Enum ] ) -> Enum : return enum_class [ d [ 'name' ] ]\n", "title": "", "metadata": ""}
{"_id": "8dd43b3d674879dc45a698c37bb358a9", "text": "def is_int_type ( val ) : try : # Python 2 return isinstance ( val , ( int , long ) ) except NameError : # Python 3 return isinstance ( val , int )\n", "title": "", "metadata": ""}
{"_id": "d1308735c82616934a888fca9ace5bb2", "text": "def _fast_read ( self , infile ) : infile . seek ( 0 ) return ( int ( infile . read ( ) . decode ( ) . strip ( ) ) )\n", "title": "", "metadata": ""}
{"_id": "9b123b696c4db36b94183cf3fb18703f", "text": "def drop_bad_characters ( text ) : # Strip all non-ascii and non-printable characters text = '' . join ( [ c for c in text if c in ALLOWED_CHARS ] ) return text\n", "title": "", "metadata": ""}
{"_id": "0fc9e1bbab640897a629c9f4603d15e8", "text": "def finish ( ) : out . warn ( \"Interrupted!\" ) for t in threads : t . stop ( ) jobs . clear ( ) out . warn ( \"Waiting for download threads to finish.\" )\n", "title": "", "metadata": ""}
{"_id": "6367917dfe28330b932e8fcf46123928", "text": "def add_arrow ( self , x1 , y1 , x2 , y2 , * * kws ) : self . panel . add_arrow ( x1 , y1 , x2 , y2 , * * kws )\n", "title": "", "metadata": ""}
{"_id": "2aa47370b11468789d546cadc8ecbe65", "text": "def fetch_header ( self ) : query = self . query ( ) . add_query_parameter ( req = 'header' ) return self . _parse_messages ( self . get_query ( query ) . content ) [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "6322ef74521f245ade68e310c0367890", "text": "def impute_data ( self , x ) : imp = Imputer ( missing_values = 'NaN' , strategy = 'mean' , axis = 0 ) return imp . fit_transform ( x )\n", "title": "", "metadata": ""}
{"_id": "213d039a14016cb69e8deb9f06e08eab", "text": "def to_dataframe ( products ) : try : import pandas as pd except ImportError : raise ImportError ( \"to_dataframe requires the optional dependency Pandas.\" ) return pd . DataFrame . from_dict ( products , orient = 'index' )\n", "title": "", "metadata": ""}
{"_id": "3baa745dd023a947ae9321b52365318a", "text": "def as_list ( self ) : return [ self . name , self . value , [ x . as_list for x in self . children ] ]\n", "title": "", "metadata": ""}
{"_id": "1051fb2c4f559d431c43b3c7906602a5", "text": "def raise_for_not_ok_status ( response ) : if response . code != OK : raise HTTPError ( 'Non-200 response code (%s) for url: %s' % ( response . code , uridecode ( response . request . absoluteURI ) ) ) return response\n", "title": "", "metadata": ""}
{"_id": "0f589e5ef1fbffc1c1ceb038f47a3053", "text": "def bfx ( value , msb , lsb ) : mask = bitmask ( ( msb , lsb ) ) return ( value & mask ) >> lsb\n", "title": "", "metadata": ""}
{"_id": "9434bab9a9dba2eac63eb0a1ab051ed7", "text": "def clean_markdown ( text ) : result = text if isinstance ( text , str ) : result = '' . join ( BeautifulSoup ( markdown ( text ) , 'lxml' ) . findAll ( text = True ) ) return result\n", "title": "", "metadata": ""}
{"_id": "b222d7bb890200ffe25455ecda11b3e4", "text": "def iter_finds ( regex_obj , s ) : if isinstance ( regex_obj , str ) : for m in re . finditer ( regex_obj , s ) : yield m . group ( ) else : for m in regex_obj . finditer ( s ) : yield m . group ( )\n", "title": "", "metadata": ""}
{"_id": "f4347def83fd515fc8542cd01d503e66", "text": "def get_latex_table ( self , parameters = None , transpose = False , caption = None , label = \"tab:model_params\" , hlines = True , blank_fill = \"--\" ) : # pragma: no cover if parameters is None : parameters = self . parent . _all_parameters for p in parameters : assert isinstance ( p , str ) , \"Generating a LaTeX table requires all parameters have labels\" num_parameters = len ( parameters ) num_chains = len ( self . parent . chains ) fit_values = self . get_summary ( squeeze = False ) if label is None : label = \"\" if caption is None : caption = \"\" end_text = \" \\\\\\\\ \\n\" if transpose : column_text = \"c\" * ( num_chains + 1 ) else : column_text = \"c\" * ( num_parameters + 1 ) center_text = \"\" hline_text = \"\\\\hline\\n\" if hlines : center_text += hline_text + \"\\t\\t\" if transpose : center_text += \" & \" . join ( [ \"Parameter\" ] + [ c . name for c in self . parent . chains ] ) + end_text if hlines : center_text += \"\\t\\t\" + hline_text for p in parameters : arr = [ \"\\t\\t\" + p ] for chain_res in fit_values : if p in chain_res : arr . append ( self . get_parameter_text ( * chain_res [ p ] , wrap = True ) ) else : arr . append ( blank_fill ) center_text += \" & \" . join ( arr ) + end_text else : center_text += \" & \" . join ( [ \"Model\" ] + parameters ) + end_text if hlines : center_text += \"\\t\\t\" + hline_text for name , chain_res in zip ( [ c . name for c in self . parent . chains ] , fit_values ) : arr = [ \"\\t\\t\" + name ] for p in parameters : if p in chain_res : arr . append ( self . get_parameter_text ( * chain_res [ p ] , wrap = True ) ) else : arr . append ( blank_fill ) center_text += \" & \" . join ( arr ) + end_text if hlines : center_text += \"\\t\\t\" + hline_text final_text = get_latex_table_frame ( caption , label ) % ( column_text , center_text ) return final_text\n", "title": "", "metadata": ""}
{"_id": "e488cf7f78310882ab94c3bea44d7247", "text": "def convert_tstamp ( response ) : if response is None : # Allow passing None to convert_tstamp() return response # Overrides the set timezone to UTC - I think... tz = timezone . utc if settings . USE_TZ else None return datetime . datetime . fromtimestamp ( response , tz )\n", "title": "", "metadata": ""}
{"_id": "48db8909032b3b4d54fe34f52aec8a4c", "text": "def is_valid_regex ( string ) : try : re . compile ( string ) is_valid = True except re . error : is_valid = False return is_valid\n", "title": "", "metadata": ""}
{"_id": "81cfa0c2a54cdee9960b7b7d094d3f25", "text": "def test_python_java_rt ( ) : sub_env = { 'PYTHONPATH' : _build_dir ( ) } log . info ( 'Executing Python unit tests (against Java runtime classes)...' ) return jpyutil . _execute_python_scripts ( python_java_rt_tests , env = sub_env )\n", "title": "", "metadata": ""}
{"_id": "16920fa5e1e132472bea05adeaf5ef49", "text": "def email_type ( arg ) : if not is_valid_email_address ( arg ) : raise argparse . ArgumentTypeError ( \"{0} is not a valid email address\" . format ( repr ( arg ) ) ) return arg\n", "title": "", "metadata": ""}
{"_id": "93f50d563933a50e2b98953194442eec", "text": "def list2dict ( lst ) : dic = { } for k , v in lst : dic [ k ] = v return dic\n", "title": "", "metadata": ""}
{"_id": "9275ebecaf6f3675197277a0189f855f", "text": "def unique ( input_list ) : output = [ ] for item in input_list : if item not in output : output . append ( item ) return output\n", "title": "", "metadata": ""}
{"_id": "02874844d9db1ee5ff93e248740ee888", "text": "def extract_log_level_from_environment ( k , default ) : return LOG_LEVELS . get ( os . environ . get ( k ) ) or int ( os . environ . get ( k , default ) )\n", "title": "", "metadata": ""}
{"_id": "ea3516df193666e1f3390568677f5262", "text": "def get_timezone ( ) -> Tuple [ datetime . tzinfo , str ] : dt = get_datetime_now ( ) . astimezone ( ) tzstr = dt . strftime ( \"%z\" ) tzstr = tzstr [ : - 2 ] + \":\" + tzstr [ - 2 : ] return dt . tzinfo , tzstr\n", "title": "", "metadata": ""}
{"_id": "be00909caeb6e97b3eb5e18b8c082035", "text": "def static_urls_js ( ) : if apps . is_installed ( 'django.contrib.staticfiles' ) : from django . contrib . staticfiles . storage import staticfiles_storage static_base_url = staticfiles_storage . base_url else : static_base_url = PrefixNode . handle_simple ( \"STATIC_URL\" ) transpile_base_url = urljoin ( static_base_url , 'js/transpile/' ) return { 'static_base_url' : static_base_url , 'transpile_base_url' : transpile_base_url , 'version' : LAST_RUN [ 'version' ] }\n", "title": "", "metadata": ""}
{"_id": "cf5086925bcf426bf9f35bb65a94c41c", "text": "def paste ( cmd = paste_cmd , stdout = PIPE ) : return Popen ( cmd , stdout = stdout ) . communicate ( ) [ 0 ] . decode ( 'utf-8' )\n", "title": "", "metadata": ""}
{"_id": "e36223a14e53bf86c758c7664cda3702", "text": "def indexes_equal ( a : Index , b : Index ) -> bool : return str ( a ) == str ( b )\n", "title": "", "metadata": ""}
{"_id": "bdf3e3573bb5b88311a11cba73052662", "text": "def qsize ( self ) : self . mutex . acquire ( ) n = self . _qsize ( ) self . mutex . release ( ) return n\n", "title": "", "metadata": ""}
{"_id": "605f5c2c64cef7bf7454b6a58493ae1c", "text": "def csv_to_numpy ( string_like , dtype = None ) : # type: (str) -> np.array stream = StringIO ( string_like ) return np . genfromtxt ( stream , dtype = dtype , delimiter = ',' )\n", "title": "", "metadata": ""}
{"_id": "1f01c4ce1005b9dc75630d9ad740fda5", "text": "def get_number ( s , cast = int ) : import string d = \"\" . join ( x for x in str ( s ) if x in string . digits ) return cast ( d )\n", "title": "", "metadata": ""}
{"_id": "1611771b74a4bf052b57c104291db944", "text": "def right_replace ( string , old , new , count = 1 ) : if not string : return string return new . join ( string . rsplit ( old , count ) )\n", "title": "", "metadata": ""}
{"_id": "98ac719837c2a88d956544f04884a2ae", "text": "def is_valid_file ( parser , arg ) : arg = os . path . abspath ( arg ) if not os . path . exists ( arg ) : parser . error ( \"The file %s does not exist!\" % arg ) else : return arg\n", "title": "", "metadata": ""}
{"_id": "cf27ff768a81e61a9ce4987a973b5bdf", "text": "def load_member ( fqn ) : modulename , member_name = split_fqn ( fqn ) module = __import__ ( modulename , globals ( ) , locals ( ) , member_name ) return getattr ( module , member_name )\n", "title": "", "metadata": ""}
{"_id": "76076a787476c1d14f66a3b799e7b886", "text": "def sort_key ( x ) : name , ( r , u ) = x return - len ( u ) + u . count ( '}' ) * 100\n", "title": "", "metadata": ""}
{"_id": "eab010ce33f914072ad3b57524942c7a", "text": "def dedupe_list ( seq ) : seen = set ( ) return [ x for x in seq if not ( x in seen or seen . add ( x ) ) ]\n", "title": "", "metadata": ""}
{"_id": "c694fd05ca15669c37dc6aee61ee6e52", "text": "def int_to_date ( date ) : year = date // 10 ** 4 month = date % 10 ** 4 // 10 ** 2 day = date % 10 ** 2 return datetime . date ( year , month , day )\n", "title": "", "metadata": ""}
{"_id": "7348f171ca50488594c02c8f42fd70e5", "text": "def set ( self , f ) : self . stop ( ) self . _create_timer ( f ) self . start ( )\n", "title": "", "metadata": ""}
{"_id": "a5f648d5d5b7c3fe2b9fad9ff192f0fb", "text": "def count_generator ( generator , memory_efficient = True ) : if memory_efficient : counter = 0 for _ in generator : counter += 1 return counter else : return len ( list ( generator ) )\n", "title": "", "metadata": ""}
{"_id": "73a6a081f1bca844195c53dcc70d65aa", "text": "def sav_to_pandas_rpy2 ( input_file ) : import pandas . rpy . common as com w = com . robj . r ( 'foreign::read.spss(\"%s\", to.data.frame=TRUE)' % input_file ) return com . convert_robj ( w )\n", "title": "", "metadata": ""}
{"_id": "3c710515df78119304fc70b4da08e2c0", "text": "def __len__ ( self ) : length = 0 for typ , siz , _ in self . format : length += siz return length\n", "title": "", "metadata": ""}
{"_id": "86ac93db5aaacc25c2b48a9cd7c8ae9a", "text": "def convertToBool ( ) : if not OPTIONS . strictBool . value : return [ ] REQUIRES . add ( 'strictbool.asm' ) result = [ ] result . append ( 'pop af' ) result . append ( 'call __NORMALIZE_BOOLEAN' ) result . append ( 'push af' ) return result\n", "title": "", "metadata": ""}
{"_id": "90df26dc19fe4e4422f1c8bc0589aef6", "text": "def sort_by_modified ( files_or_folders : list ) -> list : return sorted ( files_or_folders , key = os . path . getmtime , reverse = True )\n", "title": "", "metadata": ""}
{"_id": "023c9670cc8b51ac887b574740acd9e9", "text": "def _replace_file ( path , content ) : if os . path . exists ( path ) : with open ( path , 'r' ) as f : if content == f . read ( ) : print ( \"Not overwriting {} because it is unchanged\" . format ( path ) , file = sys . stderr ) return with open ( path , 'w' ) as f : f . write ( content )\n", "title": "", "metadata": ""}
{"_id": "e54686c2646f155169e440e3d7c65f35", "text": "async def send ( self , data ) : self . writer . write ( data ) await self . writer . drain ( )\n", "title": "", "metadata": ""}
{"_id": "a2394501988da467105048fde930bbec", "text": "def rank ( tensor : BKTensor ) -> int : if isinstance ( tensor , np . ndarray ) : return len ( tensor . shape ) return len ( tensor [ 0 ] . size ( ) )\n", "title": "", "metadata": ""}
{"_id": "2967b2d713e36b54594a9890b32df550", "text": "def setLoggerAll ( self , mthd ) : for key in self . _logger_methods : self . _logger_methods [ key ] = mthd\n", "title": "", "metadata": ""}
{"_id": "061d8dbfd779630ad91144911f4f7594", "text": "def get_time ( filename ) : ts = os . stat ( filename ) . st_mtime return datetime . datetime . utcfromtimestamp ( ts )\n", "title": "", "metadata": ""}
{"_id": "6d571d760d0c0fae47cd7e07eb2d7792", "text": "def stop ( self ) : with self . lock : for dummy in self . threads : self . queue . put ( None )\n", "title": "", "metadata": ""}
{"_id": "af523f636e115ea4a5be8bb67c153d90", "text": "def find_largest_contig ( contig_lengths_dict ) : # Initialise the dictionary longest_contig_dict = dict ( ) for file_name , contig_lengths in contig_lengths_dict . items ( ) : # As the list is sorted in descending order, the largest contig is the first entry in the list longest_contig_dict [ file_name ] = contig_lengths [ 0 ] return longest_contig_dict\n", "title": "", "metadata": ""}
{"_id": "015c6d01f13d0931169c10162d7e9197", "text": "def softplus ( attrs , inputs , proto_obj ) : new_attrs = translation_utils . _add_extra_attributes ( attrs , { 'act_type' : 'softrelu' } ) return 'Activation' , new_attrs , inputs\n", "title": "", "metadata": ""}
{"_id": "48ee3a7a000e2f73da1b761fbf4022f3", "text": "def resize_by_area ( img , size ) : return tf . to_int64 ( tf . image . resize_images ( img , [ size , size ] , tf . image . ResizeMethod . AREA ) )\n", "title": "", "metadata": ""}
{"_id": "94a6702c0c22d5855ff0bd5aa7b89872", "text": "def find_first_number ( ll ) : for nr , entry in enumerate ( ll ) : try : float ( entry ) except ( ValueError , TypeError ) as e : pass else : return nr return None\n", "title": "", "metadata": ""}
{"_id": "d1d6b2601aadedc295467c7d65b812f2", "text": "def file_or_stdin ( ) -> Callable : def parse ( path ) : if path is None or path == \"-\" : return sys . stdin else : return data_io . smart_open ( path ) return parse\n", "title": "", "metadata": ""}
{"_id": "dc8205423f29758679adb9138ed57f26", "text": "def rand_elem ( seq , n = None ) : return map ( random . choice , repeat ( seq , n ) if n is not None else repeat ( seq ) )\n", "title": "", "metadata": ""}
{"_id": "2e0acc20c9a82d24a6af80cce184886c", "text": "def _add_hash ( source ) : source = '\\n' . join ( '# ' + line . rstrip ( ) for line in source . splitlines ( ) ) return source\n", "title": "", "metadata": ""}
{"_id": "9f890f097c96f06621231f1b7c00cebd", "text": "def cpp_prog_builder ( build_context , target ) : yprint ( build_context . conf , 'Build CppProg' , target ) workspace_dir = build_context . get_workspace ( 'CppProg' , target . name ) build_cpp ( build_context , target , target . compiler_config , workspace_dir )\n", "title": "", "metadata": ""}
{"_id": "8875c953cabcee4600077be427ff6831", "text": "def get_user_name ( ) : if sys . platform == 'win32' : #user = os.getenv('USERPROFILE') user = os . getenv ( 'USERNAME' ) else : user = os . getenv ( 'LOGNAME' ) return user\n", "title": "", "metadata": ""}
{"_id": "bbaa3975f0caf618d8c3092561e094c7", "text": "def multidict_to_dict ( d ) : return dict ( ( k , v [ 0 ] if len ( v ) == 1 else v ) for k , v in iterlists ( d ) )\n", "title": "", "metadata": ""}
{"_id": "6765f81223d19405b85c65452e3ce970", "text": "def send ( r , stream = False ) : r . send ( stream = stream ) return r . response\n", "title": "", "metadata": ""}
{"_id": "acc294713f82983b545f422765109c4a", "text": "def lin_interp ( x , rangeX , rangeY ) : s = ( x - rangeX [ 0 ] ) / mag ( rangeX [ 1 ] - rangeX [ 0 ] ) y = rangeY [ 0 ] * ( 1 - s ) + rangeY [ 1 ] * s return y\n", "title": "", "metadata": ""}
{"_id": "8c2674c490b64f1ca0aa1181da891032", "text": "def main ( pargs ) : input_file = sys . argv [ 1 ] fp = ParseFileLineByLine ( input_file ) for i in fp : print ( i )\n", "title": "", "metadata": ""}
{"_id": "40d4f008b6683bcba2fdf545c6e949ea", "text": "def polygon_from_points ( points ) : polygon = [ ] for pair in points . split ( \" \" ) : x_y = pair . split ( \",\" ) polygon . append ( [ float ( x_y [ 0 ] ) , float ( x_y [ 1 ] ) ] ) return polygon\n", "title": "", "metadata": ""}
{"_id": "6abe0cb949849a4b68c26e9f7c86656f", "text": "def beautify ( string , * args , * * kwargs ) : parser = Parser ( args , kwargs ) return parser . beautify ( string )\n", "title": "", "metadata": ""}
{"_id": "73fe8a3faebb1d2f55a66071f49c8408", "text": "def on_modified ( self , event ) : self . _logger . debug ( 'Detected modify event on watched path: %s' , event . src_path ) self . _process_event ( event )\n", "title": "", "metadata": ""}
{"_id": "9f639a284af0f709c7e55c0920f67b8f", "text": "def A ( * a ) : return np . array ( a [ 0 ] ) if len ( a ) == 1 else [ np . array ( o ) for o in a ]\n", "title": "", "metadata": ""}
{"_id": "d7fe5186c6b40b639825cb8e8ab8ab7c", "text": "def _assert_is_type ( name , value , value_type ) : if not isinstance ( value , value_type ) : if type ( value_type ) is tuple : types = ', ' . join ( t . __name__ for t in value_type ) raise ValueError ( '{0} must be one of ({1})' . format ( name , types ) ) else : raise ValueError ( '{0} must be {1}' . format ( name , value_type . __name__ ) )\n", "title": "", "metadata": ""}
{"_id": "13c36782a6f8b2476a35c6e731f70173", "text": "def _join ( verb ) : data = pd . merge ( verb . x , verb . y , * * verb . kwargs ) # Preserve x groups if isinstance ( verb . x , GroupedDataFrame ) : data . plydata_groups = list ( verb . x . plydata_groups ) return data\n", "title": "", "metadata": ""}
{"_id": "55d624903ae8a4dc3fa6299aec070824", "text": "def remove_punctuation ( text , exceptions = [ ] ) : all_but = [ r'\\w' , r'\\s' ] all_but . extend ( exceptions ) pattern = '[^{}]' . format ( '' . join ( all_but ) ) return re . sub ( pattern , '' , text )\n", "title": "", "metadata": ""}
{"_id": "0eabed6d21054b27186f85635aa83294", "text": "def list2string ( inlist , delimit = ' ' ) : stringlist = [ makestr ( _ ) for _ in inlist ] return string . join ( stringlist , delimit )\n", "title": "", "metadata": ""}
{"_id": "68aeb0fdabc7fcc35f670a926b8882c8", "text": "def get_longest_orf ( orfs ) : sorted_orf = sorted ( orfs , key = lambda x : len ( x [ 'sequence' ] ) , reverse = True ) [ 0 ] return sorted_orf\n", "title": "", "metadata": ""}
{"_id": "ae34e84e6a617b8c7751a512d07afa9a", "text": "def flat_list ( lst ) : if isinstance ( lst , list ) : for item in lst : for i in flat_list ( item ) : yield i else : yield lst\n", "title": "", "metadata": ""}
{"_id": "7fe8283a431281c280d171f6f2979e8c", "text": "def set_clear_color ( self , color = 'black' , alpha = None ) : self . glir . command ( 'FUNC' , 'glClearColor' , * Color ( color , alpha ) . rgba )\n", "title": "", "metadata": ""}
{"_id": "593ffb04fc6a210d151110c1b20ca9ab", "text": "def coverage ( ) : run ( \"coverage run --source {PROJECT_NAME} -m py.test\" . format ( PROJECT_NAME = PROJECT_NAME ) ) run ( \"coverage report -m\" ) run ( \"coverage html\" ) webbrowser . open ( 'file://' + os . path . realpath ( \"htmlcov/index.html\" ) , new = 2 )\n", "title": "", "metadata": ""}
{"_id": "3b74731d339770ae404ea60d9cdc5db4", "text": "def _text_to_graphiz ( self , text ) : dot = Source ( text , format = 'svg' ) return dot . pipe ( ) . decode ( 'utf-8' )\n", "title": "", "metadata": ""}
{"_id": "09ea2957f32f573c9494291490461d72", "text": "def is_float ( value ) : return isinstance ( value , float ) or isinstance ( value , int ) or isinstance ( value , np . float64 ) , float ( value )\n", "title": "", "metadata": ""}
{"_id": "489d216944257a6c9f302c704debc55b", "text": "def __round_time ( self , dt ) : round_to = self . _resolution . total_seconds ( ) seconds = ( dt - dt . min ) . seconds rounding = ( seconds + round_to / 2 ) // round_to * round_to return dt + timedelta ( 0 , rounding - seconds , - dt . microsecond )\n", "title": "", "metadata": ""}
{"_id": "3850d68b2c25667763ee5ca1cccf2b95", "text": "def __enter__ ( self ) : self . fd = open ( self . filename , 'a' ) fcntl . lockf ( self . fd , fcntl . LOCK_EX ) return self . fd\n", "title": "", "metadata": ""}
{"_id": "e1f50931427728fa6af9cdf3c6b95c59", "text": "async def async_run ( self ) -> None : self . main_task = self . loop . create_task ( self . main ( ) ) await self . main_task\n", "title": "", "metadata": ""}
{"_id": "e017d64dba72d4ce941ac34c664499f2", "text": "def _file_exists ( path , filename ) : return os . path . isfile ( os . path . join ( path , filename ) )\n", "title": "", "metadata": ""}
{"_id": "ce6c99b243bbd1b383e2933d69354ad3", "text": "def get_url_args ( url ) : url_data = urllib . parse . urlparse ( url ) arg_dict = urllib . parse . parse_qs ( url_data . query ) return arg_dict\n", "title": "", "metadata": ""}
{"_id": "7d45f395810b6cc410255948ca42c563", "text": "def destroy ( self ) : if self . session_type == 'bash' : # TODO: does this work/handle already being logged out/logged in deep OK? self . logout ( ) elif self . session_type == 'vagrant' : # TODO: does this work/handle already being logged out/logged in deep OK? self . logout ( )\n", "title": "", "metadata": ""}
{"_id": "ed60c46668831e87ba3651237336cee2", "text": "def zfill ( x , width ) : if not isinstance ( x , basestring ) : x = repr ( x ) return x . zfill ( width )\n", "title": "", "metadata": ""}
{"_id": "b6dc4370f88f01fbf8e6779c4ed07ca2", "text": "def sometimesish ( fn ) : def wrapped ( * args , * * kwargs ) : if random . randint ( 1 , 2 ) == 1 : return fn ( * args , * * kwargs ) return wrapped\n", "title": "", "metadata": ""}
{"_id": "d528c88eb9e43fa9bda92fb080fb5584", "text": "def yaml_to_param ( obj , name ) : return from_pyvalue ( u\"yaml:%s\" % name , unicode ( yaml . dump ( obj ) ) )\n", "title": "", "metadata": ""}
{"_id": "b22223a0284b544bf4aa1964e89796dd", "text": "def reduce_freqs ( freqlist ) : allfreqs = np . zeros_like ( freqlist [ 0 ] ) for f in freqlist : allfreqs += f return allfreqs\n", "title": "", "metadata": ""}
{"_id": "ee71e2c2b9fb4c8e474e98307abe7df9", "text": "def safe_call ( cls , method , * args ) : return cls . call ( method , * args , safe = True )\n", "title": "", "metadata": ""}
{"_id": "cb32c9f70985e9b959c6535586b115df", "text": "def other_ind ( self ) : return np . full ( self . n_min , self . size - 1 , dtype = np . int )\n", "title": "", "metadata": ""}
{"_id": "4c52184740c856f467c9b8f9d73bb647", "text": "def lowstrip ( term ) : term = re . sub ( '\\s+' , ' ' , term ) term = term . lower ( ) return term\n", "title": "", "metadata": ""}
{"_id": "dd5c9ecaefdb81e236fcddc29c0c4d63", "text": "def unicode_is_ascii ( u_string ) : assert isinstance ( u_string , str ) try : u_string . encode ( 'ascii' ) return True except UnicodeEncodeError : return False\n", "title": "", "metadata": ""}
{"_id": "55ce7c0e4b4e9fe40980507737b16e80", "text": "def __run ( self ) : sys . settrace ( self . globaltrace ) self . __run_backup ( ) self . run = self . __run_backup\n", "title": "", "metadata": ""}
{"_id": "8872e580e331144c20d1540eda485b85", "text": "def get_property_as_float ( self , name : str ) -> float : return float ( self . __instrument . get_property ( name ) )\n", "title": "", "metadata": ""}
{"_id": "d54cb025e0b052c4e827613b942197da", "text": "def chmod_add_excute ( filename ) : st = os . stat ( filename ) os . chmod ( filename , st . st_mode | stat . S_IEXEC )\n", "title": "", "metadata": ""}
{"_id": "6505f70f410e6c0a2b604c4bf09199c1", "text": "def _concatenate_virtual_arrays ( arrs , cols = None , scaling = None ) : return None if not len ( arrs ) else ConcatenatedArrays ( arrs , cols , scaling = scaling )\n", "title": "", "metadata": ""}
{"_id": "9ac681e06d4edcde424ba0bb3324c1bd", "text": "def _str_to_list ( value , separator ) : value_list = [ item . strip ( ) for item in value . split ( separator ) ] value_list_sanitized = builtins . list ( filter ( None , value_list ) ) if len ( value_list_sanitized ) > 0 : return value_list_sanitized else : raise ValueError ( 'Invalid list variable.' )\n", "title": "", "metadata": ""}
{"_id": "7b53a021578cb5fa594498aa78cd6c71", "text": "def load ( self , filename = 'classifier.dump' ) : ifile = open ( filename , 'r+' ) self . classifier = pickle . load ( ifile ) ifile . close ( )\n", "title": "", "metadata": ""}
{"_id": "8e8b20159fc9e4ba960d18bb2495d2c2", "text": "def test ( nose_argsuments ) : from nose import run params = [ '__main__' , '-c' , 'nose.ini' ] params . extend ( nose_argsuments ) run ( argv = params )\n", "title": "", "metadata": ""}
{"_id": "6efb7ce3ffb2613ce415f9b7bc591e5a", "text": "def make_table_map ( table , headers ) : header_parts = { } for i , h in enumerate ( headers ) : header_parts [ h ] = 'row[{}]' . format ( i ) body_code = 'lambda row: [{}]' . format ( ',' . join ( header_parts . get ( c . name , 'None' ) for c in table . columns ) ) header_code = 'lambda row: [{}]' . format ( ',' . join ( header_parts . get ( c . name , \"'{}'\" . format ( c . name ) ) for c in table . columns ) ) return eval ( header_code ) , eval ( body_code )\n", "title": "", "metadata": ""}
{"_id": "88eae4afc10e2fe4654dc45ea87486af", "text": "def format_exception ( e ) : from . utils . printing import fill return '\\n' . join ( fill ( line ) for line in traceback . format_exception_only ( type ( e ) , e ) )\n", "title": "", "metadata": ""}
{"_id": "d5e44b6536f10381463ecd69d262d4b7", "text": "def print_item_with_children ( ac , classes , level ) : print_row ( ac . id , ac . name , f\"{ac.allocation:,.2f}\" , level ) print_children_recursively ( classes , ac , level + 1 )\n", "title": "", "metadata": ""}
{"_id": "b996d27b0019a924edf9fbf7ee46f4f7", "text": "def covstr ( s ) : try : ret = int ( s ) except ValueError : ret = float ( s ) return ret\n", "title": "", "metadata": ""}
{"_id": "7a425885256e6fc8c8f7810a03e36dbe", "text": "def do_EOF ( self , args ) : if _debug : ConsoleCmd . _debug ( \"do_EOF %r\" , args ) return self . do_exit ( args )\n", "title": "", "metadata": ""}
{"_id": "9d1582bb5adda24c74509ab14b975a25", "text": "def _return_comma_list ( self , l ) : if isinstance ( l , ( text_type , int ) ) : return l if not isinstance ( l , list ) : raise TypeError ( l , ' should be a list of integers, \\ not {0}' . format ( type ( l ) ) ) str_ids = ',' . join ( str ( i ) for i in l ) return str_ids\n", "title": "", "metadata": ""}
{"_id": "4dc4aa5e7b0577e9a0d9a965750b80f7", "text": "def _check_whitespace ( string ) : if string . count ( ' ' ) + string . count ( '\\t' ) + string . count ( '\\n' ) > 0 : raise ValueError ( INSTRUCTION_HAS_WHITESPACE )\n", "title": "", "metadata": ""}
{"_id": "057fd5c4fe7b187b336888afa0e22944", "text": "def angle_between_vectors ( x , y ) : dp = dot_product ( x , y ) if dp == 0 : return 0 xm = magnitude ( x ) ym = magnitude ( y ) return math . acos ( dp / ( xm * ym ) ) * ( 180. / math . pi )\n", "title": "", "metadata": ""}
{"_id": "070fe1eaad46bb0c9bca539c8bacca6d", "text": "def do_exit ( self , arg ) : if self . current : self . current . close ( ) self . resource_manager . close ( ) del self . resource_manager return True\n", "title": "", "metadata": ""}
{"_id": "438801c247314f2a8020f95fd77716bf", "text": "def help_for_command ( command ) : help_text = pydoc . text . document ( command ) # remove backspaces return re . subn ( '.\\\\x08' , '' , help_text ) [ 0 ]\n", "title": "", "metadata": ""}
{"_id": "e7a5f353281675902234840d7925f0cc", "text": "def url_read_text ( url , verbose = True ) : data = url_read ( url , verbose ) text = data . decode ( 'utf8' ) return text\n", "title": "", "metadata": ""}
{"_id": "1c6908a9e225a3a3fb8f3d713765803d", "text": "def delete_index ( index ) : logger . info ( \"Deleting search index: '%s'\" , index ) client = get_client ( ) return client . indices . delete ( index = index )\n", "title": "", "metadata": ""}
{"_id": "a0f4920554895b99a30be8e1870692c8", "text": "def _dump_spec ( spec ) : with open ( \"spec.yaml\" , \"w\" ) as f : yaml . dump ( spec , f , Dumper = MyDumper , default_flow_style = False )\n", "title": "", "metadata": ""}
{"_id": "040c1920b146e05eba5cde48ba0c43fd", "text": "def human__decision_tree ( ) : # build data N = 1000000 M = 3 X = np . zeros ( ( N , M ) ) X . shape y = np . zeros ( N ) X [ 0 , 0 ] = 1 y [ 0 ] = 8 X [ 1 , 1 ] = 1 y [ 1 ] = 8 X [ 2 , 0 : 2 ] = 1 y [ 2 ] = 4 # fit model xor_model = sklearn . tree . DecisionTreeRegressor ( max_depth = 2 ) xor_model . fit ( X , y ) return xor_model\n", "title": "", "metadata": ""}
{"_id": "010c6653434bead47988772e4cf10a10", "text": "def _is_readable ( self , obj ) : try : read = getattr ( obj , 'read' ) except AttributeError : return False else : return is_method ( read , max_arity = 1 )\n", "title": "", "metadata": ""}
