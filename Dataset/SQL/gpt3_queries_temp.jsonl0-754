{"_id": "gpt3_1", "text": "\nThis query returns the three candidates with the highest support rate in descending order.", "metadata": {}}
{"_id": "gpt3_2", "text": "\nThis query retrieves the three candidates with the highest support rate from the candidate table, ordered from highest to lowest.", "metadata": {}}
{"_id": "gpt3_3", "text": "\nThis query returns the three highest support rates from the candidate table, in descending order.", "metadata": {}}
{"_id": "gpt3_4", "text": "\nThis query will select the top three support rates from the candidate table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_5", "text": "\nThis query returns the top three candidates with the highest support rate, ordered from highest to lowest.", "metadata": {}}
{"_id": "gpt3_6", "text": "\nThis query will count the number of routes between airports in Canada and airports in the United States.", "metadata": {}}
{"_id": "gpt3_7", "text": "\nThis query returns the number of routes between airports in Canada and the United States.", "metadata": {}}
{"_id": "gpt3_8", "text": "\nThis query will return the number of routes between airports in Canada and the United States.", "metadata": {}}
{"_id": "gpt3_9", "text": "\nThis query returns the count of all routes between airports in the United States and Canada.", "metadata": {}}
{"_id": "gpt3_10", "text": "\nThis query returns the count of all routes between airports in Canada and airports in the United States.", "metadata": {}}
{"_id": "gpt3_11", "text": "\nThis query selects the balance from the checking and savings accounts, as well as the name from the accounts table, for each customer.", "metadata": {}}
{"_id": "gpt3_12", "text": "\nThis query selects the balance from the checking and savings accounts, as well as the name associated with the customer, for all customers in the accounts, checking, and savings tables.", "metadata": {}}
{"_id": "gpt3_13", "text": "\nThis query selects the balance from the checking and savings accounts, as well as the name of the customer associated with each account, from the accounts, checking and savings tables.", "metadata": {}}
{"_id": "gpt3_14", "text": "\nThis statement selects the balance from the checking and savings accounts, as well as the customer name from the accounts table, for customers who have both a checking and a savings account.", "metadata": {}}
{"_id": "gpt3_15", "text": "\nThis query selects the balance from two different accounts and the name of the customer from the accounts table, with the customer ID matching the customer ID in both the checking and savings tables.", "metadata": {}}
{"_id": "gpt3_16", "text": "\nThis query selects the staff ID of all staff members assigned to a department before the most recently assigned clerical staff member.", "metadata": {}}
{"_id": "gpt3_17", "text": "\nThis query selects the staff IDs from the Staff_Department_Assignments table whose date_assigned_to is less than the maximum date_assigned_to of all staff with the job title code 'Clerical Staff'.", "metadata": {}}
{"_id": "gpt3_18", "text": "\nThis query will select the staff_id from the Staff_Department_Assignments table for all records with a date_assigned_to that is less than the maximum date_assigned_to of all records with a job_title", "metadata": {}}
{"_id": "gpt3_19", "text": "\nThis query selects the staff_id numbers from the Staff_Department_Assignments table for all records where the date_assigned_to is less than the most recent date_assigned_to for the job title code of 'C", "metadata": {}}
{"_id": "gpt3_20", "text": "\nThis query selects all the staff IDs from the Staff Department Assignments table that have a date assigned to them that is earlier than the most recent date assigned to someone with a job title code of 'Clerical Staff'.", "metadata": {}}
{"_id": "gpt3_21", "text": "\nThis query selects the first name of actors from a table, groups them by their first name, orders them by the count of each name in descending order, and limits the result to the most common first name.", "metadata": {}}
{"_id": "gpt3_22", "text": "\nThis query selects the first name of an actor from the actor table, groups the results by first name, and orders them by the count of each name in descending order. The query then limits the result to the first name with the highest count.", "metadata": {}}
{"_id": "gpt3_23", "text": "\nThis query returns the first name of the actor with the most roles in the actor table, ordered by the count of roles in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_24", "text": "\nThis query returns the most common first name from the actor table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_25", "text": "\nThis query selects the first name of an actor from the actor table and groups the results by first name, then orders them by the count of each first name in descending order and then limits the results to the first one. This query will return the", "metadata": {}}
{"_id": "gpt3_26", "text": "\nThis statement will select the last name and age of all students who have both Milk and Cat allergies.", "metadata": {}}
{"_id": "gpt3_27", "text": "\nThis query will select the last name and age of students who have both milk and cat allergies.", "metadata": {}}
{"_id": "gpt3_28", "text": "\nThis query selects the last name and age of students who have both milk and cat allergies.", "metadata": {}}
{"_id": "gpt3_29", "text": "\nThis statement will select the last name and age of students who have both milk and cat allergies.", "metadata": {}}
{"_id": "gpt3_30", "text": "\nThis query selects the last name and age of students who have both a milk and a cat allergy.", "metadata": {}}
{"_id": "gpt3_31", "text": "\nThis query will select the Fleet_Series from the aircraft table for all pilots under the age of 34.", "metadata": {}}
{"_id": "gpt3_32", "text": "\nThis query will select the Fleet_Series from the aircraft table for all pilots who are under the age of 34.", "metadata": {}}
{"_id": "gpt3_33", "text": "\nThis query will select the Fleet_Series from the aircraft table, based on the pilot's age being less than 34.", "metadata": {}}
{"_id": "gpt3_34", "text": "\nThis query will select the Fleet_Series from the aircraft table for all aircrafts flown by pilots with an age of less than 34.", "metadata": {}}
{"_id": "gpt3_35", "text": "\nThis query returns the fleet series of all aircraft flown by pilots who are under the age of 34.", "metadata": {}}
{"_id": "gpt3_36", "text": "\nThis query will return the sum of all invoices from customers located in Chicago, IL.", "metadata": {}}
{"_id": "gpt3_37", "text": "\nThis SQL query will return the sum of all the totals of invoices from customers located in Chicago, IL.", "metadata": {}}
{"_id": "gpt3_38", "text": "\nThis query will return the sum of all the invoices in the invoices table where the billing city is \"Chicago\" and the billing state is \"IL\".", "metadata": {}}
{"_id": "gpt3_39", "text": "\nThis query will return the sum of the total column from the invoices table where the billing city is \"Chicago\" and the billing state is \"IL\".", "metadata": {}}
{"_id": "gpt3_40", "text": "\nThis query returns the sum of all invoices from customers in Chicago, IL.", "metadata": {}}
{"_id": "gpt3_41", "text": "\nThis query selects the name of the host from the party_host, host and party tables where the number of hosts in the party table is greater than 20.", "metadata": {}}
{"_id": "gpt3_42", "text": "\nThis query selects the names of all hosts who have hosted a party with more than 20 hosts.", "metadata": {}}
{"_id": "gpt3_43", "text": "\nThis query selects the name of the host from the party_host, host, and party tables where the number of hosts for the party is greater than 20.", "metadata": {}}
{"_id": "gpt3_44", "text": "\nThis query selects the names of all hosts who have hosted a party with more than 20 hosts.", "metadata": {}}
{"_id": "gpt3_45", "text": "\nThis query selects the names of all hosts from the party_host, host, and party tables where the number of hosts for the party is greater than 20.", "metadata": {}}
{"_id": "gpt3_46", "text": "\nThis query returns the name, latitude, and city of the station with the lowest latitude from the station table.", "metadata": {}}
{"_id": "gpt3_47", "text": "\nThis query selects the name, latitude, and city of the station with the lowest latitude, limiting the results to one.", "metadata": {}}
{"_id": "gpt3_48", "text": "\nThis query will return the name, latitude and city of the station with the lowest latitude.", "metadata": {}}
{"_id": "gpt3_49", "text": "\nThis query will select the name, latitude, and city of the station with the lowest latitude from the station table, and limit the result to one row.", "metadata": {}}
{"_id": "gpt3_50", "text": "\nThis query will select the name, latitude, and city of the station with the lowest latitude from the station table and return the top 1 result.", "metadata": {}}
{"_id": "gpt3_51", "text": "\nThis query will return the maximum year from the perpetrator table.", "metadata": {}}
{"_id": "gpt3_52", "text": "\nThis query will return the maximum year from the perpetrator table.", "metadata": {}}
{"_id": "gpt3_53", "text": "\nThis query will return the maximum year from the perpetrator table.", "metadata": {}}
{"_id": "gpt3_54", "text": "\nThis query will return the maximum year from the perpetrator table.", "metadata": {}}
{"_id": "gpt3_55", "text": "\nThis query returns the maximum year value from the perpetrator table.", "metadata": {}}
{"_id": "gpt3_56", "text": "\nThis SQL query will count the number of invoices from the USA based on the billing state.", "metadata": {}}
{"_id": "gpt3_57", "text": "\nThis query returns a count of the number of invoices from each state in the USA.", "metadata": {}}
{"_id": "gpt3_58", "text": "\nThis query will return the number of invoices for each billing state in the USA.", "metadata": {}}
{"_id": "gpt3_59", "text": "\nThis query will count the number of invoices in each state in the USA.", "metadata": {}}
{"_id": "gpt3_60", "text": "\nThis SQL query returns the number of invoices associated with each state in the USA.", "metadata": {}}
{"_id": "gpt3_61", "text": "\nThis query will select the name and opening hours of tourist attractions that can be reached by either bus or on foot.", "metadata": {}}
{"_id": "gpt3_62", "text": "\nThis query will select the name and opening hours of all tourist attractions that can be reached by either bus or walking.", "metadata": {}}
{"_id": "gpt3_63", "text": "\nThis query will select the Name and Opening Hours from the TOURIST_ATTRACTIONS table where How_to_Get_There is either \"bus\" or \"walk\".", "metadata": {}}
{"_id": "gpt3_64", "text": "\nThis query will select the name and opening hours of all tourist attractions that can be reached by either bus or walking.", "metadata": {}}
{"_id": "gpt3_65", "text": "\nThis query will select the Name and Opening Hours from the TOURIST_ATTRACTIONS table for attractions that can be reached by either bus or walking.", "metadata": {}}
{"_id": "gpt3_66", "text": "\nThis query would return the total number of students in the student table.", "metadata": {}}
{"_id": "gpt3_67", "text": "\nThis query returns the total number of records in the student table.", "metadata": {}}
{"_id": "gpt3_68", "text": "\nThis query counts the total number of students in the student table.", "metadata": {}}
{"_id": "gpt3_69", "text": "\nThis query returns the total number of students in a table called 'student'.", "metadata": {}}
{"_id": "gpt3_70", "text": "\nThis query will return the total number of records in the student table.", "metadata": {}}
{"_id": "gpt3_71", "text": "\nThis query returns the names of all tracks in the 'Movies' playlist that are not in the 'Music' playlist.", "metadata": {}}
{"_id": "gpt3_72", "text": "\nThis query returns the names of the tracks which are in the 'Movies' playlist but not in the 'Music' playlist.", "metadata": {}}
{"_id": "gpt3_73", "text": "\nThis query returns the names of all tracks in the 'Movies' playlist that are not in the 'Music' playlist.", "metadata": {}}
{"_id": "gpt3_74", "text": "\nThis SQL statement returns the names of tracks that are in the 'Movies' playlist but not in the 'Music' playlist.", "metadata": {}}
{"_id": "gpt3_75", "text": "\nThis query returns the names of tracks that are in the 'Movies' playlist but not in the 'Music' playlist.", "metadata": {}}
{"_id": "gpt3_76", "text": "\nThis query returns the movie IDs from the Rating table that are not associated with the reviewer Brittany Harris.", "metadata": {}}
{"_id": "gpt3_77", "text": "\nThis query returns all movie IDs from the Rating table that do not have a review from Brittany Harris.", "metadata": {}}
{"_id": "gpt3_78", "text": "\nThis query returns the movie IDs from the Rating table that do not have a corresponding rating from the reviewer named Brittany Harris.", "metadata": {}}
{"_id": "gpt3_79", "text": "\nThis query will return the movie IDs from the Rating table that are not associated with the reviewer Brittany Harris.", "metadata": {}}
{"_id": "gpt3_80", "text": "\nThis query returns all movie IDs from the Rating table that do not have a review by Brittany Harris.", "metadata": {}}
{"_id": "gpt3_81", "text": "\nThis query will select the title of all albums from the artists table whose name contains the substring \"Led\".", "metadata": {}}
{"_id": "gpt3_82", "text": "\nThis query will select the title of all albums where the artist's name contains \"Led\".", "metadata": {}}
{"_id": "gpt3_83", "text": "\nThis query will select the titles of all albums from artists whose name contains the string \"Led\".", "metadata": {}}
{"_id": "gpt3_84", "text": "\nThis query selects the title of all albums by artists whose name contain the string \"Led\".", "metadata": {}}
{"_id": "gpt3_85", "text": "\nThis query selects the titles of all albums by artists whose names contain the word \"Led\".", "metadata": {}}
{"_id": "gpt3_86", "text": "\nThis query selects the firstname and lastname of all bandmates who performed the song \"Le Pop\".", "metadata": {}}
{"_id": "gpt3_87", "text": "\nThis query selects the first and last name of all bandmates who performed the song \"Le Pop\" from the Performance, Band, and Songs tables.", "metadata": {}}
{"_id": "gpt3_88", "text": "\nThis query selects the first and last name of all bandmates who performed the song \"Le Pop\".", "metadata": {}}
{"_id": "gpt3_89", "text": "\nThis query will return the first and last name of the bandmates who performed in the song \"Le Pop\".", "metadata": {}}
{"_id": "gpt3_90", "text": "\nThis query will select the firstname and lastname of all bandmates who performed the song \"Le Pop\".", "metadata": {}}
{"_id": "gpt3_91", "text": "\nThis query returns all enzymes with the substring \"ALA\" in their name from the enzyme table.", "metadata": {}}
{"_id": "gpt3_92", "text": "\nThis query will select the names of all enzymes from the enzyme table that have \"ALA\" in the name.", "metadata": {}}
{"_id": "gpt3_93", "text": "\nThis SQL statement will select the name of any enzyme from the enzyme table that contains the substring \"ALA\".", "metadata": {}}
{"_id": "gpt3_94", "text": "\nThis query selects the names of enzymes from a database that contain the text \"ALA\" in their names.", "metadata": {}}
{"_id": "gpt3_95", "text": "\nThis query will return all enzyme names from the enzyme table that contain the string \"ALA\".", "metadata": {}}
{"_id": "gpt3_96", "text": "\nThis statement will return a list of all the distinct directors from the film table.", "metadata": {}}
{"_id": "gpt3_97", "text": "\nThe SQL statement \"SELECT DISTINCT Director FROM film\" will select all the unique directors from the film table.", "metadata": {}}
{"_id": "gpt3_98", "text": "\nThis statement will select all unique directors from the film table.", "metadata": {}}
{"_id": "gpt3_99", "text": "\nThis SQL query will select all the distinct directors from the film table.", "metadata": {}}
{"_id": "gpt3_100", "text": "\nThe SELECT DISTINCT statement is used to return only distinct (different) values from a SQL query. In this case, the query would return a list of all distinct directors from the film table.", "metadata": {}}
{"_id": "gpt3_101", "text": "\nThis query returns the characteristic name of the product with the highest count from the products, product_characteristics, and characteristics tables.", "metadata": {}}
{"_id": "gpt3_102", "text": "\nThis query selects the characteristic name that appears most often in the products and product_characteristics tables, and orders the results by frequency.", "metadata": {}}
{"_id": "gpt3_103", "text": "\nThis query selects the characteristic name with the highest count from the products, product_characteristics, and characteristics tables.", "metadata": {}}
{"_id": "gpt3_104", "text": "\nThis query retrieves the name of the most common characteristic associated with products from the products, product_characteristics and characteristics tables. It groups the results by the characteristic name and orders them by the count of each characteristic, then returns the most common", "metadata": {}}
{"_id": "gpt3_105", "text": "\nThis query selects the most common characteristic name from a set of products, product characteristics, and characteristics, and orders the results by count in descending order. The query returns the top characteristic name.", "metadata": {}}
{"_id": "gpt3_106", "text": "\nThis query will return the titles of all courses that are prerequisites for the course \"Mobile Computing\".", "metadata": {}}
{"_id": "gpt3_107", "text": "\nThis query will return the titles of all courses that are prerequisites for the course 'Mobile Computing'.", "metadata": {}}
{"_id": "gpt3_108", "text": "\nThis query will return the titles of all courses that are prerequisites for the course titled \"Mobile Computing\".", "metadata": {}}
{"_id": "gpt3_109", "text": "\nThis query will return the titles of all courses that are prerequisites for a course titled 'Mobile Computing'.", "metadata": {}}
{"_id": "gpt3_110", "text": "\nThis query returns the titles of all courses that are prerequisites for the course titled \"Mobile Computing\".", "metadata": {}}
{"_id": "gpt3_111", "text": "\nThis query will select all the names from the ARTIST table that contain the letter 'a'.", "metadata": {}}
{"_id": "gpt3_112", "text": "\nThis SQL query will select all names from the ARTIST table that contain the letter 'a'.", "metadata": {}}
{"_id": "gpt3_113", "text": "\nThis query will return all names from the ARTIST table that contain the letter 'a'.", "metadata": {}}
{"_id": "gpt3_114", "text": "\nThis SQL statement will select the names of all artists from the ARTIST table where the name contains an \"a\".", "metadata": {}}
{"_id": "gpt3_115", "text": "\nThis query will select all artist names from the ARTIST table that contain the letter \"a\" anywhere in the name.", "metadata": {}}
{"_id": "gpt3_116", "text": "\nThis query will count the number of products with the name \"flax\" that have characteristics associated with them in the product_characteristics and characteristics tables.", "metadata": {}}
{"_id": "gpt3_117", "text": "\nThis query will count the number of products called \"flax\" that have associated characteristics in the product_characteristics and characteristics tables.", "metadata": {}}
{"_id": "gpt3_118", "text": "\nThis query counts the number of products with the name \"flax\" that are associated with characteristics in the product_characteristics and characteristics tables.", "metadata": {}}
{"_id": "gpt3_119", "text": "\nThis query will count the number of products with the name \"flax\" that have characteristics associated with them in the product_characteristics and characteristics tables.", "metadata": {}}
{"_id": "gpt3_120", "text": "\nThis query will count the number of products with the name \"flax\" that have characteristics associated with them in the product_characteristics and characteristics tables.", "metadata": {}}
{"_id": "gpt3_121", "text": "\nThis query returns the college with the most submissions from the submission table, ordered by the count of submissions in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_122", "text": "\nThis query will return the college with the most submissions, ordered by the number of submissions in descending order.", "metadata": {}}
{"_id": "gpt3_123", "text": "\nThis query will select the college with the most submissions and display it first.", "metadata": {}}
{"_id": "gpt3_124", "text": "\nThis query will return the college with the most submissions, ordered by the number of submissions in descending order, with a limit of one result.", "metadata": {}}
{"_id": "gpt3_125", "text": "\nThis query will return the college with the most submissions, ordered by the number of submissions in descending order, limited to the top result.", "metadata": {}}
{"_id": "gpt3_126", "text": "\nThis query will select the name, origin, and owner of programs from a database.", "metadata": {}}
{"_id": "gpt3_127", "text": "\nThis statement is a SELECT query that retrieves the name, origin, and owner of a program from a database.", "metadata": {}}
{"_id": "gpt3_128", "text": "\nThis query returns the name, origin, and owner of a program from a database.", "metadata": {}}
{"_id": "gpt3_129", "text": "\nThis query will select the name, origin, and owner of a program from a database.", "metadata": {}}
{"_id": "gpt3_130", "text": "\nThis query will select the name, origin, and owner of a program from a database.", "metadata": {}}
{"_id": "gpt3_131", "text": "\nThis query selects the distinct first and last names of staff members who have rented to a customer named April Burns.", "metadata": {}}
{"_id": "gpt3_132", "text": "\nThis query retrieves the distinct first and last names of staff members who have rented to customers named April Burns.", "metadata": {}}
{"_id": "gpt3_133", "text": "\nThis query selects the first and last names of all distinct staff members who have rented to April Burns.", "metadata": {}}
{"_id": "gpt3_134", "text": "\nThis statement retrieves the first and last names of all distinct staff members who have rented to a customer named April Burns.", "metadata": {}}
{"_id": "gpt3_135", "text": "\nThis query selects the distinct first and last names of staff members who have rented a movie to a customer named April Burns.", "metadata": {}}
{"_id": "gpt3_136", "text": "\nThis query will select the problem_log_id and log_entry_date from the problem_log table where the problem_id is equal to 10.", "metadata": {}}
{"_id": "gpt3_137", "text": "\nThis query will select the problem log ID and log entry date from the problem log table for problem ID 10.", "metadata": {}}
{"_id": "gpt3_138", "text": "\nThis query will return the problem log ID and the log entry date associated with problem ID 10 in the problem_log table.", "metadata": {}}
{"_id": "gpt3_139", "text": "\nThis query will retrieve the problem log ID and log entry date for all entries in the problem log table with a problem ID of 10.", "metadata": {}}
{"_id": "gpt3_140", "text": "\nThis query will return the problem_log_id and log_entry_date of all entries in the problem_log table for the problem with an ID of 10.", "metadata": {}}
{"_id": "gpt3_141", "text": "\nThe maximum number of weeks a song has been on the top is 34 and the minimum number of weeks a song has been on the top is 1.", "metadata": {}}
{"_id": "gpt3_142", "text": "\nThe maximum number of weeks a song has been on the top is 33, and the minimum number of weeks a song has been on the top is 1.", "metadata": {}}
{"_id": "gpt3_143", "text": "\nThe query returns the maximum and minimum number of weeks a song has been on the top of the music charts.", "metadata": {}}
{"_id": "gpt3_144", "text": "\nThe maximum number of weeks a song has been on the top of the charts is 33 and the minimum number of weeks a song has been on the top of the charts is 1.", "metadata": {}}
{"_id": "gpt3_145", "text": "\nThe maximum number of weeks a song has been on the top of the music chart is 32 and the minimum number of weeks a song has been on the top of the music chart is 1.", "metadata": {}}
{"_id": "gpt3_146", "text": "\nThis query will return the names of all buildings that do not have an office location.", "metadata": {}}
{"_id": "gpt3_147", "text": "\nThis query will select the name of all buildings that do not have an office location associated with them.", "metadata": {}}
{"_id": "gpt3_148", "text": "\nThis query will select the names of all buildings that do not have an office location.", "metadata": {}}
{"_id": "gpt3_149", "text": "\nThis query will select the names of all buildings that do not have an office location.", "metadata": {}}
{"_id": "gpt3_150", "text": "\nThis query will return the names of all buildings that do not have an office location.", "metadata": {}}
{"_id": "gpt3_151", "text": "\nThis query will return the minimum, maximum, and average product prices from the products table.", "metadata": {}}
{"_id": "gpt3_152", "text": "\nThis query will select the minimum, maximum, and average prices of all products from the products table.", "metadata": {}}
{"_id": "gpt3_153", "text": "\nThis query will return the minimum, maximum, and average product prices from the products table.", "metadata": {}}
{"_id": "gpt3_154", "text": "\nThis query will return the minimum, maximum, and average product prices from the products table.", "metadata": {}}
{"_id": "gpt3_155", "text": "\nThis query selects the minimum, maximum, and average product prices from the products table.", "metadata": {}}
{"_id": "gpt3_156", "text": "\nThis query will return a list of authors from submissions where the college is either Florida or Temple.", "metadata": {}}
{"_id": "gpt3_157", "text": "\nThis query will return the authors from the submission table who either attended Florida or Temple college.", "metadata": {}}
{"_id": "gpt3_158", "text": "\nThis query will return a list of authors from submissions that were made by students from either Florida or Temple college.", "metadata": {}}
{"_id": "gpt3_159", "text": "\nThis query will return all authors from submissions where the college is either Florida or Temple.", "metadata": {}}
{"_id": "gpt3_160", "text": "\nThis query will return a list of all authors from submissions from either Florida or Temple.", "metadata": {}}
{"_id": "gpt3_161", "text": "\nThis query selects the personal name, family name, and author ID of the Course Authors and Tutors who have authored the most courses in the Courses table. It does this by joining the two tables together, grouping by the author ID, ordering", "metadata": {}}
{"_id": "gpt3_162", "text": "\nThis query selects the personal name, family name and author ID of the author with the most courses from the Course_Authors_and_Tutors and Courses tables. It groups the results by author ID and orders them by the count", "metadata": {}}
{"_id": "gpt3_163", "text": "\nThis query selects the personal name, family name, and author ID of the author with the most courses from the Course_Authors_and_Tutors and Courses tables, grouped by author ID and ordered by the count of courses in", "metadata": {}}
{"_id": "gpt3_164", "text": "\nThis query will select the personal name, family name, and author ID of the author with the most courses from the Course_Authors_and_Tutors and Courses tables. It will group the results by author ID and order them", "metadata": {}}
{"_id": "gpt3_165", "text": "\nThis query selects the personal name, family name, and author ID of the author with the most courses from the Course_Authors_and_Tutors and Courses tables. The query groups the results by the author ID and orders them", "metadata": {}}
{"_id": "gpt3_166", "text": "\nThis query will count the number of colleges with an enrollment greater than 15000.", "metadata": {}}
{"_id": "gpt3_167", "text": "\nThis query returns the number of colleges that have an enrollment greater than 15000.", "metadata": {}}
{"_id": "gpt3_168", "text": "\nThis query counts the number of colleges that have an enrollment greater than 15,000.", "metadata": {}}
{"_id": "gpt3_169", "text": "\nThis query will count the number of colleges with an enrollment greater than 15000.", "metadata": {}}
{"_id": "gpt3_170", "text": "\nThis query will return the number of colleges that have an enrollment of more than 15000.", "metadata": {}}
{"_id": "gpt3_171", "text": "\nThis query will return the total attendance for all home games of the Boston Red Stockings between the years 2000 and 2010.", "metadata": {}}
{"_id": "gpt3_172", "text": "\nThis query will find the total attendance at home games for the Boston Red Stockings between the years 2000 and 2010.", "metadata": {}}
{"_id": "gpt3_173", "text": "\nThis query will return the total attendance for all home games of the Boston Red Stockings between the years 2000 and 2010.", "metadata": {}}
{"_id": "gpt3_174", "text": "\nThis query returns the sum of attendance for all home games of the Boston Red Stockings between the years 2000 and 2010.", "metadata": {}}
{"_id": "gpt3_175", "text": "\nThis query will return the total attendance for all home games of the Boston Red Stockings between the years 2000 and 2010.", "metadata": {}}
{"_id": "gpt3_176", "text": "\nThis query will select the song ID, genre, and artist name from the song table where the language of the song is English, and order the results by rating.", "metadata": {}}
{"_id": "gpt3_177", "text": "\nThis SQL query returns the f_id, genre, and artist name of all songs in English language, ordered by rating.", "metadata": {}}
{"_id": "gpt3_178", "text": "\nThis query will select the f_id, genre_is, and artist_name from the song table where the language is English and order the results by rating.", "metadata": {}}
{"_id": "gpt3_179", "text": "\nThis query retrieves the f_id, genre, and artist name of all English songs in the song table, sorted by rating.", "metadata": {}}
{"_id": "gpt3_180", "text": "\nThis query will select the f_id, genre_is, and artist_name from the song table where the language is English, and order the results by rating.", "metadata": {}}
{"_id": "gpt3_181", "text": "\nThis query will select the id of the trip that started at the station with the most docks, and it will order the results in descending order by the dock count. The result will be limited to one row.", "metadata": {}}
{"_id": "gpt3_182", "text": "\nThis query selects the id of the trip with the highest dock count from the station table, which is the station with the most docks.", "metadata": {}}
{"_id": "gpt3_183", "text": "\nThis query finds the id of the trip with the highest dock count of the start station. It does this by joining the trip and station tables, ordering the results by the dock count of the start station, and then selecting the first result.", "metadata": {}}
{"_id": "gpt3_184", "text": "\nThis query selects the ID of the trip with the start station having the highest dock count.", "metadata": {}}
{"_id": "gpt3_185", "text": "\nThis query selects the ID of the trip with the highest dock count from the station table and orders it in descending order.", "metadata": {}}
{"_id": "gpt3_186", "text": "\nThis query will return the number of distinct product_ids in the order_items table associated with the customer named \"Rodrick Heaney\".", "metadata": {}}
{"_id": "gpt3_187", "text": "\nThis query returns the number of distinct product IDs that have been ordered by customer Rodrick Heaney.", "metadata": {}}
{"_id": "gpt3_188", "text": "\nThis query returns the number of distinct products ordered by customer Rodrick Heaney.", "metadata": {}}
{"_id": "gpt3_189", "text": "\nThis query returns the number of distinct products ordered by the customer \"Rodrick Heaney\".", "metadata": {}}
{"_id": "gpt3_190", "text": "\nThis query returns the count of distinct product IDs from the customer_orders and order_items tables for the customer with the name \"Rodrick Heaney\".", "metadata": {}}
{"_id": "gpt3_191", "text": "\nThis query will select the enzyme with the most activator interactions from the enzyme and medicine_enzyme_interaction tables and return its id and name.", "metadata": {}}
{"_id": "gpt3_192", "text": "\nThis query selects the enzyme with the highest number of activator interactions, as determined by counting the number of interactions of type 'activator' in the medicine_enzyme_interaction table. The results are returned as an id and name for", "metadata": {}}
{"_id": "gpt3_193", "text": "\nThis query returns the enzyme ID and name of the enzyme with the most activitor interactions in the medicine_enzyme_interaction table, ordered by the number of interactions in descending order, and limited to the first result.", "metadata": {}}
{"_id": "gpt3_194", "text": "\nThis query selects the enzyme with the highest number of activator interactions from the enzyme and medicine_enzyme_interaction tables and returns its id and name.", "metadata": {}}
{"_id": "gpt3_195", "text": "\nThis query selects the enzyme with the most activator interactions from the enzyme and medicine_enzyme_interaction tables, and returns the id and name of that enzyme.", "metadata": {}}
{"_id": "gpt3_196", "text": "\nThis query selects the staff ID and gender of all staff members who are Department Managers from the staff and staff_department_assignments tables.", "metadata": {}}
{"_id": "gpt3_197", "text": "\nThis statement selects the staff ID and gender of all staff members assigned to the job title code \"Department Manager\".", "metadata": {}}
{"_id": "gpt3_198", "text": "\nThis query selects the staff ID and gender of all staff members who are Department Managers from the staff and staff_department_assignments tables.", "metadata": {}}
{"_id": "gpt3_199", "text": "\nThis query selects the staff ID and staff gender of all staff members who are department managers.", "metadata": {}}
{"_id": "gpt3_200", "text": "\nThis query will select the staff ID and gender of all staff members who are designated as Department Managers in the staff_department_assignments table.", "metadata": {}}
{"_id": "gpt3_201", "text": "\nThis query returns the top three colleges with the most matches in the match_season table, ordered by the number of matches in descending order.", "metadata": {}}
{"_id": "gpt3_202", "text": "\nThis query will return the top 3 colleges with the most matches in the match_season table, sorted by the number of matches in descending order.", "metadata": {}}
{"_id": "gpt3_203", "text": "\nThis query will return the top three colleges with the most matches in the match_season table, ordered by the number of matches in descending order.", "metadata": {}}
{"_id": "gpt3_204", "text": "\nThis query returns the top three colleges with the most matches in the match_season table, ordered by the number of matches.", "metadata": {}}
{"_id": "gpt3_205", "text": "\nThis query returns the top three colleges with the most matches in the match_season table, ordered by the highest count of matches.", "metadata": {}}
{"_id": "gpt3_206", "text": "\nThis query will return a count of the number of players with an overall rating greater than 80, grouped by their preferred foot.", "metadata": {}}
{"_id": "gpt3_207", "text": "\nThis query will return the number of players with an overall rating of 80 or higher, grouped by their preferred foot.", "metadata": {}}
{"_id": "gpt3_208", "text": "\nThis query will count the number of players with an overall rating greater than 80, grouped by their preferred foot. The result will be two columns, one for the preferred foot and the other for the count.", "metadata": {}}
{"_id": "gpt3_209", "text": "\nThis query counts the number of players with an overall rating greater than 80, grouped by their preferred foot. The result would be a table with two columns: one for preferred foot and one for the count of players with that preferred foot and an overall", "metadata": {}}
{"_id": "gpt3_210", "text": "\nThis query returns a count of the number of players with an overall rating greater than 80, grouped by their preferred foot.", "metadata": {}}
{"_id": "gpt3_211", "text": "\nThis query counts the number of students over the age of 20 living in each dorm and returns the count and dorm name.", "metadata": {}}
{"_id": "gpt3_212", "text": "\nThis query returns the count of students over the age of 20 in each dorm, grouped by dorm name.", "metadata": {}}
{"_id": "gpt3_213", "text": "\nThis query returns the count of students over the age of 20 in each dorm, along with the name of the dorm.", "metadata": {}}
{"_id": "gpt3_214", "text": "\nThis query will return the count of students with an age greater than 20 in each dorm.", "metadata": {}}
{"_id": "gpt3_215", "text": "\nThis query returns the count of students over the age of 20 living in each dorm, along with the name of the dorm.", "metadata": {}}
{"_id": "gpt3_216", "text": "\nThis query will select the name of any tourist attraction located at 660 Shea Crescent or that can be reached by walking.", "metadata": {}}
{"_id": "gpt3_217", "text": "\nThis query will select the names of all tourist attractions located at 660 Shea Crescent or that can be accessed by walking.", "metadata": {}}
{"_id": "gpt3_218", "text": "\nThis statement will select the Name from the Tourist_Attractions table for all attractions that are located at 660 Shea Crescent, or that can be reached by walking.", "metadata": {}}
{"_id": "gpt3_219", "text": "\nThis query will select the names of tourist attractions from the Locations and Tourist_Attractions tables where the address is \"660 Shea Crescent\" or the how to get there is \"walk\".", "metadata": {}}
{"_id": "gpt3_220", "text": "\nThis query will select the names of tourist attractions from the Tourist_Attractions table that are located at 660 Shea Crescent or that can be accessed by walking.", "metadata": {}}
{"_id": "gpt3_221", "text": "\nThis query returns the type of vocal that Solveig performs most frequently in her band, based on the bandmate id from the vocals and band tables. It groups the results by type and orders them by the count of each type, then limits", "metadata": {}}
{"_id": "gpt3_222", "text": "\nThis query retrieves the type of vocals used by the bandmate with the first name \"Solveig\" from the vocals and band tables, groups the results by type and orders them by count in descending order, and then limits the results to", "metadata": {}}
{"_id": "gpt3_223", "text": "\nThis query selects the type of vocal that Solveig sings in her band, ordered by the most common type, and limited to one result.", "metadata": {}}
{"_id": "gpt3_224", "text": "\nThis query will retrieve the type of vocals (e.g. lead, backing, etc.) that Solveig sings the most in her band, by joining the vocals and band tables on the bandmate ID, filtering for Solveig's", "metadata": {}}
{"_id": "gpt3_225", "text": "\nThis query returns the type of vocal that Solveig performs most frequently in the band, based on the bandmate id in the vocals table and the firstname in the band table. It groups the results by type and orders them by count in", "metadata": {}}
{"_id": "gpt3_226", "text": "\nThis query will select the name of the college from the college table with an enrollment higher than the college with the highest enrollment in Florida.", "metadata": {}}
{"_id": "gpt3_227", "text": "\nThis query will select the name of all colleges with an enrollment greater than the college with the highest enrollment in the state of Florida.", "metadata": {}}
{"_id": "gpt3_228", "text": "\nThis query will select the college name from the college table where the enrollment is greater than the maximum enrollment of colleges located in Florida.", "metadata": {}}
{"_id": "gpt3_229", "text": "\nThis query will select the name of the college with the highest enrollment from states other than Florida.", "metadata": {}}
{"_id": "gpt3_230", "text": "\nThis query will select the name of any college with an enrollment greater than the college with the highest enrollment in Florida.", "metadata": {}}
{"_id": "gpt3_231", "text": "\nThis statement will select the name of all members from the member table who are not registered to any membership register branch.", "metadata": {}}
{"_id": "gpt3_232", "text": "\nThis query selects the names of members who are not registered in any branch of the membership register.", "metadata": {}}
{"_id": "gpt3_233", "text": "\nThis query will select the name of all members who are not registered to any membership branch.", "metadata": {}}
{"_id": "gpt3_234", "text": "\nThis query will select the names of all members who are not registered at any branch.", "metadata": {}}
{"_id": "gpt3_235", "text": "\nThis statement will select the name of all members who are not registered in any membership register branch.", "metadata": {}}
{"_id": "gpt3_236", "text": "\nThis query selects the name and balance from two tables, 'accounts' and 'checking', and orders them by the balance of a third table, 'savings', and then limits the result to one row.", "metadata": {}}
{"_id": "gpt3_237", "text": "\nThis query selects the name and balance from the accounts, checking, and savings tables, joining them by customer ID. The results are then ordered by the balance in the savings table and limited to the first result.", "metadata": {}}
{"_id": "gpt3_238", "text": "\nThis query retrieves the name and balance of the customer who has the lowest balance in their savings account. It does this by joining the accounts, checking, and savings tables on the customer ID, ordering the results by the savings balance, and limiting", "metadata": {}}
{"_id": "gpt3_239", "text": "\nThis statement selects the name and balance from two tables, accounts and checking, and joins them on the customer ID. It then joins the savings table and orders the results by the balance from the savings table. Finally, it limits the results to one", "metadata": {}}
{"_id": "gpt3_240", "text": "\nThis query selects the name and balance from the accounts, checking, and savings tables for the customer with the lowest balance in the savings table, and orders the results by the savings table balance.", "metadata": {}}
{"_id": "gpt3_241", "text": "\nThis query will return the department name of any instructors whose name contains the string 'Soisalon'.", "metadata": {}}
{"_id": "gpt3_242", "text": "\nThis query returns the department name of any instructor whose name contains the text 'Soisalon'.", "metadata": {}}
{"_id": "gpt3_243", "text": "\nThis query returns the department name of any instructor whose name contains the substring 'Soisalon'.", "metadata": {}}
{"_id": "gpt3_244", "text": "\nThis query will return the department name of any instructor whose name contains the string 'Soisalon'.", "metadata": {}}
{"_id": "gpt3_245", "text": "\nThis query will return the department name of all instructors whose name contains the string 'Soisalon'.", "metadata": {}}
{"_id": "gpt3_246", "text": "\nThis query retrieves the team names from the basketball_match table and orders them by All_Home in descending order.", "metadata": {}}
{"_id": "gpt3_247", "text": "\nThis query returns a list of team names from a basketball match sorted in descending order by the number of home games each team has played.", "metadata": {}}
{"_id": "gpt3_248", "text": "\nThis query will return a list of team names from a basketball match, ordered from the team with the most home games to the team with the least home games.", "metadata": {}}
{"_id": "gpt3_249", "text": "\nThis query selects the team names from the basketball_match table and orders them by the total number of home games they have played in descending order.", "metadata": {}}
{"_id": "gpt3_250", "text": "\nThis query selects the team names from the basketball_match table and orders them in descending order based on the All_Home column.", "metadata": {}}
{"_id": "gpt3_251", "text": "\nThis query will return the number of invoices and the total sum of all invoices from customers in the state of California. The result will be two columns, one for the billing state (CA) and one for the count of inv", "metadata": {}}
{"_id": "gpt3_252", "text": "\nThis query will return the total number and sum of invoices from California, with the billing state being \"CA\". It will return two columns, one with the billing state and one with the count of invoices from California, and one", "metadata": {}}
{"_id": "gpt3_253", "text": "\nThis query returns the total number of invoices and the total amount of money billed to customers in California. It returns the billing state, the count of invoices, and the sum of the total from invoices where the billing state", "metadata": {}}
{"_id": "gpt3_254", "text": "\nThis query will return the total number of invoices and the sum of all the invoices' totals for all invoices in the state of California. It will return two columns; the first column will contain the billing state (CA", "metadata": {}}
{"_id": "gpt3_255", "text": "\nThis query will return the number of invoices and the sum of their totals for all invoices with a billing state of \"CA\".", "metadata": {}}
{"_id": "gpt3_256", "text": "\nThis query will return the Comptroller from the party table for the parties in districts 1 and 2 from the election table.", "metadata": {}}
{"_id": "gpt3_257", "text": "\nThis query will return the Comptroller of the party that won the election in districts 1 and 2.", "metadata": {}}
{"_id": "gpt3_258", "text": "\nThis query will return the Comptroller from the party table for the parties that have candidates running in districts 1 and 2 in the election table.", "metadata": {}}
{"_id": "gpt3_259", "text": "\nThis query will return the Comptroller of the party that won the election in Districts 1 and 2.", "metadata": {}}
{"_id": "gpt3_260", "text": "\nThe above query selects the Comptroller of the party associated with the districts 1 and 2 from the election and party tables.", "metadata": {}}
{"_id": "gpt3_261", "text": "\nThis query will return the district names from the district table where either the city area is greater than 10 or the city population is greater than 100,000.", "metadata": {}}
{"_id": "gpt3_262", "text": "\nThis query will select all district names from the district table where either the city area is greater than 10 or the city population is greater than 100000.", "metadata": {}}
{"_id": "gpt3_263", "text": "\nThis query will return all district names from the district table where either the city area is greater than 10 or the city population is greater than 100000.", "metadata": {}}
{"_id": "gpt3_264", "text": "\nThis query will return the district name from the district table where either the city area is greater than 10 or the city population is greater than 100,000.", "metadata": {}}
{"_id": "gpt3_265", "text": "\nThis query will return the district names from the district table where either the city area is greater than 10 or the city population is greater than 100,000.", "metadata": {}}
{"_id": "gpt3_266", "text": "\nThis query selects the email of the party associated with the most popular form, based on the party_forms and parties tables.", "metadata": {}}
{"_id": "gpt3_267", "text": "\nThis query selects the email address of the party associated with the most frequently used form.", "metadata": {}}
{"_id": "gpt3_268", "text": "\nThis query selects the email address from the parties table associated with the party form that has the highest count.", "metadata": {}}
{"_id": "gpt3_269", "text": "\nThis query will select the email address of the party associated with the form that has the highest count of entries.", "metadata": {}}
{"_id": "gpt3_270", "text": "\nThis query selects the email address of the party associated with the form that has the most entries.", "metadata": {}}
{"_id": "gpt3_271", "text": "\nThis query will return the Nationality of all Hosts who are between the ages of 35 and 45.", "metadata": {}}
{"_id": "gpt3_272", "text": "\nThis query will return the Nationality of all hosts that are between the ages of 35 and 45.", "metadata": {}}
{"_id": "gpt3_273", "text": "\nThis query retrieves the Nationality of all hosts who are between the ages of 35 and 45.", "metadata": {}}
{"_id": "gpt3_274", "text": "\nThis query returns the Nationality of all Hosts who are between the ages of 35 and 45.", "metadata": {}}
{"_id": "gpt3_275", "text": "\nThis query will select the Nationality of all Hosts who are older than 45 and younger than 35.", "metadata": {}}
{"_id": "gpt3_276", "text": "\nThis query returns the season for all games in which the player Walter Samuel suffered an injury or accident.", "metadata": {}}
{"_id": "gpt3_277", "text": "\nThis query will select the season from the game table for all games that Walter Samuel was injured or had an accident in.", "metadata": {}}
{"_id": "gpt3_278", "text": "\nThis query will return the season of each game in which the player Walter Samuel was involved in an injury or accident.", "metadata": {}}
{"_id": "gpt3_279", "text": "\nThis query will return the season of each game in which Walter Samuel was injured or had an accident.", "metadata": {}}
{"_id": "gpt3_280", "text": "\nThis query will return the season of the game in which the player Walter Samuel was injured or had an accident.", "metadata": {}}
{"_id": "gpt3_281", "text": "\nThis query will return the country with the most tournaments in the competition table, ordered by the number of tournaments in descending order, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_282", "text": "\nThis query returns the country with the most tournaments, ordered by count in descending order, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_283", "text": "\nThis query will return the country with the most tournaments in the competition table.", "metadata": {}}
{"_id": "gpt3_284", "text": "\nThis query returns the country with the highest number of tournaments from the competition table.", "metadata": {}}
{"_id": "gpt3_285", "text": "\nThis query will return the country with the most tournaments from the competition table, ordered by the number of tournaments in descending order, with a limit of one result.", "metadata": {}}
{"_id": "gpt3_286", "text": "\nThis query selects the student details from the students table with the most course registrations, ordered by the number of registrations and limited to one result.", "metadata": {}}
{"_id": "gpt3_287", "text": "\nThis query will select the student details from the students table (T1) that has the most course registrations from the student_course_registrations table (T2). It will group the students by their student_id and order them by", "metadata": {}}
{"_id": "gpt3_288", "text": "\nThis query will select the student details from the students table (T1) that has the most student course registrations (T2). The results will be grouped by student ID and ordered by the count of registrations, with the student with the most registrations", "metadata": {}}
{"_id": "gpt3_289", "text": "\nThis query selects the student details from the students table (T1) and joins it with the student_course_registrations table (T2) based on the student_id, then groups the results by student_id and orders them", "metadata": {}}
{"_id": "gpt3_290", "text": "\nThis query will select the student details of the student who has registered for the most courses, ordered by the number of courses they have registered for and limited to only one student.", "metadata": {}}
{"_id": "gpt3_291", "text": "\nThis query selects the name of all captains from a table and orders them by age in descending order.", "metadata": {}}
{"_id": "gpt3_292", "text": "\nThis query selects the name of all captains from a table and orders them by age in descending order.", "metadata": {}}
{"_id": "gpt3_293", "text": "\nThis statement selects the name of each captain from a table and orders them by age from highest to lowest.", "metadata": {}}
{"_id": "gpt3_294", "text": "\nThis SQL statement retrieves the names of all captains from a table in descending order of age.", "metadata": {}}
{"_id": "gpt3_295", "text": "\nThis query selects the name of each captain from the table and orders them by age in descending order.", "metadata": {}}
{"_id": "gpt3_296", "text": "\nThis query will count the number of products with the name \"laurel\" that have associated characteristics in the product_characteristics and characteristics tables.", "metadata": {}}
{"_id": "gpt3_297", "text": "\nThis query will count the number of products named \"laurel\" that have associated characteristics in the product_characteristics and characteristics tables.", "metadata": {}}
{"_id": "gpt3_298", "text": "\nThis query will count the number of products with the name \"laurel\" that have associated characteristics from the product_characteristics and characteristics tables.", "metadata": {}}
{"_id": "gpt3_299", "text": "\nThis query returns the total number of product characteristics associated with the product \"laurel\" in the products, product_characteristics, and characteristics tables.", "metadata": {}}
{"_id": "gpt3_300", "text": "\nThis query will count the number of products with the name \"laurel\" that have associated characteristics in the product_characteristics and characteristics tables.", "metadata": {}}
{"_id": "gpt3_301", "text": "\nThis query selects the order ID and order status of all orders placed by the customer named \"Jeramie\".", "metadata": {}}
{"_id": "gpt3_302", "text": "\nThis query selects the order_id and order_status of orders placed by the customer named \"Jeramie\" from the customers and orders tables.", "metadata": {}}
{"_id": "gpt3_303", "text": "\nThis query selects the order ID and order status from the orders table for all orders made by the customer named Jeramie from the customers table.", "metadata": {}}
{"_id": "gpt3_304", "text": "\nThis query selects the order ID and order status for all orders placed by customer \"Jeramie\" from the customers and orders tables.", "metadata": {}}
{"_id": "gpt3_305", "text": "\nThis query selects the order ID and order status from the orders table for the customer named Jeramie from the customers table.", "metadata": {}}
{"_id": "gpt3_306", "text": "\nThis query will select all the titles from the Album table and order them alphabetically.", "metadata": {}}
{"_id": "gpt3_307", "text": "\nThis query will select the title of all albums from the ALBUM table and order them alphabetically.", "metadata": {}}
{"_id": "gpt3_308", "text": "\nThis query will return a list of all the titles of albums in a database, sorted alphabetically.", "metadata": {}}
{"_id": "gpt3_309", "text": "\nThis query will return a list of all the titles from the Album table, ordered alphabetically.", "metadata": {}}
{"_id": "gpt3_310", "text": "\nThis statement will select the title of all albums from a database and order them alphabetically.", "metadata": {}}
{"_id": "gpt3_311", "text": "\nThis query will select all distinct college names from the college table where the enrollment is greater than the minimum enrollment of any college in the state of Florida.", "metadata": {}}
{"_id": "gpt3_312", "text": "\nThis statement will select all distinct college names from the college table where the enrollment is greater than the minimum enrollment of colleges located in the state of Florida.", "metadata": {}}
{"_id": "gpt3_313", "text": "\nThis query will select the distinct college names from the college table where the enrollment is greater than the minimum enrollment for colleges in Florida.", "metadata": {}}
{"_id": "gpt3_314", "text": "\nThis statement will select the distinct college names from the college table where the enrollment is greater than the minimum enrollment of any college located in Florida.", "metadata": {}}
{"_id": "gpt3_315", "text": "\nThis statement selects all distinct college names from the college table where the enrollment is greater than the minimum enrollment of any college located in Florida.", "metadata": {}}
{"_id": "gpt3_316", "text": "\nThis query will return the policy type code of any policies associated with the customer \"Dayana Robel\".", "metadata": {}}
{"_id": "gpt3_317", "text": "\nThis query will return the policy type code for the policy associated with the customer \"Dayana Robel\".", "metadata": {}}
{"_id": "gpt3_318", "text": "\nThis query will select the policy type code from the policies table for the customer with the customer details of \"Dayana Robel\" from the customers table.", "metadata": {}}
{"_id": "gpt3_319", "text": "\nThis query will return the policy type code associated with the customer \"Dayana Robel\" from the policies and customers tables.", "metadata": {}}
{"_id": "gpt3_320", "text": "\nThis query will select the policy type code from the policies table for the customer with customer details \"Dayana Robel\" from the customers table.", "metadata": {}}
{"_id": "gpt3_321", "text": "\nThis query will return the total number of lessons with a status code of \"Cancelled\".", "metadata": {}}
{"_id": "gpt3_322", "text": "\nThis query counts the number of lessons that have been cancelled.", "metadata": {}}
{"_id": "gpt3_323", "text": "\nThis query will return the total number of lessons with a status code of \"Cancelled\".", "metadata": {}}
{"_id": "gpt3_324", "text": "\nThis query returns the total number of lessons that have been cancelled.", "metadata": {}}
{"_id": "gpt3_325", "text": "\nThis query returns the total number of lessons that have been cancelled.", "metadata": {}}
{"_id": "gpt3_326", "text": "\nThis query will return the total number of games played by the Boston Red Stockings between the years of 1990 and 2000.", "metadata": {}}
{"_id": "gpt3_327", "text": "\nThis query will sum the total number of home games played by the Boston Red Stockings between the years 1990 and 2000.", "metadata": {}}
{"_id": "gpt3_328", "text": "\nThis query will return the total number of home games played by the Boston Red Stockings between 1990 and 2000.", "metadata": {}}
{"_id": "gpt3_329", "text": "\nThis query will return the sum of all the games played by the Boston Red Stockings between 1990 and 2000.", "metadata": {}}
{"_id": "gpt3_330", "text": "\nThis query will return the total number of games played by the Boston Red Stockings between 1990 and 2000.", "metadata": {}}
{"_id": "gpt3_331", "text": "\nThis query will select the titles of movies that have not been rated.", "metadata": {}}
{"_id": "gpt3_332", "text": "\nThis query will select the title of all movies that have not been rated.", "metadata": {}}
{"_id": "gpt3_333", "text": "\nThis query will select the title of all movies that are not in the Rating table.", "metadata": {}}
{"_id": "gpt3_334", "text": "\nThis query selects the title of all movies from the Movie table that are not present in the Rating table.", "metadata": {}}
{"_id": "gpt3_335", "text": "\nThis query selects the title of all movies that do not have any ratings in the Rating table.", "metadata": {}}
{"_id": "gpt3_336", "text": "\nThis query returns a table of movie titles, their release year, and their director, sorted by budget in ascending order.", "metadata": {}}
{"_id": "gpt3_337", "text": "\nThis query will return the title, year, and director of all movies in the movie table, ordered by budget in descending order.", "metadata": {}}
{"_id": "gpt3_338", "text": "\nThis query will select the title, year, and director of movies from the movie table, and order the results by budget_million in ascending order.", "metadata": {}}
{"_id": "gpt3_339", "text": "\nThis query will return a list of movies, years, and directors, sorted by budget in descending order.", "metadata": {}}
{"_id": "gpt3_340", "text": "\nThis query will return the title, year, and director of all movies in the movie table, ordered by budget in descending order.", "metadata": {}}
{"_id": "gpt3_341", "text": "\nThis query returns the average age of all gymnasts in the people table.", "metadata": {}}
{"_id": "gpt3_342", "text": "\nThis query calculates the average age of all gymnasts in the people table.", "metadata": {}}
{"_id": "gpt3_343", "text": "\nThis query returns the average age of all the gymnasts in the people table.", "metadata": {}}
{"_id": "gpt3_344", "text": "\nThis query will return the average age of all gymnasts in the people table.", "metadata": {}}
{"_id": "gpt3_345", "text": "\nThis query will return the average age of all gymnasts in the people table.", "metadata": {}}
{"_id": "gpt3_346", "text": "\nThis query will select the balance from the checking accounts for customers who have a name in the accounts table that is also associated with a savings account balance that is greater than the average balance of all savings accounts.", "metadata": {}}
{"_id": "gpt3_347", "text": "\nThis query returns the balance from the checking accounts of customers whose name is found in the accounts table and have a balance in their savings account that is above the average balance of all savings accounts.", "metadata": {}}
{"_id": "gpt3_348", "text": "\nThis statement retrieves the checking account balance for all customers who have a savings account balance greater than the average balance of all savings accounts.", "metadata": {}}
{"_id": "gpt3_349", "text": "\nThis query selects the balance from the checking accounts of customers who have a name that appears in the accounts table and a balance greater than the average balance from the savings table.", "metadata": {}}
{"_id": "gpt3_350", "text": "\nThis query selects the balance from the checking accounts of customers whose name is in the list of customers who have a balance in their savings account that is greater than the average balance in all savings accounts.", "metadata": {}}
{"_id": "gpt3_351", "text": "\nThis query will select the customer name and phone number from customers, customer_addresses, and addresses tables where the state/province/county is set to 'California'.", "metadata": {}}
{"_id": "gpt3_352", "text": "\nThis statement selects the customer name and phone number of all customers from the customers, customer_addresses, and addresses tables who have an address in California.", "metadata": {}}
{"_id": "gpt3_353", "text": "\nThis statement selects the customer name and customer phone from the customers, customer_addresses, and addresses tables where the state, province, or county is 'California'.", "metadata": {}}
{"_id": "gpt3_354", "text": "\nThis query selects the customer name and phone number from customers, customer_addresses, and addresses tables where the state, province, or county is California.", "metadata": {}}
{"_id": "gpt3_355", "text": "\nThis query selects the customer name and phone number from the customers table for all customers who have an address in the state of California.", "metadata": {}}
{"_id": "gpt3_356", "text": "\nThis query returns the number of airports with the word 'International' in their name.", "metadata": {}}
{"_id": "gpt3_357", "text": "\nThis query will count the number of airports whose name contains the word \"International.\"", "metadata": {}}
{"_id": "gpt3_358", "text": "\nThis query will count the number of airports whose name contains the word \"International\".", "metadata": {}}
{"_id": "gpt3_359", "text": "\nThis query returns the number of airports with the word 'International' in their name.", "metadata": {}}
{"_id": "gpt3_360", "text": "\nThis query will return the total number of airports whose name includes the word \"International\".", "metadata": {}}
{"_id": "gpt3_361", "text": "\nThis query returns the IDs of all stations with a latitude greater than 37.4 that have fewer than 7 bikes available.", "metadata": {}}
{"_id": "gpt3_362", "text": "\nThis query returns the IDs of all stations with a latitude greater than 37.4 that have fewer than 7 bikes available.", "metadata": {}}
{"_id": "gpt3_363", "text": "\nThis query returns the IDs of all stations with a latitude greater than 37.4, except for those stations with fewer than 7 bikes available according to the status table.", "metadata": {}}
{"_id": "gpt3_364", "text": "\nThis statement finds all the station IDs from the station table where the latitude is greater than 37.4, and then removes any station IDs that appear in the status table and have fewer than 7 bikes available.", "metadata": {}}
{"_id": "gpt3_365", "text": "\nThis query will return the IDs of all stations with a latitude greater than 37.4 that have fewer than 7 bikes available.", "metadata": {}}
{"_id": "gpt3_366", "text": "\nThis query will return all the classes from the captain table that have more than two entries.", "metadata": {}}
{"_id": "gpt3_367", "text": "\nThis query will return all the classes from the captain table that have more than two entries.", "metadata": {}}
{"_id": "gpt3_368", "text": "\nThis query is used to return the classes from the captain table that have more than two entries. It will return a list of classes that have more than two entries in the captain table.", "metadata": {}}
{"_id": "gpt3_369", "text": "\nThis query returns all the classes from the captain table that have more than two entries.", "metadata": {}}
{"_id": "gpt3_370", "text": "\nThis query returns the classes of captains from the captain table that have more than two members.", "metadata": {}}
{"_id": "gpt3_371", "text": "\nThe SELECT * FROM item statement is used to retrieve all records from the item table in a database. It will return all columns and rows from the item table.", "metadata": {}}
{"_id": "gpt3_372", "text": "\nThe SELECT * FROM item statement is a query that retrieves all columns and rows from the item table in a database.", "metadata": {}}
{"_id": "gpt3_373", "text": "\nThe SELECT * FROM item statement is a SQL query that retrieves all of the columns and records from the item table.", "metadata": {}}
{"_id": "gpt3_374", "text": "\nThe SELECT * FROM item statement is a SQL query that selects all columns and rows from the item table.", "metadata": {}}
{"_id": "gpt3_375", "text": "\nThe SELECT * FROM item statement is a SQL query that retrieves all of the data from the item table in a database. This query will return all columns and their corresponding data in the item table.", "metadata": {}}
{"_id": "gpt3_376", "text": "\nThis query will select the names of the five cities with the highest percentage of white population from the city table and order them in descending order.", "metadata": {}}
{"_id": "gpt3_377", "text": "\nThis query will return the names of the top 5 cities with the highest population of white people, in descending order.", "metadata": {}}
{"_id": "gpt3_378", "text": "\nThis query retrieves the names of the top 5 cities with the highest White population, in descending order.", "metadata": {}}
{"_id": "gpt3_379", "text": "\nThis query retrieves the top 5 cities with the highest percentage of White population, in descending order, from the city table.", "metadata": {}}
{"_id": "gpt3_380", "text": "\nThis query will select the names of the top five cities with the highest percentage of white population, in descending order.", "metadata": {}}
{"_id": "gpt3_381", "text": "\nThis statement will retrieve the role code, role name, and role description from the ROLES table.", "metadata": {}}
{"_id": "gpt3_382", "text": "\nThis statement retrieves the role_code, role_name, and role_description from the ROLES table.", "metadata": {}}
{"_id": "gpt3_383", "text": "\nThis query is used to retrieve the role code, role name, and role description from the ROLES table.", "metadata": {}}
{"_id": "gpt3_384", "text": "\nThis query retrieves the role code, role name, and role description from the ROLES table.", "metadata": {}}
{"_id": "gpt3_385", "text": "\nThis query selects the role_code, role_name, and role_description from the ROLES table.", "metadata": {}}
{"_id": "gpt3_386", "text": "\nThis query selects the title of the movie with the highest average rating, as well as the average rating for that movie.", "metadata": {}}
{"_id": "gpt3_387", "text": "\nThis query selects the title of a movie and its average rating from the Rating and Movie tables, groups the ratings by movie ID, orders the results by the average rating in descending order, and limits the results to the top rated movie.", "metadata": {}}
{"_id": "gpt3_388", "text": "\nThis query selects the title of the movie with the highest average rating and the average rating itself.", "metadata": {}}
{"_id": "gpt3_389", "text": "\nThis query will select the title of the movie with the highest average rating, as well as the average rating itself.", "metadata": {}}
{"_id": "gpt3_390", "text": "\nThis query will select the title of the movie with the highest average rating and the average rating itself, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_391", "text": "\nThis statement will select the name and price of all products from the products table.", "metadata": {}}
{"_id": "gpt3_392", "text": "\nThis query retrieves the name and price of all products from the products table.", "metadata": {}}
{"_id": "gpt3_393", "text": "\nThis query will retrieve the name and price of all products from the products table.", "metadata": {}}
{"_id": "gpt3_394", "text": "\nThis statement will select the name and price of all products from the products table.", "metadata": {}}
{"_id": "gpt3_395", "text": "\nThis statement will select the name and price of all products from the products table.", "metadata": {}}
{"_id": "gpt3_396", "text": "\nThis query will return the locations of tracks that have seating capacities between 70,000 and 90,000.", "metadata": {}}
{"_id": "gpt3_397", "text": "\nThis statement selects all locations from the track table where the seating capacity is between 70000 and 90000.", "metadata": {}}
{"_id": "gpt3_398", "text": "\nThis query will return the locations of tracks where seating is between 70,000 and 90,000.", "metadata": {}}
{"_id": "gpt3_399", "text": "\nThis query will return the locations of all tracks that have a seating capacity between 70000 and 90000.", "metadata": {}}
{"_id": "gpt3_400", "text": "\nThis query will return the locations of tracks with seating capacity between 70,000 and 90,000.", "metadata": {}}
{"_id": "gpt3_401", "text": "\nThis query returns all home cities of drivers who are 40 years old or younger.", "metadata": {}}
{"_id": "gpt3_402", "text": "\nThis statement will return all home cities of drivers that are 40 years old or younger.", "metadata": {}}
{"_id": "gpt3_403", "text": "\nThis query returns the home cities of drivers who are 40 years old or younger.", "metadata": {}}
{"_id": "gpt3_404", "text": "\nThis query returns all the home cities of drivers who are 40 years old or younger.", "metadata": {}}
{"_id": "gpt3_405", "text": "\nThis query will return all home cities from drivers who are 40 years old or younger.", "metadata": {}}
{"_id": "gpt3_406", "text": "\nThis query will return the number of distinct advisors in the Student table.", "metadata": {}}
{"_id": "gpt3_407", "text": "\nThis query will count the number of unique advisors in the Student table.", "metadata": {}}
{"_id": "gpt3_408", "text": "\nThis query will return the number of distinct advisors for students in the Student table.", "metadata": {}}
{"_id": "gpt3_409", "text": "\nThis query will count the number of distinct advisors for students in the Student table.", "metadata": {}}
{"_id": "gpt3_410", "text": "\nThis query will return the total number of distinct advisors in the Student table.", "metadata": {}}
{"_id": "gpt3_411", "text": "\nThis query selects the name and email of users who are being followed by more than one user. The query joins the user_profiles table and the follows table on the user id field. It then groups by the followed user and counts the number", "metadata": {}}
{"_id": "gpt3_412", "text": "\nThis statement will select the name and email of users from the user_profiles table who are followed by more than one user in the follows table.", "metadata": {}}
{"_id": "gpt3_413", "text": "\nThis statement selects the name and email of users who are followed by more than one user from the user_profiles and follows tables. The user_profiles table is aliased as T1, and the follows table is aliased as T", "metadata": {}}
{"_id": "gpt3_414", "text": "\nThis query selects the name and email of users from the user_profiles table who are followed by more than one user from the follows table. It does this by joining the two tables on the user ID, grouping by the user ID, and", "metadata": {}}
{"_id": "gpt3_415", "text": "\nThis query returns the name and email of users who are followed by more than one user. It joins the user_profiles and follows tables on the uid field, and groups by the f1 field in the follows table. It then filters", "metadata": {}}
{"_id": "gpt3_416", "text": "\nThis query selects the name of all channels that broadcast in the morning from the channel and broadcast tables.", "metadata": {}}
{"_id": "gpt3_417", "text": "\nThis query selects the name of all channels that have a broadcast in the morning.", "metadata": {}}
{"_id": "gpt3_418", "text": "\nThis query selects the name of a channel from the channel table, based on a corresponding channel ID in the broadcast table, where the time of day of the broadcast is 'Morning'.", "metadata": {}}
{"_id": "gpt3_419", "text": "\nThis query will select the name of all channels that have a broadcast in the morning.", "metadata": {}}
{"_id": "gpt3_420", "text": "\nThis SQL query selects the names of all channels from the channel table which have a broadcast in the morning from the broadcast table.", "metadata": {}}
{"_id": "gpt3_421", "text": "\nThis SQL statement retrieves the names and teams of wrestlers from the elimination and wrestler tables, and orders them by the days they have held a title.", "metadata": {}}
{"_id": "gpt3_422", "text": "\nThis query selects the name and team of each wrestler from the elimination and wrestler tables, and orders them by the number of days each wrestler has held the title.", "metadata": {}}
{"_id": "gpt3_423", "text": "\nThis SQL query selects the names and teams of wrestlers from the elimination and wrestler tables, ordered by the number of days the wrestler held their championship.", "metadata": {}}
{"_id": "gpt3_424", "text": "\nThis query selects the name and team of each wrestler from the elimination and wrestler tables and orders them by the number of days each wrestler held the title.", "metadata": {}}
{"_id": "gpt3_425", "text": "\nThis query will select the Name and Team of all wrestlers in the elimination table, joining the wrestler table on Wrestler_ID, and ordering the results by the Days_held in descending order.", "metadata": {}}
{"_id": "gpt3_426", "text": "\nThis query will select the email address and phone number of customers who are not in the complaints table.", "metadata": {}}
{"_id": "gpt3_427", "text": "\nThis query will select the email address and phone number from customers who are not in the complaints table.", "metadata": {}}
{"_id": "gpt3_428", "text": "\nThis query will select the email address and phone number of customers who have not made any complaints.", "metadata": {}}
{"_id": "gpt3_429", "text": "\nThis statement selects the email address and phone number of customers who have not filed any complaints.", "metadata": {}}
{"_id": "gpt3_430", "text": "\nThis SQL query will select the email addresses and phone numbers of customers who have not made any complaints.", "metadata": {}}
{"_id": "gpt3_431", "text": "\nThis query selects all distinct club names from the club table, joined with the member_of_club table on the clubid column, and joined with the student table on the stuid column, where the city_code of the student is \"", "metadata": {}}
{"_id": "gpt3_432", "text": "\nThis query will select the distinct club names from the club table that have members from the city of Houston (city_code \"HOU\").", "metadata": {}}
{"_id": "gpt3_433", "text": "\nThis query selects the distinct club names from the club, member_of_club, and student tables where the student's city code is \"HOU\".", "metadata": {}}
{"_id": "gpt3_434", "text": "\nThis query will select all distinct club names from the club table (t1) that have members (from the member_of_club table, t2) who are students (from the student table, t3) from the city with the", "metadata": {}}
{"_id": "gpt3_435", "text": "\nThis statement retrieves the distinct names of all clubs located in Houston (city code \"HOU\") from the club, member_of_club, and student tables.", "metadata": {}}
{"_id": "gpt3_436", "text": "\nThis query will select the apartment type code, bathroom count, and bedroom count from the Apartments table, group the results by apartment type code, order them by the sum of room count in descending order, and limit the results to the top one", "metadata": {}}
{"_id": "gpt3_437", "text": "\nThis query will select the apartment type code, bathroom count, and bedroom count from the Apartments table, group the results by apartment type code, order them by the sum of the room count in descending order, and limit the results to the top", "metadata": {}}
{"_id": "gpt3_438", "text": "\nThis query will select the apartment type code, bathroom count, and bedroom count from the Apartments table, group them by apartment type code, and then order them by the sum of the room count in descending order. The result will be limited to", "metadata": {}}
{"_id": "gpt3_439", "text": "\nThis query will return the apartment type code, bathroom count, and bedroom count of the apartment type with the highest total room count, ordered by descending total room count.", "metadata": {}}
{"_id": "gpt3_440", "text": "\nThis query selects the apartment type code, bathroom count, and bedroom count from the Apartments table and groups them by apartment type code, ordering them by the sum of the room count in descending order and limiting the results to the top one.", "metadata": {}}
{"_id": "gpt3_441", "text": "\nThis query will select the Name and Score of all wines made with White grapes from the GRAPES and WINE tables.", "metadata": {}}
{"_id": "gpt3_442", "text": "\nThis statement will select the Name and Score of all Wines whose Grape has a Color of White from the GRAPES and WINE tables.", "metadata": {}}
{"_id": "gpt3_443", "text": "\nThis query will select the Name and Score of wines from the WINE table that are made with white grapes from the GRAPES table.", "metadata": {}}
{"_id": "gpt3_444", "text": "\nThis statement will select the Name and Score from the WINE table for all wines made with White grapes from the GRAPES table.", "metadata": {}}
{"_id": "gpt3_445", "text": "\nThis query will select the Name and Score of all wines made from White Grapes from the GRAPES and WINE tables.", "metadata": {}}
{"_id": "gpt3_446", "text": "\nThis query selects the first and last name of the top 10 customers with the most invoices, and also counts the number of invoices for each of these customers. It does this by joining the customers and invoices tables, grouping", "metadata": {}}
{"_id": "gpt3_447", "text": "\nThis query selects the first and last name of the 10 customers with the most invoices, and counts the number of invoices each customer has.", "metadata": {}}
{"_id": "gpt3_448", "text": "\nThis query selects the first and last name of the top 10 customers with the most invoices, along with the number of invoices for each customer. It does this by joining the customers and invoices tables on the customer_id", "metadata": {}}
{"_id": "gpt3_449", "text": "\nThis query will select the first and last name of the top 10 customers in terms of the number of invoices they have, and count the number of invoices for each customer. The results will be ordered from highest to lowest count.", "metadata": {}}
{"_id": "gpt3_450", "text": "\nThis query selects the first and last name of the top 10 customers with the most invoices, along with the total number of invoices associated with each customer.", "metadata": {}}
{"_id": "gpt3_451", "text": "\nThis query will select all apartment numbers from the Apartments table, sorted in ascending order by the number of rooms in each apartment.", "metadata": {}}
{"_id": "gpt3_452", "text": "\nThis query will select the apartment number from the Apartments table and order the results by the number of rooms in each apartment in ascending order.", "metadata": {}}
{"_id": "gpt3_453", "text": "\nThis query will select all apartment numbers from the Apartments table and order them in ascending order by the number of rooms in each apartment.", "metadata": {}}
{"_id": "gpt3_454", "text": "\nThis query will select all the apartment numbers from the Apartments table and order them by the number of rooms in each apartment in ascending order.", "metadata": {}}
{"_id": "gpt3_455", "text": "\nThis query will select the apartment numbers from the Apartments table, and order them by the number of rooms in ascending order.", "metadata": {}}
{"_id": "gpt3_456", "text": "\nThis query will return the subject ID, subject name, and the count of courses associated with each subject.", "metadata": {}}
{"_id": "gpt3_457", "text": "\nThis query finds the subject_id, subject_name, and the count of all courses associated with each subject in the Courses and Subjects tables.", "metadata": {}}
{"_id": "gpt3_458", "text": "\nThis query selects the subject ID, subject name, and count of all courses from the Courses and Subjects tables and groups them by subject ID.", "metadata": {}}
{"_id": "gpt3_459", "text": "\nThis query returns the subject_id, subject_name, and the number of courses associated with each subject.", "metadata": {}}
{"_id": "gpt3_460", "text": "\nThis query will return a list of subject IDs and their corresponding subject names, along with a count of the number of courses associated with each subject.", "metadata": {}}
{"_id": "gpt3_461", "text": "\nThis query will return the names of all channels from a database that are not owned by CCTV.", "metadata": {}}
{"_id": "gpt3_462", "text": "\nThis query will select the name of all channels from a given database where the owner is not CCTV.", "metadata": {}}
{"_id": "gpt3_463", "text": "\nThis query will select the names of all channels from a database where the owner is not CCTV.", "metadata": {}}
{"_id": "gpt3_464", "text": "\nThis query will return the names of all channels in the database that are not owned by CCTV.", "metadata": {}}
{"_id": "gpt3_465", "text": "\nThis query will select the names of all channels from the channel table where the owner is not equal to CCTV.", "metadata": {}}
{"_id": "gpt3_466", "text": "\nThis statement retrieves the region name from the region table (T1) and joins it with the affected_region table (T2) based on the region_id. The query then groups the results by the region_id and returns only", "metadata": {}}
{"_id": "gpt3_467", "text": "\nThis SQL query selects the region name from the region table (T1) and joins it with the affected_region table (T2) based on the region_id. It then groups the results by the region_id and only returns the", "metadata": {}}
{"_id": "gpt3_468", "text": "\nThis query selects all region names from the region table that have more than one entry in the affected_region table.", "metadata": {}}
{"_id": "gpt3_469", "text": "\nThis statement selects the region name from the region table (T1) that is associated with two or more affected regions in the affected_region table (T2). It does this by joining the region table and the affected_region table on the", "metadata": {}}
{"_id": "gpt3_470", "text": "\nThis query selects the name of regions from the region table that have at least two entries in the affected_region table.", "metadata": {}}
{"_id": "gpt3_471", "text": "\nThis query will return all catalog entry names from the catalog_contents table where the length is less than 3 or the width is greater than 5.", "metadata": {}}
{"_id": "gpt3_472", "text": "\nThis query will select the catalog entry name from the catalog contents table where the length is less than 3 or the width is greater than 5.", "metadata": {}}
{"_id": "gpt3_473", "text": "\nThis query will return all catalog entry names from the catalog contents table that have a length less than 3 or a width greater than 5.", "metadata": {}}
{"_id": "gpt3_474", "text": "\nThis query will return the names of all catalog entries from the catalog_contents table where the length is less than 3 or the width is greater than 5.", "metadata": {}}
{"_id": "gpt3_475", "text": "\nThis query will return the names of all catalog entries from the catalog contents table that have a length less than 3 or a width greater than 5.", "metadata": {}}
{"_id": "gpt3_476", "text": "\nThis query selects the sex of the people from the 'people' table who are candidates in the 'candidate' table, groups them by sex, orders them by the average of their unsure rate in the 'candidate' table, and then", "metadata": {}}
{"_id": "gpt3_477", "text": "\nThis query selects the sex of the person with the highest average unsure rate from the candidate table, grouped by sex.", "metadata": {}}
{"_id": "gpt3_478", "text": "\nThis query selects the sex of the people from the people table who are also candidates in the candidate table, groups them by sex, orders them by the average unsure rate from the candidate table, and limits the results to one record.", "metadata": {}}
{"_id": "gpt3_479", "text": "\nThis query selects the sex of the people from the people table who are also candidates in the candidate table, and orders them by the average unsure rate of the candidates, limiting the result to the top one.", "metadata": {}}
{"_id": "gpt3_480", "text": "\nThis query selects the sex with the highest average unsure rate from the people and candidate tables, ordered by highest average unsure rate. The result is limited to one entry.", "metadata": {}}
{"_id": "gpt3_481", "text": "\nThis query will return the minimum and maximum number of bathrooms in the Apartments table.", "metadata": {}}
{"_id": "gpt3_482", "text": "\nThis query will select the minimum and maximum number of bathrooms in the Apartments table.", "metadata": {}}
{"_id": "gpt3_483", "text": "\nThis query will return the minimum and maximum number of bathrooms in the Apartments table.", "metadata": {}}
{"_id": "gpt3_484", "text": "\nThis query will return the minimum and maximum number of bathrooms in the Apartments table.", "metadata": {}}
{"_id": "gpt3_485", "text": "\nThis query returns the minimum and maximum number of bathrooms in the Apartments table.", "metadata": {}}
{"_id": "gpt3_486", "text": "\nThis query will select the customer_name from the customers table where the payment_method is equal to \"Cash\".", "metadata": {}}
{"_id": "gpt3_487", "text": "\nThis query will select the customer name of all customers who have a payment method of \"Cash\".", "metadata": {}}
{"_id": "gpt3_488", "text": "\nThis SQL statement will select the customer_name from the customers table where the payment_method is equal to \"Cash\".", "metadata": {}}
{"_id": "gpt3_489", "text": "\nThis SQL statement will select the customer name from the customers table where the payment method is equal to \"Cash\".", "metadata": {}}
{"_id": "gpt3_490", "text": "\nThis query will select the customer name from the customers table where the payment method is \"Cash\".", "metadata": {}}
{"_id": "gpt3_491", "text": "\nThis query returns the total number of records in the artist table.", "metadata": {}}
{"_id": "gpt3_492", "text": "\nThis query returns the number of rows in the artist table.", "metadata": {}}
{"_id": "gpt3_493", "text": "\nThis query returns the total number of records in the artist table.", "metadata": {}}
{"_id": "gpt3_494", "text": "\nThis query returns the total number of artists in the artist table.", "metadata": {}}
{"_id": "gpt3_495", "text": "\nThis query counts the total number of entries in the artist table.", "metadata": {}}
{"_id": "gpt3_496", "text": "\nThis query returns the number of students who have advisor 1121.", "metadata": {}}
{"_id": "gpt3_497", "text": "\nThis query returns the number of students who have advisor 1121.", "metadata": {}}
{"_id": "gpt3_498", "text": "\nThis query returns the total number of students who have Advisor 1121.", "metadata": {}}
{"_id": "gpt3_499", "text": "\nThis query will return the number of students who have Advisor 1121.", "metadata": {}}
{"_id": "gpt3_500", "text": "\nThis query will count the number of students who have an advisor with the ID number 1121.", "metadata": {}}
{"_id": "gpt3_501", "text": "\nThis query returns the total number of records in the company table.", "metadata": {}}
{"_id": "gpt3_502", "text": "\nThis query will return the total number of records in the company table.", "metadata": {}}
{"_id": "gpt3_503", "text": "\nThis query returns the total number of records in the company table.", "metadata": {}}
{"_id": "gpt3_504", "text": "\nThis query will count the total number of records in the company table.", "metadata": {}}
{"_id": "gpt3_505", "text": "\nThis query returns the total number of records in the company table.", "metadata": {}}
{"_id": "gpt3_506", "text": "\nThis query will select the distinct file size and formats from the files table for all songs with a resolution less than 800.", "metadata": {}}
{"_id": "gpt3_507", "text": "\nThis query selects the distinct file sizes and formats of files that have a resolution of less than 800 in the song table.", "metadata": {}}
{"_id": "gpt3_508", "text": "\nThis query returns the distinct file size and formats of all files from the files and song tables where the resolution of the song is less than 800.", "metadata": {}}
{"_id": "gpt3_509", "text": "\nThis query will select the distinct file size and formats of all files that have a resolution of less than 800 in the song table.", "metadata": {}}
{"_id": "gpt3_510", "text": "\nThis query will select the distinct file size and formats of files from the files and song tables where the resolution of the song is less than 800.", "metadata": {}}
{"_id": "gpt3_511", "text": "\nThis query will return all campuses located in Los Angeles County that were established after 1950.", "metadata": {}}
{"_id": "gpt3_512", "text": "\nThis query will return all campuses located in Los Angeles County that were founded after 1950.", "metadata": {}}
{"_id": "gpt3_513", "text": "\nThis query will return all campuses from Los Angeles county that were established after 1950.", "metadata": {}}
{"_id": "gpt3_514", "text": "\nThis query will select the campus names from the campuses table where the county is \"Los Angeles\" and the year is greater than 1950.", "metadata": {}}
{"_id": "gpt3_515", "text": "\nThis query will return the name of all campuses located in Los Angeles County that were established after 1950.", "metadata": {}}
{"_id": "gpt3_516", "text": "\nThis query will return all rows from the Assessment_Notes table, sorted in ascending order by the date_of_notes column.", "metadata": {}}
{"_id": "gpt3_517", "text": "\nThis query will select all the records from the Assessment_Notes table and order them by date_of_notes in ascending order. This will allow the user to view the records from oldest to newest.", "metadata": {}}
{"_id": "gpt3_518", "text": "\nThis statement will select all columns from the Assessment_Notes table, and will order the returned results by the date_of_notes column in ascending order.", "metadata": {}}
{"_id": "gpt3_519", "text": "\nThis query will return all records from the Assessment_Notes table, sorted in ascending order based on the date_of_notes field.", "metadata": {}}
{"_id": "gpt3_520", "text": "\nThis query will select all of the columns from the Assessment_Notes table and order them in ascending order based on the date_of_notes column.", "metadata": {}}
{"_id": "gpt3_521", "text": "\nThis query joins the acceptance and submission tables on the Submission_ID column and selects the Author from the submission table and the Result from the acceptance table.", "metadata": {}}
{"_id": "gpt3_522", "text": "\nThis query retrieves the author and result of an acceptance from the submission table. It joins the acceptance and submission tables on the Submission_ID column.", "metadata": {}}
{"_id": "gpt3_523", "text": "\nThis query selects the author and result of an acceptance from a submission table.", "metadata": {}}
{"_id": "gpt3_524", "text": "\nThis query joins the acceptance and submission tables on the submission_ID column. It selects the author from the submission table and the result from the acceptance table.", "metadata": {}}
{"_id": "gpt3_525", "text": "\nThis query selects the author and result from the acceptance and submission tables based on a matching submission ID.", "metadata": {}}
{"_id": "gpt3_526", "text": "\nThis query returns the names of all reviewers who have given both a 3-star and a 4-star rating.", "metadata": {}}
{"_id": "gpt3_527", "text": "\nThis query selects the names of all reviewers who have rated a product with both 3 and 4 stars.", "metadata": {}}
{"_id": "gpt3_528", "text": "\nThis query selects the names of all reviewers who have given both 3-star and 4-star ratings.", "metadata": {}}
{"_id": "gpt3_529", "text": "\nThis query returns the names of all reviewers who have given both a 3-star and a 4-star rating.", "metadata": {}}
{"_id": "gpt3_530", "text": "\nThis query returns the names of reviewers who have rated something 3 stars and 4 stars.", "metadata": {}}
{"_id": "gpt3_531", "text": "\nThis SQL statement will return a list of all unique Employee ID numbers that have authorized documents to be destroyed.", "metadata": {}}
{"_id": "gpt3_532", "text": "\nThis query will return a list of unique employee IDs for all employees who have authorized the destruction of documents.", "metadata": {}}
{"_id": "gpt3_533", "text": "\nThis query will return a list of all the distinct employee IDs associated with documents that have been authorized for destruction.", "metadata": {}}
{"_id": "gpt3_534", "text": "\nThis SQL query will return a list of all the unique Employee IDs of the employees who have authorized the destruction of documents.", "metadata": {}}
{"_id": "gpt3_535", "text": "\nThis query will return a list of all the employee IDs of those who authorized the destruction of documents.", "metadata": {}}
{"_id": "gpt3_536", "text": "\nThis query is used to select the product name and sum of the product quantity from the Order_items and Products tables and group the results by product name. The query will return the product name and the total quantity of the product that was ordered.", "metadata": {}}
{"_id": "gpt3_537", "text": "\nThis query will return the product name and the sum of the product quantity for each product in the Order_items and Products tables.", "metadata": {}}
{"_id": "gpt3_538", "text": "\nThis query summarizes the total product quantities of each product name in the Order_items and Products tables. The query joins the two tables on the product_id field and then groups the data by product name, calculating the sum of the product_quant", "metadata": {}}
{"_id": "gpt3_539", "text": "\nThis query will select the product name and the sum of the product quantities from the Order_items and Products tables, grouping the results by product name.", "metadata": {}}
{"_id": "gpt3_540", "text": "\nThis query summarizes the total quantity of each product ordered from the Order_items and Products tables. It does this by joining the two tables on the product_id column, and then grouping by the product_name column and summing the product_", "metadata": {}}
{"_id": "gpt3_541", "text": "\nThis query selects the names of storms that have affected at least two regions and have caused at least 10 cities to be affected.", "metadata": {}}
{"_id": "gpt3_542", "text": "\nThis query returns the names of storms that have affected at least two regions and caused more than 10 cities to be affected.", "metadata": {}}
{"_id": "gpt3_543", "text": "\nThis query selects the name of storms that have affected at least two regions and have caused at least 10 cities to be affected.", "metadata": {}}
{"_id": "gpt3_544", "text": "\nThis query returns the names of storms that have affected at least two regions and have caused at least 10 cities to be affected.", "metadata": {}}
{"_id": "gpt3_545", "text": "\nThis query selects the names of storms that have affected at least two regions and have caused the affected regions to have at least 10 cities affected combined.", "metadata": {}}
{"_id": "gpt3_546", "text": "\nThis query will return the titles of all courses that have 'Differential Geometry' as a pre-requisite.", "metadata": {}}
{"_id": "gpt3_547", "text": "\nThis query will select the title of all courses that have 'Differential Geometry' as a prerequisite.", "metadata": {}}
{"_id": "gpt3_548", "text": "\nThis query will select the titles of all courses that have Differential Geometry as a pre-requisite.", "metadata": {}}
{"_id": "gpt3_549", "text": "\nThis query returns all the titles from the 'course' table that have a course_id which is in the prereq table, and the prereq course title is 'Differential Geometry'.", "metadata": {}}
{"_id": "gpt3_550", "text": "\nThis query will return the titles of all courses that have the prerequisite of Differential Geometry.", "metadata": {}}
{"_id": "gpt3_551", "text": "\nThis query selects the name, home city, and age of drivers from a table.", "metadata": {}}
{"_id": "gpt3_552", "text": "\nThis query will select the name, home city and age of drivers from a database.", "metadata": {}}
{"_id": "gpt3_553", "text": "\nThe query selects the name, home city, and age of drivers from a table.", "metadata": {}}
{"_id": "gpt3_554", "text": "\nThis query will select the name, home city, and age of all drivers from a database.", "metadata": {}}
{"_id": "gpt3_555", "text": "\nThis SQL query selects the name, home city, and age of drivers from a database.", "metadata": {}}
{"_id": "gpt3_556", "text": "\nThis query retrieves the product details and product ID of the product with the highest total order quantity from the order_items and products tables, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_557", "text": "\nThis query selects the product details and product ID of the product with the highest order quantity, from the order_items and products tables. It groups the order items by product ID, then orders them by the sum of the order quantity and limits the", "metadata": {}}
{"_id": "gpt3_558", "text": "\nThis query selects the product details and product ID for the product with the highest order quantity from the order_items and products tables, grouped by product ID and ordered by the sum of the order quantity. The result is limited to one row.", "metadata": {}}
{"_id": "gpt3_559", "text": "\nThis query retrieves the product details and product ID of the product with the highest total order quantity from the order_items and products tables, sorted by the sum of the order quantity and limited to the top result.", "metadata": {}}
{"_id": "gpt3_560", "text": "\nThis query selects the product details and product ID of the product with the highest total order quantity from the order_items and products tables. It does this by joining the two tables on the product_id field, grouping by product_id, and", "metadata": {}}
{"_id": "gpt3_561", "text": "\nThis query will return the names of all females from Canada who were married in 2016.", "metadata": {}}
{"_id": "gpt3_562", "text": "\nThis query finds the names of all the females from Canada who got married in the year 2016.", "metadata": {}}
{"_id": "gpt3_563", "text": "\nThis query will return the name of all females from Canada who were married in 2016.", "metadata": {}}
{"_id": "gpt3_564", "text": "\nThis query will select the names of all females from Canada who were married in 2016.", "metadata": {}}
{"_id": "gpt3_565", "text": "\nThis query returns the names of all the females from Canada who were married in 2016.", "metadata": {}}
{"_id": "gpt3_566", "text": "\nThis query counts the number of distinct party names in the party table.", "metadata": {}}
{"_id": "gpt3_567", "text": "\nThis query returns the number of distinct party names in the party table.", "metadata": {}}
{"_id": "gpt3_568", "text": "\nThis query returns the number of distinct party names in the party table.", "metadata": {}}
{"_id": "gpt3_569", "text": "\nThis query will return the total number of distinct party names in the party table.", "metadata": {}}
{"_id": "gpt3_570", "text": "\nThis query will count the number of distinct party names in the party table.", "metadata": {}}
{"_id": "gpt3_571", "text": "\nThis query selects the name of the heaviest body builder from the people and body builder tables, ordered by weight in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_572", "text": "\nThis query returns the name of the heaviest body builder from the people table, ordered by weight in descending order.", "metadata": {}}
{"_id": "gpt3_573", "text": "\nThis query selects the name of the heaviest body builder from the people table, ordered by weight in descending order, and limited to one result.", "metadata": {}}
{"_id": "gpt3_574", "text": "\nThis query selects the name of the heaviest body builder from the people and body_builder tables, ordered by weight in descending order and limited to the heaviest body builder.", "metadata": {}}
{"_id": "gpt3_575", "text": "\nThis query returns the name of the heaviest body builder from the people and body_builder tables, ordered by weight in descending order.", "metadata": {}}
{"_id": "gpt3_576", "text": "\nThe above query will select all distinct department_id's from the employees table that have at least four employees with the same manager_id.", "metadata": {}}
{"_id": "gpt3_577", "text": "\nThis query returns a list of distinct department IDs from the employees table where there are at least four employees in each department and each department has a unique manager.", "metadata": {}}
{"_id": "gpt3_578", "text": "\nThis query returns a list of distinct department_ids from the employees table, grouped by department_id and manager_id, where each group has at least four employee_ids.", "metadata": {}}
{"_id": "gpt3_579", "text": "\nThis statement selects the distinct department_id from the employees table and groups them by department_id and manager_id, and returns only those groups that have four or more employee_id entries.", "metadata": {}}
{"_id": "gpt3_580", "text": "\nThis query returns a list of all departments with at least four employees, grouped by department and manager.", "metadata": {}}
{"_id": "gpt3_581", "text": "\nThe above SQL query will return a list of all customer phone numbers from the available policies table.", "metadata": {}}
{"_id": "gpt3_582", "text": "\nThis query will return a list of all phone numbers associated with customers who have purchased policies from a particular insurance company.", "metadata": {}}
{"_id": "gpt3_583", "text": "\nThis query will return a list of customer phone numbers from the available policies table.", "metadata": {}}
{"_id": "gpt3_584", "text": "\nThis query will return a list of all the customer phone numbers associated with the available policies.", "metadata": {}}
{"_id": "gpt3_585", "text": "\nThis statement retrieves the phone numbers from the available policies table.", "metadata": {}}
{"_id": "gpt3_586", "text": "\nThis query retrieves the most frequently used service type description and code from the Ref_Service_Types and Services tables, grouped by service type code and ordered by count in descending order, with the top result being limited to one.", "metadata": {}}
{"_id": "gpt3_587", "text": "\nThis query selects the service type description and code from the Ref_Service_Types table and joins it with the Services table on the Service_Type_Code. It then groups the results by the Service_Type_Code and orders them by the", "metadata": {}}
{"_id": "gpt3_588", "text": "\nThis query selects the Service Type Description and Service Type Code from the Ref_Service_Types table and the Services table, groups them by Service Type Code, orders them by count, and limits the results to the top one. This query will return", "metadata": {}}
{"_id": "gpt3_589", "text": "\nThis query selects the Service_Type_Description and Service_Type_Code from the Ref_Service_Types table, which is joined to the Services table on the Service_Type_Code column. The results are grouped by Service_Type_", "metadata": {}}
{"_id": "gpt3_590", "text": "\nThis query selects the Service Type Description and Service Type Code from the Ref_Service_Types table, joining it with the Services table on the Service Type Code, and then groups the results by Service Type Code and orders them by the count of the", "metadata": {}}
{"_id": "gpt3_591", "text": "\nThis query returns the sum of the number of deaths and the sum of the damage in millions of US dollars caused by storms with a maximum speed greater than the average maximum speed of all storms.", "metadata": {}}
{"_id": "gpt3_592", "text": "\nThis query will return the sum of the number of deaths and the sum of the damage in millions of US dollars from all storms with a maximum speed greater than the average maximum speed of all storms.", "metadata": {}}
{"_id": "gpt3_593", "text": "\nThis query will return the total number of deaths and total amount of damage (in millions of USD) caused by storms with a maximum speed greater than the average maximum speed of all storms.", "metadata": {}}
{"_id": "gpt3_594", "text": "\nThis query will return the sum of number of deaths and sum of damage in millions of US dollars from storms with a maximum speed greater than the average maximum speed of all storms.", "metadata": {}}
{"_id": "gpt3_595", "text": "\nThis query will return the sum of the number of deaths and the sum of the damage in millions of US dollars from storms where the maximum speed is greater than the average maximum speed of all storms.", "metadata": {}}
{"_id": "gpt3_596", "text": "\nThis query will return a list of all cities where a branch opened in 2001 and had a membership amount of more than 100.", "metadata": {}}
{"_id": "gpt3_597", "text": "\nThis query will return all cities from the branch table where the open year is 2001 and the membership amount is greater than 100.", "metadata": {}}
{"_id": "gpt3_598", "text": "\nThis query will return all cities from the branch table where the open year was 2001 and the membership amount was greater than 100.", "metadata": {}}
{"_id": "gpt3_599", "text": "\nThis query will return the city from the branch table where the open year is 2001 and the membership amount is greater than 100.", "metadata": {}}
{"_id": "gpt3_600", "text": "\nThis query will return the city of all branches that opened in 2001 and have more than 100 members.", "metadata": {}}
{"_id": "gpt3_601", "text": "\nThis query will return a list of distinct product names from the products table, sorted in alphabetical order.", "metadata": {}}
{"_id": "gpt3_602", "text": "\nThis query will select all the distinct product names from the products table and order them alphabetically.", "metadata": {}}
{"_id": "gpt3_603", "text": "\nThis query will select all the distinct product names from the products table, and order them alphabetically.", "metadata": {}}
{"_id": "gpt3_604", "text": "\nThis query will select all distinct product names from the products table, and order them alphabetically.", "metadata": {}}
{"_id": "gpt3_605", "text": "\nThis query returns a list of distinct product names from the products table, ordered alphabetically.", "metadata": {}}
{"_id": "gpt3_606", "text": "\nThis query will return a list of all phone numbers from both the customers and suppliers tables.", "metadata": {}}
{"_id": "gpt3_607", "text": "\nThis query will return a list of all phone numbers associated with customers and suppliers.", "metadata": {}}
{"_id": "gpt3_608", "text": "\nThis query will return a list of all the customer and supplier phone numbers from the customers and suppliers tables.", "metadata": {}}
{"_id": "gpt3_609", "text": "\nThis query will return a list of all the phone numbers associated with customers and suppliers.", "metadata": {}}
{"_id": "gpt3_610", "text": "\nThis query will return a list of all unique phone numbers from both the customers and suppliers tables.", "metadata": {}}
{"_id": "gpt3_611", "text": "\nThis query will retrieve the average salary of all employees in each department where the commission percentage is not null.", "metadata": {}}
{"_id": "gpt3_612", "text": "\nThis query calculates the average salary of all employees in each department who receive a commission. The query returns the department_id and the average salary for each department.", "metadata": {}}
{"_id": "gpt3_613", "text": "\nThis query returns the average salary for each department in which employees have a commission percentage.", "metadata": {}}
{"_id": "gpt3_614", "text": "\nThis query returns the average salary of all employees in each department who have a commission percentage that is not null.", "metadata": {}}
{"_id": "gpt3_615", "text": "\nThis query returns the average salary for each department in the employees table where the commission percentage is not null.", "metadata": {}}
{"_id": "gpt3_616", "text": "\nThis statement selects the names of the five oldest people from the People table, ordered from oldest to youngest.", "metadata": {}}
{"_id": "gpt3_617", "text": "\nThis SQL query will select the names of the five oldest people from the People table and order them in descending order by age.", "metadata": {}}
{"_id": "gpt3_618", "text": "\nThis query selects the names of the five oldest people from the People table, ordered by age in descending order.", "metadata": {}}
{"_id": "gpt3_619", "text": "\nThis query selects the Name from the People table and orders the results by Age in descending order, then limits the results to the top five.", "metadata": {}}
{"_id": "gpt3_620", "text": "\nThis SQL query selects the names of the five oldest people in the People table, ordered by age in descending order.", "metadata": {}}
{"_id": "gpt3_621", "text": "\nThis query will select the titles of all movies that have not been rated.", "metadata": {}}
{"_id": "gpt3_622", "text": "\nThis query selects the title of movies from the Movie table which are not present in the Rating table.", "metadata": {}}
{"_id": "gpt3_623", "text": "\nThis query selects the title of all movies that do not have any ratings in the Rating table.", "metadata": {}}
{"_id": "gpt3_624", "text": "\nThis query will select the title of all movies that do not have any ratings.", "metadata": {}}
{"_id": "gpt3_625", "text": "\nThis query selects the title of all movies which are not in the Rating table.", "metadata": {}}
{"_id": "gpt3_626", "text": "\nThis query selects the distinct name, friend, and age from the Person and PersonFriend tables where the age from the Person table is greater than the average age from the Person table.", "metadata": {}}
{"_id": "gpt3_627", "text": "\nThis query will select the distinct name, friend, and age of all people in the Person table who have a friend in the PersonFriend table and who are older than the average age of all people in the Person table.", "metadata": {}}
{"_id": "gpt3_628", "text": "\nThis query selects the distinct names and friends of people from the Person and PersonFriend tables, where the age of the person is greater than the average age of all people in the Person table.", "metadata": {}}
{"_id": "gpt3_629", "text": "\nThis query will select distinct names, friends, and ages from the Person and PersonFriend tables where the age in the Person table is greater than the average age of all persons in the Person table.", "metadata": {}}
{"_id": "gpt3_630", "text": "\nThis query selects the distinct name, friend, and age of people from the Person and PersonFriend tables where the age of the person is greater than the average age of all people.", "metadata": {}}
{"_id": "gpt3_631", "text": "\nThis query will return all the degrees offered by San Jose State University in the year 2000.", "metadata": {}}
{"_id": "gpt3_632", "text": "\nThis query will return all the degrees offered by San Jose State University in the year 2000.", "metadata": {}}
{"_id": "gpt3_633", "text": "\nThis query will return all of the degrees offered by San Jose State University in the year 2000.", "metadata": {}}
{"_id": "gpt3_634", "text": "\nThis query will return all degrees offered by San Jose State University in the year 2000.", "metadata": {}}
{"_id": "gpt3_635", "text": "\nThis query will return a list of all the degrees offered by San Jose State University in the year 2000.", "metadata": {}}
{"_id": "gpt3_636", "text": "\nThis statement selects the total of body_builder records that have a people_id associated with a people record with a Birth_Date in the month of January.", "metadata": {}}
{"_id": "gpt3_637", "text": "\nThis query selects the total from the body_builder table for people whose birth date is in January.", "metadata": {}}
{"_id": "gpt3_638", "text": "\nThis SQL query selects the total from the body_builder table for all people whose birth date is in January.", "metadata": {}}
{"_id": "gpt3_639", "text": "\nThis SQL statement retrieves the total from the body_builder table for all people who have a birth date in the month of January.", "metadata": {}}
{"_id": "gpt3_640", "text": "\nThis query selects the total from the body_builder table for all people whose birth date includes the word \"January\".", "metadata": {}}
{"_id": "gpt3_641", "text": "\nThis query gets the name and location of performances that members have attended.", "metadata": {}}
{"_id": "gpt3_642", "text": "\nThis query selects the Name of a Member and the Location of the Performance they attended, based on their attendance record.", "metadata": {}}
{"_id": "gpt3_643", "text": "\nThis query retrieves the name of members and the location of performances they attended, by joining the member_attendance, member, and performance tables.", "metadata": {}}
{"_id": "gpt3_644", "text": "\nThis query retrieves the name and location of members who attended a performance.", "metadata": {}}
{"_id": "gpt3_645", "text": "\nThis query retrieves the names and locations of all members who attended a performance.", "metadata": {}}
{"_id": "gpt3_646", "text": "\nThe query will return the type of film released in 1995 from the film_market_estimation table.", "metadata": {}}
{"_id": "gpt3_647", "text": "\nThe query will return all types of films from the film_market_estimation table in 1995.", "metadata": {}}
{"_id": "gpt3_648", "text": "\nThe query will return the type of films from the film_market_estimation table for the year 1995.", "metadata": {}}
{"_id": "gpt3_649", "text": "\nThe query will return the type of films released in 1995, such as drama, action, comedy, etc.", "metadata": {}}
{"_id": "gpt3_650", "text": "\nThe query will return the type of films released in 1995 from the film_market_estimation table.", "metadata": {}}
{"_id": "gpt3_651", "text": "\nThis query will select the school name and location from the university table where the affiliation is \"Public\".", "metadata": {}}
{"_id": "gpt3_652", "text": "\nThis query will select the school and location from the university table where the affiliation is 'Public'.", "metadata": {}}
{"_id": "gpt3_653", "text": "\nThis query selects the school and location of all public universities from the university table.", "metadata": {}}
{"_id": "gpt3_654", "text": "\nThis SQL query will select the school and location from the university table where the affiliation is \"Public\".", "metadata": {}}
{"_id": "gpt3_655", "text": "\nThis query will select the school and location from the university table where the affiliation is set to 'Public'.", "metadata": {}}
{"_id": "gpt3_656", "text": "\nThis query will select the employee ID of all employees who have a salary greater than 100,000.", "metadata": {}}
{"_id": "gpt3_657", "text": "\nThis query will return the employee ID of all employees with a salary greater than $100,000.", "metadata": {}}
{"_id": "gpt3_658", "text": "\nThis query will select the employee IDs of all employees who have a salary greater than 100,000.", "metadata": {}}
{"_id": "gpt3_659", "text": "\nThis query will return a list of employee IDs from the Employee table where the salary is greater than 100000.", "metadata": {}}
{"_id": "gpt3_660", "text": "\nThis query returns the employee IDs of all employees who have a salary greater than $100,000.", "metadata": {}}
{"_id": "gpt3_661", "text": "\nThis query returns the names of people who have friends with an age greater than 40 but not friends with an age less than 30.", "metadata": {}}
{"_id": "gpt3_662", "text": "\nThis SQL query selects the names of people from the Person table who are friends with someone over 40 years old, but not with anyone under 30 years old.", "metadata": {}}
{"_id": "gpt3_663", "text": "\nThis query selects the names of people who have friends that are over 40 but do not have friends that are under 30.", "metadata": {}}
{"_id": "gpt3_664", "text": "\nThis query selects the names of people who have a friend over the age of 40, but no friends under the age of 30.", "metadata": {}}
{"_id": "gpt3_665", "text": "\nThis query selects the names from the Person table who have friends with an age greater than 40, but not friends with an age less than 30.", "metadata": {}}
{"_id": "gpt3_666", "text": "\nThis query returns the number of students each advisor is responsible for.", "metadata": {}}
{"_id": "gpt3_667", "text": "\nThis query will return a list of advisors and the number of students they have in their group, with each advisor and their student count listed separately.", "metadata": {}}
{"_id": "gpt3_668", "text": "\nThis query will return a list of advisors and the number of students that are associated with each advisor.", "metadata": {}}
{"_id": "gpt3_669", "text": "\nThis query will return the number of students each advisor has in the STUDENT table.", "metadata": {}}
{"_id": "gpt3_670", "text": "\nThis query will return a list of advisors and the number of students they are advising.", "metadata": {}}
{"_id": "gpt3_671", "text": "\nThis query returns the maximum number of wins for the Boston Red Stockings in the postseason.", "metadata": {}}
{"_id": "gpt3_672", "text": "\nThis statement selects the maximum number of wins from the postseason table for the team 'Boston Red Stockings'.", "metadata": {}}
{"_id": "gpt3_673", "text": "\nThis query finds the maximum number of wins for the Boston Red Stockings in the postseason.", "metadata": {}}
{"_id": "gpt3_674", "text": "\nThis query will return the maximum number of wins achieved by the Boston Red Stockings in the postseason.", "metadata": {}}
{"_id": "gpt3_675", "text": "\nThis query will return the maximum number of wins the Boston Red Stockings have achieved in the postseason.", "metadata": {}}
{"_id": "gpt3_676", "text": "\nThe query will return the description of the Tennis Club, if it exists in the club table.", "metadata": {}}
{"_id": "gpt3_677", "text": "\nThe query will return the description of the Tennis Club.", "metadata": {}}
{"_id": "gpt3_678", "text": "\nThe query will return the description of the Tennis Club.", "metadata": {}}
{"_id": "gpt3_679", "text": "\nThe query will return the description of the Tennis Club from the club table.", "metadata": {}}
{"_id": "gpt3_680", "text": "\nThe query will return the description of the Tennis Club.", "metadata": {}}
{"_id": "gpt3_681", "text": "\nThis statement will return the document type code for the document type \"Paper\" from the table Ref_document_types.", "metadata": {}}
{"_id": "gpt3_682", "text": "\nThis query will return the document_type_code for the document type \"Paper\" from the Ref_document_types table.", "metadata": {}}
{"_id": "gpt3_683", "text": "\nThis query will return the document type code associated with the document type name \"Paper\".", "metadata": {}}
{"_id": "gpt3_684", "text": "\nThis query will return the document type code for the document type \"Paper\" from the Ref_document_types table.", "metadata": {}}
{"_id": "gpt3_685", "text": "\nThis query will return the document type code for \"Paper\" from the Ref_document_types table.", "metadata": {}}
{"_id": "gpt3_686", "text": "\nThis query will select the names of all wrestlers who are not in the elimination table.", "metadata": {}}
{"_id": "gpt3_687", "text": "\nThis query will return the names of all wrestlers who are not in the elimination table.", "metadata": {}}
{"_id": "gpt3_688", "text": "\nThis query will return the names of all wrestlers who are not in the elimination table.", "metadata": {}}
{"_id": "gpt3_689", "text": "\nThis query will select the name of all wrestlers who are not in the elimination table.", "metadata": {}}
{"_id": "gpt3_690", "text": "\nThis query would select the names of all wrestlers who are not in the elimination table.", "metadata": {}}
{"_id": "gpt3_691", "text": "\nThis query will return a list of distinct years from the competition table where the competition type is not \"Tournament\".", "metadata": {}}
{"_id": "gpt3_692", "text": "\nThis query will return a list of all distinct years from the competition table where the competition type is not equal to \"Tournament\".", "metadata": {}}
{"_id": "gpt3_693", "text": "\nThis query will return a list of unique years from the competition table where the competition type is not \"Tournament\".", "metadata": {}}
{"_id": "gpt3_694", "text": "\nThis query will return a list of all the distinct years in which competitions that are not tournaments took place.", "metadata": {}}
{"_id": "gpt3_695", "text": "\nThis query will return a list of all the unique years from the competition table that do not have the competition type of \"Tournament\".", "metadata": {}}
{"_id": "gpt3_696", "text": "\nThis query returns the total number of technicians in the table.", "metadata": {}}
{"_id": "gpt3_697", "text": "\nThis query returns the total number of technicians in the table.", "metadata": {}}
{"_id": "gpt3_698", "text": "\nThis query will return the total number of technicians in the table.", "metadata": {}}
{"_id": "gpt3_699", "text": "\nThis query will return the total number of technicians in a given table.", "metadata": {}}
{"_id": "gpt3_700", "text": "\nThis query returns the total number of technicians in the table.", "metadata": {}}
{"_id": "gpt3_701", "text": "\nThis query will return the countries that have mountains with heights between 5200 and 5600 meters.", "metadata": {}}
{"_id": "gpt3_702", "text": "\nThis query will return the countries of all mountains that have a height greater than 5600 meters and less than 5200 meters.", "metadata": {}}
{"_id": "gpt3_703", "text": "\nThis query will return a list of countries that have mountains with heights between 5200 and 5600 meters.", "metadata": {}}
{"_id": "gpt3_704", "text": "\nThis statement will return a list of countries in which there are mountains with heights greater than 5600 meters and less than 5200 meters.", "metadata": {}}
{"_id": "gpt3_705", "text": "\nThis query returns the countries that have mountains with heights between 5200 and 5600 meters.", "metadata": {}}
{"_id": "gpt3_706", "text": "\nThis query will return the total number of wrestlers in a table.", "metadata": {}}
{"_id": "gpt3_707", "text": "\nThis query will return the number of rows in the wrestler table.", "metadata": {}}
{"_id": "gpt3_708", "text": "\nThis query will return the total number of wrestlers in the table.", "metadata": {}}
{"_id": "gpt3_709", "text": "\nThis query will return the total number of wrestlers in the table.", "metadata": {}}
{"_id": "gpt3_710", "text": "\nThis query will return the total number of rows in the wrestler table.", "metadata": {}}
{"_id": "gpt3_711", "text": "\nThis query will count the total number of students enrolled in the class ACCT-211.", "metadata": {}}
{"_id": "gpt3_712", "text": "\nThis query returns the number of students enrolled in the class ACCT-211.", "metadata": {}}
{"_id": "gpt3_713", "text": "\nThis query returns the total number of students enrolled in the ACCT-211 class.", "metadata": {}}
{"_id": "gpt3_714", "text": "\nThis query will count the number of students enrolled in the course ACCT-211.", "metadata": {}}
{"_id": "gpt3_715", "text": "\nThis query counts the number of enrollments in the class with the course code of ACCT-211.", "metadata": {}}
{"_id": "gpt3_716", "text": "\nThis query will return a list of party names and the count of party events associated with each party.", "metadata": {}}
{"_id": "gpt3_717", "text": "\nThis query will return a list of party names and the number of events associated with each party.", "metadata": {}}
{"_id": "gpt3_718", "text": "\nThis query will return the party name and the count of all the party events associated with each party.", "metadata": {}}
{"_id": "gpt3_719", "text": "\nThis query will return the party name and the count of events associated with each party.", "metadata": {}}
{"_id": "gpt3_720", "text": "\nThis query will return the name of each party and the number of events associated with each party.", "metadata": {}}
{"_id": "gpt3_721", "text": "\nThis query selects the names of shops that have more than one item in stock from the stock and shop tables.", "metadata": {}}
{"_id": "gpt3_722", "text": "\nThis query selects the shop names from the stock and shop tables where the shop has more than one item in stock.", "metadata": {}}
{"_id": "gpt3_723", "text": "\nThis query selects the shop name from the stock and shop tables where the shop ID appears more than once in the stock table.", "metadata": {}}
{"_id": "gpt3_724", "text": "\nThis query selects the shop name from two tables, stock and shop, where the shop ID in the stock table matches the shop ID in the shop table and where the shop has more than one item in the stock table.", "metadata": {}}
{"_id": "gpt3_725", "text": "\nThis query selects the shop names from the stock and shop tables where the shop ID appears more than once in the stock table.", "metadata": {}}
{"_id": "gpt3_726", "text": "\nThis query will select the store names from the Drama_Workshop_Groups table where the status code of the corresponding booking in the Bookings table is \"stop\".", "metadata": {}}
{"_id": "gpt3_727", "text": "\nThis query will select the store name of any bookings with a status code of \"stop\" from the Drama Workshop Groups table.", "metadata": {}}
{"_id": "gpt3_728", "text": "\nThis query selects the names of drama workshop groups from the Bookings and Drama Workshop Groups tables where the status code of the bookings is \"stop\".", "metadata": {}}
{"_id": "gpt3_729", "text": "\nThis query selects the store name from the Drama Workshop Groups table for all bookings with a status code of \"stop\".", "metadata": {}}
{"_id": "gpt3_730", "text": "\nThis query selects the store name from the Drama Workshop Groups table for all bookings with a status code of \"stop\".", "metadata": {}}
{"_id": "gpt3_731", "text": "\nThis query will return the total number of distinct employee IDs (eid) in the Certificate table.", "metadata": {}}
{"_id": "gpt3_732", "text": "\nThis query will return the number of unique employee IDs associated with certificates.", "metadata": {}}
{"_id": "gpt3_733", "text": "\nThis query will return the number of distinct employee IDs in the Certificate table.", "metadata": {}}
{"_id": "gpt3_734", "text": "\nThis query will return the number of distinct employee IDs (eid) in the Certificate table.", "metadata": {}}
{"_id": "gpt3_735", "text": "\nThis query will return the number of distinct employee IDs (eid) in the Certificate table.", "metadata": {}}
{"_id": "gpt3_736", "text": "\nThis query returns all service names from the services table that are not associated with any party in the party_services table.", "metadata": {}}
{"_id": "gpt3_737", "text": "\nThis query returns a list of services from the services table that do not appear in the party_services table.", "metadata": {}}
{"_id": "gpt3_738", "text": "\nThis query returns the names of services that are not associated with any parties.", "metadata": {}}
{"_id": "gpt3_739", "text": "\nThis query will return a list of services from the services table that are not associated with any parties in the party_services table.", "metadata": {}}
{"_id": "gpt3_740", "text": "\nThis query returns the names of services from the services table that are not associated with any party in the party_services table.", "metadata": {}}
{"_id": "gpt3_741", "text": "\nThis query returns the total count of records in the rent_arrears table.", "metadata": {}}
{"_id": "gpt3_742", "text": "\nThis query will return the total number of records in the rent_arrears table.", "metadata": {}}
{"_id": "gpt3_743", "text": "\nThis query will return the total number of records in the rent_arrears table.", "metadata": {}}
{"_id": "gpt3_744", "text": "\nThis query will return the total number of records in the rent_arrears table.", "metadata": {}}
{"_id": "gpt3_745", "text": "\nThis query returns the total number of records in the rent_arrears table.", "metadata": {}}
{"_id": "gpt3_746", "text": "\nThis query will select the characteristic name of the product \"sesame\" with a characteristic type code of \"Grade\" from the products, product_characteristics and characteristics tables.", "metadata": {}}
{"_id": "gpt3_747", "text": "\nThis statement will select the characteristic name from the Products, Product_Characteristics, and Characteristics tables where the product name is \"sesame\" and the characteristic type code is \"Grade\".", "metadata": {}}
{"_id": "gpt3_748", "text": "\nThis statement will select the characteristic name from the products, product_characteristics, and characteristics tables, where the product name is \"sesame\" and the characteristic type code is \"Grade\".", "metadata": {}}
{"_id": "gpt3_749", "text": "\nThis query retrieves the characteristic name of a product called \"sesame\" with a characteristic type code of \"Grade\".", "metadata": {}}
{"_id": "gpt3_750", "text": "\nThis statement will select the characteristic name from the products, product_characteristics, and characteristics tables for the product with the name \"sesame\" and the characteristic type code \"Grade\".", "metadata": {}}
{"_id": "gpt3_751", "text": "\nThis query selects the first name of an employee and the description of a course from the CLASS, employee, and course tables.", "metadata": {}}
{"_id": "gpt3_752", "text": "\nThis query selects the first name of an employee and the description of a course from the CLASS, employee and course tables, based on the professor number and course code.", "metadata": {}}
{"_id": "gpt3_753", "text": "\nThis query selects the first name of an employee and the description of a course from the tables 'Class', 'Employee' and 'Course', based on the professor's number and the course code.", "metadata": {}}
{"_id": "gpt3_754", "text": "\nThis query retrieves the first name of the professor teaching a course and the description of the course from the tables CLASS, employee, and course.", "metadata": {}}
{"_id": "gpt3_755", "text": "\nThis query selects the employee first name and course description from the CLASS, employee and course tables, based on the professor number in the CLASS table matching the employee number in the employee table and the course code in the CLASS table matching the course code in", "metadata": {}}
{"_id": "gpt3_756", "text": "\nThis query selects the engineer id, first name, and last name of the Maintenance Engineer who has the most visits, ordered by the count of visits in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_757", "text": "\nThis query retrieves the engineer ID, first name, and last name of the engineer who has completed the most visits from the Maintenance_Engineers and Engineer_Visits tables, ordered by the number of visits.", "metadata": {}}
{"_id": "gpt3_758", "text": "\nThis statement retrieves the engineer_id, first_name, and last_name of the maintenance engineer who has made the most visits, as determined by a join of the Maintenance_Engineers and Engineer_Visits tables and ordering the results by", "metadata": {}}
{"_id": "gpt3_759", "text": "\nThis query retrieves the engineer with the most visits, along with their first and last name, from the Maintenance_Engineers and Engineer_Visits tables. The results are grouped by engineer_id and ordered by the count of visits, with the", "metadata": {}}
{"_id": "gpt3_760", "text": "\nThis query retrieves the engineer with the most visits from the Maintenance_Engineers and Engineer_Visits tables, sorted by visit count in descending order and limited to one result. It returns the engineer ID, first name, and last name.", "metadata": {}}
{"_id": "gpt3_761", "text": "\nThis query retrieves the name and location of all stations from the station table, ordered by their annual entry/exit and interchanges.", "metadata": {}}
{"_id": "gpt3_762", "text": "\nThis query will return a list of all stations in the station table, sorted by their Annual_entry_exit and Annual_interchanges columns. The returned list will include the station's name and location.", "metadata": {}}
{"_id": "gpt3_763", "text": "\nThis query will return a list of the names and locations of stations, ordered by their annual entry and exit numbers and then by annual interchanges.", "metadata": {}}
{"_id": "gpt3_764", "text": "\nThis query returns a list of station names and locations, ordered by their annual entry/exit numbers and annual interchanges.", "metadata": {}}
{"_id": "gpt3_765", "text": "\nThis query returns a list of all the stations in the station table, ordered by their annual entry/exit and interchanges statistics. The results include the station's name and location.", "metadata": {}}
{"_id": "gpt3_766", "text": "\nThis query will return the minimum, average, and maximum age of all students in the Student table.", "metadata": {}}
{"_id": "gpt3_767", "text": "\nThis query will return the minimum, average, and maximum age of all students in the Student table.", "metadata": {}}
{"_id": "gpt3_768", "text": "\nThis query will select the minimum, average, and maximum age from the Student table.", "metadata": {}}
{"_id": "gpt3_769", "text": "\nThis query returns the minimum, average, and maximum ages of students from the Student table.", "metadata": {}}
{"_id": "gpt3_770", "text": "\nThis query will return the minimum age, average age, and maximum age of all students in the Student table.", "metadata": {}}
{"_id": "gpt3_771", "text": "\nThis query retrieves the names of users who have more followers than Tyler Swift.", "metadata": {}}
{"_id": "gpt3_772", "text": "\nThis query selects the names of users from the user_profiles table who have more followers than Tyler Swift.", "metadata": {}}
{"_id": "gpt3_773", "text": "\nThis query returns the names of users who are followed by more people than Tyler Swift.", "metadata": {}}
{"_id": "gpt3_774", "text": "\nThis query selects the names of users from the user_profiles table who have more followers than Tyler Swift.", "metadata": {}}
{"_id": "gpt3_775", "text": "\nThis query selects the name of the user from the user_profiles table who has more followers than Tyler Swift.", "metadata": {}}
{"_id": "gpt3_776", "text": "\nThis query will count the total number of accounts associated with each statement ID.", "metadata": {}}
{"_id": "gpt3_777", "text": "\nThis query returns the number of accounts associated with each statement ID.", "metadata": {}}
{"_id": "gpt3_778", "text": "\nThis query returns the number of records in the Accounts table for each STATEMENT_ID.", "metadata": {}}
{"_id": "gpt3_779", "text": "\nThis query will return the statement ID and the number of accounts associated with each statement ID.", "metadata": {}}
{"_id": "gpt3_780", "text": "\nThis query returns a count of the number of rows in the Accounts table for each unique STATEMENT_ID.", "metadata": {}}
{"_id": "gpt3_781", "text": "\nThis query selects the date a claim was made and its corresponding claim ID from the Claims and Settlements tables, where the claim has been settled more than twice and the amount claimed is the highest of all claims.", "metadata": {}}
{"_id": "gpt3_782", "text": "\nThis query returns the date a claim was made and the claim ID for all claims that have had more than two settlements, as well as the date a claim was made and the claim ID for the claim with the highest amount claimed.", "metadata": {}}
{"_id": "gpt3_783", "text": "\nThis query selects the date and claim ID of all claims that have had at least two settlements and the date and claim ID of the claim with the highest amount claimed.", "metadata": {}}
{"_id": "gpt3_784", "text": "\nThis query selects the date the claim was made and the claim ID from the Claims table, joined with the Settlements table, for claims that have been settled more than twice, and for the claim with the highest amount claimed.", "metadata": {}}
{"_id": "gpt3_785", "text": "\nThis query will select the Date_Claim_Made and Claim_id from the Claims table for all claims that have more than two settlements associated with them, as well as the Date_Claim_Made and Claim_id from the Claims table for", "metadata": {}}
{"_id": "gpt3_786", "text": "\nThis query will select the first name, last name, and hire date of all employees in the same department as Clara, excluding Clara herself.", "metadata": {}}
{"_id": "gpt3_787", "text": "\nThis query will return the first name, last name, and hire date of all employees in the same department as Clara, excluding Clara herself.", "metadata": {}}
{"_id": "gpt3_788", "text": "\nThis query will select the first name, last name, and hire date of all employees in the same department as Clara, excluding Clara herself.", "metadata": {}}
{"_id": "gpt3_789", "text": "\nThis query will select the first name, last name, and hire date of all employees in the same department as Clara, excluding Clara herself.", "metadata": {}}
{"_id": "gpt3_790", "text": "\nThis statement will select the first name, last name, and hire date of all employees in the same department as Clara, excluding Clara.", "metadata": {}}
{"_id": "gpt3_791", "text": "\nThis query will return the date range for any researcher associated with a project from the Project_Staff table.", "metadata": {}}
{"_id": "gpt3_792", "text": "\nThis query will return the date_from and date_to columns from the Project_Staff table where the role_code is 'researcher'.", "metadata": {}}
{"_id": "gpt3_793", "text": "\nThis query will retrieve the date range for any researcher assigned to a project from the Project_Staff table.", "metadata": {}}
{"_id": "gpt3_794", "text": "\nThis query will return the date range for all researchers associated with a project from the Project_Staff table.", "metadata": {}}
{"_id": "gpt3_795", "text": "\nThis query will return the date ranges for all researchers from the Project_Staff table.", "metadata": {}}
{"_id": "gpt3_796", "text": "\nThis query retrieves the name and open year of the branch with the most memberships registered in 2016, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_797", "text": "\nThis query will select the name and open year of the branch that had the most members registered in 2016, ordered by the count of members registered in that year.", "metadata": {}}
{"_id": "gpt3_798", "text": "\nThis query will select the name and open year of the branch with the most memberships registered in 2016, ordered by the highest count of memberships.", "metadata": {}}
{"_id": "gpt3_799", "text": "\nThis query returns the name and open year of the branch with the most memberships registered in 2016.", "metadata": {}}
{"_id": "gpt3_800", "text": "\nThis query selects the name and open year of the branch with the most memberships in 2016. It does this by joining the membership_register_branch and branch tables, filtering for memberships registered in 2016, grouping by branch, and ordering", "metadata": {}}
{"_id": "gpt3_801", "text": "\nThis query will select the project details from the Projects table for the organization with the most projects.", "metadata": {}}
{"_id": "gpt3_802", "text": "\nThis query will select the project details from the Projects table for the organisation with the most projects.", "metadata": {}}
{"_id": "gpt3_803", "text": "\nThis query will select the project details from the Projects table for the organization with the most projects. It will group the projects by organization ID and order them by the count of projects, then select the organization with the highest count and select the project details", "metadata": {}}
{"_id": "gpt3_804", "text": "\nThis query will select the project details from the Projects table for the organisation with the most projects.", "metadata": {}}
{"_id": "gpt3_805", "text": "\nThis query will select the project details from the Projects table for the organization with the highest number of projects.", "metadata": {}}
{"_id": "gpt3_806", "text": "\nThis query will select the title of the movie that was released in the most recent year from the Movie table.", "metadata": {}}
{"_id": "gpt3_807", "text": "\nThis query will select the title of the movie with the most recent year from the Movie table.", "metadata": {}}
{"_id": "gpt3_808", "text": "\nThis query will select the title of the movie with the most recent year from the Movie table.", "metadata": {}}
{"_id": "gpt3_809", "text": "\nThis query will select the title of the movie that was released in the most recent year from the Movie table.", "metadata": {}}
{"_id": "gpt3_810", "text": "\nThis query will select the title of the movie with the most recent year from the Movie table.", "metadata": {}}
{"_id": "gpt3_811", "text": "\nThis query will return the total number of investors in the INVESTORS table.", "metadata": {}}
{"_id": "gpt3_812", "text": "\nThis query returns the total number of investors in the INVESTORS table.", "metadata": {}}
{"_id": "gpt3_813", "text": "\nThis query returns the total number of investors in the INVESTORS table.", "metadata": {}}
{"_id": "gpt3_814", "text": "\nThis query will return the total number of investors in the INVESTORS table.", "metadata": {}}
{"_id": "gpt3_815", "text": "\nThis query returns the total number of investors in the INVESTORS table.", "metadata": {}}
{"_id": "gpt3_816", "text": "\nThis query returns a list of member names from the 'member' table that are not associated with any party events in the 'party_events' table.", "metadata": {}}
{"_id": "gpt3_817", "text": "\nThis query retrieves all member names from the member table who are not the member in charge of any party events.", "metadata": {}}
{"_id": "gpt3_818", "text": "\nThis query returns a list of member names from the 'member' table that do not appear in the 'party_events' table as the member in charge.", "metadata": {}}
{"_id": "gpt3_819", "text": "\nThis query returns a list of member names from the member table that are not in charge of any party events.", "metadata": {}}
{"_id": "gpt3_820", "text": "\nThis query returns the names of members who are not in charge of any party events.", "metadata": {}}
{"_id": "gpt3_821", "text": "\nThis query will return the number of students in each age group. The results will be a table with two columns. The first column will be the age group and the second column will show the number of students in that age group.", "metadata": {}}
{"_id": "gpt3_822", "text": "\nThis query will return a count of the number of students for each age in the Student table.", "metadata": {}}
{"_id": "gpt3_823", "text": "\nThis query will return a list of the ages of students in the Student table, as well as a count of how many students have each age.", "metadata": {}}
{"_id": "gpt3_824", "text": "\nThis query will return the age of each student and the number of students with that age from the Student table.", "metadata": {}}
{"_id": "gpt3_825", "text": "\nThis query will return the age of each student and the number of students with that age.", "metadata": {}}
{"_id": "gpt3_826", "text": "\nThis query will select the product name, color description, and product description from the products and Ref_colors tables where the product category code is \"Herbs\".", "metadata": {}}
{"_id": "gpt3_827", "text": "\nThis query will select the product name, color description, and product description from the products and Ref_colors tables where the product category code is \"Herbs\".", "metadata": {}}
{"_id": "gpt3_828", "text": "\nThis query selects the product name, color description, and product description from the products and Ref_colors tables where the product category code is 'Herbs'.", "metadata": {}}
{"_id": "gpt3_829", "text": "\nThis query selects the product name, color description, and product description of all products in the \"Herbs\" category from the products and Ref_colors tables.", "metadata": {}}
{"_id": "gpt3_830", "text": "\nThis statement selects the product name, color description, and product description from two tables, Products and Ref_colors, where the product category code is \"Herbs\".", "metadata": {}}
{"_id": "gpt3_831", "text": "\nThis query will select the first name, last name, and address of all employees from the employee table, and order the results by birthdate.", "metadata": {}}
{"_id": "gpt3_832", "text": "\nThis query will select the first name, last name, and address of each employee from the employee table and order the results by birthdate.", "metadata": {}}
{"_id": "gpt3_833", "text": "\nThis query will select the first name, last name and address of all employees from the employee table and order the results by date of birth.", "metadata": {}}
{"_id": "gpt3_834", "text": "\nThis query will select the first name, last name, and address of each employee from the employee table and order the results by date of birth.", "metadata": {}}
{"_id": "gpt3_835", "text": "\nThis query will select the first name, last name, and address of all employees from the employee table, and will order the results by birthdate.", "metadata": {}}
{"_id": "gpt3_836", "text": "\nThis query returns a list of calendar dates and their corresponding day numbers from the Ref_calendar table.", "metadata": {}}
{"_id": "gpt3_837", "text": "\nThis query will return a list of calendar dates and their corresponding day numbers from the Ref_calendar table.", "metadata": {}}
{"_id": "gpt3_838", "text": "\nThis query will return a list of calendar dates and their corresponding day numbers from the Ref_calendar table.", "metadata": {}}
{"_id": "gpt3_839", "text": "\nThis query will return the calendar date and the corresponding day number from the Ref_calendar table.", "metadata": {}}
{"_id": "gpt3_840", "text": "\nThis query will select the calendar date and day number from the reference calendar table.", "metadata": {}}
{"_id": "gpt3_841", "text": "\nThis SQL statement selects the subject name from the Subjects table.", "metadata": {}}
{"_id": "gpt3_842", "text": "\nThis SQL statement is used to select the subject names from the Subjects table.", "metadata": {}}
{"_id": "gpt3_843", "text": "\nThis query will return a list of all subject names from the SUBJECTS table.", "metadata": {}}
{"_id": "gpt3_844", "text": "\nThis query will select the subject name from the SUBJECTS table.", "metadata": {}}
{"_id": "gpt3_845", "text": "\nThis SQL query selects the subject name from the Subjects table.", "metadata": {}}
{"_id": "gpt3_846", "text": "\nThis query will count the number of performances of the song \"Flash\" by joining the performance, band, and songs tables.", "metadata": {}}
{"_id": "gpt3_847", "text": "\nThis query will return the count of all performances by bands that have performed the song \"Flash\".", "metadata": {}}
{"_id": "gpt3_848", "text": "\nThis query counts the number of performances of the song \"Flash\" by joining the performance, band, and songs tables on the bandmate, id and songid columns, respectively.", "metadata": {}}
{"_id": "gpt3_849", "text": "\nThis query returns the number of performances of the song \"Flash\" by any bandmate in the band.", "metadata": {}}
{"_id": "gpt3_850", "text": "\nThis query will return the count of the number of performances of the song \"Flash\" by members of a band.", "metadata": {}}
{"_id": "gpt3_851", "text": "\nThis query will return the average age of all female students in the STUDENT table.", "metadata": {}}
{"_id": "gpt3_852", "text": "\nThis query will find the average age of all female students in the STUDENT table.", "metadata": {}}
{"_id": "gpt3_853", "text": "\nThis query will return the average age of all female students in the STUDENT table.", "metadata": {}}
{"_id": "gpt3_854", "text": "\nThis query will return the average age of all female students from the STUDENT table.", "metadata": {}}
{"_id": "gpt3_855", "text": "\nThis query returns the average age of all female students in the STUDENT table.", "metadata": {}}
{"_id": "gpt3_856", "text": "\nThis query selects the first and last name of the president of the Bootup Baltimore club.", "metadata": {}}
{"_id": "gpt3_857", "text": "\nThis query will select the first and last name of the president of the club \"Bootup Baltimore\".", "metadata": {}}
{"_id": "gpt3_858", "text": "\nThis query selects the first and last name of the President of the club \"Bootup Baltimore\".", "metadata": {}}
{"_id": "gpt3_859", "text": "\nThis statement will select the first and last name of the President of the Bootup Baltimore club.", "metadata": {}}
{"_id": "gpt3_860", "text": "\nThis query selects the first and last names of the President of the Bootup Baltimore club.", "metadata": {}}
{"_id": "gpt3_861", "text": "\nThis query selects the outcome description from the Research Outcomes table for all projects with the project details 'sint'.", "metadata": {}}
{"_id": "gpt3_862", "text": "\nThis query selects the outcome description from the Research_outcomes table that is associated with Projects that have 'sint' as their project details.", "metadata": {}}
{"_id": "gpt3_863", "text": "\nThis query retrieves the outcome description from the Research_outcomes table for projects with the details 'sint'.", "metadata": {}}
{"_id": "gpt3_864", "text": "\nThis query selects the outcome description from the Research_outcomes table, based on the outcome code from the Project_outcomes table and the project details from the Projects table, where the project details is 'sint'.", "metadata": {}}
{"_id": "gpt3_865", "text": "\nThis query selects the outcome description from the Research_outcomes table that is associated with a project with details 'sint' from the Projects table.", "metadata": {}}
{"_id": "gpt3_866", "text": "\nThis SQL statement returns a list of project_id values from the Documents table where there are at least two documents associated with each project_id.", "metadata": {}}
{"_id": "gpt3_867", "text": "\nThis query returns all project_id values from the Documents table that have at least two records associated with them.", "metadata": {}}
{"_id": "gpt3_868", "text": "\nThis query selects the project_id from the Documents table, groups them together, and then filters out any project_id that has less than two documents associated with it.", "metadata": {}}
{"_id": "gpt3_869", "text": "\nThis query returns all project IDs from the Documents table that have more than or equal to two records associated with them.", "metadata": {}}
{"_id": "gpt3_870", "text": "\nThis query returns all project_id's that have more than or equal to two documents associated with them in the Documents table.", "metadata": {}}
{"_id": "gpt3_871", "text": "\nThis query selects the name, age, and theme of the journal committee from the editor and journal tables, and orders the results by the journal theme in ascending order.", "metadata": {}}
{"_id": "gpt3_872", "text": "\nThis query retrieves the Name, age, and Theme of all editors on a journal committee, ordered by Theme in ascending order.", "metadata": {}}
{"_id": "gpt3_873", "text": "\nThis query will retrieve the name, age, and theme of all editors associated with a journal committee, ordered by the journal theme in ascending order.", "metadata": {}}
{"_id": "gpt3_874", "text": "\nThis query retrieves the Name, age, and Theme of editors from the journal_committee and editor tables, ordered by Theme in ascending order.", "metadata": {}}
{"_id": "gpt3_875", "text": "\nThis query retrieves the name, age, and theme of all editors on a journal committee, ordered by theme.", "metadata": {}}
{"_id": "gpt3_876", "text": "\nThis query will return a list of all police forces from the county public safety table where the location is not East.", "metadata": {}}
{"_id": "gpt3_877", "text": "\nThis query will select all unique police forces from the county_public_safety table where the location is not \"East\".", "metadata": {}}
{"_id": "gpt3_878", "text": "\nThis query will return all distinct police forces from the county_public_safety table where the location is not East.", "metadata": {}}
{"_id": "gpt3_879", "text": "\nThis query will return all the distinct police forces from county public safety records where the location is not East.", "metadata": {}}
{"_id": "gpt3_880", "text": "\nThis query will return a list of all the unique police forces from county public safety records that are not located in the East.", "metadata": {}}
{"_id": "gpt3_881", "text": "\nThis query will select the document type code and document type name from the Ref_document_types table.", "metadata": {}}
{"_id": "gpt3_882", "text": "\nThis query retrieves the document type code and name from the Ref_document_types table.", "metadata": {}}
{"_id": "gpt3_883", "text": "\nThis query selects the document type code and name from the reference document types table.", "metadata": {}}
{"_id": "gpt3_884", "text": "\nThis query will return a list of document type codes and their corresponding names from the Ref_document_types table.", "metadata": {}}
{"_id": "gpt3_885", "text": "\nThis query retrieves the code and name for all document types from the Ref_document_types table.", "metadata": {}}
{"_id": "gpt3_886", "text": "\nThis query returns the number of students from NYC who voted in the Spring election for Class Senator.", "metadata": {}}
{"_id": "gpt3_887", "text": "\nThis query will count the number of students from NYC who voted in the Spring election for Class Senator.", "metadata": {}}
{"_id": "gpt3_888", "text": "\nThis query returns the number of students from NYC who voted in the Spring election for class senator.", "metadata": {}}
{"_id": "gpt3_889", "text": "\nThis query counts the number of students in NYC who voted in the Spring election for Class Senator.", "metadata": {}}
{"_id": "gpt3_890", "text": "\nThis query returns the number of students from NYC who voted in the Spring election for Class Senator.", "metadata": {}}
{"_id": "gpt3_891", "text": "\nThis query returns the total number of rows in the ship table.", "metadata": {}}
{"_id": "gpt3_892", "text": "\nThis query returns the total number of records in the ship table.", "metadata": {}}
{"_id": "gpt3_893", "text": "\nThis query counts the total number of records in the ship table.", "metadata": {}}
{"_id": "gpt3_894", "text": "\nThis query returns the total count of records in the ship table.", "metadata": {}}
{"_id": "gpt3_895", "text": "\nThis query will count the total number of rows in the ship table.", "metadata": {}}
{"_id": "gpt3_896", "text": "\nThis query returns the maximum and minimum grade points for all students in NYC enrolled in a course.", "metadata": {}}
{"_id": "gpt3_897", "text": "\nThis query finds the maximum and minimum grade points of students in NYC enrolled in a course.", "metadata": {}}
{"_id": "gpt3_898", "text": "\nThis query finds the maximum and minimum grade points of students enrolled in a course in the city of NYC.", "metadata": {}}
{"_id": "gpt3_899", "text": "\nThis query will return the maximum and minimum grade points earned by students from the city of NYC in the ENROLLED_IN and GRADECONVERSION tables, using the STUDENT table to identify students from NYC.", "metadata": {}}
{"_id": "gpt3_900", "text": "\nThis query returns the maximum and minimum grade points for students enrolled in courses in NYC.", "metadata": {}}
{"_id": "gpt3_901", "text": "\nThis query will return the decor of the room named \"Recluse and Defiance\" from the Rooms table.", "metadata": {}}
{"_id": "gpt3_902", "text": "\nThis query will return the decor of the room named \"Recluse and Defiance\" from the Rooms table.", "metadata": {}}
{"_id": "gpt3_903", "text": "\nThis query will return the decor of the room named \"Recluse and Defiance\" from the Rooms table.", "metadata": {}}
{"_id": "gpt3_904", "text": "\nThis query will return the decor of the room named \"Recluse and Defiance\" from the Rooms table.", "metadata": {}}
{"_id": "gpt3_905", "text": "\nThis query will return the decor of the room named \"Recluse and Defiance\" from the Rooms table.", "metadata": {}}
{"_id": "gpt3_906", "text": "\nThis query will return the role name and role description of the role with the code \"MG\".", "metadata": {}}
{"_id": "gpt3_907", "text": "\nThis query will return the role name and role description from the ROLES table where the role code is \"MG\". The result of this query will be one row containing the role name and role description for the role code \"MG\".", "metadata": {}}
{"_id": "gpt3_908", "text": "\nThis query will return the role name and description for the role with the code \"MG\".", "metadata": {}}
{"_id": "gpt3_909", "text": "\nThis query returns the name and description of the role with the code \"MG\".", "metadata": {}}
{"_id": "gpt3_910", "text": "\nThis query will return the role name and role description for the role code \"MG\".", "metadata": {}}
{"_id": "gpt3_911", "text": "\nThis query selects the Famous_Title and Age columns from the artist table and sorts the results in descending order of Age.", "metadata": {}}
{"_id": "gpt3_912", "text": "\nThis query selects the Famous_Title and Age columns from the artist table and orders them by Age in descending order.", "metadata": {}}
{"_id": "gpt3_913", "text": "\nThis query selects the titles of famous works and the age of the artist who created them, and orders the results by age in descending order.", "metadata": {}}
{"_id": "gpt3_914", "text": "\nThis query will return a list of famous titles and their corresponding ages, sorted from highest to lowest age.", "metadata": {}}
{"_id": "gpt3_915", "text": "\nThis query will select the Famous Title and Age for all artists, and sort them in descending order by Age.", "metadata": {}}
{"_id": "gpt3_916", "text": "\nThis query returns the ID of all stations in San Francisco that have an average number of available bikes greater than 10.", "metadata": {}}
{"_id": "gpt3_917", "text": "\nThis query returns the IDs of all stations in San Francisco that have an average of more than 10 bikes available.", "metadata": {}}
{"_id": "gpt3_918", "text": "\nThis query returns the IDs of all stations in San Francisco that have an average of more than 10 bikes available.", "metadata": {}}
{"_id": "gpt3_919", "text": "\nThis query will return the IDs of all stations in the city of San Francisco that have an average of more than 10 bikes available.", "metadata": {}}
{"_id": "gpt3_920", "text": "\nThis query will return the ID of any station in San Francisco that has an average of more than 10 bikes available.", "metadata": {}}
{"_id": "gpt3_921", "text": "\nThis query selects the department name and department code of the department with the most professors who have a Ph.D. degree, ordered by the number of professors in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_922", "text": "\nThis query selects the department name and code of the department with the most Ph.D. professors, ordered by count descending and limited to a single result.", "metadata": {}}
{"_id": "gpt3_923", "text": "\nThis query retrieves the department name and department code of the department with the highest number of professors with a Ph.D. degree. It does this by joining the professor and department tables on the department code, filtering for professors with a Ph.", "metadata": {}}
{"_id": "gpt3_924", "text": "\nThis query selects the department name and department code of the department with the most Ph.D. professors, ordered by the count of Ph.D. professors in the department.", "metadata": {}}
{"_id": "gpt3_925", "text": "\nThis query returns the department name and department code of the department with the most Ph.D. professors, ordered by the number of Ph.D. professors in each department in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_926", "text": "\nThis query returns a list of order_id values and the number of invoices associated with each order_id.", "metadata": {}}
{"_id": "gpt3_927", "text": "\nThis query will return the order_id and the count of items associated with each order_id from the Invoices table.", "metadata": {}}
{"_id": "gpt3_928", "text": "\nThis query will select the order ID and count the number of items associated with each order ID from the Invoices table.", "metadata": {}}
{"_id": "gpt3_929", "text": "\nThis query will return the order_id and the count of items associated with each order_id from the Invoices table.", "metadata": {}}
{"_id": "gpt3_930", "text": "\nThis query returns a list of order IDs and the number of items in each order.", "metadata": {}}
{"_id": "gpt3_931", "text": "\nThis statement will select the first name, last name, and gender (m or f) from the customers table where the customer is classified as 'good', and the results will be sorted by the last name.", "metadata": {}}
{"_id": "gpt3_932", "text": "\nThis query selects the first name, last name, and gender of customers who are classified as \"good\" customers, and orders the results by last name.", "metadata": {}}
{"_id": "gpt3_933", "text": "\nThis query retrieves the first name, last name, and gender of customers who are classified as good customers, sorted by last name.", "metadata": {}}
{"_id": "gpt3_934", "text": "\nThis query selects the first name, last name and gender of customers who are classified as 'good' customers, and orders the results by last name.", "metadata": {}}
{"_id": "gpt3_935", "text": "\nThis statement retrieves the first name, last name, and gender of customers who are classified as 'good' customers, and orders them by last name.", "metadata": {}}
{"_id": "gpt3_936", "text": "\nThis query will select all cities from the airports table that have more than two airports, and will order them by the number of airports in each city.", "metadata": {}}
{"_id": "gpt3_937", "text": "\nThis query selects the cities from the airports table that have more than two airports and orders them by the number of airports in the city.", "metadata": {}}
{"_id": "gpt3_938", "text": "\nThis query will select the city from the airports table and group the results by city, then return only cities that have more than two airports, ordered by the number of airports in each city.", "metadata": {}}
{"_id": "gpt3_939", "text": "\nThis query returns all cities that have more than two airports, ordered by the number of airports in each city.", "metadata": {}}
{"_id": "gpt3_940", "text": "\nThis SQL statement will select all cities from the airports table that have more than two airports and order them by the number of airports in each city.", "metadata": {}}
{"_id": "gpt3_941", "text": "\nThis query selects the Payment_ID, Date_Payment_Made, and Amount_Payment from the Payments table where the Payment_Method_Code equals 'Visa'.", "metadata": {}}
{"_id": "gpt3_942", "text": "\nThis query will select the Payment_ID, Date_Payment_Made, and Amount_Payment from the Payments table where the Payment_Method_Code is equal to 'Visa'.", "metadata": {}}
{"_id": "gpt3_943", "text": "\nThis query will select the payment ID, date payment was made, and amount of payment from the Payments table where the payment method code is Visa.", "metadata": {}}
{"_id": "gpt3_944", "text": "\nThis query will select the Payment_ID, Date_Payment_Made, and Amount_Payment from the Payments table where the Payment_Method_Code is equal to 'Visa'.", "metadata": {}}
{"_id": "gpt3_945", "text": "\nThis query will select the Payment ID, Date Payment Made, and Amount Payment from the Payments table where the Payment Method Code is 'Visa'.", "metadata": {}}
{"_id": "gpt3_946", "text": "\nThis query returns the count of all records in the Allergy_type table where the value of the allergytype column is equal to \"animal\".", "metadata": {}}
{"_id": "gpt3_947", "text": "\nThis query will return the number of records in the Allergy_type table where the allergytype is \"animal\".", "metadata": {}}
{"_id": "gpt3_948", "text": "\nThis query will count the number of records in the Allergy_type table that have an allergy type of \"animal\".", "metadata": {}}
{"_id": "gpt3_949", "text": "\nThis query will return the total number of allergy types that are classified as \"animal\".", "metadata": {}}
{"_id": "gpt3_950", "text": "\nThis query will return the count of all the records in the Allergy_type table that have an allergytype value of \"animal\".", "metadata": {}}
{"_id": "gpt3_951", "text": "\nThis SQL query selects the room name from the Rooms table and orders the results by the maximum occupancy in descending order, limiting the results to one.", "metadata": {}}
{"_id": "gpt3_952", "text": "\nThis SQL query will select the room name of the room with the highest maximum occupancy from the Rooms table and return the result.", "metadata": {}}
{"_id": "gpt3_953", "text": "\nThis SQL statement selects the room name with the highest maximum occupancy from the Rooms table and returns it as the result.", "metadata": {}}
{"_id": "gpt3_954", "text": "\nThis SQL query selects the room name with the highest maximum occupancy from the Rooms table and returns the result.", "metadata": {}}
{"_id": "gpt3_955", "text": "\nThis SQL query selects the room name with the highest maximum occupancy from the Rooms table and returns only the top result.", "metadata": {}}
{"_id": "gpt3_956", "text": "\nThis query selects the Marketing Region Code with the most Drama Workshop Groups and orders the results by count in descending order, limiting the results to the highest count.", "metadata": {}}
{"_id": "gpt3_957", "text": "\nThis query will return the Marketing_Region_Code of the Drama Workshop Group with the highest count.", "metadata": {}}
{"_id": "gpt3_958", "text": "\nThis query returns the Marketing Region Code with the most Drama Workshop Groups, ordered by count in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_959", "text": "\nThis query returns the Marketing Region Code with the highest number of Drama Workshop Groups.", "metadata": {}}
{"_id": "gpt3_960", "text": "\nThis query will select the Marketing Region Code from the Drama Workshop Groups table and group it by the Marketing Region Code, then order the results by the count of each code in descending order and limit the result to the first row. This will give the", "metadata": {}}
{"_id": "gpt3_961", "text": "\nThis query will select the department name of the department with the most course credits, by joining the course, class, and department tables, grouping by department code, and ordering by the sum of course credits.", "metadata": {}}
{"_id": "gpt3_962", "text": "\nThis query selects the name of the department with the highest sum of course credits, by joining the course, class, and department tables, grouping the results by department code, and ordering the results by the sum of course credits in descending order. The", "metadata": {}}
{"_id": "gpt3_963", "text": "\nThis query retrieves the name of the department with the highest sum of course credits from the course, class, and department tables.", "metadata": {}}
{"_id": "gpt3_964", "text": "\nThis query will select the department name of the department with the most course credits from the course, class, and department tables, and order it by the sum of the course credits in descending order.", "metadata": {}}
{"_id": "gpt3_965", "text": "\nThis query selects the name of the department with the highest sum of course credits from the course, class, and department tables.", "metadata": {}}
{"_id": "gpt3_966", "text": "\nThis query returns the count of distinct Location_Codes of Things with an unsatisfied service_details.", "metadata": {}}
{"_id": "gpt3_967", "text": "\nThis query will return the number of distinct locations where a thing with unsatisfied service details is located.", "metadata": {}}
{"_id": "gpt3_968", "text": "\nThis query returns the count of distinct location codes associated with Things that have a service_details value of 'Unsatisfied'.", "metadata": {}}
{"_id": "gpt3_969", "text": "\nThis query counts the number of distinct locations where things with unsatisfied service details are located.", "metadata": {}}
{"_id": "gpt3_970", "text": "\nThis query will return the number of distinct locations where things with unsatisfied service details are located.", "metadata": {}}
{"_id": "gpt3_971", "text": "\nThis query will select the job title and the difference between the maximum and minimum salaries for jobs with a maximum salary between 12000 and 18000.", "metadata": {}}
{"_id": "gpt3_972", "text": "\nThis query will return the job titles and the salary range for jobs with a maximum salary between 12000 and 18000.", "metadata": {}}
{"_id": "gpt3_973", "text": "\nThis query returns the job title and the difference between the maximum and minimum salaries for jobs with a salary range between 12000 and 18000.", "metadata": {}}
{"_id": "gpt3_974", "text": "\nThis query will return the job title and the difference between the maximum and minimum salaries of all jobs with a maximum salary between 12000 and 18000.", "metadata": {}}
{"_id": "gpt3_975", "text": "\nThis query returns the job titles and the salary range for jobs with a maximum salary between 12000 and 18000.", "metadata": {}}
{"_id": "gpt3_976", "text": "\nThis query counts the total number of records in the papers table.", "metadata": {}}
{"_id": "gpt3_977", "text": "\nThis query returns the total number of records in the papers table.", "metadata": {}}
{"_id": "gpt3_978", "text": "\nThis query will return the total number of records in the papers table.", "metadata": {}}
{"_id": "gpt3_979", "text": "\nThis query will return the total number of rows in the papers table.", "metadata": {}}
{"_id": "gpt3_980", "text": "\nThis query returns the total number of records in the papers table.", "metadata": {}}
{"_id": "gpt3_981", "text": "\nThis query returns the names of all physicians who have prescribed the medication \"Thesisin\".", "metadata": {}}
{"_id": "gpt3_982", "text": "\nThis query will return a list of all distinct names of physicians who prescribe the medication \"Thesisin\".", "metadata": {}}
{"_id": "gpt3_983", "text": "\nThis query will select the distinct names of all physicians who have prescribed the medication \"Thesisin\".", "metadata": {}}
{"_id": "gpt3_984", "text": "\nThis query will select the distinct names of all physicians who have prescribed the medication \"Thesisin\".", "metadata": {}}
{"_id": "gpt3_985", "text": "\nThis query will return the distinct names of all physicians who have prescribed the medication \"Thesisin\".", "metadata": {}}
{"_id": "gpt3_986", "text": "\nThis query returns the names of teams where there are at least two technicians assigned to them.", "metadata": {}}
{"_id": "gpt3_987", "text": "\nThis query returns the names of all teams that have two or more technicians.", "metadata": {}}
{"_id": "gpt3_988", "text": "\nThis query returns a list of teams from the technician table that have at least two members.", "metadata": {}}
{"_id": "gpt3_989", "text": "\nThis query returns the teams from the technician table that have two or more technicians assigned to them.", "metadata": {}}
{"_id": "gpt3_990", "text": "\nThis query returns the teams from the technician table that have two or more technicians assigned to them.", "metadata": {}}
{"_id": "gpt3_991", "text": "\nThis query will select the name and job fields from the Person table and order the results by name in ascending order.", "metadata": {}}
{"_id": "gpt3_992", "text": "\nThis query will select the name and job of all people in the Person table and order them alphabetically by name.", "metadata": {}}
{"_id": "gpt3_993", "text": "\nThis query returns a list of names and associated jobs from the Person table, ordered alphabetically by name.", "metadata": {}}
{"_id": "gpt3_994", "text": "\nThis query selects the name and job of all people from the Person table, and orders the results alphabetically by name.", "metadata": {}}
{"_id": "gpt3_995", "text": "\nThis query returns a list of the names and jobs of all people in the Person table, sorted in alphabetical order by name.", "metadata": {}}
{"_id": "gpt3_996", "text": "\nThis query returns the department_id with the least number of staff assigned to it from the staff_department_assignments table. It does this by grouping the records by department_id and ordering them by the count of the records in", "metadata": {}}
{"_id": "gpt3_997", "text": "\nThis query returns the department_id with the least amount of staff assigned to it, ordered by the number of staff assigned.", "metadata": {}}
{"_id": "gpt3_998", "text": "\nThis query retrieves the department_id from the staff_department_assignments table, groups them by department_id, and orders the results by the count of each department_id. It then returns the department_id with the", "metadata": {}}
{"_id": "gpt3_999", "text": "\nThis query returns the department_id from the staff_department_assignments table with the fewest number of assigned staff members, ordered by count.", "metadata": {}}
{"_id": "gpt3_1000", "text": "\nThis query selects the department_id with the least number of staff assigned to it from the staff_department_assignments table, and orders the results by count(*). The result is limited to one record.", "metadata": {}}
{"_id": "gpt3_1001", "text": "\nThe query will return the maximum support rate, the minimum consider rate, and the minimum oppose rate for the candidate.", "metadata": {}}
{"_id": "gpt3_1002", "text": "\nThe query will return the maximum support rate, the minimum consider rate, and the minimum oppose rate for the candidate.", "metadata": {}}
{"_id": "gpt3_1003", "text": "\nThe query will return the maximum support rate, the minimum consider rate, and the minimum oppose rate from the candidate table.", "metadata": {}}
{"_id": "gpt3_1004", "text": "\nThe query will return the maximum support rate, the minimum consider rate, and the minimum oppose rate for all candidates.", "metadata": {}}
{"_id": "gpt3_1005", "text": "\nThe query will return the maximum support rate, the minimum consider rate, and the minimum oppose rate for the candidate.", "metadata": {}}
{"_id": "gpt3_1006", "text": "\nThe SQL query \"SELECT DISTINCT headquarter FROM manufacturers\" will return a list of all the unique headquarter locations of the manufacturers in the table.", "metadata": {}}
{"_id": "gpt3_1007", "text": "\nThis query will select and return all distinct headquarter locations from the manufacturers table.", "metadata": {}}
{"_id": "gpt3_1008", "text": "\nThis query will return all distinct headquarter locations from the manufacturers table.", "metadata": {}}
{"_id": "gpt3_1009", "text": "\nThis query will return a list of all the unique headquarter locations of manufacturers from a given table.", "metadata": {}}
{"_id": "gpt3_1010", "text": "\nThe SELECT DISTINCT statement is used to return only distinct (different) values in the result set from the specified column of a table. In this example, the query will return a list of all the distinct headquarter locations for all the", "metadata": {}}
{"_id": "gpt3_1011", "text": "\nThis query will select the names of the top 5 cities with the highest percentage of white population and order them in descending order.", "metadata": {}}
{"_id": "gpt3_1012", "text": "\nThis query will select the names of the top five cities with the highest white population, in descending order.", "metadata": {}}
{"_id": "gpt3_1013", "text": "\nThis query will select the names of the top 5 cities with the highest percentage of white residents, in descending order.", "metadata": {}}
{"_id": "gpt3_1014", "text": "\nThis query will select the names of the top 5 cities with the highest percentage of white residents and order them by descending percentage.", "metadata": {}}
{"_id": "gpt3_1015", "text": "\nThis query will return the names of the top 5 cities with the highest population of white people, in descending order.", "metadata": {}}
{"_id": "gpt3_1016", "text": "\nThis query will return the number of distinct currency codes from the Drama Workshop Groups table.", "metadata": {}}
{"_id": "gpt3_1017", "text": "\nThis query will return the count of unique Currency_Code entries in the Drama_Workshop_Groups table.", "metadata": {}}
{"_id": "gpt3_1018", "text": "\nThis query will return the number of distinct currency codes present in the Drama Workshop Groups table.", "metadata": {}}
{"_id": "gpt3_1019", "text": "\nThis query returns the number of distinct currency codes present in the Drama Workshop Groups table.", "metadata": {}}
{"_id": "gpt3_1020", "text": "\nThis query will return the number of distinct currency codes from the Drama Workshop Groups table.", "metadata": {}}
{"_id": "gpt3_1021", "text": "\nThis query will select the name of the patient from both the appointment and patient tables, joining them together on the patient's social security number.", "metadata": {}}
{"_id": "gpt3_1022", "text": "\nThis query will return the name of all patients from the appointment and patient tables, based on the patient's social security number (ssn).", "metadata": {}}
{"_id": "gpt3_1023", "text": "\nThis query will select the name of the patient associated with an appointment from the appointment and patient tables.", "metadata": {}}
{"_id": "gpt3_1024", "text": "\nThis statement will select the name of a patient from the appointment and patient tables, based on the patient's social security number (SSN).", "metadata": {}}
{"_id": "gpt3_1025", "text": "\nThis query selects the name of the patient from the appointment and patient tables, based on the patient's social security number.", "metadata": {}}
{"_id": "gpt3_1026", "text": "\nThis SQL statement is used to calculate the total salary for each department in the employees table, but only for departments that have two or more employees. It returns the department_id and the total salary for each department.", "metadata": {}}
{"_id": "gpt3_1027", "text": "\nThis SQL query will select the department_id and the sum of the salaries for all employees in that department from the employees table, and group the results by department_id. It will only return results for departments with at least two employees.", "metadata": {}}
{"_id": "gpt3_1028", "text": "\nThis SQL query will select the department ID and total salary for each department where there are at least two employees. It will group the results by department ID and sum the salaries of all employees in that department.", "metadata": {}}
{"_id": "gpt3_1029", "text": "\nThis SQL statement summarizes the total salary for each department_id that has at least two employees. It does this by selecting the department_id and summing the salary of all the employees in that department, then grouping the results by department_id", "metadata": {}}
{"_id": "gpt3_1030", "text": "\nThis SQL statement will select the department_id and the sum of the salaries of all employees in each department, where there are at least two employees in the department.", "metadata": {}}
{"_id": "gpt3_1031", "text": "\nThis query returns the yearid with the smallest number of entries in the Hall of Fame table.", "metadata": {}}
{"_id": "gpt3_1032", "text": "\nThis query will return the yearid with the least number of entries in the Hall of Fame table.", "metadata": {}}
{"_id": "gpt3_1033", "text": "\nThis query returns the year with the lowest number of Hall of Fame inductees. It does this by selecting the yearid column from the Hall of Fame table, grouping the results by yearid, ordering the results by count in ascending order, and", "metadata": {}}
{"_id": "gpt3_1034", "text": "\nThis query returns the year with the least number of inductees into the Hall of Fame. It selects the yearid from the Hall of Fame table, groups the results by yearid, orders them by the count of inductees in ascending order,", "metadata": {}}
{"_id": "gpt3_1035", "text": "\nThis query will select the year with the least amount of Hall of Fame inductees and return the yearid associated with that year.", "metadata": {}}
{"_id": "gpt3_1036", "text": "\nThis query returns the total number of records in the claims_processing_stages table.", "metadata": {}}
{"_id": "gpt3_1037", "text": "\nThis query returns the total number of rows in the claims_processing_stages table.", "metadata": {}}
{"_id": "gpt3_1038", "text": "\nThis query will return the total number of records in the claims_processing_stages table.", "metadata": {}}
{"_id": "gpt3_1039", "text": "\nThis query returns the total number of rows in the claims_processing_stages table.", "metadata": {}}
{"_id": "gpt3_1040", "text": "\nThis query will return the total number of records in the claims_processing_stages table.", "metadata": {}}
{"_id": "gpt3_1041", "text": "\nThis query will return the average amount of each type of transaction, grouped by the transaction type code.", "metadata": {}}
{"_id": "gpt3_1042", "text": "\nThis query will return the average amount of each transaction type code from the TRANSACTIONS table.", "metadata": {}}
{"_id": "gpt3_1043", "text": "\nThis query will return the average amount of each type of transaction in the TRANSACTIONS table, grouped by the transaction_type_code.", "metadata": {}}
{"_id": "gpt3_1044", "text": "\nThis query will return the average amount of each transaction type code from the TRANSACTIONS table.", "metadata": {}}
{"_id": "gpt3_1045", "text": "\nThis query returns the average amount of each type of transaction from the TRANSACTIONS table.", "metadata": {}}
{"_id": "gpt3_1046", "text": "\nThis statement will select the departure date and arrival date from the Flight table where the origin is Los Angeles and the destination is Honolulu.", "metadata": {}}
{"_id": "gpt3_1047", "text": "\nThe above SQL query will select the departure date and arrival date from the Flight table for all flights that have an origin of Los Angeles and a destination of Honolulu.", "metadata": {}}
{"_id": "gpt3_1048", "text": "\nThis query selects the departure and arrival dates of flights from Los Angeles to Honolulu.", "metadata": {}}
{"_id": "gpt3_1049", "text": "\nThis query will select the departure date and arrival date from the Flight table where the origin is Los Angeles and the destination is Honolulu.", "metadata": {}}
{"_id": "gpt3_1050", "text": "\nThis statement will select the departure date and arrival date of all flights from Los Angeles to Honolulu.", "metadata": {}}
{"_id": "gpt3_1051", "text": "\nThis SQL query will count the number of classes in each class room and return only those class rooms that have two or more classes.", "metadata": {}}
{"_id": "gpt3_1052", "text": "\nThis query will return the count of the number of classes in each class room that have two or more classes.", "metadata": {}}
{"_id": "gpt3_1053", "text": "\nThis query will count the number of records in the CLASS table for each distinct class_room and return only those class_room values that have a count of two or more.", "metadata": {}}
{"_id": "gpt3_1054", "text": "\nThis SQL query counts the number of entries in the CLASS table for each class_room, and returns the count and class_room if the count is greater than or equal to two.", "metadata": {}}
{"_id": "gpt3_1055", "text": "\nThis SQL query counts the number of rows in the CLASS table for each class_room and returns only those class_rooms that have at least two rows.", "metadata": {}}
{"_id": "gpt3_1056", "text": "\nThis query will return the interaction type between the medicine 'Aripiprazole' and the enzyme 'ALA synthase'.", "metadata": {}}
{"_id": "gpt3_1057", "text": "\nThis query selects the interaction type between the medicine 'Aripiprazole' and the enzyme 'ALA synthase' from the medicine_enzyme_interaction table.", "metadata": {}}
{"_id": "gpt3_1058", "text": "\nThis query will select the type of interaction between the medicine Aripiprazole and the enzyme ALA synthase from the medicine_enzyme_interaction table.", "metadata": {}}
{"_id": "gpt3_1059", "text": "\nThis query returns the interaction type between the medicine Aripiprazole and the enzyme ALA synthase.", "metadata": {}}
{"_id": "gpt3_1060", "text": "\nThis query will select the interaction type between the medicine Aripiprazole and the enzyme ALA synthase from the medicine_enzyme_interaction table.", "metadata": {}}
{"_id": "gpt3_1061", "text": "\nThis query returns the budget type code with the highest count from the Documents_with_expenses table, ordered by count in descending order, and limited to the first result.", "metadata": {}}
{"_id": "gpt3_1062", "text": "\nThis query returns the most common budget type code from the Documents_with_expenses table, ordered by the number of occurrences in descending order.", "metadata": {}}
{"_id": "gpt3_1063", "text": "\nThis query will select the budget type code with the highest count from the Documents_with_expenses table and display it in descending order.", "metadata": {}}
{"_id": "gpt3_1064", "text": "\nThis query retrieves the budget type code with the highest count from the Documents_with_expenses table, ordered by count in descending order.", "metadata": {}}
{"_id": "gpt3_1065", "text": "\nThis query will select the budget type code with the highest count from the Documents_with_expenses table and order it in descending order. The result will be the budget type code with the most occurrences in the table.", "metadata": {}}
{"_id": "gpt3_1066", "text": "\nThis query returns the name of the advisor with the most students assigned to them, ordered by the number of students assigned.", "metadata": {}}
{"_id": "gpt3_1067", "text": "\nThis query will select the advisor with the highest number of students and return the name of that advisor.", "metadata": {}}
{"_id": "gpt3_1068", "text": "\nThis query will return the advisor with the most students, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_1069", "text": "\nThis query will return the advisor with the most students in the Student table, ordered by the number of students they have.", "metadata": {}}
{"_id": "gpt3_1070", "text": "\nThis query will return the advisor with the most students, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_1071", "text": "\nThis query will return the opening date and year of the shop named \"Apple\".", "metadata": {}}
{"_id": "gpt3_1072", "text": "\nThis query will return the open date and the open year of the shop named Apple.", "metadata": {}}
{"_id": "gpt3_1073", "text": "\nThis query will return the open date and open year of the shop named Apple.", "metadata": {}}
{"_id": "gpt3_1074", "text": "\nThis query will return the Open Date and Open Year of the shop named \"Apple\".", "metadata": {}}
{"_id": "gpt3_1075", "text": "\nThis query will return the open date and open year of the shop named \"Apple\".", "metadata": {}}
{"_id": "gpt3_1076", "text": "\nThis query will select the first name of all authors from the authors table, and order the results alphabetically.", "metadata": {}}
{"_id": "gpt3_1077", "text": "\nThis query selects the first name (fname) from the authors table and orders them in alphabetical order.", "metadata": {}}
{"_id": "gpt3_1078", "text": "\nThis query selects the first name (fname) from the authors table and orders the results alphabetically.", "metadata": {}}
{"_id": "gpt3_1079", "text": "\nThe SELECT fname FROM authors ORDER BY fname statement is used to retrieve and sort the first names of authors from a database in alphabetical order.", "metadata": {}}
{"_id": "gpt3_1080", "text": "\nThis query will select the first name (fname) from the authors table and order the results alphabetically by first name.", "metadata": {}}
{"_id": "gpt3_1081", "text": "\nThis SQL query will return a list of document type codes from the documents table that have more than four entries in the table.", "metadata": {}}
{"_id": "gpt3_1082", "text": "\nThis query selects the document type codes from the documents table and groups them by document type code, only showing results that have more than 4 entries.", "metadata": {}}
{"_id": "gpt3_1083", "text": "\nThis query returns all document type codes from the documents table that have more than four entries.", "metadata": {}}
{"_id": "gpt3_1084", "text": "\nThis SQL query returns all document type codes from the documents table where there are more than 4 documents with the same code.", "metadata": {}}
{"_id": "gpt3_1085", "text": "\nThis query selects all document type codes from the documents table where there are more than 4 documents of that type.", "metadata": {}}
{"_id": "gpt3_1086", "text": "\nThis SQL statement is used to join the college and member tables to display the name of the college and the name of the member associated with that college.", "metadata": {}}
{"_id": "gpt3_1087", "text": "\nThis query selects the Name from the college table (T1) and the Name from the member table (T2) where the College_ID in the college table matches the College_ID in the member table.", "metadata": {}}
{"_id": "gpt3_1088", "text": "\nThis SQL query selects the name of the college and the name of the member from two tables, college and member. It joins the two tables by matching the College_ID column in both tables.", "metadata": {}}
{"_id": "gpt3_1089", "text": "\nThis query is used to select the name of the college and the name of the member associated with it from two different tables, college and member. The query uses a join to match the College_ID column from both tables and then selects the Name", "metadata": {}}
{"_id": "gpt3_1090", "text": "\nThis query selects the name of a college and the name of a member associated with the college from two tables: college and member. The college table contains college information and the member table contains information about members associated with the college. The query joins the", "metadata": {}}
{"_id": "gpt3_1091", "text": "\nThis query will return the minimum and maximum number of bathrooms in the Apartments table.", "metadata": {}}
{"_id": "gpt3_1092", "text": "\nThis query will select the minimum and maximum number of bathrooms from the Apartments table.", "metadata": {}}
{"_id": "gpt3_1093", "text": "\nThis query will select the minimum and maximum number of bathrooms from the Apartments table.", "metadata": {}}
{"_id": "gpt3_1094", "text": "\nThis query will return the minimum and maximum number of bathrooms for all apartments in the Apartments table.", "metadata": {}}
{"_id": "gpt3_1095", "text": "\nThis query will return the minimum and maximum number of bathrooms in the Apartments table.", "metadata": {}}
{"_id": "gpt3_1096", "text": "\nThis query selects the first name and last name of an actor from a table and groups them together, then orders them by the count of the actors in descending order, and limits the result to the top one.", "metadata": {}}
{"_id": "gpt3_1097", "text": "\nThis query selects the first name and last name of the actor with the most entries in the table, ordered by the number of entries in descending order and limiting the result to one row.", "metadata": {}}
{"_id": "gpt3_1098", "text": "\nThis query selects the first name and last name of an actor and groups them together in order of the number of occurrences, with the most frequent name appearing first. The result is limited to one record.", "metadata": {}}
{"_id": "gpt3_1099", "text": "\nThis query selects the first and last name of an actor from a group, ordered by the number of occurrences, and limits the result to one.", "metadata": {}}
{"_id": "gpt3_1100", "text": "\nThis query selects the first name and last name from the actor table, groups them together by first name and last name, orders them by the count of each group in descending order, and limits the results to the top one.", "metadata": {}}
{"_id": "gpt3_1101", "text": "\nThis query selects the distinct last names of individuals who are associated with organizations through the organization_contact_individuals table.", "metadata": {}}
{"_id": "gpt3_1102", "text": "\nThis statement will select the distinct last names of individuals in the individuals table who are also listed as contacts in the organization_contact_individuals table.", "metadata": {}}
{"_id": "gpt3_1103", "text": "\nThis query will select all the distinct last names of individuals who are associated with an organization in the organization_contact_individuals table.", "metadata": {}}
{"_id": "gpt3_1104", "text": "\nThis SQL statement will select the distinct last names of individuals from the individuals and organization_contact_individuals tables.", "metadata": {}}
{"_id": "gpt3_1105", "text": "\nThis query selects the distinct last names of individuals from the individuals and organization_contact_individuals tables.", "metadata": {}}
{"_id": "gpt3_1106", "text": "\nThis query selects the customer names from the customers table who have used the payment method code 'Credit Card' and have placed more than two orders.", "metadata": {}}
{"_id": "gpt3_1107", "text": "\nThis query selects the customer name from the customers and customer_orders tables where the payment method code is 'Credit Card' and the customer has placed more than two orders.", "metadata": {}}
{"_id": "gpt3_1108", "text": "\nThis statement will select the customer names of customers who have used the payment method of credit card for more than two orders.", "metadata": {}}
{"_id": "gpt3_1109", "text": "\nThis query selects the customer names of customers who have paid with a credit card and have placed more than two orders.", "metadata": {}}
{"_id": "gpt3_1110", "text": "\nThis query selects the customer names from the customers table who have used the payment method \"Credit Card\" for more than two orders in the customer_orders table.", "metadata": {}}
{"_id": "gpt3_1111", "text": "\nThis query will select the title of the most recent movie from the Movie table.", "metadata": {}}
{"_id": "gpt3_1112", "text": "\nThis query selects the title of the movie with the most recent year from the Movie table.", "metadata": {}}
{"_id": "gpt3_1113", "text": "\nThis query will select the title of the movie with the highest year from the Movie table.", "metadata": {}}
{"_id": "gpt3_1114", "text": "\nThis query will select the title of the movie that was released in the most recent year from the Movie table.", "metadata": {}}
{"_id": "gpt3_1115", "text": "\nThis statement will select the title of the movie released in the most recent year from the Movie table.", "metadata": {}}
{"_id": "gpt3_1116", "text": "\nThis query will return all of the unique transaction types found in the Financial_Transactions table.", "metadata": {}}
{"_id": "gpt3_1117", "text": "\nThe SELECT DISTINCT statement retrieves unique values from a specified column of a table in a database. In this example, it will retrieve all the unique transaction types from the Financial_Transactions table.", "metadata": {}}
{"_id": "gpt3_1118", "text": "\nThe SELECT DISTINCT statement is used to retrieve unique values from the Financial_Transactions table. This statement will return a list of all distinct transaction types in the table.", "metadata": {}}
{"_id": "gpt3_1119", "text": "\nThis query will select all unique transaction types from the Financial_Transactions table.", "metadata": {}}
{"_id": "gpt3_1120", "text": "\nThis query will return a list of all the distinct transaction types from the Financial_Transactions table.", "metadata": {}}
{"_id": "gpt3_1121", "text": "\nThis SQL query selects the id, score, and date from the game table (T1) and joins it with the injury_accident table (T2) based on the game_id. It then groups the results by the id from", "metadata": {}}
{"_id": "gpt3_1122", "text": "\nThis query selects the ID, score, and date from the game table (T1) and joins it with the injury_accident table (T2) on the game_id column. It then groups the results by the ID and only", "metadata": {}}
{"_id": "gpt3_1123", "text": "\nThis query selects the id, score, and date from the game table (T1) and joins it with the injury_accident table (T2) on the game_id. It then groups the query by the id from the game", "metadata": {}}
{"_id": "gpt3_1124", "text": "\nThis SQL statement retrieves the id, score, and date of all games from the game table (T1) that have been associated with at least two injury_accident records in the injury_accident table (T2). The records", "metadata": {}}
{"_id": "gpt3_1125", "text": "\nThis query selects the ID, score, and date of a game from the game table (T1) and joins it with the injury_accident table (T2) on the game ID. It then groups the results by the game ID", "metadata": {}}
{"_id": "gpt3_1126", "text": "\nThis statement will select all products from the products table with a price between 60 and 120.", "metadata": {}}
{"_id": "gpt3_1127", "text": "\nThis statement will select all products from the products table that have a price between 60 and 120.", "metadata": {}}
{"_id": "gpt3_1128", "text": "\nThis SQL statement selects all products from a database table where the price is between 60 and 120.", "metadata": {}}
{"_id": "gpt3_1129", "text": "\nThis statement will select all products from the products table whose price is between 60 and 120.", "metadata": {}}
{"_id": "gpt3_1130", "text": "\nThis statement will select all records from the products table where the price is between 60 and 120.", "metadata": {}}
{"_id": "gpt3_1131", "text": "\nThis query returns all course_id values from the SECTION table for the Fall 2009 semester that are not in the Spring 2010 semester.", "metadata": {}}
{"_id": "gpt3_1132", "text": "\nThis query returns the course_id from the SECTION table for courses offered in Fall 2009 that are not offered in Spring 2010.", "metadata": {}}
{"_id": "gpt3_1133", "text": "\nThis query will return a list of course_ids from the SECTION table that were offered in the Fall of 2009 but not in the Spring of 2010.", "metadata": {}}
{"_id": "gpt3_1134", "text": "\nThis query returns the course IDs from the SECTION table that were offered in the Fall of 2009, but not in the Spring of 2010.", "metadata": {}}
{"_id": "gpt3_1135", "text": "\nThis query will return all course_id values from the SECTION table that were offered during the Fall 2009 semester, but not during the Spring 2010 semester.", "metadata": {}}
{"_id": "gpt3_1136", "text": "\nThe SELECT course_description FROM COURSES WHERE course_name = \"database\" query will return the course description for the course titled \"Database\".", "metadata": {}}
{"_id": "gpt3_1137", "text": "\nThe SELECT course_description FROM COURSES WHERE course_name = \"database\" query will return the description of the course titled \"Database\". This course typically covers topics such as database design, data modeling, Structured Query Language (SQL", "metadata": {}}
{"_id": "gpt3_1138", "text": "\nThe result of this query would be the description of the course titled \"Database\".", "metadata": {}}
{"_id": "gpt3_1139", "text": "\nThe course description for the course titled \"Database\" is: \"This course covers topics such as database design, SQL, and database administration.\"", "metadata": {}}
{"_id": "gpt3_1140", "text": "\nThe SELECT course_description FROM COURSES WHERE course_name = \"database\" query will return the description of the course titled \"Database\". This description may include information such as the course objectives, prerequisites, topics covered, and any", "metadata": {}}
{"_id": "gpt3_1141", "text": "\nThis query will select the first name and last name of the CTO of the club \"Hopkins Student Enterprises\".", "metadata": {}}
{"_id": "gpt3_1142", "text": "\nThis query will select the first and last name of the Chief Technology Officer (CTO) of the Hopkins Student Enterprises club.", "metadata": {}}
{"_id": "gpt3_1143", "text": "\nThis statement will select the first and last name of the Chief Technology Officer (CTO) of the Hopkins Student Enterprises club.", "metadata": {}}
{"_id": "gpt3_1144", "text": "\nThis query selects the first and last name of the Chief Technology Officer (CTO) of the Hopkins Student Enterprises club.", "metadata": {}}
{"_id": "gpt3_1145", "text": "\nThis query will select the first and last name of the Chief Technical Officer (CTO) of the Hopkins Student Enterprises club.", "metadata": {}}
{"_id": "gpt3_1146", "text": "\nThis query will return the total number of entries in the artist table.", "metadata": {}}
{"_id": "gpt3_1147", "text": "\nThis query returns the total number of artists in the table.", "metadata": {}}
{"_id": "gpt3_1148", "text": "\nThis query returns the total number of artists in the table.", "metadata": {}}
{"_id": "gpt3_1149", "text": "\nThis query returns the total number of records in the artist table.", "metadata": {}}
{"_id": "gpt3_1150", "text": "\nThis query counts the number of rows in the artist table.", "metadata": {}}
{"_id": "gpt3_1151", "text": "\nThis query will return the total number of records in the park table where the state is 'NY'.", "metadata": {}}
{"_id": "gpt3_1152", "text": "\nThis query returns the total number of parks located in the state of New York.", "metadata": {}}
{"_id": "gpt3_1153", "text": "\nThis query will return the total number of parks located in the state of New York.", "metadata": {}}
{"_id": "gpt3_1154", "text": "\nThis query will count the number of records in the park table where the state is equal to 'NY'.", "metadata": {}}
{"_id": "gpt3_1155", "text": "\nThis query will count the number of records in the park table where the state is equal to 'NY'.", "metadata": {}}
{"_id": "gpt3_1156", "text": "\nThis SQL statement groups the records in the airports table by city and counts the number of records for each city. It then filters the results to only include cities that have more than one airport. The output of the query will be a list of cities", "metadata": {}}
{"_id": "gpt3_1157", "text": "\nThis SQL statement is used to count the number of airports in each city that has more than one airport. It will return a list of cities and the number of airports in each city that meets this criteria.", "metadata": {}}
{"_id": "gpt3_1158", "text": "\nThis SQL statement will return a list of cities that have more than one airport, along with the total count of airports in each city.", "metadata": {}}
{"_id": "gpt3_1159", "text": "\nThis query will return a list of cities and the number of airports located in each city that have more than one airport.", "metadata": {}}
{"_id": "gpt3_1160", "text": "\nThis SQL query will count the number of airports in each city, and only return results for cities with more than one airport.", "metadata": {}}
{"_id": "gpt3_1161", "text": "\nThe maximum monthly rental for Student Addresses is $3,200 and the minimum monthly rental is $200.", "metadata": {}}
{"_id": "gpt3_1162", "text": "\nThe maximum monthly rental for Student Addresses is $2,500 and the minimum monthly rental is $500.", "metadata": {}}
{"_id": "gpt3_1163", "text": "\nThis query will return the maximum and minimum monthly rental amounts from the Student_Addresses table.", "metadata": {}}
{"_id": "gpt3_1164", "text": "\nThis query will return the maximum and minimum monthly rental amounts from the Student_Addresses table.", "metadata": {}}
{"_id": "gpt3_1165", "text": "\nThis query returns the maximum and minimum monthly rental amounts from the Student_Addresses table.", "metadata": {}}
{"_id": "gpt3_1166", "text": "\nThis query will return a list of Faculty IDs from the Faculty table that are not present in the Faculty_participates_in table.", "metadata": {}}
{"_id": "gpt3_1167", "text": "\nThis query will return all FacID values from the Faculty table that are not present in the Faculty_participates_in table.", "metadata": {}}
{"_id": "gpt3_1168", "text": "\nThis query will return the FacID of faculty members who are not participating in any Faculty_participates_in.", "metadata": {}}
{"_id": "gpt3_1169", "text": "\nThis query returns the FacID of faculty members who do not participate in any Faculty_participates_in entries.", "metadata": {}}
{"_id": "gpt3_1170", "text": "\nThis query will return all FacID entries from the Faculty table that are not present in the Faculty_participates_in table.", "metadata": {}}
{"_id": "gpt3_1171", "text": "\nThis query will select the titles of the songs performed by Marianne from the Performance, Band, and Songs tables.", "metadata": {}}
{"_id": "gpt3_1172", "text": "\nThis query will return the titles of all songs performed by Marianne from the Performance, Band, and Songs tables.", "metadata": {}}
{"_id": "gpt3_1173", "text": "\nThis query will select the title of all songs performed by Marianne.", "metadata": {}}
{"_id": "gpt3_1174", "text": "\nThis query will return the titles of all songs that Marianne has performed.", "metadata": {}}
{"_id": "gpt3_1175", "text": "\nThis query will return the titles of all songs performed by Marianne in a Performance.", "metadata": {}}
{"_id": "gpt3_1176", "text": "\nThis query will select all the titles of songs from the albums \"A Kiss Before You Go: Live in Hamburg\".", "metadata": {}}
{"_id": "gpt3_1177", "text": "\nThis query retrieves the titles of all songs from the album \"A Kiss Before You Go: Live in Hamburg\".", "metadata": {}}
{"_id": "gpt3_1178", "text": "\nThis query will return the titles of all the songs from the album \"A Kiss Before You Go: Live in Hamburg\".", "metadata": {}}
{"_id": "gpt3_1179", "text": "\nThis query will return the titles of all songs from the album \"A Kiss Before You Go: Live in Hamburg\".", "metadata": {}}
{"_id": "gpt3_1180", "text": "\nThis query will return the titles of all songs from the album \"A Kiss Before You Go: Live in Hamburg\".", "metadata": {}}
{"_id": "gpt3_1181", "text": "\nThis query will return the state_province_county from the addresses table for any address that includes the string \"6862 Kaitlyn Knolls\".", "metadata": {}}
{"_id": "gpt3_1182", "text": "\nThis query will return the state/province/county of the address with line 1 number building of 6862 Kaitlyn Knolls.", "metadata": {}}
{"_id": "gpt3_1183", "text": "\nThis query will return the state_province_county from the addresses table where the line_1_number_building column contains the text \"6862 Kaitlyn Knolls\".", "metadata": {}}
{"_id": "gpt3_1184", "text": "\nThis query will return all state_province_county values from the addresses table where the line_1_number_building column contains the string \"6862 Kaitlyn Knolls\".", "metadata": {}}
{"_id": "gpt3_1185", "text": "\nThis query will return the state_province_county from the addresses table where the line_1_number_building column contains the phrase \"6862 Kaitlyn Knolls\".", "metadata": {}}
{"_id": "gpt3_1186", "text": "\nThis query will select all advisors from the STUDENT table who have more than two students assigned to them.", "metadata": {}}
{"_id": "gpt3_1187", "text": "\nThis query will select all advisors from the student table who have more than two students assigned to them.", "metadata": {}}
{"_id": "gpt3_1188", "text": "\nThis query will return all advisors from the STUDENT table who have more than two students assigned to them.", "metadata": {}}
{"_id": "gpt3_1189", "text": "\nThis query returns the names of all advisors who have more than two students assigned to them.", "metadata": {}}
{"_id": "gpt3_1190", "text": "\nThis query will select the advisor from the student table and group the results by the advisor, only displaying results where the advisor has more than 2 students assigned to them.", "metadata": {}}
{"_id": "gpt3_1191", "text": "\nThis query returns a count of the number of invoices for each payment method code.", "metadata": {}}
{"_id": "gpt3_1192", "text": "\nThis query returns the payment method code and the number of invoices associated with each payment method code.", "metadata": {}}
{"_id": "gpt3_1193", "text": "\nThis query returns a count of the number of invoices for each payment method code.", "metadata": {}}
{"_id": "gpt3_1194", "text": "\nThis query returns the number of invoices for each payment method code.", "metadata": {}}
{"_id": "gpt3_1195", "text": "\nThis query will return the payment method code and the number of invoices associated with each payment method code in the INVOICES table.", "metadata": {}}
{"_id": "gpt3_1196", "text": "\nThis SQL statement will select the decor, the average basePrice, and the minimum basePrice from the Rooms table and group them by decor.", "metadata": {}}
{"_id": "gpt3_1197", "text": "\nThis SQL statement will select the decor of each room, calculate the average base price of all rooms with that decor, and find the minimum base price of all rooms with that decor. The results will be grouped by the decor.", "metadata": {}}
{"_id": "gpt3_1198", "text": "\nThis query will select the decor, the average base price, and the minimum base price from the Rooms table, grouped by each decor.", "metadata": {}}
{"_id": "gpt3_1199", "text": "\nThis query will return the average and minimum base price for each decoration type in the Rooms table.", "metadata": {}}
{"_id": "gpt3_1200", "text": "\nThis SQL statement is used to select the decor, the average base price, and the minimum base price from the Rooms table, grouped by the decor.", "metadata": {}}
{"_id": "gpt3_1201", "text": "\nThis query will select the names of people from the \"people\" table who are also listed as perpetrators in the \"perpetrator\" table and are from either China or Japan.", "metadata": {}}
{"_id": "gpt3_1202", "text": "\nThis query will return the names of all people who are perpetrators in either China or Japan.", "metadata": {}}
{"_id": "gpt3_1203", "text": "\nThis statement will select the names from the people table of all people who are perpetrators from either China or Japan.", "metadata": {}}
{"_id": "gpt3_1204", "text": "\nThis query will select the names of people who are perpetrators from either China or Japan.", "metadata": {}}
{"_id": "gpt3_1205", "text": "\nThis query selects the names of people from the people table who are perpetrators from either China or Japan.", "metadata": {}}
{"_id": "gpt3_1206", "text": "\nThis query will select the date that Carole Bernhard became a customer from the Customers table.", "metadata": {}}
{"_id": "gpt3_1207", "text": "\nThis query will return the date that Carole Bernhard became a customer.", "metadata": {}}
{"_id": "gpt3_1208", "text": "\nThis SQL query will select the date a customer with the first name \"Carole\" and the last name \"Bernhard\" became a customer.", "metadata": {}}
{"_id": "gpt3_1209", "text": "\nThis query will return the date that Carole Bernhard became a customer.", "metadata": {}}
{"_id": "gpt3_1210", "text": "\nThis query will return the date that Carole Bernhard became a customer.", "metadata": {}}
{"_id": "gpt3_1211", "text": "\nThis query will select the name and furniture_id of the item with the highest market rate from the furniture table, and return the top result.", "metadata": {}}
{"_id": "gpt3_1212", "text": "\nThis query will return the name and furniture_id of the item with the highest market rate from the furniture table, in descending order.", "metadata": {}}
{"_id": "gpt3_1213", "text": "\nThis query will select the name and furniture ID of the item with the highest market rate from the furniture table, ordered in descending order, and limited to one result.", "metadata": {}}
{"_id": "gpt3_1214", "text": "\nThis query returns the name and furniture_id of the piece of furniture with the highest market rate from the furniture table.", "metadata": {}}
{"_id": "gpt3_1215", "text": "\nThis query returns the name and furniture_id of the item in the furniture table that has the highest market rate, in descending order.", "metadata": {}}
{"_id": "gpt3_1216", "text": "\nThis query selects school name, budgeted amount, and invested amount from the budget and school tables for all years from 2002 and onward.", "metadata": {}}
{"_id": "gpt3_1217", "text": "\nThis query selects the school name, budgeted amount, and invested amount from the budget and school tables for years 2002 and later.", "metadata": {}}
{"_id": "gpt3_1218", "text": "\nThis query selects the school name, budgeted amount, and invested amount from the budget and school tables for all years greater than or equal to 2002.", "metadata": {}}
{"_id": "gpt3_1219", "text": "\nThis query selects the school name, budgeted amount, and invested amount from the budget and school tables for schools with a year greater than or equal to 2002.", "metadata": {}}
{"_id": "gpt3_1220", "text": "\nThis query selects the school name, budgeted amount, and invested amount from the budget and school tables for any year greater than or equal to 2002.", "metadata": {}}
{"_id": "gpt3_1221", "text": "\nThis query selects the name of the host from the party_host, host, and party tables where the number of hosts for the party is greater than 20.", "metadata": {}}
{"_id": "gpt3_1222", "text": "\nThis query selects the name of the host from the party_host, host and party tables where the number of hosts for the party is greater than 20.", "metadata": {}}
{"_id": "gpt3_1223", "text": "\nThis query selects the name of the host from the party_host, host, and party tables where the number of hosts for the party is greater than 20.", "metadata": {}}
{"_id": "gpt3_1224", "text": "\nThis query selects the names of all hosts who have hosted a party with more than 20 hosts.", "metadata": {}}
{"_id": "gpt3_1225", "text": "\nThis query selects the name of the host from the party_host, host, and party tables where the number of hosts for the party is greater than 20.", "metadata": {}}
{"_id": "gpt3_1226", "text": "\nThis query returns the crime rate from all counties in order of the lowest number of police officers to the highest number of police officers.", "metadata": {}}
{"_id": "gpt3_1227", "text": "\nThis query will return a list of crime rates from county public safety records, sorted in ascending order by the number of police officers.", "metadata": {}}
{"_id": "gpt3_1228", "text": "\nThis query will return a list of crime rates from the county_public_safety table sorted in ascending order by the number of police officers.", "metadata": {}}
{"_id": "gpt3_1229", "text": "\nThis query returns a list of crime rates from the county_public_safety table, ordered from lowest to highest number of police officers.", "metadata": {}}
{"_id": "gpt3_1230", "text": "\nThis query will return a list of crime rates from the county_public_safety table, ordered by the number of police officers in ascending order.", "metadata": {}}
{"_id": "gpt3_1231", "text": "\nThis query will select the student's GPA, phone number, and first name from the student table and order the results by the student's GPA in descending order, limiting the results to the top 5 students.", "metadata": {}}
{"_id": "gpt3_1232", "text": "\nThis query selects the GPA, phone number, and first name of the top 5 students with the highest GPA from the student table, and orders them from highest to lowest.", "metadata": {}}
{"_id": "gpt3_1233", "text": "\nThis statement selects the student's GPA, phone number, and first name from the student table and orders them by GPA in descending order, limiting the results to the top 5 students.", "metadata": {}}
{"_id": "gpt3_1234", "text": "\nThis query selects the student's GPA, phone number, and first name from the student table and orders them by GPA in descending order, limiting the results to the top 5.", "metadata": {}}
{"_id": "gpt3_1235", "text": "\nThis query selects the student's GPA, phone number, and first name from the student table, and orders the results by the highest GPA, limiting the results to the top 5.", "metadata": {}}
{"_id": "gpt3_1236", "text": "\nThis statement will select the distinct college name from the college table where the enrollment is greater than the minimum enrollment of colleges in the state of Florida.", "metadata": {}}
{"_id": "gpt3_1237", "text": "\nThis query will select the distinct names of all colleges in the \"college\" table with an enrollment greater than the minimum enrollment of all colleges in the state of Florida.", "metadata": {}}
{"_id": "gpt3_1238", "text": "\nThis statement will select the distinct names of all colleges in the college table with enrollment greater than the minimum enrollment of any college in the state of Florida.", "metadata": {}}
{"_id": "gpt3_1239", "text": "\nThis statement will select the distinct names of all colleges with an enrollment greater than the minimum enrollment of colleges located in Florida.", "metadata": {}}
{"_id": "gpt3_1240", "text": "\nThis query selects all the distinct college names from the college table where the enrollment is greater than the minimum enrollment of any college in the state of Florida.", "metadata": {}}
{"_id": "gpt3_1241", "text": "\nThis query returns the Faculty ID and the number of students that have that faculty member as an advisor.", "metadata": {}}
{"_id": "gpt3_1242", "text": "\nThis query returns the number of students each faculty member has as an advisor.", "metadata": {}}
{"_id": "gpt3_1243", "text": "\nThis query returns the Faculty ID and the count of the number of students each faculty member is advising.", "metadata": {}}
{"_id": "gpt3_1244", "text": "\nThis query returns the number of students that each faculty member has as an advisor.", "metadata": {}}
{"_id": "gpt3_1245", "text": "\nThis query counts the number of students for each faculty member. It does this by joining the Faculty and Student tables together on the Faculty ID and then grouping by Faculty ID and counting the number of students for each faculty member.", "metadata": {}}
{"_id": "gpt3_1246", "text": "\nThis statement retrieves the combined balance of each customer from the checking and savings tables, and orders them by the combined balance.", "metadata": {}}
{"_id": "gpt3_1247", "text": "\nThis query selects the sum of the balance of checking and savings accounts for each customer, ordered by the sum of the balances.", "metadata": {}}
{"_id": "gpt3_1248", "text": "\nThis statement selects the sum of balances from the checking and savings accounts of a customer, ordered by the sum of balances.", "metadata": {}}
{"_id": "gpt3_1249", "text": "\nThis SQL statement selects the sum of the balance of each customer's checking and savings accounts, and orders them by the sum of the balances.", "metadata": {}}
{"_id": "gpt3_1250", "text": "\nThis SQL statement retrieves the combined balance of a customer's checking and savings accounts, ordered by the combined balance.", "metadata": {}}
{"_id": "gpt3_1251", "text": "\nThis query will return a list of product names from the Products table, sorted in ascending order by product price.", "metadata": {}}
{"_id": "gpt3_1252", "text": "\nThis query will select all product names from the Products table and order them by the product price, from lowest to highest.", "metadata": {}}
{"_id": "gpt3_1253", "text": "\nThis statement retrieves the names of all products from the Products table and orders them by their prices, from lowest to highest.", "metadata": {}}
{"_id": "gpt3_1254", "text": "\nThis query will select the product name from the Products table and order the results by product price in ascending order.", "metadata": {}}
{"_id": "gpt3_1255", "text": "\nThis query will select the product name from the Products table and order the results by product price in ascending order.", "metadata": {}}
{"_id": "gpt3_1256", "text": "\nThis query selects the Faculty ID of all faculty members who are advisors to at least two students. It does this by joining the Faculty and Student tables on the Faculty ID column and grouping the results by Faculty ID, then counting the number of students each", "metadata": {}}
{"_id": "gpt3_1257", "text": "\nThis query selects the Faculty IDs of faculty members who have at least two students that they are advising.", "metadata": {}}
{"_id": "gpt3_1258", "text": "\nThis query selects the faculty ID of all faculty members who have at least two students assigned to them as an advisor.", "metadata": {}}
{"_id": "gpt3_1259", "text": "\nThis query selects the Faculty IDs of advisors who have advised two or more students.", "metadata": {}}
{"_id": "gpt3_1260", "text": "\nThis query selects the Faculty ID of any faculty member who has two or more students that they are advising.", "metadata": {}}
{"_id": "gpt3_1261", "text": "\nThis query selects the coupon amount from the Discount_Coupons table for customers that are both 'good' and 'bad'.", "metadata": {}}
{"_id": "gpt3_1262", "text": "\nThis query selects the coupon amount from the Discount_Coupons table for customers who are both 'good' and 'bad' customers.", "metadata": {}}
{"_id": "gpt3_1263", "text": "\nThis query retrieves the coupon amount from Discount Coupons for customers that are both good and bad.", "metadata": {}}
{"_id": "gpt3_1264", "text": "\nThis query selects the coupon amount from the Discount_Coupons table for customers who are both 'good' and 'bad' customers.", "metadata": {}}
{"_id": "gpt3_1265", "text": "\nThis query selects the coupon amount from the Discount Coupons table for customers who are both 'good' and 'bad' customers.", "metadata": {}}
{"_id": "gpt3_1266", "text": "\nThis query returns the ids of all stations in San Francisco that have an average of more than 10 bikes available.", "metadata": {}}
{"_id": "gpt3_1267", "text": "\nThis query finds the station IDs for all stations in San Francisco that have an average of more than 10 bikes available.", "metadata": {}}
{"_id": "gpt3_1268", "text": "\nThis query will return the IDs of all stations in San Francisco that have an average of more than 10 bikes available.", "metadata": {}}
{"_id": "gpt3_1269", "text": "\nThis query returns the ids of stations in San Francisco that have an average of more than 10 bikes available.", "metadata": {}}
{"_id": "gpt3_1270", "text": "\nThis query will return the IDs of all stations in San Francisco that have an average of more than 10 bikes available.", "metadata": {}}
{"_id": "gpt3_1271", "text": "\nThis query selects the customer ID, first name, and last name from the Customers table, and counts the number of accounts associated with each customer from the Accounts table, grouping the results by customer ID.", "metadata": {}}
{"_id": "gpt3_1272", "text": "\nThis query retrieves the customer ID, first name, and last name of customers from the Accounts and Customers tables, and counts the number of accounts associated with each customer.", "metadata": {}}
{"_id": "gpt3_1273", "text": "\nThis query selects the customer ID, first and last name, and the number of accounts associated with each customer from the Accounts and Customers tables. It groups the results by customer ID.", "metadata": {}}
{"_id": "gpt3_1274", "text": "\nThis query selects the customer ID, first name, last name, and the count of Accounts associated with each customer from the Accounts and Customers tables, and groups the results by customer ID.", "metadata": {}}
{"_id": "gpt3_1275", "text": "\nThis query returns a list of customers and the number of accounts they have. It does this by joining the Accounts and Customers tables on the customer_id column, then grouping the results by customer_id and counting the number of accounts for each customer", "metadata": {}}
{"_id": "gpt3_1276", "text": "\nThis query counts the number of amenities each dorm has that has a student capacity of more than 100, and groups the results by dorm ID.", "metadata": {}}
{"_id": "gpt3_1277", "text": "\nThis query counts the number of dorms with a student capacity greater than 100 and groups them by dorm ID.", "metadata": {}}
{"_id": "gpt3_1278", "text": "\nThis query counts the number of amenities each dorm with a student capacity over 100 has and groups them by dorm ID.", "metadata": {}}
{"_id": "gpt3_1279", "text": "\nThis query counts the number of dorms with a student capacity greater than 100, and groups them by dormid.", "metadata": {}}
{"_id": "gpt3_1280", "text": "\nThis query counts the number of amenities for dorms with a student capacity greater than 100 and groups them by dorm ID.", "metadata": {}}
{"_id": "gpt3_1281", "text": "\nThis query will return all cities from the addresses table that have a zip/postcode of 255.", "metadata": {}}
{"_id": "gpt3_1282", "text": "\nThis query would return the city associated with the zip/postcode 255 from the addresses table.", "metadata": {}}
{"_id": "gpt3_1283", "text": "\nThis query will return all cities from the addresses table that have a zip_postcode of 255.", "metadata": {}}
{"_id": "gpt3_1284", "text": "\nThis query will return all cities from the addresses table that have a zip_postcode of 255.", "metadata": {}}
{"_id": "gpt3_1285", "text": "\nThis query will return all cities from the addresses table where the zip_postcode is 255.", "metadata": {}}
{"_id": "gpt3_1286", "text": "\nThe above SQL query will select the first name, last name, and salary of all employees who do not receive a commission.", "metadata": {}}
{"_id": "gpt3_1287", "text": "\nThis query will select the first name, last name, and salary from the employees table where the commission percentage is null.", "metadata": {}}
{"_id": "gpt3_1288", "text": "\nThis query will select the first name, last name and salary of employees who do not receive a commission.", "metadata": {}}
{"_id": "gpt3_1289", "text": "\nThis query selects the first name, last name, and salary of all employees who do not receive a commission.", "metadata": {}}
{"_id": "gpt3_1290", "text": "\nThis query selects the first name, last name, and salary of all employees whose commission percentage is null.", "metadata": {}}
{"_id": "gpt3_1291", "text": "\nThis query will return the average price of all products from each manufacturer, along with the name of the manufacturer.", "metadata": {}}
{"_id": "gpt3_1292", "text": "\nThis query returns the average price of products for each manufacturer, grouped by the manufacturer's name.", "metadata": {}}
{"_id": "gpt3_1293", "text": "\nThis query will return the average price of products from each manufacturer, along with the name of the manufacturer.", "metadata": {}}
{"_id": "gpt3_1294", "text": "\nThis statement will return the average price of all products from each manufacturer, along with the name of the manufacturer.", "metadata": {}}
{"_id": "gpt3_1295", "text": "\nThis statement will return the average price of all products from each manufacturer, grouped by manufacturer name.", "metadata": {}}
{"_id": "gpt3_1296", "text": "\nThis query selects the room name from the Reservations and Rooms tables for any reservation with a firstname containing the string \"ROY\".", "metadata": {}}
{"_id": "gpt3_1297", "text": "\nThis query will select the room name from the Reservations and Rooms tables where the firstname of the reservation is like 'ROY'.", "metadata": {}}
{"_id": "gpt3_1298", "text": "\nThis query will select the room name from the Reservations and Rooms tables for any reservations with a firstname containing 'ROY'.", "metadata": {}}
{"_id": "gpt3_1299", "text": "\nThis query will select the room name from the Reservations and Rooms tables where the firstname of the reservation is like 'ROY'.", "metadata": {}}
{"_id": "gpt3_1300", "text": "\nThis query will select all room names from the Reservations table where the firstname contains 'ROY', joining with the Rooms table to get the room name.", "metadata": {}}
{"_id": "gpt3_1301", "text": "\nThis query will select the name of the track with the highest number of races, as determined by counting the number of races associated with each track.", "metadata": {}}
{"_id": "gpt3_1302", "text": "\nThis query selects the name of the track with the most races, ordered by number of races.", "metadata": {}}
{"_id": "gpt3_1303", "text": "\nThis query selects the name of the track with the most races from the race and track tables, ordered by the number of races.", "metadata": {}}
{"_id": "gpt3_1304", "text": "\nThis query will select the name of the track with the highest number of races, ordered by the count of races for each track.", "metadata": {}}
{"_id": "gpt3_1305", "text": "\nThis query selects the name of the track with the most races from the race and track tables.", "metadata": {}}
{"_id": "gpt3_1306", "text": "\nThis query will return the number of distinct cities in the Person table.", "metadata": {}}
{"_id": "gpt3_1307", "text": "\nThis statement returns the number of distinct cities in the Person table.", "metadata": {}}
{"_id": "gpt3_1308", "text": "\nThis query will count the total number of distinct cities in the Person table.", "metadata": {}}
{"_id": "gpt3_1309", "text": "\nThis query returns the total number of distinct cities in the Person table.", "metadata": {}}
{"_id": "gpt3_1310", "text": "\nThis query will count the total number of distinct cities from the Person table.", "metadata": {}}
{"_id": "gpt3_1311", "text": "\nThis query will select the name and salary of each employee from the Employee table and order the results by salary in ascending order.", "metadata": {}}
{"_id": "gpt3_1312", "text": "\nThe query SELECT name, salary FROM Employee ORDER BY salary will return a list of employee names and their associated salaries, ordered from lowest to highest salary.", "metadata": {}}
{"_id": "gpt3_1313", "text": "\nThis query will select the name and salary of each employee from the Employee table and order them by salary in ascending order.", "metadata": {}}
{"_id": "gpt3_1314", "text": "\nThis query will retrieve the names and salaries of all employees from the Employee table, sorted in ascending order by salary.", "metadata": {}}
{"_id": "gpt3_1315", "text": "\nThis query will select the name and salary of all employees from the Employee table and order the results by salary in ascending order.", "metadata": {}}
{"_id": "gpt3_1316", "text": "\nThis query will select the name, born state, and age of the head of a household from a database and order the results by age.", "metadata": {}}
{"_id": "gpt3_1317", "text": "\nThis query will return the name, born_state, and age of each head, ordered by age from least to greatest.", "metadata": {}}
{"_id": "gpt3_1318", "text": "\nThis query selects the name, born state, and age of the head from a table, and orders the results by age.", "metadata": {}}
{"_id": "gpt3_1319", "text": "\nThis query will return a table of the name, born_state, and age of the head in order from youngest to oldest.", "metadata": {}}
{"_id": "gpt3_1320", "text": "\nThis query will return a list of names, the state they were born in, and their age, ordered by age from youngest to oldest.", "metadata": {}}
{"_id": "gpt3_1321", "text": "\nThis query will select the name of the person who was Alice's friend in the earliest year from the PersonFriend table.", "metadata": {}}
{"_id": "gpt3_1322", "text": "\nThis query will select the names of all of Alice's friends from the PersonFriend table who became friends with Alice in the earliest year.", "metadata": {}}
{"_id": "gpt3_1323", "text": "\nThis query will select the name of a person who is a friend of Alice and who has been a friend since the earliest year in which Alice had a friend.", "metadata": {}}
{"_id": "gpt3_1324", "text": "\nThis query will select the name of the friend of Alice who first became her friend in the earliest year.", "metadata": {}}
{"_id": "gpt3_1325", "text": "\nThis query will return the name of the first friend Alice made in the PersonFriend table.", "metadata": {}}
{"_id": "gpt3_1326", "text": "\nThis query will return the number of products in the products table that have a product_category_code of \"Seeds\".", "metadata": {}}
{"_id": "gpt3_1327", "text": "\nThis query will count the number of products in the products table with a product_category_code of \"Seeds\".", "metadata": {}}
{"_id": "gpt3_1328", "text": "\nThis query returns the total number of products in the products table with a product_category_code of \"Seeds\".", "metadata": {}}
{"_id": "gpt3_1329", "text": "\nThis query will return the count of all products in the products table with a product_category_code of \"Seeds\".", "metadata": {}}
{"_id": "gpt3_1330", "text": "\nThis query will return the total number of products in the products table that have a product_category_code of \"Seeds\".", "metadata": {}}
{"_id": "gpt3_1331", "text": "\nThe SELECT Phone FROM EMPLOYEE statement is used to retrieve the phone numbers of all employees from an employee database.", "metadata": {}}
{"_id": "gpt3_1332", "text": "\nThe SELECT statement with Phone from the EMPLOYEE table will retrieve the phone number for each employee in the table.", "metadata": {}}
{"_id": "gpt3_1333", "text": "\nThe query SELECT Phone FROM EMPLOYEE will return the phone numbers of all employees in the EMPLOYEE table.", "metadata": {}}
{"_id": "gpt3_1334", "text": "\nThe query will return all phone numbers from the EMPLOYEE table.", "metadata": {}}
{"_id": "gpt3_1335", "text": "\nThis query will select the phone number of each employee from the EMPLOYEE table.", "metadata": {}}
{"_id": "gpt3_1336", "text": "\nThis query will return the number of classrooms that Madlock Ray is in.", "metadata": {}}
{"_id": "gpt3_1337", "text": "\nThis query returns the count of students in the same classroom as Madlock Ray.", "metadata": {}}
{"_id": "gpt3_1338", "text": "\nThis query will count the number of records in the list and teachers tables that have a classroom and firstname/lastname combination of \"Madlock Ray\".", "metadata": {}}
{"_id": "gpt3_1339", "text": "\nThis query will count the number of records in the list and teachers tables that match the criteria of having a first name of \"MADLOCK\" and last name of \"RAY\" and a matching classroom.", "metadata": {}}
{"_id": "gpt3_1340", "text": "\nThis query will count the number of records in the list table that match the given firstname and lastname, and also have the same classroom as a teacher in the teachers table.", "metadata": {}}
{"_id": "gpt3_1341", "text": "\nThis query selects the customer_id of the customer who has placed the most orders, by joining the customers and orders tables, grouping by customer_id and ordering the results by count(*), then limiting the result to the top row.", "metadata": {}}
{"_id": "gpt3_1342", "text": "\nThis query selects the customer ID of the customer with the most orders from the customers and orders tables. It groups the customers by customer ID and orders them by the number of orders in descending order, and then limits the result to the first customer in", "metadata": {}}
{"_id": "gpt3_1343", "text": "\nThis query selects the customer ID of the customer who has placed the most orders from the customers and orders tables. It groups the customers by customer ID and orders them in descending order of the number of orders placed, then limits the result to the top", "metadata": {}}
{"_id": "gpt3_1344", "text": "\nThis query selects the customer_id from the customers table (T1) that has the highest number of orders in the orders table (T2). The customer_id is grouped and ordered by the count of the orders, and the top result", "metadata": {}}
{"_id": "gpt3_1345", "text": "\nThis query selects the customer_id of the customer who has placed the most orders from the customers and orders tables, ordered by the count of orders placed in descending order, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_1346", "text": "\nThis query returns the total number of records in the Employees table.", "metadata": {}}
{"_id": "gpt3_1347", "text": "\nThis query returns the total number of employees in the Employees table.", "metadata": {}}
{"_id": "gpt3_1348", "text": "\nThis query returns the number of records in the Employees table.", "metadata": {}}
{"_id": "gpt3_1349", "text": "\nThis query returns the total number of records in the Employees table.", "metadata": {}}
{"_id": "gpt3_1350", "text": "\nThe above SQL query will return a count of the total number of employees in the Employees table.", "metadata": {}}
{"_id": "gpt3_1351", "text": "\nThis query will return the investor with the most investments in the entrepreneur table, ordered by the number of investments in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_1352", "text": "\nThis query will return the Investor with the highest number of entrepreneurs in the entrepreneur table.", "metadata": {}}
{"_id": "gpt3_1353", "text": "\nThis query will return the investor with the most investments in entrepreneurs, ordered by the number of investments they have made.", "metadata": {}}
{"_id": "gpt3_1354", "text": "\nThis query will return the investor with the highest number of entrepreneurs in the entrepreneur table.", "metadata": {}}
{"_id": "gpt3_1355", "text": "\nThis query will return the investor with the most investments in the entrepreneur table, ordered by the number of investments in descending order.", "metadata": {}}
{"_id": "gpt3_1356", "text": "\nThis statement selects the first and last name of students along with the course description from four tables: student, enroll, class, and course. It joins the tables using the student number, class code, and course code.", "metadata": {}}
{"_id": "gpt3_1357", "text": "\nThis statement selects the first name, last name, and course description from the student, enroll, class, and course tables. It joins the tables on the student number, class code, and course code.", "metadata": {}}
{"_id": "gpt3_1358", "text": "\nThis statement retrieves the first and last name of students enrolled in a particular course, along with the course description. It does this by joining the student, enroll, class, and course tables to get the information needed.", "metadata": {}}
{"_id": "gpt3_1359", "text": "\nThis statement will select the first and last name of students, along with the course description from the student, enroll, class, and course tables.", "metadata": {}}
{"_id": "gpt3_1360", "text": "\nThis query retrieves the first and last name of students along with the course description of the classes they are enrolled in.", "metadata": {}}
{"_id": "gpt3_1361", "text": "\nThis query selects the date an order was placed for the order associated with shipment tracking number 3452.", "metadata": {}}
{"_id": "gpt3_1362", "text": "\nThis query selects the date an order was placed from the orders table, based on the shipment tracking number from the shipments table.", "metadata": {}}
{"_id": "gpt3_1363", "text": "\nThis query selects the date an order was placed from the orders table, using the order_id from the shipments table to join the two tables, where the shipment_tracking_number is 3452.", "metadata": {}}
{"_id": "gpt3_1364", "text": "\nThis query selects the date an order was placed from the orders table, using the order id from the shipments table, where the shipment tracking number is 3452.", "metadata": {}}
{"_id": "gpt3_1365", "text": "\nThis query selects the date an order was placed from the orders table, based on the shipment tracking number from the shipments table.", "metadata": {}}
{"_id": "gpt3_1366", "text": "\nThis query will return the total number of airports with \"International\" in their name.", "metadata": {}}
{"_id": "gpt3_1367", "text": "\nThis query returns the number of airports that have \"International\" in their name.", "metadata": {}}
{"_id": "gpt3_1368", "text": "\nThis SQL query will count the number of airports whose name contains the word \"International\".", "metadata": {}}
{"_id": "gpt3_1369", "text": "\nThis query will count the number of airports whose name contains the word \"International\".", "metadata": {}}
{"_id": "gpt3_1370", "text": "\nThis query counts the number of airports with the word 'International' in the name.", "metadata": {}}
{"_id": "gpt3_1371", "text": "\nThis query will select the dorm name from the dorm table where the gender is female.", "metadata": {}}
{"_id": "gpt3_1372", "text": "\nThis query will select all dorm names from the dorm table where the gender is Female.", "metadata": {}}
{"_id": "gpt3_1373", "text": "\nThis statement will select the dorm name from the dorm table where the gender is female.", "metadata": {}}
{"_id": "gpt3_1374", "text": "\nThis query returns all dorm names in the dorm table where the gender is Female.", "metadata": {}}
{"_id": "gpt3_1375", "text": "\nThis query will return all dorm names where the gender is Female.", "metadata": {}}
{"_id": "gpt3_1376", "text": "\nThis query would return the total number of records in the Accounts table.", "metadata": {}}
{"_id": "gpt3_1377", "text": "\nThis query returns the total number of records in the Accounts table.", "metadata": {}}
{"_id": "gpt3_1378", "text": "\nThis query will return the total number of records in the Accounts table.", "metadata": {}}
{"_id": "gpt3_1379", "text": "\nThis query will return the total number of records in the Accounts table.", "metadata": {}}
{"_id": "gpt3_1380", "text": "\nThis query returns the total number of records in the Accounts table.", "metadata": {}}
{"_id": "gpt3_1381", "text": "\nThis query returns the names and trade names of all medicines from the medicine table which do not interact with the enzyme Protoporphyrinogen IX from the enzyme table.", "metadata": {}}
{"_id": "gpt3_1382", "text": "\nThis query returns the names and trade names of all medicines from the medicine table, except for those that have an enzyme interaction with Protoporphyrinogen IX in the medicine_enzyme_interaction and enzyme tables.", "metadata": {}}
{"_id": "gpt3_1383", "text": "\nThis query returns the names and trade names of all medicines except those that interact with the enzyme Protoporphyrinogen IX.", "metadata": {}}
{"_id": "gpt3_1384", "text": "\nThis query returns the name and trade name of all medicines from the medicine table, except for those that have an interaction with the enzyme Protoporphyrinogen IX.", "metadata": {}}
{"_id": "gpt3_1385", "text": "\nThis query returns the names and trade names of all medicines from the medicine table, except for those medicines that have an enzyme interaction with Protoporphyrinogen IX in the medicine_enzyme_interaction and enzyme tables.", "metadata": {}}
{"_id": "gpt3_1386", "text": "\nThis query will return a list of all unique ranks from the Faculty table.", "metadata": {}}
{"_id": "gpt3_1387", "text": "\nThis query will return a list of all distinct ranks from the Faculty table.", "metadata": {}}
{"_id": "gpt3_1388", "text": "\nThis query will return a list of all unique ranks found in the Faculty table.", "metadata": {}}
{"_id": "gpt3_1389", "text": "\nThe query will return a list of all unique ranks present in the Faculty table.", "metadata": {}}
{"_id": "gpt3_1390", "text": "\nThis query will return the distinct ranks of all faculty members in a table.", "metadata": {}}
{"_id": "gpt3_1391", "text": "\nThis query counts the number of friends Dan has.", "metadata": {}}
{"_id": "gpt3_1392", "text": "\nThis query will count the number of friends that Dan has in the PersonFriend table.", "metadata": {}}
{"_id": "gpt3_1393", "text": "\nThis query will return the number of friends that Dan has.", "metadata": {}}
{"_id": "gpt3_1394", "text": "\nThis query counts the number of friends that Dan has.", "metadata": {}}
{"_id": "gpt3_1395", "text": "\nThis query will return the number of friends that Dan has.", "metadata": {}}
{"_id": "gpt3_1396", "text": "\nThe attribute data type for the attribute \"Green\" is VARCHAR.", "metadata": {}}
{"_id": "gpt3_1397", "text": "\nThe attribute data type for the attribute \"Green\" would be VARCHAR(50).", "metadata": {}}
{"_id": "gpt3_1398", "text": "\nThe attribute data type for the attribute \"Green\" is VARCHAR.", "metadata": {}}
{"_id": "gpt3_1399", "text": "\nThe attribute data type for the attribute \"Green\" is VARCHAR(255).", "metadata": {}}
{"_id": "gpt3_1400", "text": "\nThe attribute data type for the attribute \"Green\" is VARCHAR.", "metadata": {}}
{"_id": "gpt3_1401", "text": "\nThis query will return all records from the chip_model table, including all columns and their associated values.", "metadata": {}}
{"_id": "gpt3_1402", "text": "\nThe SELECT * FROM chip_model query will return all of the columns and records from the chip_model table.", "metadata": {}}
{"_id": "gpt3_1403", "text": "\nThis statement is a SQL query that will select all columns and records from the table called \"chip_model\".", "metadata": {}}
{"_id": "gpt3_1404", "text": "\nThis statement is used to retrieve all records from the chip_model table. It will return all columns and all rows in the table.", "metadata": {}}
{"_id": "gpt3_1405", "text": "\nThis statement is a basic SQL query that will select all records from the chip_model table. It will return all columns and rows from the table.", "metadata": {}}
{"_id": "gpt3_1406", "text": "\nThis query selects the team_id and rank of the team with the highest average attendance for home games in 2014. It does this by joining the team and home_game tables, filtering for the year 2014, grouping by team_id, and", "metadata": {}}
{"_id": "gpt3_1407", "text": "\nThis query selects the team ID and rank of the team with the highest average attendance in 2014 from the home_game and team tables. It groups the results by team ID and orders them by descending average attendance, before limiting the result to the top", "metadata": {}}
{"_id": "gpt3_1408", "text": "\nThis query selects the team ID and rank of the team with the highest average attendance at home games in 2014.", "metadata": {}}
{"_id": "gpt3_1409", "text": "\nThis query selects the team_id and rank of the team with the highest average attendance in home games in 2014. The team_id and rank of the team are retrieved from the team table and the average attendance is calculated from the home_game", "metadata": {}}
{"_id": "gpt3_1410", "text": "\nThis query selects the team ID and rank of the team with the highest average attendance in home games during the year 2014.", "metadata": {}}
{"_id": "gpt3_1411", "text": "\nThis query finds the average GPA of all students enrolled in the ACCT-211 class.", "metadata": {}}
{"_id": "gpt3_1412", "text": "\nThis query calculates the average GPA of all students enrolled in the course ACCT-211 by joining the enroll, student, and class tables.", "metadata": {}}
{"_id": "gpt3_1413", "text": "\nThis query finds the average GPA of students who have taken the course 'ACCT-211'.", "metadata": {}}
{"_id": "gpt3_1414", "text": "\nThis query calculates the average GPA of all students enrolled in the class ACCT-211 by joining the enroll, student, and class tables on student number and class code, respectively.", "metadata": {}}
{"_id": "gpt3_1415", "text": "\nThis query calculates the average GPA of all students enrolled in the ACCT-211 course.", "metadata": {}}
{"_id": "gpt3_1416", "text": "\nThis query selects the name of the tourist attraction associated with the photo named \"game1\".", "metadata": {}}
{"_id": "gpt3_1417", "text": "\nThis query will select the name of the tourist attraction associated with the photo \"game1\" from the PHOTOS and TOURIST_ATTRACTIONS tables.", "metadata": {}}
{"_id": "gpt3_1418", "text": "\nThis query selects the name of the tourist attraction associated with the photo \"game1\" from the tables Photos and Tourist Attractions.", "metadata": {}}
{"_id": "gpt3_1419", "text": "\nThis statement will select the name of the tourist attraction associated with the photo named \"game1\".", "metadata": {}}
{"_id": "gpt3_1420", "text": "\nThis query selects the name of the tourist attraction associated with the photo named \"game1\".", "metadata": {}}
{"_id": "gpt3_1421", "text": "\nThis query will select the Market Details from the Street Markets table for all markets that can be reached by either walking or taking a bus from the Tourist Attractions table.", "metadata": {}}
{"_id": "gpt3_1422", "text": "\nThis query selects the Market_Details from the Street_Markets table as T1, joining it with the TOURIST_ATTRACTIONS table as T2, where the Market_ID of T1 matches the Tourist_Attraction", "metadata": {}}
{"_id": "gpt3_1423", "text": "\nThis query selects the market details from the Street Markets table where the corresponding tourist attraction in the Tourist Attractions table can be reached by either walking or taking the bus.", "metadata": {}}
{"_id": "gpt3_1424", "text": "\nThis query retrieves the market details from the Street Markets table for any tourist attractions that can be reached by either walking or taking a bus.", "metadata": {}}
{"_id": "gpt3_1425", "text": "\nThis query selects the market details from the Street Markets table for any tourist attractions that can be reached by either walking or taking a bus.", "metadata": {}}
{"_id": "gpt3_1426", "text": "\nThis query counts the number of students over the age of 18 who are members of the club \"Bootup Baltimore\".", "metadata": {}}
{"_id": "gpt3_1427", "text": "\nThis query counts the number of students who are over the age of 18 and are members of the club \"Bootup Baltimore\".", "metadata": {}}
{"_id": "gpt3_1428", "text": "\nThis query will count the number of students over the age of 18 that are members of the club \"Bootup Baltimore\".", "metadata": {}}
{"_id": "gpt3_1429", "text": "\nThis query will count the number of students over the age of 18 who are members of the club \"Bootup Baltimore\".", "metadata": {}}
{"_id": "gpt3_1430", "text": "\nThis query returns the number of students over the age of 18 who are members of the club \"Bootup Baltimore\".", "metadata": {}}
{"_id": "gpt3_1431", "text": "\nThis query selects the names of all journalists from a database and orders them by the number of years they have been working in the field, from least to most.", "metadata": {}}
{"_id": "gpt3_1432", "text": "\nThis query will select the name of all journalists and order them by the number of years they have been working in the industry, starting with the journalists with the least amount of years working and ending with the journalists with the most years of experience.", "metadata": {}}
{"_id": "gpt3_1433", "text": "\nThis query will select the name of all journalists from the journalist table and order them by the years they have been working in ascending order.", "metadata": {}}
{"_id": "gpt3_1434", "text": "\nThis query will select the names of all journalists from the table and order them according to their years of working, starting with the least experienced.", "metadata": {}}
{"_id": "gpt3_1435", "text": "\nThis query will select the name of each journalist from the journalist table and order them by the years they have been working in ascending order.", "metadata": {}}
{"_id": "gpt3_1436", "text": "\nThis query will select the names of all video games that are of the type \"Collectible card game\".", "metadata": {}}
{"_id": "gpt3_1437", "text": "\nThis query selects the names of video games that are classified as a collectible card game.", "metadata": {}}
{"_id": "gpt3_1438", "text": "\nThis query will select the game name from the Video_games table where the game type is \"Collectible card game\".", "metadata": {}}
{"_id": "gpt3_1439", "text": "\nThis query will return the names of all video games in the Video_games table that are classified as a Collectible card game.", "metadata": {}}
{"_id": "gpt3_1440", "text": "\nThis query will return the names of all video games that are classified as a Collectible Card Game.", "metadata": {}}
{"_id": "gpt3_1441", "text": "\nThis query would return the total number of records in the party_events table.", "metadata": {}}
{"_id": "gpt3_1442", "text": "\nThis query returns the total number of records in the party_events table.", "metadata": {}}
{"_id": "gpt3_1443", "text": "\nThis query returns the total number of rows in the party_events table.", "metadata": {}}
{"_id": "gpt3_1444", "text": "\nThis query counts the total number of rows in the party_events table.", "metadata": {}}
{"_id": "gpt3_1445", "text": "\nThis query returns the total number of records in the party_events table.", "metadata": {}}
{"_id": "gpt3_1446", "text": "\nThis query returns the distinct zip codes from the weather table where the maximum dew point temperature is less than 70 degrees Fahrenheit.", "metadata": {}}
{"_id": "gpt3_1447", "text": "\nThis query returns the distinct zip codes from the weather table where the maximum dew point is less than 70 degrees Fahrenheit.", "metadata": {}}
{"_id": "gpt3_1448", "text": "\nThis query returns a list of zip codes from the weather table that have a maximum dew point below 70 degrees Fahrenheit.", "metadata": {}}
{"_id": "gpt3_1449", "text": "\nThis statement selects all the distinct zip codes from the weather table that have a maximum dew point of less than 70 degrees Fahrenheit.", "metadata": {}}
{"_id": "gpt3_1450", "text": "\nThis statement returns the distinct zip codes from the weather table that have a maximum dew point of less than 70 degrees Fahrenheit.", "metadata": {}}
{"_id": "gpt3_1451", "text": "\nThis query will return all nominees from musicals that have either won a Tony Award or a Cleavant Derricks Award.", "metadata": {}}
{"_id": "gpt3_1452", "text": "\nThis query will return all nominees from musicals that have either won a Tony Award or a Cleavant Derricks Award.", "metadata": {}}
{"_id": "gpt3_1453", "text": "\nThis query will return all nominees from musicals that have either won the Tony Award or the Cleavant Derricks Award.", "metadata": {}}
{"_id": "gpt3_1454", "text": "\nThis query will return all nominees from musicals that have either won a Tony Award or a Cleavant Derricks Award.", "metadata": {}}
{"_id": "gpt3_1455", "text": "\nThis query will return all nominees from musicals who have been nominated for either a Tony Award or a Cleavant Derricks Award.", "metadata": {}}
{"_id": "gpt3_1456", "text": "\nThis query selects the student ID and login name of the student who is enrolled in the most courses, from the Student_Course_Enrolment and Students tables, and orders them by the number of courses enrolled in, with the student enrolled in", "metadata": {}}
{"_id": "gpt3_1457", "text": "\nThis query selects the student ID and login name of the student with the most course enrollments and orders them by the number of enrollments in descending order. The result is limited to the student with the highest number of enrollments.", "metadata": {}}
{"_id": "gpt3_1458", "text": "\nThis query selects the student ID and login name of the student who has enrolled in the most courses from the Student_Course_Enrolment and Students tables, and orders them by the number of courses enrolled in, with the highest at the top", "metadata": {}}
{"_id": "gpt3_1459", "text": "\nThis query retrieves the student ID and login name of the student who is enrolled in the most courses, ordered by the highest number of courses enrolled in.", "metadata": {}}
{"_id": "gpt3_1460", "text": "\nThis query will select the student_id and login_name of the student who has enrolled in the most courses, and order the results by the number of courses enrolled in descending order. The query will then limit the results to the top student.", "metadata": {}}
{"_id": "gpt3_1461", "text": "\nThis query retrieves the Marketing Region Code with the highest count of Drama Workshop Groups, ordered in descending order and limited to the top result.", "metadata": {}}
{"_id": "gpt3_1462", "text": "\nThis query returns the Marketing Region Code with the most Drama Workshop Groups, in descending order.", "metadata": {}}
{"_id": "gpt3_1463", "text": "\nThis query selects the marketing region code with the highest count from the Drama Workshop Groups table and orders them by count in descending order, with the highest count appearing first. The result is limited to the first row, which is the marketing region code with", "metadata": {}}
{"_id": "gpt3_1464", "text": "\nThis query will return the Marketing Region Code with the highest count of Drama Workshop Groups.", "metadata": {}}
{"_id": "gpt3_1465", "text": "\nThis query returns the Marketing Region Code with the highest count from the Drama Workshop Groups table, ordered from highest to lowest.", "metadata": {}}
{"_id": "gpt3_1466", "text": "\nThis query will select the name of each county in order of population, from lowest to highest.", "metadata": {}}
{"_id": "gpt3_1467", "text": "\nThis SQL query selects the county names from the county table and orders them by population in ascending order.", "metadata": {}}
{"_id": "gpt3_1468", "text": "\nThis query will select the county name from the county table and order the results by population in ascending order.", "metadata": {}}
{"_id": "gpt3_1469", "text": "\nThis query will select all county names from the county table and order them by population in ascending order.", "metadata": {}}
{"_id": "gpt3_1470", "text": "\nThis query will select the county name from the county table and order the results in ascending order by population.", "metadata": {}}
{"_id": "gpt3_1471", "text": "\nThis query counts the number of assets associated with each maintenance contract and groups the results by maintenance contract ID.", "metadata": {}}
{"_id": "gpt3_1472", "text": "\nThis query counts the number of assets associated with each maintenance contract and groups the results by maintenance contract.", "metadata": {}}
{"_id": "gpt3_1473", "text": "\nThis query counts the number of assets associated with each maintenance contract and groups the results by maintenance contract ID.", "metadata": {}}
{"_id": "gpt3_1474", "text": "\nThis query counts the number of assets associated with each maintenance contract and groups them by maintenance contract ID.", "metadata": {}}
{"_id": "gpt3_1475", "text": "\nThis query counts the number of assets associated with each maintenance contract and groups the results by maintenance contract ID.", "metadata": {}}
{"_id": "gpt3_1476", "text": "\nThis query will return the name of all dorms that have a TV Lounge but do not have a Study Room.", "metadata": {}}
{"_id": "gpt3_1477", "text": "\nThis query selects the dorm names of dorms that have a TV Lounge but not a Study Room.", "metadata": {}}
{"_id": "gpt3_1478", "text": "\nThis query selects the dorm names of all dorms that have a TV Lounge amenity, but do not have a Study Room amenity.", "metadata": {}}
{"_id": "gpt3_1479", "text": "\nThis query returns the dorm names of all dorms that have a TV Lounge but don't have a Study Room.", "metadata": {}}
{"_id": "gpt3_1480", "text": "\nThis query selects the dorm names of all dorms with a TV Lounge but not a Study Room.", "metadata": {}}
{"_id": "gpt3_1481", "text": "\nThis query will select the first and last name of the Chief Technology Officer (CTO) of the Hopkins Student Enterprises club.", "metadata": {}}
{"_id": "gpt3_1482", "text": "\nThis query will select the first and last name of the CTO of the Hopkins Student Enterprises club.", "metadata": {}}
{"_id": "gpt3_1483", "text": "\nThis query will select the first and last name of the student who is the Chief Technology Officer (CTO) of the Hopkins Student Enterprises club.", "metadata": {}}
{"_id": "gpt3_1484", "text": "\nThis query will select the first and last name of the Chief Technology Officer (CTO) of the Hopkins Student Enterprises club.", "metadata": {}}
{"_id": "gpt3_1485", "text": "\nThis query will select the first and last name of the CTO of the Hopkins Student Enterprises club.", "metadata": {}}
{"_id": "gpt3_1486", "text": "\nThis query selects the name and college location of members from the college and member tables, ordered by name in ascending order.", "metadata": {}}
{"_id": "gpt3_1487", "text": "\nThis query selects the Name and College Location of members from the college and member tables, ordered by Name in ascending order.", "metadata": {}}
{"_id": "gpt3_1488", "text": "\nThis query selects the name of each member and the location of their college from the college and member tables, ordered alphabetically by the member's name.", "metadata": {}}
{"_id": "gpt3_1489", "text": "\nThis query returns a list of members' names and their corresponding college locations, sorted in alphabetical order by the members' names.", "metadata": {}}
{"_id": "gpt3_1490", "text": "\nThis query selects the name and college location of members from the college and member tables, ordered by the member name in ascending order.", "metadata": {}}
{"_id": "gpt3_1491", "text": "\nThis query returns a list of all the distinct countries from the artist table.", "metadata": {}}
{"_id": "gpt3_1492", "text": "\nThis SQL query will return a list of unique countries from the artist table.", "metadata": {}}
{"_id": "gpt3_1493", "text": "\nThis statement will select all distinct countries from the artist table.", "metadata": {}}
{"_id": "gpt3_1494", "text": "\nThis query selects all unique countries from the artist table.", "metadata": {}}
{"_id": "gpt3_1495", "text": "\nThis SQL statement will return a list of all unique countries that appear in the artist table.", "metadata": {}}
{"_id": "gpt3_1496", "text": "\nThis query will count the number of records in the phone table grouped by carrier. The result will be a list of carriers and the number of records associated with each carrier.", "metadata": {}}
{"_id": "gpt3_1497", "text": "\nThis query will return the number of records for each carrier in the phone table.", "metadata": {}}
{"_id": "gpt3_1498", "text": "\nThis SQL query will return a count of the total number of phones for each carrier.", "metadata": {}}
{"_id": "gpt3_1499", "text": "\nThis query counts the number of records for each carrier in the phone table.", "metadata": {}}
{"_id": "gpt3_1500", "text": "\nThis query will return the count of all records in the phone table grouped by carrier.", "metadata": {}}
{"_id": "gpt3_1501", "text": "\nThis query will return the names of the three most recent festivals in descending order by year.", "metadata": {}}
{"_id": "gpt3_1502", "text": "\nThis query will return the names of the three most recent festivals, ordered by year in descending order.", "metadata": {}}
{"_id": "gpt3_1503", "text": "\nThis query will return the names of the last three festivals in order of most recent year, from the table festival_detail.", "metadata": {}}
{"_id": "gpt3_1504", "text": "\nThis query returns the names of the three most recent festivals in descending order according to year.", "metadata": {}}
{"_id": "gpt3_1505", "text": "\nThis query will return the names of the three most recently held festivals in descending order.", "metadata": {}}
{"_id": "gpt3_1506", "text": "\nThis query selects the top 3 artist names from the artist and song tables where the song language is \"bangla\", sorted by the number of songs they have in that language.", "metadata": {}}
{"_id": "gpt3_1507", "text": "\nThis query selects the top 3 artists with the most songs in Bangla language, in descending order, from the artist and song tables. It joins the artist and song tables on the artist_name column and then filters for Bangla language songs.", "metadata": {}}
{"_id": "gpt3_1508", "text": "\nThis query selects the top 3 artists who have the most songs in the language of Bangla, ordered by the number of songs they have in Bangla. The query joins the artist and song tables on the artist_name column, filters out only", "metadata": {}}
{"_id": "gpt3_1509", "text": "\nThis query selects the top three artist names from the artist and song tables where the songs are in Bangla, ordered by the number of songs they have in the language.", "metadata": {}}
{"_id": "gpt3_1510", "text": "\nThis query returns the top three artists whose songs are in the Bangla language. It does so by joining the artist and song tables on the artist name column, filtering the song table for Bangla language songs, grouping the results by artist name,", "metadata": {}}
{"_id": "gpt3_1511", "text": "\nThis query returns the total market value of each main industry in a company. It groups the companies by their main industry and sums the market values of all the companies within each industry.", "metadata": {}}
{"_id": "gpt3_1512", "text": "\nThis query will select the main industry and sum the market value of each industry from the company table. It will group the results by the main industry.", "metadata": {}}
{"_id": "gpt3_1513", "text": "\nThis query summarizes the market value of companies grouped by their main industry. The result will be a table showing the main industry and the total market value of all companies in that industry.", "metadata": {}}
{"_id": "gpt3_1514", "text": "\nThis query selects the main industry and the sum of the market value of each company in that industry from the company table, and groups the results by the main industry.", "metadata": {}}
{"_id": "gpt3_1515", "text": "\nThis query returns the sum of market values for each main industry in the company table.", "metadata": {}}
{"_id": "gpt3_1516", "text": "\nThis query selects the name of each train that does not make a stop in London.", "metadata": {}}
{"_id": "gpt3_1517", "text": "\nThis query will return the names of all trains that do not stop in London.", "metadata": {}}
{"_id": "gpt3_1518", "text": "\nThis query returns the names of all trains that do not have a station in London.", "metadata": {}}
{"_id": "gpt3_1519", "text": "\nThis query will select the names of all trains that do not stop at any station in London.", "metadata": {}}
{"_id": "gpt3_1520", "text": "\nThis query will return the name of all trains that do not stop at any station in London.", "metadata": {}}
{"_id": "gpt3_1521", "text": "\nThe query will return the titles of all famous works by the artist Triumfall.", "metadata": {}}
{"_id": "gpt3_1522", "text": "\nThe query will return the title of any songs by Triumfall that are considered famous.", "metadata": {}}
{"_id": "gpt3_1523", "text": "\nThe query will return the famous title of the artist Triumfall.", "metadata": {}}
{"_id": "gpt3_1524", "text": "\nThe query will return the title of any songs released by the artist Triumfall.", "metadata": {}}
{"_id": "gpt3_1525", "text": "\nThe query will return the famous title of any artist named \"Triumfall\".", "metadata": {}}
{"_id": "gpt3_1526", "text": "\nThis query returns the most frequently used poll source from the candidate table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_1527", "text": "\nThis query returns the poll source with the highest count from the candidate table, ordered in descending order.", "metadata": {}}
{"_id": "gpt3_1528", "text": "\nThis query selects the poll source with the most occurrences from the candidate table, and returns the poll source with the highest count.", "metadata": {}}
{"_id": "gpt3_1529", "text": "\nThis query returns the poll source that is most frequently associated with the candidate, ordered by the number of occurrences.", "metadata": {}}
{"_id": "gpt3_1530", "text": "\nThis query returns the poll source with the highest count from the candidate table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_1531", "text": "\nThis statement will return a list of names from the ARTIST table that do not appear in the ALBUM table.", "metadata": {}}
{"_id": "gpt3_1532", "text": "\nThis statement will select all names from the ARTIST table that are not associated with an ALBUM.", "metadata": {}}
{"_id": "gpt3_1533", "text": "\nThis statement will return all the names from the ARTIST table that are not associated with any ALBUM.", "metadata": {}}
{"_id": "gpt3_1534", "text": "\nThis statement will return a list of all the names of artists in the ARTIST table that do not have any albums in the ALBUM table.", "metadata": {}}
{"_id": "gpt3_1535", "text": "\nThis statement will return the names of all artists who do not have any albums.", "metadata": {}}
{"_id": "gpt3_1536", "text": "\nThis query retrieves the names of instructors who are advisors to students in the Math department and orders them by the student's total credits.", "metadata": {}}
{"_id": "gpt3_1537", "text": "\nThis query will select the names of instructors who are advisors to students in the Math department, ordered by the students' total credits.", "metadata": {}}
{"_id": "gpt3_1538", "text": "\nThis query retrieves the names of instructors who are advisors to students in the Math department, ordered by the students' total credits.", "metadata": {}}
{"_id": "gpt3_1539", "text": "\nThis query selects the names of instructors who are advisors to students in the Math department, and orders them by the student's total credits.", "metadata": {}}
{"_id": "gpt3_1540", "text": "\nThis query retrieves the names of instructors that are advisors to students in the Math department, ordered by the total credits of the student.", "metadata": {}}
{"_id": "gpt3_1541", "text": "\nThis statement will return all lot details from the Lots table that are not associated with any transaction in the transactions_lots table.", "metadata": {}}
{"_id": "gpt3_1542", "text": "\nThis query returns the lot details from the Lots table that do not have any corresponding entries in the transactions_lots table.", "metadata": {}}
{"_id": "gpt3_1543", "text": "\nThis query will select all the lot details from the Lots table that do not have any associated transactions in the transactions_lots table.", "metadata": {}}
{"_id": "gpt3_1544", "text": "\nThis query returns the lot details from the Lots table that are not associated with any transactions in the transactions_lots table.", "metadata": {}}
{"_id": "gpt3_1545", "text": "\nThis query returns all lot details from the Lots table that are not associated with any transactions in the transactions_lots table.", "metadata": {}}
{"_id": "gpt3_1546", "text": "\nThis query selects the date of enrolment and date of completion for Bernie Zieme from the Student_Course_Enrolment and Students tables.", "metadata": {}}
{"_id": "gpt3_1547", "text": "\nThis query selects the date of enrolment and date of completion from the Student_Course_Enrolment table for the student with the family name \"Zieme\" and the personal name \"Bernie\".", "metadata": {}}
{"_id": "gpt3_1548", "text": "\nThis query will return the date of enrolment and date of completion for the student with the family name \"Zieme\" and personal name \"Bernie\".", "metadata": {}}
{"_id": "gpt3_1549", "text": "\nThis query selects the date of enrolment and completion for the student with the family name \"Zieme\" and personal name \"Bernie\" from the Student_Course_Enrolment and Students tables.", "metadata": {}}
{"_id": "gpt3_1550", "text": "\nThis query selects the date of enrolment and date of completion of a student with the family name \"Zieme\" and personal name \"Bernie\" from the Student_Course_Enrolment and Students tables.", "metadata": {}}
{"_id": "gpt3_1551", "text": "\nThis query counts the number of orders for each customer and finds customers who have placed at least two orders. It returns the customer name and the count of orders.", "metadata": {}}
{"_id": "gpt3_1552", "text": "\nThis query counts the number of orders for each customer name having at least two orders.", "metadata": {}}
{"_id": "gpt3_1553", "text": "\nThis query counts the number of orders for each customer who has made two or more orders. It joins the orders and customers tables on the customer_id column, groups the data by customer_id, and counts the number of orders for each customer", "metadata": {}}
{"_id": "gpt3_1554", "text": "\nThis query returns the customer name and the number of orders placed by each customer that has placed two or more orders.", "metadata": {}}
{"_id": "gpt3_1555", "text": "\nThis query counts the number of orders for each customer that has placed at least two orders. The query joins the orders and customers tables on the customer_id column and groups the results by customer_id. The query then counts the number of orders", "metadata": {}}
{"_id": "gpt3_1556", "text": "\nThe average campus fee for California State University campuses in 2005 was $1,921.", "metadata": {}}
{"_id": "gpt3_1557", "text": "\nThe average campus fee for California State Universities in 2005 was $3,717.", "metadata": {}}
{"_id": "gpt3_1558", "text": "\nThe average campus fee for California State University in 2005 was $3,428.", "metadata": {}}
{"_id": "gpt3_1559", "text": "\nThe average campus fee for California State University campuses in 2005 was $1,851.", "metadata": {}}
{"_id": "gpt3_1560", "text": "\nThe average campus fee for California State University in 2005 was $1,926.", "metadata": {}}
{"_id": "gpt3_1561", "text": "\nThis query returns the number of distinct users who have tweeted from the tweets table.", "metadata": {}}
{"_id": "gpt3_1562", "text": "\nThis query counts the number of unique user IDs (UIDs) in the tweets table.", "metadata": {}}
{"_id": "gpt3_1563", "text": "\nThis query will return the total number of unique user IDs from the tweets table.", "metadata": {}}
{"_id": "gpt3_1564", "text": "\nThis query will return the total number of unique users in the tweets table.", "metadata": {}}
{"_id": "gpt3_1565", "text": "\nThis query will count the number of distinct UIDs in the tweets table.", "metadata": {}}
{"_id": "gpt3_1566", "text": "\nThis query will select the asset model from the Assets table for all assets whose asset ID does not appear in the Fault Log table.", "metadata": {}}
{"_id": "gpt3_1567", "text": "\nThis query will return all asset models from the Assets table that do not have an associated asset_id in the Fault_Log table.", "metadata": {}}
{"_id": "gpt3_1568", "text": "\nThis query will select the asset model from the Assets table for all assets that are not present in the Fault_Log table.", "metadata": {}}
{"_id": "gpt3_1569", "text": "\nThis query will select all asset models from the Assets table that are not associated with any asset_id in the Fault_Log table.", "metadata": {}}
{"_id": "gpt3_1570", "text": "\nThis query will select all asset models from the Assets table where the asset_id does not appear in the Fault_Log table.", "metadata": {}}
{"_id": "gpt3_1571", "text": "\nThis query will return the sum of the budgets of the Marketing and Finance departments.", "metadata": {}}
{"_id": "gpt3_1572", "text": "\nThis query will return the total budget for the Marketing and Finance departments combined.", "metadata": {}}
{"_id": "gpt3_1573", "text": "\nThis query will return the sum of the budgets for the departments named 'Marketing' and 'Finance'.", "metadata": {}}
{"_id": "gpt3_1574", "text": "\nThis query will return the sum of the budgets of the Marketing and Finance departments.", "metadata": {}}
{"_id": "gpt3_1575", "text": "\nThis query will return the sum of the budgets for the Marketing and Finance departments.", "metadata": {}}
{"_id": "gpt3_1576", "text": "\nThis query will select the Advisor from the STUDENT table and group the results by Advisor, only displaying those Advisors who have more than two students.", "metadata": {}}
{"_id": "gpt3_1577", "text": "\nThis query selects all advisors from the STUDENT table who have more than two students assigned to them.", "metadata": {}}
{"_id": "gpt3_1578", "text": "\nThis query will select the advisor from the student table and group them by the advisor, but only if the advisor has more than two students associated with them.", "metadata": {}}
{"_id": "gpt3_1579", "text": "\nThis query will select the advisor from the student table and group them together based on the advisor name, only displaying those advisors who have more than two students assigned to them.", "metadata": {}}
{"_id": "gpt3_1580", "text": "\nThis query selects the advisor from the student table and groups them together based on the advisor name, only showing advisors that have more than two students.", "metadata": {}}
{"_id": "gpt3_1581", "text": "\nThis query will return a list of cities from the \"city\" table that have temperatures in February that are higher than temperatures in June, as well as cities from the \"hosting_city\" table that are hosting events.", "metadata": {}}
{"_id": "gpt3_1582", "text": "\nThis query will return a list of cities from the city and temperature tables that have higher temperatures in February than in June, as well as any cities from the city and hosting_city tables that are hosting a city.", "metadata": {}}
{"_id": "gpt3_1583", "text": "\nThis query selects the cities from the city and temperature tables where the temperature in February is higher than the temperature in June, and then selects the cities from the city and hosting_city tables. The result is a list of all cities that meet the", "metadata": {}}
{"_id": "gpt3_1584", "text": "\nThis query will select the cities from the city table that have a higher temperature in February than June, as well as the cities from the city table that are hosting cities in the hosting_city table.", "metadata": {}}
{"_id": "gpt3_1585", "text": "\nThis query selects the cities from the city table that have a higher temperature in February than in June, as well as the cities from the city table that have hosted a sporting event from the hosting_city table.", "metadata": {}}
{"_id": "gpt3_1586", "text": "\nThis query will return the count of files grouped by their formats. It will return the number of files for each format, such as the number of .jpg, .png, .pdf, etc. files.", "metadata": {}}
{"_id": "gpt3_1587", "text": "\nThis query returns the number of files in the files table grouped by their formats. The result set will be a list of formats and the number of files that have that format.", "metadata": {}}
{"_id": "gpt3_1588", "text": "\nThis query will return a count of the number of files for each format in the files table, grouped by format. The result will be a list of formats and a count of the number of files for each format.", "metadata": {}}
{"_id": "gpt3_1589", "text": "\nThis query returns the count of each file format stored in the files table, grouped by the format.", "metadata": {}}
{"_id": "gpt3_1590", "text": "\nThis query will return a count of the number of files per format, grouped by format.", "metadata": {}}
{"_id": "gpt3_1591", "text": "\nThis query will return a list of headquarters locations and the number of companies located at each headquarters.", "metadata": {}}
{"_id": "gpt3_1592", "text": "\nThis query will return the headquarters and the count of companies associated with each headquarters.", "metadata": {}}
{"_id": "gpt3_1593", "text": "\nThis query will return a list of all the headquarters locations for companies in the database and the number of companies located at each headquarters.", "metadata": {}}
{"_id": "gpt3_1594", "text": "\nThis query will return a list of all headquarters locations for a company, along with the number of companies located at each headquarters.", "metadata": {}}
{"_id": "gpt3_1595", "text": "\nThis query will return the headquarters of a company and the number of companies that have the same headquarters.", "metadata": {}}
{"_id": "gpt3_1596", "text": "\nThis query will return the date of the latest logon for all students with the family names Jaskolski or Langosh.", "metadata": {}}
{"_id": "gpt3_1597", "text": "\nThis query will return the date of the latest logon for students with the family names \"Jaskolski\" or \"Langosh\".", "metadata": {}}
{"_id": "gpt3_1598", "text": "\nThis query will return the date of the latest logon for any students with the family name of Jaskolski or Langosh.", "metadata": {}}
{"_id": "gpt3_1599", "text": "\nThis query will return the date of the latest logon for all students whose family name is either Jaskolski or Langosh.", "metadata": {}}
{"_id": "gpt3_1600", "text": "\nThis query will return the date of the latest logon for all students with the family name of either Jaskolski or Langosh.", "metadata": {}}
{"_id": "gpt3_1601", "text": "\nThis query will return the names of all artists who are not featured in any exhibitions.", "metadata": {}}
{"_id": "gpt3_1602", "text": "\nThis statement will return the names of all artists who are not included in any exhibitions.", "metadata": {}}
{"_id": "gpt3_1603", "text": "\nThis query will return the names of all artists who are not currently part of an exhibition.", "metadata": {}}
{"_id": "gpt3_1604", "text": "\nThis query returns the names of all artists who are not currently exhibiting in an exhibition.", "metadata": {}}
{"_id": "gpt3_1605", "text": "\nThis query will return the names of all artists who are not currently exhibiting in an exhibition.", "metadata": {}}
{"_id": "gpt3_1606", "text": "\nThis query will select the customer name from the customers table for all customers who do not use the payment method 'Cash'.", "metadata": {}}
{"_id": "gpt3_1607", "text": "\nThis query will select the customer name from the customers table for all customers who do not pay with cash.", "metadata": {}}
{"_id": "gpt3_1608", "text": "\nThis query will return the names of all customers from the customers table who do not pay by cash.", "metadata": {}}
{"_id": "gpt3_1609", "text": "\nThis query returns the names of all customers who have not paid with cash.", "metadata": {}}
{"_id": "gpt3_1610", "text": "\nThis query will select the customer_name from the customers table where the payment_method is not equal to Cash.", "metadata": {}}
{"_id": "gpt3_1611", "text": "\nThis query will select the document type code from the Document_Types table where the document description begins with the word \"Initial\".", "metadata": {}}
{"_id": "gpt3_1612", "text": "\nThis query will select the document type code from the Document_Types table where the document description starts with 'Initial'.", "metadata": {}}
{"_id": "gpt3_1613", "text": "\nThis query will select all document type codes from the Document_Types table where the document description begins with the word \"Initial\".", "metadata": {}}
{"_id": "gpt3_1614", "text": "\nThis statement will select all document type codes from the Document_Types table where the document description begins with \"Initial\".", "metadata": {}}
{"_id": "gpt3_1615", "text": "\nThis query will select the document type code from the Document_Types table where the document description begins with \"Initial\".", "metadata": {}}
{"_id": "gpt3_1616", "text": "\nThis query will select the customer_id with the most accounts and count the number of accounts associated with that customer_id. The results will be ordered by the count in descending order and limited to only the top result.", "metadata": {}}
{"_id": "gpt3_1617", "text": "\nThis SQL query will select the customer_id with the highest number of accounts and count the number of accounts associated with that customer_id. The query will also order the results by the count in descending order and limit the results to the top 1", "metadata": {}}
{"_id": "gpt3_1618", "text": "\nThis query returns the customer ID with the highest number of accounts and the total number of accounts associated with that customer.", "metadata": {}}
{"_id": "gpt3_1619", "text": "\nThis query selects the customer_id with the highest number of accounts and returns the customer_id and the count of accounts associated with that customer_id.", "metadata": {}}
{"_id": "gpt3_1620", "text": "\nThis query will return the customer_id with the highest number of accounts, as well as the total number of accounts associated with that customer_id.", "metadata": {}}
{"_id": "gpt3_1621", "text": "\nThis query selects the museum details and opening hours from the MUSEUMS and TOURIST_ATTRACTIONS tables, respectively, based on the Museum_ID and Tourist_Attraction_ID fields.", "metadata": {}}
{"_id": "gpt3_1622", "text": "\nThis query selects the museum details and opening hours from two tables, Museums and Tourist Attractions, by joining them on the Museum ID and Tourist Attraction ID.", "metadata": {}}
{"_id": "gpt3_1623", "text": "\nThis query selects the Museum Details and Opening Hours from both the MUSEUMS and TOURIST_ATTRACTIONS tables, based on a join between the Museum_ID from MUSEUMS and the Tourist_Attraction_ID", "metadata": {}}
{"_id": "gpt3_1624", "text": "\nThis SQL statement will join the MUSEUMS and TOURIST_ATTRACTIONS tables, and select the Museum_Details and Opening_Hours columns from both tables. The result will be a list of museum details and the corresponding opening hours", "metadata": {}}
{"_id": "gpt3_1625", "text": "\nThis query selects the museum details and opening hours from two tables, Museums and Tourist Attractions, by joining the two tables on the Museum ID and Tourist Attraction ID.", "metadata": {}}
{"_id": "gpt3_1626", "text": "\nThis query returns the head of the department with the least number of department IDs, ordered by the count of department IDs.", "metadata": {}}
{"_id": "gpt3_1627", "text": "\nThis query will select the head of the department with the fewest number of department IDs, ordered by the count of department IDs, and limited to the first result.", "metadata": {}}
{"_id": "gpt3_1628", "text": "\nThis query will select the head of the department with the least amount of employees, ordered by the count of the departmentID, and limited to one result.", "metadata": {}}
{"_id": "gpt3_1629", "text": "\nThis query returns the head of the department with the least number of department IDs, ordered by the count of department IDs.", "metadata": {}}
{"_id": "gpt3_1630", "text": "\nThis query returns the head of the department with the lowest number of department IDs, ordered by the count of department IDs.", "metadata": {}}
{"_id": "gpt3_1631", "text": "\nThis query returns all parties from the party table that are not included in the election table.", "metadata": {}}
{"_id": "gpt3_1632", "text": "\nThis query will return a list of all parties that are not associated with any election.", "metadata": {}}
{"_id": "gpt3_1633", "text": "\nThis query will return all parties from the party table that are not present in the election table.", "metadata": {}}
{"_id": "gpt3_1634", "text": "\nThis query returns all parties from the party table that are not present in the election table.", "metadata": {}}
{"_id": "gpt3_1635", "text": "\nThis query returns all parties from the party table that are not present in the election table.", "metadata": {}}
{"_id": "gpt3_1636", "text": "\nThis query will return the 3 most common cloud cover values from the weather table for zip code 94107, ordered from most common to least common.", "metadata": {}}
{"_id": "gpt3_1637", "text": "\nThis query will return the three most common values for cloud cover in the weather table for zip code 94107, ordered by the count of each cloud cover value in descending order.", "metadata": {}}
{"_id": "gpt3_1638", "text": "\nThis query will select the cloud cover from the weather table for the zip code 94107, group it by cloud cover, and order it by the count of each cloud cover in descending order. The query will then limit the results to the top 3", "metadata": {}}
{"_id": "gpt3_1639", "text": "\nThis query will return the three most common cloud cover percentages for the zip code 94107, ordered by the frequency of occurrence.", "metadata": {}}
{"_id": "gpt3_1640", "text": "\nThis query will return the three most common cloud cover values for the zip code 94107, ordered by the number of occurrences.", "metadata": {}}
{"_id": "gpt3_1641", "text": "\nThis query returns the average duration of all MP3 files with a resolution of less than 800.", "metadata": {}}
{"_id": "gpt3_1642", "text": "\nThis query returns the average duration of all mp3 files in the files table that have a resolution less than 800 in the song table.", "metadata": {}}
{"_id": "gpt3_1643", "text": "\nThis query returns the average duration of all mp3 files with a resolution lower than 800.", "metadata": {}}
{"_id": "gpt3_1644", "text": "\nThis query returns the average duration of all MP3 files with a resolution less than 800.", "metadata": {}}
{"_id": "gpt3_1645", "text": "\nThis query will calculate the average duration of all files in the files table that have a format of \"mp3\" and a resolution of less than 800 in the song table.", "metadata": {}}
{"_id": "gpt3_1646", "text": "\nThis query will select all the distinct first names from the STUDENT table that contain the letter 'a'.", "metadata": {}}
{"_id": "gpt3_1647", "text": "\nThis statement will select all distinct first names from the STUDENT table that contain the letter 'a'.", "metadata": {}}
{"_id": "gpt3_1648", "text": "\nThis query selects all distinct first names from the STUDENT table that contain the letter \"a\".", "metadata": {}}
{"_id": "gpt3_1649", "text": "\nThis SQL statement will select all distinct first names from the STUDENT table that contain the letter 'a'.", "metadata": {}}
{"_id": "gpt3_1650", "text": "\nThis query returns all distinct first names from the STUDENT table that contain the letter 'a'.", "metadata": {}}
{"_id": "gpt3_1651", "text": "\nThis query selects the route IDs (rid) from the routes table where the destination airport ID (dst_apid) is in the airports table with a country of 'United States', and the source airport ID (src_apid)", "metadata": {}}
{"_id": "gpt3_1652", "text": "\nThis query selects the route IDs from the routes table where the destination airport ID is in the airports table with a country of 'United States' and the source airport ID is in the airports table with a country of 'United States'.", "metadata": {}}
{"_id": "gpt3_1653", "text": "\nThis query selects the route IDs from the routes table where both the destination airport ID and the source airport ID are located in the United States.", "metadata": {}}
{"_id": "gpt3_1654", "text": "\nThis query selects the route ID (rid) from the routes table for all routes that have a source airport and destination airport in the United States.", "metadata": {}}
{"_id": "gpt3_1655", "text": "\nThis statement selects the route IDs from the routes table for flights between airports in the United States.", "metadata": {}}
{"_id": "gpt3_1656", "text": "\nThis query returns a list of investor IDs and the average share count for each investor, ordered by the average share count in ascending order.", "metadata": {}}
{"_id": "gpt3_1657", "text": "\nThis query calculates the average number of shares owned by each investor in the TRANSACTIONS table, and orders the results by average share count.", "metadata": {}}
{"_id": "gpt3_1658", "text": "\nThis query returns the average number of shares purchased by each investor, listed in ascending order by the average share count.", "metadata": {}}
{"_id": "gpt3_1659", "text": "\nThis query calculates the average share count for each investor_id from the TRANSACTIONS table and orders the results by the average share count.", "metadata": {}}
{"_id": "gpt3_1660", "text": "\nThis query calculates the average number of shares purchased by each investor in the TRANSACTIONS table and orders the results by the average number of shares purchased.", "metadata": {}}
{"_id": "gpt3_1661", "text": "\nThis query will return the total number of exhibitions that have taken place since 2005.", "metadata": {}}
{"_id": "gpt3_1662", "text": "\nThis query counts the number of exhibitions that have taken place since 2005.", "metadata": {}}
{"_id": "gpt3_1663", "text": "\nThis query will count the number of exhibitions that took place since 2005.", "metadata": {}}
{"_id": "gpt3_1664", "text": "\nThis query returns the total number of exhibitions that have taken place since the year 2005.", "metadata": {}}
{"_id": "gpt3_1665", "text": "\nThis query counts the number of exhibitions that have taken place since 2005.", "metadata": {}}
{"_id": "gpt3_1666", "text": "\nThis query returns the average unit price of all tracks in the Jazz genre.", "metadata": {}}
{"_id": "gpt3_1667", "text": "\nThis query returns the average unit price of all tracks in the Jazz genre.", "metadata": {}}
{"_id": "gpt3_1668", "text": "\nThis query returns the average unit price of all tracks in the Jazz genre.", "metadata": {}}
{"_id": "gpt3_1669", "text": "\nThis query will calculate the average unit price of all tracks in the genre of Jazz.", "metadata": {}}
{"_id": "gpt3_1670", "text": "\nThis query returns the average unit price of all tracks in the Jazz genre.", "metadata": {}}
{"_id": "gpt3_1671", "text": "\nThis query will return the names of all people in a table, sorted in ascending order by date of birth.", "metadata": {}}
{"_id": "gpt3_1672", "text": "\nThe query will return a list of names from the people table, ordered by date of birth.", "metadata": {}}
{"_id": "gpt3_1673", "text": "\nThis query will return a list of names from the people table, sorted in ascending order by date of birth.", "metadata": {}}
{"_id": "gpt3_1674", "text": "\nThis query will return a list of names from the people table, ordered by date of birth.", "metadata": {}}
{"_id": "gpt3_1675", "text": "\nThis query will return a list of names from the people table, sorted in ascending order by date of birth.", "metadata": {}}
{"_id": "gpt3_1676", "text": "\nThis query will select the number of kids from the Reservations table with the check-in date of \"2010-09-21\" and the first and last name of \"Damien Trachsel\".", "metadata": {}}
{"_id": "gpt3_1677", "text": "\nThis query will return the number of kids in the reservation made by Damien Trachsel on 2010-09-21.", "metadata": {}}
{"_id": "gpt3_1678", "text": "\nThis query will select the number of kids in the reservation made by Damien Trachsel on 2010-09-21.", "metadata": {}}
{"_id": "gpt3_1679", "text": "\nThis query will return the number of kids in the reservation of Damien Trachsel on 2010-09-21.", "metadata": {}}
{"_id": "gpt3_1680", "text": "\nThis query will select the number of kids from the Reservations table where the check in date is 2010-09-21, and the first and last name of the guest is Damien Trachsel.", "metadata": {}}
{"_id": "gpt3_1681", "text": "\nThis query counts the number of customers who have an address in the city of Lake Geovannyton.", "metadata": {}}
{"_id": "gpt3_1682", "text": "\nThis query counts the number of customers who have an address in the city of Lake Geovannyton.", "metadata": {}}
{"_id": "gpt3_1683", "text": "\nThis query counts the number of customers who have an address in the city of Lake Geovannyton.", "metadata": {}}
{"_id": "gpt3_1684", "text": "\nThis query counts the number of customers who have an address in Lake Geovannyton.", "metadata": {}}
{"_id": "gpt3_1685", "text": "\nThis query counts the number of customers who have an address in the city of Lake Geovannyton.", "metadata": {}}
{"_id": "gpt3_1686", "text": "\nThis statement will select the roomname from the rooms table where the baseprice is between 120 and 150.", "metadata": {}}
{"_id": "gpt3_1687", "text": "\nThis query selects the roomname from the rooms table that have a baseprice between 120 and 150.", "metadata": {}}
{"_id": "gpt3_1688", "text": "\nThis statement will select the roomname from the rooms table where the baseprice is between 120 and 150.", "metadata": {}}
{"_id": "gpt3_1689", "text": "\nThis statement will return a list of room names from the rooms table where the base price is between 120 and 150.", "metadata": {}}
{"_id": "gpt3_1690", "text": "\nThis statement will select the roomname from the rooms table where the baseprice is between 120 and 150.", "metadata": {}}
{"_id": "gpt3_1691", "text": "\nThis statement retrieves the name of each phone and the district of the market it is sold in, ordered by the market's ranking.", "metadata": {}}
{"_id": "gpt3_1692", "text": "\nThis query selects the name of the phone and the district associated with it from the phone_market, market, and phone tables and orders the results by the ranking of the district.", "metadata": {}}
{"_id": "gpt3_1693", "text": "\nThis query selects the name and district of every phone market in a given database, ordered by the ranking of the market.", "metadata": {}}
{"_id": "gpt3_1694", "text": "\nThis query returns the names and districts of phones from the phone_market and market tables, ordered by the ranking of the district in the market table.", "metadata": {}}
{"_id": "gpt3_1695", "text": "\nThis SQL query selects the name of a phone and the district of the market it is sold in from the phone_market, market, and phone tables, and orders the results by the market's ranking.", "metadata": {}}
{"_id": "gpt3_1696", "text": "\nThis query calculates the average salary of instructors in each department and returns the department name and average salary for departments that have an average salary greater than 42000.", "metadata": {}}
{"_id": "gpt3_1697", "text": "\nThis query returns the average salary of instructors in each department where the average salary is greater than $42,000.", "metadata": {}}
{"_id": "gpt3_1698", "text": "\nThis query calculates the average salary for each department and returns the department name and average salary for any department with an average salary greater than 42000.", "metadata": {}}
{"_id": "gpt3_1699", "text": "\nThis query calculates the average salary for each department and returns the department name and average salary for departments whose average salary exceeds 42000.", "metadata": {}}
{"_id": "gpt3_1700", "text": "\nThis query returns the average salary of all instructors in departments where the average salary is greater than $42,000. It groups the instructors by department name and calculates the average salary for each department.", "metadata": {}}
{"_id": "gpt3_1701", "text": "\nThis query returns the governor with the most members in their party, ordered by the count of members in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_1702", "text": "\nThis query returns the governor who is affiliated with the most political parties. It does so by selecting the governor from the party table, grouping them by governor, ordering them by the count of each governor's affiliations, and then limiting the query to", "metadata": {}}
{"_id": "gpt3_1703", "text": "\nThis query will return the governor with the highest count of entries in the party table, ordered in descending order.", "metadata": {}}
{"_id": "gpt3_1704", "text": "\nThis query will return the Governor with the most entries in the party table, ordered by count in descending order, and limited to one result.", "metadata": {}}
{"_id": "gpt3_1705", "text": "\nThis query will select the governor with the highest number of members in the party, and return the name of that governor.", "metadata": {}}
{"_id": "gpt3_1706", "text": "\nThis query retrieves all the distinct form type codes from the forms table.", "metadata": {}}
{"_id": "gpt3_1707", "text": "\nThis query selects all the unique form type codes from the forms table.", "metadata": {}}
{"_id": "gpt3_1708", "text": "\nThis query retrieves all the distinct form type codes from the forms table.", "metadata": {}}
{"_id": "gpt3_1709", "text": "\nThis statement retrieves all the distinct form type codes from the forms table.", "metadata": {}}
{"_id": "gpt3_1710", "text": "\nThis statement will select all unique form type codes from the forms table.", "metadata": {}}
{"_id": "gpt3_1711", "text": "\nThis query selects the cell phone numbers of candidates who have failed an assessment.", "metadata": {}}
{"_id": "gpt3_1712", "text": "\nThis query selects the cell phone numbers of all candidates who failed their assessments.", "metadata": {}}
{"_id": "gpt3_1713", "text": "\nThis query will select the cell mobile number from the people table for all candidates who have failed an assessment.", "metadata": {}}
{"_id": "gpt3_1714", "text": "\nThis query selects the cell phone number of all candidates who have failed an assessment.", "metadata": {}}
{"_id": "gpt3_1715", "text": "\nThis query selects the cell phone number of all candidates who have failed an assessment.", "metadata": {}}
{"_id": "gpt3_1716", "text": "\nThis query will return the total number of entrepreneurs in the table.", "metadata": {}}
{"_id": "gpt3_1717", "text": "\nThis query returns the total number of entrepreneurs in a table.", "metadata": {}}
{"_id": "gpt3_1718", "text": "\nThis query will return the total number of entrepreneurs in the table.", "metadata": {}}
{"_id": "gpt3_1719", "text": "\nThis query returns the total number of entrepreneurs in a given table.", "metadata": {}}
{"_id": "gpt3_1720", "text": "\nThis query will return the total number of entrepreneurs in the table.", "metadata": {}}
{"_id": "gpt3_1721", "text": "\nThis query returns the total number of distinct party names in the party table.", "metadata": {}}
{"_id": "gpt3_1722", "text": "\nThis query counts the number of distinct party names in the party table.", "metadata": {}}
{"_id": "gpt3_1723", "text": "\nThis query will return the total number of distinct party names in the party table.", "metadata": {}}
{"_id": "gpt3_1724", "text": "\nThis query returns the number of distinct party names in the party table.", "metadata": {}}
{"_id": "gpt3_1725", "text": "\nThis query will return the number of distinct party names that exist in the party table.", "metadata": {}}
{"_id": "gpt3_1726", "text": "\nThis statement retrieves the document type code for the document with an ID of 2 from the Documents table.", "metadata": {}}
{"_id": "gpt3_1727", "text": "\nThis query will select the document type code from the Documents table where the document_id is 2.", "metadata": {}}
{"_id": "gpt3_1728", "text": "\nThis query will select the document type code from the Documents table for the document with the ID of 2.", "metadata": {}}
{"_id": "gpt3_1729", "text": "\nThis query retrieves the document type code from the Documents table for the document with an ID of 2.", "metadata": {}}
{"_id": "gpt3_1730", "text": "\nThis SQL query will select the document type code from the Documents table where the document_id is equal to 2.", "metadata": {}}
{"_id": "gpt3_1731", "text": "\nThis query will return the candidate_id of all candidates who have passed their assessment.", "metadata": {}}
{"_id": "gpt3_1732", "text": "\nThis query will return all of the candidate IDs from the candidate_assessments table where the assessment_outcome_code is \"Pass\".", "metadata": {}}
{"_id": "gpt3_1733", "text": "\nThis query will return all candidate_ids from the candidate_assessments table where the assessment_outcome_code is set to \"Pass\".", "metadata": {}}
{"_id": "gpt3_1734", "text": "\nThis query selects the candidate_id from the candidate_assessments table where the assessment_outcome_code is equal to \"Pass\".", "metadata": {}}
{"_id": "gpt3_1735", "text": "\nThis query will return a list of candidate IDs from the candidate_assessments table where the assessment_outcome_code is equal to \"Pass\".", "metadata": {}}
{"_id": "gpt3_1736", "text": "\nThis query selects the first names of all students who are enrolled in both Accounting and Computer Information Systems courses.", "metadata": {}}
{"_id": "gpt3_1737", "text": "\nThis query selects the first names of students who are enrolled in both Accounting and Computer Information Systems courses.", "metadata": {}}
{"_id": "gpt3_1738", "text": "\nThis query selects the first names of students who are enrolled in both Accounting and Computer Information Systems courses.", "metadata": {}}
{"_id": "gpt3_1739", "text": "\nThis query selects the first names of students who are enrolled in both Accounting and Computer Information Systems courses.", "metadata": {}}
{"_id": "gpt3_1740", "text": "\nThis query selects the first names of students who are enrolled in both Accounting and Computer Information Systems courses.", "metadata": {}}
{"_id": "gpt3_1741", "text": "\nThis query selects the name of the people associated with each gymnast from the gymnast and people tables.", "metadata": {}}
{"_id": "gpt3_1742", "text": "\nThis query will select the Name of a person from the people table, based on the Gymnast_ID from the gymnast table.", "metadata": {}}
{"_id": "gpt3_1743", "text": "\nThis query returns the name of a gymnast from the people table, given the Gymnast_ID from the gymnast table.", "metadata": {}}
{"_id": "gpt3_1744", "text": "\nThis query will select the name of the gymnast from the people table associated with the gymnast ID from the gymnast table.", "metadata": {}}
{"_id": "gpt3_1745", "text": "\nThis query will select the name from the people table for each gymnast in the gymnast table, based on the Gymnast_ID and People_ID columns.", "metadata": {}}
{"_id": "gpt3_1746", "text": "\nThis query will return the names of all advisors who have more than two students assigned to them.", "metadata": {}}
{"_id": "gpt3_1747", "text": "\nThis query will return all advisors from the STUDENT table who have more than two students assigned to them.", "metadata": {}}
{"_id": "gpt3_1748", "text": "\nThis query will return a list of all advisors who have more than two students assigned to them.", "metadata": {}}
{"_id": "gpt3_1749", "text": "\nThis query will select the names of all advisors who have more than two students assigned to them.", "metadata": {}}
{"_id": "gpt3_1750", "text": "\nThis query returns a list of advisors who have more than two students assigned to them.", "metadata": {}}
{"_id": "gpt3_1751", "text": "\nThis query counts the number of courses each student is registered for. It does this by joining the students and student_course_registrations tables, selecting the student_id from the students table, and grouping by the student_id. The", "metadata": {}}
{"_id": "gpt3_1752", "text": "\nThis query counts the number of course registrations for each student. It does this by joining the students and student_course_registrations tables on the student_id column, then counting the number of rows for each student and grouping the results by", "metadata": {}}
{"_id": "gpt3_1753", "text": "\nThis query counts the number of courses each student has registered for by joining the students and student_course_registrations tables and grouping the results by student_id.", "metadata": {}}
{"_id": "gpt3_1754", "text": "\nThis query counts the number of course registrations for each student. It joins the students and student_course_registrations tables on the student_id column and then groups the results by student_id, counting the number of course registrations for each", "metadata": {}}
{"_id": "gpt3_1755", "text": "\nThis query counts the number of courses each student is registered for by joining the students and student_course_registrations tables on the student_id column.", "metadata": {}}
{"_id": "gpt3_1756", "text": "\nThis query will select the names of tourist attractions that have either a park or shopping feature.", "metadata": {}}
{"_id": "gpt3_1757", "text": "\nThis query returns the names of all tourist attractions that have either a park or a shopping feature.", "metadata": {}}
{"_id": "gpt3_1758", "text": "\nThis query selects the names of tourist attractions that have either a park or a shopping feature.", "metadata": {}}
{"_id": "gpt3_1759", "text": "\nThis query will select the names of all tourist attractions that have either a park or shopping feature.", "metadata": {}}
{"_id": "gpt3_1760", "text": "\nThis query retrieves the names of tourist attractions that have either a park or shopping feature.", "metadata": {}}
{"_id": "gpt3_1761", "text": "\nThis query will select the last names from the staff table of all staff members with an email address that contains the string \"wrau\".", "metadata": {}}
{"_id": "gpt3_1762", "text": "\nThis query will return the last names of all staff members with an email address containing the string \"wrau\".", "metadata": {}}
{"_id": "gpt3_1763", "text": "\nThis query will select the last names of staff members whose email address contains \"wrau\".", "metadata": {}}
{"_id": "gpt3_1764", "text": "\nThis query will select the last names of all staff members whose email address contains \"wrau\".", "metadata": {}}
{"_id": "gpt3_1765", "text": "\nThis query selects the last names of all staff members whose email address includes the string \"wrau\".", "metadata": {}}
{"_id": "gpt3_1766", "text": "\nThis query selects the zip codes from the weather table that have an average mean visibility of less than 10 miles.", "metadata": {}}
{"_id": "gpt3_1767", "text": "\nThis query finds all zip codes in the weather table where the average mean visibility in miles is less than 10.", "metadata": {}}
{"_id": "gpt3_1768", "text": "\nThis query selects all zip codes from the weather table where the average mean visibility miles is less than 10.", "metadata": {}}
{"_id": "gpt3_1769", "text": "\nThis query returns a list of zip codes where the average mean visibility in miles is less than 10.", "metadata": {}}
{"_id": "gpt3_1770", "text": "\nThis query returns a list of zip codes from the weather table where the average mean visibility in miles is less than 10.", "metadata": {}}
{"_id": "gpt3_1771", "text": "\nThis query will return the average age, the maximum age and the sex of all students, grouped by sex.", "metadata": {}}
{"_id": "gpt3_1772", "text": "\nThis query will return the average age, maximum age, and sex of each group of students in the student table, grouped by sex.", "metadata": {}}
{"_id": "gpt3_1773", "text": "\nThis query will return the average age, maximum age, and sex of students grouped by sex. The result will be two rows, one for male students and one for female students, with the average age, maximum age, and sex listed for each", "metadata": {}}
{"_id": "gpt3_1774", "text": "\nThis query will return the average age, maximum age, and sex of students grouped by sex. The result will be two rows, one for male students and one for female students, with the average age, maximum age, and sex for each group", "metadata": {}}
{"_id": "gpt3_1775", "text": "\nThis query will return the average age, maximum age, and sex for each group of students grouped by sex.", "metadata": {}}
{"_id": "gpt3_1776", "text": "\nThis query selects the maximum length of a bridge, along with the name of the architect who designed it, from two tables (bridge and architect).", "metadata": {}}
{"_id": "gpt3_1777", "text": "\nThis query selects the maximum length of a bridge in meters and the name of the architect associated with it.", "metadata": {}}
{"_id": "gpt3_1778", "text": "\nThis query will return the maximum length of a bridge and the name of the architect associated with it.", "metadata": {}}
{"_id": "gpt3_1779", "text": "\nThis query returns the maximum length of all bridges, along with the name of the architect who designed them.", "metadata": {}}
{"_id": "gpt3_1780", "text": "\nThis query selects the maximum length of the bridges in meters and the name of the architect associated with them.", "metadata": {}}
{"_id": "gpt3_1781", "text": "\nThis query will return the year_opened of all tracks with seating capacity between 4000 and 5000.", "metadata": {}}
{"_id": "gpt3_1782", "text": "\nThis statement will select the year that tracks with seating capacity between 4000 and 5000 opened.", "metadata": {}}
{"_id": "gpt3_1783", "text": "\nThis statement will select the year opened from the track table for any seating capacity between 4000 and 5000.", "metadata": {}}
{"_id": "gpt3_1784", "text": "\nThis query will return the year that each track opened that has a seating capacity between 4000 and 5000.", "metadata": {}}
{"_id": "gpt3_1785", "text": "\nThis query will select the year_opened from the track table where seating is between 4000 and 5000.", "metadata": {}}
{"_id": "gpt3_1786", "text": "\nThis query will select the first and last names of the band members who performed the song \"Badlands\" by joining the Performance, Band, and Songs tables on the Bandmate and SongId columns, respectively.", "metadata": {}}
{"_id": "gpt3_1787", "text": "\nThis query selects the first name and last name of the band members who performed the song \"Badlands\" by joining the Performance, Band and Songs tables on the Bandmate, SongId columns respectively.", "metadata": {}}
{"_id": "gpt3_1788", "text": "\nThis query selects the first and last name of bandmates who performed the song \"Badlands\" from the Performance, Band, and Songs tables.", "metadata": {}}
{"_id": "gpt3_1789", "text": "\nThis query will select the firstname and lastname of all the bandmates from the Performance table who have performed the song \"Badlands\" from the Songs table.", "metadata": {}}
{"_id": "gpt3_1790", "text": "\nThis query selects the first and last names of all bandmates involved in the performance of the song \"Badlands\" from the Performance, Band, and Songs tables.", "metadata": {}}
{"_id": "gpt3_1791", "text": "\nThis query selects the height of the highest mountain climbed by the climber with the most points.", "metadata": {}}
{"_id": "gpt3_1792", "text": "\nThis query returns the height of the mountain with the highest points for a climber.", "metadata": {}}
{"_id": "gpt3_1793", "text": "\nThis query selects the height of the mountain with the highest points from the climber and mountain tables, ordered by the climber's points in descending order, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_1794", "text": "\nThis query retrieves the height of the mountain with the highest points climbed by a climber.", "metadata": {}}
{"_id": "gpt3_1795", "text": "\nThis query selects the height of the mountain with the highest points from the climber and mountain tables. It orders the climber table by points in descending order and then selects the height of the mountain associated with the climber with the highest points.", "metadata": {}}
{"_id": "gpt3_1796", "text": "\nThis query will select the unit of measure and product category code from the ref_product_categories table for the product chervil from the products table.", "metadata": {}}
{"_id": "gpt3_1797", "text": "\nThis query will select the unit of measure and product category code from the ref_product_categories table for the product \"chervil\" from the products table.", "metadata": {}}
{"_id": "gpt3_1798", "text": "\nThis query will select the unit of measure and product category code from the ref_product_categories table for the product \"chervil\" from the products table.", "metadata": {}}
{"_id": "gpt3_1799", "text": "\nThis query will select the unit of measure and product category code from the ref_product_categories table for the product \"chervil\" from the products table.", "metadata": {}}
{"_id": "gpt3_1800", "text": "\nThis query will select the unit of measure and product category code from the ref_product_categories table for the product name \"chervil\" from the products table.", "metadata": {}}
{"_id": "gpt3_1801", "text": "\nThis query returns the top 5 billing countries from the invoices table, sorted by the number of invoices for each country in descending order.", "metadata": {}}
{"_id": "gpt3_1802", "text": "\nThis SQL query will return the top 5 countries by the number of invoices, ordered in descending order. It will return the billing country and the count of invoices for each country.", "metadata": {}}
{"_id": "gpt3_1803", "text": "\nThis SQL query will return the top 5 countries by number of invoices, along with the count of invoices for each country, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_1804", "text": "\nThis SQL query will return the top 5 billing countries based on the number of invoices, ordered from highest to lowest. It will display the billing country and the count of invoices associated with it.", "metadata": {}}
{"_id": "gpt3_1805", "text": "\nThis SQL query will return the top 5 billing countries, along with the number of invoices associated with each country, in descending order.", "metadata": {}}
{"_id": "gpt3_1806", "text": "\nThis query will return the three publications with the lowest prices, sorted by their publication date.", "metadata": {}}
{"_id": "gpt3_1807", "text": "\nThis query will return the first three publication dates from the publication table sorted by price in ascending order.", "metadata": {}}
{"_id": "gpt3_1808", "text": "\nThis query will select the publication date from the publication table and order the results by price in ascending order and limit the results to the first three entries.", "metadata": {}}
{"_id": "gpt3_1809", "text": "\nThis query will return the publication date of the three least expensive publications in the publication table, ordered by price in ascending order.", "metadata": {}}
{"_id": "gpt3_1810", "text": "\nThis query will return the publication date of the three cheapest publications in the publication table, ordered by price in ascending order.", "metadata": {}}
{"_id": "gpt3_1811", "text": "\nThis query will return the phone number associated with the customer name \"Ashley\" from the PERFORMERS table.", "metadata": {}}
{"_id": "gpt3_1812", "text": "\nThis query will return the phone number of the customer named Ashley from the PERFORMERS table.", "metadata": {}}
{"_id": "gpt3_1813", "text": "\nThis query will return the phone number associated with the customer named Ashley from the Performers table.", "metadata": {}}
{"_id": "gpt3_1814", "text": "\nThis query will select the phone number of the customer named Ashley from the PERFORMERS table.", "metadata": {}}
{"_id": "gpt3_1815", "text": "\nThis query will return the phone number of the customer named Ashley from the PERFORMERS table.", "metadata": {}}
{"_id": "gpt3_1816", "text": "\nThis query returns the nationality of ships that have a count of more than two.", "metadata": {}}
{"_id": "gpt3_1817", "text": "\nThis query will select the Nationality of ships from a table and group them by nationality, only displaying the nationalities that have more than two ships.", "metadata": {}}
{"_id": "gpt3_1818", "text": "\nThis SQL query will select the nationality of ships from a table and group them by nationality, only displaying results where the count of ships is greater than 2.", "metadata": {}}
{"_id": "gpt3_1819", "text": "\nThis query returns a list of nationalities from the ship table where there are more than two ships of that nationality.", "metadata": {}}
{"_id": "gpt3_1820", "text": "\nThis SQL query will select the nationality of ships from a table, and group them by nationality, only displaying those that have a count of more than two.", "metadata": {}}
{"_id": "gpt3_1821", "text": "\nThis query will return all categories from the book_club table that have more than two entries from 1989 or later.", "metadata": {}}
{"_id": "gpt3_1822", "text": "\nThis query will select the category of each book from the book_club table that was published after 1989 and group them together, only returning categories that have at least two books.", "metadata": {}}
{"_id": "gpt3_1823", "text": "\nThis query will select all of the categories from the book_club table that have more than two books published after 1989 and group them together.", "metadata": {}}
{"_id": "gpt3_1824", "text": "\nThis query will return all categories from the book_club table where there are at least two books published after 1989. It will group the results by category.", "metadata": {}}
{"_id": "gpt3_1825", "text": "\nThis query will select the categories of books from the book club table where the year of publication is greater than 1989 and group them by category, having a count greater than or equal to two.", "metadata": {}}
{"_id": "gpt3_1826", "text": "\nThis SQL query will return a count of the number of video games in each game type. The result will be a table with two columns, one for game type and one for the count.", "metadata": {}}
{"_id": "gpt3_1827", "text": "\nThis query will return the game type and the count of each type in the Video_games table. It will group the results by game type.", "metadata": {}}
{"_id": "gpt3_1828", "text": "\nThis query will return the number of video games in each game type. It will return a table with two columns, one for game type and one for the count of video games in each game type.", "metadata": {}}
{"_id": "gpt3_1829", "text": "\nThis query will return the number of video games in each game type, grouped by game type. The result will be two columns, the first containing the game type, and the second containing the number of video games in that game type.", "metadata": {}}
{"_id": "gpt3_1830", "text": "\nThis query will return the type of game (gtype) and the count of each type of game from the Video_games table.", "metadata": {}}
{"_id": "gpt3_1831", "text": "\nThis query will select the major of all male students from the STUDENT table.", "metadata": {}}
{"_id": "gpt3_1832", "text": "\nThis query will select the major of all male students from the STUDENT table.", "metadata": {}}
{"_id": "gpt3_1833", "text": "\nThis query will select the major of all male students from the STUDENT table.", "metadata": {}}
{"_id": "gpt3_1834", "text": "\nThis query will select the major of all male students from the STUDENT table.", "metadata": {}}
{"_id": "gpt3_1835", "text": "\nThis query will select all of the majors from the STUDENT table where the Sex is equal to \"M\".", "metadata": {}}
{"_id": "gpt3_1836", "text": "\nThis query will select the first name, last name, and grade point of students who have enrolled in a course, by joining the ENROLLED_IN, GRADECONVERSION and STUDENT tables.", "metadata": {}}
{"_id": "gpt3_1837", "text": "\nThis query summarizes the first name, last name, and grade point of students enrolled in a course. It does this by joining the ENROLLED_IN, GRADECONVERSION, and STUDENT tables on the letter grade and student", "metadata": {}}
{"_id": "gpt3_1838", "text": "\nThis query retrieves the first name, last name and grade point of each student enrolled in a course based on the letter grade they received.", "metadata": {}}
{"_id": "gpt3_1839", "text": "\nThis query will select the first name, last name, and grade point of students who are enrolled in a course, based on the grade they received and the student's ID.", "metadata": {}}
{"_id": "gpt3_1840", "text": "\nThis query selects the first name, last name, and grade point of students who have enrolled in a course, based on the grade they received in the course and the corresponding grade point in the grade conversion table.", "metadata": {}}
{"_id": "gpt3_1841", "text": "\nThis statement selects the names of all drivers who are not assigned to a school bus.", "metadata": {}}
{"_id": "gpt3_1842", "text": "\nThis statement will return the names of all drivers who are not currently driving a school bus.", "metadata": {}}
{"_id": "gpt3_1843", "text": "\nThis statement will select the names of drivers who are not driving school buses.", "metadata": {}}
{"_id": "gpt3_1844", "text": "\nThis statement will select the name of any drivers whose driver_id is not found in the school_bus table.", "metadata": {}}
{"_id": "gpt3_1845", "text": "\nThis statement will select the names of all drivers who are not assigned to a school bus.", "metadata": {}}
{"_id": "gpt3_1846", "text": "\nThe query will return the average attendance for any stadium with a capacity percentage greater than 100.", "metadata": {}}
{"_id": "gpt3_1847", "text": "\nThis query will return the average attendance of any stadium where the capacity percentage is greater than 100%.", "metadata": {}}
{"_id": "gpt3_1848", "text": "\nThis query will return the average attendance for all stadiums whose capacity percentage is greater than 100.", "metadata": {}}
{"_id": "gpt3_1849", "text": "\nThe query will return the average attendance figures for stadiums with a capacity percentage of more than 100%.", "metadata": {}}
{"_id": "gpt3_1850", "text": "\nThis query will return the average attendance of any stadium where the capacity percentage is greater than 100.", "metadata": {}}
{"_id": "gpt3_1851", "text": "\nThis query returns the total count of rows in the film table.", "metadata": {}}
{"_id": "gpt3_1852", "text": "\nThis query would count the total number of films in the film table.", "metadata": {}}
{"_id": "gpt3_1853", "text": "\nThe query SELECT count(*) FROM film will return the total number of records in the film table.", "metadata": {}}
{"_id": "gpt3_1854", "text": "\nThis query will return the total number of records in the film table.", "metadata": {}}
{"_id": "gpt3_1855", "text": "\nThis query returns the total number of rows in the film table.", "metadata": {}}
{"_id": "gpt3_1856", "text": "\nThis query returns a list of all distinct department IDs from the employees table that have at least four employees with the same manager.", "metadata": {}}
{"_id": "gpt3_1857", "text": "\nThis statement returns a list of unique department_ids from the employees table where there are at least 4 employees in each department managed by the same manager.", "metadata": {}}
{"_id": "gpt3_1858", "text": "\nThis query will select all distinct department_id's from the employees table, grouped by department_id and manager_id, where the number of employees in the department is greater than or equal to 4.", "metadata": {}}
{"_id": "gpt3_1859", "text": "\nThis query is used to select the distinct departments from the employees table that have at least four employees assigned to them, grouped by department and manager.", "metadata": {}}
{"_id": "gpt3_1860", "text": "\nThis query returns a list of distinct department IDs from the employees table, grouped by department and manager IDs, where the number of employees in each group is greater than or equal to 4.", "metadata": {}}
{"_id": "gpt3_1861", "text": "\nThis query returns the titles of songs that have vocals, but do not have lead vocals.", "metadata": {}}
{"_id": "gpt3_1862", "text": "\nThis query selects all distinct titles from the vocals and songs tables, except for titles where the vocal type is listed as \"lead\".", "metadata": {}}
{"_id": "gpt3_1863", "text": "\nThis query selects all distinct titles from the vocals and songs tables, except for titles of songs where the vocals type is \"lead\".", "metadata": {}}
{"_id": "gpt3_1864", "text": "\nThis query returns a list of distinct titles from the vocals and songs tables, excluding any titles from the songs table where the type is listed as \"lead\".", "metadata": {}}
{"_id": "gpt3_1865", "text": "\nThis query returns the titles of songs from the vocals and songs tables that do not have a lead vocalist.", "metadata": {}}
{"_id": "gpt3_1866", "text": "\nThis query will return the county names from the APPELLATIONS table for any Appelation that has three or fewer associated wines in the WINE table.", "metadata": {}}
{"_id": "gpt3_1867", "text": "\nThis query will select the county from the Appellations table for all wines whose Appelation appears three or fewer times in the Wine table.", "metadata": {}}
{"_id": "gpt3_1868", "text": "\nThis query returns the county from the APPELLATIONS table for all wines with fewer than 3 associated appelations in the WINE table.", "metadata": {}}
{"_id": "gpt3_1869", "text": "\nThis query will return the county name from the APPELLATIONS table for any wine with 3 or fewer entries in the WINE table for that appellation.", "metadata": {}}
{"_id": "gpt3_1870", "text": "\nThis query selects the county from the Appellations table for each Appellation in the Wine table which has three or fewer entries in the Wine table.", "metadata": {}}
{"_id": "gpt3_1871", "text": "\nThis query will select the name of a course from the COURSE table where the number of credits is equal to 1.", "metadata": {}}
{"_id": "gpt3_1872", "text": "\nThis query will select all course names from the COURSE table where the number of credits is equal to 1.", "metadata": {}}
{"_id": "gpt3_1873", "text": "\nThis query selects the name of any course that has 1 credit from the COURSE table.", "metadata": {}}
{"_id": "gpt3_1874", "text": "\nThis query will return the names of all courses that have 1 credit.", "metadata": {}}
{"_id": "gpt3_1875", "text": "\nThis query will select the name of all courses from the COURSE table that have 1 credit.", "metadata": {}}
{"_id": "gpt3_1876", "text": "\nThis query selects the name of the shop with the highest quantity of stock from the stock and shop tables. It does this by joining the stock and shop tables on the Shop_ID column, grouping by the Shop_ID, and ordering the result", "metadata": {}}
{"_id": "gpt3_1877", "text": "\nThis query selects the shop name from the shop table with the highest total quantity of stock from the stock table.", "metadata": {}}
{"_id": "gpt3_1878", "text": "\nThis query selects the shop name of the shop with the highest total quantity of stock from the stock and shop tables.", "metadata": {}}
{"_id": "gpt3_1879", "text": "\nThis query selects the shop name of the shop with the highest total quantity of stock from the stock and shop tables.", "metadata": {}}
{"_id": "gpt3_1880", "text": "\nThis query selects the shop name with the highest total quantity of stock from the stock and shop tables.", "metadata": {}}
{"_id": "gpt3_1881", "text": "\nThis query selects staff names and ids from the Staff table who have recorded faults in the Fault_Log table but have not recorded engineer visits in the Engineer_Visits table.", "metadata": {}}
{"_id": "gpt3_1882", "text": "\nThis query selects staff names and IDs from the Staff table who have recorded faults in the Fault_Log table but have not been contacted in the Engineer_Visits table.", "metadata": {}}
{"_id": "gpt3_1883", "text": "\nThis statement will select the staff name and staff id from the Staff table (T1) that have logged a fault in the Fault_Log table (T2), but are not listed in the Engineer_Visits table (T4).", "metadata": {}}
{"_id": "gpt3_1884", "text": "\nThis query returns the staff names and staff IDs of staff members who have recorded faults in the Fault_Log table but have not had any engineer visits in the Engineer_Visits table.", "metadata": {}}
{"_id": "gpt3_1885", "text": "\nThis query selects the staff names and staff ids from the Staff table who have recorded faults in the Fault_Log table but not made engineer visits in the Engineer_Visits table.", "metadata": {}}
{"_id": "gpt3_1886", "text": "\nThis statement returns the first and last names of all employees with a salary greater than the salary of the employee with an employee ID of 163.", "metadata": {}}
{"_id": "gpt3_1887", "text": "\nThis query will select the first and last name of all employees with a salary higher than the salary of the employee with an employee_id of 163.", "metadata": {}}
{"_id": "gpt3_1888", "text": "\nThis statement selects the first and last names of all employees with a salary greater than the salary of the employee with the ID of 163.", "metadata": {}}
{"_id": "gpt3_1889", "text": "\nThis query selects the first name and last name of all employees with a salary greater than the salary of the employee with the employee ID 163.", "metadata": {}}
{"_id": "gpt3_1890", "text": "\nThis query will select the first and last name of all employees who have a salary that is higher than the salary of the employee with the employee_id of 163.", "metadata": {}}
{"_id": "gpt3_1891", "text": "\nThis query will return the total number of games played from the Sportsinfo table.", "metadata": {}}
{"_id": "gpt3_1892", "text": "\nThis query would return the total number of games played from the Sportsinfo table.", "metadata": {}}
{"_id": "gpt3_1893", "text": "\nThis query will return the total sum of the games played from the Sportsinfo table.", "metadata": {}}
{"_id": "gpt3_1894", "text": "\nThis query will return the total number of games played in the Sportsinfo table.", "metadata": {}}
{"_id": "gpt3_1895", "text": "\nThis query will return the total number of games played in the Sportsinfo table.", "metadata": {}}
{"_id": "gpt3_1896", "text": "\nThis query selects the first and last name of staff members from the Staff table who have an address in the city of Damianfort from the Addresses table.", "metadata": {}}
{"_id": "gpt3_1897", "text": "\nThis statement will select the first and last names of staff members from the Staff table who have an address in the city of Damianfort from the Addresses table.", "metadata": {}}
{"_id": "gpt3_1898", "text": "\nThis query will select the first and last names of staff members from the Staff table who have an address in the city of Damianfort from the Addresses table.", "metadata": {}}
{"_id": "gpt3_1899", "text": "\nThis query selects the first and last name of staff members from the Staff table, who have an address in the city of Damianfort, from the Addresses table.", "metadata": {}}
{"_id": "gpt3_1900", "text": "\nThis query selects the first and last names of staff members whose address is in the city of Damianfort.", "metadata": {}}
{"_id": "gpt3_1901", "text": "\nThis query will return the number of distinct ranks in the captain table.", "metadata": {}}
{"_id": "gpt3_1902", "text": "\nThis query will count the number of distinct ranks of captains in a table.", "metadata": {}}
{"_id": "gpt3_1903", "text": "\nThis query will return the number of distinct ranks of captains in the table.", "metadata": {}}
{"_id": "gpt3_1904", "text": "\nThis query will return the total number of distinct ranks among captains in the table.", "metadata": {}}
{"_id": "gpt3_1905", "text": "\nThis query returns the number of distinct ranks among captains.", "metadata": {}}
{"_id": "gpt3_1906", "text": "\nThis query returns the names of services from the services table that are not associated with any party in the party_services table.", "metadata": {}}
{"_id": "gpt3_1907", "text": "\nThis query returns the names of services that are not associated with any party.", "metadata": {}}
{"_id": "gpt3_1908", "text": "\nThis query returns a list of services from the services table that are not associated with any parties in the party_services table.", "metadata": {}}
{"_id": "gpt3_1909", "text": "\nThis query returns the names of services from the 'services' table which are not present in the 'party_services' table.", "metadata": {}}
{"_id": "gpt3_1910", "text": "\nThis query finds all service names from the services table that are not associated with any party services in the party_services table.", "metadata": {}}
{"_id": "gpt3_1911", "text": "\nThis query will return the name, city, country, and elevation of all airports located in New York.", "metadata": {}}
{"_id": "gpt3_1912", "text": "\nThis query will select the name, city, country, and elevation of all airports located in New York.", "metadata": {}}
{"_id": "gpt3_1913", "text": "\nThis query will select the name, city, country, and elevation of all airports located in New York.", "metadata": {}}
{"_id": "gpt3_1914", "text": "\nThis query will select the name, city, country, and elevation of all airports located in New York.", "metadata": {}}
{"_id": "gpt3_1915", "text": "\nThis query will select the name, city, country, and elevation of all airports located in New York.", "metadata": {}}
{"_id": "gpt3_1916", "text": "\nThis query selects the city code with the most students and displays the result in descending order, with a limit of one result.", "metadata": {}}
{"_id": "gpt3_1917", "text": "\nThis query returns the city code that appears the most in the student table, ordered by the number of occurrences in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_1918", "text": "\nThis query will select the city code with the highest count of students, and return the city code that appears the most in the student table.", "metadata": {}}
{"_id": "gpt3_1919", "text": "\nThis query returns the city code with the highest number of students, ordered by the number of students in each city code.", "metadata": {}}
{"_id": "gpt3_1920", "text": "\nThis query will select the city code with the highest count of students from the student table, and return the top result.", "metadata": {}}
{"_id": "gpt3_1921", "text": "\nThis query returns the count of the number of rows in the list table that have the same classroom as a teacher with the firstname \"TARRING\" and the lastname \"LEIA\".", "metadata": {}}
{"_id": "gpt3_1922", "text": "\nThis query will count the number of entries in the list table that have a matching classroom to the specified teacher, Tarring Leia.", "metadata": {}}
{"_id": "gpt3_1923", "text": "\nThis query counts the number of entries in the list table that have a classroom that matches the classroom of the teacher named Tarring Leia.", "metadata": {}}
{"_id": "gpt3_1924", "text": "\nThis query will return the number of students in the classroom of teacher Tarring Leia.", "metadata": {}}
{"_id": "gpt3_1925", "text": "\nThis query will return the total number of records from the list table that are associated with the classroom of the teacher with the first name \"Tarring\" and the last name \"Leia\".", "metadata": {}}
{"_id": "gpt3_1926", "text": "\nThe query will return the document type description \"Motion Picture\" for the document type name \"Film\".", "metadata": {}}
{"_id": "gpt3_1927", "text": "\nThe query would return the description of the document type \"Film\" from the Ref_document_types table.", "metadata": {}}
{"_id": "gpt3_1928", "text": "\nThe query would return the description of the document type \"Film\".", "metadata": {}}
{"_id": "gpt3_1929", "text": "\nThe query will return the document type description for \"Film\" which is \"Motion Pictures; films; movies; movies on video; etc.\"", "metadata": {}}
{"_id": "gpt3_1930", "text": "\nThe query will return the description of the document type \"Film\".", "metadata": {}}
{"_id": "gpt3_1931", "text": "\nThis query returns the semester and year of the section with the highest number of entries in the SECTION table. It orders the results by the count of entries in the table in descending order, and then limits the results to the first row.", "metadata": {}}
{"_id": "gpt3_1932", "text": "\nThis query returns the semester and year of the section with the most number of entries. It will return the semester and year of the section with the highest count of entries, ordered by count in descending order, and limited to the first result.", "metadata": {}}
{"_id": "gpt3_1933", "text": "\nThis query returns the semester and year of the section with the highest count.", "metadata": {}}
{"_id": "gpt3_1934", "text": "\nThis query will return the semester and year of the section with the highest number of records in the SECTION table, ordered by count in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_1935", "text": "\nThis query will select the semester and year from the section table, group them by semester and year, order them by the count in descending order, and limit the result to one row. The result will be the semester and year with the highest count", "metadata": {}}
{"_id": "gpt3_1936", "text": "\nThis query will select the names of the three colleges with the highest enrollment from the college table and order them in descending order.", "metadata": {}}
{"_id": "gpt3_1937", "text": "\nThis query will select the name of the top three colleges with the highest enrollment numbers from the \"college\" table and order them in descending order.", "metadata": {}}
{"_id": "gpt3_1938", "text": "\nThis query will select the three colleges with the highest enrollment from the college table and order them from highest to lowest enrollment.", "metadata": {}}
{"_id": "gpt3_1939", "text": "\nThis query selects the three colleges with the highest enrollment from the college table and orders them in descending order.", "metadata": {}}
{"_id": "gpt3_1940", "text": "\nThis query returns the names of the three colleges with the highest enrollment in descending order.", "metadata": {}}
{"_id": "gpt3_1941", "text": "\nThis query will return the locations of all cinemas in the table and the count of cinemas in each location.", "metadata": {}}
{"_id": "gpt3_1942", "text": "\nThis query will return the location of a cinema and the total number of cinemas in each location.", "metadata": {}}
{"_id": "gpt3_1943", "text": "\nThis query will return the total number of cinemas in each location.", "metadata": {}}
{"_id": "gpt3_1944", "text": "\nThis query will return the locations of cinemas and the total number of cinemas in each location.", "metadata": {}}
{"_id": "gpt3_1945", "text": "\nThis query returns the count of all rows in the cinema table grouped by their location.", "metadata": {}}
{"_id": "gpt3_1946", "text": "\nThis query will return the total number of records in the perpetrator table.", "metadata": {}}
{"_id": "gpt3_1947", "text": "\nThis query returns the total number of records in the perpetrator table.", "metadata": {}}
{"_id": "gpt3_1948", "text": "\nThis query will return the total number of records in the perpetrator table.", "metadata": {}}
{"_id": "gpt3_1949", "text": "\nThis query will return the total number of records in the perpetrator table.", "metadata": {}}
{"_id": "gpt3_1950", "text": "\nThis query will return the total number of perpetrators in a table.", "metadata": {}}
{"_id": "gpt3_1951", "text": "\nThe query will return the average number of hours worked on all projects.", "metadata": {}}
{"_id": "gpt3_1952", "text": "\nThis query will return the average number of hours worked on all projects.", "metadata": {}}
{"_id": "gpt3_1953", "text": "\nThis query will return the average number of hours worked on all projects.", "metadata": {}}
{"_id": "gpt3_1954", "text": "\nThis query will return the average number of hours worked on all projects.", "metadata": {}}
{"_id": "gpt3_1955", "text": "\nThis query returns the average number of hours worked on all projects.", "metadata": {}}
{"_id": "gpt3_1956", "text": "\nThis query selects all the aircraft from the aircraft table that are located at London Gatwick Airport.", "metadata": {}}
{"_id": "gpt3_1957", "text": "\nThis query selects the aircraft from the aircraft table that are located at London Gatwick Airport.", "metadata": {}}
{"_id": "gpt3_1958", "text": "\nThis query will select the aircraft from the aircraft table that are associated with London Gatwick Airport.", "metadata": {}}
{"_id": "gpt3_1959", "text": "\nThis query will select all aircraft from the aircraft table that are associated with London Gatwick Airport in the airport_aircraft and airport tables.", "metadata": {}}
{"_id": "gpt3_1960", "text": "\nThis query selects the aircraft from the aircraft table that are located at London Gatwick Airport by joining the aircraft, airport_aircraft, and airport tables on their respective IDs.", "metadata": {}}
{"_id": "gpt3_1961", "text": "\nThis query will select the engineer ID, first name, and last name of the maintenance engineer who has had the most visits, as determined by counting the number of visits in the Engineer_Visits table and ordering the results by the highest count.", "metadata": {}}
{"_id": "gpt3_1962", "text": "\nThis query selects the engineer with the most visits to a location, by selecting the engineer's ID, first name, and last name from the Maintenance_Engineers table, and joining it with the Engineer_Visits table. It then groups the results", "metadata": {}}
{"_id": "gpt3_1963", "text": "\nThis query selects the engineer with the most visits from the Maintenance_Engineers and Engineer_Visits tables, and returns the engineer's ID, first name, and last name.", "metadata": {}}
{"_id": "gpt3_1964", "text": "\nThis query selects the engineer with the most visits from the Maintenance Engineers and Engineer Visits tables, ordering by the count of visits and limiting the result to one.", "metadata": {}}
{"_id": "gpt3_1965", "text": "\nThis query will select the engineer ID, first name, and last name of the Maintenance Engineer who has made the most visits, ordered by the number of visits in descending order and limited to the top result.", "metadata": {}}
{"_id": "gpt3_1966", "text": "\nThis query will select the district name of the district with the highest population from the district table, and return the top result.", "metadata": {}}
{"_id": "gpt3_1967", "text": "\nThis query will return the name of the district with the highest population from the district table, ordered by city population in descending order and limiting the results to one.", "metadata": {}}
{"_id": "gpt3_1968", "text": "\nThis query returns the name of the district with the highest population, sorted in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_1969", "text": "\nThis query will select the district name from the district table, ordered by the city population in descending order, and limit the result to one record.", "metadata": {}}
{"_id": "gpt3_1970", "text": "\nThis query retrieves the district name of the district with the highest population from the district table, ordered by city population in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_1971", "text": "\nThis query will return a count of the number of roller coasters for each status (active, retired, under construction).", "metadata": {}}
{"_id": "gpt3_1972", "text": "\nThis query will return the number of roller coasters with each status (e.g. open, closed, under construction, etc). The results will include the status and the number of roller coasters with that status.", "metadata": {}}
{"_id": "gpt3_1973", "text": "\nThis query would return a list of the number of roller coasters for each status, such as operational, under construction, and retired.", "metadata": {}}
{"_id": "gpt3_1974", "text": "\nThis query will return a count of the number of roller coasters in each status. The output will look something like this:\n\nStatus | Count\nactive | X\nclosed | Y\nretired | Z", "metadata": {}}
{"_id": "gpt3_1975", "text": "\nThis query will count the number of roller coasters for each status. The result will be a table with two columns, one for the status and one for the count.", "metadata": {}}
{"_id": "gpt3_1976", "text": "\nThis query will return a list of all ships in the database, sorted by Tonnage in ascending order.", "metadata": {}}
{"_id": "gpt3_1977", "text": "\nThe above SQL query selects the Name of a ship from a table and orders it by ascending Tonnage. This query will return a list of ship names, in order from lowest to highest tonnage.", "metadata": {}}
{"_id": "gpt3_1978", "text": "\nThis query will select the Name of ships from a ship table and order them by Tonnage in ascending order.", "metadata": {}}
{"_id": "gpt3_1979", "text": "\nThis query will select the name of each ship from the table and order them from lowest to highest tonnage.", "metadata": {}}
{"_id": "gpt3_1980", "text": "\nThis query will select the name of all ships from the ship table, and order them by ascending tonnage.", "metadata": {}}
{"_id": "gpt3_1981", "text": "\nThis query retrieves the route name of the Delivery_Routes table with the most Delivery_Route_Locations associated with it. It does this by joining the Delivery_Routes and Delivery_Route_Locations tables on the", "metadata": {}}
{"_id": "gpt3_1982", "text": "\nThis query selects the delivery route name with the most locations associated with it from the Delivery_Routes and Delivery_Route_Locations tables. It groups the routes by their route ID and orders them by the count of locations associated with each", "metadata": {}}
{"_id": "gpt3_1983", "text": "\nThis query selects the route name of the Delivery Route with the most Delivery Route Locations, ordered by count of locations in descending order, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_1984", "text": "\nThis query selects the route name from the Delivery_Routes table that has the most locations associated with it, and orders the results by the number of locations in descending order, with a limit of 1 result.", "metadata": {}}
{"_id": "gpt3_1985", "text": "\nThis query selects the route name of the Delivery Route with the most Delivery Route Locations from the Delivery_Routes and Delivery_Route_Locations tables. The query groups the Delivery Routes by route_id, counts the number of locations", "metadata": {}}
{"_id": "gpt3_1986", "text": "\nThis query will select all the distinct invoice details from invoices where the invoice date is either before 1989-09-03 or after 2007-12-25.", "metadata": {}}
{"_id": "gpt3_1987", "text": "\nThis query will select all distinct invoice details from the invoices table where the invoice date is before September 3rd, 1989 or after December 25th, 2007.", "metadata": {}}
{"_id": "gpt3_1988", "text": "\nThis query will select all distinct invoice details from invoices where the invoice date is either before September 3, 1989 or after December 25, 2007.", "metadata": {}}
{"_id": "gpt3_1989", "text": "\nThis query will select all distinct invoice details from invoices with invoice dates before September 3, 1989, or after December 25, 2007.", "metadata": {}}
{"_id": "gpt3_1990", "text": "\nThis query will return all distinct invoice details from invoices with invoice dates before September 3rd, 1989, or after December 25th, 2007.", "metadata": {}}
{"_id": "gpt3_1991", "text": "\nThis query selects the first and last name of a student, along with the corresponding grade point of the student, from the ENROLLED_IN, GRADECONVERSION, and STUDENT tables.", "metadata": {}}
{"_id": "gpt3_1992", "text": "\nThis query selects the first name, last name, and grade point of students enrolled in a course by joining the ENROLLED_IN, GRADECONVERSION, and STUDENT tables.", "metadata": {}}
{"_id": "gpt3_1993", "text": "\nThis query selects the first name, last name, and grade point of students enrolled in a course, based on their letter grade.", "metadata": {}}
{"_id": "gpt3_1994", "text": "\nThis query selects the first and last name of a student, as well as their grade point, from the ENROLLED_IN, GRADECONVERSION, and STUDENT tables.", "metadata": {}}
{"_id": "gpt3_1995", "text": "\nThis query retrieves the first name, last name, and grade point of the students enrolled in a course.", "metadata": {}}
{"_id": "gpt3_1996", "text": "\nThis query selects the firstname and lastname of the bandmate in the band who is performing the song \"Der Kapitan\" in the back position.", "metadata": {}}
{"_id": "gpt3_1997", "text": "\nThis query will return the first and last names of all band members who performed the song \"Der Kapitan\" in the back position.", "metadata": {}}
{"_id": "gpt3_1998", "text": "\nThis query will select the first name and last name of the band members who performed in the song \"Der Kapitan\" and were in the back position on stage.", "metadata": {}}
{"_id": "gpt3_1999", "text": "\nThis query will return the firstname and lastname of any bandmate who is performing the song \"Der Kapitan\" in a back stage position.", "metadata": {}}
{"_id": "gpt3_2000", "text": "\nThis query selects the first and last names of the bandmates in the Performance table who are in the back position for the song \"Der Kapitan\" in the Songs table.", "metadata": {}}
{"_id": "gpt3_2001", "text": "\nThis query will return the names of the three most recent festivals in descending order based on the year they were held.", "metadata": {}}
{"_id": "gpt3_2002", "text": "\nThis query will return the names of the three most recent festivals in descending order by year.", "metadata": {}}
{"_id": "gpt3_2003", "text": "\nThis query returns the names of the three most recent festivals, ordered by year in descending order.", "metadata": {}}
{"_id": "gpt3_2004", "text": "\nThis query will return the names of the last three festivals in descending order of year.", "metadata": {}}
{"_id": "gpt3_2005", "text": "\nThe query will return the names of the three most recently held festivals, in descending order by year. The results will be: Festival Name 1, Festival Name 2, and Festival Name 3.", "metadata": {}}
{"_id": "gpt3_2006", "text": "\nThis query will return the number of students in the classroom of teacher Tarring Leia.", "metadata": {}}
{"_id": "gpt3_2007", "text": "\nThis query returns the total number of students in the class of teacher Tarring Leia.", "metadata": {}}
{"_id": "gpt3_2008", "text": "\nThis query will return the number of rows in the list table that have a classroom that matches the classroom of the teacher named Tarring Leia.", "metadata": {}}
{"_id": "gpt3_2009", "text": "\nThis query counts the number of entries in the list table which have the same classroom as a teacher named Tarring Leia.", "metadata": {}}
{"_id": "gpt3_2010", "text": "\nThis query will count the number of records in the list table that have the same classroom as the teacher \"TARRING LEIA\".", "metadata": {}}
{"_id": "gpt3_2011", "text": "\nThis query will select the date of all transactions where the share count is greater than or equal to 100, or the amount of the transaction is greater than or equal to 100.", "metadata": {}}
{"_id": "gpt3_2012", "text": "\nThis query will return all of the dates of transactions from the TRANSACTIONS table where the share count is greater than or equal to 100 or the amount of the transaction is greater than or equal to 100.", "metadata": {}}
{"_id": "gpt3_2013", "text": "\nThis SQL statement will select the date of transaction from the TRANSACTIONS table where the share count is greater than or equal to 100, or the amount of the transaction is greater than or equal to 100.", "metadata": {}}
{"_id": "gpt3_2014", "text": "\nThis query will return all dates of transactions from the TRANSACTIONS table where the share count is greater than or equal to 100 or the amount of the transaction is greater than or equal to 100.", "metadata": {}}
{"_id": "gpt3_2015", "text": "\nThis query will return all the dates of transactions from the TRANSACTIONS table where the share count is greater than or equal to 100 or the amount of the transaction is greater than or equal to 100.", "metadata": {}}
{"_id": "gpt3_2016", "text": "\nThis query will return the company and main industry of all companies that are not headquartered in the United States.", "metadata": {}}
{"_id": "gpt3_2017", "text": "\nThis query will select the company and main industry from the company table where the headquarters is not located in the USA.", "metadata": {}}
{"_id": "gpt3_2018", "text": "\nThis query will return a list of companies and their main industry that are headquartered outside of the United States.", "metadata": {}}
{"_id": "gpt3_2019", "text": "\nThis query will select the company name and main industry from companies whose headquarters are not located in the USA.", "metadata": {}}
{"_id": "gpt3_2020", "text": "\nThis query will return a list of companies and their main industries that are not located in the USA.", "metadata": {}}
{"_id": "gpt3_2021", "text": "\nThis query will select the maximum, minimum, and product type code from the products table and group the results by product type code, ordering them in ascending order by product type code. The result will be a list of the maximum, minimum, and", "metadata": {}}
{"_id": "gpt3_2022", "text": "\nThis query will return the maximum and minimum product prices for each product type code in the products table, ordered by product type code.", "metadata": {}}
{"_id": "gpt3_2023", "text": "\nThis query will return the maximum and minimum prices for each product type code in the products table, ordered by product type code.", "metadata": {}}
{"_id": "gpt3_2024", "text": "\nThis query will return the maximum and minimum product prices for each product type code, in ascending order of product type code.", "metadata": {}}
{"_id": "gpt3_2025", "text": "\nThis query will return the maximum product price, the minimum product price, and the product type code for each type of product in the products table, sorted by product type code.", "metadata": {}}
{"_id": "gpt3_2026", "text": "\nThis query retrieves the first name and last name of a student from the Student table.", "metadata": {}}
{"_id": "gpt3_2027", "text": "\nThis query will return the first and last name of all students in the Student table.", "metadata": {}}
{"_id": "gpt3_2028", "text": "\nThis query will select the first and last name of all students from the Student table.", "metadata": {}}
{"_id": "gpt3_2029", "text": "\nThis query will return the first and last name of all students from the Student table.", "metadata": {}}
{"_id": "gpt3_2030", "text": "\nThis query will select the first and last names of students from the Student table.", "metadata": {}}
{"_id": "gpt3_2031", "text": "\nThis query will return a list of titles from courses that do not have any prerequisites.", "metadata": {}}
{"_id": "gpt3_2032", "text": "\nThis query will return the titles of all courses that do not have any prerequisites.", "metadata": {}}
{"_id": "gpt3_2033", "text": "\nThis query will return all titles from the course table that do not have a course_id that is present in the prereq table.", "metadata": {}}
{"_id": "gpt3_2034", "text": "\nThis query will return a list of titles from courses that do not have any prerequisites.", "metadata": {}}
{"_id": "gpt3_2035", "text": "\nThis query will return the titles of all courses that do not have any prerequisites.", "metadata": {}}
{"_id": "gpt3_2036", "text": "\nThis query finds the minimum salary for each department with an average salary higher than the average salary of all instructors.", "metadata": {}}
{"_id": "gpt3_2037", "text": "\nThis query finds the minimum salary for each department whose average salary is greater than the average salary of all instructors.", "metadata": {}}
{"_id": "gpt3_2038", "text": "\nThis query returns the minimum salary and department name for every department whose average salary is greater than the overall average salary of all departments.", "metadata": {}}
{"_id": "gpt3_2039", "text": "\nThis query finds the minimum salary for each department in which the average salary is greater than the average salary of all instructors.", "metadata": {}}
{"_id": "gpt3_2040", "text": "\nThis query finds the minimum salary for each department whose average salary is higher than the overall average salary for all departments.", "metadata": {}}
{"_id": "gpt3_2041", "text": "\nThis query will select the faculty member from the campuses and faculty tables who has the highest number of degrees awarded in 2002.", "metadata": {}}
{"_id": "gpt3_2042", "text": "\nThis query selects the faculty member from the campuses and faculty tables who had the most degrees awarded on their campus in 2002, ordered by the number of degrees awarded.", "metadata": {}}
{"_id": "gpt3_2043", "text": "\nThis query will select the faculty member from the campuses and faculty tables with the most degrees awarded in 2002, ordered by the number of degrees in descending order.", "metadata": {}}
{"_id": "gpt3_2044", "text": "\nThis query selects the faculty member from the campuses, faculty, and degrees tables who obtained the most degrees in 2002.", "metadata": {}}
{"_id": "gpt3_2045", "text": "\nThis query selects the faculty member from campuses and faculty tables with the most degrees awarded in the year 2002. It returns the faculty member with the highest number of degrees awarded in that year.", "metadata": {}}
{"_id": "gpt3_2046", "text": "\nThis query will select the customer ID, first name, last name, and phone number of all customers in the Customers table.", "metadata": {}}
{"_id": "gpt3_2047", "text": "\nThis query will select the customer ID, first name, last name, and phone number of customers from the Customers table.", "metadata": {}}
{"_id": "gpt3_2048", "text": "\nThis query retrieves the customer ID, first name, last name, and phone number of all customers from the Customers table.", "metadata": {}}
{"_id": "gpt3_2049", "text": "\nThis query selects the customer ID, first name, last name, and phone number from the Customers table.", "metadata": {}}
{"_id": "gpt3_2050", "text": "\nThis statement selects the customer_id, customer_first_name, customer_last_name, and customer_phone columns from the Customers table.", "metadata": {}}
{"_id": "gpt3_2051", "text": "\nThis query will return the total number of unique artists in the volume table.", "metadata": {}}
{"_id": "gpt3_2052", "text": "\nThis query will return the number of distinct Artist_IDs in the volume table.", "metadata": {}}
{"_id": "gpt3_2053", "text": "\nThis query will return the total number of distinct Artist_ID values in the volume table.", "metadata": {}}
{"_id": "gpt3_2054", "text": "\nThis query returns the number of distinct Artist_ID values in the volume table.", "metadata": {}}
{"_id": "gpt3_2055", "text": "\nThis query returns the total number of distinct Artist_IDs in the volume table.", "metadata": {}}
{"_id": "gpt3_2056", "text": "\nThis statement will select all of the distinct cities from the branch table where the membership amount is greater than or equal to 100.", "metadata": {}}
{"_id": "gpt3_2057", "text": "\nThis query will select all distinct cities from the branch table where the membership amount is greater than or equal to 100.", "metadata": {}}
{"_id": "gpt3_2058", "text": "\nThis query will select all distinct cities from the branch table where the membership amount is greater than or equal to 100.", "metadata": {}}
{"_id": "gpt3_2059", "text": "\nThis statement will select all the distinct cities from the branch table where the membership amount is greater than or equal to 100.", "metadata": {}}
{"_id": "gpt3_2060", "text": "\nThis statement will select all the distinct cities from the branch table where the membership_amount is greater than or equal to 100.", "metadata": {}}
{"_id": "gpt3_2061", "text": "\nThis query will select the employee_id and salary of all employees who have Payam as their manager.", "metadata": {}}
{"_id": "gpt3_2062", "text": "\nThis query will select the employee_id and salary from the employees table for all employees who have a manager_id equal to the employee_id of the employee whose first name is 'Payam'.", "metadata": {}}
{"_id": "gpt3_2063", "text": "\nThis query will select the employee ID and salary of all employees who have Payam as their manager.", "metadata": {}}
{"_id": "gpt3_2064", "text": "\nThis query will select the employee IDs and salaries of all employees whose manager is Payam.", "metadata": {}}
{"_id": "gpt3_2065", "text": "\nThis statement will select the employee_id and salary of all employees whose manager_id is the employee_id of the employee with the first name Payam.", "metadata": {}}
{"_id": "gpt3_2066", "text": "\nThis query will return the average product price for each product category code in the products table.", "metadata": {}}
{"_id": "gpt3_2067", "text": "\nThis query will return the average product price for each product category code from the products table.", "metadata": {}}
{"_id": "gpt3_2068", "text": "\nThis query will return the average product price for each product category code in the products table.", "metadata": {}}
{"_id": "gpt3_2069", "text": "\nThis query will return the average product price for each product category code from the products table.", "metadata": {}}
{"_id": "gpt3_2070", "text": "\nThis query returns the average product price for each product category code in the products table.", "metadata": {}}
{"_id": "gpt3_2071", "text": "\nThis query will count the number of records in the list and teachers tables that have a matching classroom and the first and last name of \"MADLOCK RAY\".", "metadata": {}}
{"_id": "gpt3_2072", "text": "\nThis query will return the number of classrooms that MADLOCK RAY is enrolled in.", "metadata": {}}
{"_id": "gpt3_2073", "text": "\nThis query will count the number of records in the list and teachers tables where the firstname is \"MADLOCK\" and the lastname is \"RAY\" and the classroom matches between the two tables.", "metadata": {}}
{"_id": "gpt3_2074", "text": "\nThis query will return the count of the number of records in the list and teachers tables that have the firstname \"MADLOCK\" and lastname \"RAY\" and have the same classroom.", "metadata": {}}
{"_id": "gpt3_2075", "text": "\nThis query will count the number of rows in the list table that have a firstname of \"MADLOCK\" and a lastname of \"RAY\" and have a matching classroom in the teachers table.", "metadata": {}}
{"_id": "gpt3_2076", "text": "\nThis query returns the first name, last name, and actor ID of the actor who has starred in the most films.", "metadata": {}}
{"_id": "gpt3_2077", "text": "\nThis query selects the first and last name of the actor with the most film credits, as well as their actor id, from the film_actor and actor tables. It groups the results by actor id and orders them by count, in descending order", "metadata": {}}
{"_id": "gpt3_2078", "text": "\nThis query selects the first name, last name, and actor ID of the actor who has been in the most films. The query joins the film_actor and actor tables and groups the results by the actor ID, ordering them by the count of", "metadata": {}}
{"_id": "gpt3_2079", "text": "\nThis query selects the first name, last name, and actor ID of the actor who has the most film credits. It joins the film_actor and actor tables and groups the results by actor ID, then orders the results by the number of credits", "metadata": {}}
{"_id": "gpt3_2080", "text": "\nThis query selects the first name, last name, and actor ID of the actor who has starred in the most films, ordered by the number of films they have appeared in, with the actor appearing in the most films at the top.", "metadata": {}}
{"_id": "gpt3_2081", "text": "\nThis query will return the number of products in the \"Spices\" category that have a typical buying price greater than 1000.", "metadata": {}}
{"_id": "gpt3_2082", "text": "\nThis query will return the number of products in the \"Spices\" category that have a typical buying price of more than 1000.", "metadata": {}}
{"_id": "gpt3_2083", "text": "\nThis query will return the number of products in the \"Spices\" category with a typical buying price greater than 1000.", "metadata": {}}
{"_id": "gpt3_2084", "text": "\nThis query will return the count of all products in the products table whose product category code is \"Spices\" and whose typical buying price is greater than 1000.", "metadata": {}}
{"_id": "gpt3_2085", "text": "\nThis query will return the number of products in the category \"Spices\" that have a typical buying price greater than 1000.", "metadata": {}}
{"_id": "gpt3_2086", "text": "\nThe SELECT * FROM item statement is a SQL query that retrieves all of the columns and rows from the item table in a database.", "metadata": {}}
{"_id": "gpt3_2087", "text": "\nThe SELECT * FROM item statement is a SQL query that retrieves all columns and records from the item table.", "metadata": {}}
{"_id": "gpt3_2088", "text": "\nThe SELECT * FROM item statement is a SQL query that retrieves all records from the item table. It will return all columns and rows from the table.", "metadata": {}}
{"_id": "gpt3_2089", "text": "\nThis statement is a SELECT query that retrieves all rows and columns from the item table.", "metadata": {}}
{"_id": "gpt3_2090", "text": "\nThe SELECT * FROM item statement is a SQL query that will retrieve all data from the item table. This query will return all columns and rows from the item table.", "metadata": {}}
{"_id": "gpt3_2091", "text": "\nThis query will return the names of all pilots who have not won a match in Australia.", "metadata": {}}
{"_id": "gpt3_2092", "text": "\nThis query will return the names of all pilots who have not won a match in Australia.", "metadata": {}}
{"_id": "gpt3_2093", "text": "\nThis query will select the name of all pilots who have not won a match in Australia.", "metadata": {}}
{"_id": "gpt3_2094", "text": "\nThis query will select the name of all pilots who have not won a match in Australia.", "metadata": {}}
{"_id": "gpt3_2095", "text": "\nThis query selects the names of all pilots who have not won a match in Australia.", "metadata": {}}
{"_id": "gpt3_2096", "text": "\nThis query finds the document type code with the highest count in the Documents table and returns it as the result.", "metadata": {}}
{"_id": "gpt3_2097", "text": "\nThis query will return the document type code that appears most often in the Documents table, ordered by the number of occurrences.", "metadata": {}}
{"_id": "gpt3_2098", "text": "\nThis query returns the document type code with the highest count from the Documents table, ordered in descending order.", "metadata": {}}
{"_id": "gpt3_2099", "text": "\nThis query returns the document type code with the highest count from the Documents table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_2100", "text": "\nThis query will select the most frequently occurring document type code from the Documents table and return it as the result.", "metadata": {}}
{"_id": "gpt3_2101", "text": "\nThis query returns the count of all rooms in the Rooms table with a bed type of \"King\".", "metadata": {}}
{"_id": "gpt3_2102", "text": "\nThis query will count the number of rooms with a bed type of \"King\".", "metadata": {}}
{"_id": "gpt3_2103", "text": "\nThis query would count the number of rooms with a bed type of King.", "metadata": {}}
{"_id": "gpt3_2104", "text": "\nThis query will return the number of rooms that have a bed type of \"King\".", "metadata": {}}
{"_id": "gpt3_2105", "text": "\nThis query counts the number of rooms in a table that have a bed type of \"King\".", "metadata": {}}
{"_id": "gpt3_2106", "text": "\nThis query selects the name and course ID of instructors from the instructor and teaches tables, joining the tables based on the instructor ID.", "metadata": {}}
{"_id": "gpt3_2107", "text": "\nThis statement retrieves the name and course_id from the instructor and teaches tables, joining on the ID column.", "metadata": {}}
{"_id": "gpt3_2108", "text": "\nThis query returns the name and course_id of instructors who teach courses from the instructor and teaches tables.", "metadata": {}}
{"_id": "gpt3_2109", "text": "\nThis query selects the name and course_id from the instructor and teaches tables, based on the instructor ID in both tables.", "metadata": {}}
{"_id": "gpt3_2110", "text": "\nThis statement selects the name and course_id from the instructor and teaches tables, joining the two tables on the ID field.", "metadata": {}}
{"_id": "gpt3_2111", "text": "\nThe query returns the maximum and minimum milliseconds of all the tracks in the Pop genre.", "metadata": {}}
{"_id": "gpt3_2112", "text": "\nThis query finds the maximum and minimum Milliseconds values from the TRACK table for the genre \"Pop\". The result of this query would be the maximum and minimum Milliseconds values for the Pop genre.", "metadata": {}}
{"_id": "gpt3_2113", "text": "\nThis query will return the maximum and minimum values of the Milliseconds column from the TRACK table for the genre \"Pop\".", "metadata": {}}
{"_id": "gpt3_2114", "text": "\nThe query returns the maximum and minimum milliseconds of all tracks in the Pop genre.", "metadata": {}}
{"_id": "gpt3_2115", "text": "\nThe query returns the maximum and minimum Milliseconds values from the TRACK table for the genre \"Pop\".", "metadata": {}}
{"_id": "gpt3_2116", "text": "\nThis query will return the total enrollment of all colleges in the College table.", "metadata": {}}
{"_id": "gpt3_2117", "text": "\nThis query will return the sum of all enrollment numbers (enr) from the College table.", "metadata": {}}
{"_id": "gpt3_2118", "text": "\nThe query above will return the sum of all the values in the \"enr\" column of the College table.", "metadata": {}}
{"_id": "gpt3_2119", "text": "\nThe query will return the sum of all enrollment numbers from the College table.", "metadata": {}}
{"_id": "gpt3_2120", "text": "\nThe query will return the sum of all enrollment values in the College table.", "metadata": {}}
{"_id": "gpt3_2121", "text": "\nThis query will select the policy type code with the highest count from the policies table and display it first in the results.", "metadata": {}}
{"_id": "gpt3_2122", "text": "\nThis query will return the policy type code that appears the most in the policies table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_2123", "text": "\nThis query will return the policy type code that appears the most in the policies table, ordered by count in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_2124", "text": "\nThis query will return the most common policy type code from the 'policies' table, ordered by the count of each policy type code, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_2125", "text": "\nThis query selects the policy type code with the highest count from the policies table, and returns the most common policy type code.", "metadata": {}}
{"_id": "gpt3_2126", "text": "\nThis query will select the type of vocals (e.g. lead, backup, etc.) that Marianne is most commonly associated with, based on the bandmates she has been in. It will do this by joining the vocals and band tables", "metadata": {}}
{"_id": "gpt3_2127", "text": "\nThis query will return the type of vocals that Marianne performs most often in the band, based on the bandmate ID and firstname of Marianne from the vocals and band tables, respectively. It will group the results by type and order them", "metadata": {}}
{"_id": "gpt3_2128", "text": "\nThis query will return the type of vocal that Marianne performs in the band she is a part of, sorted by the number of times she has performed that type of vocal and limited to the type of vocal she has performed the most.", "metadata": {}}
{"_id": "gpt3_2129", "text": "\nThis query will return the type of vocals (e.g. lead, backing, etc.) that Marianne most commonly performs in bands, as determined by the number of times she has performed that type in a band.", "metadata": {}}
{"_id": "gpt3_2130", "text": "\nThis query returns the type of vocal from the vocals table which Marianne has the most of, ordered by the number of vocals of that type.", "metadata": {}}
{"_id": "gpt3_2131", "text": "\nThis query will select all distinct titles from the Movie table that have not been rated by Chris Jackson from the Reviewer table.", "metadata": {}}
{"_id": "gpt3_2132", "text": "\nThis query will select all distinct titles from the Movie table that have not been reviewed by Chris Jackson.", "metadata": {}}
{"_id": "gpt3_2133", "text": "\nThis query will return a list of all distinct movie titles from the Movie table that have not been reviewed by the reviewer named Chris Jackson.", "metadata": {}}
{"_id": "gpt3_2134", "text": "\nThis query returns the titles of all movies that have not been reviewed by Chris Jackson.", "metadata": {}}
{"_id": "gpt3_2135", "text": "\nThis query will return a list of all the distinct titles of movies in the Movie table that Chris Jackson has not reviewed.", "metadata": {}}
{"_id": "gpt3_2136", "text": "\nThis query retrieves customer information from two tables (Customers_cards and Customers) by joining them on the customer_id column. It then groups the results by customer_id, and only returns results where the customer has two or more cards", "metadata": {}}
{"_id": "gpt3_2137", "text": "\nThis query retrieves customer information from two tables, Customers_cards and Customers, by joining them based on the customer_id. It then groups the results by customer_id and only returns customers who have more than two entries in the Customers_", "metadata": {}}
{"_id": "gpt3_2138", "text": "\nThis query retrieves the customer IDs, first names, and last names from the Customers_cards and Customers tables for customers who have two or more cards.", "metadata": {}}
{"_id": "gpt3_2139", "text": "\nThis query retrieves the customer ID, first name, and last name of customers who have more than two customer cards. It does this by joining the Customers_cards and Customers tables on the customer_id column, grouping the results by customer_", "metadata": {}}
{"_id": "gpt3_2140", "text": "\nThis query selects the customer_id, customer_first_name, and customer_last_name from two tables, Customers_cards and Customers, and groups them by customer_id where the count of customer_id is greater than or equal", "metadata": {}}
{"_id": "gpt3_2141", "text": "\nThis query returns the total number of rows in the appointment table.", "metadata": {}}
{"_id": "gpt3_2142", "text": "\nThis query will return the number of rows in the appointment table.", "metadata": {}}
{"_id": "gpt3_2143", "text": "\nThis query will return the total number of rows in the appointment table.", "metadata": {}}
{"_id": "gpt3_2144", "text": "\nThis query returns the total number of rows in the appointment table.", "metadata": {}}
{"_id": "gpt3_2145", "text": "\nThis query returns the total number of records in the appointment table.", "metadata": {}}
{"_id": "gpt3_2146", "text": "\nThis query will return the customer_id and the count of each customer_id from the Accounts table. It will group the results by customer_id, allowing for a count of each customer_id to be displayed.", "metadata": {}}
{"_id": "gpt3_2147", "text": "\nThis query will return a list of customer IDs and the count of accounts associated with each customer ID.", "metadata": {}}
{"_id": "gpt3_2148", "text": "\nThis query will return a list of customer IDs and the number of accounts associated with each customer.", "metadata": {}}
{"_id": "gpt3_2149", "text": "\nThis query will select the customer_id and count the number of records associated with each customer_id from the Accounts table and group the results by customer_id.", "metadata": {}}
{"_id": "gpt3_2150", "text": "\nThis query will return a list of customer IDs and a count of the number of accounts associated with each customer.", "metadata": {}}
{"_id": "gpt3_2151", "text": "\nThis query will return a count of the number of matches for each competition.", "metadata": {}}
{"_id": "gpt3_2152", "text": "\nThis query will count the number of matches for each competition and group the results by competition.", "metadata": {}}
{"_id": "gpt3_2153", "text": "\nThis query will return a count of the number of matches in each competition.", "metadata": {}}
{"_id": "gpt3_2154", "text": "\nThis query will return the number of matches (count(*)) for each competition (Competition) in the MATCH table.", "metadata": {}}
{"_id": "gpt3_2155", "text": "\nThis query will return the count of matches for each competition in the Match table. The result will be a table with two columns, one for the number of matches in the competition and one for the name of the competition.", "metadata": {}}
{"_id": "gpt3_2156", "text": "\nThis query selects the customer name and customer phone number from customers, customer_addresses, and addresses tables for customers who live in California.", "metadata": {}}
{"_id": "gpt3_2157", "text": "\nThis query selects the customer names and customer phone numbers from customers who have an address in the state of California.", "metadata": {}}
{"_id": "gpt3_2158", "text": "\nThis statement selects the customer name and phone number from customers and customer_addresses tables, where the address is located in California.", "metadata": {}}
{"_id": "gpt3_2159", "text": "\nThis query selects the customer name and phone number from customers, customer addresses, and addresses tables where the state/province/county is 'California'.", "metadata": {}}
{"_id": "gpt3_2160", "text": "\nThis query selects the customer name and customer phone from customers, customer_addresses, and addresses tables where the state_province_county is 'California'.", "metadata": {}}
{"_id": "gpt3_2161", "text": "\nThis query selects the monthly rental amounts from the Student_Addresses table for all addresses in the Addresses table located in the state of Texas.", "metadata": {}}
{"_id": "gpt3_2162", "text": "\nThis query will select the monthly rental of all student addresses located in the state of Texas.", "metadata": {}}
{"_id": "gpt3_2163", "text": "\nThis query selects the monthly rental for all addresses in Texas from the Student_Addresses table.", "metadata": {}}
{"_id": "gpt3_2164", "text": "\nThis query will select the monthly rental amounts of all student addresses in the state of Texas.", "metadata": {}}
{"_id": "gpt3_2165", "text": "\nThis query selects the monthly rental amount from the Student_Addresses table for all addresses in the Addresses table located in Texas.", "metadata": {}}
{"_id": "gpt3_2166", "text": "\nThis query selects the job_id from the job_history table where the difference between the end_date and start_date is greater than 300 and groups the results by job_id, having a count of at least 2.", "metadata": {}}
{"_id": "gpt3_2167", "text": "\nThis query is used to select job_id values from the job_history table where the difference between the end_date and start_date is greater than 300 and there are at least two records with the same job_id.", "metadata": {}}
{"_id": "gpt3_2168", "text": "\nThis query will select the job_id from the job_history table where the difference between the end_date and start_date is greater than 300 days and has been held for at least two separate periods.", "metadata": {}}
{"_id": "gpt3_2169", "text": "\nThis query will select the job_id from the job_history table where the difference between the end_date and start_date is greater than 300 and group the result by job_id, having a count of 2 or more. This query", "metadata": {}}
{"_id": "gpt3_2170", "text": "\nThis query returns the job_id of any job that has been held for more than 300 days and has been held by the same person at least twice.", "metadata": {}}
{"_id": "gpt3_2171", "text": "\nThis query would count the number of artists from Bangladesh in the artist table.", "metadata": {}}
{"_id": "gpt3_2172", "text": "\nThis query will return the total number of artists from Bangladesh.", "metadata": {}}
{"_id": "gpt3_2173", "text": "\nThis query counts the number of artists from Bangladesh.", "metadata": {}}
{"_id": "gpt3_2174", "text": "\nThis query will return the total number of artists from Bangladesh in the database.", "metadata": {}}
{"_id": "gpt3_2175", "text": "\nThis query will return the number of artists from Bangladesh.", "metadata": {}}
{"_id": "gpt3_2176", "text": "\nThis query will count the number of distinct industries represented in the Companies table.", "metadata": {}}
{"_id": "gpt3_2177", "text": "\nThis query will return the number of distinct industries represented in the Companies table.", "metadata": {}}
{"_id": "gpt3_2178", "text": "\nThis query will return the number of distinct industries in the Companies table.", "metadata": {}}
{"_id": "gpt3_2179", "text": "\nThis query will return the number of distinct industries present in the Companies table.", "metadata": {}}
{"_id": "gpt3_2180", "text": "\nThis query will return the number of distinct industries present in the Companies table.", "metadata": {}}
{"_id": "gpt3_2181", "text": "\nThis query will return the type of company with the highest count, and the count of that type of company. The result will be sorted in descending order, with the highest count at the top.", "metadata": {}}
{"_id": "gpt3_2182", "text": "\nThis query returns the type of operating company with the highest count and the corresponding count.", "metadata": {}}
{"_id": "gpt3_2183", "text": "\nThis query will return the type of company with the highest count, along with the count of that type.", "metadata": {}}
{"_id": "gpt3_2184", "text": "\nThis query will return the type of company with the highest count and the corresponding count. The result will be the type of company with the highest count, and the number of companies that have that type.", "metadata": {}}
{"_id": "gpt3_2185", "text": "\nThis query returns the type of the most operated companies and the total count of companies of that type.", "metadata": {}}
{"_id": "gpt3_2186", "text": "\nThis query will select the Lieutenant Governor and Comptroller from the party table where the party is Democratic.", "metadata": {}}
{"_id": "gpt3_2187", "text": "\nThis query will select the Lieutenant Governor and Comptroller from the party table where the party is Democratic.", "metadata": {}}
{"_id": "gpt3_2188", "text": "\nThe above SQL query will return the Lieutenant Governor and Comptroller of the Democratic Party.", "metadata": {}}
{"_id": "gpt3_2189", "text": "\nThis query will return the Lieutenant Governor and Comptroller of the Democratic party.", "metadata": {}}
{"_id": "gpt3_2190", "text": "\nThis query will return the Lieutenant Governor and Comptroller of the Democratic party.", "metadata": {}}
{"_id": "gpt3_2191", "text": "\nThis query selects the employee name from the Employees table for all employees who have a role of \"Editor\" in the Roles table.", "metadata": {}}
{"_id": "gpt3_2192", "text": "\nThis query selects the employee name from the Employees table who have the role of Editor from the Roles table.", "metadata": {}}
{"_id": "gpt3_2193", "text": "\nThis query will select the employee name from the Employees table for the role name of \"Editor\" from the Roles table.", "metadata": {}}
{"_id": "gpt3_2194", "text": "\nThis query will select the employee name from the Employees table for all employees who have a role of \"Editor\" in the Roles table.", "metadata": {}}
{"_id": "gpt3_2195", "text": "\nThis SQL statement will select the employee name from the Employees table who have a role of \"Editor\" in the Roles table.", "metadata": {}}
{"_id": "gpt3_2196", "text": "\nThis query will return all names from the patient table that do not have an associated prescription for the medication 'Procrastin-X'.", "metadata": {}}
{"_id": "gpt3_2197", "text": "\nThis query returns the names of all patients who have not been prescribed the medication 'Procrastin-X'.", "metadata": {}}
{"_id": "gpt3_2198", "text": "\nThis statement will select the names of all patients from the patient table that do not have a prescription for the medication 'Procrastin-X'.", "metadata": {}}
{"_id": "gpt3_2199", "text": "\nThis query will return a list of patient names from the patient table who have not been prescribed the medication 'Procrastin-X'.", "metadata": {}}
{"_id": "gpt3_2200", "text": "\nThis statement will select the names of all patients from the patient table, except for those patients who have been prescribed the medication 'Procrastin-X'.", "metadata": {}}
{"_id": "gpt3_2201", "text": "\nThis query will select the name and nationality of the oldest host in the HOST table, ordered in descending order by age and limited to the top one result.", "metadata": {}}
{"_id": "gpt3_2202", "text": "\nThis query selects the name and nationality of the oldest host from the HOST table, and orders them in descending order by age.", "metadata": {}}
{"_id": "gpt3_2203", "text": "\nThis query will select the name and nationality of the oldest host in the HOST table, ordered in descending order by age and limited to one result.", "metadata": {}}
{"_id": "gpt3_2204", "text": "\nThis query will select the name and nationality of the oldest host from the HOST table, ordered by age in descending order, with a limit of 1 result.", "metadata": {}}
{"_id": "gpt3_2205", "text": "\nThis query will select the name and nationality of the oldest host from the HOST table and display the results in descending order.", "metadata": {}}
{"_id": "gpt3_2206", "text": "\nThis query will return the most common rank among captains in the table, ordered by the number of occurrences of each rank.", "metadata": {}}
{"_id": "gpt3_2207", "text": "\nThis query returns the most common rank of a captain from the captain table, ordered by the number of instances of that rank in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_2208", "text": "\nThis query will return the most common rank from the captain table, ordered by the number of occurrences of that rank in descending order, with a limit of 1.", "metadata": {}}
{"_id": "gpt3_2209", "text": "\nThis query returns the rank with the highest count from the captain table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_2210", "text": "\nThis query returns the rank that appears the most times in the captain table, ordered by the number of occurrences of each rank in descending order, with a limit of one result.", "metadata": {}}
{"_id": "gpt3_2211", "text": "\nThis SQL statement will select all unique Employee ID numbers from the Documents_to_be_destroyed table.", "metadata": {}}
{"_id": "gpt3_2212", "text": "\nThis query will return a list of all distinct Employee IDs from the Documents_to_be_destroyed table.", "metadata": {}}
{"_id": "gpt3_2213", "text": "\nThis SQL statement will return a list of unique employee IDs from the Documents_to_be_destroyed table.", "metadata": {}}
{"_id": "gpt3_2214", "text": "\nThis query will return a list of unique Employee IDs from the Documents_to_be_destroyed table.", "metadata": {}}
{"_id": "gpt3_2215", "text": "\nThis query will return a list of all unique employee IDs from the table Documents_to_be_destroyed.", "metadata": {}}
{"_id": "gpt3_2216", "text": "\nThe query SELECT count(*) FROM region returns the total number of records in the region table.", "metadata": {}}
{"_id": "gpt3_2217", "text": "\nThis query returns the total count of records in the region table.", "metadata": {}}
{"_id": "gpt3_2218", "text": "\nThis query counts the total number of records in the region table.", "metadata": {}}
{"_id": "gpt3_2219", "text": "\nThis query returns the total number of records in the region table.", "metadata": {}}
{"_id": "gpt3_2220", "text": "\nThis query will return the total count of records in the region table.", "metadata": {}}
{"_id": "gpt3_2221", "text": "\nThis query would return the total enrollment and affiliation of universities founded after 1850, grouped by affiliation.", "metadata": {}}
{"_id": "gpt3_2222", "text": "\nThis query will return the total enrollment and affiliation of all universities founded after 1850, grouped by affiliation.", "metadata": {}}
{"_id": "gpt3_2223", "text": "\nThis query returns the total enrollment for each affiliation of universities founded after 1850.", "metadata": {}}
{"_id": "gpt3_2224", "text": "\nThis query returns the total enrollment of universities founded after 1850 grouped by their affiliation.", "metadata": {}}
{"_id": "gpt3_2225", "text": "\nThis query will return the total enrollment of universities founded after 1850, grouped by affiliation.", "metadata": {}}
{"_id": "gpt3_2226", "text": "\nThis query selects the dorm name and student capacity from the dorm table, joins it with the has_amenity table, and then joins it with the dorm_amenity table. It then groups by the dormid and orders by the number of", "metadata": {}}
{"_id": "gpt3_2227", "text": "\nThis query selects the dorm name and student capacity of the dorm with the least number of amenities, ordered by the count of amenities, and limits the results to one.", "metadata": {}}
{"_id": "gpt3_2228", "text": "\nThis query will select the dorm name and student capacity from the dorm table, joining it with the has_amenity and dorm_amenity tables. It will then group the results by dormid and order them by the count of amenities, and", "metadata": {}}
{"_id": "gpt3_2229", "text": "\nThis query selects the dorm name and student capacity from the dorm table, joins it with the has_amenity and dorm_amenity tables, groups the results by dormid and then orders them by the count of amenities and limits the result to", "metadata": {}}
{"_id": "gpt3_2230", "text": "\nThis query returns the dorm name and student capacity of the dorm with the least number of amenities.", "metadata": {}}
{"_id": "gpt3_2231", "text": "\nThis query will count the number of records in the VOTING_RECORD table for each election cycle.", "metadata": {}}
{"_id": "gpt3_2232", "text": "\nThis query will return the number of records in the VOTING_RECORD table grouped by the election cycle.", "metadata": {}}
{"_id": "gpt3_2233", "text": "\nThis query will count the number of voting records for each election cycle.", "metadata": {}}
{"_id": "gpt3_2234", "text": "\nThis query counts the number of voting records for each election cycle.", "metadata": {}}
{"_id": "gpt3_2235", "text": "\nThis query returns the number of records in the VOTING_RECORD table grouped by the Election_Cycle column.", "metadata": {}}
{"_id": "gpt3_2236", "text": "\nThis query will return the total number of results for the 2009 Australian Grand Prix.", "metadata": {}}
{"_id": "gpt3_2237", "text": "\nThis query returns the number of results in the 2009 Australian Grand Prix.", "metadata": {}}
{"_id": "gpt3_2238", "text": "\nThis query will return the number of results from the 2009 Australian Grand Prix.", "metadata": {}}
{"_id": "gpt3_2239", "text": "\nThis query will count the number of results from the 2009 Australian Grand Prix.", "metadata": {}}
{"_id": "gpt3_2240", "text": "\nThis query returns the total number of results for the 2009 Australian Grand Prix.", "metadata": {}}
{"_id": "gpt3_2241", "text": "\nThis statement will select the product name and product type code from the Products table.", "metadata": {}}
{"_id": "gpt3_2242", "text": "\nThis statement retrieves the product name and product type code from the Products table.", "metadata": {}}
{"_id": "gpt3_2243", "text": "\nThis statement retrieves the product name and product type code from the Products table.", "metadata": {}}
{"_id": "gpt3_2244", "text": "\nThis statement would select the product name and product type code from the Products table.", "metadata": {}}
{"_id": "gpt3_2245", "text": "\nThis query selects the product name and product type code from the Products table.", "metadata": {}}
{"_id": "gpt3_2246", "text": "\nThis query retrieves the region code and region name from the region table, sorted in ascending order by region code.", "metadata": {}}
{"_id": "gpt3_2247", "text": "\nThis query will select the region code and region name from the region table and order the results by region code.", "metadata": {}}
{"_id": "gpt3_2248", "text": "\nThis query will return a list of all regions ordered by their region code. It will include the region code and region name for each region.", "metadata": {}}
{"_id": "gpt3_2249", "text": "\nThis query will select the region code and region name from the region table, and order the results by region code in ascending order.", "metadata": {}}
{"_id": "gpt3_2250", "text": "\nThis query selects the region code and region name from the region table, and orders the results by region code.", "metadata": {}}
{"_id": "gpt3_2251", "text": "\nThis query will select the first name (fname) from the student table where the age is greater than 20.", "metadata": {}}
{"_id": "gpt3_2252", "text": "\nThis query will select the first name of all students from the student table who are over the age of 20.", "metadata": {}}
{"_id": "gpt3_2253", "text": "\nThis query will select the first name (fname) from the student table where the age is greater than 20.", "metadata": {}}
{"_id": "gpt3_2254", "text": "\nThis query selects the first name (fname) of any student from the student table who is over the age of 20.", "metadata": {}}
{"_id": "gpt3_2255", "text": "\nThis query returns the first name (fname) of all students from the student table who are over the age of 20.", "metadata": {}}
{"_id": "gpt3_2256", "text": "\nThis query will return the count of customers who do not have accounts in the Accounts table.", "metadata": {}}
{"_id": "gpt3_2257", "text": "\nThis query returns the count of customers who do not have any accounts.", "metadata": {}}
{"_id": "gpt3_2258", "text": "\nThis query counts the number of customers who do not have an account in the Accounts table.", "metadata": {}}
{"_id": "gpt3_2259", "text": "\nThis query will count the number of customers who do not have any accounts.", "metadata": {}}
{"_id": "gpt3_2260", "text": "\nThis query counts the number of customers who do not have an account.", "metadata": {}}
{"_id": "gpt3_2261", "text": "\nThis query will return the start and end dates of all behavior incidents with a type code of \"NOISE\".", "metadata": {}}
{"_id": "gpt3_2262", "text": "\nThis query will return the start and end dates for all behavior incidents with the incident type code of \"NOISE\".", "metadata": {}}
{"_id": "gpt3_2263", "text": "\nThis query will return the date_incident_start and date_incident_end for all Behavior_Incident records with an incident_type_code of \"NOISE\".", "metadata": {}}
{"_id": "gpt3_2264", "text": "\nThis query will return all the start dates and end dates for behavior incidents with the incident type code of \"NOISE\".", "metadata": {}}
{"_id": "gpt3_2265", "text": "\nThis query selects the date incident start and date incident end from the Behavior Incident table where the incident type code is 'NOISE'.", "metadata": {}}
{"_id": "gpt3_2266", "text": "\nThis query selects the customer name and account balance from the customer table for customers whose name contains the letter 'a'.", "metadata": {}}
{"_id": "gpt3_2267", "text": "\nThis SQL statement selects the customer name and account balance from the customer table where the customer name contains the letter 'a'.", "metadata": {}}
{"_id": "gpt3_2268", "text": "\nThis SQL statement selects the customer name and account balance from the customer table where the customer name contains the letter 'a'.", "metadata": {}}
{"_id": "gpt3_2269", "text": "\nThis query selects the customer name and account balance from the customer table where the customer name contains the letter 'a'.", "metadata": {}}
{"_id": "gpt3_2270", "text": "\nThis query selects the customer name and account balance from the customer table where the customer name contains the letter 'a'.", "metadata": {}}
{"_id": "gpt3_2271", "text": "\nThis query selects the name of the user with the highest average trust score from the useracct and trust tables.", "metadata": {}}
{"_id": "gpt3_2272", "text": "\nThis query selects the name of the user account with the highest average trust rating from the useracct and trust tables, ordered in descending order.", "metadata": {}}
{"_id": "gpt3_2273", "text": "\nThis query selects the name of the user with the highest average trust score from the useracct and trust tables, ordered by the average trust score in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_2274", "text": "\nThis query selects the name of the user with the highest average trust rating from the useracct and trust tables.", "metadata": {}}
{"_id": "gpt3_2275", "text": "\nThis query will select the name of the user with the highest average trust rating, from the useracct and trust tables, by joining the two tables on the u_id column, grouping by source_u_id, and ordering by the", "metadata": {}}
{"_id": "gpt3_2276", "text": "\nThis query returns the total number of climbers in a given table.", "metadata": {}}
{"_id": "gpt3_2277", "text": "\nThis query returns the total number of climbers in the database.", "metadata": {}}
{"_id": "gpt3_2278", "text": "\nThis query will return the total number of climbers in the table.", "metadata": {}}
{"_id": "gpt3_2279", "text": "\nThis query will return the total number of climbers in the table.", "metadata": {}}
{"_id": "gpt3_2280", "text": "\nThis query returns the total number of climbers in the table.", "metadata": {}}
{"_id": "gpt3_2281", "text": "\nThe query will return a list of names from the people table, sorted in ascending order by date of birth.", "metadata": {}}
{"_id": "gpt3_2282", "text": "\nThis query will select the names of all people from a table ordered by date of birth.", "metadata": {}}
{"_id": "gpt3_2283", "text": "\nThe query will return a list of names from the people table, sorted in ascending order by date of birth.", "metadata": {}}
{"_id": "gpt3_2284", "text": "\nThis query will return a list of names from the people table, sorted in ascending order by date of birth.", "metadata": {}}
{"_id": "gpt3_2285", "text": "\nThis query will return a list of names from the people table, sorted in ascending order by their date of birth.", "metadata": {}}
{"_id": "gpt3_2286", "text": "\nThis query will return the most common level from the member table, ordered by the count of each level in descending order, and limited to the first result.", "metadata": {}}
{"_id": "gpt3_2287", "text": "\nThis query returns the most common level from the member table, based on the count of each level. It orders the levels by count in descending order and returns the top result.", "metadata": {}}
{"_id": "gpt3_2288", "text": "\nThis query returns the most frequent level from the member table, ordered by the count of each level. The result of this query will be the most frequent level in the table.", "metadata": {}}
{"_id": "gpt3_2289", "text": "\nThis query returns the most common level from the member table, based on the number of occurrences of each level. It returns the level with the highest count.", "metadata": {}}
{"_id": "gpt3_2290", "text": "\nThis query returns the most common level from the member table, sorted by count in descending order, with a limit of 1.", "metadata": {}}
{"_id": "gpt3_2291", "text": "\nThis query will select the RoomId and roomName from the Rooms table and order the results by basePrice in descending order, limiting the results to the top 3 entries.", "metadata": {}}
{"_id": "gpt3_2292", "text": "\nThis query will select the RoomId and roomName from the Rooms table and order the results by basePrice in descending order, limiting the results to the top 3 most expensive rooms.", "metadata": {}}
{"_id": "gpt3_2293", "text": "\nThis SQL query will select the RoomId and roomName from the Rooms table, and order the results by basePrice in descending order, limiting the results to the top 3 rooms.", "metadata": {}}
{"_id": "gpt3_2294", "text": "\nThis SQL statement selects the RoomId and roomName from the Rooms table, and orders them by the highest basePrice, and limits the result to the top 3.", "metadata": {}}
{"_id": "gpt3_2295", "text": "\nThis query selects the top 3 most expensive rooms from the Rooms table, ordered by basePrice in descending order. It returns the RoomId and roomName of the selected rooms.", "metadata": {}}
{"_id": "gpt3_2296", "text": "\nThis query will select the city with the most stores, ordered by the number of stores in each city, and limit the results to the top city.", "metadata": {}}
{"_id": "gpt3_2297", "text": "\nThis query selects the city with the most stores headquartered in it, by joining the store, store_district, and district tables, grouping by the headquartered city, and ordering by the count of stores in each city. The top result is then", "metadata": {}}
{"_id": "gpt3_2298", "text": "\nThis query will select the headquartered city with the highest number of stores from the store, store_district, and district tables. It will group the results by headquartered city, order them by the count of stores in each city, and then limit", "metadata": {}}
{"_id": "gpt3_2299", "text": "\nThis query returns the city with the most stores in its district.", "metadata": {}}
{"_id": "gpt3_2300", "text": "\nThis query selects the city with the most stores in the store, store_district, and district tables, and orders the results by the number of stores, with the city with the most stores listed first.", "metadata": {}}
{"_id": "gpt3_2301", "text": "\nThis query will return the hometowns of people who are between the ages of 20 and 23.", "metadata": {}}
{"_id": "gpt3_2302", "text": "\nThis query will select the hometowns from the people table where the age is greater than 23 and also less than 20.", "metadata": {}}
{"_id": "gpt3_2303", "text": "\nThis query will return the hometowns of people who are over the age of 23 and under the age of 20.", "metadata": {}}
{"_id": "gpt3_2304", "text": "\nThis query will return the hometowns of people who are between the ages of 20 and 23.", "metadata": {}}
{"_id": "gpt3_2305", "text": "\nThis query will select all hometowns from the people table where the age is greater than 23 and less than 20.", "metadata": {}}
{"_id": "gpt3_2306", "text": "\nThis query will count the number of distinct customer IDs from the customer_orders table where the order status is \"Cancelled\".", "metadata": {}}
{"_id": "gpt3_2307", "text": "\nThis query will return the number of distinct customer_ids that have cancelled orders.", "metadata": {}}
{"_id": "gpt3_2308", "text": "\nThis query will return the number of distinct customer IDs from the customer_orders table that have an order status of \"Cancelled\".", "metadata": {}}
{"_id": "gpt3_2309", "text": "\nThis query will return the number of distinct customer IDs in the customer_orders table whose order status is \"Cancelled\".", "metadata": {}}
{"_id": "gpt3_2310", "text": "\nThis query will return the number of distinct customers who have placed an order with a status of \"Cancelled\".", "metadata": {}}
{"_id": "gpt3_2311", "text": "\nThis SQL statement will select the District_name and City_Population from the district table where the City_Population is between 200000 and 2000000.", "metadata": {}}
{"_id": "gpt3_2312", "text": "\nThis SQL statement selects the district name and city population from the district table where the city population is between 200,000 and 2,000,000.", "metadata": {}}
{"_id": "gpt3_2313", "text": "\nThis query will return the District Name and City Population from the district table where the city population is between 200,000 and 2,000,000.", "metadata": {}}
{"_id": "gpt3_2314", "text": "\nThis query will select the district name and city population from the district table where the city population is between 200,000 and 2,000,000.", "metadata": {}}
{"_id": "gpt3_2315", "text": "\nThis query will select the district name and city population from the district table where the city population is between 200,000 and 2,000,000.", "metadata": {}}
{"_id": "gpt3_2316", "text": "\nThis query will return the nickname of the staff member with the first name Janessa and the last name Sawayn.", "metadata": {}}
{"_id": "gpt3_2317", "text": "\nThis query will select the nickname of the staff member whose first name is \"Janessa\" and last name is \"Sawayn\".", "metadata": {}}
{"_id": "gpt3_2318", "text": "\nThis statement selects the nickname of a staff member with the first name \"Janessa\" and the last name \"Sawayn\".", "metadata": {}}
{"_id": "gpt3_2319", "text": "\nThis statement will select the nickname of the staff member whose first name is Janessa and last name is Sawayn.", "metadata": {}}
{"_id": "gpt3_2320", "text": "\nThis statement selects the nickname of the staff member whose first name is Janessa and last name is Sawayn.", "metadata": {}}
{"_id": "gpt3_2321", "text": "\nThis statement returns the names of customers who have not placed any orders.", "metadata": {}}
{"_id": "gpt3_2322", "text": "\nThis query returns the names of customers who have not placed any orders.", "metadata": {}}
{"_id": "gpt3_2323", "text": "\nThis statement selects all customer names from the customers table that do not have any orders in the customer_orders table.", "metadata": {}}
{"_id": "gpt3_2324", "text": "\nThis query returns a list of customer names from the customers table that do not have any associated orders in the customer_orders table.", "metadata": {}}
{"_id": "gpt3_2325", "text": "\nThis statement returns the names of customers who have not placed any orders.", "metadata": {}}
{"_id": "gpt3_2326", "text": "\nThis query selects the marketing region name from the Marketing_Regions table for the store named \"Rob Dinning\" from the Stores table.", "metadata": {}}
{"_id": "gpt3_2327", "text": "\nThis query selects the marketing region name from the Marketing_Regions table for the store named \"Rob Dinning\" from the Stores table.", "metadata": {}}
{"_id": "gpt3_2328", "text": "\nThis query selects the marketing region name from the Marketing_Regions table for the store \"Rob Dinning\" from the Stores table.", "metadata": {}}
{"_id": "gpt3_2329", "text": "\nThis query selects the marketing region name associated with the store \"Rob Dinning\" from the Marketing_Regions and Stores tables.", "metadata": {}}
{"_id": "gpt3_2330", "text": "\nThis query selects the marketing region name from the Marketing_Regions table for the store named \"Rob Dinning\" from the Stores table.", "metadata": {}}
{"_id": "gpt3_2331", "text": "\nThis query will return the names of all musicals that do not have any actors associated with them.", "metadata": {}}
{"_id": "gpt3_2332", "text": "\nThis query will select the names of all musicals that do not have any actors associated with them.", "metadata": {}}
{"_id": "gpt3_2333", "text": "\nThis query will return the names of all musicals that do not have any actors associated with them.", "metadata": {}}
{"_id": "gpt3_2334", "text": "\nThis query will return a list of musicals that do not have any actors associated with them.", "metadata": {}}
{"_id": "gpt3_2335", "text": "\nThis query returns the names of all musicals that do not have any actors associated with them.", "metadata": {}}
{"_id": "gpt3_2336", "text": "\nThis SQL statement returns all states from the park table where there are more than two records for that state.", "metadata": {}}
{"_id": "gpt3_2337", "text": "\nThis SQL query is used to select the states from the park table where the count of the states is greater than 2.", "metadata": {}}
{"_id": "gpt3_2338", "text": "\nThis SQL query returns the states from the park table that have more than two records associated with them.", "metadata": {}}
{"_id": "gpt3_2339", "text": "\nThis SQL query returns all the states from the park table that have more than two entries.", "metadata": {}}
{"_id": "gpt3_2340", "text": "\nThis SQL query retrieves the state names from the park table that have more than two entries in the table.", "metadata": {}}
{"_id": "gpt3_2341", "text": "\nThis query will select the name of all tracks from the TRACK table that contain the string \"you\" somewhere in the name.", "metadata": {}}
{"_id": "gpt3_2342", "text": "\nThis SQL query selects the name of a track from a table called TRACK where the name contains the substring \"you\".", "metadata": {}}
{"_id": "gpt3_2343", "text": "\nThis SQL query selects the name of any track from the TRACK table whose name contains the substring \"you\".", "metadata": {}}
{"_id": "gpt3_2344", "text": "\nThis SQL statement will select all track names from the TRACK table that contain the string \"you\" anywhere in the name.", "metadata": {}}
{"_id": "gpt3_2345", "text": "\nThis SQL statement will select the name of all tracks from the 'TRACK' table that contain the word 'you' in their name.", "metadata": {}}
{"_id": "gpt3_2346", "text": "\nThis statement will select all unique districts from the election table.", "metadata": {}}
{"_id": "gpt3_2347", "text": "\nThis query will return a list of all the distinct districts from the election table.", "metadata": {}}
{"_id": "gpt3_2348", "text": "\nThis SQL query will return a list of all of the distinct districts from the election table.", "metadata": {}}
{"_id": "gpt3_2349", "text": "\nThis statement will return a list of all unique districts from the election table.", "metadata": {}}
{"_id": "gpt3_2350", "text": "\nThe SQL query SELECT DISTINCT District FROM election will return a list of all the unique districts in the election table.", "metadata": {}}
{"_id": "gpt3_2351", "text": "\nThis query will return the list of degrees offered by San Francisco State University in the year 2001.", "metadata": {}}
{"_id": "gpt3_2352", "text": "\nThis query returns a list of all degrees offered by San Francisco State University in 2001.", "metadata": {}}
{"_id": "gpt3_2353", "text": "\nThis query will return all degrees awarded by San Francisco State University in 2001.", "metadata": {}}
{"_id": "gpt3_2354", "text": "\nThis query will return all of the degrees offered by San Francisco State University in 2001.", "metadata": {}}
{"_id": "gpt3_2355", "text": "\nThis query will return all of the degrees offered at San Francisco State University in the year 2001.", "metadata": {}}
{"_id": "gpt3_2356", "text": "\nThis query will return the number of records in the county_public_safety table for each police force.", "metadata": {}}
{"_id": "gpt3_2357", "text": "\nThis query will return a list of police forces and the number of counties associated with each police force.", "metadata": {}}
{"_id": "gpt3_2358", "text": "\nThis query will return the police force and the number of records associated with each police force in the county_public_safety table.", "metadata": {}}
{"_id": "gpt3_2359", "text": "\nThis query will count the number of records in the county_public_safety table for each police force. It will return a table with two columns: Police_force and COUNT(*).", "metadata": {}}
{"_id": "gpt3_2360", "text": "\nThis query will return the count of each police force in the county public safety table.", "metadata": {}}
{"_id": "gpt3_2361", "text": "\nThis query will select the name of the storm from the affected_region, region, and storm tables where the region name is 'Denmark'.", "metadata": {}}
{"_id": "gpt3_2362", "text": "\nThis query will return the name of any storm that has affected Denmark.", "metadata": {}}
{"_id": "gpt3_2363", "text": "\nThis query returns the names of all storms that have affected Denmark.", "metadata": {}}
{"_id": "gpt3_2364", "text": "\nThis query retrieves the name of a storm that affected Denmark.", "metadata": {}}
{"_id": "gpt3_2365", "text": "\nThis query will return the name of the storm that affected Denmark.", "metadata": {}}
{"_id": "gpt3_2366", "text": "\nThis query selects the first and last name, player ID, and count of a player from the player and all_star tables, grouping by the player ID and ordering by the count in descending order. The query then limits the output to the first", "metadata": {}}
{"_id": "gpt3_2367", "text": "\nThis query selects the first and last name, player ID, and count of the player with the most All-Star appearances. It does this by joining the player and all_star tables and grouping by the player ID, then ordering by the count", "metadata": {}}
{"_id": "gpt3_2368", "text": "\nThis SQL query selects the first and last name, player ID, and count of the player with the most All Star selections. It joins the player and all star tables on the player ID, groups by player ID, orders the results by count in", "metadata": {}}
{"_id": "gpt3_2369", "text": "\nThis query selects the first and last name, player ID, and number of All-Star appearances for the player with the most All-Star appearances, and orders the results in descending order.", "metadata": {}}
{"_id": "gpt3_2370", "text": "\nThis query selects the first and last name, player ID, and count of the player with the most All-Star appearances. It does this by joining the player and all_star tables on the player_id field and grouping by the player_", "metadata": {}}
{"_id": "gpt3_2371", "text": "\nThis query selects the decor of the least popular room from the Reservations and Rooms tables, ordered by the count of the decor in ascending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_2372", "text": "\nThis query returns the decor of the least booked room in the Reservations table, grouped by decor and ordered in ascending order.", "metadata": {}}
{"_id": "gpt3_2373", "text": "\nThis query selects the decor of the least-booked room from the Reservations and Rooms tables, grouping the results by decor and ordering them in ascending order by count. The query returns the decor of the least-booked room.", "metadata": {}}
{"_id": "gpt3_2374", "text": "\nThis query selects the least popular decor from the Rooms table, based on the number of reservations in the Reservations table, and orders it in ascending order.", "metadata": {}}
{"_id": "gpt3_2375", "text": "\nThis query selects the decor of the least popular room from the Reservations and Rooms tables and orders them by the count of the decor. The least popular room decor is then returned as the result.", "metadata": {}}
{"_id": "gpt3_2376", "text": "\nThis query will return the type and nationality of ships from a database.", "metadata": {}}
{"_id": "gpt3_2377", "text": "\nThis query will return the type and nationality of a ship from a database.", "metadata": {}}
{"_id": "gpt3_2378", "text": "\nThis query will select the type and nationality of a ship from a table.", "metadata": {}}
{"_id": "gpt3_2379", "text": "\nThis query will select the type and nationality of ships from a table.", "metadata": {}}
{"_id": "gpt3_2380", "text": "\nThis query will return the type and nationality of each ship from the ship table.", "metadata": {}}
{"_id": "gpt3_2381", "text": "\nThis SQL query will return a list of all authors' first names in alphabetical order.", "metadata": {}}
{"_id": "gpt3_2382", "text": "\nThis query selects the first name (fname) from the authors table and orders the results alphabetically by the first name.", "metadata": {}}
{"_id": "gpt3_2383", "text": "\nThis query will select the first name from the authors table and order the results alphabetically by the first name.", "metadata": {}}
{"_id": "gpt3_2384", "text": "\nThis query retrieves the first name of each author from the authors table, and orders them alphabetically.", "metadata": {}}
{"_id": "gpt3_2385", "text": "\nThis query will select the first name of each author from the authors table, and order the results alphabetically.", "metadata": {}}
{"_id": "gpt3_2386", "text": "\nThis query will return a list of the role codes and the number of employees in each role.", "metadata": {}}
{"_id": "gpt3_2387", "text": "\nThis query will return a count of the number of employees in each role_code in the Employees table.", "metadata": {}}
{"_id": "gpt3_2388", "text": "\nThis query will return the role code and a count of the number of employees with each role code from the Employees table.", "metadata": {}}
{"_id": "gpt3_2389", "text": "\nThis query will return the role codes and the count of employees associated with each role code from the Employees table.", "metadata": {}}
{"_id": "gpt3_2390", "text": "\nThis query will return the number of employees for each role code. It will return two columns, the role code and a count of the number of employees with that role code.", "metadata": {}}
{"_id": "gpt3_2391", "text": "\nThis query will select the name of the physician with the highest dose of a prescription from the prescribes table, ordered by dose in descending order and limited to the top result.", "metadata": {}}
{"_id": "gpt3_2392", "text": "\nThis query will select the name of the physician who has prescribed the highest dose of a medication, as determined by the prescribes table.", "metadata": {}}
{"_id": "gpt3_2393", "text": "\nThis query retrieves the name of the physician with the highest dose prescription from the prescribes table, ordered by descending dose.", "metadata": {}}
{"_id": "gpt3_2394", "text": "\nThis query returns the name of the physician who prescribed the highest dose of a medication.", "metadata": {}}
{"_id": "gpt3_2395", "text": "\nThis query selects the name of the physician with the highest dose prescription from the physician and prescribes tables.", "metadata": {}}
{"_id": "gpt3_2396", "text": "\nThis query will select the title and credits from the course table for the course that is being taught in the classroom with the highest capacity.", "metadata": {}}
{"_id": "gpt3_2397", "text": "\nThis query selects the title and credits from the course table for the course in the classroom with the highest capacity.", "metadata": {}}
{"_id": "gpt3_2398", "text": "\nThis query selects the title and credits of the course from the course table that is located in the classroom with the highest capacity.", "metadata": {}}
{"_id": "gpt3_2399", "text": "\nThis query will select the title and credits of the course in the classroom with the highest capacity.", "metadata": {}}
{"_id": "gpt3_2400", "text": "\nThis query will select the title and credits of the course that is being taught in the classroom with the highest capacity.", "metadata": {}}
{"_id": "gpt3_2401", "text": "\nThis query will return the total revenue of all manufacturers with their headquarter located in either Tokyo or Taiwan.", "metadata": {}}
{"_id": "gpt3_2402", "text": "\nThis query will return the total revenue of all manufacturers with their headquarter either in Tokyo or Taiwan.", "metadata": {}}
{"_id": "gpt3_2403", "text": "\nThis query will calculate the total revenue of all manufacturers with a headquarter located in Tokyo or Taiwan.", "metadata": {}}
{"_id": "gpt3_2404", "text": "\nThis query will return the total revenue of all manufacturers with their headquarter in either Tokyo or Taiwan.", "metadata": {}}
{"_id": "gpt3_2405", "text": "\nThis query would return the total revenue of all manufacturers with a headquarter in either Tokyo or Taiwan.", "metadata": {}}
{"_id": "gpt3_2406", "text": "\nThis query will select the shop name and location of all shops from the shop table, ordered alphabetically by shop name.", "metadata": {}}
{"_id": "gpt3_2407", "text": "\nThis SQL statement selects the shop name and location from the shop table and orders the results alphabetically by shop name in ascending order.", "metadata": {}}
{"_id": "gpt3_2408", "text": "\nThis query selects the shop name and location from the shop table and orders the results by the shop name in ascending order.", "metadata": {}}
{"_id": "gpt3_2409", "text": "\nThis query retrieves the shop name and location of every shop in the shop table, sorted in alphabetical order by shop name.", "metadata": {}}
{"_id": "gpt3_2410", "text": "\nThis query will select the shop name and location from the shop table and order the results in ascending order by shop name.", "metadata": {}}
{"_id": "gpt3_2411", "text": "\nThis query will return the crime rate from the county public safety table, sorted in ascending order by the number of police officers.", "metadata": {}}
{"_id": "gpt3_2412", "text": "\nThe query will return the crime rate from each county in order of the number of police officers, from least to greatest.", "metadata": {}}
{"_id": "gpt3_2413", "text": "\nThis query will return the crime rate of all counties, ordered from lowest to highest according to the number of police officers in each county.", "metadata": {}}
{"_id": "gpt3_2414", "text": "\nThis query would return a list of crime rates from the county_public_safety table, ordered from lowest to highest number of police officers.", "metadata": {}}
{"_id": "gpt3_2415", "text": "\nThis query will select the crime rate from the county public safety table and order the results by the number of police officers ascending.", "metadata": {}}
{"_id": "gpt3_2416", "text": "\nThis query selects the name of the instructor of the student with the highest total credits from the advisor, instructor, and student tables.", "metadata": {}}
{"_id": "gpt3_2417", "text": "\nThis query selects the name of the instructor who is the advisor of the student with the highest total credits.", "metadata": {}}
{"_id": "gpt3_2418", "text": "\nThis query retrieves the name of the instructor who is the advisor of the student with the highest total credits.", "metadata": {}}
{"_id": "gpt3_2419", "text": "\nThis query selects the name of the instructor associated with the student who has the highest total credit.", "metadata": {}}
{"_id": "gpt3_2420", "text": "\nThis query returns the name of the instructor with the most advised student with the highest total credits.", "metadata": {}}
{"_id": "gpt3_2421", "text": "\nThis query returns the total number of unique source system codes in the CMI_cross_references table.", "metadata": {}}
{"_id": "gpt3_2422", "text": "\nThis query will return the number of distinct source system codes from the CMI_cross_references table.", "metadata": {}}
{"_id": "gpt3_2423", "text": "\nThis query returns the total number of distinct source system codes in the CMI_cross_references table.", "metadata": {}}
{"_id": "gpt3_2424", "text": "\nThis query returns the number of unique source system codes in the CMI_cross_references table.", "metadata": {}}
{"_id": "gpt3_2425", "text": "\nThis query will return the number of distinct source system codes from the CMI_cross_references table.", "metadata": {}}
{"_id": "gpt3_2426", "text": "\nThis query will return the country with the most tournaments, ordered by count in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_2427", "text": "\nThis query will return the country with the most tournaments in the competition table, ordered by the number of tournaments in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_2428", "text": "\nThis query will return the country with the most tournaments in the competition table, ordered by count in descending order and limited to the first result.", "metadata": {}}
{"_id": "gpt3_2429", "text": "\nThis query returns the country with the most tournaments, ordered by count in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_2430", "text": "\nThis query will return the country with the most tournaments, ordered by the highest count, with a limit of one.", "metadata": {}}
{"_id": "gpt3_2431", "text": "\nThis query selects the titles and years of the top three rated movies, as determined by the Rating table, and orders them in descending order by the number of stars they have received.", "metadata": {}}
{"_id": "gpt3_2432", "text": "\nThis query selects the title and year of the top 3 rated movies from the Rating and Movie tables, ordered by the stars rating in descending order.", "metadata": {}}
{"_id": "gpt3_2433", "text": "\nThis query selects the title and year of the top three movies from the Rating table, ordered by the highest stars rating.", "metadata": {}}
{"_id": "gpt3_2434", "text": "\nThis query selects the top three highest-rated movies from the Rating and Movie tables, and returns the title and year of each movie.", "metadata": {}}
{"_id": "gpt3_2435", "text": "\nThis query selects the title and year of the three highest-rated movies from the Rating and Movie tables, ordered by the stars rating in descending order.", "metadata": {}}
{"_id": "gpt3_2436", "text": "\nThis query will return the number of distinct faculty IDs in the Faculty_participates_in table.", "metadata": {}}
{"_id": "gpt3_2437", "text": "\nThis query will return the number of distinct faculty members who participated in an activity.", "metadata": {}}
{"_id": "gpt3_2438", "text": "\nThis query will count the number of distinct Faculty IDs (FacID) from the Faculty_participates_in table.", "metadata": {}}
{"_id": "gpt3_2439", "text": "\nThis query returns the number of distinct faculty members who participate in a given activity.", "metadata": {}}
{"_id": "gpt3_2440", "text": "\nThis query will return the number of distinct faculty members who are participating in an activity.", "metadata": {}}
{"_id": "gpt3_2441", "text": "\nThis query will select the building address from the Apartment_Buildings table for all apartments that have more than two bathrooms.", "metadata": {}}
{"_id": "gpt3_2442", "text": "\nThis query will select the building address from the Apartment_Buildings table for all buildings that have at least one apartment with more than two bathrooms.", "metadata": {}}
{"_id": "gpt3_2443", "text": "\nThis SQL statement selects the address of all apartment buildings that have at least one apartment with more than two bathrooms.", "metadata": {}}
{"_id": "gpt3_2444", "text": "\nThis query selects the building address from the Apartment_Buildings table for all buildings that have apartments with more than two bathrooms.", "metadata": {}}
{"_id": "gpt3_2445", "text": "\nThis query will select the building address from the Apartment_Buildings table for all buildings that have apartments with more than two bathrooms.", "metadata": {}}
{"_id": "gpt3_2446", "text": "\nThis statement will return a list of the distinct ranks of faculty members from the Faculty table.", "metadata": {}}
{"_id": "gpt3_2447", "text": "\nThis query will return a list of all the distinct ranks of faculty members in a database.", "metadata": {}}
{"_id": "gpt3_2448", "text": "\nThis query will return a list of all unique ranks from the Faculty table.", "metadata": {}}
{"_id": "gpt3_2449", "text": "\nThis query will return a list of all distinct ranks of faculty members from a database.", "metadata": {}}
{"_id": "gpt3_2450", "text": "\nThis query will return a list of all unique ranks from the Faculty table.", "metadata": {}}
{"_id": "gpt3_2451", "text": "\nThe SELECT DISTINCT statement is used to return only unique values in the specified column of a table. In this case, the statement will return all the unique values in the \"directed_by\" column of the \"film\" table.", "metadata": {}}
{"_id": "gpt3_2452", "text": "\nThis statement will return a list of all the unique values of the \"directed_by\" column from the \"film\" table.", "metadata": {}}
{"_id": "gpt3_2453", "text": "\nThe SQL query \"SELECT DISTINCT directed_by FROM film\" will return a list of all the distinct directors from the film table.", "metadata": {}}
{"_id": "gpt3_2454", "text": "\nThis query will return a list of all the distinct directors from the film table.", "metadata": {}}
{"_id": "gpt3_2455", "text": "\nThis query will return a list of all unique directors from the film table.", "metadata": {}}
{"_id": "gpt3_2456", "text": "\nThis query returns the average total number of passengers for all airports with a Robinson R-22 aircraft.", "metadata": {}}
{"_id": "gpt3_2457", "text": "\nThis query will return the average total number of passengers for all airports that have a Robinson R-22 aircraft.", "metadata": {}}
{"_id": "gpt3_2458", "text": "\nThis query returns the average total passengers for all airports that have a Robinson R-22 aircraft.", "metadata": {}}
{"_id": "gpt3_2459", "text": "\nThis query finds the average number of passengers on flights using a Robinson R-22 aircraft.", "metadata": {}}
{"_id": "gpt3_2460", "text": "\nThis query returns the average total number of passengers for all airports with Robinson R-22 aircraft.", "metadata": {}}
{"_id": "gpt3_2461", "text": "\nThis query returns a count of the number of matches for each competition.", "metadata": {}}
{"_id": "gpt3_2462", "text": "\nThis query will return a count of the number of matches in each competition.", "metadata": {}}
{"_id": "gpt3_2463", "text": "\nThis query will return a count of the number of matches for each competition.", "metadata": {}}
{"_id": "gpt3_2464", "text": "\nThis query returns the number of matches for each competition, grouped by competition. For example, the query might return:\n\nCompetition | Count\n------------------------\nPremier League | 10\nLa Liga | 8\nSerie A | 6", "metadata": {}}
{"_id": "gpt3_2465", "text": "\nThis query will return the total number of matches for each competition.", "metadata": {}}
{"_id": "gpt3_2466", "text": "\nThis query will return the train number and time of all trains that originate from Chennai and have a destination of Guruvayur.", "metadata": {}}
{"_id": "gpt3_2467", "text": "\nThis query will return the train number and time of all trains departing from Chennai and arriving at Guruvayur.", "metadata": {}}
{"_id": "gpt3_2468", "text": "\nThis query will return the train number and time of all the trains which start from Chennai and end at Guruvayur.", "metadata": {}}
{"_id": "gpt3_2469", "text": "\nThis query will return the train number and time of all trains that originate from Chennai and go to Guruvayur.", "metadata": {}}
{"_id": "gpt3_2470", "text": "\nThis query will return the train number and time of all the trains that travel from Chennai to Guruvayur.", "metadata": {}}
{"_id": "gpt3_2471", "text": "\nThis query returns the name of the shop with the most recent opening year.", "metadata": {}}
{"_id": "gpt3_2472", "text": "\nThis query will select the shop name of the shop that was opened most recently, ordered by the open year in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_2473", "text": "\nThis query will return the name of the shop that was opened most recently.", "metadata": {}}
{"_id": "gpt3_2474", "text": "\nThis query will select the shop name of the shop that was opened most recently, in descending order by year.", "metadata": {}}
{"_id": "gpt3_2475", "text": "\nThis query will select the shop name of the shop that opened most recently and limit the results to one.", "metadata": {}}
{"_id": "gpt3_2476", "text": "\nThis query will return the document type description for the document type code \"Paper\" from the Ref_Document_Types table.", "metadata": {}}
{"_id": "gpt3_2477", "text": "\nThis query will return the description of the document type with the code \"Paper\" from the Ref_Document_Types table.", "metadata": {}}
{"_id": "gpt3_2478", "text": "\nThe query will return the description of the document type with the code \"Paper\".", "metadata": {}}
{"_id": "gpt3_2479", "text": "\nThis query will return the description of the document type with a code of \"Paper\" from the Ref_Document_Types table.", "metadata": {}}
{"_id": "gpt3_2480", "text": "\nThis query will return the description of the document type with the code \"Paper\" from the Ref_Document_Types table.", "metadata": {}}
{"_id": "gpt3_2481", "text": "\nThis query selects all student IDs from the students table that are not present in the student_course_attendance table.", "metadata": {}}
{"_id": "gpt3_2482", "text": "\nThis query selects the student_id from the students table who have not attended any courses, based on the student_course_attendance table.", "metadata": {}}
{"_id": "gpt3_2483", "text": "\nThis query selects the student_id from the students table who are not present in the student_course_attendance table.", "metadata": {}}
{"_id": "gpt3_2484", "text": "\nThis statement selects all student IDs from the students table that do not appear in the student_course_attendance table.", "metadata": {}}
{"_id": "gpt3_2485", "text": "\nThis query selects the student IDs from the students table that are not present in the student_course_attendance table.", "metadata": {}}
{"_id": "gpt3_2486", "text": "\nThis query will return the average enrollment of all colleges in the state of Florida.", "metadata": {}}
{"_id": "gpt3_2487", "text": "\nThis query will return the average enrollment of all colleges in the state of Florida.", "metadata": {}}
{"_id": "gpt3_2488", "text": "\nThis query will return the average enrollment of all colleges in Florida.", "metadata": {}}
{"_id": "gpt3_2489", "text": "\nThis query will return the average enrollment of all colleges in Florida.", "metadata": {}}
{"_id": "gpt3_2490", "text": "\nThis query will return the average enrollment of all colleges in Florida.", "metadata": {}}
{"_id": "gpt3_2491", "text": "\nThis query returns the names of instructors who do not teach courses in the Spring semester.", "metadata": {}}
{"_id": "gpt3_2492", "text": "\nThis query will return the names of instructors who do not teach any courses during the Spring semester.", "metadata": {}}
{"_id": "gpt3_2493", "text": "\nThis query returns the names of instructors who are not teaching any courses during the Spring semester.", "metadata": {}}
{"_id": "gpt3_2494", "text": "\nThis query will select the name of all instructors who do not teach courses in the Spring semester.", "metadata": {}}
{"_id": "gpt3_2495", "text": "\nThis SQL statement will select the name from the instructor table for all instructors that do not teach in the Spring semester.", "metadata": {}}
{"_id": "gpt3_2496", "text": "\nThis SQL statement selects the employee ID, first name, and last name from the employees table for all employees who work in a department with an employee whose first name contains the letter 'T'.", "metadata": {}}
{"_id": "gpt3_2497", "text": "\nThis SQL statement selects the employee ID, first name, and last name from the employees table where the department ID matches that of an employee whose first name contains the letter \"T\".", "metadata": {}}
{"_id": "gpt3_2498", "text": "\nThis query selects the employee ID, first name, and last name from the employees table for all employees who work in the same department as someone whose first name contains the letter 'T'.", "metadata": {}}
{"_id": "gpt3_2499", "text": "\nThis statement selects the employee ID, first name, and last name of all employees whose department ID is the same as an employee whose first name contains the letter \"T\".", "metadata": {}}
{"_id": "gpt3_2500", "text": "\nThis query selects the employee ID, first name, and last name of all employees who work in the same department as any employee whose first name contains the letter \"T\".", "metadata": {}}
{"_id": "gpt3_2501", "text": "\nThis query selects the last name and age of students who have both milk and cat allergies.", "metadata": {}}
{"_id": "gpt3_2502", "text": "\nThis statement selects the last name and age of all students who have both milk and cat allergies.", "metadata": {}}
{"_id": "gpt3_2503", "text": "\nThis query will select the last name and age of all students who have both a milk and cat allergy.", "metadata": {}}
{"_id": "gpt3_2504", "text": "\nThis query will select the last name and age of students who have both a milk allergy and a cat allergy.", "metadata": {}}
{"_id": "gpt3_2505", "text": "\nThis statement selects the last name and age of students who have both a milk and cat allergy.", "metadata": {}}
{"_id": "gpt3_2506", "text": "\nThis query will return the names of all hosts who are not hosting any parties.", "metadata": {}}
{"_id": "gpt3_2507", "text": "\nThis query will retrieve all the names of hosts from the HOST table who are not hosting any parties from the PARTY_HOST table.", "metadata": {}}
{"_id": "gpt3_2508", "text": "\nThis query will return the names of all hosts that are not associated with any parties.", "metadata": {}}
{"_id": "gpt3_2509", "text": "\nThis query will return the names of all hosts who are not hosting any parties.", "metadata": {}}
{"_id": "gpt3_2510", "text": "\nThis query will return the names of all hosts who are not hosting a party.", "metadata": {}}
{"_id": "gpt3_2511", "text": "\nThis query is used to select the name of the technician and the machine series of the machine that the technician is assigned to repair.", "metadata": {}}
{"_id": "gpt3_2512", "text": "\nThis query selects the name of the technician and the machine series associated with each repair assignment.", "metadata": {}}
{"_id": "gpt3_2513", "text": "\nThis query retrieves the name of the technician and the machine series they were assigned to repair from the repair_assignment, machine, and technician tables.", "metadata": {}}
{"_id": "gpt3_2514", "text": "\nThis query selects the name of the technician and the machine series associated with each repair assignment.", "metadata": {}}
{"_id": "gpt3_2515", "text": "\nThis query selects the name of a technician and the machine series of the machine they are assigned to repair from the repair_assignment, machine and technician tables.", "metadata": {}}
{"_id": "gpt3_2516", "text": "\nThis query selects the name and country of the artist with the most exhibitions, ordered by the number of exhibitions they have held.", "metadata": {}}
{"_id": "gpt3_2517", "text": "\nThis query returns the name and country of the artist who has the most exhibitions.", "metadata": {}}
{"_id": "gpt3_2518", "text": "\nThis query selects the artist name and country of the artist with the most exhibitions, ordering the results by the number of exhibitions in descending order and limiting the results to one.", "metadata": {}}
{"_id": "gpt3_2519", "text": "\nThis query will select the name and country of the artist with the most exhibitions, ordered by the number of exhibitions they have participated in.", "metadata": {}}
{"_id": "gpt3_2520", "text": "\nThis query selects the name and country of the artist with the most exhibitions, ordered by the number of exhibitions they have and limited to the top result.", "metadata": {}}
{"_id": "gpt3_2521", "text": "\nThis query will select the title of the movie with the highest year from the Movie table.", "metadata": {}}
{"_id": "gpt3_2522", "text": "\nThis query will select the title of the movie from the Movie table that was released in the most recent year.", "metadata": {}}
{"_id": "gpt3_2523", "text": "\nThis query will select the title of the movie that was released in the most recent year.", "metadata": {}}
{"_id": "gpt3_2524", "text": "\nThis query will select the title of the movie with the most recent year from the Movie table.", "metadata": {}}
{"_id": "gpt3_2525", "text": "\nThis query will select the title of the movie from the Movie table that was released in the most recent year.", "metadata": {}}
{"_id": "gpt3_2526", "text": "\nThis query selects the sex of the person with the highest average unsure rate from the people and candidate tables, ordered in descending order and limited to the top result.", "metadata": {}}
{"_id": "gpt3_2527", "text": "\nThis query will select the sex of the group of people with the highest average unsure rate from the candidate table, ordered by highest average unsure rate.", "metadata": {}}
{"_id": "gpt3_2528", "text": "\nThis query selects the sex of the person who has the highest average unsure rate in the candidate table, grouped by sex and ordered in descending order, and then returns the top result.", "metadata": {}}
{"_id": "gpt3_2529", "text": "\nThis query selects the sex with the highest average unsure rate from the people and candidate tables, ordered by the average unsure rate in descending order, and limited to one result.", "metadata": {}}
{"_id": "gpt3_2530", "text": "\nThis query selects the sex with the highest average unsure rate from the people and candidate tables. It groups the results by sex and orders by the average unsure rate, then returns the top result.", "metadata": {}}
{"_id": "gpt3_2531", "text": "\nThis query returns the average access count of all documents associated with the functional area description \"Acknowledgement\".", "metadata": {}}
{"_id": "gpt3_2532", "text": "\nThis query will return the average access count of documents associated with the functional area description \"Acknowledgement\".", "metadata": {}}
{"_id": "gpt3_2533", "text": "\nThis query calculates the average access count of documents associated with the functional area description \"Acknowledgement\".", "metadata": {}}
{"_id": "gpt3_2534", "text": "\nThis query returns the average number of accesses for documents related to the functional area of \"Acknowledgement\".", "metadata": {}}
{"_id": "gpt3_2535", "text": "\nThis query calculates the average access count for documents associated with the functional area description of \"Acknowledgement\".", "metadata": {}}
{"_id": "gpt3_2536", "text": "\nThis query will return the count of distinct locations from the perpetrator table.", "metadata": {}}
{"_id": "gpt3_2537", "text": "\nThis query will return the number of unique locations associated with perpetrators.", "metadata": {}}
{"_id": "gpt3_2538", "text": "\nThis query will return the number of distinct locations in the perpetrator table.", "metadata": {}}
{"_id": "gpt3_2539", "text": "\nThis query will return the number of distinct locations of perpetrators.", "metadata": {}}
{"_id": "gpt3_2540", "text": "\nThis query would return the number of distinct locations from the perpetrator table.", "metadata": {}}
{"_id": "gpt3_2541", "text": "\nThis query will select the name of all pilots from the pilot table where their age is 25 or older.", "metadata": {}}
{"_id": "gpt3_2542", "text": "\nThis query will select the names of all pilots from a table who are 25 years of age or older.", "metadata": {}}
{"_id": "gpt3_2543", "text": "\nThis query will return the names of all pilots in the database who are 25 years of age or older.", "metadata": {}}
{"_id": "gpt3_2544", "text": "\nThis query will select the name of all pilots from a database who are 25 years of age or older.", "metadata": {}}
{"_id": "gpt3_2545", "text": "\nThis query will return the names of all pilots from a database who are 25 years or older.", "metadata": {}}
{"_id": "gpt3_2546", "text": "\nThis query will return the names of all instructors in the department of Computer Science with a salary greater than $80,000.", "metadata": {}}
{"_id": "gpt3_2547", "text": "\nThis query will select the name of any instructor from the department of Computer Science who has a salary greater than 80,000.", "metadata": {}}
{"_id": "gpt3_2548", "text": "\nThis SQL query will select the names of instructors from the instructor table who work in the department of Computer Science and have a salary greater than 80000.", "metadata": {}}
{"_id": "gpt3_2549", "text": "\nThis query will select the name of any instructors from the department of Computer Science who make more than $80,000.", "metadata": {}}
{"_id": "gpt3_2550", "text": "\nThis query will select the name of all instructors from the department of Computer Science with a salary higher than 80000.", "metadata": {}}
{"_id": "gpt3_2551", "text": "\nThis query will return all zip codes associated with Howard County.", "metadata": {}}
{"_id": "gpt3_2552", "text": "\nThis query will return the zip codes associated with Howard County.", "metadata": {}}
{"_id": "gpt3_2553", "text": "\nThis query will return the zip code for Howard County.", "metadata": {}}
{"_id": "gpt3_2554", "text": "\nThis query will return the zip code associated with Howard County.", "metadata": {}}
{"_id": "gpt3_2555", "text": "\nThe above SQL query will return the zip code for Howard County.", "metadata": {}}
{"_id": "gpt3_2556", "text": "\nThis query will return a list of document type codes and names from the Ref_document_types table.", "metadata": {}}
{"_id": "gpt3_2557", "text": "\nThis query will select the document type code and name from the Ref_document_types table.", "metadata": {}}
{"_id": "gpt3_2558", "text": "\nThis query returns a list of document types and their associated codes from the Ref_document_types table.", "metadata": {}}
{"_id": "gpt3_2559", "text": "\nThis statement retrieves the document type code and name from the Ref_document_types table.", "metadata": {}}
{"_id": "gpt3_2560", "text": "\nThis query will return a list of document type codes and names from the Ref_document_types table.", "metadata": {}}
{"_id": "gpt3_2561", "text": "\nThis query returns the average hand speed (HS) of players who were not accepted into the tryout.", "metadata": {}}
{"_id": "gpt3_2562", "text": "\nThis query returns the average high school score of players who did not make the tryout.", "metadata": {}}
{"_id": "gpt3_2563", "text": "\nThis query will calculate the average high school score (HS) of all players who were not accepted in a tryout.", "metadata": {}}
{"_id": "gpt3_2564", "text": "\nThis query returns the average high school score of players who were not accepted in the tryout.", "metadata": {}}
{"_id": "gpt3_2565", "text": "\nThis query returns the average high school score of all players who were not accepted in a tryout.", "metadata": {}}
{"_id": "gpt3_2566", "text": "\nThis statement retrieves a list of unique regions from the club table and orders them alphabetically in ascending order.", "metadata": {}}
{"_id": "gpt3_2567", "text": "\nThis query will select all distinct regions from the club table and order them in ascending order.", "metadata": {}}
{"_id": "gpt3_2568", "text": "\nThis query will select all distinct regions from the club table and order them in ascending alphabetical order.", "metadata": {}}
{"_id": "gpt3_2569", "text": "\nThis query will select all unique regions from the club table and order them in ascending alphabetical order.", "metadata": {}}
{"_id": "gpt3_2570", "text": "\nThis statement selects the distinct regions from the club table and orders them in ascending order.", "metadata": {}}
{"_id": "gpt3_2571", "text": "\nThe above SQL query will select the name of any instructor from the instructor table whose name contains the substring 'dar'.", "metadata": {}}
{"_id": "gpt3_2572", "text": "\nThis query selects the name of any instructor from the 'instructor' table whose name contains the substring 'dar'.", "metadata": {}}
{"_id": "gpt3_2573", "text": "\nThis SQL query selects the name of any instructor that contains the string 'dar' in their name.", "metadata": {}}
{"_id": "gpt3_2574", "text": "\nThis SQL statement selects the name of any instructor from the instructor table whose name contains the string \"dar\".", "metadata": {}}
{"_id": "gpt3_2575", "text": "\nThis query will select all names from the instructor table that contain the substring 'dar'.", "metadata": {}}
{"_id": "gpt3_2576", "text": "\nThis query will return the distinct names of all people who are friends with someone who is younger than the average age of all people in the Person table.", "metadata": {}}
{"_id": "gpt3_2577", "text": "\nThis query selects the distinct names of all people who are friends with someone who is younger than the average age of all people.", "metadata": {}}
{"_id": "gpt3_2578", "text": "\nThis query selects the names of people who are friends with someone under the average age from the Person table.", "metadata": {}}
{"_id": "gpt3_2579", "text": "\nThis query will select the distinct names of all PersonFriends who have a friend with an age below the average age of all people in the Person table.", "metadata": {}}
{"_id": "gpt3_2580", "text": "\nThis query is selecting the distinct names of people who are friends of people who are below the average age from the Person table.", "metadata": {}}
{"_id": "gpt3_2581", "text": "\nThis query will return a list of catalog entry names from the catalog_contents table where the length is less than 3 or the width is greater than 5.", "metadata": {}}
{"_id": "gpt3_2582", "text": "\nThis query will return all catalog entry names from the catalog contents table where the length is less than 3 or the width is greater than 5.", "metadata": {}}
{"_id": "gpt3_2583", "text": "\nThis query will return all catalog entry names from the catalog contents table where the length is less than 3 or the width is greater than 5.", "metadata": {}}
{"_id": "gpt3_2584", "text": "\nThis query will return the catalog entry name from the catalog contents table where the length is less than 3 or the width is greater than 5.", "metadata": {}}
{"_id": "gpt3_2585", "text": "\nThis query will return all catalog entry names from the catalog_contents table where the length of the item is less than 3 or the width of the item is greater than 5.", "metadata": {}}
{"_id": "gpt3_2586", "text": "\nThis query will select the name of all buildings that have more than one company located in them.", "metadata": {}}
{"_id": "gpt3_2587", "text": "\nThis query will select the name of each building that has more than one office location associated with it from the Office_locations, buildings, and Companies tables.", "metadata": {}}
{"_id": "gpt3_2588", "text": "\nThis query selects the names of buildings that are associated with more than one company.", "metadata": {}}
{"_id": "gpt3_2589", "text": "\nThis query retrieves the name of all buildings that are home to more than one company.", "metadata": {}}
{"_id": "gpt3_2590", "text": "\nThis query will select the names of buildings where more than one company is located.", "metadata": {}}
{"_id": "gpt3_2591", "text": "\nThis query selects all distinct artist names from songs with an English language, except for those with a rating higher than 8.", "metadata": {}}
{"_id": "gpt3_2592", "text": "\nThis query will select all distinct artist names from songs with a language of English, except those with a rating higher than 8.", "metadata": {}}
{"_id": "gpt3_2593", "text": "\nThis query will return all distinct artist names from songs in English language that have a rating of 8 or lower.", "metadata": {}}
{"_id": "gpt3_2594", "text": "\nThis statement will select all distinct artist names from songs in English language, except the ones with a rating higher than 8.", "metadata": {}}
{"_id": "gpt3_2595", "text": "\nThis query will return a list of distinct artist names from songs in English that have a rating of 8 or lower.", "metadata": {}}
{"_id": "gpt3_2596", "text": "\nThis query selects the artist name and country of the top three rated songs, based on the artist name, from the artist and song tables.", "metadata": {}}
{"_id": "gpt3_2597", "text": "\nThis query selects the artist name and country from the artist table (T1) and joins it with the song table (T2) based on the artist name. The results are then ordered by the song rating in descending order and the top 3", "metadata": {}}
{"_id": "gpt3_2598", "text": "\nThis query will select the artist name and country from the artist table (T1) and join it with the song table (T2) on the artist name. The results will be ordered by the rating from the song table in descending order and", "metadata": {}}
{"_id": "gpt3_2599", "text": "\nThis query selects the artist name and country from the artist table (T1) and joins it with the song table (T2) based on the artist name. The results are then ordered by the song rating in descending order, and the top", "metadata": {}}
{"_id": "gpt3_2600", "text": "\nThis query selects the artist name and country from the artist table (T1) and joins the song table (T2) to get the rating. The results are then ordered by the rating in descending order and limited to the top 3.", "metadata": {}}
{"_id": "gpt3_2601", "text": "\nThis query selects the date that customers with customer IDs between 10 and 20 became customers.", "metadata": {}}
{"_id": "gpt3_2602", "text": "\nThis query will select the date each customer between customer ID 10 and 20 became a customer from the customers table.", "metadata": {}}
{"_id": "gpt3_2603", "text": "\nThis query will return the date each customer between customer ID 10 and 20 became a customer.", "metadata": {}}
{"_id": "gpt3_2604", "text": "\nThis query will select the date that customers with customer IDs between 10 and 20 became customers.", "metadata": {}}
{"_id": "gpt3_2605", "text": "\nThis query will return the date each customer between customer ID 10 and 20 became a customer.", "metadata": {}}
{"_id": "gpt3_2606", "text": "\nThis query will return the names from the Person table that are not present in the PersonFriend table.", "metadata": {}}
{"_id": "gpt3_2607", "text": "\nThis query will return all the names from the Person table that are not present in the PersonFriend table.", "metadata": {}}
{"_id": "gpt3_2608", "text": "\nThis query will return the names of people who are not in the PersonFriend table.", "metadata": {}}
{"_id": "gpt3_2609", "text": "\nThis query will return all names from the Person table that are not present in the PersonFriend table.", "metadata": {}}
{"_id": "gpt3_2610", "text": "\nThis query will return the names of all people in the Person table that are not in the PersonFriend table.", "metadata": {}}
{"_id": "gpt3_2611", "text": "\nThis query selects the lot details from the INVESTORS and LOTS tables where the Investor_details from the INVESTORS table is equal to \"l\".", "metadata": {}}
{"_id": "gpt3_2612", "text": "\nThis query will return the lot details from the Lots table for all investors with the Investor details of \"l\".", "metadata": {}}
{"_id": "gpt3_2613", "text": "\nThis query will select the lot details from the INVESTORS and LOTS tables where the Investor_details of the INVESTORS table is equal to \"l\".", "metadata": {}}
{"_id": "gpt3_2614", "text": "\nThis query will return the lot details from the Lots table for investors with the investor details of \"l\" from the Investors table.", "metadata": {}}
{"_id": "gpt3_2615", "text": "\nThis query will select the lot details from the INVESTORS and LOTS tables where the Investor details in the INVESTORS table is \"l\".", "metadata": {}}
{"_id": "gpt3_2616", "text": "\nThis query will return the total number of records in the actor table.", "metadata": {}}
{"_id": "gpt3_2617", "text": "\nThis query will return the total number of records in the actor table.", "metadata": {}}
{"_id": "gpt3_2618", "text": "\nThis query returns the total number of actors in the actor table.", "metadata": {}}
{"_id": "gpt3_2619", "text": "\nThis statement returns the total number of records in the actor table.", "metadata": {}}
{"_id": "gpt3_2620", "text": "\nThis statement returns the total number of rows in the actor table.", "metadata": {}}
{"_id": "gpt3_2621", "text": "\nThis query retrieves the Service Type Description and Service Type Code of the service type with the most services associated with it, from the Ref_Service_Types and Services tables. It groups the results by Service Type Code and orders them by the count", "metadata": {}}
{"_id": "gpt3_2622", "text": "\nThis query selects the service type description and code of the most frequently used service type from the Ref_Service_Types and Services tables, and orders the results by count in descending order, with only the top result being returned.", "metadata": {}}
{"_id": "gpt3_2623", "text": "\nThis query selects the service type description and service type code from the Ref_Service_Types table, and joins it with the Services table on the service type code. It then groups by the service type code, orders by the count of the records", "metadata": {}}
{"_id": "gpt3_2624", "text": "\nThis query selects the Service Type Description and Code from the Ref_Service_Types table, joining it to the Services table on the Service Type Code. It then groups the results by the Service Type Code and orders them by the count of the group", "metadata": {}}
{"_id": "gpt3_2625", "text": "\nThis query selects the Service Type Description and Service Type Code from the Ref_Service_Types table, joining it with the Services table on the Service Type Code, and groups by Service Type Code, ordering by the count of each Service Type Code in", "metadata": {}}
{"_id": "gpt3_2626", "text": "\nThis query selects all of the unique wineries from the wine table that have a price between $50 and $100.", "metadata": {}}
{"_id": "gpt3_2627", "text": "\nThis query will select all of the distinct wineries from the wine table where the price of the wine falls between $50 and $100.", "metadata": {}}
{"_id": "gpt3_2628", "text": "\nThis query will select all unique wineries from the wine table where the price is between 50 and 100.", "metadata": {}}
{"_id": "gpt3_2629", "text": "\nThis SQL query will select the distinct wineries from the WINE table that have wines with prices between 50 and 100.", "metadata": {}}
{"_id": "gpt3_2630", "text": "\nThis statement returns a list of all the wineries that have wines with prices between 50 and 100 dollars.", "metadata": {}}
{"_id": "gpt3_2631", "text": "\nThis query returns the total number of artists who are older than 46 years old and joined after 1990.", "metadata": {}}
{"_id": "gpt3_2632", "text": "\nThis query will count the number of artists who are over 46 years old and joined after 1990.", "metadata": {}}
{"_id": "gpt3_2633", "text": "\nThis query will count the number of artists who are older than 46 years old and who joined after 1990.", "metadata": {}}
{"_id": "gpt3_2634", "text": "\nThis query returns the number of artists who are over 46 years of age and joined after 1990.", "metadata": {}}
{"_id": "gpt3_2635", "text": "\nThis query will count the number of artists who are over 46 years old and joined after 1990.", "metadata": {}}
{"_id": "gpt3_2636", "text": "\nThis SQL query will return a list of nominees from the musical table who have been nominated more than two times.", "metadata": {}}
{"_id": "gpt3_2637", "text": "\nThis query returns all the nominees from the musical table who have received more than two awards.", "metadata": {}}
{"_id": "gpt3_2638", "text": "\nThis SQL statement selects all nominees from the musical table who have been nominated more than twice.", "metadata": {}}
{"_id": "gpt3_2639", "text": "\nThis query returns a list of nominees from the musical table who have been nominated more than twice.", "metadata": {}}
{"_id": "gpt3_2640", "text": "\nThis query will select the nominees from the musical table who have been nominated more than two times.", "metadata": {}}
{"_id": "gpt3_2641", "text": "\nThis query selects the age of the person with the tallest height from the people table, in descending order.", "metadata": {}}
{"_id": "gpt3_2642", "text": "\nThis query will select the age of the tallest person in the people table and return it as the result.", "metadata": {}}
{"_id": "gpt3_2643", "text": "\nThis query will select the age of the tallest person in the people table, ordered by height in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_2644", "text": "\nThis query will select the age of the tallest person from the people table, ordered from tallest to shortest, and limited to one result.", "metadata": {}}
{"_id": "gpt3_2645", "text": "\nThis query will select the age of the tallest person in the people table and order the results by height in descending order.", "metadata": {}}
{"_id": "gpt3_2646", "text": "\nThis query will select the address of the department named 'History' from the department table.", "metadata": {}}
{"_id": "gpt3_2647", "text": "\nThis query will return the address of the department named 'History' from the department table.", "metadata": {}}
{"_id": "gpt3_2648", "text": "\nThis query will return the address of the department with the name 'History' from the department table.", "metadata": {}}
{"_id": "gpt3_2649", "text": "\nThis query will return the address of the department with the name 'History' from the department table.", "metadata": {}}
{"_id": "gpt3_2650", "text": "\nThis query will return the address of the department with the name 'History' from the department table.", "metadata": {}}
{"_id": "gpt3_2651", "text": "\nThis query will calculate the average age of all the artists in the table.", "metadata": {}}
{"_id": "gpt3_2652", "text": "\nThis query will return the average age of all artists in the table.", "metadata": {}}
{"_id": "gpt3_2653", "text": "\nThis query will return the average age of all artists in the table.", "metadata": {}}
{"_id": "gpt3_2654", "text": "\nThis query will return the average age of all artists in the table.", "metadata": {}}
{"_id": "gpt3_2655", "text": "\nThis query will return the average age of all artists in the table.", "metadata": {}}
{"_id": "gpt3_2656", "text": "\nThis SQL statement will return the status of all roller coasters that have been recorded more than two times.", "metadata": {}}
{"_id": "gpt3_2657", "text": "\nThis query returns the Status of roller coasters that have more than two entries in the table.", "metadata": {}}
{"_id": "gpt3_2658", "text": "\nThis SQL statement will return the status of roller coasters that have been grouped together and have a count of more than two.", "metadata": {}}
{"_id": "gpt3_2659", "text": "\nThis SQL query will return the status of roller coasters from a table, grouped by status, only if the count of the status is greater than 2.", "metadata": {}}
{"_id": "gpt3_2660", "text": "\nThis query returns the status of roller coasters that appear more than two times in the table.", "metadata": {}}
{"_id": "gpt3_2661", "text": "\nThis query selects the problem_id from the problems table for records that have a product_id that matches the product_name of \"voluptatem\" in the product table and have a date_problem_reported greater than 1995.", "metadata": {}}
{"_id": "gpt3_2662", "text": "\nThis query will select all problem_id's from the problems table that are associated with the product name \"voluptatem\" and were reported after 1995.", "metadata": {}}
{"_id": "gpt3_2663", "text": "\nThis query selects the problem_id of all problems related to the product \"voluptatem\" reported after 1995.", "metadata": {}}
{"_id": "gpt3_2664", "text": "\nThis SQL statement selects the problem_id from the problems table (T1) that are associated with the product_name \"voluptatem\" from the product table (T2) and have a date_problem_reported greater than 1995.", "metadata": {}}
{"_id": "gpt3_2665", "text": "\nThis query selects the problem_id from the problems table (T1) that have a product_id that matches the product_name \"voluptatem\" in the product table (T2) and have a date_problem_reported after", "metadata": {}}
{"_id": "gpt3_2666", "text": "\nThis query will return the campus names from the campuses table where the year is between 1935 and 1939.", "metadata": {}}
{"_id": "gpt3_2667", "text": "\nThis query selects the campus names from the campuses table where the year is between 1935 and 1939.", "metadata": {}}
{"_id": "gpt3_2668", "text": "\nThis query returns all campuses from the campuses table that were established between the years of 1935 and 1939.", "metadata": {}}
{"_id": "gpt3_2669", "text": "\nThis query will return the campuses from the campuses table that were established between the years 1935 and 1939.", "metadata": {}}
{"_id": "gpt3_2670", "text": "\nThis query will return all campuses from the campuses table that were founded between the years 1935 and 1939.", "metadata": {}}
{"_id": "gpt3_2671", "text": "\nThe query will return the count of the distinct instruments used in the song \"Badlands\".", "metadata": {}}
{"_id": "gpt3_2672", "text": "\nThis query will return the count of distinct instruments used in the song \"Badlands\".", "metadata": {}}
{"_id": "gpt3_2673", "text": "\nThis query will return the number of different instruments used in the song \"Badlands\".", "metadata": {}}
{"_id": "gpt3_2674", "text": "\nThis query will count the number of distinct instruments used in the song \"Badlands\" from the instruments and songs tables.", "metadata": {}}
{"_id": "gpt3_2675", "text": "\nThis query returns the number of distinct instruments used in the song \"Badlands\".", "metadata": {}}
{"_id": "gpt3_2676", "text": "\nThis query returns the count of the distinct allergies in the Allergy_type table.", "metadata": {}}
{"_id": "gpt3_2677", "text": "\nThis query will return the total number of distinct allergies from the Allergy_type table.", "metadata": {}}
{"_id": "gpt3_2678", "text": "\nThis query will return the total number of distinct allergy types in the Allergy_type table.", "metadata": {}}
{"_id": "gpt3_2679", "text": "\nThis query returns the number of distinct types of allergies in the Allergy_type table.", "metadata": {}}
{"_id": "gpt3_2680", "text": "\nThis statement would return the count of the number of distinct allergies in the Allergy_type table.", "metadata": {}}
{"_id": "gpt3_2681", "text": "\nThe query will return the elimination move of Team Orton from the Elimination table.", "metadata": {}}
{"_id": "gpt3_2682", "text": "\nThe query will return the elimination move used by Team Orton from the Elimination table.", "metadata": {}}
{"_id": "gpt3_2683", "text": "\nThe query will return the elimination move used by Team Orton in the Elimination table.", "metadata": {}}
{"_id": "gpt3_2684", "text": "\nThis query will return the elimination move used by Team Orton in an elimination match.", "metadata": {}}
{"_id": "gpt3_2685", "text": "\nThis query would return the elimination move used by Team Orton from the Elimination table.", "metadata": {}}
{"_id": "gpt3_2686", "text": "\nThis query will return a list of distinct names of Reviewers who have rated the movie 'Gone with the Wind'.", "metadata": {}}
{"_id": "gpt3_2687", "text": "\nThis query will select the distinct names of all reviewers who have rated the movie 'Gone with the Wind'.", "metadata": {}}
{"_id": "gpt3_2688", "text": "\nThis query will return a list of distinct names of all the reviewers who have rated the movie 'Gone with the Wind'.", "metadata": {}}
{"_id": "gpt3_2689", "text": "\nThis query will select the names of all the distinct reviewers who have rated the movie 'Gone with the Wind'.", "metadata": {}}
{"_id": "gpt3_2690", "text": "\nThis query will return the distinct names of all reviewers who have rated the movie 'Gone with the Wind'.", "metadata": {}}
{"_id": "gpt3_2691", "text": "\nThis query is used to join the county and election tables to select the delegate and county name for each district.", "metadata": {}}
{"_id": "gpt3_2692", "text": "\nThis query will return the name of the delegate and the county name associated with each district in the election table.", "metadata": {}}
{"_id": "gpt3_2693", "text": "\nThis query joins the county and election tables on the County_id field, allowing the query to return the Delegate and County_name from the election table and the County_name from the county table.", "metadata": {}}
{"_id": "gpt3_2694", "text": "\nThis query joins the county and election tables to return the delegate and county name for each district.", "metadata": {}}
{"_id": "gpt3_2695", "text": "\nThis query joins the county and election tables to select the delegate and county name from each county in the election table.", "metadata": {}}
{"_id": "gpt3_2696", "text": "\nThis query will select the product names from the Products table and order them by their product price in ascending order.", "metadata": {}}
{"_id": "gpt3_2697", "text": "\nThis query selects the product names from the Products table and orders them from lowest to highest product price.", "metadata": {}}
{"_id": "gpt3_2698", "text": "\nThis query will select the product name from the Products table and order the results by the product price in ascending order.", "metadata": {}}
{"_id": "gpt3_2699", "text": "\nThis query will select the product name from the Products table and order them by ascending product price.", "metadata": {}}
{"_id": "gpt3_2700", "text": "\nThis query will select the product names from the Products table and order them by their price from lowest to highest.", "metadata": {}}
{"_id": "gpt3_2701", "text": "\nThis query selects the distinct problem_id and problem_log_id from the staff and problem_log tables for the staff member Rylan Homenick.", "metadata": {}}
{"_id": "gpt3_2702", "text": "\nThis query retrieves the distinct problem_id and problem_log_id from the staff and problem_log tables for the staff member with the first name \"Rylan\" and last name \"Homenick\".", "metadata": {}}
{"_id": "gpt3_2703", "text": "\nThis query will return all the distinct problem_id and problem_log_id from the problem_log table that are assigned to staff member Rylan Homenick.", "metadata": {}}
{"_id": "gpt3_2704", "text": "\nThis query retrieves all distinct problem_id and problem_log_id values from the problem_log table for the staff member with the first name \"Rylan\" and last name \"Homenick\".", "metadata": {}}
{"_id": "gpt3_2705", "text": "\nThis query selects the distinct problem ID and problem log ID from the staff and problem log tables for the staff member Rylan Homenick.", "metadata": {}}
{"_id": "gpt3_2706", "text": "\nThis query selects the title of the movie, the rating ID, the stars of the rating, and the minimum stars of the rating, from the Rating and Movie tables, grouping by the rating ID.", "metadata": {}}
{"_id": "gpt3_2707", "text": "\nThis query returns the title, rating ID, stars, and minimum stars of a movie for each rating ID.", "metadata": {}}
{"_id": "gpt3_2708", "text": "\nThis query selects the title, rating ID, stars, and minimum stars from the Rating and Movie tables that are grouped by the rating ID.", "metadata": {}}
{"_id": "gpt3_2709", "text": "\nThis query returns the title of a movie, the ID of the rating, the number of stars the rating has, and the minimum number of stars of all ratings for the movie.", "metadata": {}}
{"_id": "gpt3_2710", "text": "\nThis query returns the title, rating ID, stars, and minimum stars from the Rating and Movie tables, grouped by rating ID.", "metadata": {}}
{"_id": "gpt3_2711", "text": "\nThis query counts the number of customers in the table who have an email address that ends with \"gmail.com\".", "metadata": {}}
{"_id": "gpt3_2712", "text": "\nThis query returns the total number of customers in the CUSTOMER table who have an email address that ends with \"gmail.com\".", "metadata": {}}
{"_id": "gpt3_2713", "text": "\nThis query will count the number of customers with a Gmail.com email address.", "metadata": {}}
{"_id": "gpt3_2714", "text": "\nThis query will return the total number of customers with a Gmail.com email address.", "metadata": {}}
{"_id": "gpt3_2715", "text": "\nThis query returns the number of customers who have an email address that ends with \"gmail.com\".", "metadata": {}}
{"_id": "gpt3_2716", "text": "\nThis query selects the distinct names of colleges from the college table with enrollment greater than the minimum enrollment of colleges located in Florida.", "metadata": {}}
{"_id": "gpt3_2717", "text": "\nThis statement returns the names of all colleges in the college table with an enrollment greater than the minimum enrollment of any college in Florida.", "metadata": {}}
{"_id": "gpt3_2718", "text": "\nThis query will select the distinct names of colleges from the college table with enrollment greater than the minimum enrollment of colleges in the state of Florida.", "metadata": {}}
{"_id": "gpt3_2719", "text": "\nThis statement will select all distinct college names from the college table where the enrollment is greater than the minimum enrollment of any college in the state of Florida.", "metadata": {}}
{"_id": "gpt3_2720", "text": "\nThis query will select all distinct college names from the college table where the enrollment is greater than the minimum enrollment of any college in Florida.", "metadata": {}}
{"_id": "gpt3_2721", "text": "\nThis query returns the total number of students in the student table.", "metadata": {}}
{"_id": "gpt3_2722", "text": "\nThis query will return the total number of students in the student table.", "metadata": {}}
{"_id": "gpt3_2723", "text": "\nThis query returns the total number of students in the student table.", "metadata": {}}
{"_id": "gpt3_2724", "text": "\nThis query returns the total number of students in the student table.", "metadata": {}}
{"_id": "gpt3_2725", "text": "\nThis query would count the total number of records in the student table.", "metadata": {}}
{"_id": "gpt3_2726", "text": "\nThis query returns the names and prices of products from a table where the price is greater than or equal to 180, sorted in descending order by price and ascending order by name.", "metadata": {}}
{"_id": "gpt3_2727", "text": "\nThis statement selects the name and price of all products from the products table with a price greater than or equal to 180 and orders the results by price in descending order and name in ascending order.", "metadata": {}}
{"_id": "gpt3_2728", "text": "\nThis query will select the name and price of all products from a table with a price greater than or equal to 180 and order the results by price in descending order and then by name in ascending order.", "metadata": {}}
{"_id": "gpt3_2729", "text": "\nThis query will select the name and price from the products table where the price is greater than or equal to 180 and order the results by price in descending order and then by name in ascending order.", "metadata": {}}
{"_id": "gpt3_2730", "text": "\nThis query will select the name and price of all products with a price of 180 or more and order them by price in descending order, followed by name in ascending order.", "metadata": {}}
{"_id": "gpt3_2731", "text": "\nThis query would select the rating ID (rID) from the Rating table where the number of stars is not equal to 4.", "metadata": {}}
{"_id": "gpt3_2732", "text": "\nThis query will select the rID (rating ID) from the Rating table where the stars are not equal to 4.", "metadata": {}}
{"_id": "gpt3_2733", "text": "\nThis query returns the IDs of all ratings that do not have a star rating of 4.", "metadata": {}}
{"_id": "gpt3_2734", "text": "\nThis query will select the IDs of all ratings that do not have a star rating of 4.", "metadata": {}}
{"_id": "gpt3_2735", "text": "\nThis query selects the ID of all ratings that are not 4 stars from the Rating table.", "metadata": {}}
{"_id": "gpt3_2736", "text": "\nThis query returns a list of nominees from the musical table who have been nominated for more than two awards.", "metadata": {}}
{"_id": "gpt3_2737", "text": "\nThis query returns a list of nominees from the musical table who have been nominated for more than two awards.", "metadata": {}}
{"_id": "gpt3_2738", "text": "\nThis query selects all the nominees from the musical table that have been nominated for more than two awards.", "metadata": {}}
{"_id": "gpt3_2739", "text": "\nThis query returns a list of nominees from a musical who have been nominated for more than two awards.", "metadata": {}}
{"_id": "gpt3_2740", "text": "\nThis query selects all nominees from the musical table whose names appear more than two times.", "metadata": {}}
{"_id": "gpt3_2741", "text": "\nThis query will return the names of all video games that Linda Smith has played.", "metadata": {}}
{"_id": "gpt3_2742", "text": "\nThis query will select the game names from the Plays_games, Video_games, and Student tables where the last name is \"Smith\" and the first name is \"Linda\".", "metadata": {}}
{"_id": "gpt3_2743", "text": "\nThis query will select the names of the video games that Linda Smith has played.", "metadata": {}}
{"_id": "gpt3_2744", "text": "\nThis query will select the game name from the Plays_games, Video_games and Student tables for the student named Linda Smith.", "metadata": {}}
{"_id": "gpt3_2745", "text": "\nThis query will select the name of the video games that Linda Smith plays.", "metadata": {}}
{"_id": "gpt3_2746", "text": "\nThis query returns the apartment numbers of apartments that have both an available and unavailable unit status.", "metadata": {}}
{"_id": "gpt3_2747", "text": "\nThis query selects the apartment numbers of units that are both available and unavailable.", "metadata": {}}
{"_id": "gpt3_2748", "text": "\nThis query returns the apartment numbers of units that have both a status of '0' and '1' in the View_Unit_Status table.", "metadata": {}}
{"_id": "gpt3_2749", "text": "\nThis query returns the apartment numbers of units that have both an available and unavailable status.", "metadata": {}}
{"_id": "gpt3_2750", "text": "\nThis query returns the apartment numbers of the apartments that have both an available and unavailable unit.", "metadata": {}}
{"_id": "gpt3_2751", "text": "\nThis query returns the total number of climbers in the table.", "metadata": {}}
{"_id": "gpt3_2752", "text": "\nThis query will return the total number of climbers in the table.", "metadata": {}}
{"_id": "gpt3_2753", "text": "\nThis query returns the total number of climbers in the table.", "metadata": {}}
{"_id": "gpt3_2754", "text": "\nThis query will return the total number of climbers in the table.", "metadata": {}}
{"_id": "gpt3_2755", "text": "\nThis query will return the total number of climbers in the table.", "metadata": {}}
{"_id": "gpt3_2756", "text": "\nThis query will select the address of the department with the name \"History\" from the department table.", "metadata": {}}
{"_id": "gpt3_2757", "text": "\nThis query will select the address of the department named 'History' from the department table.", "metadata": {}}
{"_id": "gpt3_2758", "text": "\nThis query will return the address of the department of History from the department table.", "metadata": {}}
{"_id": "gpt3_2759", "text": "\nThis query will select the address of the department with the name 'History' from the department table.", "metadata": {}}
{"_id": "gpt3_2760", "text": "\nThis query will return the address of the department with the name 'History' from the department table.", "metadata": {}}
{"_id": "gpt3_2761", "text": "\nThis query will return the first and last name of any players who weigh more than 220 pounds or are shorter than 75 inches.", "metadata": {}}
{"_id": "gpt3_2762", "text": "\nThis query will select the first and last name of any players who weigh more than 220 pounds or are shorter than 75 inches.", "metadata": {}}
{"_id": "gpt3_2763", "text": "\nThis query will return all players from the player table who have a weight greater than 220 pounds or a height less than 75 inches.", "metadata": {}}
{"_id": "gpt3_2764", "text": "\nThis query will select the first and last name of players from the player table whose weight is greater than 220 or height is less than 75.", "metadata": {}}
{"_id": "gpt3_2765", "text": "\nThis query will select the first and last names of players from the player table who weigh more than 220 pounds or are shorter than 75 inches.", "metadata": {}}
{"_id": "gpt3_2766", "text": "\nThis query returns the names of all employees who have a certificate for both the Boeing 737-800 and the Airbus A340-300 aircraft.", "metadata": {}}
{"_id": "gpt3_2767", "text": "\nThis query selects the names of all employees who have a certificate for both the Boeing 737-800 and the Airbus A340-300 aircraft.", "metadata": {}}
{"_id": "gpt3_2768", "text": "\nThis query returns the names of employees who have certificates for both the Boeing 737-800 and the Airbus A340-300 aircraft.", "metadata": {}}
{"_id": "gpt3_2769", "text": "\nThis query returns the names of all employees who have a certificate for both the Boeing 737-800 and the Airbus A340-300 aircrafts.", "metadata": {}}
{"_id": "gpt3_2770", "text": "\nThis query returns the names of Employees who have a Certificate for both the Boeing 737-800 and the Airbus A340-300 Aircraft.", "metadata": {}}
{"_id": "gpt3_2771", "text": "\nThis SQL statement will select the status of roller coasters from a table and group them together by status, only selecting those statuses that have more than two roller coasters associated with them.", "metadata": {}}
{"_id": "gpt3_2772", "text": "\nThis SQL statement will return all the Status values from the roller_coaster table that appear more than twice.", "metadata": {}}
{"_id": "gpt3_2773", "text": "\nThis SQL query returns all of the unique statuses from the roller coaster table that appear more than two times.", "metadata": {}}
{"_id": "gpt3_2774", "text": "\nThis query will return the status of roller coasters from a table that have a count of more than two.", "metadata": {}}
{"_id": "gpt3_2775", "text": "\nThis SQL statement will select the status of roller coasters from a table and group them together based on their status, only displaying those with a count greater than 2.", "metadata": {}}
{"_id": "gpt3_2776", "text": "\nThis query will return a list of all distinct police forces from county public safety records, excluding those located in the East region.", "metadata": {}}
{"_id": "gpt3_2777", "text": "\nThis query will return all the distinct police forces from county public safety records where the location is not East.", "metadata": {}}
{"_id": "gpt3_2778", "text": "\nThis query will select all of the distinct police forces from the county_public_safety table where the location is not equal to \"East\".", "metadata": {}}
{"_id": "gpt3_2779", "text": "\nThis query returns a list of all police forces from county public safety records that are not located in the East region.", "metadata": {}}
{"_id": "gpt3_2780", "text": "\nThis query will return all distinct police forces from county public safety records that are not located in the East region.", "metadata": {}}
{"_id": "gpt3_2781", "text": "\nThis query counts the number of Drama Workshop Groups in each City/Town.", "metadata": {}}
{"_id": "gpt3_2782", "text": "\nThis query will return a list of cities and towns, along with the number of drama workshop groups located in each city or town.", "metadata": {}}
{"_id": "gpt3_2783", "text": "\nThis query will return the City_Town and the number of Drama Workshop Groups associated with each City_Town, by joining the Addresses and Drama Workshop Groups tables on the Address_ID field.", "metadata": {}}
{"_id": "gpt3_2784", "text": "\nThis query will return a list of cities/towns and the number of drama workshop groups associated with each city/town.", "metadata": {}}
{"_id": "gpt3_2785", "text": "\nThis query counts the number of Drama Workshop Groups in each city or town.", "metadata": {}}
{"_id": "gpt3_2786", "text": "\nThis query will select the driver ID and surname of the driver who has participated in the most races, ordered by count and limited to one result.", "metadata": {}}
{"_id": "gpt3_2787", "text": "\nThis query retrieves the driver ID and surname of the driver who has participated in the most races, sorted in descending order, and limited to the first result.", "metadata": {}}
{"_id": "gpt3_2788", "text": "\nThis query selects the driverid and surname of the driver who has participated in the most races, as determined by counting the number of races associated with each driver's ID. The query joins the drivers, results, and races tables and groups the results", "metadata": {}}
{"_id": "gpt3_2789", "text": "\nThis query retrieves the driver ID and surname of the driver who has participated in the most races, ordered by the number of races they have participated in and limited to the top result.", "metadata": {}}
{"_id": "gpt3_2790", "text": "\nThis query selects the driver ID and surname of the driver with the most race wins, by joining the drivers, results, and races tables, grouping by driver ID, and ordering by count of wins in descending order, and limiting the result to one", "metadata": {}}
{"_id": "gpt3_2791", "text": "\nThis query returns the customer phone numbers associated with the policy type code that appears most frequently in the available_policies table.", "metadata": {}}
{"_id": "gpt3_2792", "text": "\nThis query will select the customer phone numbers from the available policies table where the policy type code is equal to the policy type code with the highest count from the available policies table.", "metadata": {}}
{"_id": "gpt3_2793", "text": "\nThis query retrieves the phone number for customers with the most common policy type code.", "metadata": {}}
{"_id": "gpt3_2794", "text": "\nThis query will select the customer phone numbers from the available policies table, where the policy type code is the same as the policy type code from the available policies table that has the highest count.", "metadata": {}}
{"_id": "gpt3_2795", "text": "\nThis query retrieves the phone number of customers with the most common policy type.", "metadata": {}}
{"_id": "gpt3_2796", "text": "\nThis query returns the average rating of the movie with the earliest release year, along with its title.", "metadata": {}}
{"_id": "gpt3_2797", "text": "\nThis query will return the average rating and title of the movie released in the earliest year in the Movie table.", "metadata": {}}
{"_id": "gpt3_2798", "text": "\nThis query returns the average rating and title of the movie released in the earliest year.", "metadata": {}}
{"_id": "gpt3_2799", "text": "\nThis query will return the average star rating and title of the movie released in the earliest year in the Movie table.", "metadata": {}}
{"_id": "gpt3_2800", "text": "\nThis query calculates the average star rating of the movie with the earliest release year.", "metadata": {}}
{"_id": "gpt3_2801", "text": "\nThis statement is a SQL query that will select all records from a table called basketball_match. It will return all columns and rows from the table.", "metadata": {}}
{"_id": "gpt3_2802", "text": "\nThe SELECT * FROM basketball_match statement is used to retrieve all the data from the basketball_match table in a database. This statement will return all the columns and rows from the table.", "metadata": {}}
{"_id": "gpt3_2803", "text": "\nThis statement is a SQL query that is used to select all columns and rows from a table named \"basketball_match\". It is typically used to retrieve all data from the table, which may include information such as teams, players, scores, and", "metadata": {}}
{"_id": "gpt3_2804", "text": "\nThis query retrieves all records from the basketball_match table. It will return all columns and rows from the table.", "metadata": {}}
{"_id": "gpt3_2805", "text": "\nThis statement is a SELECT query that will retrieve all data from the basketball_match table in a database. It will return all columns and rows in the table.", "metadata": {}}
{"_id": "gpt3_2806", "text": "\nThis query selects the titles of albums that contain both Reggae and Rock tracks.", "metadata": {}}
{"_id": "gpt3_2807", "text": "\nThis query returns the titles of albums that contain both Reggae and Rock genres.", "metadata": {}}
{"_id": "gpt3_2808", "text": "\nThis query selects the titles of albums which contain both Reggae and Rock tracks.", "metadata": {}}
{"_id": "gpt3_2809", "text": "\nThis query retrieves the titles of all albums that contain both Reggae and Rock tracks.", "metadata": {}}
{"_id": "gpt3_2810", "text": "\nThis query selects the titles of albums that have both Reggae and Rock tracks.", "metadata": {}}
{"_id": "gpt3_2811", "text": "\nThis query selects the name and year of all races in which Lewis participated, based on the results, races, and drivers tables.", "metadata": {}}
{"_id": "gpt3_2812", "text": "\nThis query selects the name and year of races in which driver Lewis participated in.", "metadata": {}}
{"_id": "gpt3_2813", "text": "\nThis query selects the name and year of races in which Lewis Hamilton competed.", "metadata": {}}
{"_id": "gpt3_2814", "text": "\nThis query will select the name and year of all races that Lewis has competed in, based on data from the results, races, and drivers tables.", "metadata": {}}
{"_id": "gpt3_2815", "text": "\nThis query will select the name and year of races in which Lewis participated, based on the results, races and drivers tables.", "metadata": {}}
{"_id": "gpt3_2816", "text": "\nThis SQL query counts the number of payments made by each payment method code. It returns a table with two columns, one for the payment method code and one for the count of payments made with that code.", "metadata": {}}
{"_id": "gpt3_2817", "text": "\nThis SQL query returns the number of payments made by each payment method code. It groups the payments by payment method code and then counts the number of payments for each payment method code.", "metadata": {}}
{"_id": "gpt3_2818", "text": "\nThis SQL query will count the number of payments made using each payment method code in the Customer_Payments table.", "metadata": {}}
{"_id": "gpt3_2819", "text": "\nThis SQL statement will count the number of payments made by each payment method code in the Customer_Payments table.", "metadata": {}}
{"_id": "gpt3_2820", "text": "\nThis SQL query counts the number of payments made by each payment method code. The result of the query will be a table with two columns: payment_method_code and count(*).", "metadata": {}}
{"_id": "gpt3_2821", "text": "\nThis query retrieves the calendar date and day number from the Ref_calendar table.", "metadata": {}}
{"_id": "gpt3_2822", "text": "\nThis query returns a list of calendar dates and their corresponding day numbers from the Ref_calendar table.", "metadata": {}}
{"_id": "gpt3_2823", "text": "\nThis query selects the calendar date and day number from the reference calendar table.", "metadata": {}}
{"_id": "gpt3_2824", "text": "\nThis query will return the calendar date and the corresponding day number from the Ref_calendar table.", "metadata": {}}
{"_id": "gpt3_2825", "text": "\nThis query will return the calendar date and the corresponding day number from the Ref_calendar table.", "metadata": {}}
{"_id": "gpt3_2826", "text": "\nThis query selects the first and last name of all students, as well as the course description, by joining the student, enroll, class and course tables.", "metadata": {}}
{"_id": "gpt3_2827", "text": "\nThis query selects the first and last name of a student, as well as the course description, from the student, enroll, class, and course tables.", "metadata": {}}
{"_id": "gpt3_2828", "text": "\nThis query selects the first and last name of a student as well as the course description associated with the course they are enrolled in.", "metadata": {}}
{"_id": "gpt3_2829", "text": "\nThis query selects the first and last name of a student, as well as the course description of the classes they are enrolled in, from the student, enroll, class, and course tables.", "metadata": {}}
{"_id": "gpt3_2830", "text": "\nThis query selects the first and last name of a student, as well as the course description, from the student, enroll, class, and course tables.", "metadata": {}}
{"_id": "gpt3_2831", "text": "\nThis SQL statement will select the first name, last name, and phone number of the customer associated with the account named \"162\" from the Accounts and Customers tables.", "metadata": {}}
{"_id": "gpt3_2832", "text": "\nThis query selects the first name, last name, and phone number of customers who have an account with the name \"162\" from the Accounts and Customers tables.", "metadata": {}}
{"_id": "gpt3_2833", "text": "\nThis query selects the first name, last name, and phone number of the customer associated with the account named \"162\" from the Accounts and Customers tables.", "metadata": {}}
{"_id": "gpt3_2834", "text": "\nThis query selects the first and last name and phone number of the customer associated with the account name \"162\".", "metadata": {}}
{"_id": "gpt3_2835", "text": "\nThis query selects the first name, last name, and phone number of customers associated with the account \"162\" from the Accounts and Customers tables.", "metadata": {}}
{"_id": "gpt3_2836", "text": "\nThis query returns the color of the most expensive grape used in wine, on average, from the GRAPES and WINE tables.", "metadata": {}}
{"_id": "gpt3_2837", "text": "\nThis query selects the color of the most expensive grape variety from the GRAPES and WINE tables, grouped by grape and ordered by the average price of the wine.", "metadata": {}}
{"_id": "gpt3_2838", "text": "\nThis query will select the color of the most expensive grape variety, based on the average price of wines made from that variety, from the tables GRAPES and WINE.", "metadata": {}}
{"_id": "gpt3_2839", "text": "\nThis query selects the color of the most expensive grape used to make wine, according to the average price of the wines made with that grape.", "metadata": {}}
{"_id": "gpt3_2840", "text": "\nThis query will select the color of the most expensive grape variety from the GRAPES and WINE tables, grouped by grape and ordered by average price in descending order, with a limit of one.", "metadata": {}}
{"_id": "gpt3_2841", "text": "\nThis query will return the total number of records in the student table.", "metadata": {}}
{"_id": "gpt3_2842", "text": "\nThis query will return the total number of students in the student table.", "metadata": {}}
{"_id": "gpt3_2843", "text": "\nThis query returns the total number of students in the student table.", "metadata": {}}
{"_id": "gpt3_2844", "text": "\nThis query will count the total number of rows in the student table.", "metadata": {}}
{"_id": "gpt3_2845", "text": "\nThis query would return the total number of students in a given table.", "metadata": {}}
{"_id": "gpt3_2846", "text": "\nThis query will calculate the average High School (HS) rating of all players in the Player table.", "metadata": {}}
{"_id": "gpt3_2847", "text": "\nThis query will return the average High School (HS) rating of all players in the Player table.", "metadata": {}}
{"_id": "gpt3_2848", "text": "\nThis query returns the average High School (HS) grade of all Players in the database.", "metadata": {}}
{"_id": "gpt3_2849", "text": "\nThis query will return the average High School (HS) grade for all players in the Player table.", "metadata": {}}
{"_id": "gpt3_2850", "text": "\nThis query will return the average High School score of all players in the Player table.", "metadata": {}}
{"_id": "gpt3_2851", "text": "\nThis query will select the last names of female students from Baltimore and the last names of male students who are under 20 years old.", "metadata": {}}
{"_id": "gpt3_2852", "text": "\nThis query selects the last names of female students from Baltimore and the last names of male students under the age of 20.", "metadata": {}}
{"_id": "gpt3_2853", "text": "\nThis query will return a list of last names from students who are either female and from the city code BAL, or male and under the age of 20.", "metadata": {}}
{"_id": "gpt3_2854", "text": "\nThis query will return a list of last names from students who are either female and from Baltimore, or male and under the age of 20.", "metadata": {}}
{"_id": "gpt3_2855", "text": "\nThis query will select the last names of female students who live in the city code BAL, as well as the last names of male students who are under the age of 20.", "metadata": {}}
{"_id": "gpt3_2856", "text": "\nThis query returns the date and zip code of all weather records where the maximum temperature is 80 degrees Fahrenheit or higher.", "metadata": {}}
{"_id": "gpt3_2857", "text": "\nThis query will return the date and zip code of all weather records with a maximum temperature of 80 degrees Fahrenheit or higher.", "metadata": {}}
{"_id": "gpt3_2858", "text": "\nThis query will return all dates and zip codes from the weather table where the maximum temperature is 80 degrees Fahrenheit or higher.", "metadata": {}}
{"_id": "gpt3_2859", "text": "\nThis query will select the date and zip code from the weather table where the maximum temperature is greater than or equal to 80 degrees Fahrenheit.", "metadata": {}}
{"_id": "gpt3_2860", "text": "\nThis query will return the date and zip code of all weather records where the maximum temperature was 80 degrees Fahrenheit or higher.", "metadata": {}}
{"_id": "gpt3_2861", "text": "\nThis query will return the details of all sales and purchases from the sales and purchases tables, respectively. The result will be a combined set of data from both tables.", "metadata": {}}
{"_id": "gpt3_2862", "text": "\nThis query will return a combined list of sales and purchase details from the sales and purchases tables.", "metadata": {}}
{"_id": "gpt3_2863", "text": "\nThis query will return the combined results of sales_details from the sales table and purchase_details from the purchases table. The result will include all the rows from both tables, with duplicates removed.", "metadata": {}}
{"_id": "gpt3_2864", "text": "\nThis query will return all the sales details from the sales table and all the purchase details from the purchases table. The returned result set will include all the details from both tables combined.", "metadata": {}}
{"_id": "gpt3_2865", "text": "\nThis query will return a list of all sales and purchase details from the sales and purchases tables, respectively.", "metadata": {}}
{"_id": "gpt3_2866", "text": "\nThis query returns the name of the stadium where Walter Samuel and Thiago Motta both suffered an injury or accident during a game.", "metadata": {}}
{"_id": "gpt3_2867", "text": "\nThis query selects the name of the stadium where Walter Samuel and Thiago Motta both had an injury or accident during a game.", "metadata": {}}
{"_id": "gpt3_2868", "text": "\nThis query returns the name of the stadium where Walter Samuel and Thiago Motta both had an injury accident in a game.", "metadata": {}}
{"_id": "gpt3_2869", "text": "\nThis query selects the name of the stadium from the game, stadium, and injury_accident tables where both Walter Samuel and Thiago Motta suffered injuries or accidents.", "metadata": {}}
{"_id": "gpt3_2870", "text": "\nThis query returns the name of the stadium where both Walter Samuel and Thiago Motta were injured in the same game.", "metadata": {}}
{"_id": "gpt3_2871", "text": "\nThis query will return the maximum and minimum population from the county table. The result will be the highest and lowest population values in the table.", "metadata": {}}
{"_id": "gpt3_2872", "text": "\nThis query returns the maximum and minimum populations from the county table. The result will be the maximum population and the minimum population of the county.", "metadata": {}}
{"_id": "gpt3_2873", "text": "\nThe query will return the maximum and minimum population from the county table. The result will be the largest and smallest population values from the table.", "metadata": {}}
{"_id": "gpt3_2874", "text": "\nThis query will return the maximum and minimum population from the county table.", "metadata": {}}
{"_id": "gpt3_2875", "text": "\nThis query will return the maximum and minimum population of the county table.", "metadata": {}}
{"_id": "gpt3_2876", "text": "\nThis query will return a list of people ordered by their height in ascending order, along with their birth date.", "metadata": {}}
{"_id": "gpt3_2877", "text": "\nThis query will select all birth dates from the People table and order them by height in ascending order.", "metadata": {}}
{"_id": "gpt3_2878", "text": "\nThis query will select the birth date of all people from a database and order them by height in ascending order.", "metadata": {}}
{"_id": "gpt3_2879", "text": "\nThis query will return a list of birth dates from the People table, sorted in ascending order by height.", "metadata": {}}
{"_id": "gpt3_2880", "text": "\nThis query selects the birth dates of people in a table and orders them by height in ascending order.", "metadata": {}}
{"_id": "gpt3_2881", "text": "\nThis query will return a list of all the names of the Reviewers and the titles of all the Movies from the two tables.", "metadata": {}}
{"_id": "gpt3_2882", "text": "\nThe above SQL query will return a list of all the names of the reviewers, as well as all the titles of the movies, from the Reviewer and Movie tables, respectively.", "metadata": {}}
{"_id": "gpt3_2883", "text": "\nThis statement will return a list of all the names of Reviewers and titles of Movies in a single column.", "metadata": {}}
{"_id": "gpt3_2884", "text": "\nThis query will return a list of all the names of reviewers and titles of movies from both tables.", "metadata": {}}
{"_id": "gpt3_2885", "text": "\nThis statement will return a list of all the names of the reviewers and the titles of the movies from the Reviewer and Movie tables, respectively.", "metadata": {}}
{"_id": "gpt3_2886", "text": "\nThis query counts the number of courses in the department of Computer Information Systems.", "metadata": {}}
{"_id": "gpt3_2887", "text": "\nThis query counts the number of courses offered by the department of Computer Information Systems.", "metadata": {}}
{"_id": "gpt3_2888", "text": "\nThis query counts the number of courses in the department of Computer Information Systems.", "metadata": {}}
{"_id": "gpt3_2889", "text": "\nThis query counts the number of courses in the department of Computer Information Systems.", "metadata": {}}
{"_id": "gpt3_2890", "text": "\nThis query counts the number of courses offered by the department of Computer Information Systems.", "metadata": {}}
{"_id": "gpt3_2891", "text": "\nThis query selects the full name of apartment buildings whose name includes the word \"court\".", "metadata": {}}
{"_id": "gpt3_2892", "text": "\nThis query selects the full name of all apartment buildings with the word \"court\" in the name.", "metadata": {}}
{"_id": "gpt3_2893", "text": "\nThis query selects all building full names from the Apartment Buildings table that contain the word \"court\".", "metadata": {}}
{"_id": "gpt3_2894", "text": "\nThis query selects all building full names from the Apartment Buildings table that contain the word \"court\".", "metadata": {}}
{"_id": "gpt3_2895", "text": "\nThis query selects the full name of all apartment buildings whose name contains the word \"court\".", "metadata": {}}
{"_id": "gpt3_2896", "text": "\nThis query will return a list of flight numbers, origins, and destinations from the Flight table, sorted in ascending order by origin.", "metadata": {}}
{"_id": "gpt3_2897", "text": "\nThis query returns a list of flights with their flight number, origin, and destination, sorted by origin.", "metadata": {}}
{"_id": "gpt3_2898", "text": "\nThis query returns a list of flights, along with their flight numbers, origins, and destinations, sorted in ascending order by origin.", "metadata": {}}
{"_id": "gpt3_2899", "text": "\nThis query retrieves the flight number (flno), origin, and destination of all flights in the Flight table, ordered by origin.", "metadata": {}}
{"_id": "gpt3_2900", "text": "\nThis SQL query will return a table of flight numbers, their origin, and their destination, sorted by origin in ascending order.", "metadata": {}}
{"_id": "gpt3_2901", "text": "\nThis query will return the chip model and screen mode for the LG-P760 phone model.", "metadata": {}}
{"_id": "gpt3_2902", "text": "\nThis query will return the chip model and screen mode of the LG-P760 phone.", "metadata": {}}
{"_id": "gpt3_2903", "text": "\nThis query will return the chip model and screen mode of the LG-P760 phone.", "metadata": {}}
{"_id": "gpt3_2904", "text": "\nThis query will return the chip model and screen mode of the LG-P760 phone from the phone table.", "metadata": {}}
{"_id": "gpt3_2905", "text": "\nThis query will return the chip model and screen mode of all phones with the hardware model name of \"LG-P760\".", "metadata": {}}
{"_id": "gpt3_2906", "text": "\nThis query will select the names of all enzymes from the enzyme table that contain the letters ALA in their name.", "metadata": {}}
{"_id": "gpt3_2907", "text": "\nThis SQL query will return the names of all enzymes that contain the letters \"ALA\" in their name.", "metadata": {}}
{"_id": "gpt3_2908", "text": "\nThis query will select the names of all enzymes that contain the substring \"ALA\" in their name.", "metadata": {}}
{"_id": "gpt3_2909", "text": "\nThis query will select the name of any enzyme from the enzyme table that contains the letters ALA.", "metadata": {}}
{"_id": "gpt3_2910", "text": "\nThis query will return all records from the enzyme table that have the letters \"ALA\" in the name field.", "metadata": {}}
{"_id": "gpt3_2911", "text": "\nThis query returns the names of all channels that have broadcasts in both the morning and night.", "metadata": {}}
{"_id": "gpt3_2912", "text": "\nThis query returns the names of all channels that broadcast in both the morning and night.", "metadata": {}}
{"_id": "gpt3_2913", "text": "\nThis statement selects the names of channels that broadcast in both the morning and night.", "metadata": {}}
{"_id": "gpt3_2914", "text": "\nThis query selects the names of channels that have broadcasts during both the morning and night.", "metadata": {}}
{"_id": "gpt3_2915", "text": "\nThis query selects the names of channels from the channel and broadcast tables that broadcast in both the morning and night.", "metadata": {}}
{"_id": "gpt3_2916", "text": "\nThis SQL statement will select the name of each playlist that has more than 100 tracks in it.", "metadata": {}}
{"_id": "gpt3_2917", "text": "\nThis query selects the names of playlists that have more than 100 tracks in them.", "metadata": {}}
{"_id": "gpt3_2918", "text": "\nThis query selects the name of all playlists that contain more than 100 tracks.", "metadata": {}}
{"_id": "gpt3_2919", "text": "\nThis query selects the name of playlists that have more than 100 tracks associated with them.", "metadata": {}}
{"_id": "gpt3_2920", "text": "\nThis query returns the names of all playlists that contain more than 100 tracks.", "metadata": {}}
{"_id": "gpt3_2921", "text": "\nThis query will return the three distinct mountain ranges with the highest prominence, in descending order.", "metadata": {}}
{"_id": "gpt3_2922", "text": "\nThis query will select the three mountain ranges with the highest prominence, and will return them in descending order.", "metadata": {}}
{"_id": "gpt3_2923", "text": "\nThis query will select the three distinct ranges of mountains with the highest prominence, in descending order.", "metadata": {}}
{"_id": "gpt3_2924", "text": "\nThis query will select the three most prominent mountain ranges from a table of mountains, ordered by their prominence in descending order.", "metadata": {}}
{"_id": "gpt3_2925", "text": "\nThis query returns the three highest mountain ranges based on their prominence, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_2926", "text": "\nThis query will count the number of classrooms in the Lamberton building with a capacity of less than 50.", "metadata": {}}
{"_id": "gpt3_2927", "text": "\nThis query will count the number of classrooms in Lamberton with a capacity of less than 50 people.", "metadata": {}}
{"_id": "gpt3_2928", "text": "\nThis query will count the number of classrooms in Lamberton building with a capacity of less than 50.", "metadata": {}}
{"_id": "gpt3_2929", "text": "\nThis query will return the total number of classrooms in Lamberton building with a capacity of less than 50 people.", "metadata": {}}
{"_id": "gpt3_2930", "text": "\nThis query will count the number of classrooms in the Lamberton building that have a capacity of less than 50 people.", "metadata": {}}
{"_id": "gpt3_2931", "text": "\nThis query will count the total number of customers in the customers table.", "metadata": {}}
{"_id": "gpt3_2932", "text": "\nThis query will return the total number of customers in the customers table.", "metadata": {}}
{"_id": "gpt3_2933", "text": "\nThis query returns the total number of customers in the customers table.", "metadata": {}}
{"_id": "gpt3_2934", "text": "\nThis query will return the total number of customers in the customers table.", "metadata": {}}
{"_id": "gpt3_2935", "text": "\nThis query will return the total number of customers in the customers table.", "metadata": {}}
{"_id": "gpt3_2936", "text": "\nThis query selects the City_Towns from the Addresses table associated with a Customer, except for those City_Towns associated with a Performer.", "metadata": {}}
{"_id": "gpt3_2937", "text": "\nThis query selects all cities and towns from the Addresses table that are associated with customers but not associated with performers.", "metadata": {}}
{"_id": "gpt3_2938", "text": "\nThis query returns the City/Town from the Addresses table that are associated with Customers but not associated with Performers.", "metadata": {}}
{"_id": "gpt3_2939", "text": "\nThis query returns the cities and towns associated with customers in the Addresses table that are not associated with performers in the Addresses table.", "metadata": {}}
{"_id": "gpt3_2940", "text": "\nThis query selects all of the city/town locations from the Addresses table that are associated with customers, but not associated with performers.", "metadata": {}}
{"_id": "gpt3_2941", "text": "\nThis query selects the room name of all Rooms that have more than 60 Reservations.", "metadata": {}}
{"_id": "gpt3_2942", "text": "\nThis query will select the room name from the Reservations and Rooms tables, grouping the results by the Room ID and having a count of more than 60. This will return all the room names that have more than 60 reservations.", "metadata": {}}
{"_id": "gpt3_2943", "text": "\nThis query selects the room name from the Reservations and Rooms tables, grouping by the RoomId and having a count of more than 60. The result of this query is a list of room names where the number of reservations for that room is greater", "metadata": {}}
{"_id": "gpt3_2944", "text": "\nThis query selects the room names from the Reservations and Rooms tables that have more than 60 reservations associated with them.", "metadata": {}}
{"_id": "gpt3_2945", "text": "\nThis SQL statement will select the room names from the Reservations and Rooms tables where the number of reservations for a particular room is greater than 60.", "metadata": {}}
{"_id": "gpt3_2946", "text": "\nThis query returns the cities and the number of airports in each city that has more than one airport.", "metadata": {}}
{"_id": "gpt3_2947", "text": "\nThis SQL query will return a list of cities and the number of airports located in each city where there is more than one airport.", "metadata": {}}
{"_id": "gpt3_2948", "text": "\nThis query returns the cities that have more than one airport and the number of airports for each city.", "metadata": {}}
{"_id": "gpt3_2949", "text": "\nThis query will count the number of airports in each city and return only cities that have more than one airport.", "metadata": {}}
{"_id": "gpt3_2950", "text": "\nThis SQL statement will count the number of airports in each city and return only cities with more than one airport.", "metadata": {}}
{"_id": "gpt3_2951", "text": "\nThis query returns the average number of bikes available at all stations that are not in Palo Alto.", "metadata": {}}
{"_id": "gpt3_2952", "text": "\nThis query calculates the average number of bikes available from all stations that are not located in Palo Alto.", "metadata": {}}
{"_id": "gpt3_2953", "text": "\nThis query will calculate the average number of bikes available at all stations that are not located in Palo Alto.", "metadata": {}}
{"_id": "gpt3_2954", "text": "\nThis query returns the average number of bikes available at all stations that are not located in Palo Alto.", "metadata": {}}
{"_id": "gpt3_2955", "text": "\nThis query returns the average number of bikes available at stations that are not located in Palo Alto.", "metadata": {}}
{"_id": "gpt3_2956", "text": "\nThis query will select the total from the body_builder table for people who have a birth date in the month of January.", "metadata": {}}
{"_id": "gpt3_2957", "text": "\nThis statement selects the total from the body_builder table for people whose birth date is in the month of January.", "metadata": {}}
{"_id": "gpt3_2958", "text": "\nThis query will select the total amount from the body_builder table for all people whose birth date is in January.", "metadata": {}}
{"_id": "gpt3_2959", "text": "\nThis query selects the total from the body_builder table for people whose birth date is in January.", "metadata": {}}
{"_id": "gpt3_2960", "text": "\nThis query will select the total from the body_builder table for all people whose birth date is in the month of January.", "metadata": {}}
{"_id": "gpt3_2961", "text": "\nThis query will return all card numbers from members whose hometown is in Kentucky.", "metadata": {}}
{"_id": "gpt3_2962", "text": "\nThis query will return all card numbers from members who have a hometown that includes the word \"Kentucky\".", "metadata": {}}
{"_id": "gpt3_2963", "text": "\nThis query will return all card numbers from members in the database whose hometown is listed as Kentucky.", "metadata": {}}
{"_id": "gpt3_2964", "text": "\nThis query will select the card numbers of all members from Kentucky.", "metadata": {}}
{"_id": "gpt3_2965", "text": "\nThis query will return all the card numbers from members who have a hometown in Kentucky.", "metadata": {}}
{"_id": "gpt3_2966", "text": "\nThis query will select the first name of the employee and the course code from the CLASS and employee tables, where the professor number from the CLASS table matches the employee number from the employee table.", "metadata": {}}
{"_id": "gpt3_2967", "text": "\nThis query selects the employee first name and course code from the CLASS and employee tables, where the professor number in the CLASS table matches the employee number in the employee table.", "metadata": {}}
{"_id": "gpt3_2968", "text": "\nThis query selects the first name of an employee and the course code from the CLASS and employee tables based on the professor's employee number.", "metadata": {}}
{"_id": "gpt3_2969", "text": "\nThis query selects the first name of an employee and the course code from the CLASS and employee tables, based on the professor number from the CLASS table matching the employee number from the employee table.", "metadata": {}}
{"_id": "gpt3_2970", "text": "\nThis query selects the first name of an employee and the course code from the CLASS and employee tables, based on the professor number in the CLASS table matching the employee number in the employee table.", "metadata": {}}
{"_id": "gpt3_2971", "text": "\nThis query returns a list of countries from the member table that have more than two members.", "metadata": {}}
{"_id": "gpt3_2972", "text": "\nThis query selects the country from the member table and groups them by country, only displaying the countries that have more than two members.", "metadata": {}}
{"_id": "gpt3_2973", "text": "\nThis statement will select all countries from the member table that have more than two members associated with them.", "metadata": {}}
{"_id": "gpt3_2974", "text": "\nThis query returns a list of countries from the member table that have more than two members.", "metadata": {}}
{"_id": "gpt3_2975", "text": "\nThis SQL statement groups members by country, and only returns countries with more than two members.", "metadata": {}}
{"_id": "gpt3_2976", "text": "\nThis query will return the average price of all products from each manufacturer in the Products table.", "metadata": {}}
{"_id": "gpt3_2977", "text": "\nThis query will return the average price of products from each manufacturer in the Products table.", "metadata": {}}
{"_id": "gpt3_2978", "text": "\nThis query will return the average price of each product from each manufacturer in the Products table.", "metadata": {}}
{"_id": "gpt3_2979", "text": "\nThis query will return the average price of all products from each manufacturer.", "metadata": {}}
{"_id": "gpt3_2980", "text": "\nThis query returns the average price of products from each manufacturer.", "metadata": {}}
{"_id": "gpt3_2981", "text": "\nThis statement will select all customer names from the Clients table that do not have a booking in the Bookings table.", "metadata": {}}
{"_id": "gpt3_2982", "text": "\nThis query returns a list of customer names from the Clients table that do not have any bookings in the Bookings table.", "metadata": {}}
{"_id": "gpt3_2983", "text": "\nThis statement will select all customer names from the Clients table that are not in the Bookings table.", "metadata": {}}
{"_id": "gpt3_2984", "text": "\nThis statement returns the names of customers from the Clients table who are not included in the Bookings table.", "metadata": {}}
{"_id": "gpt3_2985", "text": "\nThis statement will select all customer names from the Clients table that are not associated with bookings in the Bookings table.", "metadata": {}}
{"_id": "gpt3_2986", "text": "\nThis query will select the studio with the most films from the 'film' table, and order it by the number of films it has produced. The result will be the studio with the most films.", "metadata": {}}
{"_id": "gpt3_2987", "text": "\nThis query will return the studio with the most films, ordered by count in descending order, with a limit of 1.", "metadata": {}}
{"_id": "gpt3_2988", "text": "\nThis query will return the studio with the most films in the film table, ordered by the number of films it has produced.", "metadata": {}}
{"_id": "gpt3_2989", "text": "\nThis query will select the studio with the most films and order them by the number of films they have released, with the studio with the most films appearing first.", "metadata": {}}
{"_id": "gpt3_2990", "text": "\nThis query will return the studio with the most films, sorted in descending order by the number of films they have produced.", "metadata": {}}
{"_id": "gpt3_2991", "text": "\nThis statement will return a list of all the distinct classes from the race table.", "metadata": {}}
{"_id": "gpt3_2992", "text": "\nThis query will return a list of all the unique classes present in the race table.", "metadata": {}}
{"_id": "gpt3_2993", "text": "\nThe query SELECT DISTINCT CLASS FROM race will return a list of the distinct class values from the race table.", "metadata": {}}
{"_id": "gpt3_2994", "text": "\nThis statement will select all the unique classes from the race table.", "metadata": {}}
{"_id": "gpt3_2995", "text": "\nThis query will return a list of all the distinct classes from the race table.", "metadata": {}}
{"_id": "gpt3_2996", "text": "\nThis query returns all the IDs of instructors who taught in the Fall of 2009 but did not teach in the Spring of 2010.", "metadata": {}}
{"_id": "gpt3_2997", "text": "\nThis query will return the IDs of instructors who taught in the Fall of 2009 but did not teach in the Spring of 2010.", "metadata": {}}
{"_id": "gpt3_2998", "text": "\nThis query returns the IDs of instructors who taught in the Fall semester of 2009 but did not teach in the Spring semester of 2010.", "metadata": {}}
{"_id": "gpt3_2999", "text": "\nThis query returns the IDs of instructors who taught in Fall of 2009 but not in Spring of 2010.", "metadata": {}}
{"_id": "gpt3_3000", "text": "\nThis query returns the IDs of instructors who taught during the Fall semester of 2009, but not during the Spring semester of 2010.", "metadata": {}}
{"_id": "gpt3_3001", "text": "\nThis query returns the total number of distinct departments in the course table.", "metadata": {}}
{"_id": "gpt3_3002", "text": "\nThis query counts the number of distinct department names in the course table.", "metadata": {}}
{"_id": "gpt3_3003", "text": "\nThis query will count the total number of distinct departments in the course table.", "metadata": {}}
{"_id": "gpt3_3004", "text": "\nThis query will return the number of distinct departments in the course table.", "metadata": {}}
{"_id": "gpt3_3005", "text": "\nThis query returns the number of distinct departments in the course table.", "metadata": {}}
{"_id": "gpt3_3006", "text": "\nThis query will select the most common hometown of all gymnasts, ordering by the count of gymnasts from each hometown and limiting the result to the top one.", "metadata": {}}
{"_id": "gpt3_3007", "text": "\nThis query selects the most common hometown of gymnasts from the people and gymnast tables, ordered by the count of each hometown and limited to the most common.", "metadata": {}}
{"_id": "gpt3_3008", "text": "\nThis query will select the hometown of the gymnast with the most appearances in the people table, grouped by hometown, and ordered by the count of appearances in descending order, with the limit set to 1.", "metadata": {}}
{"_id": "gpt3_3009", "text": "\nThis query selects the most common hometown of gymnasts from the people and gymnast tables, ordered by the number of occurrences of the hometown and limited to the top result.", "metadata": {}}
{"_id": "gpt3_3010", "text": "\nThis query returns the hometown of the gymnast who has the most appearances in the gymnast table.", "metadata": {}}
{"_id": "gpt3_3011", "text": "\nThis query selects the Location and Nickname from two tables, school and school_details, based on the School_ID. It returns a list of all the locations and nicknames associated with each school.", "metadata": {}}
{"_id": "gpt3_3012", "text": "\nThis query selects the location and nickname of a school from two tables, school and school_details, based on the common School_ID field.", "metadata": {}}
{"_id": "gpt3_3013", "text": "\nThis statement will select the Location and Nickname from two tables, school and school_details, by joining the two tables on the School_ID column.", "metadata": {}}
{"_id": "gpt3_3014", "text": "\nThis query selects the location and nickname of a school from two tables, school and school_details, based on the school ID.", "metadata": {}}
{"_id": "gpt3_3015", "text": "\nThis statement selects the location and nickname from two tables, school and school_details, based on a shared school_ID.", "metadata": {}}
{"_id": "gpt3_3016", "text": "\nThis query will return the most recent host city from the hosting_city table, sorted in descending order by year.", "metadata": {}}
{"_id": "gpt3_3017", "text": "\nThis query will return the host city of the most recent year in the hosting_city table.", "metadata": {}}
{"_id": "gpt3_3018", "text": "\nThis query returns the host city of the most recent year in the hosting_city table.", "metadata": {}}
{"_id": "gpt3_3019", "text": "\nThe above query will return the host city of the most recent year in the hosting_city table.", "metadata": {}}
{"_id": "gpt3_3020", "text": "\nThis query will return the host city for the most recent year from the hosting_city table.", "metadata": {}}
{"_id": "gpt3_3021", "text": "\nThis query returns all titles from the course table that appear more than once.", "metadata": {}}
{"_id": "gpt3_3022", "text": "\nThis query returns the titles of all courses that appear more than once in the course table.", "metadata": {}}
{"_id": "gpt3_3023", "text": "\nThis query returns the titles of all courses that appear more than once in the course table.", "metadata": {}}
{"_id": "gpt3_3024", "text": "\nThis query will return a list of all course titles that appear more than once in the course table.", "metadata": {}}
{"_id": "gpt3_3025", "text": "\nThis query will return all titles of courses that appear more than once in the course table.", "metadata": {}}
{"_id": "gpt3_3026", "text": "\nThis query will count the number of students in each department and return the department name along with the count.", "metadata": {}}
{"_id": "gpt3_3027", "text": "\nThis query will return a count of the number of students in each department, grouped by the department name.", "metadata": {}}
{"_id": "gpt3_3028", "text": "\nThis query will count the number of students in each department and group them by department name. The result will be a table displaying the department name and the number of students in each department.", "metadata": {}}
{"_id": "gpt3_3029", "text": "\nThis query will return the number of students in each department, grouped by department name.", "metadata": {}}
{"_id": "gpt3_3030", "text": "\nThis query will return the number of students in each department, grouped by department name. The result will be a table with two columns: the count of students in each department, and the department name.", "metadata": {}}
{"_id": "gpt3_3031", "text": "\nThis query will select the name of the airport in China with the most routes, ordered by the number of routes in descending order, and limit the result to one row.", "metadata": {}}
{"_id": "gpt3_3032", "text": "\nThis query will select the name of the Chinese airport with the most routes, ordered by the number of routes, and limit the result to one.", "metadata": {}}
{"_id": "gpt3_3033", "text": "\nThis query will select the name of the airport in China with the most routes, ordered by the number of routes, and limit the result to one.", "metadata": {}}
{"_id": "gpt3_3034", "text": "\nThis query returns the name of the airport in China with the most routes, ordered by the number of routes, and limited to one result.", "metadata": {}}
{"_id": "gpt3_3035", "text": "\nThis query returns the name of the airport in China with the most routes, ordered by the number of routes.", "metadata": {}}
{"_id": "gpt3_3036", "text": "\nThis query will return the total credits for each department code from the course table.", "metadata": {}}
{"_id": "gpt3_3037", "text": "\nThis query will return the total credits for each department code in the course table.", "metadata": {}}
{"_id": "gpt3_3038", "text": "\nThis query will return the sum of the credits for each department code in the course table.", "metadata": {}}
{"_id": "gpt3_3039", "text": "\nThis statement will return the total sum of credits for each department code in the course table.", "metadata": {}}
{"_id": "gpt3_3040", "text": "\nThis query will sum the credits for each department code in the course table, and return the total credit count and the corresponding department code.", "metadata": {}}
{"_id": "gpt3_3041", "text": "\nThis query selects the first and last name of the actor with the most appearances in the actor table, ordered by count in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_3042", "text": "\nThis query returns the first and last name of the actor with the most appearances in a table, ordered by count in descending order and limited to the top result.", "metadata": {}}
{"_id": "gpt3_3043", "text": "\nThis query selects the first and last name of an actor and groups them together, then orders them by the count of each name in descending order and limits the result to one. This query will return the actor with the most occurrences of their name.", "metadata": {}}
{"_id": "gpt3_3044", "text": "\nThis query will select the first and last name of the actor with the highest number of appearances from the actor table, ordered by the count of appearances in descending order, with a limit of one result.", "metadata": {}}
{"_id": "gpt3_3045", "text": "\nThis query retrieves the first and last name of the actor with the highest count from the actor table, ordered by count in descending order, and limited to one result.", "metadata": {}}
{"_id": "gpt3_3046", "text": "\nThis query will select the name of the most common claim status from the claims_processing and claims_processing_stages tables, ordered by the count of each claim status.", "metadata": {}}
{"_id": "gpt3_3047", "text": "\nThis query retrieves the name of the most common claim status from the claims_processing and claims_processing_stages tables. It does this by joining the two tables on the claim_stage_id column and then grouping by the claim_", "metadata": {}}
{"_id": "gpt3_3048", "text": "\nThis query returns the most common claim status name from the claims_processing and claims_processing_stages tables. It groups the results by claim stage id and orders them by count in descending order, and then returns the top result.", "metadata": {}}
{"_id": "gpt3_3049", "text": "\nThis query returns the claim status name associated with the most commonly occurring claim stage in the claims_processing and claims_processing_stages tables.", "metadata": {}}
{"_id": "gpt3_3050", "text": "\nThis query will select the claim status name from the claims_processing and claims_processing_stages tables, grouped by the claim stage ID, ordered by the count of each claim stage ID, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_3051", "text": "\nThis query returns the average points for each position in the player table.", "metadata": {}}
{"_id": "gpt3_3052", "text": "\nThis query will return the average points scored by players grouped by their position. For example, the results might look like:\n\nPosition | Avg Points\n------------------------\nGuard    | 8.5\nForward  | 12.2\nCenter  ", "metadata": {}}
{"_id": "gpt3_3053", "text": "\nThis query returns the average points scored by players grouped by their position.", "metadata": {}}
{"_id": "gpt3_3054", "text": "\nThis query will return the average points scored by players grouped by their position.", "metadata": {}}
{"_id": "gpt3_3055", "text": "\nThis query will return the average points for each position in the player table.", "metadata": {}}
{"_id": "gpt3_3056", "text": "\nThis query will return the number of premises of each type in the premises table. The results will be two columns: premises_type and the count of each type.", "metadata": {}}
{"_id": "gpt3_3057", "text": "\nThis query will return a count of the number of premises for each premises type.", "metadata": {}}
{"_id": "gpt3_3058", "text": "\nThis query will return the total number of premises of each type from the premises table. It will return the premises type and the count of each type.", "metadata": {}}
{"_id": "gpt3_3059", "text": "\nThis query will return a count of the number of premises of each type.", "metadata": {}}
{"_id": "gpt3_3060", "text": "\nThis query will return the number of premises of each type in the premises table, grouped by premises type.", "metadata": {}}
{"_id": "gpt3_3061", "text": "\nThis SQL query selects the customer name from the customer table and orders the results by account balance from highest to lowest.", "metadata": {}}
{"_id": "gpt3_3062", "text": "\nThis statement will select the customer name from the customer table and order the results by the customer's account balance.", "metadata": {}}
{"_id": "gpt3_3063", "text": "\nThis statement retrieves the names of all customers from the customer table, sorted in ascending order by their account balance.", "metadata": {}}
{"_id": "gpt3_3064", "text": "\nThis statement will select and display the customer names from the customer table in order of their account balance.", "metadata": {}}
{"_id": "gpt3_3065", "text": "\nThis query will select the customer names from the customer table and order them by their account balance.", "metadata": {}}
{"_id": "gpt3_3066", "text": "\nThis query selects the names of actors from the actor table, and joins them to the musical table based on the Musical_ID field. The results are then ordered by the Year field from the musical table in descending order.", "metadata": {}}
{"_id": "gpt3_3067", "text": "\nThis query will select the names of all actors from the actor table, joined with the musical table based on the Musical_ID, and order the results by the year of the musical in descending order.", "metadata": {}}
{"_id": "gpt3_3068", "text": "\nThis query retrieves the names of actors from the actor table who have appeared in musicals, sorted in descending order by the year the musical was released.", "metadata": {}}
{"_id": "gpt3_3069", "text": "\nThis query selects the names of actors from the actor table and joins them with the musical table in order to sort the results by the year of the musical in descending order.", "metadata": {}}
{"_id": "gpt3_3070", "text": "\nThis query selects the name of an actor from the actor table and joins it to the musical table based on their respective Musical_ID values. The results are then ordered by the Year of the musical in descending order.", "metadata": {}}
{"_id": "gpt3_3071", "text": "\nThis query selects the subject ID, subject name, and the count of courses associated with each subject ID from the Courses and Subjects tables. It groups the results by the subject ID.", "metadata": {}}
{"_id": "gpt3_3072", "text": "\nThis query will return the subject_id, subject_name, and the total number of courses for each subject in the Courses and Subjects tables.", "metadata": {}}
{"_id": "gpt3_3073", "text": "\nThis query selects the subject ID, subject name, and count of each subject from the Courses and Subjects tables, and groups them by the subject ID. The result will be a list of all subjects and the number of courses associated with each subject", "metadata": {}}
{"_id": "gpt3_3074", "text": "\nThis query returns the subject_id, subject_name, and the count of courses for each subject from the Courses and Subjects tables.", "metadata": {}}
{"_id": "gpt3_3075", "text": "\nThis query returns a table showing the subject_id, subject name, and the count of courses associated with each subject.", "metadata": {}}
{"_id": "gpt3_3076", "text": "\nThis query will select the name and course_id from the instructor and teaches tables for all instructors in the Art department.", "metadata": {}}
{"_id": "gpt3_3077", "text": "\nThis query selects the name and course_id of instructors from the 'Art' department from the instructor and teaches tables.", "metadata": {}}
{"_id": "gpt3_3078", "text": "\nThis query will select the name and course_id of instructors in the Art department from the instructor and teaches tables, joining the two tables on the ID field.", "metadata": {}}
{"_id": "gpt3_3079", "text": "\nThis query will select the name and course_id of instructors who teach Art courses.", "metadata": {}}
{"_id": "gpt3_3080", "text": "\nThis query retrieves the name and course_id of instructors from the Art department from the instructor and teaches tables.", "metadata": {}}
{"_id": "gpt3_3081", "text": "\nThis query returns a list of all the colleges that have appeared in the match_season table at least twice.", "metadata": {}}
{"_id": "gpt3_3082", "text": "\nThis query returns a list of colleges that have appeared in the match_season table at least twice.", "metadata": {}}
{"_id": "gpt3_3083", "text": "\nThis query will select all colleges from the match_season table that have two or more entries.", "metadata": {}}
{"_id": "gpt3_3084", "text": "\nThis query returns a list of all colleges that have at least two entries in the match_season table.", "metadata": {}}
{"_id": "gpt3_3085", "text": "\nThis query will return all colleges from the match_season table that have two or more entries in the table.", "metadata": {}}
{"_id": "gpt3_3086", "text": "\nThis query will return the short name of the apartment building(s) managed by Emma.", "metadata": {}}
{"_id": "gpt3_3087", "text": "\nThis query will return the short name of all apartment buildings managed by Emma.", "metadata": {}}
{"_id": "gpt3_3088", "text": "\nThis query will return a list of apartment building short names where the building manager is Emma.", "metadata": {}}
{"_id": "gpt3_3089", "text": "\nThis query will return the short name of all apartment buildings managed by Emma.", "metadata": {}}
{"_id": "gpt3_3090", "text": "\nThis query will return the short name of all apartment buildings whose building manager is Emma.", "metadata": {}}
{"_id": "gpt3_3091", "text": "\nThis query will select the first and last names of any staff members from the Staff table who have an address in Damianfort, as indicated by the Addresses table.", "metadata": {}}
{"_id": "gpt3_3092", "text": "\nThis query will select the first and last name of staff members from the Staff table who have an address in the city of Damianfort from the Addresses table.", "metadata": {}}
{"_id": "gpt3_3093", "text": "\nThis query selects the first and last name of staff members whose address is in the city of Damianfort.", "metadata": {}}
{"_id": "gpt3_3094", "text": "\nThis query selects the first and last names from the Staff table of people who have an address in the city of Damianfort.", "metadata": {}}
{"_id": "gpt3_3095", "text": "\nThis query selects the first and last names of staff members who live in the city of Damianfort.", "metadata": {}}
{"_id": "gpt3_3096", "text": "\nThis query will select the Name of all people who are gymnasts and whose hometown is not Santo Domingo.", "metadata": {}}
{"_id": "gpt3_3097", "text": "\nThis query will select the name of people from the people table who are also gymnasts, but whose hometown is not Santo Domingo.", "metadata": {}}
{"_id": "gpt3_3098", "text": "\nThis statement will select the name of any people who are gymnasts and do not have a hometown of Santo Domingo.", "metadata": {}}
{"_id": "gpt3_3099", "text": "\nThis query will select the names of people from the people table whose hometown is not Santo Domingo and who are associated with a gymnast in the gymnast table.", "metadata": {}}
{"_id": "gpt3_3100", "text": "\nThis query will select the names of people who are gymnasts and who do not have a hometown of Santo Domingo.", "metadata": {}}
{"_id": "gpt3_3101", "text": "\nThis query returns the Candidate_ID of the candidate with the lowest oppose rate from the candidate table, ordered from lowest to highest.", "metadata": {}}
{"_id": "gpt3_3102", "text": "\nThis query returns the Candidate_ID of the candidate with the lowest oppose rate from the candidate table, ordered in ascending order.", "metadata": {}}
{"_id": "gpt3_3103", "text": "\nThis query selects the Candidate_ID with the lowest oppose_rate from the candidate table, and returns the top result.", "metadata": {}}
{"_id": "gpt3_3104", "text": "\nThis query returns the Candidate_ID of the candidate with the lowest oppose rate from the candidate table, ordered from lowest to highest.", "metadata": {}}
{"_id": "gpt3_3105", "text": "\nThis query will return the Candidate_ID of the candidate with the lowest oppose_rate from the candidate table, ordered from lowest to highest.", "metadata": {}}
{"_id": "gpt3_3106", "text": "\nThis query will select the student IDs of students who are under the age of 20 and are participating in an activity.", "metadata": {}}
{"_id": "gpt3_3107", "text": "\nThis query will return the student IDs of students who are under the age of 20 and are participating in something.", "metadata": {}}
{"_id": "gpt3_3108", "text": "\nThis query will select the student IDs of all students who are under the age of 20 and are participating in an event.", "metadata": {}}
{"_id": "gpt3_3109", "text": "\nThis query returns the Student ID of all students who are younger than 20 years old and participate in a certain event.", "metadata": {}}
{"_id": "gpt3_3110", "text": "\nThis query returns the student IDs of all students who are under the age of 20 and are participating in an event.", "metadata": {}}
{"_id": "gpt3_3111", "text": "\nThis query retrieves the name of the captain with the lowest age from the captain table, limited to one result.", "metadata": {}}
{"_id": "gpt3_3112", "text": "\nThis query will select the name of the captain with the lowest age from the captain table and return it as the result.", "metadata": {}}
{"_id": "gpt3_3113", "text": "\nThis query selects the name of the captain with the lowest age from the captain table and returns the result.", "metadata": {}}
{"_id": "gpt3_3114", "text": "\nThis query returns the name of the youngest captain from the captain table, ordering the results by age in ascending order and limiting the results to one row.", "metadata": {}}
{"_id": "gpt3_3115", "text": "\nThis query will return the name of the oldest captain in the table, ordered by age in ascending order, with a limit of 1.", "metadata": {}}
{"_id": "gpt3_3116", "text": "\nThis query selects the player name and coach name from the player_coach, coach, and player tables.", "metadata": {}}
{"_id": "gpt3_3117", "text": "\nThis query joins the player_coach, coach, and player tables to select the player name and coach name of each player that has a coach.", "metadata": {}}
{"_id": "gpt3_3118", "text": "\nThis query selects the player name and the coach name from the player_coach, coach and player tables by joining the tables on the coach and player IDs.", "metadata": {}}
{"_id": "gpt3_3119", "text": "\nThis query selects the player name and coach name from the player_coach, coach, and player tables by joining the tables on the Coach_ID and Player_ID columns.", "metadata": {}}
{"_id": "gpt3_3120", "text": "\nThis statement returns the name of the players and their corresponding coach's name from the player_coach, coach, and player tables.", "metadata": {}}
{"_id": "gpt3_3121", "text": "\nThis query will select the aircraft with the highest distance from the Aircraft table and return the aircraft id and name.", "metadata": {}}
{"_id": "gpt3_3122", "text": "\nThis query will select the aircraft with the highest distance from the Aircraft table and return the aircraft ID and name.", "metadata": {}}
{"_id": "gpt3_3123", "text": "\nThis query will select the aircraft with the highest distance from the Aircraft table and return its id and name.", "metadata": {}}
{"_id": "gpt3_3124", "text": "\nThis statement will select the aircraft ID and name of the aircraft with the longest distance and display them in descending order, with only the top result being shown.", "metadata": {}}
{"_id": "gpt3_3125", "text": "\nThis query returns the aircraft with the longest distance, with its associated aid and name.", "metadata": {}}
{"_id": "gpt3_3126", "text": "\nThis query will return the sum and average of the enrollment values from the school table.", "metadata": {}}
{"_id": "gpt3_3127", "text": "\nThis query will return the sum and average of the enrollment column from the school table.", "metadata": {}}
{"_id": "gpt3_3128", "text": "\nThis query will return the sum and average of the enrollment numbers from the school table.", "metadata": {}}
{"_id": "gpt3_3129", "text": "\nThis query will return the sum and average of the enrollment numbers from the school table.", "metadata": {}}
{"_id": "gpt3_3130", "text": "\nThe query will return the sum and average of the enrollment numbers from the school table.", "metadata": {}}
{"_id": "gpt3_3131", "text": "\nThis query selects the last names of faculty members who participate in both canoeing and kayaking activities.", "metadata": {}}
{"_id": "gpt3_3132", "text": "\nThis query returns the last names of faculty members who are participating in both canoeing and kayaking activities.", "metadata": {}}
{"_id": "gpt3_3133", "text": "\nThis query will select the last names of faculty members who participate in both canoeing and kayaking activities.", "metadata": {}}
{"_id": "gpt3_3134", "text": "\nThis query will select the last names of faculty members who participate in both canoeing and kayaking.", "metadata": {}}
{"_id": "gpt3_3135", "text": "\nThis query finds all faculty members who participate in both canoeing and kayaking activities.", "metadata": {}}
{"_id": "gpt3_3136", "text": "\nThis query will return the customer name and phone number of all customers who have not had an address in the customer_address_history table.", "metadata": {}}
{"_id": "gpt3_3137", "text": "\nThis query returns the customer name and phone number of all customers who do not have an address in the customer_address_history table.", "metadata": {}}
{"_id": "gpt3_3138", "text": "\nThis query will return the customer name and phone number for customers who do not have any entries in the customer_address_history table.", "metadata": {}}
{"_id": "gpt3_3139", "text": "\nThis query returns the customer name and phone number for all customers who do not have an entry in the customer_address_history table.", "metadata": {}}
{"_id": "gpt3_3140", "text": "\nThis query will return the customer name and phone number of all customers who do not have an address in the customer_address_history table.", "metadata": {}}
{"_id": "gpt3_3141", "text": "\nThis query selects distinct customer details from the customers table for customers who have a policy with the policy type code of \"Deputy\" or \"Uniform\" from the policies table.", "metadata": {}}
{"_id": "gpt3_3142", "text": "\nThis query retrieves the distinct customer details from the customers table for customers who have a policy with a policy type code of either \"Deputy\" or \"Uniform\".", "metadata": {}}
{"_id": "gpt3_3143", "text": "\nThis query will return a list of distinct customer details from the customers table for customers who have a policy type code of either \"Deputy\" or \"Uniform\" in the policies table.", "metadata": {}}
{"_id": "gpt3_3144", "text": "\nThis query will select all distinct customer details from the customers table for customers who have policies with a policy type code of either \"Deputy\" or \"Uniform\".", "metadata": {}}
{"_id": "gpt3_3145", "text": "\nThis query selects all distinct customer details from the customers table that have either a Deputy or Uniform policy type in the policies table.", "metadata": {}}
{"_id": "gpt3_3146", "text": "\nThis query selects the Player and Years_Played columns from the player table.", "metadata": {}}
{"_id": "gpt3_3147", "text": "\nThis query will return the player names and the number of years each player has played.", "metadata": {}}
{"_id": "gpt3_3148", "text": "\nThis query will return a list of players and the number of years they have played.", "metadata": {}}
{"_id": "gpt3_3149", "text": "\nThis query returns a list of players and the number of years they have played.", "metadata": {}}
{"_id": "gpt3_3150", "text": "\nThis query will return a table containing the Player and Years_Played columns from the player table. The table will contain all rows from the player table that meet the criteria specified in the query.", "metadata": {}}
{"_id": "gpt3_3151", "text": "\nThis statement is used to retrieve the tourist details from the VISITORS table. It will return all columns of data related to the tourist details from the table.", "metadata": {}}
{"_id": "gpt3_3152", "text": "\nThis query returns the details of all visitors, including their name, country of origin, date of arrival, and other relevant information.", "metadata": {}}
{"_id": "gpt3_3153", "text": "\nThis query would select all the details related to tourists from the VISITORS table. This could include details such as the tourist's name, contact information, destination, dates of travel, etc.", "metadata": {}}
{"_id": "gpt3_3154", "text": "\nThis query would select all the details related to tourists from the VISITORS table. This could include information such as the tourist's name, age, gender, nationality, date of visit, etc.", "metadata": {}}
{"_id": "gpt3_3155", "text": "\nThis query would return all of the details related to tourists from the VISITORS table. This could include information such as their name, nationality, age, passport number, and any other information related to the tourist.", "metadata": {}}
{"_id": "gpt3_3156", "text": "\nThis query will return a list of student IDs from the Student table whose advisor is 1121.", "metadata": {}}
{"_id": "gpt3_3157", "text": "\nThis query will return a list of all the Student IDs of students with an Advisor of 1121.", "metadata": {}}
{"_id": "gpt3_3158", "text": "\nThis query returns a list of student IDs from the Student table whose advisor is 1121.", "metadata": {}}
{"_id": "gpt3_3159", "text": "\nThis query will select the student ID of all students who have Advisor 1121.", "metadata": {}}
{"_id": "gpt3_3160", "text": "\nThis query will return a list of student IDs from the Student table whose Advisor is 1121.", "metadata": {}}
{"_id": "gpt3_3161", "text": "\nThis query will select the first and last names of all students who are over 18 years old and whose major is 600.", "metadata": {}}
{"_id": "gpt3_3162", "text": "\nThis SQL query will select the first and last names of all students who are over 18 years old and have a major of 600.", "metadata": {}}
{"_id": "gpt3_3163", "text": "\nThis SQL query will select the first and last name of all students who are over 18 years old and have a major of 600.", "metadata": {}}
{"_id": "gpt3_3164", "text": "\nThis SQL statement will select the first and last name of any student from the Student table who is over 18 years old and has a major of 600.", "metadata": {}}
{"_id": "gpt3_3165", "text": "\nThis SQL statement selects the first and last name of students from the Student table whose age is greater than 18 and whose major is 600.", "metadata": {}}
{"_id": "gpt3_3166", "text": "\nThis query will return the number of unique values in the Status column of the city table.", "metadata": {}}
{"_id": "gpt3_3167", "text": "\nThis query will return the number of distinct values of the Status column in the city table.", "metadata": {}}
{"_id": "gpt3_3168", "text": "\nThis query will return the number of distinct values in the Status column of the city table.", "metadata": {}}
{"_id": "gpt3_3169", "text": "\nThis query will return the count of distinct statuses in the city table.", "metadata": {}}
{"_id": "gpt3_3170", "text": "\nThis query returns the number of distinct statuses in the city table.", "metadata": {}}
{"_id": "gpt3_3171", "text": "\nThis query retrieves the customer name, account type, and account balance of the customer with the highest credit score. The results are sorted in descending order and limited to one record.", "metadata": {}}
{"_id": "gpt3_3172", "text": "\nThis query selects the customer name, account type, and account balance from the customer table and orders the results by the customer's credit score in descending order, then returns the top result.", "metadata": {}}
{"_id": "gpt3_3173", "text": "\nThis query will return the customer name, account type, and account balance of the customer with the highest credit score.", "metadata": {}}
{"_id": "gpt3_3174", "text": "\nThis query selects the customer name, account type, and account balance of the customer with the highest credit score from the customer table, and orders the results in descending order.", "metadata": {}}
{"_id": "gpt3_3175", "text": "\nThis query returns the customer name, account type, and account balance of the customer with the highest credit score.", "metadata": {}}
{"_id": "gpt3_3176", "text": "\nThis query returns the names of employees who have a certificate for both the Boeing 737-800 and the Airbus A340-300 aircraft.", "metadata": {}}
{"_id": "gpt3_3177", "text": "\nThis query finds the names of Employees who hold a Certificate for both a Boeing 737-800 and an Airbus A340-300 Aircraft.", "metadata": {}}
{"_id": "gpt3_3178", "text": "\nThis query selects the names of employees who have certificates for both the Boeing 737-800 and the Airbus A340-300 aircrafts.", "metadata": {}}
{"_id": "gpt3_3179", "text": "\nThis query selects the names of employees who hold certificates for both the Boeing 737-800 and the Airbus A340-300 aircraft.", "metadata": {}}
{"_id": "gpt3_3180", "text": "\nThis query selects the names of employees who have certificates for both the Boeing 737-800 and the Airbus A340-300 aircraft.", "metadata": {}}
{"_id": "gpt3_3181", "text": "\nThis query will return a list of color descriptions from the ref_colors table.", "metadata": {}}
{"_id": "gpt3_3182", "text": "\nThis query returns the color descriptions from the ref_colors table.", "metadata": {}}
{"_id": "gpt3_3183", "text": "\nThis query will return a list of all the color descriptions from the ref_colors table.", "metadata": {}}
{"_id": "gpt3_3184", "text": "\nThis query will return a list of all the color descriptions from the ref_colors table.", "metadata": {}}
{"_id": "gpt3_3185", "text": "\nThis SQL query will retrieve the color description from the ref_colors table.", "metadata": {}}
{"_id": "gpt3_3186", "text": "\nThis query returns the total number of records in the airlines table.", "metadata": {}}
{"_id": "gpt3_3187", "text": "\nThis query will return the total number of records in the airlines table.", "metadata": {}}
{"_id": "gpt3_3188", "text": "\nThis query returns the total number of records in the airlines table.", "metadata": {}}
{"_id": "gpt3_3189", "text": "\nThis query returns the total number of records in the airlines table.", "metadata": {}}
{"_id": "gpt3_3190", "text": "\nThis query will return the total number of rows in the airlines table.", "metadata": {}}
{"_id": "gpt3_3191", "text": "\nThis query selects the distinct customer details from the customers table for customers whose orders are currently \"On Road\".", "metadata": {}}
{"_id": "gpt3_3192", "text": "\nThis query retrieves the distinct customer details from the customers table that have orders with the status of \"On Road\" from the orders table.", "metadata": {}}
{"_id": "gpt3_3193", "text": "\nThis query selects all distinct customer details from the customers table that have an order with an \"On Road\" status in the orders table.", "metadata": {}}
{"_id": "gpt3_3194", "text": "\nThis query retrieves distinct customer details from the customers table for customers whose orders have an \"On Road\" order status from the orders table.", "metadata": {}}
{"_id": "gpt3_3195", "text": "\nThis query selects distinct customer details from the customers and orders tables where the order status is \"On Road\".", "metadata": {}}
{"_id": "gpt3_3196", "text": "\nThis query returns the number of courses in the course table that do not have any prerequisites associated with them.", "metadata": {}}
{"_id": "gpt3_3197", "text": "\nThis query returns the number of courses in the course table that are not listed as prerequisites in the prereq table.", "metadata": {}}
{"_id": "gpt3_3198", "text": "\nThis query will return the number of courses that do not have any prerequisites.", "metadata": {}}
{"_id": "gpt3_3199", "text": "\nThis query will count the number of courses that do not have any prerequisites.", "metadata": {}}
{"_id": "gpt3_3200", "text": "\nThis query returns the number of courses in the course table that do not have any prerequisites.", "metadata": {}}
{"_id": "gpt3_3201", "text": "\nThis query will return the state with the least number of customers from the customers table, ordered by count in ascending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_3202", "text": "\nThis query returns the state with the least number of customers from the customers table, ordered by the count of customers in each state.", "metadata": {}}
{"_id": "gpt3_3203", "text": "\nThis query will return the state with the fewest customers from the customers table, ordered by count(*).", "metadata": {}}
{"_id": "gpt3_3204", "text": "\nThis query will return the state with the fewest customers from the customers table, ordered by the number of customers in each state.", "metadata": {}}
{"_id": "gpt3_3205", "text": "\nThis query returns the state with the least number of customers from the customers table, ordered by the count of customers in each state and limited to the first result.", "metadata": {}}
{"_id": "gpt3_3206", "text": "\nThis query returns the country name and the count of matches associated with each country. It does this by joining the country and match_season tables on the Country_id column and then grouping by the Country_name column.", "metadata": {}}
{"_id": "gpt3_3207", "text": "\nThis query returns a count of the number of matches played in each country.", "metadata": {}}
{"_id": "gpt3_3208", "text": "\nThis query will return the name of each country and the number of matches played in each country for a given season.", "metadata": {}}
{"_id": "gpt3_3209", "text": "\nThis query returns the name of each country and the number of matches that have been played in that country.", "metadata": {}}
{"_id": "gpt3_3210", "text": "\nThis query returns the total number of matches played in each country.", "metadata": {}}
{"_id": "gpt3_3211", "text": "\nThis query returns the average High School performance of all players in the Player table.", "metadata": {}}
{"_id": "gpt3_3212", "text": "\nThis query will calculate the average high school (HS) score of all players in the Player table.", "metadata": {}}
{"_id": "gpt3_3213", "text": "\nThis query returns the average High School score (HS) of all players in the Player table.", "metadata": {}}
{"_id": "gpt3_3214", "text": "\nThis query will return the average High School (HS) grade of all the players in the Player table.", "metadata": {}}
{"_id": "gpt3_3215", "text": "\nThis query will return the average High School (HS) grade of all players in the Player table.", "metadata": {}}
{"_id": "gpt3_3216", "text": "\nThe query will return the maximum and minimum values of the Silver column from the club_rank table. The result will be the highest and lowest values of the Silver column.", "metadata": {}}
{"_id": "gpt3_3217", "text": "\nThis query will return the maximum and minimum values for the Silver column from the club_rank table. The result will be the highest and lowest values for Silver in the table.", "metadata": {}}
{"_id": "gpt3_3218", "text": "\nThe query will return the maximum and minimum number of silver medals won by teams in the club rank table. The result will be the maximum silver medal count and the minimum silver medal count.", "metadata": {}}
{"_id": "gpt3_3219", "text": "\nThe query will return the maximum and minimum number of silver medals won by clubs in the club_rank table.", "metadata": {}}
{"_id": "gpt3_3220", "text": "\nThis query returns the maximum and minimum number of silver medals won by teams in the club_rank table.", "metadata": {}}
{"_id": "gpt3_3221", "text": "\nThis SQL query will return a list of all distinct leader names from the college table where the member table has a country of Canada.", "metadata": {}}
{"_id": "gpt3_3222", "text": "\nThis query selects all the distinct leader names from the college table who have members from Canada in the member table.", "metadata": {}}
{"_id": "gpt3_3223", "text": "\nThis query retrieves the distinct names of all leaders from colleges that have members from Canada.", "metadata": {}}
{"_id": "gpt3_3224", "text": "\nThis query will select the distinct leader names from the college table for all members in the member table who are from Canada.", "metadata": {}}
{"_id": "gpt3_3225", "text": "\nThis query will return a list of distinct leader names from the college table who are associated with members from Canada in the member table.", "metadata": {}}
{"_id": "gpt3_3226", "text": "\nThis query selects the supplier_id from the Product_Suppliers table and groups them by supplier_id, while also having an average total_amount_purchased greater than 50000 or less than 30000.", "metadata": {}}
{"_id": "gpt3_3227", "text": "\nThis query returns a list of supplier_ids from the Product_Suppliers table where the average total amount purchased is greater than 50,000 or less than 30,000.", "metadata": {}}
{"_id": "gpt3_3228", "text": "\nThis query selects the supplier_id from the Product_Suppliers table and groups them by supplier_id, with the condition that the average total amount purchased must be greater than 50000 or less than 30000.", "metadata": {}}
{"_id": "gpt3_3229", "text": "\nThis query selects the supplier_id from the Product_Suppliers table and groups the results by supplier_id. It then filters the results to show only supplier_ids with an average total_amount_purchased greater than 50000", "metadata": {}}
{"_id": "gpt3_3230", "text": "\nThis query will select all supplier_id's from the Product_Suppliers table that have an average total amount purchased greater than 50000 or less than 30000.", "metadata": {}}
{"_id": "gpt3_3231", "text": "\nThis query returns the supplier_id of all suppliers from the Product_Suppliers table who have an average total_amount_purchased greater than 50000 or less than 30000.", "metadata": {}}
{"_id": "gpt3_3232", "text": "\nThis query returns the supplier_id of all suppliers whose average total amount purchased is greater than 50000 or less than 30000.", "metadata": {}}
{"_id": "gpt3_3233", "text": "\nThis query returns the supplier_id of all Product_Suppliers who have an average total_amount_purchased greater than 50000 or less than 30000.", "metadata": {}}
{"_id": "gpt3_3234", "text": "\nThis query selects all supplier_id values from the Product_Suppliers table where the average total_amount_purchased is greater than 50000 or less than 30000.", "metadata": {}}
{"_id": "gpt3_3235", "text": "\nThis query retrieves the supplier_id of all suppliers from the Product_Suppliers table whose average total_amount_purchased is greater than 50000 or less than 30000.", "metadata": {}}
{"_id": "gpt3_3236", "text": "\nThis query will select the policy_type_code with the highest count from the policies table and return the most common policy_type_code.", "metadata": {}}
{"_id": "gpt3_3237", "text": "\nThis statement is used to find the most popular policy type code from the policies table. It will return the policy type code that appears the most in the table, ordered by the number of occurrences.", "metadata": {}}
{"_id": "gpt3_3238", "text": "\nThis statement returns the policy type code which appears the most number of times in the policies table, ordered by the count in descending order, with a limit of 1.", "metadata": {}}
{"_id": "gpt3_3239", "text": "\nThis SQL statement will select the policy type code from the policies table and group them by policy type code, ordering them by the count of each policy type code in descending order, and then limiting the result to the top 1 result. This will return", "metadata": {}}
{"_id": "gpt3_3240", "text": "\nThis SQL query will return the most common policy type code from the policies table, ordered by count in descending order, with a limit of 1.", "metadata": {}}
{"_id": "gpt3_3241", "text": "\nThis query will return the instrument played by a bandmate with the last name \"Heilo\" in the song \"Le Pop\".", "metadata": {}}
{"_id": "gpt3_3242", "text": "\nThis query will select the instrument played by a bandmate with the last name \"Heilo\" for the song \"Le Pop\".", "metadata": {}}
{"_id": "gpt3_3243", "text": "\nThis query will return the instrument played by the bandmate with the last name \"Heilo\" in the song \"Le Pop\".", "metadata": {}}
{"_id": "gpt3_3244", "text": "\nThis query will select the instrument played by the band member with the last name \"Heilo\" in the song \"Le Pop\".", "metadata": {}}
{"_id": "gpt3_3245", "text": "\nThis query will select the instrument from the Performance, Band, Songs and Instruments tables for the bandmate with the last name of \"Heilo\" who performed the song \"Le Pop\".", "metadata": {}}
{"_id": "gpt3_3246", "text": "\nThis query will select the document type name of the document \"How to read a book\" from the All_documents and Ref_document_types tables.", "metadata": {}}
{"_id": "gpt3_3247", "text": "\nThis query will select the document type name from the All_documents and Ref_document_types tables for the document \"How to read a book\".", "metadata": {}}
{"_id": "gpt3_3248", "text": "\nThis query will select the document type name associated with the document \"How to read a book\" from the All_documents and Ref_document_types tables.", "metadata": {}}
{"_id": "gpt3_3249", "text": "\nThis query will select the document type name from the All_documents and Ref_document_types tables where the document name is \"How to read a book\".", "metadata": {}}
{"_id": "gpt3_3250", "text": "\nThis query will select the document type name of the document \"How to read a book\" from the All_documents and Ref_document_types tables.", "metadata": {}}
{"_id": "gpt3_3251", "text": "\nThis query returns the course name of the course with the most student registrations.", "metadata": {}}
{"_id": "gpt3_3252", "text": "\nThis query selects the most popular course from the courses and student_course_registrations tables, based on the number of registrations for each course. It returns the name of the course with the highest number of registrations.", "metadata": {}}
{"_id": "gpt3_3253", "text": "\nThis query will select the course name of the course with the most student registrations.", "metadata": {}}
{"_id": "gpt3_3254", "text": "\nThis query selects the course name of the most popular course, as determined by the number of student course registrations.", "metadata": {}}
{"_id": "gpt3_3255", "text": "\nThis query returns the course name of the most popular course, based on the number of student registrations.", "metadata": {}}
{"_id": "gpt3_3256", "text": "\nThis query will return a list of distinct order IDs from the orders table, sorted in ascending order by the date the order was placed.", "metadata": {}}
{"_id": "gpt3_3257", "text": "\nThis query will select all unique order_id values from the orders table and order them by the date_order_placed column.", "metadata": {}}
{"_id": "gpt3_3258", "text": "\nThis query will select all the distinct order_id values from the orders table, and order them by the date_order_placed column.", "metadata": {}}
{"_id": "gpt3_3259", "text": "\nThis query will return a list of distinct order IDs from the orders table, sorted by the date the order was placed.", "metadata": {}}
{"_id": "gpt3_3260", "text": "\nThis query will return a list of all unique order IDs from the orders table, sorted in ascending order by the date the order was placed.", "metadata": {}}
{"_id": "gpt3_3261", "text": "\nThis query returns the name of any browser that is compatible with both the CACHEbox and Fasterfox web client accelerators.", "metadata": {}}
{"_id": "gpt3_3262", "text": "\nThis query will return the names of browsers that are compatible with both the CACHEbox and Fasterfox web client accelerators.", "metadata": {}}
{"_id": "gpt3_3263", "text": "\nThis query returns the names of browsers that are compatible with both the CACHEbox and Fasterfox web client accelerators.", "metadata": {}}
{"_id": "gpt3_3264", "text": "\nThis query selects the names of browsers that are compatible with both the CACHEbox and Fasterfox web client accelerators.", "metadata": {}}
{"_id": "gpt3_3265", "text": "\nThis query selects the name of the browser that is compatible with both CACHEbox and Fasterfox web client accelerators.", "metadata": {}}
{"_id": "gpt3_3266", "text": "\nThis query returns the course names from the Courses table that have only one student enrolled in them.", "metadata": {}}
{"_id": "gpt3_3267", "text": "\nThis query selects the course name from the Courses table and joins it with the Student_Course_Enrolment table based on the course_id. It then groups the results by course name and only returns results which have only one entry in", "metadata": {}}
{"_id": "gpt3_3268", "text": "\nThis query selects the course name from the Courses table and the Student_Course_Enrolment table and groups them by the course name, then filters the results to only include courses that have a count of one, meaning only one student is", "metadata": {}}
{"_id": "gpt3_3269", "text": "\nThis query will select the course name from the Courses table and join it with the Student_Course_Enrolment table on the course_id field. It will then group the results by course name and return only those courses that have only", "metadata": {}}
{"_id": "gpt3_3270", "text": "\nThis query will select the course name from the Courses table, join it with the Student_Course_Enrolment table, group the results by the course name, and return only the results that have a count of 1 (indicating only", "metadata": {}}
{"_id": "gpt3_3271", "text": "\nThis query selects the name of the building that is home to the most companies. It does this by joining the Office_locations, buildings, and Companies tables, grouping by building_id, and ordering by the count of companies in each building", "metadata": {}}
{"_id": "gpt3_3272", "text": "\nThis query selects the name of the building with the most office locations for companies, ordered by the number of office locations in descending order and limited to the top result.", "metadata": {}}
{"_id": "gpt3_3273", "text": "\nThis query selects the name of the building with the most office locations from the buildings, office_locations, and companies tables.", "metadata": {}}
{"_id": "gpt3_3274", "text": "\nThis query selects the name of the building with the most Office_locations associated with it, grouped by building_id and ordered by the count of Office_locations. The result is limited to one record.", "metadata": {}}
{"_id": "gpt3_3275", "text": "\nThis query selects the name of the building that is occupied by the most companies, based on the number of office locations. It does this by joining the Office_locations, buildings, and Companies tables, grouping by building_id and ordering by", "metadata": {}}
{"_id": "gpt3_3276", "text": "\nThis query will return the total number of rows in the program table.", "metadata": {}}
{"_id": "gpt3_3277", "text": "\nThis query will return a count of the total number of records in the program table.", "metadata": {}}
{"_id": "gpt3_3278", "text": "\nThis query returns the total count of records in the program table.", "metadata": {}}
{"_id": "gpt3_3279", "text": "\nThis query returns the total number of records in the program table.", "metadata": {}}
{"_id": "gpt3_3280", "text": "\nThis query returns the total number of records in the program table.", "metadata": {}}
{"_id": "gpt3_3281", "text": "\nThis query selects all records from the Residents table that contain the word \"Miss\" in the other_details column.", "metadata": {}}
{"_id": "gpt3_3282", "text": "\nThis query will select all records from the Residents table where the other_details column contains the word 'Miss'.", "metadata": {}}
{"_id": "gpt3_3283", "text": "\nThis query selects all records from the Residents table where the other_details column contains the word \"Miss\".", "metadata": {}}
{"_id": "gpt3_3284", "text": "\nThis query selects all of the data from the \"other_details\" column of the \"Residents\" table where the data includes the word \"Miss\".", "metadata": {}}
{"_id": "gpt3_3285", "text": "\nThis query returns all rows from the Residents table where the other_details column contains the string 'Miss'.", "metadata": {}}
{"_id": "gpt3_3286", "text": "\nThis query will return a list of all degrees offered by San Francisco State University in the year 2001.", "metadata": {}}
{"_id": "gpt3_3287", "text": "\nThis query will return a list of all degree programs offered by San Francisco State University in 2001.", "metadata": {}}
{"_id": "gpt3_3288", "text": "\nThis query will return all of the degrees offered at San Francisco State University in 2001.", "metadata": {}}
{"_id": "gpt3_3289", "text": "\nThis query will return all of the degrees offered at San Francisco State University in 2001.", "metadata": {}}
{"_id": "gpt3_3290", "text": "\nThis query will return all degrees awarded by San Francisco State University in 2001.", "metadata": {}}
{"_id": "gpt3_3291", "text": "\nThis query returns the name of the dorm with the highest student capacity.", "metadata": {}}
{"_id": "gpt3_3292", "text": "\nThis query will select the dorm name from the dorm table and order it by the student capacity in descending order and limit the result to one. This will return the dorm with the highest student capacity.", "metadata": {}}
{"_id": "gpt3_3293", "text": "\nThis query will select the dorm name with the highest student capacity from the dorm table, and limit the results to one record.", "metadata": {}}
{"_id": "gpt3_3294", "text": "\nThis query returns the dorm name of the dorm with the highest student capacity.", "metadata": {}}
{"_id": "gpt3_3295", "text": "\nThis query will select the dorm name with the highest student capacity from the dorm table and limit the results to one record.", "metadata": {}}
{"_id": "gpt3_3296", "text": "\nThis query will return all other account details associated with the account name \"338\" from the Accounts table.", "metadata": {}}
{"_id": "gpt3_3297", "text": "\nThis query would return all the details associated with the account named \"338\" from the Accounts table.", "metadata": {}}
{"_id": "gpt3_3298", "text": "\nThis query will return all other account details associated with the account named \"338\" from the Accounts table.", "metadata": {}}
{"_id": "gpt3_3299", "text": "\nThis query will return all other account details associated with the account name \"338\" from the Accounts table.", "metadata": {}}
{"_id": "gpt3_3300", "text": "\nThis query would return all other account details associated with the account name \"338\" from the Accounts table.", "metadata": {}}
{"_id": "gpt3_3301", "text": "\nThis query will select the country from the addresses table and group the results by country, only showing countries that have more than four address_id entries.", "metadata": {}}
{"_id": "gpt3_3302", "text": "\nThis SQL query selects the country from the addresses table and groups the results by country, only returning countries that have more than 4 address_id values.", "metadata": {}}
{"_id": "gpt3_3303", "text": "\nThis query will return all countries from the addresses table that have more than four associated address_id entries.", "metadata": {}}
{"_id": "gpt3_3304", "text": "\nThis query will select the country from the addresses table and group them by country, while only returning countries that have more than 4 address_id entries in the table.", "metadata": {}}
{"_id": "gpt3_3305", "text": "\nThis SQL query will select the countries from the addresses table that have more than 4 addresses associated with them. It will group the results by country and return only the country names.", "metadata": {}}
{"_id": "gpt3_3306", "text": "\nThis query selects the customer name, phone number, and email from the customers table and joins it with the customer_orders table to group by customer_id and order by the count of orders in descending order. The result is the customer with the", "metadata": {}}
{"_id": "gpt3_3307", "text": "\nThis query selects the customer name, phone, and email of the customer who has placed the most orders. It joins the customers and customer_orders tables by the customer_id, groups the results by customer_id, and orders them by the", "metadata": {}}
{"_id": "gpt3_3308", "text": "\nThis query selects the customer name, phone, and email from the customers table, and joins the customer_orders table to group the customers by their customer_id and order them by the count of orders. The query then limits the result to the", "metadata": {}}
{"_id": "gpt3_3309", "text": "\nThis query selects the customer name, phone number, and email address of the customer with the most orders, ordered by the number of orders they have made.", "metadata": {}}
{"_id": "gpt3_3310", "text": "\nThis query selects the customer name, phone number, and email address of the customer with the highest number of orders from the customers and customer_orders tables, grouped by customer_id and ordered by count.", "metadata": {}}
{"_id": "gpt3_3311", "text": "\nThis query selects the name of a service from the first_notification_of_loss and services tables, grouping them by service_id and only selecting those with more than 2 occurrences.", "metadata": {}}
{"_id": "gpt3_3312", "text": "\nThis query selects the service name from the first notification of loss table and services table by grouping the service ID and having a count greater than 2.", "metadata": {}}
{"_id": "gpt3_3313", "text": "\nThis query selects the service names from the first_notification_of_loss and services tables, grouped by service_id, where the count of rows is greater than 2.", "metadata": {}}
{"_id": "gpt3_3314", "text": "\nThis query returns the service names from the services table that have been associated with more than two first notifications of loss in the first_notification_of_loss table.", "metadata": {}}
{"_id": "gpt3_3315", "text": "\nThis query is used to select the service name from the first_notification_of_loss and services tables, grouping by service_id and having a count greater than 2. This query will return the service names for services that have had more", "metadata": {}}
{"_id": "gpt3_3316", "text": "\nThis query will return the local authority and services associated with each station.", "metadata": {}}
{"_id": "gpt3_3317", "text": "\nThis query will return a list of local authorities and the services they provide at a station.", "metadata": {}}
{"_id": "gpt3_3318", "text": "\nThis query will return the local authority and services for each station in the database.", "metadata": {}}
{"_id": "gpt3_3319", "text": "\nThis query selects the local authority and services associated with a station from a database.", "metadata": {}}
{"_id": "gpt3_3320", "text": "\nThis query will return the local_authority and services columns from the station table.", "metadata": {}}
{"_id": "gpt3_3321", "text": "\nThis query selects the distinct first and last names of students who are 18 years old and have voted for the vice president.", "metadata": {}}
{"_id": "gpt3_3322", "text": "\nThis query selects the distinct first and last names of students who are 18 years old and have voted for the vice president.", "metadata": {}}
{"_id": "gpt3_3323", "text": "\nThis query will select the distinct first and last names of all students who are 18 years old and have voted for the Vice President.", "metadata": {}}
{"_id": "gpt3_3324", "text": "\nThis query will select the distinct first and last names of students who are 18 years old and have voted for the Vice President.", "metadata": {}}
{"_id": "gpt3_3325", "text": "\nThis query will select the distinct first and last names of all 18-year-old students who have voted for a vice president.", "metadata": {}}
{"_id": "gpt3_3326", "text": "\nThis query will return the average population of all cities grouped by their status.", "metadata": {}}
{"_id": "gpt3_3327", "text": "\nThis query will return the average population of cities grouped by their status.", "metadata": {}}
{"_id": "gpt3_3328", "text": "\nThis query returns the average population of cities grouped by their status.", "metadata": {}}
{"_id": "gpt3_3329", "text": "\nThis query returns the average population of cities grouped by their status.", "metadata": {}}
{"_id": "gpt3_3330", "text": "\nThis query will generate the average population of cities grouped by their status.", "metadata": {}}
{"_id": "gpt3_3331", "text": "\nThis query selects the Name of the editor and the Theme of the journal for each journal committee.", "metadata": {}}
{"_id": "gpt3_3332", "text": "\nThis query selects the name of the editor and the theme of the journal for every journal committee.", "metadata": {}}
{"_id": "gpt3_3333", "text": "\nThis query selects the Name of the editor and the Theme of the journal from the journal_committee, editor and journal tables.", "metadata": {}}
{"_id": "gpt3_3334", "text": "\nThis query selects the name of the editor and the theme of the journal from the journal_committee, editor, and journal tables.", "metadata": {}}
{"_id": "gpt3_3335", "text": "\nThis query retrieves the Name and Theme of the journal for each editor on a journal committee.", "metadata": {}}
{"_id": "gpt3_3336", "text": "\nThis query will return the employee id and salary of the employee named Mark Young from the Employee table.", "metadata": {}}
{"_id": "gpt3_3337", "text": "\nThis query will select the employee ID and salary of the employee named Mark Young from the Employee table.", "metadata": {}}
{"_id": "gpt3_3338", "text": "\nThis query will select the employee ID and salary of the employee named Mark Young from the Employee table.", "metadata": {}}
{"_id": "gpt3_3339", "text": "\nThis query will return the employee ID (eid) and salary of the employee named \"Mark Young\" from the Employee table.", "metadata": {}}
{"_id": "gpt3_3340", "text": "\nThis query will select the employee ID and salary of the employee named Mark Young from the Employee table.", "metadata": {}}
{"_id": "gpt3_3341", "text": "\nThis query would return the total number of female people in the table who are over the age of 30.", "metadata": {}}
{"_id": "gpt3_3342", "text": "\nThis query will return the number of people who are female and over the age of 30.", "metadata": {}}
{"_id": "gpt3_3343", "text": "\nThis query returns the count of people who are female and over the age of 30.", "metadata": {}}
{"_id": "gpt3_3344", "text": "\nThis query will count the number of people in the people table who are female and over the age of 30.", "metadata": {}}
{"_id": "gpt3_3345", "text": "\nThis query will return the count of all female people who are over 30 years old.", "metadata": {}}
{"_id": "gpt3_3346", "text": "\nThis query will select the location of each school from the school table and order the results in descending order by the year the school was founded.", "metadata": {}}
{"_id": "gpt3_3347", "text": "\nThis query will select the location of each school from the school table, and order them by the year they were founded in descending order.", "metadata": {}}
{"_id": "gpt3_3348", "text": "\nThis query will select the location of all schools in the database and order them by the year they were founded in descending order.", "metadata": {}}
{"_id": "gpt3_3349", "text": "\nThis statement will select the location of each school in the database and order them by the date they were founded in descending order.", "metadata": {}}
{"_id": "gpt3_3350", "text": "\nThis query will return a list of the locations of all schools, ordered from the most recently founded to the oldest.", "metadata": {}}
{"_id": "gpt3_3351", "text": "\nThis query will select the task details, task id, and project id from the Tasks and Projects tables for projects with details of 'omnis', and from the Tasks, Projects, and Project Outcomes tables for projects with more than 2", "metadata": {}}
{"_id": "gpt3_3352", "text": "\nThis query retrieves the task details, task ID, and project ID from the Tasks and Projects tables for projects with project details equal to 'omnis', and then combines them with the task details, task ID, and project ID from the", "metadata": {}}
{"_id": "gpt3_3353", "text": "\nThis query is selecting all tasks and their corresponding project ids from the Tasks and Projects tables where the project details are 'omnis', and then selecting all tasks and their corresponding project ids from the Tasks, Projects, and Project Out", "metadata": {}}
{"_id": "gpt3_3354", "text": "\nThis query retrieves the task details, task ID, and project ID from the Tasks and Projects tables, where the project details are 'omnis', and from the Tasks, Projects, and Project_outcomes tables, where the project", "metadata": {}}
{"_id": "gpt3_3355", "text": "\nThis query retrieves the task details, task ID, and project ID for tasks associated with a project with the details 'omnis', as well as the task details, task ID, and project ID for projects with more than two associated project outcomes", "metadata": {}}
{"_id": "gpt3_3356", "text": "\nThis query is used to count the number of coaches associated with each club. It returns the club ID, club name, and the count of coaches associated with the club.", "metadata": {}}
{"_id": "gpt3_3357", "text": "\nThis query returns the club_id and club_name from the club table, as well as the count of coaches associated with each club from the coach table.", "metadata": {}}
{"_id": "gpt3_3358", "text": "\nThis query will select the club_id and club_name from the club table and count the number of coaches associated with each club from the coach table. The result will be grouped by the club_id.", "metadata": {}}
{"_id": "gpt3_3359", "text": "\nThis query will select the club_id and club_name from the club table and count the number of coaches associated with each club from the coach table. It will group the results by the club_id.", "metadata": {}}
{"_id": "gpt3_3360", "text": "\nThis query returns the club_id, club_name, and a count of the number of coaches associated with each club.", "metadata": {}}
{"_id": "gpt3_3361", "text": "\nThis query returns the number of people who have a Cat allergy.", "metadata": {}}
{"_id": "gpt3_3362", "text": "\nThis query will return the number of people in the Has_allergy table who have the allergy \"Cat\".", "metadata": {}}
{"_id": "gpt3_3363", "text": "\nThis query will return the total number of people who have a cat allergy.", "metadata": {}}
{"_id": "gpt3_3364", "text": "\nThis query will return the total number of people who have an allergy to cats.", "metadata": {}}
{"_id": "gpt3_3365", "text": "\nThis query will return the total count of people who have a cat allergy.", "metadata": {}}
{"_id": "gpt3_3366", "text": "\nThis query will return the number of distinct countries represented in the climber table.", "metadata": {}}
{"_id": "gpt3_3367", "text": "\nThis query will return the number of distinct countries represented in the climber table.", "metadata": {}}
{"_id": "gpt3_3368", "text": "\nThis query will count the number of distinct countries represented in the climber table.", "metadata": {}}
{"_id": "gpt3_3369", "text": "\nThis query will return the number of distinct countries represented in the climber table.", "metadata": {}}
{"_id": "gpt3_3370", "text": "\nThis query will return the number of distinct countries in the climber table.", "metadata": {}}
{"_id": "gpt3_3371", "text": "\nThis query selects the Room from the Faculty table where the Rank is \"Professor\" and the Building is \"NEB\".", "metadata": {}}
{"_id": "gpt3_3372", "text": "\nThis query will return the Room numbers of all faculty members who are professors and are located in the NEB building.", "metadata": {}}
{"_id": "gpt3_3373", "text": "\nThis query will select all of the rooms in the NEB building that are occupied by professors.", "metadata": {}}
{"_id": "gpt3_3374", "text": "\nThis query will select the room number of all professors in the NEB building.", "metadata": {}}
{"_id": "gpt3_3375", "text": "\nThis query will select all of the Room numbers from the FACULTY table where the Rank is \"Professor\" and the Building is \"NEB\".", "metadata": {}}
{"_id": "gpt3_3376", "text": "\nThis SQL statement selects employee_id, first_name, last_name, and salary from the employees table where the salary is higher than the average salary of all employees, and the department_id is from employees whose first name contains a '", "metadata": {}}
{"_id": "gpt3_3377", "text": "\nThis SQL statement will select the employee_id, first_name, last_name, and salary from the employees table where the salary is greater than the average salary from all employees and the department_id is from an employee whose first name starts", "metadata": {}}
{"_id": "gpt3_3378", "text": "\nThis query selects employee IDs, first names, last names, and salaries from the employees table where the salary is greater than the average salary of all employees, and the employee is in a department with a first name starting with 'J'.", "metadata": {}}
{"_id": "gpt3_3379", "text": "\nThis query selects employee id, first name, last name, and salary from the employee table for those employees whose salary is above the average salary of all employees and whose first name contains the letter \"J\".", "metadata": {}}
{"_id": "gpt3_3380", "text": "\nThis SQL query will select the employee ID, first name, last name, and salary from the employees table where the salary is greater than the average salary of all employees and the department ID is one of those associated with an employee whose first name begins", "metadata": {}}
{"_id": "gpt3_3381", "text": "\nThis query will select all the first names from the Staff table that are not associated with any Lessons.", "metadata": {}}
{"_id": "gpt3_3382", "text": "\nThis query returns the first names of staff members that are not associated with any lessons.", "metadata": {}}
{"_id": "gpt3_3383", "text": "\nThis query selects all first names from the Staff table that are not associated with any Lessons entries.", "metadata": {}}
{"_id": "gpt3_3384", "text": "\nThis query will return a list of first names from the Staff table that do not have any related records in the Lessons table.", "metadata": {}}
{"_id": "gpt3_3385", "text": "\nThis query will select all the first names from the Staff table, except for the first names of staff members who have lessons in the Lessons table.", "metadata": {}}
{"_id": "gpt3_3386", "text": "\nThis query will select the firstname and lastname of all students from the list table who are in the same classroom as Marrotte Kirk from the teachers table.", "metadata": {}}
{"_id": "gpt3_3387", "text": "\nThis query will select the first and last names of all students in the same classroom as Marrotte Kirk from the list and teachers tables.", "metadata": {}}
{"_id": "gpt3_3388", "text": "\nThis query will select the firstname and lastname from the list table for all students who are in the same classroom as Marrotte Kirk from the teachers table.", "metadata": {}}
{"_id": "gpt3_3389", "text": "\nThis query will return a list of the first and last names of students who are in the same classroom as Marrotte Kirk.", "metadata": {}}
{"_id": "gpt3_3390", "text": "\nThis query will select the firstname and lastname of all students in the same classroom as Marrotte Kirk from the list and teachers tables.", "metadata": {}}
{"_id": "gpt3_3391", "text": "\nThis query will count the number of distinct cities in the bank table.", "metadata": {}}
{"_id": "gpt3_3392", "text": "\nThis query will count the number of distinct cities in the bank table.", "metadata": {}}
{"_id": "gpt3_3393", "text": "\nThis query returns the number of distinct cities in the bank table.", "metadata": {}}
{"_id": "gpt3_3394", "text": "\nThis query will return the number of distinct cities in the bank table.", "metadata": {}}
{"_id": "gpt3_3395", "text": "\nThis query returns the number of distinct cities in the bank table.", "metadata": {}}
{"_id": "gpt3_3396", "text": "\nThis query selects the StuID of all female students who play football.", "metadata": {}}
{"_id": "gpt3_3397", "text": "\nThis query will select all student IDs from the Student table where the sex is female, who are also listed in the Sportsinfo table as playing Football.", "metadata": {}}
{"_id": "gpt3_3398", "text": "\nThis query selects the student IDs of female students who play football.", "metadata": {}}
{"_id": "gpt3_3399", "text": "\nThis query returns the Student IDs of all female students who are registered in the Football sport.", "metadata": {}}
{"_id": "gpt3_3400", "text": "\nThis query will return a list of student IDs from the Student table whose sex is Female and who are also listed in the Sportsinfo table as playing Football.", "metadata": {}}
{"_id": "gpt3_3401", "text": "\nThis query will count the number of gas stations that opened between the years 2000 and 2005.", "metadata": {}}
{"_id": "gpt3_3402", "text": "\nThis query will count the number of gas stations that opened between the years 2000 and 2005.", "metadata": {}}
{"_id": "gpt3_3403", "text": "\nThis query will return the number of gas stations that opened between the years 2000 and 2005.", "metadata": {}}
{"_id": "gpt3_3404", "text": "\nThis query returns the total number of gas stations that opened between 2000 and 2005.", "metadata": {}}
{"_id": "gpt3_3405", "text": "\nThis query will return the total number of gas stations that opened between the years 2000 and 2005.", "metadata": {}}
{"_id": "gpt3_3406", "text": "\nThis query will select the organization ID, type, and details of the organization with the most research staff, ordered by the number of staff members, limiting the result to one.", "metadata": {}}
{"_id": "gpt3_3407", "text": "\nThis query selects the organisation ID, type, and details from the Organisations table, joining it with the Research_Staff table on the organisation ID, and then groups by the organisation ID and orders the results by the count of the grouped records,", "metadata": {}}
{"_id": "gpt3_3408", "text": "\nThis query retrieves the organisation ID, type, and details of the organisation with the most research staff, ordered by the count of research staff.", "metadata": {}}
{"_id": "gpt3_3409", "text": "\nThis query selects the organisation with the most research staff, identified by its organisation ID, type and details, from the Organisations and Research_Staff tables. It groups the results by the organisation ID and orders them by count in descending order, before", "metadata": {}}
{"_id": "gpt3_3410", "text": "\nThis query will select the organization ID, type, and details from the Organisations table, and join it with the Research Staff table to group by the organization ID, and order by the count of the group in descending order, limiting the results to", "metadata": {}}
{"_id": "gpt3_3411", "text": "\nThis query returns the number of distinct instruments that are played by the bandmates of the band with the last name \"Heilo\".", "metadata": {}}
{"_id": "gpt3_3412", "text": "\nThis query will return the total number of distinct instruments that the musician with the last name \"Heilo\" plays.", "metadata": {}}
{"_id": "gpt3_3413", "text": "\nThis query will return the total number of distinct instruments that the bandmate with the last name Heilo plays.", "metadata": {}}
{"_id": "gpt3_3414", "text": "\nThis query will return the number of distinct instruments played by the bandmate with the last name \"Heilo\".", "metadata": {}}
{"_id": "gpt3_3415", "text": "\nThis query will return the count of distinct instruments played by bandmates with the last name \"Heilo\".", "metadata": {}}
{"_id": "gpt3_3416", "text": "\nThis query returns the number of Drama Workshop Groups for each City/Town.", "metadata": {}}
{"_id": "gpt3_3417", "text": "\nThis query will return the city or town associated with each address, as well as the number of drama workshop groups associated with each address.", "metadata": {}}
{"_id": "gpt3_3418", "text": "\nThis query will return a list of cities and towns, along with the number of Drama Workshop Groups located in each.", "metadata": {}}
{"_id": "gpt3_3419", "text": "\nThis query will count the number of Drama Workshop Groups in each City/Town.", "metadata": {}}
{"_id": "gpt3_3420", "text": "\nThis query will return a list of cities and towns along with the number of drama workshops located in each.", "metadata": {}}
{"_id": "gpt3_3421", "text": "\nThis query will return the title of the paper with the highest author order.", "metadata": {}}
{"_id": "gpt3_3422", "text": "\nThis query will return the title of the paper that has the highest author order.", "metadata": {}}
{"_id": "gpt3_3423", "text": "\nThis query will select the title of the paper written by the last author listed in the authorship table.", "metadata": {}}
{"_id": "gpt3_3424", "text": "\nThis query will select the title of the paper with the highest author order from the authorship and papers tables.", "metadata": {}}
{"_id": "gpt3_3425", "text": "\nThis query will select the title of the paper with the highest author order from the authorship and papers tables.", "metadata": {}}
{"_id": "gpt3_3426", "text": "\nThis query returns the number of distinct role codes in the Project_Staff table.", "metadata": {}}
{"_id": "gpt3_3427", "text": "\nThis query will return the count of distinct role codes in the Project_Staff table.", "metadata": {}}
{"_id": "gpt3_3428", "text": "\nThis query will return the number of distinct role codes present in the Project_Staff table.", "metadata": {}}
{"_id": "gpt3_3429", "text": "\nThis query will return the total number of distinct role codes from the Project_Staff table.", "metadata": {}}
{"_id": "gpt3_3430", "text": "\nThis query will count the number of distinct role codes present in the Project_Staff table.", "metadata": {}}
{"_id": "gpt3_3431", "text": "\nThis query selects the drivers who have made 11 pitstops and more than 5 results. It returns the surname and driverid of these drivers.", "metadata": {}}
{"_id": "gpt3_3432", "text": "\nThis query selects the surnames and driver IDs of drivers who have made 11 pitstops and more than 5 results.", "metadata": {}}
{"_id": "gpt3_3433", "text": "\nThis query selects the surnames and driver IDs of drivers who have made 11 pitstops and more than 5 results.", "metadata": {}}
{"_id": "gpt3_3434", "text": "\nThis query returns the surnames and driver IDs of drivers who have completed 11 pitstops and more than 5 results.", "metadata": {}}
{"_id": "gpt3_3435", "text": "\nThis query selects the surnames and driver IDs of drivers who have made 11 pitstops and more than 5 results.", "metadata": {}}
{"_id": "gpt3_3436", "text": "\nThis query will return the date and location of a performance from a given table.", "metadata": {}}
{"_id": "gpt3_3437", "text": "\nThis query will retrieve the Date and Location fields from the performance table.", "metadata": {}}
{"_id": "gpt3_3438", "text": "\nThis query will return the date and location from the performance table.", "metadata": {}}
{"_id": "gpt3_3439", "text": "\nThe query will select the date and location for each performance from a table.", "metadata": {}}
{"_id": "gpt3_3440", "text": "\nThis query will return the date and location of a performance.", "metadata": {}}
{"_id": "gpt3_3441", "text": "\nThe average number of hosts from the party table is 3.", "metadata": {}}
{"_id": "gpt3_3442", "text": "\nThe average number of hosts for parties is calculated by this query: SELECT AVG(Number_of_hosts) FROM party.", "metadata": {}}
{"_id": "gpt3_3443", "text": "\nThis query will return the average number of hosts at a party.", "metadata": {}}
{"_id": "gpt3_3444", "text": "\nThis query returns the average number of hosts for all parties in the table.", "metadata": {}}
{"_id": "gpt3_3445", "text": "\nThe average number of hosts from the party table is 4.5.", "metadata": {}}
{"_id": "gpt3_3446", "text": "\nThis query will count the number of distinct class sections for the course ACCT-211.", "metadata": {}}
{"_id": "gpt3_3447", "text": "\nThis query will return the number of distinct sections for the course ACCT-211.", "metadata": {}}
{"_id": "gpt3_3448", "text": "\nThis query will return the number of distinct class sections for the course ACCT-211.", "metadata": {}}
{"_id": "gpt3_3449", "text": "\nThis query will return the number of distinct class sections for the course ACCT-211.", "metadata": {}}
{"_id": "gpt3_3450", "text": "\nThis query will return the total number of distinct class sections for the course ACCT-211.", "metadata": {}}
{"_id": "gpt3_3451", "text": "\nThis query selects the name of the building with the most office locations associated with it, from the buildings, office locations, and companies tables.", "metadata": {}}
{"_id": "gpt3_3452", "text": "\nThis query selects the name of the building with the most office locations for companies, ordered by the number of office locations for each building, with the building with the most office locations appearing first.", "metadata": {}}
{"_id": "gpt3_3453", "text": "\nThis query selects the name of the building with the most office locations from the buildings, office_locations, and companies tables. It does this by joining the tables on the relevant foreign keys, grouping by building_id, and ordering by the", "metadata": {}}
{"_id": "gpt3_3454", "text": "\nThis query selects the name of the building with the most Office_locations associated with it, as determined by the highest count of Company_id's associated with the building.", "metadata": {}}
{"_id": "gpt3_3455", "text": "\nThis query returns the name of the building with the most office locations for companies.", "metadata": {}}
{"_id": "gpt3_3456", "text": "\nThis query will return the names of all technicians who are either 36 or 37 years old.", "metadata": {}}
{"_id": "gpt3_3457", "text": "\nThis query will select the name of all technicians who are 36 or 37 years old.", "metadata": {}}
{"_id": "gpt3_3458", "text": "\nThis query will select the name of all technicians who are either 36 or 37 years old.", "metadata": {}}
{"_id": "gpt3_3459", "text": "\nThis query returns the names of all technicians who are either 36 or 37 years old.", "metadata": {}}
{"_id": "gpt3_3460", "text": "\nThis query will return the names of all technicians who are either 36 or 37 years old.", "metadata": {}}
{"_id": "gpt3_3461", "text": "\nThis query returns a list of players' names from the Player table, who have been given a yellow card, sorted in descending order by the number of high scores they have achieved.", "metadata": {}}
{"_id": "gpt3_3462", "text": "\nThis query selects the names of all players from the Player table who have received a yellow card (yCard = 'yes') and orders them by highest score (HS) in descending order.", "metadata": {}}
{"_id": "gpt3_3463", "text": "\nThis query will select the names of all players who have received a yellow card, sorted in descending order by the number of high scores they have achieved.", "metadata": {}}
{"_id": "gpt3_3464", "text": "\nThis query will select the player name from the Player table where they have a yellow card and order the results by highest score.", "metadata": {}}
{"_id": "gpt3_3465", "text": "\nThis query selects the names of players who have received a yellow card and orders them by highest score.", "metadata": {}}
{"_id": "gpt3_3466", "text": "\nThis query will return the FacID values from the Faculty table that are not present in the Faculty_participates_in table.", "metadata": {}}
{"_id": "gpt3_3467", "text": "\nThis query will return all Faculty IDs from the Faculty table that are not present in the Faculty_participates_in table.", "metadata": {}}
{"_id": "gpt3_3468", "text": "\nThis query will return the FacID values from the Faculty table that are not in the Faculty_participates_in table.", "metadata": {}}
{"_id": "gpt3_3469", "text": "\nThis query returns the Faculty IDs of faculty members who are not participating in any activities.", "metadata": {}}
{"_id": "gpt3_3470", "text": "\nThis query will return all the Faculty IDs from the Faculty table which are not present in the Faculty_participates_in table.", "metadata": {}}
{"_id": "gpt3_3471", "text": "\nThis query will select all product names from the Products table and order them by product price in ascending order.", "metadata": {}}
{"_id": "gpt3_3472", "text": "\nThis query will select the product names from the Products table and order them by their product price in ascending order.", "metadata": {}}
{"_id": "gpt3_3473", "text": "\nThis query will select all product names from the Products table and order them in ascending order by product price.", "metadata": {}}
{"_id": "gpt3_3474", "text": "\nThis statement selects all product names from the Products table and orders them by ascending price.", "metadata": {}}
{"_id": "gpt3_3475", "text": "\nThis statement will select all product names from the products table and order them by their product price in ascending order.", "metadata": {}}
{"_id": "gpt3_3476", "text": "\nThis query returns the names of all products from the Products table.", "metadata": {}}
{"_id": "gpt3_3477", "text": "\nThis query will select the name of all products from the Products table.", "metadata": {}}
{"_id": "gpt3_3478", "text": "\nThis statement will select the name of all products from a database table.", "metadata": {}}
{"_id": "gpt3_3479", "text": "\nThis statement will select the name of all products from the Products table.", "metadata": {}}
{"_id": "gpt3_3480", "text": "\nThis statement will select the names of all products from the Products table.", "metadata": {}}
{"_id": "gpt3_3481", "text": "\nThis query will return all the classes from the race table that have at least two entries.", "metadata": {}}
{"_id": "gpt3_3482", "text": "\nThis SQL query will select the class from the race table and group the results by class, only displaying classes that have a count of two or more.", "metadata": {}}
{"_id": "gpt3_3483", "text": "\nThis query will select all classes from the race table that have more than two entries in the table.", "metadata": {}}
{"_id": "gpt3_3484", "text": "\nThis query will return the list of all classes from the race table that appear more than once.", "metadata": {}}
{"_id": "gpt3_3485", "text": "\nThis query returns the classes from the race table that have at least two entries.", "metadata": {}}
{"_id": "gpt3_3486", "text": "\nThis query counts the number of records in the program table.", "metadata": {}}
{"_id": "gpt3_3487", "text": "\nThe query SELECT count(*) FROM program will return the total number of records in the program table.", "metadata": {}}
{"_id": "gpt3_3488", "text": "\nThis query will return the total number of rows in the program table.", "metadata": {}}
{"_id": "gpt3_3489", "text": "\nThis query will return the total number of records in the program table.", "metadata": {}}
{"_id": "gpt3_3490", "text": "\nThis query will return the total number of records in the program table.", "metadata": {}}
{"_id": "gpt3_3491", "text": "\nThis query selects the file IDs (f_id) from the files table where the format is \"mp3\".", "metadata": {}}
{"_id": "gpt3_3492", "text": "\nThis query selects the file IDs from the files table where the formats column is equal to \"mp3\".", "metadata": {}}
{"_id": "gpt3_3493", "text": "\nThis statement will select all file ids (f_id) from the files table where the format is equal to \"mp3\".", "metadata": {}}
{"_id": "gpt3_3494", "text": "\nThis SQL statement selects the file IDs from the files table where the formats are mp3.", "metadata": {}}
{"_id": "gpt3_3495", "text": "\nThis query will select the file ID (f_id) from the files table where the format is mp3.", "metadata": {}}
{"_id": "gpt3_3496", "text": "\nThis query will return the number of students in each major, grouped by major. The result will be a table with two columns, the first being the count of students in each major, and the second being the major itself.", "metadata": {}}
{"_id": "gpt3_3497", "text": "\nThis query returns the number of students for each major in the student table.", "metadata": {}}
{"_id": "gpt3_3498", "text": "\nThis query returns a count of the number of students in each major.", "metadata": {}}
{"_id": "gpt3_3499", "text": "\nThis query will return the total number of students in each major, grouped by the major they are enrolled in.", "metadata": {}}
{"_id": "gpt3_3500", "text": "\nThis query will return a count of the number of students in each major, grouped by major.", "metadata": {}}
{"_id": "gpt3_3501", "text": "\nThis query will return a count of records in the county_public_safety table grouped by the police_force field. It will return a list of police forces and the number of records associated with each one.", "metadata": {}}
{"_id": "gpt3_3502", "text": "\nThis query will return the police force name and the total number of incidents reported for each police force.", "metadata": {}}
{"_id": "gpt3_3503", "text": "\nThis query will return a count of the number of records in the county_public_safety table for each police force.", "metadata": {}}
{"_id": "gpt3_3504", "text": "\nThis query will return the number of records for each police force in the county public safety table.", "metadata": {}}
{"_id": "gpt3_3505", "text": "\nThis query will count the number of records for each police force in the county_public_safety table.", "metadata": {}}
{"_id": "gpt3_3506", "text": "\nThis query will return the name and location of all wrestlers in the table.", "metadata": {}}
{"_id": "gpt3_3507", "text": "\nThis statement will select the Name and Location of all wrestlers from a database.", "metadata": {}}
{"_id": "gpt3_3508", "text": "\nThis query would return the name and location of all wrestlers in the database.", "metadata": {}}
{"_id": "gpt3_3509", "text": "\nThis query will return the Name and Location for all wrestlers in the database.", "metadata": {}}
{"_id": "gpt3_3510", "text": "\nThis query will select the Name and Location of all wrestlers from a database table.", "metadata": {}}
{"_id": "gpt3_3511", "text": "\nThis query will return the names of all members who are not registered at any branch.", "metadata": {}}
{"_id": "gpt3_3512", "text": "\nThis query will select the name of any member who is not registered in any branch of the membership register.", "metadata": {}}
{"_id": "gpt3_3513", "text": "\nThis query selects the name of a member from the member table who is not registered in the membership_register_branch table.", "metadata": {}}
{"_id": "gpt3_3514", "text": "\nThis statement will select the name of all members who are not registered in any branch.", "metadata": {}}
{"_id": "gpt3_3515", "text": "\nThis statement will select the name of all members in the table \"member\" who are not registered in the table \"membership_register_branch\".", "metadata": {}}
{"_id": "gpt3_3516", "text": "\nThis query selects the denomination of the school with the most players from the player and school tables.", "metadata": {}}
{"_id": "gpt3_3517", "text": "\nThis query selects the denomination of the school with the most players from the player and school tables, ordered by the number of players from highest to lowest.", "metadata": {}}
{"_id": "gpt3_3518", "text": "\nThis query retrieves the denomination of the school with the most players from the player and school tables, ordered by the count of players from the school.", "metadata": {}}
{"_id": "gpt3_3519", "text": "\nThis query selects the denomination of the school with the most players from the player and school tables, ordered by the count of players.", "metadata": {}}
{"_id": "gpt3_3520", "text": "\nThis query selects the denomination of the school with the most players, ordering by the number of players in descending order.", "metadata": {}}
{"_id": "gpt3_3521", "text": "\nThis query returns the most frequent Publication_Date from the publication table, ordered by the count of each Publication_Date. The result will be the Publication_Date that appears most often in the table.", "metadata": {}}
{"_id": "gpt3_3522", "text": "\nThis query selects the most common Publication_Date from the publication table and orders it by count in descending order, with a limit of 1. This query will return the Publication_Date that appears the most in the publication table.", "metadata": {}}
{"_id": "gpt3_3523", "text": "\nThis query will return the most frequently occurring Publication Date from the publication table, ordered by the number of occurrences in descending order and limited to the first result.", "metadata": {}}
{"_id": "gpt3_3524", "text": "\nThis query will select the most frequent publication date from the publication table, ordered by the number of occurrences, and limit the results to one row.", "metadata": {}}
{"_id": "gpt3_3525", "text": "\nThis query returns the most common Publication Date from the \"publication\" table, ordered by the number of occurrences.", "metadata": {}}
{"_id": "gpt3_3526", "text": "\nThis query returns the total number of students in the student table.", "metadata": {}}
{"_id": "gpt3_3527", "text": "\nThis query will return the total number of students in the student table.", "metadata": {}}
{"_id": "gpt3_3528", "text": "\nThis query returns the total number of students in the student table.", "metadata": {}}
{"_id": "gpt3_3529", "text": "\nThis query returns the total number of rows in the student table.", "metadata": {}}
{"_id": "gpt3_3530", "text": "\nThis query will return the total number of students in the student table.", "metadata": {}}
{"_id": "gpt3_3531", "text": "\nThis query returns the aircraft with the highest number of wins in a match. It does this by joining the aircraft and match tables, grouping by the winning aircraft, and ordering the count of each aircraft in descending order. The result is the aircraft with", "metadata": {}}
{"_id": "gpt3_3532", "text": "\nThis query selects the aircraft with the most wins from a table of aircraft and matches. It returns the aircraft with the highest number of wins in the match table, ordered by the count of wins in descending order, and limited to one result.", "metadata": {}}
{"_id": "gpt3_3533", "text": "\nThis query selects the aircraft that has won the most matches from the aircraft and match tables, and orders it in descending order. The result is the aircraft that has won the most matches.", "metadata": {}}
{"_id": "gpt3_3534", "text": "\nThis query selects the aircraft with the most wins from the aircraft and match tables, ordered by the number of wins in descending order, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_3535", "text": "\nThis query returns the most commonly winning aircraft from the aircraft and match tables, ordered by the number of wins.", "metadata": {}}
{"_id": "gpt3_3536", "text": "\nThis statement will return the total number of records in the company table.", "metadata": {}}
{"_id": "gpt3_3537", "text": "\nThis query returns the total number of records in the company table.", "metadata": {}}
{"_id": "gpt3_3538", "text": "\nThis query will count the total number of records in the company table.", "metadata": {}}
{"_id": "gpt3_3539", "text": "\nThis query returns the total number of rows in the company table.", "metadata": {}}
{"_id": "gpt3_3540", "text": "\nThis query will return the total number of records in the company table.", "metadata": {}}
{"_id": "gpt3_3541", "text": "\nThis query will select the first and last name of all students who have a major of 600.", "metadata": {}}
{"_id": "gpt3_3542", "text": "\nThis SQL statement selects the first name (Fname) and last name (Lname) of all students from the Student table who have a major of 600.", "metadata": {}}
{"_id": "gpt3_3543", "text": "\nThis query will select the first and last names of all students with a major of 600.", "metadata": {}}
{"_id": "gpt3_3544", "text": "\nThis statement selects the first and last name of all students with a major of 600.", "metadata": {}}
{"_id": "gpt3_3545", "text": "\nThis query will select the first and last names of all students who have a major of 600.", "metadata": {}}
{"_id": "gpt3_3546", "text": "\nThis query will return a list of all distinct order IDs from the orders table, sorted by the date the order was placed.", "metadata": {}}
{"_id": "gpt3_3547", "text": "\nThis query will return a list of all unique order IDs from the orders table, sorted by the date the order was placed.", "metadata": {}}
{"_id": "gpt3_3548", "text": "\nThis query will return a list of all unique order IDs in the orders table, sorted by the date on which each order was placed.", "metadata": {}}
{"_id": "gpt3_3549", "text": "\nThis query will return all the distinct order IDs from the orders table, sorted by the date the order was placed.", "metadata": {}}
{"_id": "gpt3_3550", "text": "\nThis query returns a list of all the distinct order IDs from the orders table, sorted by the date the order was placed.", "metadata": {}}
{"_id": "gpt3_3551", "text": "\nThis query will return the number of kids in the reservation for Damien Trachsel on 2010-09-21.", "metadata": {}}
{"_id": "gpt3_3552", "text": "\nThis query will return the number of kids for the reservation made by Damien Trachsel on the 21st of September, 2010.", "metadata": {}}
{"_id": "gpt3_3553", "text": "\nThis SQL query will return the number of kids that Damien Trachsel has reserved for a check-in date of 2010-09-21.", "metadata": {}}
{"_id": "gpt3_3554", "text": "\nThis query will select the number of kids from the Reservations table who have a check-in date of 2010-09-21, a first name of Damien, and a last name of Trachsel.", "metadata": {}}
{"_id": "gpt3_3555", "text": "\nThis query will select the number of kids in the reservation for Damien Trachsel with a check-in date of 2010-09-21.", "metadata": {}}
{"_id": "gpt3_3556", "text": "\nThis query will return all Faculty IDs from the Faculty table that are not listed as an advisor in the Student table.", "metadata": {}}
{"_id": "gpt3_3557", "text": "\nThis statement will select all faculty IDs from the Faculty table that do not appear in the Student table as an advisor.", "metadata": {}}
{"_id": "gpt3_3558", "text": "\nThis query will return all Faculty IDs from the Faculty table that are not listed as an advisor in the Student table.", "metadata": {}}
{"_id": "gpt3_3559", "text": "\nThis query will return the Faculty IDs of faculty members who are not advisors to any students.", "metadata": {}}
{"_id": "gpt3_3560", "text": "\nThis query will return a list of all Faculty IDs from the Faculty table that do not appear in the advisor column of the Student table.", "metadata": {}}
{"_id": "gpt3_3561", "text": "\nThis query will select the customer names from the customers table where the payment method is set to \"Cash\".", "metadata": {}}
{"_id": "gpt3_3562", "text": "\nThis query returns the names of all customers who use the payment method \"Cash\".", "metadata": {}}
{"_id": "gpt3_3563", "text": "\nThe above SQL statement will select the customer names from the customers table where the payment method is \"Cash\".", "metadata": {}}
{"_id": "gpt3_3564", "text": "\nThis query will select the customer_name from the customers table where the payment_method is equal to \"Cash\".", "metadata": {}}
{"_id": "gpt3_3565", "text": "\nThis query will return a list of customer names from the customers table who have paid with cash.", "metadata": {}}
{"_id": "gpt3_3566", "text": "\nThis query will return the average and maximum damage in millions of US dollars from storms where the maximum speed was greater than 1000 mph.", "metadata": {}}
{"_id": "gpt3_3567", "text": "\nThis query will return the average and maximum damage in millions of US dollars caused by storms with wind speeds greater than 1000 mph.", "metadata": {}}
{"_id": "gpt3_3568", "text": "\nThis query returns the average and maximum damage in millions of US dollars caused by storms with maximum wind speeds greater than 1000 mph.", "metadata": {}}
{"_id": "gpt3_3569", "text": "\nThis query will return the average and maximum damage in millions of US dollars caused by storms with a maximum speed greater than 1000 mph.", "metadata": {}}
{"_id": "gpt3_3570", "text": "\nThis query returns the average and maximum damage caused by storms with maximum wind speeds greater than 1000 miles per hour.", "metadata": {}}
{"_id": "gpt3_3571", "text": "\nThis query will select the name of all companies from the company table that have an industry of either Banking or Retailing.", "metadata": {}}
{"_id": "gpt3_3572", "text": "\nThis statement will select the name of each company from the company table where the industry is either banking or retailing.", "metadata": {}}
{"_id": "gpt3_3573", "text": "\nThis statement will select the name of all companies from the company table that are in the banking or retailing industries.", "metadata": {}}
{"_id": "gpt3_3574", "text": "\nThis query will return the names of all companies from the 'company' table that are in the Banking or Retailing industries.", "metadata": {}}
{"_id": "gpt3_3575", "text": "\nThis query will select the names of all companies from the company table that are in either the Banking or Retailing industries.", "metadata": {}}
{"_id": "gpt3_3576", "text": "\nThis query selects the name and team of wrestlers from two tables, elimination and wrestler, and orders them by the number of days they held the title.", "metadata": {}}
{"_id": "gpt3_3577", "text": "\nThis query selects the name and team of wrestlers from the elimination and wrestler tables, and orders them by the days held in descending order.", "metadata": {}}
{"_id": "gpt3_3578", "text": "\nThis query selects the name and team of wrestlers from the elimination and wrestler tables, ordered by the days held by each wrestler.", "metadata": {}}
{"_id": "gpt3_3579", "text": "\nThis query is selecting the name and team of wrestlers from the elimination and wrestler tables and ordering the results by the number of days the wrestler held a title.", "metadata": {}}
{"_id": "gpt3_3580", "text": "\nThis query joins the elimination and wrestler tables to select the Name and Team of wrestlers ordered by the Days_held in the wrestler table in descending order.", "metadata": {}}
{"_id": "gpt3_3581", "text": "\nThis query will select the unique ids and names of stations where there are more than 12 bikes available.", "metadata": {}}
{"_id": "gpt3_3582", "text": "\nThis SQL query retrieves the distinct id and name of all stations that have more than 12 bikes available.", "metadata": {}}
{"_id": "gpt3_3583", "text": "\nThis query returns a list of all distinct station IDs and names where the number of bikes available is greater than 12.", "metadata": {}}
{"_id": "gpt3_3584", "text": "\nThis SQL query selects the distinct id and name of each station from the station table (T1) where the number of bikes available in the status table (T2) is more than 12.", "metadata": {}}
{"_id": "gpt3_3585", "text": "\nThis query selects all distinct station IDs and names from the station table (T1) where the bikes_available value in the status table (T2) is greater than 12.", "metadata": {}}
{"_id": "gpt3_3586", "text": "\nThis query will return the number of sections for each semester and year, grouped by semester and year. Each row will contain the total number of sections for a given semester and year.", "metadata": {}}
{"_id": "gpt3_3587", "text": "\nThis query will return the count of all rows in the SECTION table for each semester and year combination. It will return three columns, the first being the count, the second being the semester and the third being the year.", "metadata": {}}
{"_id": "gpt3_3588", "text": "\nThis query will return the number of sections, the semester, and the year for each group of sections grouped by semester and year.", "metadata": {}}
{"_id": "gpt3_3589", "text": "\nThis query will return a count of the number of sections for each semester and year. The result will be two columns, one for the number of sections and the other for the semester and year.", "metadata": {}}
{"_id": "gpt3_3590", "text": "\nThis query will count the number of sections in each semester and year, and group them by semester and year. The resulting table will have two columns: the number of sections in each semester and year, and the semester and year.", "metadata": {}}
{"_id": "gpt3_3591", "text": "\nThis query counts the number of customers in the Customers table who do not have an entry in the Customer_Payments table.", "metadata": {}}
{"_id": "gpt3_3592", "text": "\nThis query counts the number of customers who have not made any payments.", "metadata": {}}
{"_id": "gpt3_3593", "text": "\nThis query will return the count of customers who have not made any payments in the Customer_Payments table.", "metadata": {}}
{"_id": "gpt3_3594", "text": "\nThis query returns the count of customers who have not made any payments.", "metadata": {}}
{"_id": "gpt3_3595", "text": "\nThis query returns the count of customers who have not made any payments.", "metadata": {}}
{"_id": "gpt3_3596", "text": "\nThis query returns the customer_event_id, date_moved_in, and property_id of all customer events.", "metadata": {}}
{"_id": "gpt3_3597", "text": "\nThis query is used to retrieve the customer event ID, date moved in, and property ID from the customer events table.", "metadata": {}}
{"_id": "gpt3_3598", "text": "\nThis query retrieves the customer event ID, date moved in, and property ID for customers from the customer events table.", "metadata": {}}
{"_id": "gpt3_3599", "text": "\nThis query selects the customer_event_id, date_moved_in, and property_id from the customer_events table.", "metadata": {}}
{"_id": "gpt3_3600", "text": "\nThis SQL statement retrieves the customer event ID, the date moved in, and the property ID from the customer events table.", "metadata": {}}
{"_id": "gpt3_3601", "text": "\nThis query will return all songs with titles that contain the words \"the\" surrounded by other words.", "metadata": {}}
{"_id": "gpt3_3602", "text": "\nThis query will return all songs with \"the\" in the title.", "metadata": {}}
{"_id": "gpt3_3603", "text": "\nThis query will select all titles from the songs table that contain the words \"the\" surrounded by other words.", "metadata": {}}
{"_id": "gpt3_3604", "text": "\nThis query selects the titles of songs that contain the words \"the\" surrounded by other words.", "metadata": {}}
{"_id": "gpt3_3605", "text": "\nThis SQL statement will select all songs titles from a database that contain the words \"the\" in the title.", "metadata": {}}
{"_id": "gpt3_3606", "text": "\nThis query selects the state/province/county from the Addresses table for those addresses associated with Staff records, grouped by state/province/county and having a count of between 2 and 4.", "metadata": {}}
{"_id": "gpt3_3607", "text": "\nThis query selects the state/province/county from the Addresses table for each staff member whose address is in the Staff table and groups them together if there are between 2 and 4 staff members with the same address.", "metadata": {}}
{"_id": "gpt3_3608", "text": "\nThis query selects the state, province, or county from the Addresses table for staff members whose address_id is linked to the Staff table, and groups them by the state, province, or county, having a count of between 2 and 4", "metadata": {}}
{"_id": "gpt3_3609", "text": "\nThis query selects the state/province/county from the Addresses table, joining it with the Staff table on the address_id and staff_address_id columns. It then groups the results by state/province/county", "metadata": {}}
{"_id": "gpt3_3610", "text": "\nThis query selects the state/province/county from the Addresses table for records that have a staff address ID matching the staff table, and groups the results by state/province/county, only including results that have a count", "metadata": {}}
{"_id": "gpt3_3611", "text": "\nThis query will return the number of distinct industries represented in the Companies table.", "metadata": {}}
{"_id": "gpt3_3612", "text": "\nThis query will return the number of distinct industries present in the Companies table.", "metadata": {}}
{"_id": "gpt3_3613", "text": "\nThis query will return the number of distinct industries from the Companies table.", "metadata": {}}
{"_id": "gpt3_3614", "text": "\nThis query returns the number of distinct industries represented in the Companies table.", "metadata": {}}
{"_id": "gpt3_3615", "text": "\nThis query will return the number of distinct industries among the companies in the Companies table.", "metadata": {}}
{"_id": "gpt3_3616", "text": "\nThis query selects the name, headquarter, and founder of the manufacturer with the highest revenue, in descending order.", "metadata": {}}
{"_id": "gpt3_3617", "text": "\nThis query returns the name, headquarter, and founder of the manufacturer with the highest revenue.", "metadata": {}}
{"_id": "gpt3_3618", "text": "\nThis query will select the name, headquarter, and founder of the manufacturer with the highest revenue. The results will be ordered by revenue in descending order and limited to the top result.", "metadata": {}}
{"_id": "gpt3_3619", "text": "\nThis query will select the name, headquarter, and founder of the manufacturer with the highest revenue, ordered by revenue in descending order and limited to 1 result.", "metadata": {}}
{"_id": "gpt3_3620", "text": "\nThis query will select the name, headquarter, and founder of the manufacturer with the highest revenue and display the result in descending order.", "metadata": {}}
{"_id": "gpt3_3621", "text": "\nThis query will return the number of records in the phone table grouped by the Accreditation_type field. The result set will include the Accreditation_type and the count of records that have that Accreditation_type.", "metadata": {}}
{"_id": "gpt3_3622", "text": "\nThis query will return the number of phones for each accreditation type. The result will be a table with two columns, one for the accreditation type and one for the count of phones for each type.", "metadata": {}}
{"_id": "gpt3_3623", "text": "\nThe query will return the number of records for each Accreditation_type in the phone table. For example, the output might look like this: \n\nAccreditation_type | count(*)\n------------------|----------\nA | 10", "metadata": {}}
{"_id": "gpt3_3624", "text": "\nThis query will return the number of records for each accreditation type in the phone table. The result will be a table with two columns: Accreditation_type and count(*).", "metadata": {}}
{"_id": "gpt3_3625", "text": "\nThis query will return the number of records for each Accreditation_type in the phone table. The result will be a list of Accreditation_type and the number of records for each type.", "metadata": {}}
{"_id": "gpt3_3626", "text": "\nThis query selects the party name from the party_events and party tables where the party_id in the party_events table appears more than once. This query is useful for finding parties that have been attended more than once.", "metadata": {}}
{"_id": "gpt3_3627", "text": "\nThis query selects the party name from the party_events and party tables and groups them by the party_id, only returning results where the count is greater than or equal to 2.", "metadata": {}}
{"_id": "gpt3_3628", "text": "\nThis query will select the party name from the party_events and party tables, grouping by the party_id and having a count of at least 2. This will return all parties that have had at least two events associated with them.", "metadata": {}}
{"_id": "gpt3_3629", "text": "\nThis query selects the party name from the party_events and party tables, joining the two tables on the party_id, and groups by the party_id, having a count of at least 2. The result is a list of party names", "metadata": {}}
{"_id": "gpt3_3630", "text": "\nThis query selects the party name from the party_events and party tables, grouping the results by party_id and only selecting those with two or more entries in the party_events table.", "metadata": {}}
{"_id": "gpt3_3631", "text": "\nThis query selects the project name and hours from the projects table (T1) and joins it with the assignedto table (T2) based on the project code. It then groups the results by project and orders them by the count of each", "metadata": {}}
{"_id": "gpt3_3632", "text": "\nThis query selects the name and hours of the project with the most assigned employees, sorted by the number of assigned employees in descending order and limited to the top result.", "metadata": {}}
{"_id": "gpt3_3633", "text": "\nThis query selects the name and hours of the project with the most assignments, ordered by the number of assignments in descending order, and limiting the results to one row.", "metadata": {}}
{"_id": "gpt3_3634", "text": "\nThis query selects the name and hours of the project with the most assigned people, ordered by the count of assigned people in descending order and limited to 1 result.", "metadata": {}}
{"_id": "gpt3_3635", "text": "\nThis query selects the name and hours of the project that has been assigned to the most people, ordered by the number of assignments, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_3636", "text": "\nThis query retrieves the student IDs of all students who participate in both canoeing and kayaking activities.", "metadata": {}}
{"_id": "gpt3_3637", "text": "\nThis query selects the student IDs of those who participate in both canoeing and kayaking activities.", "metadata": {}}
{"_id": "gpt3_3638", "text": "\nThis query selects the student IDs of students who participate in both canoeing and kayaking activities.", "metadata": {}}
{"_id": "gpt3_3639", "text": "\nThis query selects the student IDs of all students who participate in both Canoeing and Kayaking activities.", "metadata": {}}
{"_id": "gpt3_3640", "text": "\nThis query will select the student IDs of all students who participate in both canoeing and kayaking.", "metadata": {}}
{"_id": "gpt3_3641", "text": "\nThe SQL statement SELECT DISTINCT date_moved_in FROM residents will return a list of all the unique dates that residents have moved in.", "metadata": {}}
{"_id": "gpt3_3642", "text": "\nThis query will return a list of all the distinct dates when residents moved in.", "metadata": {}}
{"_id": "gpt3_3643", "text": "\nThe SQL query SELECT DISTINCT date_moved_in FROM residents will return a list of all the unique dates that residents have moved in.", "metadata": {}}
{"_id": "gpt3_3644", "text": "\nThe query SELECT DISTINCT date_moved_in FROM residents will return a list of all the unique dates that residents have moved into a given space.", "metadata": {}}
{"_id": "gpt3_3645", "text": "\nThis statement will return a list of all the unique dates that residents moved in.", "metadata": {}}
{"_id": "gpt3_3646", "text": "\nThis query selects the names of the storms that affected both Afghanistan and Albania.", "metadata": {}}
{"_id": "gpt3_3647", "text": "\nThis query returns the names of storms that have affected both Afghanistan and Albania.", "metadata": {}}
{"_id": "gpt3_3648", "text": "\nThis query selects the names of storms that affected both Afghanistan and Albania.", "metadata": {}}
{"_id": "gpt3_3649", "text": "\nThis query selects the names of storms that have affected both Afghanistan and Albania.", "metadata": {}}
{"_id": "gpt3_3650", "text": "\nThis query returns the names of the storms that have affected both Afghanistan and Albania.", "metadata": {}}
{"_id": "gpt3_3651", "text": "\nThis query counts the number of products with the name \"flax\" that have associated characteristics in the product_characteristics and characteristics tables.", "metadata": {}}
{"_id": "gpt3_3652", "text": "\nThis query returns the total number of products with the name \"flax\" that have associated characteristics in the product_characteristics and characteristics tables.", "metadata": {}}
{"_id": "gpt3_3653", "text": "\nThis query counts the number of products with the name \"flax\" that have associated characteristics in the product_characteristics and characteristics tables.", "metadata": {}}
{"_id": "gpt3_3654", "text": "\nThis query returns the count of all products with the name \"flax\" that have associated product characteristics and characteristics in the product_characteristics and characteristics tables, respectively.", "metadata": {}}
{"_id": "gpt3_3655", "text": "\nThis query will count the number of products with the name \"flax\" that have associated characteristics in the product_characteristics and characteristics tables.", "metadata": {}}
{"_id": "gpt3_3656", "text": "\nThis query returns the titles of all movies that have not been rated.", "metadata": {}}
{"_id": "gpt3_3657", "text": "\nThis query returns the title of all movies that do not have any ratings.", "metadata": {}}
{"_id": "gpt3_3658", "text": "\nThis query returns the titles of all movies that have not been rated.", "metadata": {}}
{"_id": "gpt3_3659", "text": "\nThis query will select the title of all movies that do not have any ratings.", "metadata": {}}
{"_id": "gpt3_3660", "text": "\nThis query will return the titles of all movies that do not have any ratings.", "metadata": {}}
{"_id": "gpt3_3661", "text": "\nThis query returns the titles of all films with a length greater than 100 minutes or a rating of PG, except for those with a replacement cost greater than 200.", "metadata": {}}
{"_id": "gpt3_3662", "text": "\nThis query will return the titles of films that are longer than 100 minutes or rated PG, but not films that have a replacement cost greater than 200.", "metadata": {}}
{"_id": "gpt3_3663", "text": "\nThis query will return all titles from the film table that have a length greater than 100 minutes or a rating of PG, except for titles with a replacement cost greater than 200.", "metadata": {}}
{"_id": "gpt3_3664", "text": "\nThis query will return the titles of films that have a length greater than 100 minutes or a rating of PG, excluding any films with a replacement cost greater than 200.", "metadata": {}}
{"_id": "gpt3_3665", "text": "\nThis query will return a list of titles from the film table where the length of the film is greater than 100 minutes or the rating is PG, except for titles from the film table where the replacement cost is greater than 200.", "metadata": {}}
{"_id": "gpt3_3666", "text": "\nThis query will retrieve the order ID and customer ID of all customer orders that have been cancelled, sorted by order date.", "metadata": {}}
{"_id": "gpt3_3667", "text": "\nThis query retrieves the order ID and customer ID from the customer_orders table for all orders with a status code of \"Cancelled\" and orders them by the order date.", "metadata": {}}
{"_id": "gpt3_3668", "text": "\nThis query retrieves the order_id and customer_id from the customer_orders table for orders with a status code of \"Cancelled\" and orders them by order date.", "metadata": {}}
{"_id": "gpt3_3669", "text": "\nThis query will select the order ID and customer ID from the customer_orders table for orders that have a status code of \"Cancelled\" and order the results by order date.", "metadata": {}}
{"_id": "gpt3_3670", "text": "\nThis query will select the order_id and customer_id of all orders with a status of Cancelled, sorted by order date.", "metadata": {}}
{"_id": "gpt3_3671", "text": "\nThis query will select the customer_id from the customers table where the customer_name contains the string \"Diana\".", "metadata": {}}
{"_id": "gpt3_3672", "text": "\nThis query will select the customer_id from the customers table where the customer_name contains the string \"Diana\".", "metadata": {}}
{"_id": "gpt3_3673", "text": "\nThis query will select the customer_id from the customers table where the customer_name contains the string \"Diana\". It will return any customer_id that matches the criteria.", "metadata": {}}
{"_id": "gpt3_3674", "text": "\nThis query will select all customer IDs from the customers table whose customer name contains the string \"Diana\".", "metadata": {}}
{"_id": "gpt3_3675", "text": "\nThis query selects the customer_id from the customers table where the customer_name contains the string \"Diana\".", "metadata": {}}
{"_id": "gpt3_3676", "text": "\nThis statement will select the title and director of all movies with a rating higher than the average rating of movies directed by James Cameron.", "metadata": {}}
{"_id": "gpt3_3677", "text": "\nThis query selects the title and director of movies that have a higher rating than the average rating of movies directed by James Cameron.", "metadata": {}}
{"_id": "gpt3_3678", "text": "\nThis query selects the title and director of movies that have a rating higher than the average rating of all the movies directed by James Cameron.", "metadata": {}}
{"_id": "gpt3_3679", "text": "\nThis query selects the title and director of movies from the Rating and Movie tables where the star rating is higher than the average of all movies directed by James Cameron.", "metadata": {}}
{"_id": "gpt3_3680", "text": "\nThis query selects the title and director of movies from the Rating and Movie tables with a star rating greater than the average star rating of movies directed by James Cameron.", "metadata": {}}
{"_id": "gpt3_3681", "text": "\nThis query will select the date a claim was made and the claim ID from the Claims table, joining with the Settlements table on the Claim ID, and grouping by the Claim ID with a count of more than 2. It will also select the", "metadata": {}}
{"_id": "gpt3_3682", "text": "\nThis query retrieves the Date_Claim_Made and Claim_id from the Claims table, joining with the Settlements table on the Claim_id, and groups the results by Claim_id having a count of more than two. It also", "metadata": {}}
{"_id": "gpt3_3683", "text": "\nThis query selects the date and claim ID of all claims that have been settled more than twice, as well as the date and claim ID of the highest-valued claim.", "metadata": {}}
{"_id": "gpt3_3684", "text": "\nThis query retrieves the Date_Claim_Made and Claim_id from the Claims table and Settlements table, where the Claim_id matches between the two tables, and the count of the Claim_id is greater than 2, as well", "metadata": {}}
{"_id": "gpt3_3685", "text": "\nThis query retrieves the date and claim ID of any claim that has been settled more than twice or has the highest amount claimed.", "metadata": {}}
{"_id": "gpt3_3686", "text": "\nThis query returns the bike_id of the bike that has been used the most for trips with a zip code of 94002.", "metadata": {}}
{"_id": "gpt3_3687", "text": "\nThis query will return the bike ID of the bike that was used most often in trips with a zip code of 94002.", "metadata": {}}
{"_id": "gpt3_3688", "text": "\nThis query finds the bike_id that was used the most in trips with the zip code 94002. It groups the trips by bike_id and orders them in descending order by count, then returns the first result, which is the bike", "metadata": {}}
{"_id": "gpt3_3689", "text": "\nThis query will select the bike_id with the most trips from the trip table with a zip_code of 94002, and return the top result.", "metadata": {}}
{"_id": "gpt3_3690", "text": "\nThis query returns the bike_id of the bike that was used most often on trips with a zip code of 94002.", "metadata": {}}
{"_id": "gpt3_3691", "text": "\nThis query will return the product_id that appears most often in the order_items table, ordered by the number of times it appears in descending order, with a limit of 1 record.", "metadata": {}}
{"_id": "gpt3_3692", "text": "\nThis SQL query returns the product ID with the highest number of orders from the order_items table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_3693", "text": "\nThis query returns the product_id of the product that appears the most often in the order_items table, ordered by the number of times it appears.", "metadata": {}}
{"_id": "gpt3_3694", "text": "\nThis query selects the product_id from the order_items table, groups the product_id by each unique value, orders them by count in descending order, and limits the result to the top product_id. This query will return the product", "metadata": {}}
{"_id": "gpt3_3695", "text": "\nThis query returns the product_id of the most frequently purchased item from the order_items table, sorted by the number of times it was purchased in descending order.", "metadata": {}}
{"_id": "gpt3_3696", "text": "\nThis SQL query will select the denomination from a school table and group the results by denomination, only showing denominations that have more than one school.", "metadata": {}}
{"_id": "gpt3_3697", "text": "\nThis query returns the denominations of schools that appear more than once in the school table.", "metadata": {}}
{"_id": "gpt3_3698", "text": "\nThis query returns all denominations from the school table that have more than one entry.", "metadata": {}}
{"_id": "gpt3_3699", "text": "\nThis query returns all denominations from the school table which have more than one entry in the table.", "metadata": {}}
{"_id": "gpt3_3700", "text": "\nThis query will select the denomination from the school table and group the results by denomination, only displaying denominations that appear more than once.", "metadata": {}}
