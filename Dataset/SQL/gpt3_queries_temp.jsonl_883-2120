{"_id": "gpt3_1", "text": "\nThis query will return a list of events sorted by descending order of event attendance, with the most attended event first. The result will include the date, name, and venue of each event.", "metadata": {}}
{"_id": "gpt3_2", "text": "\nThis query will return a list of events sorted by descending order of attendance. The result set will include the date, name, and venue of each event.", "metadata": {}}
{"_id": "gpt3_3", "text": "\nThis query will return the date, name, and venue of an event, ordered by the event attendance in descending order.", "metadata": {}}
{"_id": "gpt3_4", "text": "\nThis query will return the date, name, and venue of events, ordered by the event attendance in descending order.", "metadata": {}}
{"_id": "gpt3_5", "text": "\nThis query will return a list of events, sorted in descending order by the number of attendees, including the date, name, and venue of each event.", "metadata": {}}
{"_id": "gpt3_6", "text": "\nThe SQL query would return the product category code for the product \"flax\".", "metadata": {}}
{"_id": "gpt3_7", "text": "\nThis query will return the product category code for the product with the name \"flax\".", "metadata": {}}
{"_id": "gpt3_8", "text": "\nThe query would return the product category code for the product \"flax\" from the products table.", "metadata": {}}
{"_id": "gpt3_9", "text": "\nThe query will return the product category code of the product \"flax\" from the products table.", "metadata": {}}
{"_id": "gpt3_10", "text": "\nThe query will return the product category code associated with the product name \"flax\".", "metadata": {}}
{"_id": "gpt3_11", "text": "\nThis query will select the name of all banks located in the state of New York from the bank table.", "metadata": {}}
{"_id": "gpt3_12", "text": "\nThis query will return the names of all banks located in the state of New York.", "metadata": {}}
{"_id": "gpt3_13", "text": "\nThis query will return the names of all banks located in New York.", "metadata": {}}
{"_id": "gpt3_14", "text": "\nThis SQL query will select the bname (bank name) from the bank table where the state is equal to 'New York'.", "metadata": {}}
{"_id": "gpt3_15", "text": "\nThis query will select the bname (bank name) from the bank table where the state is equal to 'New York'.", "metadata": {}}
{"_id": "gpt3_16", "text": "\nThis query will return the number of dorms, the total student capacity, and the gender of each dorm, grouped by gender. The results will look like this: \n\nGender | Count(*) | Sum(student_capacity)\n", "metadata": {}}
{"_id": "gpt3_17", "text": "\nThis query will return a count of the number of dorms, the sum of the student capacity for each gender, and the gender for each row. The result will look like this:\n\nGender | Count | Sum\n-------------------\nMale", "metadata": {}}
{"_id": "gpt3_18", "text": "\nThis query will return the total number of dorms, the total student capacity of all dorms, and the gender of each dorm, grouped by gender. The result will be two rows, one for each gender, with the number of dorms", "metadata": {}}
{"_id": "gpt3_19", "text": "\nThis query returns the total number of dorms, the sum of the student capacities, and the gender of the dorms grouped by gender. The result will be two rows, one for each gender, with the count, sum, and gender for", "metadata": {}}
{"_id": "gpt3_20", "text": "\nThis query will return the count of dorms, the total student capacity of all dorms, and the gender associated with each dorm, grouped by gender. The result will be two rows, one for each gender, with the respective count, sum", "metadata": {}}
{"_id": "gpt3_21", "text": "\nThis query will select the builder with the most entries in the railway table and display it, ordered by the number of entries in descending order, with a limit of one result.", "metadata": {}}
{"_id": "gpt3_22", "text": "\nThis query will return the name of the builder with the most railway lines in the table, ordered by the number of lines they have constructed.", "metadata": {}}
{"_id": "gpt3_23", "text": "\nThis query returns the name of the builder with the most railway lines in the table.", "metadata": {}}
{"_id": "gpt3_24", "text": "\nThis query returns the builder with the highest number of railway entries in the table.", "metadata": {}}
{"_id": "gpt3_25", "text": "\nThis query returns the builder with the most railway lines in the database, ordered by the number of lines they have built.", "metadata": {}}
{"_id": "gpt3_26", "text": "\nThis query selects the product details and product ID of the product with the highest order quantity from the order_items and products tables, and orders the results by the sum of the order quantity. The result is limited to one row.", "metadata": {}}
{"_id": "gpt3_27", "text": "\nThis query selects the product details and product ID of the product with the highest order quantity from the order_items and products tables, grouped by product ID and ordered by the sum of the order quantity. The result is limited to one product.", "metadata": {}}
{"_id": "gpt3_28", "text": "\nThis query selects the product details and product ID of the product with the highest order quantity from the order_items and products tables, and orders them by the sum of the order quantity. The result is limited to the top product.", "metadata": {}}
{"_id": "gpt3_29", "text": "\nThis query selects the product details and product id of the product with the highest total order quantity from the order_items and products tables. It groups the order items by product_id and orders them by the sum of the order_quantity,", "metadata": {}}
{"_id": "gpt3_30", "text": "\nThis query returns the product details and product ID of the product that was ordered the most, as determined by the sum of the order quantities in the order_items table. The results are grouped by product ID and ordered by the sum of order quantity", "metadata": {}}
{"_id": "gpt3_31", "text": "\nThis SQL statement will select all the unique instruments from the Instruments table.", "metadata": {}}
{"_id": "gpt3_32", "text": "\nThis statement will query the Instruments table and return a list of all distinct instruments stored in the table.", "metadata": {}}
{"_id": "gpt3_33", "text": "\nThis query will select all distinct instruments from the Instruments table.", "metadata": {}}
{"_id": "gpt3_34", "text": "\nThis query will return a list of all the distinct instruments present in the Instruments table.", "metadata": {}}
{"_id": "gpt3_35", "text": "\nThis SQL query will return a list of all the distinct instruments from the Instruments table.", "metadata": {}}
{"_id": "gpt3_36", "text": "\nThis query will select the reviewer ID (rID) from the Reviewer table for any reviewer whose name contains the string \"Mike\".", "metadata": {}}
{"_id": "gpt3_37", "text": "\nThis query will return all reviewers with the name Mike from the Reviewer table.", "metadata": {}}
{"_id": "gpt3_38", "text": "\nThis query will select the reviewer ID (rID) of any reviewer whose name contains the string \"Mike\".", "metadata": {}}
{"_id": "gpt3_39", "text": "\nThis statement returns the reviewer ID (rID) of all reviewers whose name contains the string \"Mike\".", "metadata": {}}
{"_id": "gpt3_40", "text": "\nThis query will select the reviewer ID (rID) from the Reviewer table for any reviewer whose name contains the string \"Mike\".", "metadata": {}}
{"_id": "gpt3_41", "text": "\nThis query selects the name of the employee who has the most certificates for aircrafts with a distance greater than 5000.", "metadata": {}}
{"_id": "gpt3_42", "text": "\nThis query selects the name of the employee with the most certificates for aircraft that can travel more than 5000 miles, ordered by the number of certificates.", "metadata": {}}
{"_id": "gpt3_43", "text": "\nThis query returns the name of the employee who has the most certificates for aircrafts with a distance greater than 5000.", "metadata": {}}
{"_id": "gpt3_44", "text": "\nThis query selects the name of the employee who has the most certificates for aircraft that can travel more than 5000 miles.", "metadata": {}}
{"_id": "gpt3_45", "text": "\nThis query returns the name of the employee who holds the most certificates for aircrafts with a distance greater than 5000 miles.", "metadata": {}}
{"_id": "gpt3_46", "text": "\nThis query returns the most common document type code from the Documents table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_47", "text": "\nThis query returns the document type code with the highest count from the Documents table, ordered by count in descending order.", "metadata": {}}
{"_id": "gpt3_48", "text": "\nThis query returns the most common document type code from the Documents table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_49", "text": "\nThis query selects the document type code with the highest count from the Documents table and orders them in descending order. The result of the query is the document type code with the highest count.", "metadata": {}}
{"_id": "gpt3_50", "text": "\nThis query will return the document type code with the highest count from the Documents table.", "metadata": {}}
{"_id": "gpt3_51", "text": "\nThis query returns the total number of records in the party_events table.", "metadata": {}}
{"_id": "gpt3_52", "text": "\nThis query will return the total number of records in the party_events table.", "metadata": {}}
{"_id": "gpt3_53", "text": "\nThis query returns the total number of records in the party_events table.", "metadata": {}}
{"_id": "gpt3_54", "text": "\nThis query will return the total number of records in the party_events table.", "metadata": {}}
{"_id": "gpt3_55", "text": "\nThis query returns the total count of rows in the party_events table.", "metadata": {}}
{"_id": "gpt3_56", "text": "\nThis query will count the number of exhibitions each artist has participated in, and display the artist's name alongside the count.", "metadata": {}}
{"_id": "gpt3_57", "text": "\nThis query retrieves the name and count of exhibitions for each artist.", "metadata": {}}
{"_id": "gpt3_58", "text": "\nThis query returns the name of each artist and the total number of exhibitions they have participated in.", "metadata": {}}
{"_id": "gpt3_59", "text": "\nThis query counts the number of exhibitions for each artist. It does so by joining the exhibition and artist tables on the artist_id column, then grouping the results by the artist_id and counting the number of exhibitions for each artist. The result", "metadata": {}}
{"_id": "gpt3_60", "text": "\nThis query will return the names of the artists and the number of exhibitions they have been involved in.", "metadata": {}}
{"_id": "gpt3_61", "text": "\nThis query will return the names and trade names of all medicines that have been approved by the FDA.", "metadata": {}}
{"_id": "gpt3_62", "text": "\nThis query will select the name and trade name of all medicines that have been approved by the FDA.", "metadata": {}}
{"_id": "gpt3_63", "text": "\nThis query will return the name and trade name of all medicines that have been approved by the FDA.", "metadata": {}}
{"_id": "gpt3_64", "text": "\nThis SQL statement will retrieve the name and trade name of all medicines that have been approved by the FDA.", "metadata": {}}
{"_id": "gpt3_65", "text": "\nThis query will return the name and trade name of all medicines that have been approved by the FDA.", "metadata": {}}
{"_id": "gpt3_66", "text": "\nThis query will count the number of lessons that involve a staff member whose first name contains the letter \"a\".", "metadata": {}}
{"_id": "gpt3_67", "text": "\nThis query returns the count of all lessons taught by staff members whose first name contains the letter 'a'.", "metadata": {}}
{"_id": "gpt3_68", "text": "\nThis query will count the number of lessons that have a staff member whose first name contains an 'a'.", "metadata": {}}
{"_id": "gpt3_69", "text": "\nThis query will count the number of lessons that are assigned to staff members whose first name contains the letter \"a\".", "metadata": {}}
{"_id": "gpt3_70", "text": "\nThis query returns the total number of lessons taught by staff members with a first name containing the letter \"a\".", "metadata": {}}
{"_id": "gpt3_71", "text": "\nThis query counts the number of times each document, draft, and copy has been circulated by an employee and returns the employee name with the highest count.", "metadata": {}}
{"_id": "gpt3_72", "text": "\nThis query selects the employee name and count of the employee who has circulated the most documents, drafts, and copies. It does this by joining the Employees table with the Circulation_History table on the employee_id, and then grouping by document", "metadata": {}}
{"_id": "gpt3_73", "text": "\nThis query selects the employee name and the number of times they have checked out a document, based on the document ID, draft number, and copy number. It then orders the results by the number of times the document was checked out, and limits", "metadata": {}}
{"_id": "gpt3_74", "text": "\nThis query will select the employee name and the count of the number of times that employee has circulated a document, grouped by document id, draft number, and copy number, and ordered by the count in descending order, with the highest count being returned", "metadata": {}}
{"_id": "gpt3_75", "text": "\nThis query selects the employee name and the number of times they have circulated a document, grouped by document, draft and copy number, and ordered by the number of times circulated in descending order, with the top result being the employee who has circulated the", "metadata": {}}
{"_id": "gpt3_76", "text": "\nThis query will select the StuID of female students who play football.", "metadata": {}}
{"_id": "gpt3_77", "text": "\nThis statement would select the student IDs of all female students who play football.", "metadata": {}}
{"_id": "gpt3_78", "text": "\nThis query will select the student IDs of all female students who are participating in football.", "metadata": {}}
{"_id": "gpt3_79", "text": "\nThis query will select the student IDs of all female students who play football.", "metadata": {}}
{"_id": "gpt3_80", "text": "\nThis query selects the Student IDs of female students who play football.", "metadata": {}}
{"_id": "gpt3_81", "text": "\nThis SQL query returns the department_id of all departments that have more than 10 employees with a commission_pct.", "metadata": {}}
{"_id": "gpt3_82", "text": "\nThis query returns a list of department_id values from the employees table that have more than 10 employees with a commission_pct value.", "metadata": {}}
{"_id": "gpt3_83", "text": "\nThis query returns all department IDs from the employees table where more than 10 employees have a commission percentage.", "metadata": {}}
{"_id": "gpt3_84", "text": "\nThis statement will return a list of department IDs from the employees table that have more than 10 employees with a commission percentage.", "metadata": {}}
{"_id": "gpt3_85", "text": "\nThis SQL statement is used to find all department IDs from the employees table that have more than 10 employees with a commission percentage. It does this by grouping the data by department ID and then selecting only those departments that have a count of commission percentage greater", "metadata": {}}
{"_id": "gpt3_86", "text": "\nThis query will select the name of all instructors who are not currently teaching any courses.", "metadata": {}}
{"_id": "gpt3_87", "text": "\nThis query will select the names of instructors from the instructor table who are not listed as teaching any courses in the teaches table.", "metadata": {}}
{"_id": "gpt3_88", "text": "\nThis query will select the name of any instructor who is not currently teaching any classes.", "metadata": {}}
{"_id": "gpt3_89", "text": "\nThis query will return the names of all instructors who do not teach any courses.", "metadata": {}}
{"_id": "gpt3_90", "text": "\nThis query will return a list of names from the instructor table that are not associated with any of the classes in the teaches table.", "metadata": {}}
{"_id": "gpt3_91", "text": "\nThe query will select the story of the tallest building from the buildings table and display it.", "metadata": {}}
{"_id": "gpt3_92", "text": "\nThis query will select the story of the tallest building in the buildings table and order them in descending order, then limit the result to the first one.", "metadata": {}}
{"_id": "gpt3_93", "text": "\nThis query will select the story of the tallest building from the buildings table, ordered from tallest to shortest, and limit the query to the top result.", "metadata": {}}
{"_id": "gpt3_94", "text": "\nThis query will return the story of the tallest building from the buildings table, ordered by height in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_95", "text": "\nThis query will select the story count of the tallest building from the buildings table and display it in descending order.", "metadata": {}}
{"_id": "gpt3_96", "text": "\nThis query retrieves the school names from the school table, sorted in alphabetical order.", "metadata": {}}
{"_id": "gpt3_97", "text": "\nThis query will return a list of school names in alphabetical order from the school table.", "metadata": {}}
{"_id": "gpt3_98", "text": "\nThis query will return a list of school names from the school table, sorted in alphabetical order.", "metadata": {}}
{"_id": "gpt3_99", "text": "\nThis query will select the school name from the school table and order the results alphabetically.", "metadata": {}}
{"_id": "gpt3_100", "text": "\nThis query will select the school name from the school table and order them alphabetically.", "metadata": {}}
{"_id": "gpt3_101", "text": "\nThis query counts the number of actors who have been in each musical. It returns the name of the musical and the count of actors associated with it.", "metadata": {}}
{"_id": "gpt3_102", "text": "\nThis query counts the number of actors associated with each musical.", "metadata": {}}
{"_id": "gpt3_103", "text": "\nThis query counts the number of actors associated with each musical.", "metadata": {}}
{"_id": "gpt3_104", "text": "\nThis query counts the number of actors associated with each musical.", "metadata": {}}
{"_id": "gpt3_105", "text": "\nThis query counts the number of actors in each musical. It does so by joining the actor and musical tables, grouping the results by musical ID, and counting the number of actors for each musical. The query also returns the name of each musical.", "metadata": {}}
{"_id": "gpt3_106", "text": "\nThis query returns the total number of people in the people table who are not body builders.", "metadata": {}}
{"_id": "gpt3_107", "text": "\nThis query returns the count of people in the people table who are not body builders.", "metadata": {}}
{"_id": "gpt3_108", "text": "\nThis query returns the number of people who are not body builders.", "metadata": {}}
{"_id": "gpt3_109", "text": "\nThis query returns the total number of people who are not body builders.", "metadata": {}}
{"_id": "gpt3_110", "text": "\nThis query counts the number of people in the people table who are not body builders.", "metadata": {}}
{"_id": "gpt3_111", "text": "\nThis query will return a list of all chip models in order of their launch year.", "metadata": {}}
{"_id": "gpt3_112", "text": "\nThis query will return a list of model names from the chip_model table, sorted in ascending order by their launch year.", "metadata": {}}
{"_id": "gpt3_113", "text": "\nThis query retrieves a list of model names from the chip_model table, sorted in ascending order by launch year.", "metadata": {}}
{"_id": "gpt3_114", "text": "\nThis query will return a list of model names from the chip_model table, sorted in ascending order by launch year.", "metadata": {}}
{"_id": "gpt3_115", "text": "\nThis query will return a list of chip models sorted in ascending order by their launch year.", "metadata": {}}
{"_id": "gpt3_116", "text": "\nThis query returns a list of all distinct years from movies that have a rating of 4 stars or higher, ordered by year.", "metadata": {}}
{"_id": "gpt3_117", "text": "\nThis query will select all the distinct years from the Movie table that have ratings of 4 stars or higher and order them by year.", "metadata": {}}
{"_id": "gpt3_118", "text": "\nThis query returns a list of all distinct years from movies that have a rating of 4 stars or higher, ordered by year.", "metadata": {}}
{"_id": "gpt3_119", "text": "\nThis query will select all distinct years from the Movie table (T1) that have ratings of 4 stars or higher in the Rating table (T2), and order the results by year.", "metadata": {}}
{"_id": "gpt3_120", "text": "\nThis query will return a list of distinct years from the Movie table, as long as the corresponding movie in the Rating table has a star rating of 4 or higher, ordered by the year in the Movie table.", "metadata": {}}
{"_id": "gpt3_121", "text": "\nThis query will select all distinct types of white grapes from the GRAPES table that have a score of more than 90 in the WINE table.", "metadata": {}}
{"_id": "gpt3_122", "text": "\nThis query selects all distinct white grapes from the GRAPES and WINE tables where the corresponding wine has a score greater than 90.", "metadata": {}}
{"_id": "gpt3_123", "text": "\nThis statement will select all distinct types of white grapes from the GRAPES table where the corresponding wine in the WINE table has a score greater than 90.", "metadata": {}}
{"_id": "gpt3_124", "text": "\nThis statement selects all distinct types of white grapes from the GRAPES and WINE tables where the wine made from that grape has a score greater than 90.", "metadata": {}}
{"_id": "gpt3_125", "text": "\nThis query selects all distinct types of white grapes from the GRAPES and WINE tables where the score of the wine made from the grape is greater than 90.", "metadata": {}}
{"_id": "gpt3_126", "text": "\nThis query returns the driverid and STOP of all pitstops with a duration less than the maximum duration of pitstops in race 841.", "metadata": {}}
{"_id": "gpt3_127", "text": "\nThis query will select the distinct driverid and stop from the pitstops table where the duration is less than the maximum duration of a pitstop in the raceid 841.", "metadata": {}}
{"_id": "gpt3_128", "text": "\nThis query returns the driverid and STOP from the pitstops table where the duration is less than the maximum duration of any pitstop in raceid 841.", "metadata": {}}
{"_id": "gpt3_129", "text": "\nThis query selects all unique driver IDs and stops from the pitstops table where the duration is less than the maximum duration of any pitstop in race 841.", "metadata": {}}
{"_id": "gpt3_130", "text": "\nThis query returns a list of distinct driver IDs and their corresponding pit stops from the pitstops table that have a duration less than the maximum duration of pit stops for race 841.", "metadata": {}}
{"_id": "gpt3_131", "text": "\nThis query will return the average age, maximum age, and sex of students in a group, grouped by sex. The result will be two rows, one for each sex, with the average age, maximum age, and sex of the students in", "metadata": {}}
{"_id": "gpt3_132", "text": "\nThis query will return the average age and maximum age for each sex in the student table. The result will be two rows, one for each sex, with the average age and maximum age for each.", "metadata": {}}
{"_id": "gpt3_133", "text": "\nThis query will calculate the average age, maximum age, and sex of each group of students in the student table, grouped by sex. The result will be two rows, one for each sex, containing the average age, maximum age, and sex", "metadata": {}}
{"_id": "gpt3_134", "text": "\nThis query will return the average age and maximum age of all students grouped by their sex. The result will be two rows, one for males and one for females, with the average age and maximum age for each group.", "metadata": {}}
{"_id": "gpt3_135", "text": "\nThis query will return the average age, maximum age, and sex of all students grouped by sex. The result will be two rows, one for males and one for females, with the average age, maximum age, and sex for each group.", "metadata": {}}
{"_id": "gpt3_136", "text": "\nThis query will return a list of service_id and event_details columns from the EVENTS table. It will show all the service_id and event_details associated with each service_id.", "metadata": {}}
{"_id": "gpt3_137", "text": "\nThis query will return all service_id and event_details columns from the EVENTS table.", "metadata": {}}
{"_id": "gpt3_138", "text": "\nThis query will return the service_id and event_details columns from the EVENTS table.", "metadata": {}}
{"_id": "gpt3_139", "text": "\nThis query returns the service_id and event_details columns from the EVENTS table.", "metadata": {}}
{"_id": "gpt3_140", "text": "\nThis query will return the service_id and event_details columns from the EVENTS table.", "metadata": {}}
{"_id": "gpt3_141", "text": "\nThis query returns the number of universities that do not have a basketball match associated with them.", "metadata": {}}
{"_id": "gpt3_142", "text": "\nThis query will count the number of universities in the university table that are not listed in the basketball_match table.", "metadata": {}}
{"_id": "gpt3_143", "text": "\nThis query will return the number of universities in the university table that are not associated with any basketball matches in the basketball_match table.", "metadata": {}}
{"_id": "gpt3_144", "text": "\nThis query counts the number of universities that are not in the basketball_match table.", "metadata": {}}
{"_id": "gpt3_145", "text": "\nThis query returns the total number of universities that are not participating in any basketball matches.", "metadata": {}}
{"_id": "gpt3_146", "text": "\nThis query will count the number of products associated with each manufacturer and group them by the manufacturer's name.", "metadata": {}}
{"_id": "gpt3_147", "text": "\nThis query will return a count of all products for each manufacturer, with the manufacturer name associated with each count.", "metadata": {}}
{"_id": "gpt3_148", "text": "\nThis query returns a count of the number of products associated with each manufacturer, grouped by the manufacturer's name.", "metadata": {}}
{"_id": "gpt3_149", "text": "\nThis query returns a count of the number of products associated with each manufacturer, grouped by manufacturer name.", "metadata": {}}
{"_id": "gpt3_150", "text": "\nThis query counts the number of products for each manufacturer and returns the manufacturer's name.", "metadata": {}}
{"_id": "gpt3_151", "text": "\nThis statement will select the country name and capital from the country table.", "metadata": {}}
{"_id": "gpt3_152", "text": "\nThis query will return a list of countries and their corresponding capitals from the country table.", "metadata": {}}
{"_id": "gpt3_153", "text": "\nThis query will return a list of countries and their respective capitals from the country table.", "metadata": {}}
{"_id": "gpt3_154", "text": "\nThis statement will select the country name and capital of all countries from a table.", "metadata": {}}
{"_id": "gpt3_155", "text": "\nThis query will return a list of countries and their corresponding capitals from the country table.", "metadata": {}}
{"_id": "gpt3_156", "text": "\nThis query will select the names of all dorms that are designated for female students.", "metadata": {}}
{"_id": "gpt3_157", "text": "\nThis query will select all dorm names from the dorm table where the gender is Female.", "metadata": {}}
{"_id": "gpt3_158", "text": "\nThis query will select all dorm names from the dorm table where the gender is Female.", "metadata": {}}
{"_id": "gpt3_159", "text": "\nThis query will select all dorm names from the dorm table where the gender is Female.", "metadata": {}}
{"_id": "gpt3_160", "text": "\nThis query would select all dorm names from the dorm table where the gender is female.", "metadata": {}}
{"_id": "gpt3_161", "text": "\nThis query returns the names of customers who have not purchased a Latte.", "metadata": {}}
{"_id": "gpt3_162", "text": "\nThis query will select all customer names from the customers table that have not placed an order for a Latte product.", "metadata": {}}
{"_id": "gpt3_163", "text": "\nThis query returns all customer names from the customers table that have not placed an order for a Latte product.", "metadata": {}}
{"_id": "gpt3_164", "text": "\nThis statement returns a list of customer names from the customers table that have not placed an order for a Latte.", "metadata": {}}
{"_id": "gpt3_165", "text": "\nThis query will return a list of customer names from the customers table that have not purchased a product with the product details of 'Latte'.", "metadata": {}}
{"_id": "gpt3_166", "text": "\nThis query selects the title, credits, and department name from the course table for any course that has more than one prerequisite.", "metadata": {}}
{"_id": "gpt3_167", "text": "\nThis query selects the title, credits, and department name of courses that have more than one prerequisite.", "metadata": {}}
{"_id": "gpt3_168", "text": "\nThis query selects the title, credits, and department name from the course table for courses that have more than one pre-requisite course.", "metadata": {}}
{"_id": "gpt3_169", "text": "\nThis query selects the title, credits, and department name of courses that have more than one prerequisite course.", "metadata": {}}
{"_id": "gpt3_170", "text": "\nThis query selects the title, credits, and department name from the course table for courses that have more than one prerequisite.", "metadata": {}}
{"_id": "gpt3_171", "text": "\nThis query selects all transaction IDs from the Financial_transactions table where the transaction amount is greater than the average transaction amount from the same table.", "metadata": {}}
{"_id": "gpt3_172", "text": "\nThis statement selects the transaction IDs from the \"Financial_transactions\" table where the transaction amount is greater than the average transaction amount of all transactions in the table.", "metadata": {}}
{"_id": "gpt3_173", "text": "\nThis statement selects all transaction ids from the Financial_transactions table where the transaction amount is greater than the average transaction amount from the same table.", "metadata": {}}
{"_id": "gpt3_174", "text": "\nThis query selects the transaction IDs from the Financial_transactions table where the transaction amount is greater than the average transaction amount for all transactions in the table.", "metadata": {}}
{"_id": "gpt3_175", "text": "\nThis query selects the transaction IDs from the Financial_transactions table where the transaction amount is greater than the average transaction amount from the same table.", "metadata": {}}
{"_id": "gpt3_176", "text": "\nThis query will return the names of all teams in a database.", "metadata": {}}
{"_id": "gpt3_177", "text": "\nThe SELECT statement is used to retrieve data from a table in a database. The statement in this example is used to select the Name column from the Team table.", "metadata": {}}
{"_id": "gpt3_178", "text": "\nThis query selects the name of a team from a database.", "metadata": {}}
{"_id": "gpt3_179", "text": "\nThis statement will select the names of all teams from a database table.", "metadata": {}}
{"_id": "gpt3_180", "text": "\nThis statement will return the names of all teams from the Team table.", "metadata": {}}
{"_id": "gpt3_181", "text": "\nThis query selects the names of the tourist attractions visited by both Vincent and Marcelle.", "metadata": {}}
{"_id": "gpt3_182", "text": "\nThis query selects the names of all tourist attractions visited by both Vincent and Marcelle.", "metadata": {}}
{"_id": "gpt3_183", "text": "\nThis query selects the names of the tourist attractions that both Vincent and Marcelle have visited.", "metadata": {}}
{"_id": "gpt3_184", "text": "\nThis query returns the names of the tourist attractions that both Vincent and Marcelle have visited.", "metadata": {}}
{"_id": "gpt3_185", "text": "\nThis query returns the names of the tourist attractions visited by both Vincent and Marcelle.", "metadata": {}}
{"_id": "gpt3_186", "text": "\nThis query selects the first name and department name of employees from the employees and departments tables. It joins the tables on the department_id column.", "metadata": {}}
{"_id": "gpt3_187", "text": "\nThis statement selects the first name and department name from the employees and departments tables, respectively, and joins the two tables on the department_id column.", "metadata": {}}
{"_id": "gpt3_188", "text": "\nThis query selects the first name and department name from the employees and departments tables, joined by the department_id.", "metadata": {}}
{"_id": "gpt3_189", "text": "\nThis statement selects the first name and department name of employees from the employees and departments tables, respectively, based on the matching department_id values.", "metadata": {}}
{"_id": "gpt3_190", "text": "\nThis SQL statement joins the employees and departments tables to select the first name and department name of each employee.", "metadata": {}}
{"_id": "gpt3_191", "text": "\nThis query selects the name of the user account with the lowest trust score from the useracct and trust tables, ordered by trust score and limited to one result.", "metadata": {}}
{"_id": "gpt3_192", "text": "\nThis query selects the name of the user with the lowest trust rating from the useracct and trust tables, ordered by trust rating and limited to one result.", "metadata": {}}
{"_id": "gpt3_193", "text": "\nThis query selects the name of the user with the lowest trust score from the useracct and trust tables, ordered by trust.", "metadata": {}}
{"_id": "gpt3_194", "text": "\nThis query selects the name of the user with the lowest trust score, from the useracct and trust tables, ordered by trust score.", "metadata": {}}
{"_id": "gpt3_195", "text": "\nThis query selects the name of the user with the lowest trust score from the useracct and trust tables, ordered by trust score in ascending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_196", "text": "\nThis query will select the official name of cities from the city table and order them by population in descending order.", "metadata": {}}
{"_id": "gpt3_197", "text": "\nThis query returns the official name of each city in a database, sorted in descending order by population.", "metadata": {}}
{"_id": "gpt3_198", "text": "\nThis query will return a list of the official names of cities, sorted in descending order by population.", "metadata": {}}
{"_id": "gpt3_199", "text": "\nThis query will select the official name of each city and order them by population in descending order.", "metadata": {}}
{"_id": "gpt3_200", "text": "\nThis query will select the official name of each city in a given table, ordered by population in descending order.", "metadata": {}}
{"_id": "gpt3_201", "text": "\nThis query will calculate the maximum, average, and minimum student GPA for each department code.", "metadata": {}}
{"_id": "gpt3_202", "text": "\nThis query will return the maximum, average, and minimum student GPA for each department code.", "metadata": {}}
{"_id": "gpt3_203", "text": "\nThis query will return the maximum, average, and minimum student GPAs for each department code.", "metadata": {}}
{"_id": "gpt3_204", "text": "\nThis query will return the maximum, average, and minimum student GPA for each department code.", "metadata": {}}
{"_id": "gpt3_205", "text": "\nThis query will return the maximum, average, and minimum student GPAs for each department code.", "metadata": {}}
{"_id": "gpt3_206", "text": "\nThis query returns the location code with the highest count from the Document_locations table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_207", "text": "\nThis query will return the location code for the document location that appears the most in the Document_locations table, ordered by count in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_208", "text": "\nThis query returns the location code with the most documents associated with it, ordered by the number of documents associated with it in descending order, with the highest number of documents being the first result.", "metadata": {}}
{"_id": "gpt3_209", "text": "\nThis query will return the location code of the Document_locations table that appears the most often in the table, in descending order.", "metadata": {}}
{"_id": "gpt3_210", "text": "\nThis query returns the location code that appears most often in the Document_locations table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_211", "text": "\nThe SELECT * FROM item statement is a SQL query that retrieves all columns and rows from the item table. This query can be used to view all information stored in the table, such as item name, price, quantity, and other details.", "metadata": {}}
{"_id": "gpt3_212", "text": "\nThis query retrieves all rows from the item table. It returns all columns and their corresponding values for each row in the item table.", "metadata": {}}
{"_id": "gpt3_213", "text": "\nThis statement is a SQL query that will select all data from the \"item\" table. It will return all columns and rows from the table.", "metadata": {}}
{"_id": "gpt3_214", "text": "\nThis statement is a SQL query that will select all records from the item table. It will return all columns and all rows from the table.", "metadata": {}}
{"_id": "gpt3_215", "text": "\nThe SELECT * FROM item statement is a SQL query that retrieves all of the columns and rows from the item table.", "metadata": {}}
{"_id": "gpt3_216", "text": "\nThis query will return the date of the performance with the highest attendance.", "metadata": {}}
{"_id": "gpt3_217", "text": "\nThis query returns the date of the performance with the highest attendance.", "metadata": {}}
{"_id": "gpt3_218", "text": "\nThis query returns the date of the performance with the highest attendance.", "metadata": {}}
{"_id": "gpt3_219", "text": "\nThis query will return the date of the performance with the highest attendance.", "metadata": {}}
{"_id": "gpt3_220", "text": "\nThis query will return the date of the performance with the highest attendance.", "metadata": {}}
{"_id": "gpt3_221", "text": "\nThis query returns the names of all dorms that do not have a TV Lounge amenity.", "metadata": {}}
{"_id": "gpt3_222", "text": "\nThis query will return the names of all dorms that do not have the amenity 'TV Lounge'.", "metadata": {}}
{"_id": "gpt3_223", "text": "\nThis query returns the names of all dorms that do not have a TV Lounge amenity.", "metadata": {}}
{"_id": "gpt3_224", "text": "\nThis SQL statement will select all dorm names from the dorm table that do not have a TV Lounge amenity.", "metadata": {}}
{"_id": "gpt3_225", "text": "\nThis query returns the names of all dorms that do not have a TV Lounge amenity.", "metadata": {}}
{"_id": "gpt3_226", "text": "\nThis query is asking for the average number of employees from departments ranked between 10 and 15.", "metadata": {}}
{"_id": "gpt3_227", "text": "\nThis query will return the average number of employees in departments ranked between 10 and 15.", "metadata": {}}
{"_id": "gpt3_228", "text": "\nThis query will calculate the average number of employees in departments with a ranking between 10 and 15.", "metadata": {}}
{"_id": "gpt3_229", "text": "\nThis query will return the average number of employees in all departments with a ranking between 10 and 15.", "metadata": {}}
{"_id": "gpt3_230", "text": "\nThis query will return the average number of employees in departments with a ranking between 10 and 15.", "metadata": {}}
{"_id": "gpt3_231", "text": "\nThis statement is used to select the names of projects assigned to scientists whose name contains \"Smith\". It does this by joining the assignedto, projects, and scientists tables on the project and scientist columns, respectively, and then filtering the results to only", "metadata": {}}
{"_id": "gpt3_232", "text": "\nThis statement selects the names of projects assigned to scientists with the last name Smith.", "metadata": {}}
{"_id": "gpt3_233", "text": "\nThis query selects the name of all projects assigned to scientists with the last name \"Smith\".", "metadata": {}}
{"_id": "gpt3_234", "text": "\nThis query selects the names of projects from the 'assignedto', 'projects', and 'scientists' tables where the name of the scientist is 'Smith'.", "metadata": {}}
{"_id": "gpt3_235", "text": "\nThis query retrieves the name of the projects assigned to scientists whose name contains \"Smith\".", "metadata": {}}
{"_id": "gpt3_236", "text": "\nThis query counts the number of classes in the Accounting department.", "metadata": {}}
{"_id": "gpt3_237", "text": "\nThis query counts the number of classes that are offered by the Accounting department.", "metadata": {}}
{"_id": "gpt3_238", "text": "\nThis query counts the number of classes in the Accounting department.", "metadata": {}}
{"_id": "gpt3_239", "text": "\nThis statement counts the number of classes that are part of the Accounting department.", "metadata": {}}
{"_id": "gpt3_240", "text": "\nThis query counts the number of classes in the Accounting department.", "metadata": {}}
{"_id": "gpt3_241", "text": "\nThis query will return the state in the USA with the highest number of invoices, along with the count of invoices for that state.", "metadata": {}}
{"_id": "gpt3_242", "text": "\nThis query will return the billing state with the highest number of invoices from customers in the USA, ordered by count in descending order.", "metadata": {}}
{"_id": "gpt3_243", "text": "\nThis query will select the billing state and count the number of invoices from the USA and order them by count in descending order, then limit the result to the top billing state.", "metadata": {}}
{"_id": "gpt3_244", "text": "\nThis query will select the billing state with the highest number of invoices from the USA and return the state and the count of invoices.", "metadata": {}}
{"_id": "gpt3_245", "text": "\nThis query returns the most frequently occurring billing state from invoices in the USA, ordered by count in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_246", "text": "\nThis query will return a count of the number of customers for each payment method code.", "metadata": {}}
{"_id": "gpt3_247", "text": "\nThis query will count the number of customers for each payment method code.", "metadata": {}}
{"_id": "gpt3_248", "text": "\nThis query will return a count of each payment method code used by customers, grouped by payment method code.", "metadata": {}}
{"_id": "gpt3_249", "text": "\nThis query will return a count of each payment method code for customers. It will group the results by payment method code and display the code and the total count for each code.", "metadata": {}}
{"_id": "gpt3_250", "text": "\nThis query will return the payment method code and the count of customers who use each payment method code.", "metadata": {}}
{"_id": "gpt3_251", "text": "\nThis statement will select the name, class, and rank of captains from a database.", "metadata": {}}
{"_id": "gpt3_252", "text": "\nThis query will select the name, class, and rank of all captains from a table.", "metadata": {}}
{"_id": "gpt3_253", "text": "\nThis query will return the name, class and rank of captains from a database.", "metadata": {}}
{"_id": "gpt3_254", "text": "\nThis query will select the name, class, and rank of all captains from a table.", "metadata": {}}
{"_id": "gpt3_255", "text": "\nThis SQL statement will select the name, class, and rank of all captains from a database.", "metadata": {}}
{"_id": "gpt3_256", "text": "\nThis query will return the names of all airports located in either Cuba or Argentina.", "metadata": {}}
{"_id": "gpt3_257", "text": "\nThis query selects the name of all airports from the airports table that are located in either Cuba or Argentina.", "metadata": {}}
{"_id": "gpt3_258", "text": "\nThis query will select the names of all airports located in either Cuba or Argentina.", "metadata": {}}
{"_id": "gpt3_259", "text": "\nThe above SQL query will select the name of airports from the airports table where the country is either Cuba or Argentina.", "metadata": {}}
{"_id": "gpt3_260", "text": "\nThis statement will select the name of all airports from the airports table that are located in either Cuba or Argentina.", "metadata": {}}
{"_id": "gpt3_261", "text": "\nThis query will return the theme from the farm_competition table for any farm competition hosted in a city with a population greater than 1000.", "metadata": {}}
{"_id": "gpt3_262", "text": "\nThis query will select the theme of any farm competition that is hosted in a city with a population greater than 1000.", "metadata": {}}
{"_id": "gpt3_263", "text": "\nThis query will select the theme of a farm competition from the city table where the population of the city is greater than 1000.", "metadata": {}}
{"_id": "gpt3_264", "text": "\nThis query will select the theme of a farm competition from the city table where the population is greater than 1000.", "metadata": {}}
{"_id": "gpt3_265", "text": "\nThis query will return the theme of any farm competition hosted in a city with a population greater than 1000.", "metadata": {}}
{"_id": "gpt3_266", "text": "\nThis query selects the color description with the least number of products from the products and ref_colors tables, ordered by count in ascending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_267", "text": "\nThis query will select the color description with the lowest count from the products and ref_colors tables, and return the result.", "metadata": {}}
{"_id": "gpt3_268", "text": "\nThis query selects the color description with the least number of products from the products and ref_colors tables, ordered by count in ascending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_269", "text": "\nThis query selects the color description with the least number of products from the products and ref_colors tables, ordering by the lowest count first and limiting the result to one row.", "metadata": {}}
{"_id": "gpt3_270", "text": "\nThis query returns the color description with the lowest count from the products and ref_colors tables, ordered in ascending order.", "metadata": {}}
{"_id": "gpt3_271", "text": "\nThis query will return the state, account type, and credit score of customers who have not taken any loans.", "metadata": {}}
{"_id": "gpt3_272", "text": "\nThis query will select the state, account type, and credit score of customers who have no loans.", "metadata": {}}
{"_id": "gpt3_273", "text": "\nThis query will return the state, account type, and credit score of customers who have not taken out any loans.", "metadata": {}}
{"_id": "gpt3_274", "text": "\nThis query will return the state, account type, and credit score of all customers who have not taken out any loans.", "metadata": {}}
{"_id": "gpt3_275", "text": "\nThis query will return the state, account type, and credit score of all customers who have not taken out any loans.", "metadata": {}}
{"_id": "gpt3_276", "text": "\nThis query returns the average age of students in the Tennis Club.", "metadata": {}}
{"_id": "gpt3_277", "text": "\nThis query returns the average age of all students who are members of the Tennis Club.", "metadata": {}}
{"_id": "gpt3_278", "text": "\nThis query will return the average age of all students who are members of the \"Tennis Club\".", "metadata": {}}
{"_id": "gpt3_279", "text": "\nThis query finds the average age of all students who are members of the Tennis Club.", "metadata": {}}
{"_id": "gpt3_280", "text": "\nThis query returns the average age of all students who are members of the Tennis Club.", "metadata": {}}
{"_id": "gpt3_281", "text": "\nThis query will return the count of records in the ship table grouped by the flag column. The result will be a table containing the flag value and the count of records with that flag value.", "metadata": {}}
{"_id": "gpt3_282", "text": "\nThis query will count the number of rows in the 'ship' table that have the same value for the 'flag' column, and group the results by the value of the 'flag' column.", "metadata": {}}
{"_id": "gpt3_283", "text": "\nThis query will return the number of ships (count(*)) grouped by the flag they are registered under.", "metadata": {}}
{"_id": "gpt3_284", "text": "\nThis query will return a count of the number of ships for each flag, grouped by flag.", "metadata": {}}
{"_id": "gpt3_285", "text": "\nThis query will return the total number of ships for each flag, grouped by the flag.", "metadata": {}}
{"_id": "gpt3_286", "text": "\nThis query returns the ID of the trip with the shortest duration from the \"trip\" table, ordered by duration in ascending order.", "metadata": {}}
{"_id": "gpt3_287", "text": "\nThis statement will select the id of the trip with the shortest duration from the trip table, and return the first result.", "metadata": {}}
{"_id": "gpt3_288", "text": "\nThis query will return the id of the trip with the shortest duration from the trip table.", "metadata": {}}
{"_id": "gpt3_289", "text": "\nThis query returns the ID of the trip with the shortest duration from the trip table, ordered from least to greatest.", "metadata": {}}
{"_id": "gpt3_290", "text": "\nThis query selects the ID of the trip with the shortest duration from the trip table, and returns the first row of the result set, which is the trip with the shortest duration.", "metadata": {}}
{"_id": "gpt3_291", "text": "\nThis query selects the account name, account ID, and the count of all financial transactions from the Financial Transactions table and the Accounts table, grouped by account ID.", "metadata": {}}
{"_id": "gpt3_292", "text": "\nThis query selects the account name, account ID, and the count of financial transactions for each account from the tables Financial_transactions and Accounts, and groups the results by account ID.", "metadata": {}}
{"_id": "gpt3_293", "text": "\nThis query selects the account name, account id, and count of financial transactions from the Financial_transactions and Accounts tables and groups the results by account id.", "metadata": {}}
{"_id": "gpt3_294", "text": "\nThis query will select the account name, account ID, and count of the number of financial transactions associated with each account from the Financial_transactions and Accounts tables. It will group the results by the account ID.", "metadata": {}}
{"_id": "gpt3_295", "text": "\nThis query will return a list of account names and their associated account IDs, along with the total number of financial transactions associated with each account.", "metadata": {}}
{"_id": "gpt3_296", "text": "\nThis query selects the email address of the party associated with the party form that has the most entries.", "metadata": {}}
{"_id": "gpt3_297", "text": "\nThis query selects the email associated with the party that has the most forms associated with it.", "metadata": {}}
{"_id": "gpt3_298", "text": "\nThis query selects the email address associated with the party that has submitted the most form entries.", "metadata": {}}
{"_id": "gpt3_299", "text": "\nThis query will select the email address from the parties table associated with the form that appears most frequently in the party_forms table.", "metadata": {}}
{"_id": "gpt3_300", "text": "\nThis query selects the email address associated with the party that has filled out the most party forms.", "metadata": {}}
{"_id": "gpt3_301", "text": "\nThis query will select the first and last name of the student who is the President of the Bootup Baltimore club.", "metadata": {}}
{"_id": "gpt3_302", "text": "\nThis query will select the first and last name of the president of the Bootup Baltimore club.", "metadata": {}}
{"_id": "gpt3_303", "text": "\nThis query will select the first and last names of the president of the Bootup Baltimore club.", "metadata": {}}
{"_id": "gpt3_304", "text": "\nThis query will select the first and last name of the student who is the president of the club \"Bootup Baltimore\".", "metadata": {}}
{"_id": "gpt3_305", "text": "\nThis statement will select the first and last name of the student who is the president of the club \"Bootup Baltimore\".", "metadata": {}}
{"_id": "gpt3_306", "text": "\nThis query will return the composer of the track \"Fast As a Shark\" from the tracks table.", "metadata": {}}
{"_id": "gpt3_307", "text": "\nThis query will return the composer of the track \"Fast As a Shark\" from the Tracks table.", "metadata": {}}
{"_id": "gpt3_308", "text": "\nThis query will return the composer of the song \"Fast As a Shark\" from the tracks table.", "metadata": {}}
{"_id": "gpt3_309", "text": "\nThis query will return the name of the composer of the song \"Fast As a Shark\".", "metadata": {}}
{"_id": "gpt3_310", "text": "\nThis query will return the composer of the song \"Fast As a Shark\" from the Tracks table.", "metadata": {}}
{"_id": "gpt3_311", "text": "\nThis query will select the Student ID from the Student table that are advised by a professor in the Faculty table.", "metadata": {}}
{"_id": "gpt3_312", "text": "\nThis query will select all student IDs from the Student table whose advisor is a professor in the Faculty table.", "metadata": {}}
{"_id": "gpt3_313", "text": "\nThis query will select all student IDs from the Student table whose advisor is a professor in the Faculty table.", "metadata": {}}
{"_id": "gpt3_314", "text": "\nThis query will select all student IDs from the Student table that have a Faculty advisor with a rank of \"Professor\".", "metadata": {}}
{"_id": "gpt3_315", "text": "\nThis query selects the student IDs of all students who have a professor as their advisor.", "metadata": {}}
{"_id": "gpt3_316", "text": "\nThis SQL statement will select the open year from the branch table and group the results by the open year, returning only those results that have a count of two or more.", "metadata": {}}
{"_id": "gpt3_317", "text": "\nThis SQL statement selects the open year of each branch and groups them together based on the open year. It then filters the results to only include those groups that have a count of two or more.", "metadata": {}}
{"_id": "gpt3_318", "text": "\nThis SQL statement will select the open year for each branch and group them by open year, only selecting those that have at least two branches with the same open year.", "metadata": {}}
{"_id": "gpt3_319", "text": "\nThis query will return all the open years from the branch table where there are at least two branches that opened in that year.", "metadata": {}}
{"_id": "gpt3_320", "text": "\nThis SQL statement will return a list of years in which two or more branches were opened.", "metadata": {}}
{"_id": "gpt3_321", "text": "\nThis query will select the last name and age of any students who have both a milk and cat allergy.", "metadata": {}}
{"_id": "gpt3_322", "text": "\nThis query will select the last name and age of students who have both a milk and cat allergy.", "metadata": {}}
{"_id": "gpt3_323", "text": "\nThis query selects the last name and age of students who have both a milk and cat allergy.", "metadata": {}}
{"_id": "gpt3_324", "text": "\nThis query selects the last name and age of all students who have both a milk and cat allergy.", "metadata": {}}
{"_id": "gpt3_325", "text": "\nThis query will select the last name and age of students who have both a milk and cat allergy.", "metadata": {}}
{"_id": "gpt3_326", "text": "\nThis query will return the StuID of all students who have Advisor 1121.", "metadata": {}}
{"_id": "gpt3_327", "text": "\nThis query will return the Student IDs of all students who have Advisor 1121.", "metadata": {}}
{"_id": "gpt3_328", "text": "\nThis query will return the StuID of all students who have an advisor with ID 1121.", "metadata": {}}
{"_id": "gpt3_329", "text": "\nThis query will return a list of all student IDs whose advisor is 1121.", "metadata": {}}
{"_id": "gpt3_330", "text": "\nThis query selects the student ID of all students who have an advisor with the ID 1121.", "metadata": {}}
{"_id": "gpt3_331", "text": "\nThis query returns the ids of all stations that have a latitude greater than 37.4 and have fewer than 7 bikes available.", "metadata": {}}
{"_id": "gpt3_332", "text": "\nThis query returns the IDs of all stations with a latitude greater than 37.4, excluding those stations with fewer than 7 bikes available.", "metadata": {}}
{"_id": "gpt3_333", "text": "\nThis query will return the IDs of all stations with a latitude greater than 37.4 that do not have at least 7 bikes available.", "metadata": {}}
{"_id": "gpt3_334", "text": "\nThis query returns the IDs of all stations with a latitude above 37.4 degrees that have fewer than 7 bikes available.", "metadata": {}}
{"_id": "gpt3_335", "text": "\nThis query will return the IDs of all stations whose latitude is greater than 37.4, but which have fewer than seven bikes available.", "metadata": {}}
{"_id": "gpt3_336", "text": "\nThis query will return the number of distinct room types in the room table.", "metadata": {}}
{"_id": "gpt3_337", "text": "\nThis query would count the number of distinct room types in the room table.", "metadata": {}}
{"_id": "gpt3_338", "text": "\nThis query will count the number of distinct room types in the room table.", "metadata": {}}
{"_id": "gpt3_339", "text": "\nThis query would return the number of distinct room types in the room table.", "metadata": {}}
{"_id": "gpt3_340", "text": "\nThis query will return the number of distinct room types in the room table.", "metadata": {}}
{"_id": "gpt3_341", "text": "\nThis query will return the IDs of all stations with a latitude greater than 37.4 that have fewer than 7 bikes available.", "metadata": {}}
{"_id": "gpt3_342", "text": "\nThis query will return the IDs of all stations with a latitude greater than 37.4 degrees that have fewer than 7 bikes available.", "metadata": {}}
{"_id": "gpt3_343", "text": "\nThis query will return the IDs of all stations with a latitude greater than 37.4 that have fewer than seven available bikes.", "metadata": {}}
{"_id": "gpt3_344", "text": "\nThis query retrieves the IDs of all stations that have a latitude greater than 37.4 and do not have at least 7 bikes available.", "metadata": {}}
{"_id": "gpt3_345", "text": "\nThis query returns the IDs of all stations with a latitude greater than 37.4 that have fewer than 7 bikes available.", "metadata": {}}
{"_id": "gpt3_346", "text": "\nThe query will return the city and state of all banks with the name \"Morningside\".", "metadata": {}}
{"_id": "gpt3_347", "text": "\nThis query will return the city and state associated with the bank named 'morningside'.", "metadata": {}}
{"_id": "gpt3_348", "text": "\nThis query will return the city and state of all banks named Morningside.", "metadata": {}}
{"_id": "gpt3_349", "text": "\nThe query will return the city and state of the bank named \"Morningside\", if it exists.", "metadata": {}}
{"_id": "gpt3_350", "text": "\nThe query will select the city and state from the bank table where the bank name is 'morningside'.", "metadata": {}}
{"_id": "gpt3_351", "text": "\nThis statement selects the project details from the Projects table (T1) that have outcomes in the Project_outcomes table (T2) that have a research outcome in the Research_outcomes table (T3) with a description containing the", "metadata": {}}
{"_id": "gpt3_352", "text": "\nThis statement selects the project details from the Projects table (T1) that have project outcomes (T2) that are associated with research outcomes (T3) where the outcome description contains the word \"Published\".", "metadata": {}}
{"_id": "gpt3_353", "text": "\nThis query selects the project details from the Projects table for all projects that have research outcomes that include the word \"Published\".", "metadata": {}}
{"_id": "gpt3_354", "text": "\nThis query selects project details from the Projects table, joined with the Project_outcomes table and Research_outcomes table, where the Research_outcomes table has an outcome description containing the word 'Published'.", "metadata": {}}
{"_id": "gpt3_355", "text": "\nThis query selects project details from the Projects table that have associated project outcomes in the Project_outcomes table with research outcomes in the Research_outcomes table that have outcome descriptions containing the word \"Published\".", "metadata": {}}
{"_id": "gpt3_356", "text": "\nThis query will select the phone number of the department located in room 268.", "metadata": {}}
{"_id": "gpt3_357", "text": "\nThis query will return the phone number of the department located in Room 268.", "metadata": {}}
{"_id": "gpt3_358", "text": "\nThis query will return the phone number of the department located in Room 268.", "metadata": {}}
{"_id": "gpt3_359", "text": "\nThis query will select the phone number of the department located in Room 268.", "metadata": {}}
{"_id": "gpt3_360", "text": "\nThis query will return the phone number of the department located in Room 268.", "metadata": {}}
{"_id": "gpt3_361", "text": "\nThis statement selects the color code and color description for the product named \"chervil\" from the tables products and ref_colors, where the color code in the products table matches the color code in the ref_colors table.", "metadata": {}}
{"_id": "gpt3_362", "text": "\nThis statement selects the color code and color description of a product named \"chervil\" from two tables, products and ref_colors. It joins the two tables on the color code and filters the results to only include products named \"chervil", "metadata": {}}
{"_id": "gpt3_363", "text": "\nThis query selects the color code and color description from the products and ref_colors tables for the product named \"chervil\".", "metadata": {}}
{"_id": "gpt3_364", "text": "\nThis query selects the color code and color description from two tables, products and ref_colors, for a product named \"chervil\". The color code from the products table is matched to the color code from the ref_colors table to", "metadata": {}}
{"_id": "gpt3_365", "text": "\nThis query selects the color code and color description from the products and ref_colors tables for the product \"chervil\".", "metadata": {}}
{"_id": "gpt3_366", "text": "\nThis query returns the name and trade name of all medicines that have been approved by the FDA.", "metadata": {}}
{"_id": "gpt3_367", "text": "\nThis query will return the name and trade name of all medicines that have been approved by the FDA.", "metadata": {}}
{"_id": "gpt3_368", "text": "\nThis query will select the name and trade name of medicines that have been approved by the FDA.", "metadata": {}}
{"_id": "gpt3_369", "text": "\nThis query will select the name and trade name of medicines that have been approved by the FDA.", "metadata": {}}
{"_id": "gpt3_370", "text": "\nThis query will return the name and trade name of all medicines that are FDA approved.", "metadata": {}}
{"_id": "gpt3_371", "text": "\nThis query will select the dorm name from the dorm table where the student capacity is greater than 300.", "metadata": {}}
{"_id": "gpt3_372", "text": "\nThis query will return the names of all dorms with a student capacity greater than 300.", "metadata": {}}
{"_id": "gpt3_373", "text": "\nThis query will return the names of all dorms that have a student capacity greater than 300.", "metadata": {}}
{"_id": "gpt3_374", "text": "\nThis query will return the names of all dorms that have a student capacity greater than 300.", "metadata": {}}
{"_id": "gpt3_375", "text": "\nThis query will select the name of any dorms with a student capacity of more than 300.", "metadata": {}}
{"_id": "gpt3_376", "text": "\nThis query will return the investor with the most investments in the entrepreneur table, ordered by the number of investments they have made.", "metadata": {}}
{"_id": "gpt3_377", "text": "\nThis query will return the investor with the most entries in the entrepreneur table, ordered by the number of entries from highest to lowest, with a limit of one.", "metadata": {}}
{"_id": "gpt3_378", "text": "\nThis query returns the investor with the most investments in the entrepreneur table, ordering the results by the count of investments in descending order and limiting the results to one.", "metadata": {}}
{"_id": "gpt3_379", "text": "\nThis query will return the investor with the most investments in entrepreneurs, ordered by the number of investments they have made.", "metadata": {}}
{"_id": "gpt3_380", "text": "\nThis query returns the investor with the most investments, by counting the number of investments each investor has made, ordering them in descending order, and limiting the result to the top investor.", "metadata": {}}
{"_id": "gpt3_381", "text": "\nThe SELECT DISTINCT statement retrieves all unique values of the specified column (in this case, forename) from the drivers table and orders them in ascending order.", "metadata": {}}
{"_id": "gpt3_382", "text": "\nThe SELECT DISTINCT forename FROM drivers ORDER BY forename ASC statement retrieves all the unique forenames of drivers from the drivers table, and orders them in ascending alphabetical order.", "metadata": {}}
{"_id": "gpt3_383", "text": "\nThis query will select and order all the distinct forenames from the drivers table in alphabetical order.", "metadata": {}}
{"_id": "gpt3_384", "text": "\nThis query will select all distinct forenames from the drivers table and order them in alphabetical order.", "metadata": {}}
{"_id": "gpt3_385", "text": "\nThis SQL statement selects all distinct forenames from the drivers table and orders them in ascending alphabetical order.", "metadata": {}}
{"_id": "gpt3_386", "text": "\nThis query selects the first name of each person in the people table, and orders them alphabetically.", "metadata": {}}
{"_id": "gpt3_387", "text": "\nThis query retrieves the first name of all people in a table, ordered alphabetically.", "metadata": {}}
{"_id": "gpt3_388", "text": "\nThis query will select all first names from the people table and order them alphabetically.", "metadata": {}}
{"_id": "gpt3_389", "text": "\nThis query selects the first names of all people in a table and orders them alphabetically.", "metadata": {}}
{"_id": "gpt3_390", "text": "\nThis query will return a list of all the first names from the people table, ordered alphabetically.", "metadata": {}}
{"_id": "gpt3_391", "text": "\nThis query will count the number of books in each category from the book_club table and group the results by category.", "metadata": {}}
{"_id": "gpt3_392", "text": "\nThis SQL statement will return the number of books in each category from the book_club table. The result will be a list of categories and the count of books in each category.", "metadata": {}}
{"_id": "gpt3_393", "text": "\nThis query will count the number of books in each category from the book_club table.", "metadata": {}}
{"_id": "gpt3_394", "text": "\nThis query returns the number of books in each category from the book_club table.", "metadata": {}}
{"_id": "gpt3_395", "text": "\nThis query will return a count of books in each category in the book_club table.", "metadata": {}}
{"_id": "gpt3_396", "text": "\nThis query selects the first and last name of the three players with the most awards, along with their player ID, from the player and player_award tables. It does this by joining the two tables on the player_id column and grouping", "metadata": {}}
{"_id": "gpt3_397", "text": "\nThis query selects the first and last names, as well as the player IDs, of the top three players with the most awards. It does this by joining the player and player_award tables, grouping by the player ID, and ordering by", "metadata": {}}
{"_id": "gpt3_398", "text": "\nThis query selects the first and last name, as well as the player ID, of the top three players with the most awards, by joining the player and player_award tables, grouping by player ID and ordering by the count of awards,", "metadata": {}}
{"_id": "gpt3_399", "text": "\nThis query selects the first and last name, as well as the player ID, of the top 3 players with the most awards, by joining the player and player_award tables and grouping by player ID. The results are then ordered by the", "metadata": {}}
{"_id": "gpt3_400", "text": "\nThis query selects the first and last name, as well as the player ID of the top three players with the most awards, from the player and player_award tables. It does this by joining the two tables on the player_id,", "metadata": {}}
{"_id": "gpt3_401", "text": "\nThis query will select the latitude, longitude, and city of the station with the shortest trip duration, as determined by joining the station and trip tables and ordering by duration. The result will be limited to one record.", "metadata": {}}
{"_id": "gpt3_402", "text": "\nThis query selects the latitude, longitude, and city of the station with the shortest trip duration from the station and trip tables.", "metadata": {}}
{"_id": "gpt3_403", "text": "\nThis SQL query selects the latitude, longitude, and city of the station with the shortest duration from the trip table, ordered by duration and limited to one result.", "metadata": {}}
{"_id": "gpt3_404", "text": "\nThis query selects the latitude, longitude, and city of the station with the shortest trip duration.", "metadata": {}}
{"_id": "gpt3_405", "text": "\nThis query selects the latitude, longitude, and city of the station with the shortest trip duration from the stations and trips tables.", "metadata": {}}
{"_id": "gpt3_406", "text": "\nThis query returns the average price range of hotels with a 5-star rating and that allow pets.", "metadata": {}}
{"_id": "gpt3_407", "text": "\nThis query will return the average price range of all hotels with a 5-star rating and that allow pets.", "metadata": {}}
{"_id": "gpt3_408", "text": "\nThis query will return the average price range of all 5-star hotels that allow pets.", "metadata": {}}
{"_id": "gpt3_409", "text": "\nThis query will return the average price range of all hotels with a 5-star rating and that allow pets.", "metadata": {}}
{"_id": "gpt3_410", "text": "\nThe average price range of 5-star hotels that allow pets is ____.", "metadata": {}}
{"_id": "gpt3_411", "text": "\nThis query will retrieve the hardware model name and company name of all phones that have a graphics mode specified in the screen_mode table.", "metadata": {}}
{"_id": "gpt3_412", "text": "\nThis query will select the hardware model name and company name from the phone table for all phones that have a graphics mode that matches the type of \"Graphics\" from the screen mode table.", "metadata": {}}
{"_id": "gpt3_413", "text": "\nThis query will select the hardware model name and company name from the phone table for phones that have a graphics mode matching the type \"Graphics\" from the screen_mode table.", "metadata": {}}
{"_id": "gpt3_414", "text": "\nThis query will select the hardware model name and company name from the phone table that have a screen mode that matches the type \"Graphics\" from the screen mode table.", "metadata": {}}
{"_id": "gpt3_415", "text": "\nThis query will select the hardware model name and company name from the phone table for any phones that have a graphics mode that matches the type \"Graphics\" from the screen_mode table.", "metadata": {}}
{"_id": "gpt3_416", "text": "\nThis query retrieves the customer phone numbers for the policy type with the highest number of available policies.", "metadata": {}}
{"_id": "gpt3_417", "text": "\nThis query retrieves the phone numbers of customers who have purchased the most popular policy type.", "metadata": {}}
{"_id": "gpt3_418", "text": "\nThis query will select the customer phone numbers from the available policies table for the policy type code with the highest count.", "metadata": {}}
{"_id": "gpt3_419", "text": "\nThis query selects the phone numbers of customers who have the most common policy type code from the available policies table.", "metadata": {}}
{"_id": "gpt3_420", "text": "\nThis query returns the customer phone numbers from the available policies table for the policy type code that appears the most often.", "metadata": {}}
{"_id": "gpt3_421", "text": "\nThis query selects the first names and support representative IDs of customers who have at least 10 customers associated with their support representative. It does this by joining the Customer and Employee tables on the SupportRepId field, then grouping the results by SupportRepId", "metadata": {}}
{"_id": "gpt3_422", "text": "\nThis query returns the first name and support rep ID of customers who have 10 or more customers associated with their support rep.", "metadata": {}}
{"_id": "gpt3_423", "text": "\nThis query selects the first name and SupportRepId of customers from the CUSTOMER table, joining it with the EMPLOYEE table on the SupportRepId field. The results are then grouped by the SupportRepId field and filtered", "metadata": {}}
{"_id": "gpt3_424", "text": "\nThis query selects the first name and SupportRepId of customers from the customer table and joins it with the employee table to group them by the SupportRepId and having a count of 10 or more.", "metadata": {}}
{"_id": "gpt3_425", "text": "\nThis statement selects the first name and SupportRepId of customers who have been assigned to an employee with at least 10 customers.", "metadata": {}}
{"_id": "gpt3_426", "text": "\nThis query selects the driverid and surname of the driver with the most race wins, ordered by the number of wins and limited to one result.", "metadata": {}}
{"_id": "gpt3_427", "text": "\nThis query selects the driverid and surname of the driver who has won the most races, by joining the drivers, results, and races tables and grouping by driverid, ordering by the count of races won, and limiting the result to one.", "metadata": {}}
{"_id": "gpt3_428", "text": "\nThis query selects the driverid and surname of the driver with the highest number of race results, from the drivers, results, and races tables. It groups the results by the driverid, and orders them by the number of results in descending order", "metadata": {}}
{"_id": "gpt3_429", "text": "\nThis query selects the driverid and surname of the driver who has the most race wins, as determined by counting the number of races they have won. It does this by joining the drivers, results, and races tables, and then grouping and ordering", "metadata": {}}
{"_id": "gpt3_430", "text": "\nThis query selects the driverid and surname of the driver who has participated in the most races, ordered by the number of races they have participated in, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_431", "text": "\nThis query will return all job titles from the jobs table where the minimum salary is greater than 9000.", "metadata": {}}
{"_id": "gpt3_432", "text": "\nThis query will return all job titles from the jobs table that have a minimum salary greater than 9000.", "metadata": {}}
{"_id": "gpt3_433", "text": "\nThis query will return all job titles from the jobs table where the minimum salary is greater than $9,000.", "metadata": {}}
{"_id": "gpt3_434", "text": "\nThis query will return the job titles of all jobs with a minimum salary greater than 9000.", "metadata": {}}
{"_id": "gpt3_435", "text": "\nThis query will return a list of job titles from the jobs table where the minimum salary is greater than 9000.", "metadata": {}}
{"_id": "gpt3_436", "text": "\nThis query will return the employee IDs of all employees who are not authorized to destroy documents.", "metadata": {}}
{"_id": "gpt3_437", "text": "\nThis query will return a list of employee IDs from the Employees table that are not present in the Documents_to_be_destroyed table.", "metadata": {}}
{"_id": "gpt3_438", "text": "\nThis query would return a list of employee IDs from the Employees table that are not listed as Destruction Authorised by Employee ID in the Documents to be Destroyed table.", "metadata": {}}
{"_id": "gpt3_439", "text": "\nThis query returns the employee IDs of all employees who are not authorized to destroy documents.", "metadata": {}}
{"_id": "gpt3_440", "text": "\nThis statement will return a list of employee IDs from the Employees table that do not match any Destruction Authorised by Employee IDs from the Documents to be Destroyed table.", "metadata": {}}
{"_id": "gpt3_441", "text": "\nThis query will return the song names from the volume table that were nominated in the music festival.", "metadata": {}}
{"_id": "gpt3_442", "text": "\nThis query will select the song from the volume table for all entries in the music festival table that have a result of \"Nominated\".", "metadata": {}}
{"_id": "gpt3_443", "text": "\nThis query will return the Song from the Volume table (T2) that is associated with the Volume_ID in the music_festival table (T1) where the Result is \"Nominated\".", "metadata": {}}
{"_id": "gpt3_444", "text": "\nThis query will select all songs from the music festival table where the result is \"Nominated\" and join it with the volume table to get the corresponding song.", "metadata": {}}
{"_id": "gpt3_445", "text": "\nThis query will return the song names from the volume table for all music festivals that were nominated.", "metadata": {}}
{"_id": "gpt3_446", "text": "\nThis query retrieves the customer last name, customer ID, and phone number of the customer with the highest number of orders.", "metadata": {}}
{"_id": "gpt3_447", "text": "\nThis query selects the customer last name, customer ID, and phone number of the customer that has made the most orders, as determined by counting the number of orders per customer, and then ordering them in descending order. The result is limited to the", "metadata": {}}
{"_id": "gpt3_448", "text": "\nThis query selects the customer last name, customer ID, and phone number from the Orders and Customers tables and groups them by the customer ID. It then orders the results by the count of the customer ID and limits the results to the top result.", "metadata": {}}
{"_id": "gpt3_449", "text": "\nThis query selects the customer last name, customer ID, and phone number of the customer who has placed the most orders. It joins the Orders and Customers tables on the customer ID and groups by customer ID, ordering the results by count in descending order", "metadata": {}}
{"_id": "gpt3_450", "text": "\nThis query selects the customer last name, customer ID, and phone number of the customer who has placed the most orders, by joining the Orders and Customers tables and grouping the results by customer ID and ordering them by count. The top result is then", "metadata": {}}
{"_id": "gpt3_451", "text": "\nThis query will return the creation date, name, and budget in billions for all departments.", "metadata": {}}
{"_id": "gpt3_452", "text": "\nThis query selects the creation date, name, and budget in billions from the department table.", "metadata": {}}
{"_id": "gpt3_453", "text": "\nThis query selects the creation date, name, and budget in billions from the department table.", "metadata": {}}
{"_id": "gpt3_454", "text": "\nThis query will return the creation date, name and budget in billions for all departments.", "metadata": {}}
{"_id": "gpt3_455", "text": "\nThis query selects the creation date, name, and budget in billions of dollars from the department table.", "metadata": {}}
{"_id": "gpt3_456", "text": "\nThis query selects the titles of courses that have two prerequisites.", "metadata": {}}
{"_id": "gpt3_457", "text": "\nThis query selects the titles of courses that have exactly two prerequisites.", "metadata": {}}
{"_id": "gpt3_458", "text": "\nThis query will select the title of each course that has two prerequisites.", "metadata": {}}
{"_id": "gpt3_459", "text": "\nThis query returns the titles of courses that have exactly two prerequisites.", "metadata": {}}
{"_id": "gpt3_460", "text": "\nThis query returns the title of courses that have exactly two prerequisites.", "metadata": {}}
{"_id": "gpt3_461", "text": "\nThis query returns the names of services that are not associated with any party.", "metadata": {}}
{"_id": "gpt3_462", "text": "\nThis query returns all service names from the 'services' table that are not linked to any party in the 'party_services' table.", "metadata": {}}
{"_id": "gpt3_463", "text": "\nThis query returns the service names from the services table that are not associated with any party in the party_services table.", "metadata": {}}
{"_id": "gpt3_464", "text": "\nThis query returns a list of services from the services table that do not appear in the party_services table.", "metadata": {}}
{"_id": "gpt3_465", "text": "\nThis query returns a list of services from the services table that are not associated with any party in the party_services table.", "metadata": {}}
{"_id": "gpt3_466", "text": "\nThis query returns the names of aircraft that have more than 5 certificates and a distance greater than 5000.", "metadata": {}}
{"_id": "gpt3_467", "text": "\nThis query will select the names of aircrafts from the Aircraft table that have a distance greater than 5000 miles and have at least 5 certificates in the Certificate table, ordered by the number of certificates.", "metadata": {}}
{"_id": "gpt3_468", "text": "\nThis query selects the name of the aircraft from the Aircraft table that have a distance greater than 5000 and have at least 5 certificates associated with them from the Certificate table, ordered by the number of certificates.", "metadata": {}}
{"_id": "gpt3_469", "text": "\nThis query will select the names of aircraft from the Aircraft table that have a distance greater than 5000 and have at least 5 Certificates associated with them, ordered by the number of Certificates.", "metadata": {}}
{"_id": "gpt3_470", "text": "\nThis query will select the name of an aircraft from the Aircraft table whose distance is greater than 5000 and has at least 5 certificates from the Certificate table, ordered by the count of certificates.", "metadata": {}}
{"_id": "gpt3_471", "text": "\nThis query will select the first name of any student who is over the age of 22 from the STUDENT table.", "metadata": {}}
{"_id": "gpt3_472", "text": "\nThis query will select the first name of all students from the STUDENT table who are over the age of 22.", "metadata": {}}
{"_id": "gpt3_473", "text": "\nThis query will select all of the first names from the STUDENT table where the age is greater than 22.", "metadata": {}}
{"_id": "gpt3_474", "text": "\nThis statement selects the first name of all students who are over 22 years of age from the STUDENT table.", "metadata": {}}
{"_id": "gpt3_475", "text": "\nThis query will select the first name of all students from the STUDENT table who are older than 22 years old.", "metadata": {}}
{"_id": "gpt3_476", "text": "\nThis query will return the enrollment numbers of all schools that are not Catholic.", "metadata": {}}
{"_id": "gpt3_477", "text": "\nThis query will return all enrollment numbers from schools that are not Catholic.", "metadata": {}}
{"_id": "gpt3_478", "text": "\nThis query will return the enrollment numbers of all schools that are not Catholic.", "metadata": {}}
{"_id": "gpt3_479", "text": "\nThis query will return the enrollment numbers from all schools that are not Catholic.", "metadata": {}}
{"_id": "gpt3_480", "text": "\nThis query will return the enrollment numbers of all schools that are not Catholic.", "metadata": {}}
{"_id": "gpt3_481", "text": "\nThis query selects the country and state/province/county from the Addresses table for the staff member Janessa Sawayn.", "metadata": {}}
{"_id": "gpt3_482", "text": "\nThis query will select the country and state/province/county from the Addresses table for the staff member Janessa Sawayn, based on the address ID associated with her in the Staff table.", "metadata": {}}
{"_id": "gpt3_483", "text": "\nThis query selects the country and state/province/county from the Addresses table for the staff member with the first name Janessa and last name Sawayn.", "metadata": {}}
{"_id": "gpt3_484", "text": "\nThis query selects the country and state/province/county of the address associated with the staff member Janessa Sawayn.", "metadata": {}}
{"_id": "gpt3_485", "text": "\nThis query retrieves the country and state/province/county of the address associated with the staff member Janessa Sawayn.", "metadata": {}}
{"_id": "gpt3_486", "text": "\nThis statement selects the name and salary of all instructors who are advisors to students in the Math department.", "metadata": {}}
{"_id": "gpt3_487", "text": "\nThis query selects the name and salary of instructors who are advisors for students in the Math department.", "metadata": {}}
{"_id": "gpt3_488", "text": "\nThis query will select the name and salary of all instructors who are advisors for students in the Math department.", "metadata": {}}
{"_id": "gpt3_489", "text": "\nThis query selects the name and salary of instructors who are advisors to students in the Math department.", "metadata": {}}
{"_id": "gpt3_490", "text": "\nThis query selects the name and salary of instructors who are advisors to students in the Math department.", "metadata": {}}
{"_id": "gpt3_491", "text": "\nThis query selects the last names of customers who have had fewer than 20 support requests, based on the SupportRepId of the customer and the EmployeeId of the employee.", "metadata": {}}
{"_id": "gpt3_492", "text": "\nThis query will select the last names of customers who are associated with an employee who has 20 or fewer customers.", "metadata": {}}
{"_id": "gpt3_493", "text": "\nThis statement selects the last names of customers who have fewer than 20 customers associated with the same support representative.", "metadata": {}}
{"_id": "gpt3_494", "text": "\nThis query selects the LastName of customers from the Customer table and joins it to the Employee table on the SupportRepId, grouping the results by SupportRepId and having a maximum of 20 customers per SupportRepId.", "metadata": {}}
{"_id": "gpt3_495", "text": "\nThis query selects the last names of customers who have been serviced by an employee 20 or fewer times.", "metadata": {}}
{"_id": "gpt3_496", "text": "\nThis statement will return a list of the names of physicians who do not have any appointments.", "metadata": {}}
{"_id": "gpt3_497", "text": "\nThis query will return the names of all physicians who are not associated with any appointments.", "metadata": {}}
{"_id": "gpt3_498", "text": "\nThis query returns the names of all physicians who are not associated with any appointments.", "metadata": {}}
{"_id": "gpt3_499", "text": "\nThis query returns the names of all physicians who do not have any appointments.", "metadata": {}}
{"_id": "gpt3_500", "text": "\nThis statement will return a list of all names from the physician table that are not associated with any appointments.", "metadata": {}}
{"_id": "gpt3_501", "text": "\nThis query will select the Hispanic population from a city where the Black population is greater than 10.", "metadata": {}}
{"_id": "gpt3_502", "text": "\nThis query will return the number of Hispanic people in a city where the Black population is greater than 10.", "metadata": {}}
{"_id": "gpt3_503", "text": "\nThis query will return the Hispanic population from cities where the Black population is greater than 10.", "metadata": {}}
{"_id": "gpt3_504", "text": "\nThis query would return a list of all Hispanic populations from cities where the Black population is greater than 10.", "metadata": {}}
{"_id": "gpt3_505", "text": "\nThis query will return all Hispanic populations from cities where the Black population is greater than 10.", "metadata": {}}
{"_id": "gpt3_506", "text": "\nThis query returns a count of the number of Drama Workshop Groups in each city or town.", "metadata": {}}
{"_id": "gpt3_507", "text": "\nThis query will return a count of Drama Workshop Groups for each City or Town in the Addresses table.", "metadata": {}}
{"_id": "gpt3_508", "text": "\nThis query counts the number of Drama Workshop Groups in each City/Town by joining the Addresses and Drama Workshop Groups tables on the Address_ID column.", "metadata": {}}
{"_id": "gpt3_509", "text": "\nThis query will return a list of cities and towns with the number of drama workshop groups in each.", "metadata": {}}
{"_id": "gpt3_510", "text": "\nThis query counts the number of Drama Workshop Groups in each city or town.", "metadata": {}}
{"_id": "gpt3_511", "text": "\nThis query will select the Name from the people table (T2) for every gymnast (T1) in the gymnast table, ordered by the height of the person (T2) in ascending order.", "metadata": {}}
{"_id": "gpt3_512", "text": "\nThis query will select the names of gymnasts from the people table, ordered by their height in ascending order.", "metadata": {}}
{"_id": "gpt3_513", "text": "\nThis query selects the name of a gymnast from the people table, ordered by their height in ascending order.", "metadata": {}}
{"_id": "gpt3_514", "text": "\nThis query will select the name of each gymnast from the people table, ordered by their height in ascending order.", "metadata": {}}
{"_id": "gpt3_515", "text": "\nThis query selects the names of all gymnasts from the people table and orders them by their height in ascending order.", "metadata": {}}
{"_id": "gpt3_516", "text": "\nThis statement will select the name of any female person who is a friend of Zach.", "metadata": {}}
{"_id": "gpt3_517", "text": "\nThis statement retrieves the names of all female friends of Zach from the Person and PersonFriend tables.", "metadata": {}}
{"_id": "gpt3_518", "text": "\nThis query will select the name of any female person who is friends with Zach from the Person and PersonFriend tables.", "metadata": {}}
{"_id": "gpt3_519", "text": "\nThis statement selects the name of all female friends of Zach from the Person and PersonFriend tables.", "metadata": {}}
{"_id": "gpt3_520", "text": "\nThis query selects the name of all female friends of 'Zach' from the Person and PersonFriend tables.", "metadata": {}}
{"_id": "gpt3_521", "text": "\nThis SQL statement would return a list of all the shipping agent names from the Ref_Shipping_Agents table.", "metadata": {}}
{"_id": "gpt3_522", "text": "\nThis SQL query will return the names of all the shipping agents from the Ref_Shipping_Agents table.", "metadata": {}}
{"_id": "gpt3_523", "text": "\nThis statement will return a list of all shipping agent names from the Ref_Shipping_Agents table.", "metadata": {}}
{"_id": "gpt3_524", "text": "\nThe above SQL query will return a list of all shipping agent names from the Ref_Shipping_Agents table.", "metadata": {}}
{"_id": "gpt3_525", "text": "\nThis SQL statement selects the shipping agent name from the Ref_Shipping_Agents table.", "metadata": {}}
{"_id": "gpt3_526", "text": "\nThis query will return the first and last name of all teachers in the same classroom as Evelyn Bromley.", "metadata": {}}
{"_id": "gpt3_527", "text": "\nThis query selects the first and last name of all teachers in the same classroom as Evelyn Bromley.", "metadata": {}}
{"_id": "gpt3_528", "text": "\nThis query will select the first and last names of all the teachers in the same classroom as Evelyn Bromley.", "metadata": {}}
{"_id": "gpt3_529", "text": "\nThis query will return the firstname and lastname of all the teachers in the same classroom as Evelyn Bromley.", "metadata": {}}
{"_id": "gpt3_530", "text": "\nThis SQL statement will retrieve the first and last names of all teachers from the same classroom as Evelyn Bromley from the list and teachers tables.", "metadata": {}}
{"_id": "gpt3_531", "text": "\nThis query selects the dorm names of dorms that have a TV Lounge but do not have a Study Room.", "metadata": {}}
{"_id": "gpt3_532", "text": "\nThis query returns the dorm names of dorms that have a TV Lounge but do not have a Study Room.", "metadata": {}}
{"_id": "gpt3_533", "text": "\nThis query selects all dorm names from the dorm table that have a TV Lounge, but do not have a Study Room.", "metadata": {}}
{"_id": "gpt3_534", "text": "\nThis query returns the names of dorms that have a TV Lounge but not a Study Room.", "metadata": {}}
{"_id": "gpt3_535", "text": "\nThis query selects the dorm names of dorms that have a TV Lounge but do not have a Study Room.", "metadata": {}}
{"_id": "gpt3_536", "text": "\nThis query will return a list of distinct names of wines that are made from red grapes.", "metadata": {}}
{"_id": "gpt3_537", "text": "\nThis query selects the distinct names of wines made from red grapes.", "metadata": {}}
{"_id": "gpt3_538", "text": "\nThis query will return a list of distinct names of wines that are made with red grapes.", "metadata": {}}
{"_id": "gpt3_539", "text": "\nThis query will select all distinct names of wines made from red grapes.", "metadata": {}}
{"_id": "gpt3_540", "text": "\nThis query selects all the distinct names of wines made from red grapes.", "metadata": {}}
{"_id": "gpt3_541", "text": "\nThis query will return a list of countries where a competition has been held, excluding any friendly competitions.", "metadata": {}}
{"_id": "gpt3_542", "text": "\nThis statement will return a list of countries from the competition table that do not have a competition type of 'Friendly'.", "metadata": {}}
{"_id": "gpt3_543", "text": "\nThis query returns all countries from the competition table that do not have a competition_type of 'Friendly'.", "metadata": {}}
{"_id": "gpt3_544", "text": "\nThis query will return all countries from the competition table except those with a competition_type of 'Friendly'.", "metadata": {}}
{"_id": "gpt3_545", "text": "\nThis query will return all countries from the competition table, excluding those where the competition_type is 'Friendly'.", "metadata": {}}
{"_id": "gpt3_546", "text": "\nThis query retrieves the names of customers who have taken out a loan of more than 3000.", "metadata": {}}
{"_id": "gpt3_547", "text": "\nThis query returns the customer names from the customer table who have a loan amount greater than 3000 from the loan table.", "metadata": {}}
{"_id": "gpt3_548", "text": "\nThis query selects the customer names from the customer table (T1) that have loans in the loan table (T2) with an amount greater than 3000.", "metadata": {}}
{"_id": "gpt3_549", "text": "\nThis query retrieves the customer names from the customer table where the amount in the loan table is greater than 3000.", "metadata": {}}
{"_id": "gpt3_550", "text": "\nThis query selects the customer names from the customer table (T1) that have a loan (T2) with an amount greater than 3000.", "metadata": {}}
{"_id": "gpt3_551", "text": "\nThis query will return the start station ID and start station name of all trips that have been taken 200 or more times.", "metadata": {}}
{"_id": "gpt3_552", "text": "\nThis query returns the start station ID and start station name for trips that have a count of 200 or more.", "metadata": {}}
{"_id": "gpt3_553", "text": "\nThis query will select the start station id and start station name from the trip table and group the results by start station name, only selecting those start stations that have a count of 200 or more trips.", "metadata": {}}
{"_id": "gpt3_554", "text": "\nThis SQL query will select the start station ID and start station name from the trip table and group them by start station name, having a count of 200 or more.", "metadata": {}}
{"_id": "gpt3_555", "text": "\nThis query will select the start station ID and start station name from the trip table and group them by start station name, only returning those with a count of 200 or more.", "metadata": {}}
{"_id": "gpt3_556", "text": "\nThis query will select the f_id from the song table where the resolution is greater than the maximum resolution from songs with a rating less than 8.", "metadata": {}}
{"_id": "gpt3_557", "text": "\nThis query will return the f_id of all songs with a resolution that is greater than the maximum resolution of all songs with a rating less than 8.", "metadata": {}}
{"_id": "gpt3_558", "text": "\nThis query will select the f_id (file identifier) from the song table for all songs with a resolution higher than the maximum resolution of songs with a rating lower than 8.", "metadata": {}}
{"_id": "gpt3_559", "text": "\nThis SQL statement will select the f_id of any song that has a resolution greater than the maximum resolution of any song with a rating less than 8.", "metadata": {}}
{"_id": "gpt3_560", "text": "\nThis query will select the f_id from the song table where the resolution is greater than the maximum resolution from the song table where the rating is less than 8.", "metadata": {}}
{"_id": "gpt3_561", "text": "\nThis query will return the maximum and minimum RAM size of all Nokia Corporation phones, as determined by chip model.", "metadata": {}}
{"_id": "gpt3_562", "text": "\nThis SQL statement will select the maximum and minimum RAM (in MiB) from the chip model table for any phones manufactured by Nokia Corporation.", "metadata": {}}
{"_id": "gpt3_563", "text": "\nThis query will return the maximum and minimum RAM size in megabytes (MiB) of all Nokia Corporation phones.", "metadata": {}}
{"_id": "gpt3_564", "text": "\nThis query will return the maximum and minimum RAM (in MiB) for all Nokia Corporation phones.", "metadata": {}}
{"_id": "gpt3_565", "text": "\nThis query returns the maximum and minimum RAM (in MiB) for all Nokia Corporation phones.", "metadata": {}}
{"_id": "gpt3_566", "text": "\nThis query selects the student IDs of all students who participate in both canoeing and kayaking.", "metadata": {}}
{"_id": "gpt3_567", "text": "\nThis query selects the student IDs of students who participate in both canoeing and kayaking activities.", "metadata": {}}
{"_id": "gpt3_568", "text": "\nThis query selects the student IDs of those who participate in both canoeing and kayaking activities.", "metadata": {}}
{"_id": "gpt3_569", "text": "\nThis query will return the student IDs of those who participate in both canoeing and kayaking.", "metadata": {}}
{"_id": "gpt3_570", "text": "\nThis query selects the student IDs of students who participate in both canoeing and kayaking activities.", "metadata": {}}
{"_id": "gpt3_571", "text": "\nThis query retrieves all the years from the film_market_estimation table associated with the market table where the country is Japan, ordered in descending order.", "metadata": {}}
{"_id": "gpt3_572", "text": "\nThis query selects the years from the film_market_estimation table for films released in Japan, ordered from most recent to oldest.", "metadata": {}}
{"_id": "gpt3_573", "text": "\nThis query returns a list of years from the film_market_estimation table, sorted in descending order, which are associated with the market table and the country of Japan.", "metadata": {}}
{"_id": "gpt3_574", "text": "\nThis query will select the year from the film_market_estimation table for films that have a market ID that matches the market ID in the market table for Japan, and order the results by year in descending order.", "metadata": {}}
{"_id": "gpt3_575", "text": "\nThis query selects the year from the film_market_estimation table for the market in Japan, ordered by year in descending order.", "metadata": {}}
{"_id": "gpt3_576", "text": "\nThis query returns the customer_id of the customer with the most cards registered in the Customers_cards table, and the count of cards associated with that customer.", "metadata": {}}
{"_id": "gpt3_577", "text": "\nThis query will return the customer_id of the customer with the most cards and the total number of cards associated with that customer.", "metadata": {}}
{"_id": "gpt3_578", "text": "\nThis SQL query returns the customer_id with the most customer cards, and the total number of cards associated with that customer_id. It does this by grouping the customers_cards table by customer_id and counting the number of cards associated with", "metadata": {}}
{"_id": "gpt3_579", "text": "\nThis query will return the customer_id of the customer with the highest number of cards, along with the total number of cards the customer has.", "metadata": {}}
{"_id": "gpt3_580", "text": "\nThis query will return the customer_id with the highest number of customers_cards, as well as the count of the customers_cards associated with that customer_id.", "metadata": {}}
{"_id": "gpt3_581", "text": "\nThis query will select the region name from the region table for any region that is not included in the affected_region table.", "metadata": {}}
{"_id": "gpt3_582", "text": "\nThis query will select all region names from the region table that are not in the affected_region table.", "metadata": {}}
{"_id": "gpt3_583", "text": "\nThis query will return the names of all regions that are not affected by a certain event.", "metadata": {}}
{"_id": "gpt3_584", "text": "\nThis statement will select the region name from the region table where the region_id is not present in the affected_region table.", "metadata": {}}
{"_id": "gpt3_585", "text": "\nThis query will select the region name from the region table for any region that is not included in the affected_region table.", "metadata": {}}
{"_id": "gpt3_586", "text": "\nThis query will return the names of all captains who have a rank of Midshipman or Lieutenant.", "metadata": {}}
{"_id": "gpt3_587", "text": "\nThis SQL statement will select the name of all captains who have a rank of either Midshipman or Lieutenant.", "metadata": {}}
{"_id": "gpt3_588", "text": "\nThis query will return the names of all captains whose rank is either Midshipman or Lieutenant.", "metadata": {}}
{"_id": "gpt3_589", "text": "\nThis query will select the name of any captain with a rank of Midshipman or Lieutenant from a table.", "metadata": {}}
{"_id": "gpt3_590", "text": "\nThis SQL query will select the name of any captain who has a rank of either Midshipman or Lieutenant.", "metadata": {}}
{"_id": "gpt3_591", "text": "\nThe query will return the address line 1 from the Course_Authors_and_Tutors table for the person named Cathrine.", "metadata": {}}
{"_id": "gpt3_592", "text": "\nThe above SQL query will return the address line 1 of Cathrine from the Course_Authors_and_Tutors table.", "metadata": {}}
{"_id": "gpt3_593", "text": "\nThis query will return the address line 1 of Cathrine from the Course_Authors_and_Tutors table.", "metadata": {}}
{"_id": "gpt3_594", "text": "\nThis query will return the address line 1 of the record in the Course_Authors_and_Tutors table that has a personal name of \"Cathrine\".", "metadata": {}}
{"_id": "gpt3_595", "text": "\nThis query will return the address line 1 of Cathrine from the Course_Authors_and_Tutors table.", "metadata": {}}
{"_id": "gpt3_596", "text": "\nThis query retrieves the document name and access count of the document with the highest access count from the documents table, ordered in descending order.", "metadata": {}}
{"_id": "gpt3_597", "text": "\nThis query selects the document name and access count from the documents table and orders them by the access count in descending order, then limits the result to the top row. This query will return the document name and access count of the document with the highest", "metadata": {}}
{"_id": "gpt3_598", "text": "\nThis query selects the document name and access count from the documents table, and orders them by access count in descending order. The query then limits the results to the first row, which will be the document with the highest access count.", "metadata": {}}
{"_id": "gpt3_599", "text": "\nThis query selects the document name and access count from the documents table, and orders the results by the access count in descending order, then limits the results to only the top record. This query is used to find the document with the highest access count", "metadata": {}}
{"_id": "gpt3_600", "text": "\nThis query retrieves the document name and access count of the document with the highest access count from the documents table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_601", "text": "\nThis query retrieves all distinct forenames from the drivers table, and orders them in ascending alphabetical order.", "metadata": {}}
{"_id": "gpt3_602", "text": "\nThis query will select all the distinct forenames of drivers from a database, and order them alphabetically in ascending order.", "metadata": {}}
{"_id": "gpt3_603", "text": "\nThis query selects all the distinct forenames from the drivers table and orders them in ascending alphabetical order.", "metadata": {}}
{"_id": "gpt3_604", "text": "\nThis query retrieves a list of unique forenames from the drivers table, sorted in alphabetical order.", "metadata": {}}
{"_id": "gpt3_605", "text": "\nThis query will return a list of all distinct forenames from the drivers table, ordered alphabetically in ascending order.", "metadata": {}}
{"_id": "gpt3_606", "text": "\nThis query selects the first employee's first and last name from the employee table, ordered by date of birth.", "metadata": {}}
{"_id": "gpt3_607", "text": "\nThis query will select the first employee's first and last name from the employee table, ordered by date of birth.", "metadata": {}}
{"_id": "gpt3_608", "text": "\nThis query will select the first employee's first and last name from the employee table ordered by their date of birth.", "metadata": {}}
{"_id": "gpt3_609", "text": "\nThis query will select the first employee in the employee table ordered by date of birth, returning their first and last name.", "metadata": {}}
{"_id": "gpt3_610", "text": "\nThis query selects the first employee's first and last name from the employee table, ordered by date of birth.", "metadata": {}}
{"_id": "gpt3_611", "text": "\nThis query will select the first and last names of all employees with a salary greater than the salary of the employee with an employee ID of 163.", "metadata": {}}
{"_id": "gpt3_612", "text": "\nThis query will select the first name and last name of all employees who have a salary greater than the salary of the employee with the employee id of 163.", "metadata": {}}
{"_id": "gpt3_613", "text": "\nThis query will select the first and last name of all employees who have a salary greater than the salary of the employee with the ID 163.", "metadata": {}}
{"_id": "gpt3_614", "text": "\nThis SQL statement selects the first and last names of employees who have a salary greater than the salary of the employee with the ID of 163.", "metadata": {}}
{"_id": "gpt3_615", "text": "\nThis query will select the first and last names of all employees with a salary greater than the salary of the employee with the ID number 163.", "metadata": {}}
{"_id": "gpt3_616", "text": "\nThis query returns a list of all distinct buildings from the Faculty table.", "metadata": {}}
{"_id": "gpt3_617", "text": "\nThis SQL statement will return a list of all the unique buildings from the Faculty table.", "metadata": {}}
{"_id": "gpt3_618", "text": "\nThis query will select all the distinct buildings from the Faculty table.", "metadata": {}}
{"_id": "gpt3_619", "text": "\nThis query will return a list of all distinct buildings in the Faculty table.", "metadata": {}}
{"_id": "gpt3_620", "text": "\nThis query will select all distinct building names from the Faculty table.", "metadata": {}}
{"_id": "gpt3_621", "text": "\nThis query will select the names of all ships that have been on a mission launched after 1928.", "metadata": {}}
{"_id": "gpt3_622", "text": "\nThis query selects the name of the ship from the mission and ship tables where the mission was launched after 1928.", "metadata": {}}
{"_id": "gpt3_623", "text": "\nThis query will select the name of all ships that were used in missions launched after the year 1928.", "metadata": {}}
{"_id": "gpt3_624", "text": "\nThis statement will select the name of the ships that have been used in missions launched after 1928.", "metadata": {}}
{"_id": "gpt3_625", "text": "\nThis query returns the names of ships that were part of a mission launched after 1928.", "metadata": {}}
{"_id": "gpt3_626", "text": "\nThis query would return the total number of records in the Companies table.", "metadata": {}}
{"_id": "gpt3_627", "text": "\nThis query will return the total number of records in the Companies table.", "metadata": {}}
{"_id": "gpt3_628", "text": "\nThis query will return the total number of records in the Companies table.", "metadata": {}}
{"_id": "gpt3_629", "text": "\nThis query will return the total number of records in the Companies table.", "metadata": {}}
{"_id": "gpt3_630", "text": "\nThis query returns the total number of records in the Companies table.", "metadata": {}}
{"_id": "gpt3_631", "text": "\nThis query will return the maximum height and the average height of all mountains in the table.", "metadata": {}}
{"_id": "gpt3_632", "text": "\nThis query returns the maximum and average height of all mountains in the table.", "metadata": {}}
{"_id": "gpt3_633", "text": "\nThis query will return the maximum height and the average height of all the mountains in the table.", "metadata": {}}
{"_id": "gpt3_634", "text": "\nThis query will return the maximum height and the average height of all the mountains in the table.", "metadata": {}}
{"_id": "gpt3_635", "text": "\nThis query will find the maximum and average height of all the mountains in the table.", "metadata": {}}
{"_id": "gpt3_636", "text": "\nThis query counts the number of customers in the customer table with a Gmail email address.", "metadata": {}}
{"_id": "gpt3_637", "text": "\nThis query returns the total number of customers with a Gmail email address.", "metadata": {}}
{"_id": "gpt3_638", "text": "\nThis query will count the total number of customers who have a Gmail email address.", "metadata": {}}
{"_id": "gpt3_639", "text": "\nThis query returns the total number of customers with a Gmail email address.", "metadata": {}}
{"_id": "gpt3_640", "text": "\nThis query will count the number of customers who have a gmail.com email address.", "metadata": {}}
{"_id": "gpt3_641", "text": "\nThis query will select the name of any editor from the table whose age is greater than 25.", "metadata": {}}
{"_id": "gpt3_642", "text": "\nThis query will return the names of all editors who are older than 25 years old.", "metadata": {}}
{"_id": "gpt3_643", "text": "\nThis query will return the names of all editors from a database who are older than 25 years old.", "metadata": {}}
{"_id": "gpt3_644", "text": "\nThis query will return the names of all editors who are over the age of 25 from the editor table.", "metadata": {}}
{"_id": "gpt3_645", "text": "\nThis query selects the name of any editor who is older than 25 years old.", "metadata": {}}
{"_id": "gpt3_646", "text": "\nThis query selects the store name from the store table and the store district table, where the district_id is the same as the district with the highest city population.", "metadata": {}}
{"_id": "gpt3_647", "text": "\nThis query will select the store name from the store table, joining with the store_district table, where the district_id is the one with the highest city population from the district table.", "metadata": {}}
{"_id": "gpt3_648", "text": "\nThis query selects the store name from the store table, joining it with the store_district table, where the district_id equals the district_id from the district table that has the highest city population.", "metadata": {}}
{"_id": "gpt3_649", "text": "\nThis query retrieves the store name from the store table that is associated with the district with the highest city population from the district table.", "metadata": {}}
{"_id": "gpt3_650", "text": "\nThis query will select the store name from the store table for the store located in the district with the highest city population.", "metadata": {}}
{"_id": "gpt3_651", "text": "\nThis query retrieves the user name and password of the user with the highest count of records in the users table, grouped by role code and ordered in descending order.", "metadata": {}}
{"_id": "gpt3_652", "text": "\nThis query will select the user name and password from the users table, group them by role code, order them by count in descending order, and limit the results to the top record.", "metadata": {}}
{"_id": "gpt3_653", "text": "\nThis query will select the user name and password of the user with the highest count of role code, ordered by count in descending order, and limited to one result.", "metadata": {}}
{"_id": "gpt3_654", "text": "\nThis query retrieves the user name and password of the user with the highest count of a specific role code from the users table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_655", "text": "\nThis query will select the user name and password from the users table, grouped by role code, ordered by the count of each role code in descending order, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_656", "text": "\nThis query returns the number of distinct game types in the Video_games table.", "metadata": {}}
{"_id": "gpt3_657", "text": "\nThis query will return the number of distinct game types in the Video_games table.", "metadata": {}}
{"_id": "gpt3_658", "text": "\nThis query will return the number of distinct game types in the Video_games table.", "metadata": {}}
{"_id": "gpt3_659", "text": "\nThis query returns the number of distinct game types in the Video_games table.", "metadata": {}}
{"_id": "gpt3_660", "text": "\nThis query returns the total number of distinct game types in the Video_games table.", "metadata": {}}
{"_id": "gpt3_661", "text": "\nThis query returns the title and film_id of all films with a rental rate of 0.99 that have fewer than 3 copies in inventory.", "metadata": {}}
{"_id": "gpt3_662", "text": "\nThis query returns the title and film_id of films with a rental rate of 0.99 that have less than 3 copies in inventory.", "metadata": {}}
{"_id": "gpt3_663", "text": "\nThis query selects the title and film_id of films with a rental rate of 0.99, and intersects with the title and film_id of films that have fewer than 3 copies in inventory.", "metadata": {}}
{"_id": "gpt3_664", "text": "\nThis query selects the title and film ID from films with a rental rate of 0.99 intersected with titles and film IDs from films that have fewer than 3 copies in inventory.", "metadata": {}}
{"_id": "gpt3_665", "text": "\nThis query selects the title and film_id from the film table where the rental rate is 0.99, and intersects it with the title and film_id from the film table joined with the inventory table where the count of each film_", "metadata": {}}
{"_id": "gpt3_666", "text": "\nThis query selects the student details from the students table, joins it with the student_course_registrations table, groups the results by student_id, orders the results by count in descending order, and limits the results to the top student", "metadata": {}}
{"_id": "gpt3_667", "text": "\nThis query retrieves the student details of the student who has registered for the most courses. It does this by joining the students and student_course_registrations tables on the student_id field, grouping by student_id, ordering by", "metadata": {}}
{"_id": "gpt3_668", "text": "\nThis query will return the student details of the student who has registered for the most courses, ordered by the number of courses they have registered for.", "metadata": {}}
{"_id": "gpt3_669", "text": "\nThis query returns the student details (name, email, etc.) from the student with the highest number of course registrations.", "metadata": {}}
{"_id": "gpt3_670", "text": "\nThis statement selects the student details from the students table as T1 and joins it with the student_course_registrations table as T2 on the student_id. It then groups the results by student_id and orders them by the", "metadata": {}}
{"_id": "gpt3_671", "text": "\nThis query selects the distinct department names from the departments table, using the employees table to join the two tables on the department_id column.", "metadata": {}}
{"_id": "gpt3_672", "text": "\nThis query selects the distinct department names from the departments table that are associated with employees from the employees table.", "metadata": {}}
{"_id": "gpt3_673", "text": "\nThis query selects the distinct department names from the employees and departments tables, based on the department_id in both tables.", "metadata": {}}
{"_id": "gpt3_674", "text": "\nThis query selects the distinct department names from the employees and departments tables, based on their shared department_id.", "metadata": {}}
{"_id": "gpt3_675", "text": "\nThis query selects all unique department names from the departments table, joined with the employees table on the department_id column.", "metadata": {}}
{"_id": "gpt3_676", "text": "\nThis query will return the school colors of the school with the highest enrollment.", "metadata": {}}
{"_id": "gpt3_677", "text": "\nThis query will select the school colors of the school with the highest enrollment and return the result.", "metadata": {}}
{"_id": "gpt3_678", "text": "\nThis query will select the school colors from the school table and order them by enrollment in descending order, with the highest enrollment school at the top. It will then limit the result to the top row, which will be the school with the highest enrollment", "metadata": {}}
{"_id": "gpt3_679", "text": "\nThis query will return the school colors of the school with the highest enrollment.", "metadata": {}}
{"_id": "gpt3_680", "text": "\nThis query will return the school colors of the school with the highest enrollment.", "metadata": {}}
{"_id": "gpt3_681", "text": "\nThis query selects the document name with the most sections from the documents and document_sections tables. It does this by joining the two tables on the document_code column and grouping by the document_code. It then orders the results by the count", "metadata": {}}
{"_id": "gpt3_682", "text": "\nThis query will select the document name with the most sections from the documents and document_sections tables, ordered by the number of sections, and limited to only one result.", "metadata": {}}
{"_id": "gpt3_683", "text": "\nThis query retrieves the document name of the document with the most sections from the documents and document_sections tables. It does this by joining the two tables on the document_code column and grouping by the document_code column. The query then", "metadata": {}}
{"_id": "gpt3_684", "text": "\nThis query will select the document name from the documents table that has the most sections associated with it, as determined by counting the number of sections in the document_sections table associated with each document_code in the documents table. The result will be", "metadata": {}}
{"_id": "gpt3_685", "text": "\nThis query retrieves the document name of the document with the most sections from the documents and document_sections tables. It joins the two tables on the document code and groups by document code. It then orders the results by the count of sections and", "metadata": {}}
{"_id": "gpt3_686", "text": "\nThis query selects the first and last name of students who are minors in department 140.", "metadata": {}}
{"_id": "gpt3_687", "text": "\nThis query selects the first and last names from the STUDENT table of students who are minors in department 140.", "metadata": {}}
{"_id": "gpt3_688", "text": "\nThis query selects the first and last names of students who are minors in department 140.", "metadata": {}}
{"_id": "gpt3_689", "text": "\nThis query selects the first and last names of students who are minors in department 140.", "metadata": {}}
{"_id": "gpt3_690", "text": "\nThis query selects the first and last names of students who are minors in department 140.", "metadata": {}}
{"_id": "gpt3_691", "text": "\nThis query will return all the rooms in the NEB Building where the faculty member holds the rank of Professor.", "metadata": {}}
{"_id": "gpt3_692", "text": "\nThis query will select the Room from the FACULTY table where the Rank is \"Professor\" and the Building is \"NEB\".", "metadata": {}}
{"_id": "gpt3_693", "text": "\nThis query will return all the rooms in the NEB building that are occupied by professors.", "metadata": {}}
{"_id": "gpt3_694", "text": "\nThis query selects the Room from the FACULTY table where the Rank is \"Professor\" and the Building is \"NEB\".", "metadata": {}}
{"_id": "gpt3_695", "text": "\nThis query selects all rooms from the FACULTY table where the Rank is \"Professor\" and the Building is \"NEB\".", "metadata": {}}
{"_id": "gpt3_696", "text": "\nThis query will select the first name and last name of all employees who have a higher salary than the employee with employee ID 163.", "metadata": {}}
{"_id": "gpt3_697", "text": "\nThis statement will select the first and last name of all employees who have a salary greater than the salary of employee with the employee_id of 163.", "metadata": {}}
{"_id": "gpt3_698", "text": "\nThis query will select the first name and last name of all employees whose salary is higher than the salary of the employee with ID 163.", "metadata": {}}
{"_id": "gpt3_699", "text": "\nThis query selects the first name and last name of all employees who have a salary greater than the salary of the employee with employee ID 163.", "metadata": {}}
{"_id": "gpt3_700", "text": "\nThis query will select the first and last name of all employees who have a salary higher than that of the employee with the employee_id of 163.", "metadata": {}}
{"_id": "gpt3_701", "text": "\nThis SQL statement will select the billing country from the invoices table and sum the total for each country, then order the results in descending order by the total sum and limit the results to the top 8 countries.", "metadata": {}}
{"_id": "gpt3_702", "text": "\nThis SQL statement will return the 8 countries with the highest total invoice amounts, sorted in descending order. It will return two columns: billing_country and SUM(total), which is the sum of all invoice totals for each country.", "metadata": {}}
{"_id": "gpt3_703", "text": "\nThis SQL query will select the billing country and the total sum of all invoices from each billing country, then group the results by billing country and order them by the total sum of each country in descending order, and finally limit the results to", "metadata": {}}
{"_id": "gpt3_704", "text": "\nThis SQL query will select the billing country and the total sum of all invoices for each country, grouped by billing country and ordered from highest to lowest total sum, with a limit of 8 results.", "metadata": {}}
{"_id": "gpt3_705", "text": "\nThis SQL statement will return the 8 countries with the highest total invoices, sorted by the total invoice amount in descending order. It will return the billing country and the total invoice amount for each country.", "metadata": {}}
{"_id": "gpt3_706", "text": "\nThis query returns the count of rows for each time of day from the broadcast table, grouped by time of day.", "metadata": {}}
{"_id": "gpt3_707", "text": "\nThis query counts the number of broadcasts that occur in each time of day and groups them by time of day.", "metadata": {}}
{"_id": "gpt3_708", "text": "\nThis query counts the number of broadcasts for each time of day and groups them by time of day.", "metadata": {}}
{"_id": "gpt3_709", "text": "\nThis query counts the number of broadcasts for each time of day and groups them by time of day.", "metadata": {}}
{"_id": "gpt3_710", "text": "\nThis query returns the count of broadcasts for each time of day.", "metadata": {}}
{"_id": "gpt3_711", "text": "\nThis query will select the vehicle_flight_number, date, and pilot from the flight table, and order the results by altitude in ascending order.", "metadata": {}}
{"_id": "gpt3_712", "text": "\nThis query will select the vehicle flight number, date, and pilot from the flight table, and then order the results by the altitude in ascending order.", "metadata": {}}
{"_id": "gpt3_713", "text": "\nThis query selects the vehicle_flight_number, date, and pilot from the flight table, and orders them by altitude in ascending order.", "metadata": {}}
{"_id": "gpt3_714", "text": "\nThis query selects the vehicle flight number, date, and pilot from the flight table and orders the results by altitude in ascending order.", "metadata": {}}
{"_id": "gpt3_715", "text": "\nThis query will select the vehicle flight number, date, and pilot from the flight table and order them by ascending altitude.", "metadata": {}}
{"_id": "gpt3_716", "text": "\nThis query will return the number of distinct services available at a station.", "metadata": {}}
{"_id": "gpt3_717", "text": "\nThis query will return the number of distinct services offered by the station.", "metadata": {}}
{"_id": "gpt3_718", "text": "\nThis query will return the number of distinct services available at a station.", "metadata": {}}
{"_id": "gpt3_719", "text": "\nThis query will count the number of unique services offered by a station.", "metadata": {}}
{"_id": "gpt3_720", "text": "\nThis query will return the total number of distinct services offered by a station.", "metadata": {}}
{"_id": "gpt3_721", "text": "\nThis query will select the details of all organisations that are classified as sponsors from the Organisations and organisation_Types tables, and will order the results by organisation details.", "metadata": {}}
{"_id": "gpt3_722", "text": "\nThis query will retrieve all the organisation details from the Organisations table for organisations that are classified as 'Sponsor' in the organisation_Types table, and will order the results by organisation details.", "metadata": {}}
{"_id": "gpt3_723", "text": "\nThis query will select all organisation details from the Organisations table and join them with the organisation_Types table, filtering the results to only show organisations with the type description of 'Sponsor'. The results will then be ordered by organisation details.", "metadata": {}}
{"_id": "gpt3_724", "text": "\nThis query will select all organisation details from the Organisations table that have an organisation type of 'Sponsor' from the organisation_Types table, and order them by organisation details.", "metadata": {}}
{"_id": "gpt3_725", "text": "\nThis query will select all the organisation details from the Organisations table, as well as the organisation type from the organisation Types table, where the organisation type description is 'Sponsor'. The results will be ordered by organisation details.", "metadata": {}}
{"_id": "gpt3_726", "text": "\nThis query will return the name of the aircraft from the Aircraft table that is associated with Flight number 99 from the Flight table.", "metadata": {}}
{"_id": "gpt3_727", "text": "\nThis query selects the name of the aircraft associated with Flight 99 from the Aircraft and Flight tables.", "metadata": {}}
{"_id": "gpt3_728", "text": "\nThis statement will select the name of the aircraft from the Aircraft table that is associated with Flight 99 in the Flight table.", "metadata": {}}
{"_id": "gpt3_729", "text": "\nThis query will select the name of the aircraft associated with Flight 99 from the Aircraft table.", "metadata": {}}
{"_id": "gpt3_730", "text": "\nThis query is selecting the name of the aircraft from the Aircraft table associated with flight number 99 from the Flight table.", "metadata": {}}
{"_id": "gpt3_731", "text": "\nThis query will return the titles of all songs performed by the bandmate with the last name \"Heilo\".", "metadata": {}}
{"_id": "gpt3_732", "text": "\nThis query will select the title of the songs performed by the bandmate with the last name Heilo.", "metadata": {}}
{"_id": "gpt3_733", "text": "\nThis query will select the title of the songs that the bandmate \"Heilo\" has performed.", "metadata": {}}
{"_id": "gpt3_734", "text": "\nThis query will select the titles of songs performed by the band member with the last name \"Heilo\".", "metadata": {}}
{"_id": "gpt3_735", "text": "\nThis query will select the titles of all songs performed by the bandmate with the last name Heilo.", "metadata": {}}
{"_id": "gpt3_736", "text": "\nThis query will select the top three support rates from the candidate table, ordered from highest to lowest.", "metadata": {}}
{"_id": "gpt3_737", "text": "\nThis query will return the top 3 support rates of candidates in descending order.", "metadata": {}}
{"_id": "gpt3_738", "text": "\nThis query will select the three highest support rates from the candidate table, ordered from highest to lowest.", "metadata": {}}
{"_id": "gpt3_739", "text": "\nThis query will return the three highest support rates for a candidate, ordered from highest to lowest.", "metadata": {}}
{"_id": "gpt3_740", "text": "\nThis query selects the top three support rates from the candidate table, ordered from highest to lowest.", "metadata": {}}
{"_id": "gpt3_741", "text": "\nThis query will return a list of all the unique donator names from the endowment table.", "metadata": {}}
{"_id": "gpt3_742", "text": "\nThis query will return a list of all the distinct donator names from the endowment table.", "metadata": {}}
{"_id": "gpt3_743", "text": "\nThis query will return a list of all the distinct donator names from the endowment table.", "metadata": {}}
{"_id": "gpt3_744", "text": "\nThis query will return a list of all distinct donator names from the endowment table.", "metadata": {}}
{"_id": "gpt3_745", "text": "\nThis query will return a list of all unique donator names from the endowment table.", "metadata": {}}
{"_id": "gpt3_746", "text": "\nThis query returns the maximum and minimum RAM in megabytes (MiB) for Nokia Corporation's phone models.", "metadata": {}}
{"_id": "gpt3_747", "text": "\nThis query returns the maximum and minimum RAM (in MiB) for all Nokia Corporation phones.", "metadata": {}}
{"_id": "gpt3_748", "text": "\nThis query will return the maximum and minimum RAM sizes of all chip models used in Nokia Corporation phones.", "metadata": {}}
{"_id": "gpt3_749", "text": "\nThis query selects the maximum and minimum RAM (MiB) of Nokia Corporation phones from the chip_model and phone tables.", "metadata": {}}
{"_id": "gpt3_750", "text": "\nThis query will return the maximum and minimum RAM (in MiB) of all Nokia Corporation phones.", "metadata": {}}
{"_id": "gpt3_751", "text": "\nThis query will return the average length in feet of all bridges in the table.", "metadata": {}}
{"_id": "gpt3_752", "text": "\nThis query will return the average length of all bridges in the table in feet.", "metadata": {}}
{"_id": "gpt3_753", "text": "\nThis query will return the average length of all bridges in feet from the bridge table.", "metadata": {}}
{"_id": "gpt3_754", "text": "\nThis query returns the average length of all bridges in the bridge table, measured in feet.", "metadata": {}}
{"_id": "gpt3_755", "text": "\nThis query would return the average length of all bridges in the table, measured in feet.", "metadata": {}}
{"_id": "gpt3_756", "text": "\nThis query will return the total count of records in the party_events table.", "metadata": {}}
{"_id": "gpt3_757", "text": "\nThis query will return the total number of records in the party_events table.", "metadata": {}}
{"_id": "gpt3_758", "text": "\nThis query returns the total number of rows in the party_events table.", "metadata": {}}
{"_id": "gpt3_759", "text": "\nThis query returns the total number of entries in the party_events table.", "metadata": {}}
{"_id": "gpt3_760", "text": "\nThis query returns the total number of records in the party_events table.", "metadata": {}}
{"_id": "gpt3_761", "text": "\nThis query will select the product_name and product_id from the products table where the product_price is between 600 and 700.", "metadata": {}}
{"_id": "gpt3_762", "text": "\nThis statement selects the product name and product ID from the products table where the product price is between 600 and 700.", "metadata": {}}
{"_id": "gpt3_763", "text": "\nThis statement selects the product name and product ID from the products table where the product price is between 600 and 700.", "metadata": {}}
{"_id": "gpt3_764", "text": "\nThis statement will select the product name and product ID from the products table where the product price is between 600 and 700.", "metadata": {}}
{"_id": "gpt3_765", "text": "\nThis query will return the product name and product ID of all products that have a price between 600 and 700.", "metadata": {}}
{"_id": "gpt3_766", "text": "\nThis query returns the count of members who have a \"Black\" Membership card.", "metadata": {}}
{"_id": "gpt3_767", "text": "\nThis query will return the number of members that have a Black membership card.", "metadata": {}}
{"_id": "gpt3_768", "text": "\nThis query will count the number of members with a \"Black\" membership card.", "metadata": {}}
{"_id": "gpt3_769", "text": "\nThis query returns the number of members who have a 'Black' membership card.", "metadata": {}}
{"_id": "gpt3_770", "text": "\nThis query will return the total number of members with a Black membership card.", "metadata": {}}
{"_id": "gpt3_771", "text": "\nThis query will select the first names of all people in a database and order them alphabetically.", "metadata": {}}
{"_id": "gpt3_772", "text": "\nThis query will select all first names from the people table and order them alphabetically.", "metadata": {}}
{"_id": "gpt3_773", "text": "\nThis query will select the first name of each person in a database, and sort them in ascending alphabetical order.", "metadata": {}}
{"_id": "gpt3_774", "text": "\nThis query selects the first name of each person from the people table, and orders them alphabetically.", "metadata": {}}
{"_id": "gpt3_775", "text": "\nThis query retrieves all the first names of people from a database table, sorted alphabetically.", "metadata": {}}
{"_id": "gpt3_776", "text": "\nThis SQL query will select the name of the college (cName) and the number of enrolled students (enr) from the College table where the number of enrolled students is greater than 10,000 and the college is located in Louisiana (state", "metadata": {}}
{"_id": "gpt3_777", "text": "\nThis query selects the college name (cName) and enrollment (enr) from the College table where the enrollment is greater than 10,000 and the state is Louisiana (LA).", "metadata": {}}
{"_id": "gpt3_778", "text": "\nThis statement will select the college name and enrollment number from the College table for all colleges located in Louisiana with an enrollment greater than 10,000.", "metadata": {}}
{"_id": "gpt3_779", "text": "\nThis query will return the names and enrollment numbers of all colleges in Louisiana with more than 10,000 students enrolled.", "metadata": {}}
{"_id": "gpt3_780", "text": "\nThis statement selects the cName and enr columns from the College table where the enrollment (enr) is greater than 10,000 and the state is \"LA\".", "metadata": {}}
{"_id": "gpt3_781", "text": "\nThis query will select all albums released in 2012 from the Albums table. It will return the album title, artist, genre, and year of release.", "metadata": {}}
{"_id": "gpt3_782", "text": "\nThis query will return all albums from the table Albums that were released in 2012.", "metadata": {}}
{"_id": "gpt3_783", "text": "\nThis query will return all albums released in the year 2012.", "metadata": {}}
{"_id": "gpt3_784", "text": "\nThis query will select all albums released in 2012 from the Albums table. It will return all columns associated with the albums, such as title, artist, year, and genre.", "metadata": {}}
{"_id": "gpt3_785", "text": "\nThis query will return all albums released in the year 2012.", "metadata": {}}
{"_id": "gpt3_786", "text": "\nThis query returns the ID of the file with the longest duration from the 'files' table.", "metadata": {}}
{"_id": "gpt3_787", "text": "\nThis query returns the ID of the file with the longest duration from the \"files\" table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_788", "text": "\nThis query will select the file ID of the file with the longest duration from the files table, in descending order.", "metadata": {}}
{"_id": "gpt3_789", "text": "\nThis query will select the file ID of the file with the longest duration from the files table, ordered by duration in descending order, and limit the result to one row.", "metadata": {}}
{"_id": "gpt3_790", "text": "\nThis query returns the ID of the file with the longest duration from the files table, ordered in descending order.", "metadata": {}}
{"_id": "gpt3_791", "text": "\nThis query returns a list of all the colleges that have both Midfielders and Defenders on their team from the match_season table.", "metadata": {}}
{"_id": "gpt3_792", "text": "\nThis query selects all college names from the match_season table that appear in both the Midfielder and Defender position columns.", "metadata": {}}
{"_id": "gpt3_793", "text": "\nThis query returns the college names of players who are both midfielders and defenders in the match_season table.", "metadata": {}}
{"_id": "gpt3_794", "text": "\nThis query will select all colleges from the match_season table that have players who play both the Midfielder and Defender positions.", "metadata": {}}
{"_id": "gpt3_795", "text": "\nThis query returns a list of colleges whose students have played both the position of Midfielder and Defender in a match season.", "metadata": {}}
{"_id": "gpt3_796", "text": "\nThis SQL statement will return all unique labels from the Albums table.", "metadata": {}}
{"_id": "gpt3_797", "text": "\nThis query selects all the distinct labels from the Albums table.", "metadata": {}}
{"_id": "gpt3_798", "text": "\nThis query will select all the unique labels from the Albums table.", "metadata": {}}
{"_id": "gpt3_799", "text": "\nThis query will select all unique labels from the Albums table.", "metadata": {}}
{"_id": "gpt3_800", "text": "\nThis statement will select all the distinct labels from the Albums table.", "metadata": {}}
{"_id": "gpt3_801", "text": "\nThis query selects the official name of a city from the city table (T1) that is hosting more than one farm competition from the farm_competition table (T2).", "metadata": {}}
{"_id": "gpt3_802", "text": "\nThis query selects the official name of a city from the city table (T1) that has hosted more than one farm competition from the farm_competition table (T2).", "metadata": {}}
{"_id": "gpt3_803", "text": "\nThis query selects the official name of a city from the city table (T1) that has hosted the farm competition (T2) more than once, by joining the two tables on the city ID and grouping by the host city ID.", "metadata": {}}
{"_id": "gpt3_804", "text": "\nThis query will select the official name of any city that has hosted a farm competition more than once.", "metadata": {}}
{"_id": "gpt3_805", "text": "\nThis query selects the official name of a city from the city table (T1) that has hosted a farm competition (T2) more than once.", "metadata": {}}
{"_id": "gpt3_806", "text": "\nThis query selects the organisation type with the most research staff from the Organisations and Research_Staff tables, and orders the results by the count of research staff in descending order. The query returns the organisation type with the highest count of research staff.", "metadata": {}}
{"_id": "gpt3_807", "text": "\nThis query selects the organisation type with the most research staff from the Organisations and Research_Staff tables, ordered by count in descending order and limited to the top result.", "metadata": {}}
{"_id": "gpt3_808", "text": "\nThis query selects the most common organisation type from the Organisations and Research_Staff tables, based on the employer_organisation_id in Research_Staff. It groups by organisation_type in Organisations and orders the results by count(*),", "metadata": {}}
{"_id": "gpt3_809", "text": "\nThis query will select the organisation type with the highest number of research staff associated with it, and order the results by the count of research staff in descending order. The result will be limited to the top organisation type with the most research staff.", "metadata": {}}
{"_id": "gpt3_810", "text": "\nThis query will select the most common organisation type from the Organisations and Research_Staff tables, grouped by organisation type and ordered by count in descending order, with a limit of one result.", "metadata": {}}
{"_id": "gpt3_811", "text": "\nThis SQL statement retrieves the claim ID, date claim made, and date claim settled from the Claims and Settlements tables, grouping by the claim ID and only selecting those claims that have been settled once.", "metadata": {}}
{"_id": "gpt3_812", "text": "\nThis query is used to select the claim ID, date claim made, and date claim settled from the Claims and Settlements tables, where the claim ID is the same in both tables and there is only one record per claim ID.", "metadata": {}}
{"_id": "gpt3_813", "text": "\nThis SQL query selects the claim_id, date_claim_made and date_claim_settled from the Claims and Settlements tables, grouping them by claim_id and having a count of 1. This query returns all claims that have", "metadata": {}}
{"_id": "gpt3_814", "text": "\nThis SQL query selects the claim ID, date claim made, and date claim settled from the Claims and Settlements tables, grouping them by claim ID and only returning those that have only one entry in the Settlements table.", "metadata": {}}
{"_id": "gpt3_815", "text": "\nThis query selects the claim ID, date claim was made, and date claim was settled from the Claims and Settlements tables, and groups them by claim ID. It then filters the results to only include those with a count of 1, meaning there", "metadata": {}}
{"_id": "gpt3_816", "text": "\nThis query will return the total number of records in the store table.", "metadata": {}}
{"_id": "gpt3_817", "text": "\nThis statement is used to count the total number of records in the store table.", "metadata": {}}
{"_id": "gpt3_818", "text": "\nThis query returns the total number of rows in the store table.", "metadata": {}}
{"_id": "gpt3_819", "text": "\nThis query returns the total number of records in the store table.", "metadata": {}}
{"_id": "gpt3_820", "text": "\nThis query will return the total count of records in the store table.", "metadata": {}}
{"_id": "gpt3_821", "text": "\nThis query counts the number of rooms in each block and groups them by block code.", "metadata": {}}
{"_id": "gpt3_822", "text": "\nThis query returns a count of the number of rooms in each block, grouped by block code.", "metadata": {}}
{"_id": "gpt3_823", "text": "\nThis query returns the count of rooms for each block code in the Block and Room tables, grouped by block code.", "metadata": {}}
{"_id": "gpt3_824", "text": "\nThis query counts the number of rooms in each block and groups them by blockcode.", "metadata": {}}
{"_id": "gpt3_825", "text": "\nThis query counts the number of rooms in each block and groups them by block code.", "metadata": {}}
{"_id": "gpt3_826", "text": "\nThis query returns the most popular payment method used by customers, ordered by the number of customers who use it.", "metadata": {}}
{"_id": "gpt3_827", "text": "\nThis query selects the most popular payment method used by customers and orders the results by the number of times the payment method was used. The query will return the payment method that was used the most.", "metadata": {}}
{"_id": "gpt3_828", "text": "\nThis query will return the most frequently used payment method from the customers table, ordered by the number of times it is used and limited to one result.", "metadata": {}}
{"_id": "gpt3_829", "text": "\nThis query returns the most common payment method used by customers, sorted in descending order and limited to the top result.", "metadata": {}}
{"_id": "gpt3_830", "text": "\nThis query will select the most popular payment method used by customers and display it first, followed by the other payment methods in descending order of popularity.", "metadata": {}}
{"_id": "gpt3_831", "text": "\nThis query selects the distinct names, titles, and stars of movies from the Rating, Movie, and Reviewer tables where the director of the movie matches the name of the Reviewer.", "metadata": {}}
{"_id": "gpt3_832", "text": "\nThis query selects the distinct names, titles, and stars of movies from the Rating, Movie, and Reviewer tables where the director of the movie matches the name of the reviewer.", "metadata": {}}
{"_id": "gpt3_833", "text": "\nThis query selects the distinct names, titles, and star ratings of movies from the Rating, Movie, and Reviewer tables, where the director of the movie is the same as the name of the reviewer.", "metadata": {}}
{"_id": "gpt3_834", "text": "\nThis query selects the distinct name, title, and stars of a movie from the Rating, Movie, and Reviewer tables, where the director of the movie is the same as the name of the reviewer.", "metadata": {}}
{"_id": "gpt3_835", "text": "\nThis query selects the distinct name, title, and stars of a movie from the Rating, Movie, and Reviewer tables for all movies whose director is the same as the reviewer's name.", "metadata": {}}
{"_id": "gpt3_836", "text": "\nThis query selects the last name and age of students who have both milk and cat allergies.", "metadata": {}}
{"_id": "gpt3_837", "text": "\nThis statement selects the last name and age of students who have both a milk and cat allergy.", "metadata": {}}
{"_id": "gpt3_838", "text": "\nThis query selects the last name and age of students who have both a milk and cat allergy.", "metadata": {}}
{"_id": "gpt3_839", "text": "\nThis query will select the last name and age of all students who have both a milk and cat allergy.", "metadata": {}}
{"_id": "gpt3_840", "text": "\nThis query selects the last name and age of all students who have both a milk and cat allergy.", "metadata": {}}
{"_id": "gpt3_841", "text": "\nThe query will return the description of the club \"Pen and Paper Gaming\".", "metadata": {}}
{"_id": "gpt3_842", "text": "\nThe query will return the description of the club \"Pen and Paper Gaming\", which is \"A club for fans of tabletop role-playing games such as Dungeons and Dragons and other pen and paper games.\"", "metadata": {}}
{"_id": "gpt3_843", "text": "\nThe query will return the description of the club \"Pen and Paper Gaming\".", "metadata": {}}
{"_id": "gpt3_844", "text": "\nThe query will return the description of the club \"Pen and Paper Gaming\".", "metadata": {}}
{"_id": "gpt3_845", "text": "\nThe query will return the description of the club \"Pen and Paper Gaming\".", "metadata": {}}
{"_id": "gpt3_846", "text": "\nThis query returns the country with the most perpetrators, along with the count of perpetrators from that country. The result is sorted in descending order and limited to the first result.", "metadata": {}}
{"_id": "gpt3_847", "text": "\nThis query returns the country with the highest number of perpetrators, along with the total count of perpetrators from that country.", "metadata": {}}
{"_id": "gpt3_848", "text": "\nThis query will return the country with the most perpetrators and the total number of perpetrators from that country.", "metadata": {}}
{"_id": "gpt3_849", "text": "\nThis query will return the country with the most perpetrators, along with the total number of perpetrators from that country, ordered from highest to lowest.", "metadata": {}}
{"_id": "gpt3_850", "text": "\nThis query will return the country with the highest number of perpetrators, along with the total count of perpetrators from that country.", "metadata": {}}
{"_id": "gpt3_851", "text": "\nThis query will return the number of distinct nationalities represented among swimmers.", "metadata": {}}
{"_id": "gpt3_852", "text": "\nThis query will count the number of distinct nationalities of swimmers in a table.", "metadata": {}}
{"_id": "gpt3_853", "text": "\nThis query will return the total number of distinct nationalities of swimmers.", "metadata": {}}
{"_id": "gpt3_854", "text": "\nThis query returns the count of distinct nationalities of swimmers in the table.", "metadata": {}}
{"_id": "gpt3_855", "text": "\nThis query will count the number of distinct nationalities of swimmers in a given table.", "metadata": {}}
{"_id": "gpt3_856", "text": "\nThis query selects the names of documents from the documents table where the document code does not appear in the document_sections table.", "metadata": {}}
{"_id": "gpt3_857", "text": "\nThis query will select all document names from the documents table that do not have a corresponding document code in the document_sections table.", "metadata": {}}
{"_id": "gpt3_858", "text": "\nThis query selects the name of all documents from the documents table which do not have a corresponding document code in the document_sections table.", "metadata": {}}
{"_id": "gpt3_859", "text": "\nThis query will return the names of all documents that do not have any associated document sections.", "metadata": {}}
{"_id": "gpt3_860", "text": "\nThis query will select all document names from the documents table where the document code is not found in the document_sections table.", "metadata": {}}
{"_id": "gpt3_861", "text": "\nThis SQL statement is used to join the party and region tables together, and select the party_name and region_name from each table.", "metadata": {}}
{"_id": "gpt3_862", "text": "\nThis query selects the party name and corresponding region name from the party and region tables, respectively, based on the region_id.", "metadata": {}}
{"_id": "gpt3_863", "text": "\nThis SQL statement is used to join the party and region tables on the region_id column, selecting the party_name and region_name from each table.", "metadata": {}}
{"_id": "gpt3_864", "text": "\nThis query joins the party and region tables on the region_id column to select the party_name and region_name from each table.", "metadata": {}}
{"_id": "gpt3_865", "text": "\nThis query is used to select the party name and region name from the party and region tables, respectively, by joining the two tables on the region_id column.", "metadata": {}}
{"_id": "gpt3_866", "text": "\nThis query will select the id values from the trip table where the duration is greater than or equal to the average duration for trips with a zip code of 94103.", "metadata": {}}
{"_id": "gpt3_867", "text": "\nThis query will select the ids of all trips whose duration is greater than or equal to the average duration of trips with a zip code of 94103.", "metadata": {}}
{"_id": "gpt3_868", "text": "\nThis query will select the id of all trips from the trip table with a duration greater than or equal to the average duration of trips from the zip code 94103.", "metadata": {}}
{"_id": "gpt3_869", "text": "\nThis query will select the id of all trips from the trip table that have a duration greater than or equal to the average duration of trips with a zip code of 94103.", "metadata": {}}
{"_id": "gpt3_870", "text": "\nThis query will return the id of all trips from the trip table that have a duration greater than or equal to the average duration of trips from zip code 94103.", "metadata": {}}
{"_id": "gpt3_871", "text": "\nThis query selects the first names of all students enrolled in the course ACCT-211 with a grade of C.", "metadata": {}}
{"_id": "gpt3_872", "text": "\nThis query selects the first name of all students enrolled in the class 'ACCT-211' and received a grade of 'C'.", "metadata": {}}
{"_id": "gpt3_873", "text": "\nThis query retrieves the first names of all students enrolled in the class ACCT-211 with a grade of C.", "metadata": {}}
{"_id": "gpt3_874", "text": "\nThis query selects the first name of all students who have received a 'C' grade in the course 'ACCT-211'.", "metadata": {}}
{"_id": "gpt3_875", "text": "\nThis query selects the first name of all students who have taken the class ACCT-211 and received a grade of C.", "metadata": {}}
{"_id": "gpt3_876", "text": "\nThis query will return the average number of accesses to all documents in the database.", "metadata": {}}
{"_id": "gpt3_877", "text": "\nThis query returns the average number of accesses for all documents in the table.", "metadata": {}}
{"_id": "gpt3_878", "text": "\nThis query will return the average number of accesses for all documents in the database.", "metadata": {}}
{"_id": "gpt3_879", "text": "\nThis query will return the average number of accesses for all documents in the documents table.", "metadata": {}}
{"_id": "gpt3_880", "text": "\nThe query will return the average number of accesses for all documents in the table.", "metadata": {}}
{"_id": "gpt3_881", "text": "\nThis query will count the number of course_ids in the Student_Course_Enrolment table.", "metadata": {}}
{"_id": "gpt3_882", "text": "\nThis query returns the total number of courses enrolled in by students.", "metadata": {}}
{"_id": "gpt3_883", "text": "\nThis query will return the total number of courses enrolled in by students.", "metadata": {}}
{"_id": "gpt3_884", "text": "\nThis query will return the number of course enrollments in the Student_Course_Enrolment table.", "metadata": {}}
{"_id": "gpt3_885", "text": "\nThis query returns the total number of courses enrolled in by students.", "metadata": {}}
{"_id": "gpt3_886", "text": "\nThis query will return the description of the transaction type with the code \"PUR\", which is \"Purchase\".", "metadata": {}}
{"_id": "gpt3_887", "text": "\nThis query returns the description for the transaction type code \"PUR\", which is \"Purchase\".", "metadata": {}}
{"_id": "gpt3_888", "text": "\nThis query will return the description of the transaction type with the code \"PUR\", which is \"Purchase\".", "metadata": {}}
{"_id": "gpt3_889", "text": "\nThis query will return the description of the transaction type \"PUR\", which stands for purchase.", "metadata": {}}
{"_id": "gpt3_890", "text": "\nThe query will return the description \"Purchase\" for the transaction type code \"PUR\".", "metadata": {}}
{"_id": "gpt3_891", "text": "\nThis query will return the game type with the highest count from the Video_games table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_892", "text": "\nThis query will select the most popular game type from the Video_games table, sorted in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_893", "text": "\nThis query returns the most common game type from the Video_games table, ordered by the count of each game type in descending order, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_894", "text": "\nThis query returns the most popular game type from the Video_games table, ordered by the number of games of each type and limited to the top result.", "metadata": {}}
{"_id": "gpt3_895", "text": "\nThis query returns the most popular game type from the Video_games table, based on the number of entries with each game type. The query will return the most popular game type, ordered by the count of entries with each game type in descending order", "metadata": {}}
{"_id": "gpt3_896", "text": "\nThis query will select the skill_id and skill_description of the most commonly required skill to fix a problem, as determined by the number of references to the skill in the Skills_Required_To_Fix table. The results will be ordered", "metadata": {}}
{"_id": "gpt3_897", "text": "\nThis query selects the skill_id and skill_description of the most required skill to fix from the Skills and Skills_Required_To_Fix tables, and orders them by the count of the most required skill. The result is limited to the", "metadata": {}}
{"_id": "gpt3_898", "text": "\nThis query will select the skill_id and skill_description of the most commonly required skill to fix a problem, based on the Skills and Skills_Required_To_Fix tables. It will group the results by skill_id and order them", "metadata": {}}
{"_id": "gpt3_899", "text": "\nThis query returns the skill_id and skill_description of the most commonly required skill to fix a problem, as identified by the Skills_Required_To_Fix table. The query groups the Skills table by skill_id and orders the results", "metadata": {}}
{"_id": "gpt3_900", "text": "\nThis query selects the skill_id and skill_description of the most frequently required skill to fix a problem, as determined by the Skills and Skills_Required_To_Fix tables. The query groups the data by skill_id and orders it", "metadata": {}}
{"_id": "gpt3_901", "text": "\nThis SQL query will select all studios from the film table that have made at least two films.", "metadata": {}}
{"_id": "gpt3_902", "text": "\nThis query selects the studio from the film table and groups them together based on the studio, then it counts the number of films each studio has and only returns the studios that have two or more films.", "metadata": {}}
{"_id": "gpt3_903", "text": "\nThis SQL query will select the studio from the film table and group them together based on the studio name, and then return only the studios that have at least two films associated with them.", "metadata": {}}
{"_id": "gpt3_904", "text": "\nThis SQL query returns the names of all studios that have produced at least two films in the film table.", "metadata": {}}
{"_id": "gpt3_905", "text": "\nThis query will select the Studio from the film table and group them by Studio, having a count of 2 or more. This means that it will return all Studios that have at least two films in the film table.", "metadata": {}}
{"_id": "gpt3_906", "text": "\nThis query returns the number of financial transactions for each card type code.", "metadata": {}}
{"_id": "gpt3_907", "text": "\nThis query counts the number of financial transactions for each card type code.", "metadata": {}}
{"_id": "gpt3_908", "text": "\nThis query will return the number of financial transactions for each card type code in the Customers_cards table.", "metadata": {}}
{"_id": "gpt3_909", "text": "\nThis query counts the number of financial transactions for each card type code in the Customers_cards table.", "metadata": {}}
{"_id": "gpt3_910", "text": "\nThis query counts the number of financial transactions for each card type code.", "metadata": {}}
{"_id": "gpt3_911", "text": "\nThis SQL statement will select the name of any city from the city table where the county_id is found in the county_public_safety table and has a crime rate less than 100.", "metadata": {}}
{"_id": "gpt3_912", "text": "\nThis statement will select the name of all cities from the city table that are located in counties with a crime rate below 100, as determined by the county_public_safety table.", "metadata": {}}
{"_id": "gpt3_913", "text": "\nThis query will select the name of all cities from the city table that are in a county with a crime rate lower than 100 from the county_public_safety table.", "metadata": {}}
{"_id": "gpt3_914", "text": "\nThis query will select the name of any city from the city table whose county_id is found in the county_public_safety table with a Crime_rate of less than 100.", "metadata": {}}
{"_id": "gpt3_915", "text": "\nThis statement returns the names of cities from a database where the county_id of the city is associated with a county_public_safety table with a crime rate less than 100.", "metadata": {}}
{"_id": "gpt3_916", "text": "\nThis query selects the name of a physician and the name of the department they are affiliated with, where the affiliation is a primary one.", "metadata": {}}
{"_id": "gpt3_917", "text": "\nThis query selects the name of a physician and the name of the department they are affiliated with, based on the primary affiliation.", "metadata": {}}
{"_id": "gpt3_918", "text": "\nThis query retrieves the name of a physician and the department they are affiliated with, where their affiliation is their primary affiliation.", "metadata": {}}
{"_id": "gpt3_919", "text": "\nThis query will select the names of physicians and the names of their primary affiliated departments.", "metadata": {}}
{"_id": "gpt3_920", "text": "\nThis query selects the name of a physician and the name of the department they are affiliated with. It does this by joining the physician, affiliated_with, and department tables, and filtering the results to only include those with a PrimaryAffiliation of", "metadata": {}}
{"_id": "gpt3_921", "text": "\nThis query will return a list of all distinct product names from the products table that have a characteristic of \"warm\".", "metadata": {}}
{"_id": "gpt3_922", "text": "\nThis SQL query will select distinct product names from the products, product_characteristics, and characteristics tables where the characteristic name is \"warm\".", "metadata": {}}
{"_id": "gpt3_923", "text": "\nThis query will return a list of distinct product names that have the characteristic of being \"warm\".", "metadata": {}}
{"_id": "gpt3_924", "text": "\nThis query will return a list of distinct product names from the products table that have the characteristic \"warm\" associated with them.", "metadata": {}}
{"_id": "gpt3_925", "text": "\nThis query will select the distinct product names from the products, product_characteristics, and characteristics tables where the characteristic name is \"warm\".", "metadata": {}}
{"_id": "gpt3_926", "text": "\nThis query retrieves the three longest trips from the 'trip' table, sorted by duration in descending order. It returns the 'id' and 'duration' columns for each trip.", "metadata": {}}
{"_id": "gpt3_927", "text": "\nThis query will select the id and duration of the top 3 longest trips from the trip table, ordered by duration in descending order.", "metadata": {}}
{"_id": "gpt3_928", "text": "\nThis query will select the id and duration columns from the trip table and order them by duration in descending order, returning the top 3 results.", "metadata": {}}
{"_id": "gpt3_929", "text": "\nThis query will select the three trips with the longest duration from the trip table and return the id and duration of each trip.", "metadata": {}}
{"_id": "gpt3_930", "text": "\nThis query returns the 3 longest trips from the trip table, sorted by duration in descending order. It returns the id and duration of each trip.", "metadata": {}}
{"_id": "gpt3_931", "text": "\nThis query will return the average age of students grouped by sex. It will return two columns, one with the average age and one with the sex.", "metadata": {}}
{"_id": "gpt3_932", "text": "\nThis query will return the average age for each sex from the Student table.", "metadata": {}}
{"_id": "gpt3_933", "text": "\nThis query returns the average age of students grouped by their sex. It will return two values, one for male students and one for female students.", "metadata": {}}
{"_id": "gpt3_934", "text": "\nThis query will return the average age of all students grouped by sex, with each result representing the average age of students with the specified sex.", "metadata": {}}
{"_id": "gpt3_935", "text": "\nThis query will return the average age of all students grouped by their sex.", "metadata": {}}
{"_id": "gpt3_936", "text": "\nThis query selects the names of all female friends of Alice from the Person and PersonFriend tables.", "metadata": {}}
{"_id": "gpt3_937", "text": "\nThis query selects the female friends of Alice from the Person and PersonFriend tables.", "metadata": {}}
{"_id": "gpt3_938", "text": "\nThis query selects all female friends of Alice from the Person and PersonFriend tables.", "metadata": {}}
{"_id": "gpt3_939", "text": "\nThis query will select the names of female friends of Alice from the Person and PersonFriend tables.", "metadata": {}}
{"_id": "gpt3_940", "text": "\nThis query selects the friends of 'Alice' who are female from the Person and PersonFriend tables.", "metadata": {}}
{"_id": "gpt3_941", "text": "\nThis query will select the first name, last name and salary from the employees table where the salary is less than 6000.", "metadata": {}}
{"_id": "gpt3_942", "text": "\nThis query will select the first name, last name, and salary of all employees whose salary is less than $6,000.", "metadata": {}}
{"_id": "gpt3_943", "text": "\nThis query selects the first name, last name, and salary from the employees table where the salary is less than $6,000.", "metadata": {}}
{"_id": "gpt3_944", "text": "\nThis SQL query selects the first name, last name, and salary of all employees from the employees table where the salary is less than 6000.", "metadata": {}}
{"_id": "gpt3_945", "text": "\nThis query will select the first name, last name, and salary of all employees who have a salary of less than $6,000.", "metadata": {}}
{"_id": "gpt3_946", "text": "\nThis query returns the count of distinct majors and distinct city codes from the student table.", "metadata": {}}
{"_id": "gpt3_947", "text": "\nThis query counts the number of distinct majors and the number of distinct city codes from the student table.", "metadata": {}}
{"_id": "gpt3_948", "text": "\nThis query returns the count of distinct majors and the count of distinct city codes from the student table.", "metadata": {}}
{"_id": "gpt3_949", "text": "\nThis query will return the count of unique majors and unique city codes from the student table.", "metadata": {}}
{"_id": "gpt3_950", "text": "\nThis query returns the total number of distinct majors and distinct city codes from the student table.", "metadata": {}}
{"_id": "gpt3_951", "text": "\nThis query returns the product name and the number of times it was ordered from the orders, order_items, and products tables.", "metadata": {}}
{"_id": "gpt3_952", "text": "\nThis query will select the product name and the count of each product from the orders, order_items, and products tables, and group the results by product_id.", "metadata": {}}
{"_id": "gpt3_953", "text": "\nThis query selects the product name and the number of times it has been ordered from the orders, order_items, and products tables. It joins the tables on their respective order_id and product_id columns, and then groups the results by", "metadata": {}}
{"_id": "gpt3_954", "text": "\nThis query will return the product name and the count of each product ordered from the orders, order_items, and products tables.", "metadata": {}}
{"_id": "gpt3_955", "text": "\nThis query will return a list of products and the number of times they have been ordered, grouped by product.", "metadata": {}}
{"_id": "gpt3_956", "text": "\nThis query counts the number of problems associated with each product ID from the product and problems tables and groups them by product ID.", "metadata": {}}
{"_id": "gpt3_957", "text": "\nThis query counts the number of problems associated with each product and groups them by the product ID.", "metadata": {}}
{"_id": "gpt3_958", "text": "\nThis query counts the number of problems associated with each product ID in the product table and groups them by product ID.", "metadata": {}}
{"_id": "gpt3_959", "text": "\nThis query counts the number of problems associated with each product_id in the product table, and returns the count and the product_id.", "metadata": {}}
{"_id": "gpt3_960", "text": "\nThis query counts the number of problems associated with each product ID in the product and problems tables, and groups the results by product ID.", "metadata": {}}
{"_id": "gpt3_961", "text": "\nThis query returns the ranks of captains who were in charge of both cutters and armed schooners.", "metadata": {}}
{"_id": "gpt3_962", "text": "\nThis query will return the rank of all captains who were in command of both a cutter and an armed schooner.", "metadata": {}}
{"_id": "gpt3_963", "text": "\nThis query returns the ranks of captains who commanded both a Cutter and an Armed Schooner.", "metadata": {}}
{"_id": "gpt3_964", "text": "\nThis query returns the rank of captains who both commanded a cutter and an armed schooner.", "metadata": {}}
{"_id": "gpt3_965", "text": "\nThe query will return the rank of captains who have captained both a Cutter and an Armed schooner.", "metadata": {}}
{"_id": "gpt3_966", "text": "\nThis query returns the names of students who have not enrolled in any courses.", "metadata": {}}
{"_id": "gpt3_967", "text": "\nThis query will select all personal names from the Students table that are not associated with any student_course_enrolment records.", "metadata": {}}
{"_id": "gpt3_968", "text": "\nThis statement returns the names of students from the Students table who are not enrolled in any courses from the Student_Course_Enrolment table.", "metadata": {}}
{"_id": "gpt3_969", "text": "\nThis query returns the personal names of students who are not enrolled in any courses.", "metadata": {}}
{"_id": "gpt3_970", "text": "\nThis query will return a list of all student names from the Students table that are not enrolled in any courses in the Student_Course_Enrolment table.", "metadata": {}}
{"_id": "gpt3_971", "text": "\nThis query returns a list of distinct titles from the vocals and songs tables, excluding any titles in the songs table that have a vocal type of \"lead\".", "metadata": {}}
{"_id": "gpt3_972", "text": "\nThis query selects the distinct titles of all the songs from the vocals and songs tables, except for those that are designated as lead vocals.", "metadata": {}}
{"_id": "gpt3_973", "text": "\nThis query selects all distinct titles from the vocals and songs tables, except for those titles that have a type of \"lead\" in the vocals table.", "metadata": {}}
{"_id": "gpt3_974", "text": "\nThis query returns the distinct titles of all songs that do not have a lead vocalist.", "metadata": {}}
{"_id": "gpt3_975", "text": "\nThis query will select all distinct titles from the vocals table that do not have a lead vocalist.", "metadata": {}}
{"_id": "gpt3_976", "text": "\nThis query retrieves the name and hours of the project with the most assignments, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_977", "text": "\nThis query selects the name and hours of the project with the most assignments, ordered by the count of assignments in descending order, and limited to the first result.", "metadata": {}}
{"_id": "gpt3_978", "text": "\nThis query selects the name and hours of the project with the most assigned people, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_979", "text": "\nThis query selects the name and hours of the project with the most assigned people, ordered by the count of assigned people in descending order, and limited to one result.", "metadata": {}}
{"_id": "gpt3_980", "text": "\nThis query selects the name and hours of the project with the most assigned people, ordered by the count of assigned people in descending order, and limits the result to one row.", "metadata": {}}
{"_id": "gpt3_981", "text": "\nThis query will select the problem description from the problems table for any problem that was reported by a staff member with the first name of \"Christop\".", "metadata": {}}
{"_id": "gpt3_982", "text": "\nThis query will select the problem description from the problems table for all problems reported by a staff member with the first name of Christop.", "metadata": {}}
{"_id": "gpt3_983", "text": "\nThis query will select the problem description from the problems table for all entries where the reported by staff id matches the staff id of a staff member with the first name of \"Christop\".", "metadata": {}}
{"_id": "gpt3_984", "text": "\nThis statement will select the problem descriptions from the problems table that were reported by a staff member with the first name of \"Christop\".", "metadata": {}}
{"_id": "gpt3_985", "text": "\nThis query will select the problem description from the problems table for any problems reported by a staff member whose first name is Christop.", "metadata": {}}
{"_id": "gpt3_986", "text": "\nThis query retrieves the account_id, customer_id, and account_name from the Accounts table.", "metadata": {}}
{"_id": "gpt3_987", "text": "\nThis statement is selecting the account_id, customer_id, and account_name from the Accounts table.", "metadata": {}}
{"_id": "gpt3_988", "text": "\nThis statement is selecting the account_id, customer_id, and account_name from the Accounts table.", "metadata": {}}
{"_id": "gpt3_989", "text": "\nThis statement retrieves the account ID, customer ID, and account name from the Accounts table.", "metadata": {}}
{"_id": "gpt3_990", "text": "\nThis query will select the account_id, customer_id, and account_name from the Accounts table.", "metadata": {}}
{"_id": "gpt3_991", "text": "\nThis statement will select the payment method code and phone number associated with the party whose email address is \"enrico09@example.com\" from the parties table.", "metadata": {}}
{"_id": "gpt3_992", "text": "\nThis query will select the payment method code and phone number from the parties table for the record with an email address of \"enrico09@example.com\".", "metadata": {}}
{"_id": "gpt3_993", "text": "\nThis statement will select the payment method code and party phone associated with the party email \"enrico09@example.com\" from the parties table.", "metadata": {}}
{"_id": "gpt3_994", "text": "\nThis statement will select the payment method code and party phone associated with the party email \"enrico09@example.com\" from the Parties table.", "metadata": {}}
{"_id": "gpt3_995", "text": "\nThis statement will select the payment method code and phone number from the parties table for the party with the email address \"enrico09@example.com\".", "metadata": {}}
{"_id": "gpt3_996", "text": "\nThis query selects the name of any companies that are not headquartered in the United States.", "metadata": {}}
{"_id": "gpt3_997", "text": "\nThis query will select the names of all companies that are not headquartered in the United States.", "metadata": {}}
{"_id": "gpt3_998", "text": "\nThis query selects the names of companies from a database that are not headquartered in the United States.", "metadata": {}}
{"_id": "gpt3_999", "text": "\nThis query will select the names of all companies whose headquarters are not in the United States.", "metadata": {}}
{"_id": "gpt3_1000", "text": "\nThis query will select the names of all companies from a table called Companies that have a headquarters located outside of the United States.", "metadata": {}}
{"_id": "gpt3_1001", "text": "\nThe SELECT * FROM COURSE ORDER BY Credits statement is used to retrieve all records from the COURSE table, sorted in ascending order by the Credits field. This statement can be used to quickly and easily view the courses available in a database, sorted", "metadata": {}}
{"_id": "gpt3_1002", "text": "\nThis query will return all of the records in the COURSE table, sorted in ascending order by the Credits column.", "metadata": {}}
{"_id": "gpt3_1003", "text": "\nThis SQL query will return all records from the COURSE table, sorted by Credits in ascending order.", "metadata": {}}
{"_id": "gpt3_1004", "text": "\nThe SELECT * FROM COURSE ORDER BY Credits statement is used to retrieve all the records from the COURSE table and order them by the Credits column. This statement will return all the records in the COURSE table, sorted by the Credits column in", "metadata": {}}
{"_id": "gpt3_1005", "text": "\nThis SQL statement retrieves all records from the COURSE table and orders them by the Credits column in ascending order.", "metadata": {}}
{"_id": "gpt3_1006", "text": "\nThis query will return the minimum seating capacity, the maximum seating capacity, and the average seating capacity from the track table.", "metadata": {}}
{"_id": "gpt3_1007", "text": "\nThis query returns the minimum, maximum, and average seating capacity of the track table, which includes information about various tracks and their seating capacity. The results of the query would be the minimum seating capacity, maximum seating capacity, and average seating capacity of", "metadata": {}}
{"_id": "gpt3_1008", "text": "\nThis query will return the minimum seating capacity, maximum seating capacity, and average seating capacity from the track table.", "metadata": {}}
{"_id": "gpt3_1009", "text": "\nThis query returns the minimum seating capacity, the maximum seating capacity, and the average seating capacity from the track table.", "metadata": {}}
{"_id": "gpt3_1010", "text": "\nThis query will return the minimum seating capacity, maximum seating capacity, and average seating capacity from the track table.", "metadata": {}}
{"_id": "gpt3_1011", "text": "\nThis query will select the name of all wines made from red grapes that cost more than 50.", "metadata": {}}
{"_id": "gpt3_1012", "text": "\nThis query will select the names of wines that are made from red grapes and cost more than 50 dollars.", "metadata": {}}
{"_id": "gpt3_1013", "text": "\nThis query selects the names of wines from the WINE table that are made with red grapes and have a price greater than 50.", "metadata": {}}
{"_id": "gpt3_1014", "text": "\nThis query will return the names of wines made with red grapes that cost more than 50.", "metadata": {}}
{"_id": "gpt3_1015", "text": "\nThis query selects the name of wines from the WINE table where the grapes used to make the wine are from the Grapes table and are red in color, and the price of the wine is over 50.", "metadata": {}}
{"_id": "gpt3_1016", "text": "\nThis query will select the state from the college table (T1) for all colleges that have a student listed as a 'striker' in the tryout table (T2).", "metadata": {}}
{"_id": "gpt3_1017", "text": "\nThis query will select the state from the college table (T1) for all colleges that have a tryout for a striker (T2).", "metadata": {}}
{"_id": "gpt3_1018", "text": "\nThis query will select the state of all colleges that have a student playing the position of striker in the tryouts.", "metadata": {}}
{"_id": "gpt3_1019", "text": "\nThis query will select the state from the college table (T1) for all colleges (T1.cName) that have tryouts with a player position of 'striker' (T2.pPos).", "metadata": {}}
{"_id": "gpt3_1020", "text": "\nThis statement will select the state from the college table for all colleges where a student with a position of 'striker' has a tryout.", "metadata": {}}
{"_id": "gpt3_1021", "text": "\nThis SQL statement will count the number of customers who do not have accounts.", "metadata": {}}
{"_id": "gpt3_1022", "text": "\nThis query returns the number of customers who do not have any accounts.", "metadata": {}}
{"_id": "gpt3_1023", "text": "\nThis query returns the number of customers who do not have an associated account.", "metadata": {}}
{"_id": "gpt3_1024", "text": "\nThis query returns the count of customers who do not have an account in the Accounts table.", "metadata": {}}
{"_id": "gpt3_1025", "text": "\nThis query returns the count of customers who do not have any accounts.", "metadata": {}}
{"_id": "gpt3_1026", "text": "\nThis query selects the director from the Movie table and groups the results by director, only returning the directors who have only one movie in the table.", "metadata": {}}
{"_id": "gpt3_1027", "text": "\nThis query returns the directors who have only directed one movie.", "metadata": {}}
{"_id": "gpt3_1028", "text": "\nThis query returns a list of directors who have only directed one movie.", "metadata": {}}
{"_id": "gpt3_1029", "text": "\nThis query returns the directors of movies that have only one movie associated with them.", "metadata": {}}
{"_id": "gpt3_1030", "text": "\nThis query returns a list of directors from the Movie table who have only directed one movie.", "metadata": {}}
{"_id": "gpt3_1031", "text": "\nThis query will select the name of Zach's friend from the PersonFriend table for the most recent year for which Zach has a friend.", "metadata": {}}
{"_id": "gpt3_1032", "text": "\nThis query will select the friend of Zach with the most recent year from the PersonFriend table.", "metadata": {}}
{"_id": "gpt3_1033", "text": "\nThis query will select the friend of the person named Zach from the PersonFriend table for the most recent year.", "metadata": {}}
{"_id": "gpt3_1034", "text": "\nThis statement will select the friend of Zach from the PersonFriend table for the most recent year that Zach has a friend.", "metadata": {}}
{"_id": "gpt3_1035", "text": "\nThis query will select the friend of the person named 'Zach' who was added in the most recent year.", "metadata": {}}
{"_id": "gpt3_1036", "text": "\nThis query counts the number of vocals associated with the song \"Demon Kitty Rag\".", "metadata": {}}
{"_id": "gpt3_1037", "text": "\nThis query will return the total number of vocals associated with the song \"Demon Kitty Rag\".", "metadata": {}}
{"_id": "gpt3_1038", "text": "\nThis query counts the number of vocals associated with the song \"Demon Kitty Rag\".", "metadata": {}}
{"_id": "gpt3_1039", "text": "\nThis query will return the total number of vocals in the song \"Demon Kitty Rag\".", "metadata": {}}
{"_id": "gpt3_1040", "text": "\nThis query returns the total number of vocals associated with the song \"Demon Kitty Rag\".", "metadata": {}}
{"_id": "gpt3_1041", "text": "\nThis query will select the title and rental rate of the film with the highest rental rate from the film table, and order the results in descending order.", "metadata": {}}
{"_id": "gpt3_1042", "text": "\nThis query selects the title and rental rate of a film, and orders the results by the highest rental rate, limiting the results to one record. The query will return the title and rental rate of the film with the highest rental rate.", "metadata": {}}
{"_id": "gpt3_1043", "text": "\nThis query will select the title and rental rate of the film with the highest rental rate and display the results in descending order.", "metadata": {}}
{"_id": "gpt3_1044", "text": "\nThis query will select the title and rental rate of the film with the highest rental rate from the film table and order the results in descending order. The results will be limited to only one record.", "metadata": {}}
{"_id": "gpt3_1045", "text": "\nThis query will select the title and rental rate of the film with the highest rental rate from the film table and order them from highest to lowest. The result will be the title and rental rate of the film with the highest rental rate.", "metadata": {}}
{"_id": "gpt3_1046", "text": "\nThis query will count the total number of records in the COURSES table.", "metadata": {}}
{"_id": "gpt3_1047", "text": "\nThis query will return the total number of courses in the COURSES table.", "metadata": {}}
{"_id": "gpt3_1048", "text": "\nThis query returns the total number of records in the COURSES table.", "metadata": {}}
{"_id": "gpt3_1049", "text": "\nThis query will return the total number of courses in the COURSES table.", "metadata": {}}
{"_id": "gpt3_1050", "text": "\nThis query returns the total number of courses in the COURSES table.", "metadata": {}}
{"_id": "gpt3_1051", "text": "\nThe query will return the claim status description for the claim status name \"Open\" from the table claims_processing_stages.", "metadata": {}}
{"_id": "gpt3_1052", "text": "\nThis query will return the description of the claim status \"Open\" from the claims_processing_stages table.", "metadata": {}}
{"_id": "gpt3_1053", "text": "\nThe query would return the claim status description associated with the claim status name \"Open\" from the claims_processing_stages table.", "metadata": {}}
{"_id": "gpt3_1054", "text": "\nThe query will return the description for the \"Open\" claim status from the claims_processing_stages table.", "metadata": {}}
{"_id": "gpt3_1055", "text": "\nThe query will return the claim status description for a claim with a status name of \"Open\".", "metadata": {}}
{"_id": "gpt3_1056", "text": "\nThis query selects the first and last names of the top 5 most recent customers from the customers and invoices tables, ordered by their most recent invoice date.", "metadata": {}}
{"_id": "gpt3_1057", "text": "\nThis query selects the first and last name of the 5 most recently invoiced customers from the customers and invoices tables.", "metadata": {}}
{"_id": "gpt3_1058", "text": "\nThis SQL query selects the first and last name of the 5 most recent customers from the customers and invoices tables. It joins the two tables together on the customer_id column and orders the results by the invoice_date in descending order.", "metadata": {}}
{"_id": "gpt3_1059", "text": "\nThis query selects the first and last names of the 5 most recently invoiced customers from the customers and invoices tables.", "metadata": {}}
{"_id": "gpt3_1060", "text": "\nThis SQL query will select the first and last name of the five most recent customers from the customers and invoices tables, ordered by the invoice date.", "metadata": {}}
{"_id": "gpt3_1061", "text": "\nThis query returns a list of service names from the services table, sorted alphabetically by service name.", "metadata": {}}
{"_id": "gpt3_1062", "text": "\nThis query will select all service names from the services table, and order them alphabetically.", "metadata": {}}
{"_id": "gpt3_1063", "text": "\nThis query returns a list of service names from the services table, sorted in alphabetical order.", "metadata": {}}
{"_id": "gpt3_1064", "text": "\nThis query will select all service names from the services table and order them alphabetically.", "metadata": {}}
{"_id": "gpt3_1065", "text": "\nThis query will return a list of all services in the services table, sorted in alphabetical order by service_name.", "metadata": {}}
{"_id": "gpt3_1066", "text": "\nThis statement will select the names of all members from the member table who have not attended any meetings, as indicated by their absence from the member_attendance table.", "metadata": {}}
{"_id": "gpt3_1067", "text": "\nThis query will select the name of members from the member table who have not attended any meetings, as indicated by their absence from the member_attendance table.", "metadata": {}}
{"_id": "gpt3_1068", "text": "\nThis statement will select the name of any members who are not present in the member_attendance table.", "metadata": {}}
{"_id": "gpt3_1069", "text": "\nThis statement will select the Name of all members from the member table who are not present in the member_attendance table.", "metadata": {}}
{"_id": "gpt3_1070", "text": "\nThis query will select the name of all members who have not attended any member attendance events.", "metadata": {}}
{"_id": "gpt3_1071", "text": "\nThis query will select the rank, first name, and last name of all faculty members from a table.", "metadata": {}}
{"_id": "gpt3_1072", "text": "\nThis query will select the rank, first name, and last name from the Faculty table.", "metadata": {}}
{"_id": "gpt3_1073", "text": "\nThis query selects the rank, first name, and last name of faculty members from a database.", "metadata": {}}
{"_id": "gpt3_1074", "text": "\nThis query will select the rank, first name, and last name of faculty members from a database.", "metadata": {}}
{"_id": "gpt3_1075", "text": "\nThis query retrieves the rank, first name, and last name of faculty members from a database.", "metadata": {}}
{"_id": "gpt3_1076", "text": "\nThis query will return the total sum of all share counts from the TRANSACTIONS table.", "metadata": {}}
{"_id": "gpt3_1077", "text": "\nThe sum of all share counts in the TRANSACTIONS table is the result of this query.", "metadata": {}}
{"_id": "gpt3_1078", "text": "\nThis query will return the total sum of all share counts from the TRANSACTIONS table.", "metadata": {}}
{"_id": "gpt3_1079", "text": "\nThis query will return the sum of all the share counts from the TRANSACTIONS table.", "metadata": {}}
{"_id": "gpt3_1080", "text": "\nThe query will return the total sum of all share_count values from the TRANSACTIONS table.", "metadata": {}}
{"_id": "gpt3_1081", "text": "\nThis query will select the names of all races from a table where the time is greater than 12:00:00 or less than 09:00:00.", "metadata": {}}
{"_id": "gpt3_1082", "text": "\nThis query will select the name of any race from the table that has a time greater than 12:00:00 or less than 09:00:00.", "metadata": {}}
{"_id": "gpt3_1083", "text": "\nThis statement will select the name of all races that have a time greater than 12:00:00 or a time less than 09:00:00.", "metadata": {}}
{"_id": "gpt3_1084", "text": "\nThis query will select the name of any races that have a time greater than 12:00:00 or less than 09:00:00.", "metadata": {}}
{"_id": "gpt3_1085", "text": "\nThis query returns the names of all races that have a time greater than 12:00:00 or less than 09:00:00.", "metadata": {}}
{"_id": "gpt3_1086", "text": "\nThis query will select all paper titles written by Stephanie Weirich.", "metadata": {}}
{"_id": "gpt3_1087", "text": "\nThis query will select the titles of all papers written by Stephanie Weirich.", "metadata": {}}
{"_id": "gpt3_1088", "text": "\nThis query will return all papers authored by Stephanie Weirich.", "metadata": {}}
{"_id": "gpt3_1089", "text": "\nThis query will select the titles of all papers authored by Stephanie Weirich.", "metadata": {}}
{"_id": "gpt3_1090", "text": "\nThis query selects the titles of all papers written by Stephanie Weirich.", "metadata": {}}
{"_id": "gpt3_1091", "text": "\nThis query returns the total number of unique teams in the match_season table.", "metadata": {}}
{"_id": "gpt3_1092", "text": "\nThis query will return the number of distinct teams in the match_season table.", "metadata": {}}
{"_id": "gpt3_1093", "text": "\nThis query returns the total number of distinct teams in the match_season table.", "metadata": {}}
{"_id": "gpt3_1094", "text": "\nThis query will count the number of distinct teams in the match_season table.", "metadata": {}}
{"_id": "gpt3_1095", "text": "\nThis query will return the number of distinct teams in the match_season table.", "metadata": {}}
{"_id": "gpt3_1096", "text": "\nThis query will return the locations of tracks where the seating capacity is between 70000 and 90000.", "metadata": {}}
{"_id": "gpt3_1097", "text": "\nThis query will return the locations of tracks that have a seating capacity between 70000 and 90000.", "metadata": {}}
{"_id": "gpt3_1098", "text": "\nThis query will return the locations of tracks that have a seating capacity between 70000 and 90000.", "metadata": {}}
{"_id": "gpt3_1099", "text": "\nThis query would return the locations of tracks with seating capacities between 70,000 and 90,000.", "metadata": {}}
{"_id": "gpt3_1100", "text": "\nThis query will return the locations of tracks that have a seating capacity between 70000 and 90000.", "metadata": {}}
{"_id": "gpt3_1101", "text": "\nThis query retrieves the customer details with the most policies, ordered by the number of policies, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_1102", "text": "\nThis query selects the customer details from the customers table and groups them by customer details, ordering the results by the number of policies associated with each customer and limiting the result to the customer with the most policies.", "metadata": {}}
{"_id": "gpt3_1103", "text": "\nThis query selects the customer details from the customers table that has the most policies in the policies table, and orders them by count in descending order, with a limit of one.", "metadata": {}}
{"_id": "gpt3_1104", "text": "\nThis query retrieves the customer details from the customers table that is associated with the most policies in the policies table, and orders them by the count of policies in descending order, with the top result being returned.", "metadata": {}}
{"_id": "gpt3_1105", "text": "\nThis query selects the customer details from the customers table that has the most policies in the policies table and orders them by count in descending order, with a limit of 1.", "metadata": {}}
{"_id": "gpt3_1106", "text": "\nThis query counts the number of entries for each cName in the tryout table, and orders them in descending order.", "metadata": {}}
{"_id": "gpt3_1107", "text": "\nThis query will count the number of entries for each cName in the tryout table and order them in descending order.", "metadata": {}}
{"_id": "gpt3_1108", "text": "\nThis query will return a list of cName values and a count of how many times each cName value appears in the tryout table, sorted in descending order by the count.", "metadata": {}}
{"_id": "gpt3_1109", "text": "\nThis query returns the number of rows for each cName in the tryout table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_1110", "text": "\nThis query will count the number of entries for each cName in the tryout table and then order the results from highest to lowest.", "metadata": {}}
{"_id": "gpt3_1111", "text": "\nThis query will return a list of all Student IDs from students who live in the city with the code \"CHI\".", "metadata": {}}
{"_id": "gpt3_1112", "text": "\nThis query will return a list of student IDs from the Student table who have a city code of \"CHI\".", "metadata": {}}
{"_id": "gpt3_1113", "text": "\nThis statement will select the StuID from the Student table where the city code is equal to \"CHI\".", "metadata": {}}
{"_id": "gpt3_1114", "text": "\nThis query will select the student ID of all students who live in the city with the code CHI.", "metadata": {}}
{"_id": "gpt3_1115", "text": "\nThis statement will select all student IDs from the Student table where the city code is \"CHI\".", "metadata": {}}
{"_id": "gpt3_1116", "text": "\nThis query will return the name and open year of all manufacturers that have more than 10 shops, or less than 10 factories.", "metadata": {}}
{"_id": "gpt3_1117", "text": "\nThis query will return the name and open year of all manufacturers that have more than 10 shops or less than 10 factories.", "metadata": {}}
{"_id": "gpt3_1118", "text": "\nThis statement selects the name and open year of all manufacturers that have more than 10 shops or less than 10 factories.", "metadata": {}}
{"_id": "gpt3_1119", "text": "\nThis query will return the name and open year of all manufacturers with more than 10 shops or fewer than 10 factories.", "metadata": {}}
{"_id": "gpt3_1120", "text": "\nThis query will return the name and open year of all manufacturers that have more than 10 shops or fewer than 10 factories.", "metadata": {}}
{"_id": "gpt3_1121", "text": "\nThis query returns the names of channels from a table, ordered by their rating in percent in descending order.", "metadata": {}}
{"_id": "gpt3_1122", "text": "\nThe above SQL query selects the name of a channel from a table and orders the results by rating in percent in descending order.", "metadata": {}}
{"_id": "gpt3_1123", "text": "\nThis query will return a list of the names of all channels in the database, ordered from highest to lowest rating in percent.", "metadata": {}}
{"_id": "gpt3_1124", "text": "\nThis query will return a list of names from the channel table, ordered by their rating in percent, from highest to lowest.", "metadata": {}}
{"_id": "gpt3_1125", "text": "\nThis query will select the name of each channel from the table, and order them by their rating in percent, from highest to lowest.", "metadata": {}}
{"_id": "gpt3_1126", "text": "\nThis query will return all payment dates from the payment table where the amount is greater than 10, as well as all payment dates from the payment table where the staff member associated with the payment has a first name of 'Elsa'.", "metadata": {}}
{"_id": "gpt3_1127", "text": "\nThis query will return all payment dates from payments with an amount greater than 10, as well as payment dates from payments made by staff with the first name of Elsa.", "metadata": {}}
{"_id": "gpt3_1128", "text": "\nThis query is selecting all payment dates from the payment table where the amount is greater than 10, then selecting all payment dates from the payment table where the staff_id matches a staff member with the first name 'Elsa'. The results are then combined", "metadata": {}}
{"_id": "gpt3_1129", "text": "\nThis query returns the payment dates from the payment table for all payments with an amount greater than 10, as well as payment dates from the payment table for payments made by staff with the first name 'Elsa'.", "metadata": {}}
{"_id": "gpt3_1130", "text": "\nThis query will return all payment dates from the payment table where the amount is greater than 10, as well as all payment dates from the payment table where the staff_id matches the staff_id of the staff member with the first name 'Elsa", "metadata": {}}
{"_id": "gpt3_1131", "text": "\nThis statement will retrieve the vehicle details associated with the vehicle ID of 1 from the Vehicles table.", "metadata": {}}
{"_id": "gpt3_1132", "text": "\nThis query will retrieve the details of a vehicle with the ID of 1 from the Vehicles table.", "metadata": {}}
{"_id": "gpt3_1133", "text": "\nThis query will select the vehicle details from the Vehicles table for the vehicle with an ID of 1.", "metadata": {}}
{"_id": "gpt3_1134", "text": "\nThis query will select the details of the vehicle with the ID of 1 from the Vehicles table.", "metadata": {}}
{"_id": "gpt3_1135", "text": "\nThis query will retrieve the details of a vehicle with the ID of 1 from the Vehicles table.", "metadata": {}}
{"_id": "gpt3_1136", "text": "\nThis query returns the club_id and gold of the club with the highest number of match results from the match_result table, as ordered by the coach table.", "metadata": {}}
{"_id": "gpt3_1137", "text": "\nThis query returns the club_id and gold of the club with the most match results, ordered by the number of matches.", "metadata": {}}
{"_id": "gpt3_1138", "text": "\nThis query selects the club_id and gold of the match_result table and joins it with the coach table on the club_id. It then groups the results by club_id and orders them in descending order by count. The query then", "metadata": {}}
{"_id": "gpt3_1139", "text": "\nThis query retrieves the club ID and gold won from the match_result table for the club associated with the coach with the most matches, ordered by the number of matches in descending order and limited to the top result.", "metadata": {}}
{"_id": "gpt3_1140", "text": "\nThis query selects the club_id and the gold from the match_result table and joins it with the coach table on the club_id. The query then groups the results by club_id and orders them in descending order by the count of", "metadata": {}}
{"_id": "gpt3_1141", "text": "\nThis SQL query will select the apartment type code and count the number of apartments for each type, and then order the results by count in ascending order.", "metadata": {}}
{"_id": "gpt3_1142", "text": "\nThis query will select the apartment type code and count the number of apartments associated with each code, then order the results in ascending order according to the count.", "metadata": {}}
{"_id": "gpt3_1143", "text": "\nThis statement will select the apartment type code and count the number of apartments for each type code, then order the results by the count in ascending order.", "metadata": {}}
{"_id": "gpt3_1144", "text": "\nThis query returns the number of apartments for each type of apartment code, ordered from least to greatest.", "metadata": {}}
{"_id": "gpt3_1145", "text": "\nThis query summarizes the number of apartments of each type code in a table. It returns the apt_type_code and the count of each type code, sorted in ascending order by the count.", "metadata": {}}
{"_id": "gpt3_1146", "text": "\nThis query selects the authors whose submissions have been accepted to more than one workshop.", "metadata": {}}
{"_id": "gpt3_1147", "text": "\nThis query selects the authors from the acceptance and submission tables who have had more than one submission accepted to a workshop.", "metadata": {}}
{"_id": "gpt3_1148", "text": "\nThis query selects the authors whose submissions have been accepted to more than one workshop.", "metadata": {}}
{"_id": "gpt3_1149", "text": "\nThis statement will select the authors from the acceptance and submission tables who have had more than one submission accepted to a workshop.", "metadata": {}}
{"_id": "gpt3_1150", "text": "\nThis query selects the authors from the acceptance table who have more than one workshop accepted. It does this by joining the acceptance table and the submission table on the Submission_ID column and then grouping by the Author column and counting the distinct workshop_id", "metadata": {}}
{"_id": "gpt3_1151", "text": "\nThis query selects the name and team_id of the team with the lowest average salary from a join of the team and salary tables, ordering the results by ascending average salary and limiting the result to one row.", "metadata": {}}
{"_id": "gpt3_1152", "text": "\nThis query retrieves the name and team_id of the team with the lowest average salary, ordered in ascending order.", "metadata": {}}
{"_id": "gpt3_1153", "text": "\nThis query selects the name and team_id of the team with the lowest average salary from the team and salary tables, ordered by the lowest average salary.", "metadata": {}}
{"_id": "gpt3_1154", "text": "\nThis query selects the name and team_id of the team with the lowest average salary, ordered by the average salary in ascending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_1155", "text": "\nThis query selects the name and team ID of the team with the lowest average salary from the team and salary tables, ordered in ascending order.", "metadata": {}}
{"_id": "gpt3_1156", "text": "\nThis query will select the first name (fname) and last name (lname) of authors from a database and order them by last name (lname).", "metadata": {}}
{"_id": "gpt3_1157", "text": "\nThis query will select the first name and last name of all authors from the authors table and order them alphabetically by last name.", "metadata": {}}
{"_id": "gpt3_1158", "text": "\nThis statement will select the first name and last name from the authors table and order the results by the last name.", "metadata": {}}
{"_id": "gpt3_1159", "text": "\nThis query selects the first and last names of authors from a database, and orders the results by last name.", "metadata": {}}
{"_id": "gpt3_1160", "text": "\nThis query returns a list of authors' first and last names ordered alphabetically by last name.", "metadata": {}}
{"_id": "gpt3_1161", "text": "\nThis query retrieves the title, year, and director of movies from the movie table, sorted in ascending order by budget_million.", "metadata": {}}
{"_id": "gpt3_1162", "text": "\nThis query will select the title, year, and director of a movie from the movie table, and order the results by budget in descending order.", "metadata": {}}
{"_id": "gpt3_1163", "text": "\nThis query will select the title, year and director of movies from the movie table, and order them by their budget in ascending order.", "metadata": {}}
{"_id": "gpt3_1164", "text": "\nThis query will return the title, year, and director of all movies in the movie table, sorted by budget in descending order.", "metadata": {}}
{"_id": "gpt3_1165", "text": "\nThis query will select the title, year, and director of movies, and order the results by budget in descending order.", "metadata": {}}
{"_id": "gpt3_1166", "text": "\nThis query will select all names from the channel table where the owner is not equal to 'CCTV'.", "metadata": {}}
{"_id": "gpt3_1167", "text": "\nThis query will select the names of all channels from the channel table where the owner is not CCTV.", "metadata": {}}
{"_id": "gpt3_1168", "text": "\nThis query will select the name of all channels from the channel table whose owner is not CCTV.", "metadata": {}}
{"_id": "gpt3_1169", "text": "\nThis query will select the names of all channels from the channel table where the owner is not 'CCTV'.", "metadata": {}}
{"_id": "gpt3_1170", "text": "\nThis query will select the name of all channels from the channel table where the owner is not \"CCTV\".", "metadata": {}}
{"_id": "gpt3_1171", "text": "\nThis query will return the position of players who have an average of 20 points or more across all of their games.", "metadata": {}}
{"_id": "gpt3_1172", "text": "\nThis query will return the position of players who have an average of 20 or more points.", "metadata": {}}
{"_id": "gpt3_1173", "text": "\nThis query returns the position of players who have an average of 20 or more points.", "metadata": {}}
{"_id": "gpt3_1174", "text": "\nThis query returns the position of all players who have an average of 20 or more points.", "metadata": {}}
{"_id": "gpt3_1175", "text": "\nThis query will return the position of all players who have an average of at least 20 points per game.", "metadata": {}}
{"_id": "gpt3_1176", "text": "\nThis query will return a list of facility codes from the Apartment_Facilities table that are associated with apartments that have more than 4 bedrooms in the Apartments table.", "metadata": {}}
{"_id": "gpt3_1177", "text": "\nThis query will select the facility code from the Apartment_Facilities table for all apartments with more than four bedrooms.", "metadata": {}}
{"_id": "gpt3_1178", "text": "\nThis SQL statement will select the facility code from the Apartment_Facilities table for all apartments that have more than four bedrooms.", "metadata": {}}
{"_id": "gpt3_1179", "text": "\nThis SQL statement will select the facility codes from the Apartment_Facilities table for all apartments with more than four bedrooms from the Apartments table.", "metadata": {}}
{"_id": "gpt3_1180", "text": "\nThis SQL statement is selecting the facility code from the Apartment_Facilities table for all apartments with more than 4 bedrooms from the Apartments table.", "metadata": {}}
{"_id": "gpt3_1181", "text": "\nThis query will return a count of each allergy in the Has_allergy table, grouped by the Allergy column.", "metadata": {}}
{"_id": "gpt3_1182", "text": "\nThis query will return the count of each allergy from the Has_allergy table, grouped by each individual allergy.", "metadata": {}}
{"_id": "gpt3_1183", "text": "\nThis query will return a count of all the different allergies in the Has_allergy table, grouped by the Allergy column. The result will be a table with two columns, Allergy and count(*).", "metadata": {}}
{"_id": "gpt3_1184", "text": "\nThis query will return the number of occurrences of each allergy in the Has_allergy table, grouped by the Allergy column.", "metadata": {}}
{"_id": "gpt3_1185", "text": "\nThis query will return a count of all the different allergies in the Has_allergy table, grouped by the Allergy field.", "metadata": {}}
{"_id": "gpt3_1186", "text": "\nThis query returns the average rating of each movie that has not been rated by Brittany Harris.", "metadata": {}}
{"_id": "gpt3_1187", "text": "\nThis query finds the average rating of all movies that were not reviewed by Brittany Harris and groups them by movie ID.", "metadata": {}}
{"_id": "gpt3_1188", "text": "\nThis query will select the movie ID and the average rating for each movie ID from the Rating table, excluding any ratings from Brittany Harris. The results will be grouped by movie ID.", "metadata": {}}
{"_id": "gpt3_1189", "text": "\nThis query will select the movie ID and the average rating of all movies that have not been rated by Brittany Harris, and group them by movie ID.", "metadata": {}}
{"_id": "gpt3_1190", "text": "\nThis query returns the average rating of each movie from reviewers other than Brittany Harris.", "metadata": {}}
{"_id": "gpt3_1191", "text": "\nThis query will return a list of customer names from the customers table that are not associated with any first notification of loss in the first_notification_of_loss table.", "metadata": {}}
{"_id": "gpt3_1192", "text": "\nThis query will return a list of customer names from the customers table that do not have a corresponding entry in the first_notification_of_loss table.", "metadata": {}}
{"_id": "gpt3_1193", "text": "\nThis statement returns the customer names from the customers table that are not present in the first_notification_of_loss table.", "metadata": {}}
{"_id": "gpt3_1194", "text": "\nThis query will return the names of all customers that have not yet received a first notification of loss.", "metadata": {}}
{"_id": "gpt3_1195", "text": "\nThis statement returns the customer names from the customers table that are not present in the first_notification_of_loss table.", "metadata": {}}
{"_id": "gpt3_1196", "text": "\nThis statement selects the code, fate and name of a mission and its corresponding ship from two tables, mission and ship. It does this by joining the tables on the Ship_ID column.", "metadata": {}}
{"_id": "gpt3_1197", "text": "\nThis query retrieves the code, fate, and name of ships from the mission and ship tables. The mission table (T1) is joined to the ship table (T2) on the Ship_ID column. The result set will include", "metadata": {}}
{"_id": "gpt3_1198", "text": "\nThis query selects the code, fate, and name from the mission and ship tables, based on the ship ID. It will return a list of codes, fates, and names of the ships associated with each mission.", "metadata": {}}
{"_id": "gpt3_1199", "text": "\nThis query joins the mission and ship tables in order to select the code, fate, and name of the ship for each mission.", "metadata": {}}
{"_id": "gpt3_1200", "text": "\nThis SQL statement joins the mission and ship tables by their shared Ship_ID field. It selects the Code, Fate, and Name fields from the two tables, resulting in a table that displays the mission code, fate, and ship name.", "metadata": {}}
{"_id": "gpt3_1201", "text": "\nThis query selects the employee_id and country_name from the employees, departments, locations, and countries tables. It joins the tables on the department_id, location_id, and country_id columns.", "metadata": {}}
{"_id": "gpt3_1202", "text": "\nThis query is used to select the employee_id and country_name from the employees, departments, locations, and countries tables. It joins the tables together using the department_id, location_id, and country_id columns.", "metadata": {}}
{"_id": "gpt3_1203", "text": "\nThis statement selects the employee_id and country_name from the employees, departments, locations, and countries tables. It joins the tables together on the department_id, location_id, and country_id fields.", "metadata": {}}
{"_id": "gpt3_1204", "text": "\nThis query selects the employee_id and country_name from the employees, departments, locations, and countries tables. It joins the tables together on their respective foreign key relationships.", "metadata": {}}
{"_id": "gpt3_1205", "text": "\nThis statement selects the employee_id and country_name from the employees, departments, locations, and countries tables. It joins the tables together by department_id, location_id, and country_id.", "metadata": {}}
{"_id": "gpt3_1206", "text": "\nThis query counts the number of salaries in the salary table that are associated with the team \"Boston Red Stockings\" in the year 2000.", "metadata": {}}
{"_id": "gpt3_1207", "text": "\nThis query returns the number of people on the Boston Red Stockings team in the year 2000.", "metadata": {}}
{"_id": "gpt3_1208", "text": "\nThis query will return the total number of salaries for the Boston Red Stockings team in the year 2000.", "metadata": {}}
{"_id": "gpt3_1209", "text": "\nThis query returns the total number of salaries that were paid to players on the Boston Red Stockings team in 2000.", "metadata": {}}
{"_id": "gpt3_1210", "text": "\nThis query will return the total number of salaries of players on the Boston Red Stockings team in the year 2000.", "metadata": {}}
{"_id": "gpt3_1211", "text": "\nThis query will select the name of all colleges that have an enrollment greater than the college with the highest enrollment in the state of Florida.", "metadata": {}}
{"_id": "gpt3_1212", "text": "\nThis query will select the name of a college from the college table where the enrollment is greater than the maximum enrollment of any college located in Florida.", "metadata": {}}
{"_id": "gpt3_1213", "text": "\nThis query will select the college name (cName) from the college table where the enrollment (enr) is greater than the maximum enrollment (max(enr)) from all colleges in the state of Florida (state = 'FL').", "metadata": {}}
{"_id": "gpt3_1214", "text": "\nThis query selects the name of the college from the college table with an enrollment greater than the maximum enrollment of any college located in Florida.", "metadata": {}}
{"_id": "gpt3_1215", "text": "\nThis query selects the college name from the college table where the enrollment is greater than the maximum enrollment of any college located in Florida.", "metadata": {}}
{"_id": "gpt3_1216", "text": "\nThis query joins the country and match_season tables to select the season, player, and country name from the two tables.", "metadata": {}}
{"_id": "gpt3_1217", "text": "\nThis query selects the season, player and country name from two tables, country and match_season, based on the country ID. The query will return the season, player and country name for each player in the match_season table.", "metadata": {}}
{"_id": "gpt3_1218", "text": "\nThis query will select the season, player, and country name from the country and match_season tables. The result will be a list of season, player, and country name pairs, where the country name corresponds to the country ID in the match", "metadata": {}}
{"_id": "gpt3_1219", "text": "\nThis query selects the season, player, and country name from two tables: country and match_season. The country table contains the country name and country id, while the match_season table has the season, country id, and player. The", "metadata": {}}
{"_id": "gpt3_1220", "text": "\nThis SQL statement joins the country and match_season tables to select the season, player, and country name for each match.", "metadata": {}}
{"_id": "gpt3_1221", "text": "\nThis query will return the most common allergy type from the Allergy_type table, sorted by the number of occurrences in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_1222", "text": "\nThis query returns the allergy type with the highest count from the Allergy_type table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_1223", "text": "\nThis query will return the allergy type with the highest count from the Allergy_type table, ordered in descending order.", "metadata": {}}
{"_id": "gpt3_1224", "text": "\nThis query will return the most commonly occurring allergy type from the Allergy_type table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_1225", "text": "\nThis query will return the most common allergy type from the Allergy_type table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_1226", "text": "\nThis query will return the total number of students enrolled in the College table.", "metadata": {}}
{"_id": "gpt3_1227", "text": "\nThis query will return the total enrollment of all the colleges in the College table.", "metadata": {}}
{"_id": "gpt3_1228", "text": "\nThe query will return the sum of all enrollment values from the College table.", "metadata": {}}
{"_id": "gpt3_1229", "text": "\nThis query returns the sum of all enrollment numbers (enr) from the College table.", "metadata": {}}
{"_id": "gpt3_1230", "text": "\nThe SELECT sum(enr) FROM College query will return the total enrollment of all colleges in the College table.", "metadata": {}}
{"_id": "gpt3_1231", "text": "\nThis query returns all districts from the address table that appear more than once.", "metadata": {}}
{"_id": "gpt3_1232", "text": "\nThis query will return all districts from the address table that have at least two records in the table.", "metadata": {}}
{"_id": "gpt3_1233", "text": "\nThis query will select all districts from the address table that have at least two entries in the table and group them together.", "metadata": {}}
{"_id": "gpt3_1234", "text": "\nThis query returns all districts from the address table that have at least two records.", "metadata": {}}
{"_id": "gpt3_1235", "text": "\nThis query will return the district from the address table that have at least two rows.", "metadata": {}}
{"_id": "gpt3_1236", "text": "\nThis query selects the name of each branch and the total count of memberships registered in that branch after 2015.", "metadata": {}}
{"_id": "gpt3_1237", "text": "\nThis query counts the number of memberships registered in each branch since 2015.", "metadata": {}}
{"_id": "gpt3_1238", "text": "\nThis query counts the number of memberships registered at each branch since 2015.", "metadata": {}}
{"_id": "gpt3_1239", "text": "\nThis query counts the number of memberships registered at each branch after 2015.", "metadata": {}}
{"_id": "gpt3_1240", "text": "\nThis query counts the number of members registered in each branch since 2015.", "metadata": {}}
{"_id": "gpt3_1241", "text": "\nThis query will return the year and the official name of the city for each farm competition hosted by that city.", "metadata": {}}
{"_id": "gpt3_1242", "text": "\nThis query selects the year and official name of a city from two tables, city and farm_competition, based on the city's ID in both tables.", "metadata": {}}
{"_id": "gpt3_1243", "text": "\nThis query will select the Year and the Official Name of the City from the city and farm_competition tables, based on the Host_City_ID in the farm_competition table matching the City_ID in the city table.", "metadata": {}}
{"_id": "gpt3_1244", "text": "\nThis query selects the year and official name of a city from two tables, city and farm_competition, based on the city ID.", "metadata": {}}
{"_id": "gpt3_1245", "text": "\nThis query will select the year and official name of the city from two tables, 'city' and 'farm_competition', based on a join of the 'City_ID' column in the 'city' table and the 'Host_", "metadata": {}}
{"_id": "gpt3_1246", "text": "\nThis query will select the names of instructors who are advisors to students in the Math department, ordered by the students' total credits.", "metadata": {}}
{"_id": "gpt3_1247", "text": "\nThis query returns the names of all instructors who are advisors to students in the Math department, ordered by the students' total credits.", "metadata": {}}
{"_id": "gpt3_1248", "text": "\nThis query returns the names of instructors who are advisors for students in the Math department, ordered by the student's total credits.", "metadata": {}}
{"_id": "gpt3_1249", "text": "\nThis query retrieves the names of all instructors who are advisors to students in the Math department, ordered by the total credits of the students.", "metadata": {}}
{"_id": "gpt3_1250", "text": "\nThis query is selecting the names of instructors who are advisors for students in the Math department, ordered by the student's total credits.", "metadata": {}}
{"_id": "gpt3_1251", "text": "\nThis query returns the number of papers written by Atsushi Ohori.", "metadata": {}}
{"_id": "gpt3_1252", "text": "\nThis query counts the number of papers authored by Atsushi Ohori.", "metadata": {}}
{"_id": "gpt3_1253", "text": "\nThis query counts the number of papers written by Atsushi Ohori.", "metadata": {}}
{"_id": "gpt3_1254", "text": "\nThis query will count the number of papers written by Atsushi Ohori.", "metadata": {}}
{"_id": "gpt3_1255", "text": "\nThis query will count the number of papers written by Atsushi Ohori.", "metadata": {}}
{"_id": "gpt3_1256", "text": "\nThis query returns the number of airlines located in Russia.", "metadata": {}}
{"_id": "gpt3_1257", "text": "\nThis query will return the number of airlines based in Russia.", "metadata": {}}
{"_id": "gpt3_1258", "text": "\nThis query will count the number of airlines located in Russia.", "metadata": {}}
{"_id": "gpt3_1259", "text": "\nThis query will return the total number of airlines in Russia.", "metadata": {}}
{"_id": "gpt3_1260", "text": "\nThis query would return the number of airlines in Russia.", "metadata": {}}
{"_id": "gpt3_1261", "text": "\nThis query will select the major from the STUDENT table and group them by major, then only display the majors that have fewer than 3 students.", "metadata": {}}
{"_id": "gpt3_1262", "text": "\nThis query selects the Major field from the STUDENT table and groups the results by Major, displaying only those Majors that have fewer than three students.", "metadata": {}}
{"_id": "gpt3_1263", "text": "\nThis query will return all majors from the STUDENT table where the number of students with that major is less than 3.", "metadata": {}}
{"_id": "gpt3_1264", "text": "\nThis query returns all majors from the STUDENT table with fewer than 3 students enrolled in them.", "metadata": {}}
{"_id": "gpt3_1265", "text": "\nThis query returns all majors from the Student table that have less than three students enrolled in them.", "metadata": {}}
{"_id": "gpt3_1266", "text": "\nThis statement will select the company and headquarters columns from the company table and order the results by market value in descending order.", "metadata": {}}
{"_id": "gpt3_1267", "text": "\nThis query will select the company and headquarters from the company table and order the results by market value in descending order.", "metadata": {}}
{"_id": "gpt3_1268", "text": "\nThis query will select the company and headquarters fields from the company table and order the results by market value in descending order.", "metadata": {}}
{"_id": "gpt3_1269", "text": "\nThis query will return a list of companies and their headquarters, sorted in descending order by the company's market value.", "metadata": {}}
{"_id": "gpt3_1270", "text": "\nThis query will select the company and headquarters from the company table and order them by market value in descending order.", "metadata": {}}
{"_id": "gpt3_1271", "text": "\nThis query will return a count of the number of constructors from each nationality, grouped by nationality.", "metadata": {}}
{"_id": "gpt3_1272", "text": "\nThis query will return a count of the number of constructors for each nationality, grouped by nationality.", "metadata": {}}
{"_id": "gpt3_1273", "text": "\nThis query will return the count of each nationality of constructors in the table, grouped by nationality. The results will be two columns, one containing the count of each nationality and the other containing the nationality itself.", "metadata": {}}
{"_id": "gpt3_1274", "text": "\nThis query will return the count of constructors for each nationality, grouped by nationality.", "metadata": {}}
{"_id": "gpt3_1275", "text": "\nThis query will return a count of the number of constructors for each nationality.", "metadata": {}}
{"_id": "gpt3_1276", "text": "\nThis query will select the student capacity and gender of all dorms whose name includes the word \"Donor\".", "metadata": {}}
{"_id": "gpt3_1277", "text": "\nThis query will select the student capacity and gender of all dorms with 'Donor' in their name.", "metadata": {}}
{"_id": "gpt3_1278", "text": "\nThis query will return the student capacity and gender of all dorms with \"Donor\" in their name.", "metadata": {}}
{"_id": "gpt3_1279", "text": "\nThis query would select the student capacity and gender from the dorm table where the dorm name contains the word 'Donor'.", "metadata": {}}
{"_id": "gpt3_1280", "text": "\nThis query will return the student capacity and gender of all dorms with the word \"Donor\" in the name.", "metadata": {}}
{"_id": "gpt3_1281", "text": "\nThis query returns the names of all the playlists in the database.", "metadata": {}}
{"_id": "gpt3_1282", "text": "\nThis statement will select the name of all playlists from a database.", "metadata": {}}
{"_id": "gpt3_1283", "text": "\nThis query will select and return the name of all playlists from a database.", "metadata": {}}
{"_id": "gpt3_1284", "text": "\nThis statement will select the name of all playlists from a database.", "metadata": {}}
{"_id": "gpt3_1285", "text": "\nThis query selects the name from all records in the playlists table.", "metadata": {}}
{"_id": "gpt3_1286", "text": "\nThis query will select all majors from the STUDENT table where the Sex is \"M\".", "metadata": {}}
{"_id": "gpt3_1287", "text": "\nThis query will return all of the majors of male students from the STUDENT table.", "metadata": {}}
{"_id": "gpt3_1288", "text": "\nThis query will select the major of all male students from the STUDENT table.", "metadata": {}}
{"_id": "gpt3_1289", "text": "\nThis query will select all of the majors from the STUDENT table where the Sex is \"M\".", "metadata": {}}
{"_id": "gpt3_1290", "text": "\nThis query will select all majors from the STUDENT table where the Sex column is equal to \"M\".", "metadata": {}}
{"_id": "gpt3_1291", "text": "\nThis query will return the party theme for all parties, ordered from least to greatest number of hosts.", "metadata": {}}
{"_id": "gpt3_1292", "text": "\nThis query will select the party theme from the party table and order the results by the number of hosts in ascending order.", "metadata": {}}
{"_id": "gpt3_1293", "text": "\nThis query will return a list of the party themes in order from least to most number of hosts.", "metadata": {}}
{"_id": "gpt3_1294", "text": "\nThis query will return the party themes from the party table, sorted in ascending order by the number of hosts.", "metadata": {}}
{"_id": "gpt3_1295", "text": "\nThis query will return a list of all the party themes from the party table, sorted in ascending order according to the number of hosts.", "metadata": {}}
{"_id": "gpt3_1296", "text": "\nThis query selects the first and last name, as well as the customer ID, of the customer with the lowest sum of payments from the customer and payment tables. The query groups by customer ID and orders by the sum of payments in ascending order,", "metadata": {}}
{"_id": "gpt3_1297", "text": "\nThis query selects the first name, last name, and customer ID of the customer who has made the least amount of payments from the customer and payment tables, ordered by the sum of the payment amounts and limited to one result.", "metadata": {}}
{"_id": "gpt3_1298", "text": "\nThis query selects the first name, last name, and customer ID of the customer with the lowest total payment amount, as determined by summing the amount of all payments associated with the customer's ID. The query orders the results by the sum of", "metadata": {}}
{"_id": "gpt3_1299", "text": "\nThis query will select the first and last name of the customer with the lowest total amount paid, ordered by the sum of the amounts paid.", "metadata": {}}
{"_id": "gpt3_1300", "text": "\nThis query selects the first name, last name, and customer ID of the customer with the lowest sum of payments from the customer and payment tables, ordered by the sum of payments in ascending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_1301", "text": "\nThis query will return the total number of records in the film table.", "metadata": {}}
{"_id": "gpt3_1302", "text": "\nThis query returns the total number of records in the film table.", "metadata": {}}
{"_id": "gpt3_1303", "text": "\nThis query returns the total number of records in the film table.", "metadata": {}}
{"_id": "gpt3_1304", "text": "\nThis query will return the total number of records in the film table.", "metadata": {}}
{"_id": "gpt3_1305", "text": "\nThis query will return the total number of films in the film table.", "metadata": {}}
{"_id": "gpt3_1306", "text": "\nThis query would return the decor of the room named \"Recluse and Defiance\" from the Rooms table.", "metadata": {}}
{"_id": "gpt3_1307", "text": "\nThis query would return the decor of the room named \"Recluse and Defiance\" from the Rooms table.", "metadata": {}}
{"_id": "gpt3_1308", "text": "\nThis query will return the decor of the room called \"Recluse and Defiance\" from the Rooms table.", "metadata": {}}
{"_id": "gpt3_1309", "text": "\nThis query will return the decor of the room named \"Recluse and Defiance\" from the Rooms table.", "metadata": {}}
{"_id": "gpt3_1310", "text": "\nThis query would return the decor from the room named \"Recluse and Defiance\" from the Rooms table.", "metadata": {}}
{"_id": "gpt3_1311", "text": "\nThis query will return the number of distinct class sections for the course ACCT-211.", "metadata": {}}
{"_id": "gpt3_1312", "text": "\nThis query will return the number of distinct sections of the class ACCT-211.", "metadata": {}}
{"_id": "gpt3_1313", "text": "\nThis query will return the number of distinct class sections for the course ACCT-211.", "metadata": {}}
{"_id": "gpt3_1314", "text": "\nThis query will return the number of distinct class sections for the course code ACCT-211.", "metadata": {}}
{"_id": "gpt3_1315", "text": "\nThis query will return the number of distinct class sections for the course ACCT-211.", "metadata": {}}
{"_id": "gpt3_1316", "text": "\nThis query will select all cities from the city table (T1) that have a lower temperature in March than December, except for cities that are hosting cities (T3).", "metadata": {}}
{"_id": "gpt3_1317", "text": "\nThis query returns the city names from the city table (T1) that have a lower temperature in March than December, but are not hosting cities (T3).", "metadata": {}}
{"_id": "gpt3_1318", "text": "\nThis query returns a list of cities from the city table (T1) that have a lower temperature in March than in December, but are not hosting cities (T3).", "metadata": {}}
{"_id": "gpt3_1319", "text": "\nThis query returns the cities from the city table that have a lower average temperature in March than in December, but are not hosting cities.", "metadata": {}}
{"_id": "gpt3_1320", "text": "\nThis query selects the cities from the city table (T1) that have a lower temperature in March than in December and excludes cities from the city table (T3) that are hosting cities (T4).", "metadata": {}}
{"_id": "gpt3_1321", "text": "\nThis query returns the number of project outcomes in the Project_outcomes table with an outcome code of 'Patent'.", "metadata": {}}
{"_id": "gpt3_1322", "text": "\nThis query will return the total number of project outcomes with an outcome code of 'Patent'.", "metadata": {}}
{"_id": "gpt3_1323", "text": "\nThis query will return the number of project outcomes with the outcome code of 'Patent'.", "metadata": {}}
{"_id": "gpt3_1324", "text": "\nThis query returns the total number of project outcomes with an outcome code of 'Patent'.", "metadata": {}}
{"_id": "gpt3_1325", "text": "\nThis query returns the total number of project outcomes with an outcome code of 'Patent'.", "metadata": {}}
{"_id": "gpt3_1326", "text": "\nThis query counts the number of people who have a food allergy.", "metadata": {}}
{"_id": "gpt3_1327", "text": "\nThis query counts the number of people who have a food allergy.", "metadata": {}}
{"_id": "gpt3_1328", "text": "\nThis query counts the number of people who have a food allergy.", "metadata": {}}
{"_id": "gpt3_1329", "text": "\nThis query will count the number of people in the Has_allergy table who have a food allergy, as indicated by the Allergy_type table.", "metadata": {}}
{"_id": "gpt3_1330", "text": "\nThis query counts the number of people who have a food allergy.", "metadata": {}}
{"_id": "gpt3_1331", "text": "\nThis query will return the description of the marketing region named \"China\" from the Marketing_Regions table.", "metadata": {}}
{"_id": "gpt3_1332", "text": "\nThis query will return the description of the marketing region named \"China\" from the Marketing_Regions table.", "metadata": {}}
{"_id": "gpt3_1333", "text": "\nThis query will return the description of the marketing region named \"China\" from the Marketing_Regions table.", "metadata": {}}
{"_id": "gpt3_1334", "text": "\nThis query will return the description of the marketing region with the name \"China\".", "metadata": {}}
{"_id": "gpt3_1335", "text": "\nThe SQL query will return the description of the marketing region \"China\".", "metadata": {}}
{"_id": "gpt3_1336", "text": "\nThis query returns the three most common document names from two different groups of documents, grouped by document type code and document structure code, respectively.", "metadata": {}}
{"_id": "gpt3_1337", "text": "\nThis query selects the top three document names from documents grouped by document type code and document structure code, ordered by the number of occurrences in each group.", "metadata": {}}
{"_id": "gpt3_1338", "text": "\nThis query selects the top three document names from two different groups of documents, grouped by either document type code or document structure code, and returns the names that appear in both groups.", "metadata": {}}
{"_id": "gpt3_1339", "text": "\nThis query selects the three most commonly occurring document names from two groups, document type code and document structure code, and returns the intersection of the two groups.", "metadata": {}}
{"_id": "gpt3_1340", "text": "\nThis query will select the three most commonly occurring document names from documents, grouped by document type code and document structure code.", "metadata": {}}
{"_id": "gpt3_1341", "text": "\nThis query returns a list of distinct artist names from songs with a language of English that have a rating of 8 or below.", "metadata": {}}
{"_id": "gpt3_1342", "text": "\nThis query will return a list of all distinct artist names from songs in English language that have a rating of 8 or lower.", "metadata": {}}
{"_id": "gpt3_1343", "text": "\nThis query will return a list of distinct artist names from songs that are in English and have a rating of 8 or lower.", "metadata": {}}
{"_id": "gpt3_1344", "text": "\nThis statement will return all distinct artist names from songs in English language, except for those with a rating greater than 8.", "metadata": {}}
{"_id": "gpt3_1345", "text": "\nThis statement will return the names of artists who have songs in English but have a rating of 8 or lower.", "metadata": {}}
{"_id": "gpt3_1346", "text": "\nThis query selects the course name from the Courses table and the Student_Course_Enrolment table and groups them by course name. It then filters the results to only show courses that have been enrolled in by only one student.", "metadata": {}}
{"_id": "gpt3_1347", "text": "\nThis query returns the names of courses that have only one student enrolled.", "metadata": {}}
{"_id": "gpt3_1348", "text": "\nThis query selects the course name from the Courses table and the Student_Course_Enrolment table, grouping by course name and having a count of 1. This means that it will return the course names that only have one student enrolled in", "metadata": {}}
{"_id": "gpt3_1349", "text": "\nThis query will select the course name from the Courses table and join it with the Student_Course_Enrolment table using the course_id, then group the results by course name and count the number of courses with the same name.", "metadata": {}}
{"_id": "gpt3_1350", "text": "\nThis query returns the course name of all courses that have only one student enrolled in them.", "metadata": {}}
{"_id": "gpt3_1351", "text": "\nThis query will select the names of people from the 'people' table whose height is less than the average height of all people in the table.", "metadata": {}}
{"_id": "gpt3_1352", "text": "\nThis query selects the names of people from the people table who have a height less than the average height of all people in the table.", "metadata": {}}
{"_id": "gpt3_1353", "text": "\nThis statement will select the names of all people from the people table who have a height that is less than the average height of all people in the table.", "metadata": {}}
{"_id": "gpt3_1354", "text": "\nThis statement will select the name of all people from the people table whose height is less than the average height of all people in the table.", "metadata": {}}
{"_id": "gpt3_1355", "text": "\nThis query will select the names of people from the table \"people\" who have a height less than the average height of all people in the table.", "metadata": {}}
{"_id": "gpt3_1356", "text": "\nThis query will return the maximum fastest lap speed of the 2008 Monaco Grand Prix race.", "metadata": {}}
{"_id": "gpt3_1357", "text": "\nThis query returns the fastest lap speed of the Monaco Grand Prix in 2008.", "metadata": {}}
{"_id": "gpt3_1358", "text": "\nThe query will return the maximum fastest lap speed from the 2008 Monaco Grand Prix.", "metadata": {}}
{"_id": "gpt3_1359", "text": "\nThis query returns the maximum fastest lap speed of the 2008 Monaco Grand Prix.", "metadata": {}}
{"_id": "gpt3_1360", "text": "\nThis query returns the fastest lap speed of the Monaco Grand Prix in 2008.", "metadata": {}}
{"_id": "gpt3_1361", "text": "\nThis query retrieves the budget type code and description from the Ref_budget_codes table.", "metadata": {}}
{"_id": "gpt3_1362", "text": "\nThis query returns a list of budget type codes and their corresponding descriptions from the Ref_budget_codes table.", "metadata": {}}
{"_id": "gpt3_1363", "text": "\nThis query returns a list of budget type codes and their corresponding budget type descriptions from the Ref_budget_codes table.", "metadata": {}}
{"_id": "gpt3_1364", "text": "\nThis query retrieves the budget type code and budget type description from the Ref_budget_codes table.", "metadata": {}}
{"_id": "gpt3_1365", "text": "\nThis query will return the budget type code and description from the Ref_budget_codes table.", "metadata": {}}
{"_id": "gpt3_1366", "text": "\nThis query will return all distinct records from the employees and departments tables where the employee_id of the employee matches the manager_id of the department.", "metadata": {}}
{"_id": "gpt3_1367", "text": "\nThis statement is used to join the employees and departments tables and select all distinct rows from the joined tables where the employee_id matches the manager_id.", "metadata": {}}
{"_id": "gpt3_1368", "text": "\nThis statement retrieves all distinct records from the employees and departments tables where the employee_id of the employee matches the manager_id of the department.", "metadata": {}}
{"_id": "gpt3_1369", "text": "\nThis query retrieves all distinct records from the employees and departments tables where the employee_id of the employees table matches the manager_id of the departments table.", "metadata": {}}
{"_id": "gpt3_1370", "text": "\nThis query selects all unique records from the employees and departments tables where the employee_id matches the manager_id in the departments table.", "metadata": {}}
{"_id": "gpt3_1371", "text": "\nThis query will return the total number of games played by all football players on scholarship.", "metadata": {}}
{"_id": "gpt3_1372", "text": "\nThis query will return the total number of games played by all Football players who are on scholarship.", "metadata": {}}
{"_id": "gpt3_1373", "text": "\nThis query will return the total number of games played by all football players who are on scholarship.", "metadata": {}}
{"_id": "gpt3_1374", "text": "\nThe query will return the sum of all games played by football players on scholarship.", "metadata": {}}
{"_id": "gpt3_1375", "text": "\nThis query will return the sum of all games played by athletes playing Football on a scholarship.", "metadata": {}}
{"_id": "gpt3_1376", "text": "\nThis query returns the number of distinct product_ids in the order_items table associated with customer \"Rodrick Heaney\".", "metadata": {}}
{"_id": "gpt3_1377", "text": "\nThis query will count the number of distinct product_ids associated with the customer \"Rodrick Heaney\".", "metadata": {}}
{"_id": "gpt3_1378", "text": "\nThis query will count the number of distinct product_ids associated with customer Rodrick Heaney.", "metadata": {}}
{"_id": "gpt3_1379", "text": "\nThis query returns the number of distinct product_ids in the order_items table for orders placed by the customer \"Rodrick Heaney\".", "metadata": {}}
{"_id": "gpt3_1380", "text": "\nThis query returns the number of distinct product_ids associated with the customer \"Rodrick Heaney\".", "metadata": {}}
{"_id": "gpt3_1381", "text": "\nThis query returns the date range for the most popular project and the date range for the project leader.", "metadata": {}}
{"_id": "gpt3_1382", "text": "\nThis query selects the date range of the project with the most staff members, as well as the date range of the project leader.", "metadata": {}}
{"_id": "gpt3_1383", "text": "\nThis query selects the date range for the project with the highest number of staff, as well as the date range for the leader of that project.", "metadata": {}}
{"_id": "gpt3_1384", "text": "\nThis query will select the date range from the Project_Staff table for the project with the most staff members, as well as the date range for the leader of that project.", "metadata": {}}
{"_id": "gpt3_1385", "text": "\nThis query selects the date range (date_from and date_to) of the project with the most staff members, as well as the date range of the leader of that project.", "metadata": {}}
{"_id": "gpt3_1386", "text": "\nThis query will return the names of all female people from Canada who were married in 2016.", "metadata": {}}
{"_id": "gpt3_1387", "text": "\nThis query will select the names of all females from Canada who were married in 2016.", "metadata": {}}
{"_id": "gpt3_1388", "text": "\nThis query will return the names of all females from Canada who were married in 2016.", "metadata": {}}
{"_id": "gpt3_1389", "text": "\nThis query will return the names of all females from Canada who were married in 2016.", "metadata": {}}
{"_id": "gpt3_1390", "text": "\nThis query will return the names of all females from Canada who were married in 2016.", "metadata": {}}
{"_id": "gpt3_1391", "text": "\nThis query will select the position with the highest count from the tryout table and return the position with the most occurrences.", "metadata": {}}
{"_id": "gpt3_1392", "text": "\nThis query returns the position with the most participants from a tryout, ordered by the highest count.", "metadata": {}}
{"_id": "gpt3_1393", "text": "\nThis query returns the most common position from the tryout table, ordered by the number of occurrences.", "metadata": {}}
{"_id": "gpt3_1394", "text": "\nThis query will return the most common position from the tryout table, ordered by the number of occurrences of each position.", "metadata": {}}
{"_id": "gpt3_1395", "text": "\nThis query will select the position with the most players from the tryout table, and display the position with the highest count.", "metadata": {}}
{"_id": "gpt3_1396", "text": "\nThis query will select the Name and Other_Details columns from the Staff table.", "metadata": {}}
{"_id": "gpt3_1397", "text": "\nThis statement will select the Name and Other_Details columns from the Staff table.", "metadata": {}}
{"_id": "gpt3_1398", "text": "\nThis query will return the name and other details of all staff members from the Staff table.", "metadata": {}}
{"_id": "gpt3_1399", "text": "\nThis query will select the name and other details from the Staff table.", "metadata": {}}
{"_id": "gpt3_1400", "text": "\nThis statement will select the Name and Other_Details columns from the Staff table.", "metadata": {}}
{"_id": "gpt3_1401", "text": "\nThis query will return a count of the number of captains for each rank in the captain table. The result will be a table with two columns, one for the count of captains for each rank, and one for the corresponding rank.", "metadata": {}}
{"_id": "gpt3_1402", "text": "\nThis query returns the number of captains for each rank. The result set will contain two columns, one with the count of captains for each rank, and one with the rank.", "metadata": {}}
{"_id": "gpt3_1403", "text": "\nThis query will return the count of each rank in the captain table, grouped by rank. The result set will contain two columns, one for the rank and one for the count of that rank.", "metadata": {}}
{"_id": "gpt3_1404", "text": "\nThis query will return a count of the number of captains in each rank, grouped by rank. The result will be a table containing two columns, one for the count and one for the rank.", "metadata": {}}
{"_id": "gpt3_1405", "text": "\nThis query will return the number of captains for each rank in the captain table. The result will be a table with two columns, the first column containing the count of captains for each rank and the second column containing the rank.", "metadata": {}}
{"_id": "gpt3_1406", "text": "\nThis query will select the year from the hosting_city table for the city \"Taizhou (Zhejiang)\" from the city table.", "metadata": {}}
{"_id": "gpt3_1407", "text": "\nThis query returns the year that Taizhou (Zhejiang) hosted a major event.", "metadata": {}}
{"_id": "gpt3_1408", "text": "\nThe query will select the year from the hosting_city table where the host_city matches the city_id from the city table where the city is \"Taizhou (Zhejiang)\".", "metadata": {}}
{"_id": "gpt3_1409", "text": "\nThis query will return the year that Taizhou (Zhejiang) hosted an event from the hosting_city table.", "metadata": {}}
{"_id": "gpt3_1410", "text": "\nThis query will return the year that Taizhou (Zhejiang) hosted an event.", "metadata": {}}
{"_id": "gpt3_1411", "text": "\nThis query will return the count of all enzymes in the enzyme table that are not associated with any medicine in the medicine_enzyme_interaction table.", "metadata": {}}
{"_id": "gpt3_1412", "text": "\nThis query will count the number of enzymes in the enzyme table that are not present in the medicine_enzyme_interaction table.", "metadata": {}}
{"_id": "gpt3_1413", "text": "\nThis query returns the total number of enzymes in the enzyme table that are not associated with any medicine in the medicine_enzyme_interaction table.", "metadata": {}}
{"_id": "gpt3_1414", "text": "\nThis query returns the count of all enzymes that are not present in the medicine_enzyme_interaction table.", "metadata": {}}
{"_id": "gpt3_1415", "text": "\nThis query returns the total number of enzymes that are not associated with any medicines in the medicine_enzyme_interaction table.", "metadata": {}}
{"_id": "gpt3_1416", "text": "\nThis query selects the name and location of tracks where only one race has been held.", "metadata": {}}
{"_id": "gpt3_1417", "text": "\nThis query selects the name and location of a track from the race and track tables, grouping by track_id and only selecting tracks that have only one race associated with them.", "metadata": {}}
{"_id": "gpt3_1418", "text": "\nThis query selects the name and location of tracks that have only a single race associated with them.", "metadata": {}}
{"_id": "gpt3_1419", "text": "\nThis query selects the name and location of tracks that have only one race associated with them.", "metadata": {}}
{"_id": "gpt3_1420", "text": "\nThis query selects the name and location of a track from the race and track tables, grouping them by track_id and having a count of 1. This query outputs the name and location of a track that has only one race associated with it.", "metadata": {}}
{"_id": "gpt3_1421", "text": "\nThis query will return the names of all publishers from the book_club table, except for those who published books in the year 1989.", "metadata": {}}
{"_id": "gpt3_1422", "text": "\nThis query will return all the publishers from the book_club table, except those that have a year of 1989.", "metadata": {}}
{"_id": "gpt3_1423", "text": "\nThis statement will return all of the publishers from the book_club table that are not associated with books published in 1989.", "metadata": {}}
{"_id": "gpt3_1424", "text": "\nThis query will return all publishers from the book_club table that are not associated with books published in 1989.", "metadata": {}}
{"_id": "gpt3_1425", "text": "\nThis query will return all publishers from the book_club table that are not associated with books published in 1989.", "metadata": {}}
{"_id": "gpt3_1426", "text": "\nThis query will select the product name and the average product price for each product from the table PRODUCTS and group the results by product name.", "metadata": {}}
{"_id": "gpt3_1427", "text": "\nThis query returns the average product price for each product name in the PRODUCTS table.", "metadata": {}}
{"_id": "gpt3_1428", "text": "\nThis query will return the average price of each product in the PRODUCTS table.", "metadata": {}}
{"_id": "gpt3_1429", "text": "\nThis query returns the average product price for each product name in the PRODUCTS table.", "metadata": {}}
{"_id": "gpt3_1430", "text": "\nThis query will return the average price of each product in the PRODUCTS table, grouped by Product_Name.", "metadata": {}}
{"_id": "gpt3_1431", "text": "\nThis query returns the ID and name of the most popular browser that is compatible with an accelerator, based on the number of accelerator-compatible browsers. It does this by joining the browser and accelerator_compatible_browser tables, grouping by browser ID,", "metadata": {}}
{"_id": "gpt3_1432", "text": "\nThis query selects the ID and name of the browser with the most compatible accelerators. It does this by joining the browser and accelerator_compatible_browser tables, grouping by the browser ID, and ordering by the count of compatible accelerators in descending", "metadata": {}}
{"_id": "gpt3_1433", "text": "\nThis query selects the browser ID and name of the browser with the most compatible accelerators, ordered by the number of compatible accelerators.", "metadata": {}}
{"_id": "gpt3_1434", "text": "\nThis query returns the id and name of the most popular browser from the browser and accelerator_compatible_browser tables, ordered by the number of compatible accelerators.", "metadata": {}}
{"_id": "gpt3_1435", "text": "\nThis statement retrieves the browser with the highest number of compatible accelerators from the browser and accelerator_compatible_browser tables. It returns the ID and name of the browser, sorted by the number of compatible accelerators in descending order, and limited", "metadata": {}}
{"_id": "gpt3_1436", "text": "\nThis query will select the Name and Score from the WINE table for all wines made from white grapes from the GRAPES table.", "metadata": {}}
{"_id": "gpt3_1437", "text": "\nThis query will select the Name and Score from the WINE table for any wines made from white grapes from the GRAPES table.", "metadata": {}}
{"_id": "gpt3_1438", "text": "\nThis statement will select the name and score of wines from the table WINE that are made from grapes with a color of \"White\" from the table GRAPES.", "metadata": {}}
{"_id": "gpt3_1439", "text": "\nThis SQL query will return the names and scores of all wines made from white grapes.", "metadata": {}}
{"_id": "gpt3_1440", "text": "\nThis query will select the Name and Score from the WINE table for all wines made with white grapes from the GRAPES table.", "metadata": {}}
{"_id": "gpt3_1441", "text": "\nThis query returns the names of nominees from the musical table who have been nominated more than two times.", "metadata": {}}
{"_id": "gpt3_1442", "text": "\nThis query returns the names of all nominees from the musical table who have been nominated more than twice.", "metadata": {}}
{"_id": "gpt3_1443", "text": "\nThis query selects the nominees from the musical table who have been nominated more than twice.", "metadata": {}}
{"_id": "gpt3_1444", "text": "\nThis SQL query will select all nominees from the musical table who have been nominated more than twice.", "metadata": {}}
{"_id": "gpt3_1445", "text": "\nThis query will return all nominees from the musical table who have been nominated more than twice.", "metadata": {}}
{"_id": "gpt3_1446", "text": "\nThis query retrieves the order IDs and order details from the Invoices and Orders tables that have more than two invoices associated with them.", "metadata": {}}
{"_id": "gpt3_1447", "text": "\nThis query selects the order ID and order details from the Invoices and Orders tables, where the order ID appears more than two times in the Invoices table. The query groups the results by order ID.", "metadata": {}}
{"_id": "gpt3_1448", "text": "\nThis query joins the Invoices and Orders tables, groups the results by order_id, and then filters the results to only include orders that have more than two invoices associated with them. The output of the query will be a list", "metadata": {}}
{"_id": "gpt3_1449", "text": "\nThis query selects the order ID and order details from Invoices and Orders tables, grouping them by order ID and having a count greater than 2. This query will return all orders with more than two invoices associated with them.", "metadata": {}}
{"_id": "gpt3_1450", "text": "\nThis query returns the order IDs and order details from the Invoices and Orders tables where the order appears more than two times in the Invoices table.", "metadata": {}}
{"_id": "gpt3_1451", "text": "\nThis query returns the order_id and the count of distinct product_ids associated with each order_id from the Order_items table.", "metadata": {}}
{"_id": "gpt3_1452", "text": "\nThis query will return the order_id and the count of distinct product_ids associated with each order_id.", "metadata": {}}
{"_id": "gpt3_1453", "text": "\nThis query returns the order_id and the number of distinct product_ids associated with each order_id.", "metadata": {}}
{"_id": "gpt3_1454", "text": "\nThis query will return the order_id and the number of distinct product_ids associated with each order_id.", "metadata": {}}
{"_id": "gpt3_1455", "text": "\nThis query returns the order_id and a count of the distinct product_ids associated with each order_id.", "metadata": {}}
{"_id": "gpt3_1456", "text": "\nThis SQL statement will select all distinct product names from the PRODUCTS table where the product price is greater than the average product price from the PRODUCTS table.", "metadata": {}}
{"_id": "gpt3_1457", "text": "\nThis statement will select all distinct product names from the PRODUCTS table where the product price is greater than the average product price from the same table.", "metadata": {}}
{"_id": "gpt3_1458", "text": "\nThis query will return the distinct product names from the PRODUCTS table that have a product price greater than the average product price of all products in the table.", "metadata": {}}
{"_id": "gpt3_1459", "text": "\nThis statement will select all distinct product names from the PRODUCTS table where the product price is greater than the average product price from the PRODUCTS table.", "metadata": {}}
{"_id": "gpt3_1460", "text": "\nThis statement will select the distinct product names from the PRODUCTS table where the product price is greater than the average product price of all products in the table.", "metadata": {}}
{"_id": "gpt3_1461", "text": "\nThis query selects the apartment type code, bathroom count, and bedroom count from the Apartments table, groups them by apartment type code, and orders them by the sum of the room count in descending order. It then returns the first row of the", "metadata": {}}
{"_id": "gpt3_1462", "text": "\nThis query will select the apartment type code, bathroom count, and bedroom count from the Apartments table, group them by apartment type code, and order them by the sum of the room count in descending order. The query will then limit the results", "metadata": {}}
{"_id": "gpt3_1463", "text": "\nThis query will return the apartment type code, bathroom count, and bedroom count of the apartment type with the highest total number of rooms, ordered by the sum of the rooms, and limited to one result.", "metadata": {}}
{"_id": "gpt3_1464", "text": "\nThis query will select the apartment type code, bathroom count, and bedroom count from the Apartments table, group them by apartment type code, order them by the sum of room count in descending order, and limit the results to the top result.", "metadata": {}}
{"_id": "gpt3_1465", "text": "\nThis query will select the apartment type code, bathroom count, and bedroom count from the Apartments table, group them by apartment type code, and order them by the sum of the room count in descending order. The query will then limit the results", "metadata": {}}
{"_id": "gpt3_1466", "text": "\nThis query selects the first and last name of staff members from the Staff table who live in the city of Damianfort, as indicated by their address in the Addresses table.", "metadata": {}}
{"_id": "gpt3_1467", "text": "\nThis query selects the first and last names of staff members who live in the city of Damianfort, based on their address ID.", "metadata": {}}
{"_id": "gpt3_1468", "text": "\nThis query selects the first and last names of staff members from the Staff table whose address is in the city of Damianfort from the Addresses table.", "metadata": {}}
{"_id": "gpt3_1469", "text": "\nThis query selects the first and last names of staff members from the Staff table whose address is located in the city of \"Damianfort\" from the Addresses table.", "metadata": {}}
{"_id": "gpt3_1470", "text": "\nThis query selects the first and last name of staff members from the Staff table who have an address in the city of \"Damianfort\" from the Addresses table.", "metadata": {}}
{"_id": "gpt3_1471", "text": "\nThis query will count the number of classes for each course code and display the results.", "metadata": {}}
{"_id": "gpt3_1472", "text": "\nThis statement will count the number of records in the CLASS table grouped by the crs_code column and return the count and the crs_code for each group.", "metadata": {}}
{"_id": "gpt3_1473", "text": "\nThis query returns the count of records for each course code in the CLASS table, grouped by course code.", "metadata": {}}
{"_id": "gpt3_1474", "text": "\nThis SQL statement will count the number of records in the CLASS table grouped by the crs_code column and return the count and the crs_code for each group.", "metadata": {}}
{"_id": "gpt3_1475", "text": "\nThis query will return the number of classes for each course code in the CLASS table.", "metadata": {}}
{"_id": "gpt3_1476", "text": "\nThis query selects the department name of the department which has the most minors enrolled in it. It does this by joining the DEPARTMENT and MINOR_IN tables on the Department Number (DNO) column, grouping the results by the D", "metadata": {}}
{"_id": "gpt3_1477", "text": "\nThis query selects the name of the department with the most students enrolled in its minor programs. It does this by joining the DEPARTMENT and MINOR_IN tables on the DNO field, grouping the results by DNO and ordering them by", "metadata": {}}
{"_id": "gpt3_1478", "text": "\nThis query selects the name of the department with the most minors enrolled in it. It does this by joining the DEPARTMENT and MINOR_IN tables on the DNO column, grouping the results by DNO, ordering the results by the", "metadata": {}}
{"_id": "gpt3_1479", "text": "\nThis query selects the department name from the DEPARTMENT table (T1) which has the most number of students enrolled in the MINOR_IN table (T2). The query groups the results by the department number (DNO) from", "metadata": {}}
{"_id": "gpt3_1480", "text": "\nThis query selects the department name of the department with the most minors enrolled in it, from the DEPARTMENT and MINOR_IN tables. It groups the results by department number, orders them by the count of minors in each department, and", "metadata": {}}
{"_id": "gpt3_1481", "text": "\nThis query selects all distinct positions from the match_season table for any matches that took place in Dublin, the capital of Ireland.", "metadata": {}}
{"_id": "gpt3_1482", "text": "\nThis query will select all distinct positions from the match_season table that have a Country_id matching the Country_id of the country with the capital Dublin.", "metadata": {}}
{"_id": "gpt3_1483", "text": "\nThis query will return all distinct positions from the match_season table associated with the country with a capital of Dublin.", "metadata": {}}
{"_id": "gpt3_1484", "text": "\nThis query will return all distinct positions from the match_season table that are associated with the country whose capital is Dublin.", "metadata": {}}
{"_id": "gpt3_1485", "text": "\nThis query will return all distinct positions associated with matches in Dublin.", "metadata": {}}
{"_id": "gpt3_1486", "text": "\nThis query will select the last names of all staff members whose email address contains \"wrau\".", "metadata": {}}
{"_id": "gpt3_1487", "text": "\nThis query will return the last names of all staff members whose email address contains the string \"wrau\".", "metadata": {}}
{"_id": "gpt3_1488", "text": "\nThis query will return the last names of all staff members whose email address contains the string \"wrau\".", "metadata": {}}
{"_id": "gpt3_1489", "text": "\nThis query will select the last name of any staff members whose email address contains the string 'wrau'.", "metadata": {}}
{"_id": "gpt3_1490", "text": "\nThis query will return the last names of all staff members with an email address that contains \"wrau\".", "metadata": {}}
{"_id": "gpt3_1491", "text": "\nThis query will return the names of aircraft that have at least 5 certificates and have a distance greater than 5000.", "metadata": {}}
{"_id": "gpt3_1492", "text": "\nThis query will return the names of any aircrafts that have a certificate and a distance greater than 5000, and have five or more certificates.", "metadata": {}}
{"_id": "gpt3_1493", "text": "\nThis query selects the name of each Aircraft with a distance greater than 5000, with at least 5 Certificates associated with it, ordered by the number of Certificates.", "metadata": {}}
{"_id": "gpt3_1494", "text": "\nThis statement will select the name of all aircraft with a distance greater than 5000 that have at least 5 certificates associated with them, sorted in ascending order.", "metadata": {}}
{"_id": "gpt3_1495", "text": "\nThis query will select the names of aircraft from the Aircraft table that have a distance greater than 5000 and have at least 5 certificates associated with them from the Certificate table, ordered by the number of certificates.", "metadata": {}}
{"_id": "gpt3_1496", "text": "\nThis query returns the number of states that have at least one college with a mid player in its tryout, but no goalies.", "metadata": {}}
{"_id": "gpt3_1497", "text": "\nThis query returns the number of states in which there is at least one college that has a mid player but no goalie player in its tryout.", "metadata": {}}
{"_id": "gpt3_1498", "text": "\nThis query returns the count of states that have college teams with mid players but no goalie players.", "metadata": {}}
{"_id": "gpt3_1499", "text": "\nThis query counts the number of states that have colleges with mid players but not goalies in tryouts.", "metadata": {}}
{"_id": "gpt3_1500", "text": "\nThis query returns the count of states from the college table that have a mid player in the tryout table, but not a goalie.", "metadata": {}}
{"_id": "gpt3_1501", "text": "\nThis query returns the channel codes from the customer contact channels table where the number of customers associated with each channel code is less than 5.", "metadata": {}}
{"_id": "gpt3_1502", "text": "\nThis query returns a list of all customer contact channels with fewer than 5 customers associated with them.", "metadata": {}}
{"_id": "gpt3_1503", "text": "\nThis query returns a list of channel codes from the customer_contact_channels table where the count of customer_id associated with each channel code is less than 5.", "metadata": {}}
{"_id": "gpt3_1504", "text": "\nThis query selects the channel codes from the customer contact channels table that have fewer than 5 customers associated with them.", "metadata": {}}
{"_id": "gpt3_1505", "text": "\nThis query selects the channel_code from the customer_contact_channels table where the count of customer_id is less than 5.", "metadata": {}}
{"_id": "gpt3_1506", "text": "\nThis query will return the count of each card type code from the Customers_cards table.", "metadata": {}}
{"_id": "gpt3_1507", "text": "\nThis query will return the count of each card type code in the Customers_cards table.", "metadata": {}}
{"_id": "gpt3_1508", "text": "\nThis query will return the number of cards of each type in the Customers_cards table, grouped by card type code.", "metadata": {}}
{"_id": "gpt3_1509", "text": "\nThis query will return a count of all the customers' cards grouped by the card type code.", "metadata": {}}
{"_id": "gpt3_1510", "text": "\nThis query will return a count of the number of customers with each type of card, grouped by card type code.", "metadata": {}}
{"_id": "gpt3_1511", "text": "\nThis query counts the number of patients whose physician is John Dorian.", "metadata": {}}
{"_id": "gpt3_1512", "text": "\nThis query counts the number of patients prescribed medication by the physician named John Dorian.", "metadata": {}}
{"_id": "gpt3_1513", "text": "\nThis query counts the number of patients whose physician is \"John Dorian\".", "metadata": {}}
{"_id": "gpt3_1514", "text": "\nThis query will count the number of patients with a prescription from the physician named John Dorian.", "metadata": {}}
{"_id": "gpt3_1515", "text": "\nThis statement will count the number of patients that have been prescribed medication by the physician named John Dorian.", "metadata": {}}
{"_id": "gpt3_1516", "text": "\nThis query selects the first name and major of students who do not have a soy allergy.", "metadata": {}}
{"_id": "gpt3_1517", "text": "\nThis query selects the first name and major of students who are not allergic to soy.", "metadata": {}}
{"_id": "gpt3_1518", "text": "\nThis query selects the first name and major of all students who do not have a soy allergy.", "metadata": {}}
{"_id": "gpt3_1519", "text": "\nThis query will select the first name and major of all students who do not have a soy allergy.", "metadata": {}}
{"_id": "gpt3_1520", "text": "\nThis query selects the first name and major of all students who do not have a soy allergy.", "metadata": {}}
{"_id": "gpt3_1521", "text": "\nThis query will return the total sum of all the points from the player table.", "metadata": {}}
{"_id": "gpt3_1522", "text": "\nThis query will return the total sum of all points from the player table.", "metadata": {}}
{"_id": "gpt3_1523", "text": "\nThis query will return the total sum of all points from the player table.", "metadata": {}}
{"_id": "gpt3_1524", "text": "\nThis query will return the sum of all of the values in the Points column from the player table.", "metadata": {}}
{"_id": "gpt3_1525", "text": "\nThis query returns the total sum of points from all players in the player table.", "metadata": {}}
{"_id": "gpt3_1526", "text": "\nThis query will select the state from the college table (T1) that corresponds to the college names (T1.cName) in the tryout table (T2) that have a player position of 'striker' (T2", "metadata": {}}
{"_id": "gpt3_1527", "text": "\nThis query will select the state from the college table (T1) where the college name (cName) matches the college name in the tryout table (T2) and the player position (pPos) is 'striker'.", "metadata": {}}
{"_id": "gpt3_1528", "text": "\nThis query will select the state from the college table for all colleges that have a tryout for a striker position.", "metadata": {}}
{"_id": "gpt3_1529", "text": "\nThis query will select the state from the college table (T1) that have a tryout entry (T2) for a position of 'striker'.", "metadata": {}}
{"_id": "gpt3_1530", "text": "\nThis SQL statement will select the state from the college table (T1) for any college (T1.cName) that has a student (T2.cName) trying out for a striker position (T2.pPos).", "metadata": {}}
{"_id": "gpt3_1531", "text": "\nThis query selects the distinct names of all of the mountains climbed by climbers from West Germany.", "metadata": {}}
{"_id": "gpt3_1532", "text": "\nThis query selects the distinct names of mountains that climbers from West Germany have climbed.", "metadata": {}}
{"_id": "gpt3_1533", "text": "\nThis query selects the distinct names of mountains from the climber and mountain tables where the climber is from West Germany.", "metadata": {}}
{"_id": "gpt3_1534", "text": "\nThis query selects the distinct names of mountains climbed by climbers from West Germany.", "metadata": {}}
{"_id": "gpt3_1535", "text": "\nThis query will return a list of all the distinct mountains climbed by climbers from West Germany.", "metadata": {}}
{"_id": "gpt3_1536", "text": "\nThis query will return the sum of the account balances for customers in the states of Utah and Texas.", "metadata": {}}
{"_id": "gpt3_1537", "text": "\nThis query will return the sum of the account balances of all customers in either Utah or Texas.", "metadata": {}}
{"_id": "gpt3_1538", "text": "\nThis query will return the sum of the account balances of all customers located in either Utah or Texas.", "metadata": {}}
{"_id": "gpt3_1539", "text": "\nThis query will return the sum of all account balances from customers in the states of Utah and Texas.", "metadata": {}}
{"_id": "gpt3_1540", "text": "\nThis query will return the sum of all customer account balances from customers in either Utah or Texas.", "metadata": {}}
{"_id": "gpt3_1541", "text": "\nThis query returns the average height of all players who attended Yale University.", "metadata": {}}
{"_id": "gpt3_1542", "text": "\nThis query will return the average height of all players who attended Yale University.", "metadata": {}}
{"_id": "gpt3_1543", "text": "\nThis query returns the average height of all players who attended Yale University.", "metadata": {}}
{"_id": "gpt3_1544", "text": "\nThis query will calculate the average height of all players who attended Yale University.", "metadata": {}}
{"_id": "gpt3_1545", "text": "\nThis query finds the average height of players who attended Yale University.", "metadata": {}}
{"_id": "gpt3_1546", "text": "\nThis query will return the names of all people from the people table whose height is either greater than 200 cm or less than 190 cm.", "metadata": {}}
{"_id": "gpt3_1547", "text": "\nThis query will select the names of people from a database where their height is greater than 200 cm or less than 190 cm.", "metadata": {}}
{"_id": "gpt3_1548", "text": "\nThis query will select the name of any people from the people table who have a height greater than 200 cm or less than 190 cm.", "metadata": {}}
{"_id": "gpt3_1549", "text": "\nThis SQL statement will select the names of people from a table who have a height greater than 200 cm or less than 190 cm.", "metadata": {}}
{"_id": "gpt3_1550", "text": "\nThis query will select the name of all people from the people table who have a height greater than 200 cm or less than 190 cm.", "metadata": {}}
{"_id": "gpt3_1551", "text": "\nThis statement will select the file ID (f_id) from the files table for all entries with a format of mp3.", "metadata": {}}
{"_id": "gpt3_1552", "text": "\nThis query will return the f_id of all files in the table files that have a format of mp3.", "metadata": {}}
{"_id": "gpt3_1553", "text": "\nThis query will select the file id (f_id) from the files table where the format is mp3.", "metadata": {}}
{"_id": "gpt3_1554", "text": "\nThis query will return the file ID of all files with the format \"mp3\" from the files table.", "metadata": {}}
{"_id": "gpt3_1555", "text": "\nThis query will select the file ID of all files with the format \"mp3\" from the files table.", "metadata": {}}
{"_id": "gpt3_1556", "text": "\nThis query will select the main industry of each company and sum up the total market value of all companies in that industry.", "metadata": {}}
{"_id": "gpt3_1557", "text": "\nThis query selects the main industry and sums the market value of each company in that industry and groups the results by main industry.", "metadata": {}}
{"_id": "gpt3_1558", "text": "\nThis query will summarize the total market value of each main industry of all companies in the database. It will return the main industry and the sum of the market value of all companies in that industry.", "metadata": {}}
{"_id": "gpt3_1559", "text": "\nThis SQL query returns the sum of the market values for each main industry of the companies in the company table.", "metadata": {}}
{"_id": "gpt3_1560", "text": "\nThis statement is used to select the main industry and sum up the market value of each industry from the company table and group them by the main industry.", "metadata": {}}
{"_id": "gpt3_1561", "text": "\nThis query will sum up the number of show times per day for each cinema, and display the name of the cinema along with the total show times.", "metadata": {}}
{"_id": "gpt3_1562", "text": "\nThis query will select the name of the cinema and the sum of show times per day for each cinema from the schedule and cinema tables.", "metadata": {}}
{"_id": "gpt3_1563", "text": "\nThis query will select the name of each cinema and the sum of the show times per day for each cinema.", "metadata": {}}
{"_id": "gpt3_1564", "text": "\nThis query will select the name of each cinema and the total number of showings per day for each cinema.", "metadata": {}}
{"_id": "gpt3_1565", "text": "\nThis query is used to select the name of the cinema and the sum of the show times per day for each cinema. It does this by joining the schedule and cinema tables, grouping by the cinema_id, and summing the show_times", "metadata": {}}
{"_id": "gpt3_1566", "text": "\nThis query will return the names of documents that do not have any associated sections or images.", "metadata": {}}
{"_id": "gpt3_1567", "text": "\nThis query will return all document names from the documents table that do not have any related sections or images in the document_sections and document_sections_images tables, respectively.", "metadata": {}}
{"_id": "gpt3_1568", "text": "\nThis query returns a list of document names from the documents table that do not have any associated images in the document_sections_images table.", "metadata": {}}
{"_id": "gpt3_1569", "text": "\nThis query will return all document names from the documents table that do not have any associated images in the document_sections_images table.", "metadata": {}}
{"_id": "gpt3_1570", "text": "\nThis query returns the names of documents that do not have any images associated with them.", "metadata": {}}
{"_id": "gpt3_1571", "text": "\nThis query returns a list of all salaries from both the 2010 and 2001 years.", "metadata": {}}
{"_id": "gpt3_1572", "text": "\nThis query will return a list of all salaries from the salary table for the years 2010 and 2001.", "metadata": {}}
{"_id": "gpt3_1573", "text": "\nThis query will return the salary information from both the 2010 and 2001 years.", "metadata": {}}
{"_id": "gpt3_1574", "text": "\nThis query will return a list of salaries from both the 2010 and 2001 salary tables.", "metadata": {}}
{"_id": "gpt3_1575", "text": "\nThis query will return the salary data from both the 2010 and 2001 years from the salary table.", "metadata": {}}
{"_id": "gpt3_1576", "text": "\nThis query returns the last names of all students that are members of the Hopkins Student Enterprises club.", "metadata": {}}
{"_id": "gpt3_1577", "text": "\nThis query will select the last names of all students who are members of the Hopkins Student Enterprises club.", "metadata": {}}
{"_id": "gpt3_1578", "text": "\nThis query will return the last names of all students who are members of the club \"Hopkins Student Enterprises\".", "metadata": {}}
{"_id": "gpt3_1579", "text": "\nThis query will return the last names of all the students who are part of the Hopkins Student Enterprises club.", "metadata": {}}
{"_id": "gpt3_1580", "text": "\nThis query will return the last names of all students who are members of the Hopkins Student Enterprises club.", "metadata": {}}
{"_id": "gpt3_1581", "text": "\nThis query will select the names of all ships that are not currently on a mission.", "metadata": {}}
{"_id": "gpt3_1582", "text": "\nThis query will return the names of all ships that are not currently assigned to any mission.", "metadata": {}}
{"_id": "gpt3_1583", "text": "\nThis query will return the names of all ships that are not currently assigned to any missions.", "metadata": {}}
{"_id": "gpt3_1584", "text": "\nThis query will return the names of all ships that are not currently assigned to a mission.", "metadata": {}}
{"_id": "gpt3_1585", "text": "\nThis query will return the names of all ships that are not currently assigned to any mission.", "metadata": {}}
{"_id": "gpt3_1586", "text": "\nThis query will return all titles from the papers table that contain the phrase \"ML\".", "metadata": {}}
{"_id": "gpt3_1587", "text": "\nThis query will return all titles of papers from a database that contain the letters \"ML\".", "metadata": {}}
{"_id": "gpt3_1588", "text": "\nThis query selects the titles of all papers that contain the term \"ML\" in the title.", "metadata": {}}
{"_id": "gpt3_1589", "text": "\nThis query returns all papers with titles containing the string \"ML\".", "metadata": {}}
{"_id": "gpt3_1590", "text": "\nThis query returns all papers with titles containing the string \"ML\".", "metadata": {}}
{"_id": "gpt3_1591", "text": "\nThis query returns the StuID of students who are not participating in any activities.", "metadata": {}}
{"_id": "gpt3_1592", "text": "\nThis SQL statement will return a list of student IDs from the Student table that are not present in the Participates_in table.", "metadata": {}}
{"_id": "gpt3_1593", "text": "\nThis query will return the StuID of all students who are not participating in any activity.", "metadata": {}}
{"_id": "gpt3_1594", "text": "\nThis statement will return a list of all the student IDs from the Student table who are not included in the Participates_in table.", "metadata": {}}
{"_id": "gpt3_1595", "text": "\nThis statement will select all student IDs from the Student table that do not appear in the Participates_in table.", "metadata": {}}
{"_id": "gpt3_1596", "text": "\nThis query will select the distinct customer names and credit scores from the customer and loan tables, based on the customer ID.", "metadata": {}}
{"_id": "gpt3_1597", "text": "\nThis query selects the distinct customer names and credit scores from the customer and loan tables, where the customer ID in the customer table matches the customer ID in the loan table.", "metadata": {}}
{"_id": "gpt3_1598", "text": "\nThis query selects the distinct customer names and credit scores from the customer and loan tables based on the customer ID.", "metadata": {}}
{"_id": "gpt3_1599", "text": "\nThis statement selects all unique customer names and credit scores from the customer and loan tables, based on the customer ID.", "metadata": {}}
{"_id": "gpt3_1600", "text": "\nThis SQL query selects the distinct customer names and credit scores from the customer and loan tables, joining the two tables on the customer ID.", "metadata": {}}
{"_id": "gpt3_1601", "text": "\nThis query will return the statement_id and statement_details columns from the Statements table.", "metadata": {}}
{"_id": "gpt3_1602", "text": "\nThis statement will return the statement_id and statement_details from the Statements table.", "metadata": {}}
{"_id": "gpt3_1603", "text": "\nThis statement will select the statement_id and statement_details columns from the Statements table.", "metadata": {}}
{"_id": "gpt3_1604", "text": "\nThis query will return all the statement IDs and their associated statement details from the Statements table.", "metadata": {}}
{"_id": "gpt3_1605", "text": "\nThis statement will select the statement_id and statement_details columns from the Statements table.", "metadata": {}}
{"_id": "gpt3_1606", "text": "\nThis query returns the service name of services that have had more than two notifications of loss.", "metadata": {}}
{"_id": "gpt3_1607", "text": "\nThis query returns the service name from the 'services' table for all services that have had more than two first notifications of loss in the 'first_notification_of_loss' table.", "metadata": {}}
{"_id": "gpt3_1608", "text": "\nThis query retrieves the service name from the services table for all services that have been associated with more than two first notifications of loss.", "metadata": {}}
{"_id": "gpt3_1609", "text": "\nThis query will select the service name from the first notification of loss table, joining it with the services table, grouping the results by the service ID, and having a count greater than 2.", "metadata": {}}
{"_id": "gpt3_1610", "text": "\nThis query selects the service name from the first_notification_of_loss and services tables, grouping by the service_id and having a count greater than 2. The result is a list of service names that have been notified of loss more", "metadata": {}}
{"_id": "gpt3_1611", "text": "\nThis statement will select all distinct product colors from the Products table.", "metadata": {}}
{"_id": "gpt3_1612", "text": "\nThis query will select all unique product colors from the Products table.", "metadata": {}}
{"_id": "gpt3_1613", "text": "\nThis query will select all distinct product colors from the Products table.", "metadata": {}}
{"_id": "gpt3_1614", "text": "\nThis query will select all distinct product colors from the Products table.", "metadata": {}}
{"_id": "gpt3_1615", "text": "\nThis query will return a list of all distinct product colors from the Products table.", "metadata": {}}
{"_id": "gpt3_1616", "text": "\nThis statement will select the first and last name of all employees from the EMPLOYEE table who live in Calgary.", "metadata": {}}
{"_id": "gpt3_1617", "text": "\nThis statement will select the first and last names of all employees who live in the city of Calgary.", "metadata": {}}
{"_id": "gpt3_1618", "text": "\nThis query will select the first and last name of all employees from the EMPLOYEE table where the city is Calgary.", "metadata": {}}
{"_id": "gpt3_1619", "text": "\nThis statement will select the first and last name of all employees who live in the city of Calgary.", "metadata": {}}
{"_id": "gpt3_1620", "text": "\nThis statement selects the first and last names of all employees from the EMPLOYEE table who live in Calgary.", "metadata": {}}
{"_id": "gpt3_1621", "text": "\nThe query will return the most recent release date of the oldest artist in the artist table.", "metadata": {}}
{"_id": "gpt3_1622", "text": "\nThe query will return the release date of the most famous artist, based on their age, from the artist table.", "metadata": {}}
{"_id": "gpt3_1623", "text": "\nThe query will return the most recent release date from the artist table, sorted by age in descending order.", "metadata": {}}
{"_id": "gpt3_1624", "text": "\nThis query retrieves the most recent release date from an artist, sorted by age in descending order, with a limit of one.", "metadata": {}}
{"_id": "gpt3_1625", "text": "\nThis query returns the release date of the most famous release by an artist, sorted by age in descending order and limited to the first result.", "metadata": {}}
{"_id": "gpt3_1626", "text": "\nThis statement retrieves the names of people who have been perpetrators, sorted in descending order by the year they perpetrated.", "metadata": {}}
{"_id": "gpt3_1627", "text": "\nThis query retrieves the names of people from the people table who have been perpetrators, ordered by the year they were perpetrators in descending order.", "metadata": {}}
{"_id": "gpt3_1628", "text": "\nThis statement will select the name of people from the people table and join it with data from the perpetrator table, ordering the results by the year in the perpetrator table in descending order.", "metadata": {}}
{"_id": "gpt3_1629", "text": "\nThis query selects the name of people from the people table who are also in the perpetrator table, ordering them by the year in the perpetrator table in descending order.", "metadata": {}}
{"_id": "gpt3_1630", "text": "\nThis statement retrieves the names of people from the people table who are also perpetrators in the perpetrator table, and orders the results by the year of the perpetrator's crime in descending order.", "metadata": {}}
{"_id": "gpt3_1631", "text": "\nThis query will select the names of all physicians who are affiliated with both the Surgery and Psychiatry departments.", "metadata": {}}
{"_id": "gpt3_1632", "text": "\nThis query selects the names of all physicians who are affiliated with both the Surgery and Psychiatry departments.", "metadata": {}}
{"_id": "gpt3_1633", "text": "\nThis statement retrieves the names of physicians who are affiliated with both the Surgery and Psychiatry departments.", "metadata": {}}
{"_id": "gpt3_1634", "text": "\nThis query selects the name of all physicians who are affiliated with both the Surgery and Psychiatry departments.", "metadata": {}}
{"_id": "gpt3_1635", "text": "\nThis query returns the names of physicians who are affiliated with both the Surgery and Psychiatry departments.", "metadata": {}}
{"_id": "gpt3_1636", "text": "\nThis query will select the department name and building from the department table where the budget is greater than the average budget of all departments.", "metadata": {}}
{"_id": "gpt3_1637", "text": "\nThis SQL query will select the department name and building from the department table where the budget is greater than the average budget of all departments.", "metadata": {}}
{"_id": "gpt3_1638", "text": "\nThis query will select the department name and building from the department table where the budget is greater than the average budget across all departments.", "metadata": {}}
{"_id": "gpt3_1639", "text": "\nThis query selects the department name and building from the department table where the budget is greater than the average budget of all departments.", "metadata": {}}
{"_id": "gpt3_1640", "text": "\nThis query will select the department name and building from the department table for all departments with a budget greater than the average budget of all departments.", "metadata": {}}
{"_id": "gpt3_1641", "text": "\nThis query selects the shop details from the Shops table as T1, joining it to the Tourist Attractions table as T2, where the Tourist Attraction ID matches the Shop ID and the How to Get There is \u201cwalk", "metadata": {}}
{"_id": "gpt3_1642", "text": "\nThis query will return shop details from the Shops table for any tourist attractions that can be accessed by walking.", "metadata": {}}
{"_id": "gpt3_1643", "text": "\nThis query will select all shop details from the Shops table that have a Tourist Attraction ID that matches a Tourist Attraction in the Tourist Attractions table, where the How to Get There is \"walk\".", "metadata": {}}
{"_id": "gpt3_1644", "text": "\nThis statement will select the Shop Details from the Shops table (T1) that are associated with Tourist Attractions (T2) that can be reached by walking.", "metadata": {}}
{"_id": "gpt3_1645", "text": "\nThis query will select the shop details from the SHOPS table where the corresponding Tourist Attraction in the TOURIST_ATTRACTIONS table has a How_to_Get_There value of \"walk\".", "metadata": {}}
{"_id": "gpt3_1646", "text": "\nThis query will return the section title from the document_sections table for the document with the name \"David CV\" from the documents table.", "metadata": {}}
{"_id": "gpt3_1647", "text": "\nThis query will return the section titles from the document_sections table that are associated with the document named \"David CV\" from the documents table.", "metadata": {}}
{"_id": "gpt3_1648", "text": "\nThis statement will select the section title from the document_sections table for the document with the name \"David CV\" from the documents table.", "metadata": {}}
{"_id": "gpt3_1649", "text": "\nThis query will return the section titles of the document with the name \"David CV\".", "metadata": {}}
{"_id": "gpt3_1650", "text": "\nThis query will return the section titles of the document with the name \"David CV\".", "metadata": {}}
{"_id": "gpt3_1651", "text": "\nThis query selects the first and last name of actors who have acted in more than 30 films.", "metadata": {}}
{"_id": "gpt3_1652", "text": "\nThis SQL statement selects the first and last name of actors who have been in more than 30 films. It does this by joining the film_actor and actor tables on the actor_id column, and then grouping by the actor_id and counting", "metadata": {}}
{"_id": "gpt3_1653", "text": "\nThis query will select the first and last name of all actors who have appeared in more than 30 films.", "metadata": {}}
{"_id": "gpt3_1654", "text": "\nThis query selects the first and last names of actors who have appeared in more than 30 films.", "metadata": {}}
{"_id": "gpt3_1655", "text": "\nThis query selects the first and last names of actors who have appeared in more than 30 films.", "metadata": {}}
{"_id": "gpt3_1656", "text": "\nThis query finds the average number of points scored by players on the AIB club.", "metadata": {}}
{"_id": "gpt3_1657", "text": "\nThis query will return the average points of all players that belong to the club \"AIB\".", "metadata": {}}
{"_id": "gpt3_1658", "text": "\nThis query returns the average points scored by players from the club AIB.", "metadata": {}}
{"_id": "gpt3_1659", "text": "\nThis query will return the average number of points scored by all players in the club AIB.", "metadata": {}}
{"_id": "gpt3_1660", "text": "\nThis query returns the average points scored by players of the AIB club.", "metadata": {}}
{"_id": "gpt3_1661", "text": "\nThis query selects all distinct regions from the club table and orders them in ascending order.", "metadata": {}}
{"_id": "gpt3_1662", "text": "\nThis query will select all unique regions from the club table and order them in ascending order.", "metadata": {}}
{"_id": "gpt3_1663", "text": "\nThis statement selects all the unique regions from the club table and orders them in ascending alphabetical order.", "metadata": {}}
{"_id": "gpt3_1664", "text": "\nThis statement will select and display all of the distinct regions from the club table in ascending order.", "metadata": {}}
{"_id": "gpt3_1665", "text": "\nThis SELECT DISTINCT statement retrieves all the unique regions from the club table and orders them in alphabetical order.", "metadata": {}}
{"_id": "gpt3_1666", "text": "\nThis query will return the Comptroller who has the highest number of entries in the party table, along with the count of those entries.", "metadata": {}}
{"_id": "gpt3_1667", "text": "\nThis query returns the comptroller who has the most entries in the party table, along with the total number of entries.", "metadata": {}}
{"_id": "gpt3_1668", "text": "\nThis query will return the Comptroller with the highest number of entries in the party table, along with the total count of entries for that Comptroller.", "metadata": {}}
{"_id": "gpt3_1669", "text": "\nThis query will return the Comptroller with the highest count of entries in the party table, along with the count of entries.", "metadata": {}}
{"_id": "gpt3_1670", "text": "\nThis query returns the Comptroller with the highest number of members in the party, along with the total count of members.", "metadata": {}}
{"_id": "gpt3_1671", "text": "\nThis query will return the total number of customers in each outcome code group. The result will be a table with two columns, one for the outcome code and one for the count of customers in each group.", "metadata": {}}
{"_id": "gpt3_1672", "text": "\nThis query will return the number of mailshot customers grouped by outcome code. The result will be a table with two columns, the first being the outcome code and the second being the count of customers with that outcome code.", "metadata": {}}
{"_id": "gpt3_1673", "text": "\nThis query counts the number of customers who have each outcome code in the mailshot_customers table.", "metadata": {}}
{"_id": "gpt3_1674", "text": "\nThis query will return the number of customers for each outcome code in the mailshot_customers table. The returned data will be a list of outcome codes and the number of customers associated with each code.", "metadata": {}}
{"_id": "gpt3_1675", "text": "\nThis query will return a count of the number of mailshot customers for each outcome code.", "metadata": {}}
{"_id": "gpt3_1676", "text": "\nThis query counts the number of amenities for each dorm with a student capacity greater than 100.", "metadata": {}}
{"_id": "gpt3_1677", "text": "\nThis query counts the number of dorms that have a student capacity greater than 100 and also have an amenity, and groups the results by dormid.", "metadata": {}}
{"_id": "gpt3_1678", "text": "\nThis query counts the number of amenities for each dorm with a student capacity greater than 100.", "metadata": {}}
{"_id": "gpt3_1679", "text": "\nThis query counts the number of amenities for each dorm with a student capacity greater than 100.", "metadata": {}}
{"_id": "gpt3_1680", "text": "\nThis query counts the number of dorms with a student capacity greater than 100 and groups them by dormid.", "metadata": {}}
{"_id": "gpt3_1681", "text": "\nThis query selects all distinct service type codes from the services table that are associated with the organization 'Denesik and Sons Party' from the organizations table.", "metadata": {}}
{"_id": "gpt3_1682", "text": "\nThis statement retrieves all the distinct service type codes from the services table which are provided by the organization 'Denesik and Sons Party' from the organizations table.", "metadata": {}}
{"_id": "gpt3_1683", "text": "\nThis query returns all distinct service type codes from the services table associated with the organization 'Denesik and Sons Party' from the organizations table.", "metadata": {}}
{"_id": "gpt3_1684", "text": "\nThis query retrieves the distinct service type codes from the services table for the organization 'Denesik and Sons Party' from the organizations table.", "metadata": {}}
{"_id": "gpt3_1685", "text": "\nThis query will select all distinct service type codes from the services table, based on the organizations table, where the organization details match 'Denesik and Sons Party'.", "metadata": {}}
{"_id": "gpt3_1686", "text": "\nThis query will return a list of all the different types of institutions present in the table.", "metadata": {}}
{"_id": "gpt3_1687", "text": "\nThis query selects all the distinct types of institutions from the institution table.", "metadata": {}}
{"_id": "gpt3_1688", "text": "\nThis query returns all distinct types of institutions from the institution table.", "metadata": {}}
{"_id": "gpt3_1689", "text": "\nThis query will select all unique types of institutions from the institution table.", "metadata": {}}
{"_id": "gpt3_1690", "text": "\nThis SQL query will return a list of all the distinct types of institutions in a given table.", "metadata": {}}
{"_id": "gpt3_1691", "text": "\nThis query will return the average price of all products with a product type code of 'Clothes'.", "metadata": {}}
{"_id": "gpt3_1692", "text": "\nThis query will return the average price of all products with a product type code of \"Clothes\".", "metadata": {}}
{"_id": "gpt3_1693", "text": "\nThis query will return the average price of all products with the product type code of 'Clothes'.", "metadata": {}}
{"_id": "gpt3_1694", "text": "\nThis query will return the average price of all products with a product type code of 'Clothes'.", "metadata": {}}
{"_id": "gpt3_1695", "text": "\nThis query will return the average product price of all products with a product type code of 'Clothes'.", "metadata": {}}
{"_id": "gpt3_1696", "text": "\nThis query returns all the studios from the film table that have at least two entries in the table.", "metadata": {}}
{"_id": "gpt3_1697", "text": "\nThis query will return a list of studios from the film table that have produced at least two films.", "metadata": {}}
{"_id": "gpt3_1698", "text": "\nThis query returns a list of all the studios from the film table that have at least two films in the table.", "metadata": {}}
{"_id": "gpt3_1699", "text": "\nThis query returns all the studios from the film table that have produced at least two films.", "metadata": {}}
{"_id": "gpt3_1700", "text": "\nThis SQL statement will select all studios from the film table that have produced two or more films.", "metadata": {}}
{"_id": "gpt3_1701", "text": "\nThis query will return the employee ID of the employee named Ebba from the Employees table.", "metadata": {}}
{"_id": "gpt3_1702", "text": "\nThe SQL query above will return the employee ID of the employee named Ebba from the Employees table.", "metadata": {}}
{"_id": "gpt3_1703", "text": "\nThis query will return the employee ID of the employee whose name is Ebba from the Employees table.", "metadata": {}}
{"_id": "gpt3_1704", "text": "\nThis query will select the employee ID from the Employees table where the employee name is Ebba.", "metadata": {}}
{"_id": "gpt3_1705", "text": "\nThis SQL statement will select the employee ID of the employee named Ebba from the Employees table.", "metadata": {}}
{"_id": "gpt3_1706", "text": "\nThe SELECT statement will return the price range of all hotels in the table.", "metadata": {}}
{"_id": "gpt3_1707", "text": "\nThe SELECT price_range FROM HOTELS statement is used to retrieve the price range of hotels from a database.", "metadata": {}}
{"_id": "gpt3_1708", "text": "\nThe SELECT statement is used to query data from a database. The SELECT statement in this example is retrieving the price_range from the HOTELS table.", "metadata": {}}
{"_id": "gpt3_1709", "text": "\nThe SELECT statement is used to retrieve data from a database table. In this example, the SELECT statement is used to retrieve the price range of hotels from the HOTELS table.", "metadata": {}}
{"_id": "gpt3_1710", "text": "\nThe SQL query \"SELECT price_range FROM HOTELS\" will return the price range of all hotels in the database.", "metadata": {}}
{"_id": "gpt3_1711", "text": "\nThis query selects the names of all scientists who are assigned to both the 'Matter of Time' and 'A Puzzling Parallax' projects.", "metadata": {}}
{"_id": "gpt3_1712", "text": "\nThis query returns the names of the scientists who were assigned to both the 'Matter of Time' and 'A Puzzling Parallax' projects.", "metadata": {}}
{"_id": "gpt3_1713", "text": "\nThis query will return the names of all scientists who are assigned to both the 'Matter of Time' and 'A Puzzling Parallax' projects.", "metadata": {}}
{"_id": "gpt3_1714", "text": "\nThis query selects the names of scientists who are assigned to both the 'Matter of Time' and 'A Puzzling Parallax' projects.", "metadata": {}}
{"_id": "gpt3_1715", "text": "\nThis query selects the names of all scientists who are assigned to both the 'Matter of Time' and 'A Puzzling Parallax' projects.", "metadata": {}}
{"_id": "gpt3_1716", "text": "\nThis query returns the total number of records in the Flight table.", "metadata": {}}
{"_id": "gpt3_1717", "text": "\nThis query will return the total number of records in the Flight table.", "metadata": {}}
{"_id": "gpt3_1718", "text": "\nThis query returns the total number of flights in the Flight table.", "metadata": {}}
{"_id": "gpt3_1719", "text": "\nThis query will return the total number of records in the Flight table.", "metadata": {}}
{"_id": "gpt3_1720", "text": "\nThis query will return the total number of flights in the Flight table.", "metadata": {}}
{"_id": "gpt3_1721", "text": "\nThis query counts the number of purchases made by members with a level of 6.", "metadata": {}}
{"_id": "gpt3_1722", "text": "\nThis query returns the number of purchases made by members with a membership level of 6.", "metadata": {}}
{"_id": "gpt3_1723", "text": "\nThis query will count the number of purchases made by members who have a level 6 membership.", "metadata": {}}
{"_id": "gpt3_1724", "text": "\nThis query counts the number of purchases in the purchase table that were made by members with a level of 6 in the member table.", "metadata": {}}
{"_id": "gpt3_1725", "text": "\nThis query counts the total number of purchases made by members with a level of 6.", "metadata": {}}
{"_id": "gpt3_1726", "text": "\nThis query selects the name and gender of staff members who have been assigned to a department since 2016.", "metadata": {}}
{"_id": "gpt3_1727", "text": "\nThis query selects the staff name and gender from the staff table (T1) based on the staff department assignments (T2) where the date assigned from is in the year 2016.", "metadata": {}}
{"_id": "gpt3_1728", "text": "\nThis query selects the name and gender of staff members who were assigned to a department in 2016.", "metadata": {}}
{"_id": "gpt3_1729", "text": "\nThis query selects the staff name and gender from the staff table, and joins it with the staff_department_assignments table to get the staff_id. It then filters the results to only include records where the date_assigned", "metadata": {}}
{"_id": "gpt3_1730", "text": "\nThis query selects the staff name and gender of all staff members who were assigned to a department in 2016.", "metadata": {}}
{"_id": "gpt3_1731", "text": "\nThis query will return the number of distinct game types in the Video_games table.", "metadata": {}}
{"_id": "gpt3_1732", "text": "\nThis query will return the number of distinct game types in the Video_games table.", "metadata": {}}
{"_id": "gpt3_1733", "text": "\nThis query will return the number of distinct game types found in the Video_games table.", "metadata": {}}
{"_id": "gpt3_1734", "text": "\nThis query returns the number of distinct game types in the Video_games table.", "metadata": {}}
{"_id": "gpt3_1735", "text": "\nThis query will count the number of distinct game types in the Video_games table.", "metadata": {}}
{"_id": "gpt3_1736", "text": "\nThis query returns the rank of each faculty member and the number of students they advise.", "metadata": {}}
{"_id": "gpt3_1737", "text": "\nThis query returns the rank of the faculty member and the count of students they have advised.", "metadata": {}}
{"_id": "gpt3_1738", "text": "\nThis query will return the rank of each faculty member and the number of students they advise.", "metadata": {}}
{"_id": "gpt3_1739", "text": "\nThis query counts the number of students for each faculty rank.", "metadata": {}}
{"_id": "gpt3_1740", "text": "\nThis query will return the rank of each faculty member and the count of the number of students they have advised.", "metadata": {}}
{"_id": "gpt3_1741", "text": "\nThis query will select the title of all movies directed by Steven Spielberg.", "metadata": {}}
{"_id": "gpt3_1742", "text": "\nThis query will return the titles of all movies directed by Steven Spielberg.", "metadata": {}}
{"_id": "gpt3_1743", "text": "\nThis query will return a list of all movies directed by Steven Spielberg.", "metadata": {}}
{"_id": "gpt3_1744", "text": "\nThis query will return the titles of all movies directed by Steven Spielberg.", "metadata": {}}
{"_id": "gpt3_1745", "text": "\nThis query will return the titles of all movies directed by Steven Spielberg.", "metadata": {}}
{"_id": "gpt3_1746", "text": "\nThis query will return the two most common department store chain IDs in the department_stores table, sorted in descending order by the number of occurrences of each chain ID.", "metadata": {}}
{"_id": "gpt3_1747", "text": "\nThis query returns the two department store chains with the highest number of stores, ordered by count in descending order.", "metadata": {}}
{"_id": "gpt3_1748", "text": "\nThis query retrieves the two most popular department store chains from the department_stores table, sorted by the number of stores in each chain.", "metadata": {}}
{"_id": "gpt3_1749", "text": "\nThis query returns the two department store chains with the most stores, ordered by the count of stores in each chain.", "metadata": {}}
{"_id": "gpt3_1750", "text": "\nThis query will retrieve the two most common department store chain IDs from the department_stores table, ordered by the number of occurrences.", "metadata": {}}
{"_id": "gpt3_1751", "text": "\nThis query selects the name of the driver with the most years working from the driver and school_bus tables, ordered by years_working in descending order, and returns the top record.", "metadata": {}}
{"_id": "gpt3_1752", "text": "\nThis query returns the name of the driver with the most years of experience driving a school bus.", "metadata": {}}
{"_id": "gpt3_1753", "text": "\nThis query selects the name of the driver with the most years of experience from the driver and school_bus tables, ordered by years_working in descending order and limited to the first result.", "metadata": {}}
{"_id": "gpt3_1754", "text": "\nThis query selects the name of the driver with the most years of experience from the driver and school_bus tables, ordered by years_working in descending order, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_1755", "text": "\nThis query selects the name of the driver with the most years of experience from the driver and school_bus tables, ordered by years_working in descending order, and with a limit of 1 result.", "metadata": {}}
{"_id": "gpt3_1756", "text": "\nThis query will select the customer names from the customers table where the payment method is not equal to 'Cash'.", "metadata": {}}
{"_id": "gpt3_1757", "text": "\nThis query will select the customer name from the customers table where the payment method is not 'Cash'.", "metadata": {}}
{"_id": "gpt3_1758", "text": "\nThis query selects the customer names from the customers table where the payment method is not equal to 'Cash'.", "metadata": {}}
{"_id": "gpt3_1759", "text": "\nThis query will select the customer names from the customers table where the payment method is not cash.", "metadata": {}}
{"_id": "gpt3_1760", "text": "\nThis query will select the customer name from the customers table where the payment method is not cash.", "metadata": {}}
{"_id": "gpt3_1761", "text": "\nThis query will return the total count of all records in the building table.", "metadata": {}}
{"_id": "gpt3_1762", "text": "\nThis query returns the total number of buildings in the table.", "metadata": {}}
{"_id": "gpt3_1763", "text": "\nThis query will return the total number of buildings in the table.", "metadata": {}}
{"_id": "gpt3_1764", "text": "\nThis query returns the total number of records in the building table.", "metadata": {}}
{"_id": "gpt3_1765", "text": "\nThis query will return the total number of records in the building table.", "metadata": {}}
{"_id": "gpt3_1766", "text": "\nThis query will return the total number of records in the Flight table.", "metadata": {}}
{"_id": "gpt3_1767", "text": "\nThis statement will return the total number of records in the Flight table.", "metadata": {}}
{"_id": "gpt3_1768", "text": "\nThis query returns the total number of records in the Flight table.", "metadata": {}}
{"_id": "gpt3_1769", "text": "\nThis query will return the total number of records in the Flight table.", "metadata": {}}
{"_id": "gpt3_1770", "text": "\nThis query counts the total number of records in the Flight table.", "metadata": {}}
{"_id": "gpt3_1771", "text": "\nThis query selects the driverid and surname of the driver with the fastest lap time from the drivers and laptimes tables, ordered by milliseconds in descending order, and limited to the first result.", "metadata": {}}
{"_id": "gpt3_1772", "text": "\nThis query selects the driverid and surname of the driver with the fastest laptime from the drivers and laptimes tables. The driverid and surname are retrieved from the drivers table and the laptimes table is used to order the results by milliseconds.", "metadata": {}}
{"_id": "gpt3_1773", "text": "\nThis statement selects the driverid and surname of the driver with the fastest lap time from the drivers and laptimes tables. The driverid and surname are retrieved from the drivers table (T1) and are joined with the laptimes table (T", "metadata": {}}
{"_id": "gpt3_1774", "text": "\nThis query selects the driver ID and surname of the fastest driver from the drivers and laptimes tables, ordered by the fastest time in milliseconds. It returns the driver ID and surname of the driver with the fastest time.", "metadata": {}}
{"_id": "gpt3_1775", "text": "\nThis query selects the driverid and surname from the drivers table (T1) and joins it with the laptimes table (T2) to order the results by the highest milliseconds and limit the result to one row. The result will be the", "metadata": {}}
{"_id": "gpt3_1776", "text": "\nThis query returns the two department store chains with the highest number of department stores in the table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_1777", "text": "\nThis query returns the two most common department store chains, based on the number of stores in each chain. It does this by selecting the dept_store_chain_id from the department_stores table, grouping them by chain, ordering them", "metadata": {}}
{"_id": "gpt3_1778", "text": "\nThis query returns the two department store chains with the highest number of stores, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_1779", "text": "\nThis query returns the two most common department store chain IDs from the department_stores table, sorted in descending order by the number of occurrences of each chain ID.", "metadata": {}}
{"_id": "gpt3_1780", "text": "\nThis query returns the two department store chain IDs with the highest number of department stores in the table, ordered in descending order.", "metadata": {}}
{"_id": "gpt3_1781", "text": "\nThis query returns the buildings from the Faculty table where there are at least 10 professors with the rank of Professor.", "metadata": {}}
{"_id": "gpt3_1782", "text": "\nThis query will select the building from the Faculty table where the rank is \"Professor\" and group the buildings together that have 10 or more professors.", "metadata": {}}
{"_id": "gpt3_1783", "text": "\nThis query retrieves the building names from the Faculty table where rank is equal to \"Professor\" and groups them together having at least 10 occurrences.", "metadata": {}}
{"_id": "gpt3_1784", "text": "\nThis query will select all buildings from the Faculty table where the rank is \"Professor\" and having a count of at least 10.", "metadata": {}}
{"_id": "gpt3_1785", "text": "\nThis SQL query will select the building names from the Faculty table where the rank is \"Professor\" and will group the results by building name, only displaying buildings that have 10 or more professors.", "metadata": {}}
{"_id": "gpt3_1786", "text": "\nThis query will return the name of the wrestler who has held a title for the least amount of days.", "metadata": {}}
{"_id": "gpt3_1787", "text": "\nThis query will return the name of the wrestler who has held a title for the least amount of days.", "metadata": {}}
{"_id": "gpt3_1788", "text": "\nThis query selects the name of the wrestler who has held a championship title for the least amount of days, and orders the results in ascending order. The LIMIT 1 clause limits the output to the wrestler who has held the title for the least amount", "metadata": {}}
{"_id": "gpt3_1789", "text": "\nThis query selects the name of the wrestler who has held a championship title for the least amount of time.", "metadata": {}}
{"_id": "gpt3_1790", "text": "\nThis query selects the name of the wrestler who has held a title for the least amount of days, and orders the results in ascending order. The LIMIT 1 clause limits the results to the wrestler who has held a title for the least amount of", "metadata": {}}
{"_id": "gpt3_1791", "text": "\nThis query returns a list of course_id values from the course table that are not present in the prereq table.", "metadata": {}}
{"_id": "gpt3_1792", "text": "\nThis query returns the course_id of all courses from the course table that are not present in the prereq table.", "metadata": {}}
{"_id": "gpt3_1793", "text": "\nThis statement returns the course_id from the course table that are not present in the prereq table.", "metadata": {}}
{"_id": "gpt3_1794", "text": "\nThis query returns all course_ids from the course table that are not present in the prereq table.", "metadata": {}}
{"_id": "gpt3_1795", "text": "\nThis statement will select all course_id values from the course table that are not present in the prereq table.", "metadata": {}}
{"_id": "gpt3_1796", "text": "\nThis query will return the number of distinct students who received a grade of \"B\" in a course.", "metadata": {}}
{"_id": "gpt3_1797", "text": "\nThis query will return the number of distinct students who have received a grade of \"B\" in a course.", "metadata": {}}
{"_id": "gpt3_1798", "text": "\nThis query will return the number of distinct students who have received a grade of \"B\" in a course.", "metadata": {}}
{"_id": "gpt3_1799", "text": "\nThis query will return the number of distinct students who have received a grade of \"B\" in a course.", "metadata": {}}
{"_id": "gpt3_1800", "text": "\nThis query will count the number of distinct student IDs from the ENROLLED_IN table who have a grade of \"B\".", "metadata": {}}
{"_id": "gpt3_1801", "text": "\nThis query selects all distinct product names from the products table and orders them alphabetically.", "metadata": {}}
{"_id": "gpt3_1802", "text": "\nThis query will select all distinct product names from the products table and order them alphabetically.", "metadata": {}}
{"_id": "gpt3_1803", "text": "\nThis statement returns a list of distinct product names from the products table, ordered alphabetically.", "metadata": {}}
{"_id": "gpt3_1804", "text": "\nThis query selects all distinct product names from the products table, and orders them alphabetically.", "metadata": {}}
{"_id": "gpt3_1805", "text": "\nThis query will return a list of unique product names from the products table, sorted in alphabetical order.", "metadata": {}}
{"_id": "gpt3_1806", "text": "\nThis query returns the document_id values from the Documents table that are not present in the Documents_with_expenses table.", "metadata": {}}
{"_id": "gpt3_1807", "text": "\nThis query returns a list of document_id values from the Documents table that are not present in the Documents_with_expenses table.", "metadata": {}}
{"_id": "gpt3_1808", "text": "\nThis query will return all document_id values from the Documents table that are not present in the Documents_with_expenses table.", "metadata": {}}
{"_id": "gpt3_1809", "text": "\nThis query finds all document IDs from the Documents table that are not present in the Documents_with_expenses table.", "metadata": {}}
{"_id": "gpt3_1810", "text": "\nThis query will return a list of document_ids from the Documents table that are not present in the Documents_with_expenses table.", "metadata": {}}
{"_id": "gpt3_1811", "text": "\nThis query retrieves the flight number and distance of the most expensive flight from the Flight table, ordered by price in descending order, and limited to the first result.", "metadata": {}}
{"_id": "gpt3_1812", "text": "\nThis query returns the flight number and distance of the most expensive flight in the Flight table, ordered by price in descending order and limited to the first row.", "metadata": {}}
{"_id": "gpt3_1813", "text": "\nThis query will select the flight number and distance of the most expensive flight in the Flight table and order the results by price in descending order. The result will be limited to one row.", "metadata": {}}
{"_id": "gpt3_1814", "text": "\nThis query retrieves the flight number (flno) and distance of the most expensive Flight in the Flight table, ordered by price in descending order and limited to 1 result.", "metadata": {}}
{"_id": "gpt3_1815", "text": "\nThis query selects the flight number and distance of the Flight with the highest price, and limits the result to one row.", "metadata": {}}
{"_id": "gpt3_1816", "text": "\nThis query selects the department store IDs and store names from the departments and department stores tables where the department name is either \"marketing\" or \"managing\". It returns the intersection of these two results.", "metadata": {}}
{"_id": "gpt3_1817", "text": "\nThis query selects the department store ID and store name from the departments and department stores tables where the department name is either \"marketing\" or \"managing\". The result is the intersection of the two sets, meaning the department store ID and store", "metadata": {}}
{"_id": "gpt3_1818", "text": "\nThis query selects the department store ID and store name from the departments and department stores tables where the department name is either \"marketing\" or \"managing\". The result is the intersection of the two sets, meaning only the department store ID and", "metadata": {}}
{"_id": "gpt3_1819", "text": "\nThis query selects the department store ID and store name from the departments and department stores tables where the department name is either \"marketing\" or \"managing\". It returns only the department store ID and store name that are found in both the \"", "metadata": {}}
{"_id": "gpt3_1820", "text": "\nThis query selects the dept_store_id and store_name from the department_stores table for all stores with a department named \"marketing\" and \"managing\".", "metadata": {}}
{"_id": "gpt3_1821", "text": "\nThis statement will select the name of all manufacturers from the manufacturers table where their revenue is greater than the average revenue of all manufacturers in the table.", "metadata": {}}
{"_id": "gpt3_1822", "text": "\nThis statement selects the names of all manufacturers from the manufacturers table that have a revenue greater than the average revenue of all manufacturers.", "metadata": {}}
{"_id": "gpt3_1823", "text": "\nThis statement selects the names of all manufacturers from the manufacturers table with a revenue higher than the average revenue of all manufacturers.", "metadata": {}}
{"_id": "gpt3_1824", "text": "\nThis query selects the names of all manufacturers from a table whose revenue is greater than the average revenue of all manufacturers in the table.", "metadata": {}}
{"_id": "gpt3_1825", "text": "\nThis statement selects the name of all manufacturers from the manufacturers table whose revenue is greater than the average revenue of all manufacturers.", "metadata": {}}
{"_id": "gpt3_1826", "text": "\nThis query selects the player name (pName) and home state (HS) from the player table (T1) for all players who received a \"yes\" decision from the tryout table (T2).", "metadata": {}}
{"_id": "gpt3_1827", "text": "\nThis query selects the player name and high school from the player table for all players who have been accepted in the tryout.", "metadata": {}}
{"_id": "gpt3_1828", "text": "\nThis query will select the player name and highest score from the player and tryout tables for players who were accepted in the tryout.", "metadata": {}}
{"_id": "gpt3_1829", "text": "\nThis query selects the player name and high score from the player table for all players who were accepted in the tryout.", "metadata": {}}
{"_id": "gpt3_1830", "text": "\nThis query will select the player name (pName) and home state (HS) from the player table (T1) for those players who have been accepted in a tryout (T2) with decision = 'yes'.", "metadata": {}}
{"_id": "gpt3_1831", "text": "\nThis query returns a list of advisors who have at least two students assigned to them.", "metadata": {}}
{"_id": "gpt3_1832", "text": "\nThis query will return a list of advisors from the Student table who have more than two students assigned to them.", "metadata": {}}
{"_id": "gpt3_1833", "text": "\nThis query returns a list of advisors from the Student table who have two or more students assigned to them.", "metadata": {}}
{"_id": "gpt3_1834", "text": "\nThis query returns a list of advisors who have at least two students assigned to them.", "metadata": {}}
{"_id": "gpt3_1835", "text": "\nThis query returns a list of advisors from the Student table who have two or more students assigned to them.", "metadata": {}}
{"_id": "gpt3_1836", "text": "\nThis query returns the total number of distinct majors and the total number of distinct city codes in the student table.", "metadata": {}}
{"_id": "gpt3_1837", "text": "\nThis query counts the total number of distinct majors and distinct city codes from the student table.", "metadata": {}}
{"_id": "gpt3_1838", "text": "\nThis query returns the count of distinct majors and the count of distinct city codes from the student table.", "metadata": {}}
{"_id": "gpt3_1839", "text": "\nThis query counts the number of distinct majors and distinct city codes in the student table.", "metadata": {}}
{"_id": "gpt3_1840", "text": "\nThis query will count the number of distinct majors and the number of distinct city codes in the student table.", "metadata": {}}
{"_id": "gpt3_1841", "text": "\nThis query will select the date and cloud cover from the weather table and order the results by the cloud cover in descending order, limiting the results to the top 5.", "metadata": {}}
{"_id": "gpt3_1842", "text": "\nThis query will select the date and cloud cover from the weather table, and order the results by cloud cover in descending order, and limit the results to the top 5 entries.", "metadata": {}}
{"_id": "gpt3_1843", "text": "\nThis query will return the date and cloud cover of the 5 days with the highest cloud cover from the weather table, ordered from highest to lowest.", "metadata": {}}
{"_id": "gpt3_1844", "text": "\nThis query retrieves the date and cloud cover from the weather table and orders the results in descending order of cloud cover, then limits the results to the top 5.", "metadata": {}}
{"_id": "gpt3_1845", "text": "\nThis query will select the date and cloud cover from the weather table, and order the results by cloud cover in descending order, returning the top 5 results.", "metadata": {}}
{"_id": "gpt3_1846", "text": "\nThis query will return the average age of students grouped by their sex.", "metadata": {}}
{"_id": "gpt3_1847", "text": "\nThis query will return the average age for each gender from the Student table.", "metadata": {}}
{"_id": "gpt3_1848", "text": "\nThis query will return the average age of students grouped by their gender (sex).", "metadata": {}}
{"_id": "gpt3_1849", "text": "\nThis query will return the average age of all students grouped by sex. It will return two columns, one containing the average age of all male students, and the other containing the average age of all female students.", "metadata": {}}
{"_id": "gpt3_1850", "text": "\nThis query will return the average age for each sex from the Student table. It will return two columns, one with the average age and the other with the sex.", "metadata": {}}
{"_id": "gpt3_1851", "text": "\nThis query will return a list of all unique carriers from the phone table that have a memory size greater than 32 GB.", "metadata": {}}
{"_id": "gpt3_1852", "text": "\nThis query will select the unique carriers from the phone table where the memory in gigabytes is greater than 32.", "metadata": {}}
{"_id": "gpt3_1853", "text": "\nThis query will return a list of all distinct carriers from the phone table that have a memory greater than 32GB.", "metadata": {}}
{"_id": "gpt3_1854", "text": "\nThis query will return a list of carriers for phones with a memory of more than 32GB.", "metadata": {}}
{"_id": "gpt3_1855", "text": "\nThis query selects all distinct carriers from the phone table where the memory_in_G is greater than 32.", "metadata": {}}
{"_id": "gpt3_1856", "text": "\nThis statement will select the names of actors and the names of musicals from two tables, actor and musical, and join them together based on the Musical_ID column.", "metadata": {}}
{"_id": "gpt3_1857", "text": "\nThis statement will select the Name of an actor from the \"actor\" table and the Name of a musical from the \"musical\" table, where the Musical_ID of an actor matches the Musical_ID of a musical.", "metadata": {}}
{"_id": "gpt3_1858", "text": "\nThis statement selects the name of an actor and the name of the musical they are associated with from the actor and musical tables, respectively, based on the musical ID.", "metadata": {}}
{"_id": "gpt3_1859", "text": "\nThis query selects the names of actors and the names of musicals they are associated with by joining the actor and musical tables on the Musical_ID column.", "metadata": {}}
{"_id": "gpt3_1860", "text": "\nThis query selects the names of actors and the names of musicals from two tables, actor and musical, and joins them together by the Musical_ID.", "metadata": {}}
{"_id": "gpt3_1861", "text": "\nThis query selects the first and last names of authors who have affiliations with the University of Oxford.", "metadata": {}}
{"_id": "gpt3_1862", "text": "\nThis query selects the distinct first and last names of authors associated with the University of Oxford from the authors, authorship, and inst tables.", "metadata": {}}
{"_id": "gpt3_1863", "text": "\nThis query will select all distinct first and last names of authors from the authors, authorship, and inst tables who are affiliated with the University of Oxford.", "metadata": {}}
{"_id": "gpt3_1864", "text": "\nThis statement selects the distinct first and last names of authors who have affiliations with the University of Oxford.", "metadata": {}}
{"_id": "gpt3_1865", "text": "\nThis query selects the distinct first and last names of authors who have been affiliated with the University of Oxford.", "metadata": {}}
{"_id": "gpt3_1866", "text": "\nThis query will select all the distinct first names of customers from the Customer table who are from Brazil, by joining the Customer and Invoice tables on the CustomerId column.", "metadata": {}}
{"_id": "gpt3_1867", "text": "\nThis statement retrieves the distinct first names of customers from the CUSTOMER table who are from Brazil, by joining the CUSTOMER and INVOICE tables on CustomerId.", "metadata": {}}
{"_id": "gpt3_1868", "text": "\nThis statement retrieves the distinct first names of customers from the CUSTOMER table who reside in Brazil, based on the INVOICE table.", "metadata": {}}
{"_id": "gpt3_1869", "text": "\nThis query will select distinct first names of customers from the CUSTOMER table who are from Brazil, based on the JOIN with the INVOICE table on the CustomerId column.", "metadata": {}}
{"_id": "gpt3_1870", "text": "\nThis query will return the distinct first names of customers from Brazil.", "metadata": {}}
{"_id": "gpt3_1871", "text": "\nThis query will return the product name of all products that have a color code of 'yellow' according to the ref_colors table.", "metadata": {}}
{"_id": "gpt3_1872", "text": "\nThis query selects the product name from the products table for all products that have a color code that matches a color description of 'yellow' in the ref_colors table.", "metadata": {}}
{"_id": "gpt3_1873", "text": "\nThis query selects the product names from the products table that have a color code that matches a color description of 'yellow' from the ref_colors table.", "metadata": {}}
{"_id": "gpt3_1874", "text": "\nThis statement retrieves the product name from the products table for any product that has a color code that matches a color description of 'yellow' in the ref_colors table.", "metadata": {}}
{"_id": "gpt3_1875", "text": "\nThis query will select the product name from the products table where the color code matches the color description 'yellow' in the ref_colors table.", "metadata": {}}
{"_id": "gpt3_1876", "text": "\nThis query will select all parties from the \"party\" table that are not present in the \"election\" table.", "metadata": {}}
{"_id": "gpt3_1877", "text": "\nThis query will return all parties from the party table that are not present in the election table.", "metadata": {}}
{"_id": "gpt3_1878", "text": "\nThis query will return all the parties from the 'party' table that are not present in the 'election' table.", "metadata": {}}
{"_id": "gpt3_1879", "text": "\nThis query will return a list of all parties from the \"party\" table that are not present in the \"election\" table.", "metadata": {}}
{"_id": "gpt3_1880", "text": "\nThis query will return all parties from the party table that are not present in the election table.", "metadata": {}}
{"_id": "gpt3_1881", "text": "\nThe above SQL query will return a list of artists, their age, and the country they are from, sorted by the year they joined.", "metadata": {}}
{"_id": "gpt3_1882", "text": "\nThis query will select the name, age and country of every artist from a table and order the results by the year they joined.", "metadata": {}}
{"_id": "gpt3_1883", "text": "\nThis query will return a list of artists sorted by the year they joined, including their name, age, and country.", "metadata": {}}
{"_id": "gpt3_1884", "text": "\nThe query will return a list of artists in order of the year they joined, including their name, age, and country.", "metadata": {}}
{"_id": "gpt3_1885", "text": "\nThis query will select the name, age, and country of all artists from a table, and order them by the year they joined.", "metadata": {}}
{"_id": "gpt3_1886", "text": "\nThis query returns the number of products in the products table with a product_category_code of \"Seeds\".", "metadata": {}}
{"_id": "gpt3_1887", "text": "\nThis query returns the total number of products that have a product category code of \"Seeds\".", "metadata": {}}
{"_id": "gpt3_1888", "text": "\nThis query will return the total number of products in the products table that have a product_category_code of \"Seeds\".", "metadata": {}}
{"_id": "gpt3_1889", "text": "\nThis query will return the total number of products with the product category code \"Seeds\".", "metadata": {}}
{"_id": "gpt3_1890", "text": "\nThis query would count the number of products in the products table with a product category code of \"Seeds\".", "metadata": {}}
{"_id": "gpt3_1891", "text": "\nThis query will select the customer_id and customer_name from the customers table and order the results by the customer_id in ascending order.", "metadata": {}}
{"_id": "gpt3_1892", "text": "\nThis query retrieves the customer ID and customer name from the customers table, sorted in ascending order by customer ID.", "metadata": {}}
{"_id": "gpt3_1893", "text": "\nThis statement selects the customer_id and customer_name from the customers table and orders the results by customer_id in ascending order.", "metadata": {}}
{"_id": "gpt3_1894", "text": "\nThis query retrieves the customer_id and customer_name from the customers table, sorted by customer_id in ascending order.", "metadata": {}}
{"_id": "gpt3_1895", "text": "\nThis query selects the customer_id and customer_name columns from the customers table and orders the results by customer_id in ascending order.", "metadata": {}}
{"_id": "gpt3_1896", "text": "\nThis query will count the number of distinct names in the PersonFriend table that do not have a friend in the Person table from the city of Austin.", "metadata": {}}
{"_id": "gpt3_1897", "text": "\nThis statement will return the number of distinct names in the PersonFriend table that do not have a corresponding name in the Person table with a city of Austin.", "metadata": {}}
{"_id": "gpt3_1898", "text": "\nThis query will count the number of distinct names in the PersonFriend table that do not have a friend who lives in Austin.", "metadata": {}}
{"_id": "gpt3_1899", "text": "\nThis query will count the number of distinct names in the PersonFriend table that do not have a friend living in Austin.", "metadata": {}}
{"_id": "gpt3_1900", "text": "\nThis query returns the number of distinct names in the PersonFriend table that do not have a corresponding name in the Person table with a city of 'Austin'.", "metadata": {}}
{"_id": "gpt3_1901", "text": "\nThis query will return the average price range of all hotels grouped by whether or not they allow pets. The result of the query will be two columns: pets_allowed_yn (Yes/No) and avg(price_range).", "metadata": {}}
{"_id": "gpt3_1902", "text": "\nThis query will calculate the average price range of hotels, grouped by whether or not they allow pets.", "metadata": {}}
{"_id": "gpt3_1903", "text": "\nThis query will return the average price range for hotels that allow pets and those that do not allow pets. The result will be two columns, one for each value of pets_allowed_yn (Yes or No) and the average price range for", "metadata": {}}
{"_id": "gpt3_1904", "text": "\nThis query returns the average price range for hotels that allow pets (pets_allowed_yn) and those that do not.", "metadata": {}}
{"_id": "gpt3_1905", "text": "\nThis query will return the average price range for hotels that allow pets and those that don't. The results will be displayed in two columns, one for hotels that allow pets (pets_allowed_yn) and one for the average price range", "metadata": {}}
{"_id": "gpt3_1906", "text": "\nThis SQL statement selects the employee names of the employee who authorized the destruction of a document, and the employee who destroyed the document, from the Documents_to_be_destroyed, Employees, and Employees tables.", "metadata": {}}
{"_id": "gpt3_1907", "text": "\nThis SQL query selects the names of the employees who authorized the destruction of documents and the names of the employees who destroyed the documents from the Documents_to_be_destroyed table, by joining the Employees table twice.", "metadata": {}}
{"_id": "gpt3_1908", "text": "\nThis query selects the names of two employees from the Documents_to_be_destroyed and Employees tables, with the first employee being the one who authorised the destruction and the second being the one who destroyed the document.", "metadata": {}}
{"_id": "gpt3_1909", "text": "\nThis query selects the employee names of the employees who authorized the destruction of documents and the employee who destroyed the documents, by joining the Documents_to_be_destroyed, Employees, and Employees tables.", "metadata": {}}
{"_id": "gpt3_1910", "text": "\nThis query selects the name of the employee who authorized the destruction of a document, as well as the name of the employee who destroyed the document, from the Documents_to_be_destroyed and Employees tables.", "metadata": {}}
{"_id": "gpt3_1911", "text": "\nThis query will return the names of all musicals in which at least three actors have been cast.", "metadata": {}}
{"_id": "gpt3_1912", "text": "\nThis query returns the names of musicals that have at least three actors associated with them.", "metadata": {}}
{"_id": "gpt3_1913", "text": "\nThis query will return the name of each musical in which at least three actors have performed.", "metadata": {}}
{"_id": "gpt3_1914", "text": "\nThis query returns the name of all musicals in which at least three actors have been cast.", "metadata": {}}
{"_id": "gpt3_1915", "text": "\nThis query will return the names of musicals in which at least three actors have been cast.", "metadata": {}}
{"_id": "gpt3_1916", "text": "\nThis query will count the number of artists who are over 46 years old and joined after 1990.", "metadata": {}}
{"_id": "gpt3_1917", "text": "\nThis query will count the number of artists in the artist table who are over 46 years old and joined after 1990.", "metadata": {}}
{"_id": "gpt3_1918", "text": "\nThis query will count the number of artists who are older than 46 and joined the company after 1990.", "metadata": {}}
{"_id": "gpt3_1919", "text": "\nThis query will return the number of artists who are over 46 years old and joined after 1990.", "metadata": {}}
{"_id": "gpt3_1920", "text": "\nThis query will count the number of artists who are over 46 years old and joined after 1990.", "metadata": {}}
{"_id": "gpt3_1921", "text": "\nThis query will select all cities from the city table that have a regional population greater than 10 million.", "metadata": {}}
{"_id": "gpt3_1922", "text": "\nThis query will select the city from the city table where the regional population is greater than 10 million.", "metadata": {}}
{"_id": "gpt3_1923", "text": "\nThis query will return the names of cities whose regional population is greater than 10 million.", "metadata": {}}
{"_id": "gpt3_1924", "text": "\nThis query will return the name of any city where the regional population is greater than 10 million.", "metadata": {}}
{"_id": "gpt3_1925", "text": "\nThis query will return a list of cities that have a regional population greater than 10 million.", "metadata": {}}
{"_id": "gpt3_1926", "text": "\nThis query returns the customer_id and the total amount paid by that customer, sorted in descending order by the total amount paid and limited to the customer with the highest total amount paid.", "metadata": {}}
{"_id": "gpt3_1927", "text": "\nThis query returns the customer ID and the total amount paid by that customer, ordered from highest to lowest, with the highest amount paid at the top.", "metadata": {}}
{"_id": "gpt3_1928", "text": "\nThis query selects the customer ID and the total amount paid by each customer, sorted by the total amount paid in descending order, and returns the customer with the highest total amount paid.", "metadata": {}}
{"_id": "gpt3_1929", "text": "\nThis query returns the customer_id and the total amount paid for the customer with the highest total amount paid, ordered in descending order.", "metadata": {}}
{"_id": "gpt3_1930", "text": "\nThis query selects the customer ID and the total amount paid for each customer, calculates the sum of the amount paid for each customer, orders the results by the sum of the amount paid in descending order, and limits the results to the customer with the", "metadata": {}}
{"_id": "gpt3_1931", "text": "\nThis query selects the Marketing Region Code from the Drama Workshop Groups table and groups them by Marketing Region Code, ordering them by the count of each code in descending order and limiting the result to one. This query will return the Marketing Region Code that appears", "metadata": {}}
{"_id": "gpt3_1932", "text": "\nThis query will select the Marketing Region Code with the highest count from the Drama Workshop Groups table and display it first in the results.", "metadata": {}}
{"_id": "gpt3_1933", "text": "\nThis query will return the Marketing Region Code that has the most Drama Workshop Groups.", "metadata": {}}
{"_id": "gpt3_1934", "text": "\nThis query will return the Marketing Region Code with the highest number of Drama Workshop Groups.", "metadata": {}}
{"_id": "gpt3_1935", "text": "\nThis query returns the Marketing Region Code with the highest count from the Drama Workshop Groups table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_1936", "text": "\nThis query will return the total number of records in the county table.", "metadata": {}}
{"_id": "gpt3_1937", "text": "\nThis query will return the total count of records in the county table.", "metadata": {}}
{"_id": "gpt3_1938", "text": "\nThis query will return the total number of records in the county table.", "metadata": {}}
{"_id": "gpt3_1939", "text": "\nThis query will return the total number of records in the county table.", "metadata": {}}
{"_id": "gpt3_1940", "text": "\nThis query returns the total number of records in the county table.", "metadata": {}}
{"_id": "gpt3_1941", "text": "\nThis query will return the name of all districts from the district table that have an area greater than 10 or a population greater than 100,000.", "metadata": {}}
{"_id": "gpt3_1942", "text": "\nThis query will return the name of all districts from the district table where either the city area is greater than 10 or the city population is greater than 100,000.", "metadata": {}}
{"_id": "gpt3_1943", "text": "\nThis query will return the name of all districts from the district table where either the city area is greater than 10 or the city population is greater than 100,000.", "metadata": {}}
{"_id": "gpt3_1944", "text": "\nThis query will return the name of all districts from the district table that have a city area greater than 10 or a city population greater than 100000.", "metadata": {}}
{"_id": "gpt3_1945", "text": "\nThis query will return the names of all districts from a given table where the city area is greater than 10 or the city population is greater than 100,000.", "metadata": {}}
{"_id": "gpt3_1946", "text": "\nThis query returns the total count of all records in the useracct table.", "metadata": {}}
{"_id": "gpt3_1947", "text": "\nThis query will return the total count of records in the useracct table.", "metadata": {}}
{"_id": "gpt3_1948", "text": "\nThis query returns the total number of records in the useracct table.", "metadata": {}}
{"_id": "gpt3_1949", "text": "\nThis statement returns the total number of records in the useracct table.", "metadata": {}}
{"_id": "gpt3_1950", "text": "\nThis query will return the total number of records in the useracct table.", "metadata": {}}
{"_id": "gpt3_1951", "text": "\nThis SQL query selects the first and last name of an employee from the employees table, ordered by birth date in descending order, and limits the result to one row.", "metadata": {}}
{"_id": "gpt3_1952", "text": "\nThis SQL query selects the first and last name of the employee with the most recent birth date from the employees table, limited to one result.", "metadata": {}}
{"_id": "gpt3_1953", "text": "\nThis query selects the first name and last name of the employee with the most recent birth date from the employees table, and limits the result to one record.", "metadata": {}}
{"_id": "gpt3_1954", "text": "\nThis query will select the first name and last name of the employee with the most recent birth date from the employees table, and limit the result to one record.", "metadata": {}}
{"_id": "gpt3_1955", "text": "\nThis query selects the first name and last name from the employees table and orders them by birth date in descending order, then limits the results to the first row.", "metadata": {}}
{"_id": "gpt3_1956", "text": "\nThis query will select the friends of Bob from the Person and PersonFriend tables. It will join the Person and PersonFriend tables on the name column and filter the results to only show the friends of Bob.", "metadata": {}}
{"_id": "gpt3_1957", "text": "\nThis query selects the name of the friend of Bob from the Person and PersonFriend tables.", "metadata": {}}
{"_id": "gpt3_1958", "text": "\nThis query will select the friends of the person named 'Bob' from the Person and PersonFriend tables.", "metadata": {}}
{"_id": "gpt3_1959", "text": "\nThis query will select all of the friends of Bob from the Person and PersonFriend tables.", "metadata": {}}
{"_id": "gpt3_1960", "text": "\nThis query will select the friends of the person named Bob from the Person and PersonFriend tables.", "metadata": {}}
{"_id": "gpt3_1961", "text": "\nThis query will count the number of records in the CLASS table grouped by the crs_code field. The result will be a list of course codes and the number of records associated with each course code.", "metadata": {}}
{"_id": "gpt3_1962", "text": "\nThis query will return the count of each class by course code. It will return the number of classes for each course code in the CLASS table.", "metadata": {}}
{"_id": "gpt3_1963", "text": "\nThis query will return the count of records for each crs_code in the CLASS table.", "metadata": {}}
{"_id": "gpt3_1964", "text": "\nThis query will return a count of all the classes in each course code. The results will be a list of each course code and the number of classes associated with it.", "metadata": {}}
{"_id": "gpt3_1965", "text": "\nThis query will count the number of classes for each course code and group them together. The result will be a table with two columns: one for the count of classes and one for the course code.", "metadata": {}}
{"_id": "gpt3_1966", "text": "\nThis query joins the trip and station tables on the end_station_id column, selecting the id from trip and the installation_date from station.", "metadata": {}}
{"_id": "gpt3_1967", "text": "\nThis query will select the ID and installation date of each trip from the trip and station tables. It will match the end station ID of each trip with the ID of the station table to retrieve the installation date.", "metadata": {}}
{"_id": "gpt3_1968", "text": "\nThis query selects the id from the trip table and the installation date from the station table, based on the end station id from the trip table matching the id from the station table.", "metadata": {}}
{"_id": "gpt3_1969", "text": "\nThis query joins the trip and station tables on the end_station_id column. It returns the id and installation_date columns from the station table for each row in the trip table.", "metadata": {}}
{"_id": "gpt3_1970", "text": "\nThis query will select the ID and installation date of a trip from the trip and station tables. It will join the two tables on the end station ID from the trip table.", "metadata": {}}
{"_id": "gpt3_1971", "text": "\nThis query will return the total credits for each department code in the course table. It will return the sum of all credits for each department code, grouped by the department code.", "metadata": {}}
{"_id": "gpt3_1972", "text": "\nThis query returns the total number of credits for each department code in the course table.", "metadata": {}}
{"_id": "gpt3_1973", "text": "\nThis query will return the sum of all course credits for each department code in the course table.", "metadata": {}}
{"_id": "gpt3_1974", "text": "\nThis query will return the sum of the credits for each department in the course table, grouped by the department code.", "metadata": {}}
{"_id": "gpt3_1975", "text": "\nThis query will return the total credits for each department code in the course table.", "metadata": {}}
{"_id": "gpt3_1976", "text": "\nThe average price and average number of cases of Zinfandel wine from 2009 are $14.56 and 18.4, respectively.", "metadata": {}}
{"_id": "gpt3_1977", "text": "\nThe average price and average cases of Zinfandel wine from 2009 are $9.49 and 35.6 respectively.", "metadata": {}}
{"_id": "gpt3_1978", "text": "\nThe average price and average cases of Zinfandel wine from 2009 are $13.75 and 8.67 respectively.", "metadata": {}}
{"_id": "gpt3_1979", "text": "\nThis query will calculate the average price and average number of cases for all wines made from Zinfandel grapes in the year 2009.", "metadata": {}}
{"_id": "gpt3_1980", "text": "\nThis query will return the average price and average cases of Zinfandel wine from the year 2009.", "metadata": {}}
{"_id": "gpt3_1981", "text": "\nThis query will count the number of professors who have either a Ph.D. or MA as their highest degree.", "metadata": {}}
{"_id": "gpt3_1982", "text": "\nThis query returns the number of professors who have either a Ph.D. or an MA as their highest degree.", "metadata": {}}
{"_id": "gpt3_1983", "text": "\nThis query returns the number of professors who have either a Ph.D. or a MA as their highest degree.", "metadata": {}}
{"_id": "gpt3_1984", "text": "\nThis query returns the count of all professors who have either a Ph.D. or a MA as their highest degree.", "metadata": {}}
{"_id": "gpt3_1985", "text": "\nThis query will count the number of professors who have either a Ph.D. or an MA as their highest degree.", "metadata": {}}
{"_id": "gpt3_1986", "text": "\nThis query selects all unique values from the column gtype in the Video_games table.", "metadata": {}}
{"_id": "gpt3_1987", "text": "\nThis query selects all unique game types from the Video_games table.", "metadata": {}}
{"_id": "gpt3_1988", "text": "\nThis query will select all the unique game types from the Video_games table.", "metadata": {}}
{"_id": "gpt3_1989", "text": "\nThis statement will select all the distinct values of the \"gtype\" column from the \"Video_games\" table.", "metadata": {}}
{"_id": "gpt3_1990", "text": "\nThis query will select all the distinct game types from the Video_games table.", "metadata": {}}
{"_id": "gpt3_1991", "text": "\nThis query returns the month with the most entries in the 'happy_hour' table, sorted by the number of entries for each month in descending order, with the most entries being listed first.", "metadata": {}}
{"_id": "gpt3_1992", "text": "\nThis query returns the month with the most occurrences of happy hour events, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_1993", "text": "\nThis query returns the month with the most occurrences of happy hour events from the table \"happy_hour\". It orders the results by the count of events in each month in descending order, and then returns the month with the highest count.", "metadata": {}}
{"_id": "gpt3_1994", "text": "\nThis query returns the month with the most occurrences of happy hour events, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_1995", "text": "\nThis query will return the month with the most entries in the happy_hour table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_1996", "text": "\nThis query will return the number of distinct services provided by the station.", "metadata": {}}
{"_id": "gpt3_1997", "text": "\nThis query will return the total number of distinct services provided by a station.", "metadata": {}}
{"_id": "gpt3_1998", "text": "\nThis query returns the number of distinct services offered by a station.", "metadata": {}}
{"_id": "gpt3_1999", "text": "\nThis query will return the number of distinct services offered at a station.", "metadata": {}}
{"_id": "gpt3_2000", "text": "\nThis query will return the total count of distinct services offered at the station.", "metadata": {}}
{"_id": "gpt3_2001", "text": "\nThis query will count the number of students who are over 18 years old and do not have food or animal allergies.", "metadata": {}}
{"_id": "gpt3_2002", "text": "\nThis query will count the number of students who are over 18 years old and do not have a food or animal allergy.", "metadata": {}}
{"_id": "gpt3_2003", "text": "\nThis query returns the count of all students who are over 18 and do not have food or animal allergies.", "metadata": {}}
{"_id": "gpt3_2004", "text": "\nThis query counts the number of students who are over 18 years old and do not have either a food or animal allergy.", "metadata": {}}
{"_id": "gpt3_2005", "text": "\nThis query will count the number of students over the age of 18 who do not have food or animal allergies.", "metadata": {}}
{"_id": "gpt3_2006", "text": "\nThis statement is used to select the project details from the Projects table where the outcome description in the Research_outcomes table contains the word 'Published.'", "metadata": {}}
{"_id": "gpt3_2007", "text": "\nThis query retrieves project details from the Projects table that have associated project outcomes from the Project_outcomes table and research outcomes from the Research_outcomes table that have a description containing the word \"Published\".", "metadata": {}}
{"_id": "gpt3_2008", "text": "\nThis query will select project details from the Projects table that have outcomes in the Project_outcomes table that are associated with research outcomes in the Research_outcomes table that have a description containing the word \"Published\".", "metadata": {}}
{"_id": "gpt3_2009", "text": "\nThis statement selects all project details from the Projects table that are associated with research outcomes that include the word \"Published\".", "metadata": {}}
{"_id": "gpt3_2010", "text": "\nThis query selects project details from the Projects table (T1) that have project outcomes (T2) that are associated with research outcomes (T3) that have a description that includes the word 'Published'.", "metadata": {}}
{"_id": "gpt3_2011", "text": "\nThis statement selects the title of books from the book table, joining it with the publication table, and ordering the results by the price of the publication in descending order.", "metadata": {}}
{"_id": "gpt3_2012", "text": "\nThis query selects the title of a book from the book and publication tables and orders them by the price of the publication in descending order.", "metadata": {}}
{"_id": "gpt3_2013", "text": "\nThis query selects the titles of books from the book table and orders them by the price of the book in the publication table in descending order.", "metadata": {}}
{"_id": "gpt3_2014", "text": "\nThis query selects the titles of books from the book and publication tables, ordered by the price of the publication in descending order.", "metadata": {}}
{"_id": "gpt3_2015", "text": "\nThis query selects the titles of books from the book and publication tables and orders them by the price of the publication in descending order.", "metadata": {}}
{"_id": "gpt3_2016", "text": "\nThis query returns the names of people who are both Course Authors and Tutors, as well as Students.", "metadata": {}}
{"_id": "gpt3_2017", "text": "\nThis query will return the names of people who are both Course Authors and Tutors and Students.", "metadata": {}}
{"_id": "gpt3_2018", "text": "\nThis statement will return a list of personal names that are both Course Authors and Tutors and Students.", "metadata": {}}
{"_id": "gpt3_2019", "text": "\nThis query returns the personal names of people who are both Course Authors and Tutors, as well as Students.", "metadata": {}}
{"_id": "gpt3_2020", "text": "\nThis query will select the personal names from both the Course_Authors_and_Tutors and Students tables that are the same.", "metadata": {}}
{"_id": "gpt3_2021", "text": "\nThis query will return all locations from the cinema table where the capacity is greater than 300 and there are at least two cinemas with this capacity in the same location.", "metadata": {}}
{"_id": "gpt3_2022", "text": "\nThis query selects the location of all cinemas with a capacity of more than 300, and groups them by location, having a count of at least 2. This query will return a list of locations for cinemas that have a capacity greater than 300", "metadata": {}}
{"_id": "gpt3_2023", "text": "\nThis query returns the locations of all cinemas with a capacity of more than 300, where there are at least two such cinemas in the same location.", "metadata": {}}
{"_id": "gpt3_2024", "text": "\nThis query will select the location of all cinemas with a capacity greater than 300 and group them by location, having at least two records in the result set.", "metadata": {}}
{"_id": "gpt3_2025", "text": "\nThis query selects the locations of all cinemas with a capacity greater than 300, and groups them by location, having a count of two or more.", "metadata": {}}
{"_id": "gpt3_2026", "text": "\nThis statement will select the average price and the name of the manufacturer from the products and manufacturers tables, grouping the results by manufacturer name and having an average price of at least 150.", "metadata": {}}
{"_id": "gpt3_2027", "text": "\nThis query returns the average price of products and the name of the manufacturer for all manufacturers whose average product price is greater than or equal to 150.", "metadata": {}}
{"_id": "gpt3_2028", "text": "\nThis query finds the average price of products from each manufacturer whose average price is greater than or equal to 150. It returns the average price and the name of the manufacturer.", "metadata": {}}
{"_id": "gpt3_2029", "text": "\nThis query will return the average price of products from each manufacturer that have an average price of 150 or more. It does this by selecting the average price of products from the products table (T1) and the name from the manufacturers table (T", "metadata": {}}
{"_id": "gpt3_2030", "text": "\nThis query returns the average price and the name of each manufacturer that has an average product price of at least $150.", "metadata": {}}
{"_id": "gpt3_2031", "text": "\nThis query will return the first three names from the Aircraft table, sorted by distance in ascending order.", "metadata": {}}
{"_id": "gpt3_2032", "text": "\nThis query will return the names of the first three Aircraft in the table ordered by distance.", "metadata": {}}
{"_id": "gpt3_2033", "text": "\nThis query will return the names of the first three aircraft in the Aircraft table, ordered by distance.", "metadata": {}}
{"_id": "gpt3_2034", "text": "\nThis query will select the names of the first three Aircraft in the table, ordered by their distance.", "metadata": {}}
{"_id": "gpt3_2035", "text": "\nThis query will return the name of the first three aircraft in the Aircraft table, ordered by the distance they can travel.", "metadata": {}}
{"_id": "gpt3_2036", "text": "\nThis query will select the county name from the county table (T1) that is associated with the district in the election table (T2) where the committee is \"Appropriations\".", "metadata": {}}
{"_id": "gpt3_2037", "text": "\nThis query will return the names of all counties that are in a district with a committee of \"Appropriations\".", "metadata": {}}
{"_id": "gpt3_2038", "text": "\nThis query will return the name of all counties that have an election district with a committee of \"Appropriations\".", "metadata": {}}
{"_id": "gpt3_2039", "text": "\nThis query will return all county names from the county table that have a corresponding district in the election table with a committee of \"Appropriations\".", "metadata": {}}
{"_id": "gpt3_2040", "text": "\nThis query will return the name of all counties from the county table that are in a district that has an election committee of \"Appropriations\".", "metadata": {}}
{"_id": "gpt3_2041", "text": "\nThis query selects the first and last name of the customer who made the earliest rental from the customer and rental tables, ordered by rental date in ascending order.", "metadata": {}}
{"_id": "gpt3_2042", "text": "\nThis query selects the first and last name of the customer who made the earliest rental from the customer and rental tables, ordered by rental date in ascending order, with a limit of 1.", "metadata": {}}
{"_id": "gpt3_2043", "text": "\nThis query selects the first and last name of the customer who made the earliest rental from the customer and rental tables, sorted in ascending order by rental date.", "metadata": {}}
{"_id": "gpt3_2044", "text": "\nThis query selects the first name and last name of the customer who made the earliest rental from the customer and rental tables.", "metadata": {}}
{"_id": "gpt3_2045", "text": "\nThis query selects the first name and last name of the customer who made the earliest rental, ordered by rental date.", "metadata": {}}
{"_id": "gpt3_2046", "text": "\nThis statement selects the problem_log_id and log_entry_description columns from the problem_log table.", "metadata": {}}
{"_id": "gpt3_2047", "text": "\nThis query selects the problem_log_id and log_entry_description columns from the problem_log table.", "metadata": {}}
{"_id": "gpt3_2048", "text": "\nThis statement retrieves the problem_log_id and log_entry_description columns from the problem_log table.", "metadata": {}}
{"_id": "gpt3_2049", "text": "\nThis query returns the problem_log_id and log_entry_description columns from the problem_log table.", "metadata": {}}
{"_id": "gpt3_2050", "text": "\nThis statement selects the problem_log_id and log_entry_description columns from the problem_log table.", "metadata": {}}
{"_id": "gpt3_2051", "text": "\nThis query selects the first and last name of the player with the most manager awards, along with their player ID, from the player and manager_award tables. It groups the results by player ID and orders them by the number of awards each", "metadata": {}}
{"_id": "gpt3_2052", "text": "\nThis query selects the first and last name of the player who has the most manager awards, along with the player's ID. It does this by joining the player and manager_award tables, grouping by the player's ID, and ordering the", "metadata": {}}
{"_id": "gpt3_2053", "text": "\nThis query selects the first and last name of the player with the most manager awards, joining the player and manager_award tables on the player_id column and ordering by the number of awards in descending order. The result is then limited to", "metadata": {}}
{"_id": "gpt3_2054", "text": "\nThis SQL query selects the first and last name of the player with the most manager awards, as well as the player's ID, from the player and manager_award tables. It groups the results by player ID, and orders them by the", "metadata": {}}
{"_id": "gpt3_2055", "text": "\nThis query selects the first and last name of the player with the most manager awards, as well as their player ID. It does this by joining the player and manager_award tables, grouping by the player ID, and ordering the results by", "metadata": {}}
{"_id": "gpt3_2056", "text": "\nThis query returns the average value of the UnitPrice field from the Track table.", "metadata": {}}
{"_id": "gpt3_2057", "text": "\nThis statement will return the average UnitPrice from the Track table.", "metadata": {}}
{"_id": "gpt3_2058", "text": "\nThis query returns the average unit price of all tracks in the TRACK table.", "metadata": {}}
{"_id": "gpt3_2059", "text": "\nThis query will return the average unit price of all items in the TRACK table.", "metadata": {}}
{"_id": "gpt3_2060", "text": "\nThis query will return the average unit price of all tracks in the database.", "metadata": {}}
{"_id": "gpt3_2061", "text": "\nThis statement returns a list of all the names of artists in the ARTIST table that are not associated with any albums in the ALBUM table.", "metadata": {}}
{"_id": "gpt3_2062", "text": "\nThis query will return the names of all artists who have not released an album.", "metadata": {}}
{"_id": "gpt3_2063", "text": "\nThis statement will return the names of all artists from the ARTIST table that are not associated with any albums in the ALBUM table.", "metadata": {}}
{"_id": "gpt3_2064", "text": "\nThis statement will select the names of all artists from the ARTIST table that do not have any albums in the ALBUM table.", "metadata": {}}
{"_id": "gpt3_2065", "text": "\nThis statement returns the names of all artists that do not have any albums.", "metadata": {}}
{"_id": "gpt3_2066", "text": "\nThis query will return a list of all players in the player table who have an empty death year field. It will return the first and last name of each player.", "metadata": {}}
{"_id": "gpt3_2067", "text": "\nThis SQL query will select the first and last name of all players from the player table where the death year is empty.", "metadata": {}}
{"_id": "gpt3_2068", "text": "\nThis query will select the first and last names of all players from the player table where the death year is empty.", "metadata": {}}
{"_id": "gpt3_2069", "text": "\nThis query will return a list of players who are still alive, showing their first and last names.", "metadata": {}}
{"_id": "gpt3_2070", "text": "\nThis query will select the first and last name of any players from the player table who have not died.", "metadata": {}}
{"_id": "gpt3_2071", "text": "\nThis query returns the project_id and the number of documents associated with each project_id.", "metadata": {}}
{"_id": "gpt3_2072", "text": "\nThis query returns the number of documents for each project_id in the Documents table.", "metadata": {}}
{"_id": "gpt3_2073", "text": "\nThis query will return the project_id and a count of the number of documents associated with each project_id.", "metadata": {}}
{"_id": "gpt3_2074", "text": "\nThis query will return the project_id and the number of documents associated with each project_id in the Documents table.", "metadata": {}}
{"_id": "gpt3_2075", "text": "\nThis query returns a count of the number of documents associated with each project_id.", "metadata": {}}
{"_id": "gpt3_2076", "text": "\nThis query will select the Product_Type_Code from the Products table where the Product_Price is greater than 4500 and less than 3000. The result of this query will be an empty set, as there are no products with a price that", "metadata": {}}
{"_id": "gpt3_2077", "text": "\nThis query will return the Product_Type_Code from the Products table where the Product_Price is greater than 4500 and less than 3000. The result will be an empty set, since no Product_Type_Code will satisfy both conditions.", "metadata": {}}
{"_id": "gpt3_2078", "text": "\nThis query returns the Product_Type_Code of any products that have a price greater than 4500 and less than 3000. Since there are no products that meet both criteria, this query will return an empty set.", "metadata": {}}
{"_id": "gpt3_2079", "text": "\nThis query returns the product type codes of products that have a price greater than 4500 and less than 3000, which is impossible and thus no results are returned.", "metadata": {}}
{"_id": "gpt3_2080", "text": "\nThis query returns the Product_Type_Code of any product that has a price greater than 4500 and less than 3000, which would be empty since no product can have a price at the same time greater than 4500 and less than 3000.", "metadata": {}}
{"_id": "gpt3_2081", "text": "\nThis query selects the outcome description from the Research_outcomes table, based on the outcome code from the Project_outcomes table.", "metadata": {}}
{"_id": "gpt3_2082", "text": "\nThis query retrieves the description of research outcomes from the Research_outcomes table, based on the outcome code from the Project_outcomes table.", "metadata": {}}
{"_id": "gpt3_2083", "text": "\nThis SQL statement selects the outcome description from the Research_outcomes table, using the outcome code from the Project_outcomes table as a reference.", "metadata": {}}
{"_id": "gpt3_2084", "text": "\nThis query returns the description of research outcomes from the Research_outcomes table that are associated with outcomes from the Project_outcomes table, based on the outcome code.", "metadata": {}}
{"_id": "gpt3_2085", "text": "\nThis statement retrieves the outcome description from the Research_outcomes table based on the outcome code from the Project_outcomes table.", "metadata": {}}
{"_id": "gpt3_2086", "text": "\nThis query returns the number of distinct titles of papers published by authors affiliated with the University of Pennsylvania.", "metadata": {}}
{"_id": "gpt3_2087", "text": "\nThis query returns the count of the distinct titles of papers published by authors affiliated with the University of Pennsylvania.", "metadata": {}}
{"_id": "gpt3_2088", "text": "\nThis query will count the number of distinct paper titles associated with the University of Pennsylvania.", "metadata": {}}
{"_id": "gpt3_2089", "text": "\nThis query will count the number of unique titles of papers published by authors affiliated with the University of Pennsylvania.", "metadata": {}}
{"_id": "gpt3_2090", "text": "\nThis query returns the number of distinct paper titles written by authors affiliated with the University of Pennsylvania.", "metadata": {}}
{"_id": "gpt3_2091", "text": "\nThis query will return a list of distinct mountain names from the climber and mountain tables for climbers from West Germany.", "metadata": {}}
{"_id": "gpt3_2092", "text": "\nThis query selects the distinct names of mountains from the climber and mountain tables where the climber is from West Germany.", "metadata": {}}
{"_id": "gpt3_2093", "text": "\nThis query will return a list of distinct mountain names from West Germany visited by climbers.", "metadata": {}}
{"_id": "gpt3_2094", "text": "\nThis query will select the distinct names of the mountains climbed by climbers from West Germany.", "metadata": {}}
{"_id": "gpt3_2095", "text": "\nThis query will return the distinct names of all the mountains in West Germany that have been climbed by a climber.", "metadata": {}}
{"_id": "gpt3_2096", "text": "\nThis query will select the names of all technicians from the technician table who are not part of the team NYY.", "metadata": {}}
{"_id": "gpt3_2097", "text": "\nThis query will select the name of all technicians from the table who are not part of the NYY team.", "metadata": {}}
{"_id": "gpt3_2098", "text": "\nThis query returns the name of all technicians who are not part of the NYY team.", "metadata": {}}
{"_id": "gpt3_2099", "text": "\nThis statement will select the name of all technicians from the table that are not part of the NYY team.", "metadata": {}}
{"_id": "gpt3_2100", "text": "\nThis query will select the name of all technicians from the technician table who are not part of the NYY team.", "metadata": {}}
{"_id": "gpt3_2101", "text": "\nThis query will select the name, headquarter, and founder of the manufacturer with the highest revenue, and limit the results to one row.", "metadata": {}}
{"_id": "gpt3_2102", "text": "\nThis query will select the name, headquarter, and founder of the manufacturer with the highest revenue, in descending order.", "metadata": {}}
{"_id": "gpt3_2103", "text": "\nThis query will select the name, headquarter, and founder of the manufacturer with the highest revenue, in descending order. The result will be limited to one record.", "metadata": {}}
{"_id": "gpt3_2104", "text": "\nThis query selects the name, headquarter, and founder of the manufacturer with the highest revenue.", "metadata": {}}
{"_id": "gpt3_2105", "text": "\nThis query will select the name, headquarter, and founder of the manufacturer with the highest revenue, and limit the results to one record.", "metadata": {}}
{"_id": "gpt3_2106", "text": "\nThis query selects the name of people who are perpetrators from countries other than China.", "metadata": {}}
{"_id": "gpt3_2107", "text": "\nThis query selects the names of people from the people table who are perpetrators in a country other than China.", "metadata": {}}
{"_id": "gpt3_2108", "text": "\nThis statement selects the names of people from the people table who are also listed in the perpetrator table, but whose country is not China.", "metadata": {}}
{"_id": "gpt3_2109", "text": "\nThis statement retrieves the names from the people table for all perpetrators that are not from China.", "metadata": {}}
{"_id": "gpt3_2110", "text": "\nThis query will select the names of people who are perpetrators and are not from China.", "metadata": {}}
{"_id": "gpt3_2111", "text": "\nThis query selects the school name and driver name from the school_bus, school, and driver tables.", "metadata": {}}
{"_id": "gpt3_2112", "text": "\nThis query selects the school name and the driver name from the school_bus, school, and driver tables.", "metadata": {}}
{"_id": "gpt3_2113", "text": "\nThis query selects the school name and driver name from the school_bus, school, and driver tables.", "metadata": {}}
{"_id": "gpt3_2114", "text": "\nThis query retrieves the school name and driver name from the school_bus, school, and driver tables.", "metadata": {}}
{"_id": "gpt3_2115", "text": "\nThis query selects the school name and driver name from the school_bus, school, and driver tables.", "metadata": {}}
{"_id": "gpt3_2116", "text": "\nThis query will return the details of the vehicle with the ID of 1 from the Vehicles table.", "metadata": {}}
{"_id": "gpt3_2117", "text": "\nThis query will return the details of a vehicle with the ID of 1 from the Vehicles table.", "metadata": {}}
{"_id": "gpt3_2118", "text": "\nThis statement will select the vehicle details from the Vehicles table where the vehicle_id is equal to 1.", "metadata": {}}
{"_id": "gpt3_2119", "text": "\nThis query will return the details of the vehicle with the ID of 1 from the Vehicles table.", "metadata": {}}
{"_id": "gpt3_2120", "text": "\nThis query will retrieve the details associated with vehicle ID 1 from the Vehicles table.", "metadata": {}}
{"_id": "gpt3_2121", "text": "\nThis SQL statement selects the distinct last names of individuals who are associated with an organization through the organization_contact_individuals table.", "metadata": {}}
{"_id": "gpt3_2122", "text": "\nThis statement will select all unique last names from the individuals table that are associated with an organization contact in the organization_contact_individuals table.", "metadata": {}}
{"_id": "gpt3_2123", "text": "\nThis SQL query will select all distinct last names from the individuals table that have an associated organization contact in the organization_contact_individuals table.", "metadata": {}}
{"_id": "gpt3_2124", "text": "\nThis query will select all distinct last names from the individuals table that are also in the organization_contact_individuals table.", "metadata": {}}
{"_id": "gpt3_2125", "text": "\nThis query will select the distinct last names of all individuals that have a relationship with an organization in the organization_contact_individuals table.", "metadata": {}}
{"_id": "gpt3_2126", "text": "\nThis query retrieves the last name of the most recently contacted individual associated with the Labour Party organization.", "metadata": {}}
{"_id": "gpt3_2127", "text": "\nThis query retrieves the last name of the most recently contacted individual associated with the Labour Party organization.", "metadata": {}}
{"_id": "gpt3_2128", "text": "\nThis query will select the last name of the individual who was most recently contacted by the Labour Party.", "metadata": {}}
{"_id": "gpt3_2129", "text": "\nThis query selects the last name of the most recently contacted individual from the Labour Party organization.", "metadata": {}}
{"_id": "gpt3_2130", "text": "\nThis query returns the last name of the individual most recently contacted by the Labour Party.", "metadata": {}}
{"_id": "gpt3_2131", "text": "\nThis query will return a list of reviewer names, movie titles, star ratings, and rating dates, ordered by reviewer name, then movie title, then star rating.", "metadata": {}}
{"_id": "gpt3_2132", "text": "\nThis query will select the name of the reviewer, the title of the movie, the star rating, and the rating date from the Rating, Movie, and Reviewer tables, and will order the results by the reviewer's name, the movie title", "metadata": {}}
{"_id": "gpt3_2133", "text": "\nThis query selects the name of the reviewer, the title of the movie, the stars given to the movie, and the date the rating was given for all ratings, ordered by the name of the reviewer, the title of the movie, and the", "metadata": {}}
{"_id": "gpt3_2134", "text": "\nThis query selects the name, title, stars, and rating date of all ratings from the Rating, Movie, and Reviewer tables, ordered by the name of the reviewer, title of the movie, and stars of the rating.", "metadata": {}}
{"_id": "gpt3_2135", "text": "\nThis query selects the name of the reviewer, the title of the movie, the star rating given, and the date of the rating from the Rating, Movie, and Reviewer tables, and orders the results by the reviewer's name, the movie", "metadata": {}}
{"_id": "gpt3_2136", "text": "\nThis query returns the total number of distinct customer IDs in the Accounts table.", "metadata": {}}
{"_id": "gpt3_2137", "text": "\nThis query returns the number of distinct customer_id values in the Accounts table.", "metadata": {}}
{"_id": "gpt3_2138", "text": "\nThis query will return the total number of distinct customer IDs in the Accounts table.", "metadata": {}}
{"_id": "gpt3_2139", "text": "\nThis query returns the total number of distinct customer_id values in the Accounts table.", "metadata": {}}
{"_id": "gpt3_2140", "text": "\nThis query returns the total number of distinct customer IDs in the Accounts table.", "metadata": {}}
{"_id": "gpt3_2141", "text": "\nThis statement retrieves the response_received_date from the Documents table for documents with a description of 'Regular' or for grants with an amount greater than 100.", "metadata": {}}
{"_id": "gpt3_2142", "text": "\nThis query selects the response_received_date from Documents table for documents with a description of 'Regular' or grants with an amount greater than 100.", "metadata": {}}
{"_id": "gpt3_2143", "text": "\nThis query selects the response_received_date from Documents, joined with Document_Types and Grants, where the document_description is 'Regular' or the grant_amount is greater than 100.", "metadata": {}}
{"_id": "gpt3_2144", "text": "\nThis query selects the response_received_date from Documents, which have a document_type_code that matches a document_description of 'Regular' or a grant_amount greater than 100, and is joined to Document_Types and Grants.", "metadata": {}}
{"_id": "gpt3_2145", "text": "\nThis query retrieves the response_received_date from the Documents table for documents with a document_description of 'Regular' or grants with an amount greater than 100.", "metadata": {}}
{"_id": "gpt3_2146", "text": "\nThis query counts the number of orders for each product name in the Order_items and Products tables, joining the Orders table to also get the order information.", "metadata": {}}
{"_id": "gpt3_2147", "text": "\nThis query counts the number of orders for each product name in the Products and Order_items tables, which are joined with the Orders table.", "metadata": {}}
{"_id": "gpt3_2148", "text": "\nThis query selects the product name and the number of orders for each product from the Order_items, Products, and Orders tables and groups them by product name.", "metadata": {}}
{"_id": "gpt3_2149", "text": "\nThis query selects the product name and the count of each product from the Order_items, Products, and Orders tables, and groups the results by product name.", "metadata": {}}
{"_id": "gpt3_2150", "text": "\nThis query selects the product name from the Products table and counts the number of orders for each product from the Order_items and Orders tables.", "metadata": {}}
{"_id": "gpt3_2151", "text": "\nThis query will return the count of all people who are older than the oldest engineer in the Person table.", "metadata": {}}
{"_id": "gpt3_2152", "text": "\nThis query will count the number of people in the Person table who have an age greater than the maximum age of any engineer in the table.", "metadata": {}}
{"_id": "gpt3_2153", "text": "\nThis query will count the number of people from the Person table whose age is greater than the maximum age of people in the Person table who have the job title of 'engineer'.", "metadata": {}}
{"_id": "gpt3_2154", "text": "\nThis query will count the number of people in the Person table who are older than the oldest engineer in the table.", "metadata": {}}
{"_id": "gpt3_2155", "text": "\nThis query will count the number of people in the Person table whose age is greater than the maximum age of people in the Person table whose job is 'engineer'.", "metadata": {}}
{"_id": "gpt3_2156", "text": "\nThis query returns the name and distance of all aircraft from a database.", "metadata": {}}
{"_id": "gpt3_2157", "text": "\nThis statement will select the name and distance columns from the Aircraft table.", "metadata": {}}
{"_id": "gpt3_2158", "text": "\nThis query selects the name and distance of all aircraft from a database.", "metadata": {}}
{"_id": "gpt3_2159", "text": "\nThe query SELECT name, distance FROM Aircraft will return the name and distance of all aircraft in the table.", "metadata": {}}
{"_id": "gpt3_2160", "text": "\nThis statement will select the name and distance columns from the Aircraft table.", "metadata": {}}
{"_id": "gpt3_2161", "text": "\nThis statement will select all the rID values from the Rating table that do not have a stars value of 4.", "metadata": {}}
{"_id": "gpt3_2162", "text": "\nThis statement will return all of the rIDs from the Rating table that do not have a star rating of 4.", "metadata": {}}
{"_id": "gpt3_2163", "text": "\nThis query returns a list of all ratings IDs from the Rating table, excluding those with a star rating of 4.", "metadata": {}}
{"_id": "gpt3_2164", "text": "\nThis query will return all the IDs from the Rating table that are not associated with a rating of 4 stars.", "metadata": {}}
{"_id": "gpt3_2165", "text": "\nThis query returns the IDs of all ratings that are not equal to 4 stars.", "metadata": {}}
{"_id": "gpt3_2166", "text": "\nThis query will return the founding date of the university with the highest enrollment.", "metadata": {}}
{"_id": "gpt3_2167", "text": "\nThis query will return the founding year of the university with the highest enrollment.", "metadata": {}}
{"_id": "gpt3_2168", "text": "\nThis query will return the founding date of the university with the highest enrollment.", "metadata": {}}
{"_id": "gpt3_2169", "text": "\nThis query will select the founding year of the university with the highest enrollment and return the result.", "metadata": {}}
{"_id": "gpt3_2170", "text": "\nThis query returns the founding date of the university with the highest enrollment.", "metadata": {}}
{"_id": "gpt3_2171", "text": "\nThis query selects the names of all reviewers who have given ratings with stars greater than 3.", "metadata": {}}
{"_id": "gpt3_2172", "text": "\nThis query returns the names of all reviewers who have given a rating of 3 stars or higher.", "metadata": {}}
{"_id": "gpt3_2173", "text": "\nThis query will select the names of all reviewers who have given ratings with more than 3 stars.", "metadata": {}}
{"_id": "gpt3_2174", "text": "\nThis query will select the names of all reviewers who gave a rating of 3 stars or higher.", "metadata": {}}
{"_id": "gpt3_2175", "text": "\nThis query will return the names of all reviewers who have given ratings with more than 3 stars.", "metadata": {}}
{"_id": "gpt3_2176", "text": "\nThe query will return the name of the musicals in which Bob Fosse was a nominee:\n\n-Sweet Charity\n-Cabaret\n-Chicago", "metadata": {}}
{"_id": "gpt3_2177", "text": "\nThe query will return the name of the musical nominated for a Bob Fosse award: \"Chicago\".", "metadata": {}}
{"_id": "gpt3_2178", "text": "\nThe query will return the name of the musical that Bob Fosse was nominated for.", "metadata": {}}
{"_id": "gpt3_2179", "text": "\nThe query will return the name of the musical that Bob Fosse was nominated for.", "metadata": {}}
{"_id": "gpt3_2180", "text": "\nThe query will return the name of the musical for which Bob Fosse was a nominee. The result of this query will be \"Chicago\".", "metadata": {}}
{"_id": "gpt3_2181", "text": "\nThis query will select the interaction type between the medicine Aripiprazole and the enzyme ALA synthase from the medicine_enzyme_interaction table.", "metadata": {}}
{"_id": "gpt3_2182", "text": "\nThis query selects the interaction type between Aripiprazole and ALA synthase from the medicine_enzyme_interaction table.", "metadata": {}}
{"_id": "gpt3_2183", "text": "\nThis query retrieves the interaction type between the medicine Aripiprazole and the enzyme ALA synthase from the medicine_enzyme_interaction table.", "metadata": {}}
{"_id": "gpt3_2184", "text": "\nThis query selects the interaction type between the enzyme ALA synthase and the medicine Aripiprazole from the medicine_enzyme_interaction table, joining the medicine and enzyme tables on the respective IDs.", "metadata": {}}
{"_id": "gpt3_2185", "text": "\nThis query retrieves the interaction type between the medicine Aripiprazole and the enzyme ALA synthase from the medicine_enzyme_interaction table.", "metadata": {}}
{"_id": "gpt3_2186", "text": "\nThis query will select the Price of all publications from either the Publisher Person or Wiley.", "metadata": {}}
{"_id": "gpt3_2187", "text": "\nThis query will return the Price values from the publication table where the Publisher is either Person or Wiley.", "metadata": {}}
{"_id": "gpt3_2188", "text": "\nThis statement will select the Price column from the publication table where the Publisher is either \"Person\" or \"Wiley\".", "metadata": {}}
{"_id": "gpt3_2189", "text": "\nThis query will return all prices from publications where either the publisher is Person or Wiley.", "metadata": {}}
{"_id": "gpt3_2190", "text": "\nThis query will return the prices of all publications from either Person or Wiley publishers.", "metadata": {}}
{"_id": "gpt3_2191", "text": "\nThis query will select the last names of all faculty members in the Computer Science department.", "metadata": {}}
{"_id": "gpt3_2192", "text": "\nThis query selects the last names of all faculty members in the Computer Science department.", "metadata": {}}
{"_id": "gpt3_2193", "text": "\nThis query will select the last names of faculty members in the \"Computer Science\" department.", "metadata": {}}
{"_id": "gpt3_2194", "text": "\nThis query will select the last name of all faculty members from the \"Computer Science\" department.", "metadata": {}}
{"_id": "gpt3_2195", "text": "\nThis query will return the last names of all faculty members in the Computer Science department.", "metadata": {}}
{"_id": "gpt3_2196", "text": "\nThis query will return the number of buildings that have a height greater than the average height of all buildings or a number of floors greater than the average number of floors of all buildings.", "metadata": {}}
{"_id": "gpt3_2197", "text": "\nThis query returns the count of buildings that have a height greater than the average height of all buildings in the table, or have more floors than the average number of floors in all buildings in the table.", "metadata": {}}
{"_id": "gpt3_2198", "text": "\nThis query will count the total number of buildings that have a height greater than the average height of all buildings, or a number of floors greater than the average number of floors of all buildings.", "metadata": {}}
{"_id": "gpt3_2199", "text": "\nThis query will count the number of buildings that have a height greater than the average height of all buildings, or a number of floors greater than the average number of floors of all buildings.", "metadata": {}}
{"_id": "gpt3_2200", "text": "\nThis query will count the number of buildings that have a height greater than the average height of all buildings, or have a number of floors greater than the average number of floors for all buildings.", "metadata": {}}
{"_id": "gpt3_2201", "text": "\nThis query will return all titles from the course table that appear more than once.", "metadata": {}}
{"_id": "gpt3_2202", "text": "\nThis query will return the titles of courses that appear more than once in the course table.", "metadata": {}}
{"_id": "gpt3_2203", "text": "\nThis query selects the titles of courses that appear more than once in the course table.", "metadata": {}}
{"_id": "gpt3_2204", "text": "\nThis query returns the titles of courses that appear more than once in the course table.", "metadata": {}}
{"_id": "gpt3_2205", "text": "\nThis query will return all the titles of courses that appear more than once in the course table.", "metadata": {}}
{"_id": "gpt3_2206", "text": "\nThis query will count the number of documents that have a document type code of either \"CV\" or \"BK\".", "metadata": {}}
{"_id": "gpt3_2207", "text": "\nThis query will count the number of documents with document_type_code either \"CV\" or \"BK\".", "metadata": {}}
{"_id": "gpt3_2208", "text": "\nThis query will count the number of documents that have a document type code of either \"CV\" or \"BK\".", "metadata": {}}
{"_id": "gpt3_2209", "text": "\nThis query will count the number of documents in the All_documents table that have a document_type_code of either \"CV\" or \"BK\".", "metadata": {}}
{"_id": "gpt3_2210", "text": "\nThis query will count the total number of documents with a document_type_code of either \"CV\" or \"BK\".", "metadata": {}}
{"_id": "gpt3_2211", "text": "\nThis query returns a count of the number of entries in the constructorStandings table for each constructorid.", "metadata": {}}
{"_id": "gpt3_2212", "text": "\nThis query will return a count of the number of entries for each constructorid from the constructorStandings table.", "metadata": {}}
{"_id": "gpt3_2213", "text": "\nThis query returns a count of the number of entries for each constructorid in the constructorStandings table.", "metadata": {}}
{"_id": "gpt3_2214", "text": "\nThis query will return the number of times each constructorid appears in the constructorStandings table, grouped by constructorid.", "metadata": {}}
{"_id": "gpt3_2215", "text": "\nThis query will return a count of the number of records for each constructorid in the constructorStandings table.", "metadata": {}}
{"_id": "gpt3_2216", "text": "\nThis query selects the shop name of the shop with the most items in stock, ordered by the number of items.", "metadata": {}}
{"_id": "gpt3_2217", "text": "\nThis query selects the shop name of the shop with the most items in stock from the stock and shop tables.", "metadata": {}}
{"_id": "gpt3_2218", "text": "\nThis query selects the shop name with the highest number of items in stock from the stock and shop tables.", "metadata": {}}
{"_id": "gpt3_2219", "text": "\nThis query selects the shop name of the shop with the most stock items from the stock and shop tables, ordered by the number of stock items.", "metadata": {}}
{"_id": "gpt3_2220", "text": "\nThis query selects the shop name of the shop with the most stock items, ordered by the count of those items.", "metadata": {}}
{"_id": "gpt3_2221", "text": "\nThis query will select the name of all storms that are not in the affected region table.", "metadata": {}}
{"_id": "gpt3_2222", "text": "\nThis query will return the names of all storms that are not associated with any affected region.", "metadata": {}}
{"_id": "gpt3_2223", "text": "\nThis statement will return the names of all storms that have not affected any regions.", "metadata": {}}
{"_id": "gpt3_2224", "text": "\nThis query will return the names of all storms that are not listed in the affected_region table.", "metadata": {}}
{"_id": "gpt3_2225", "text": "\nThis query will return a list of storm names from the storm table that are not associated with any regions in the affected_region table.", "metadata": {}}
{"_id": "gpt3_2226", "text": "\nThis query will return a list of all unique names of physicians who have prescribed the medication \"Thesisin\".", "metadata": {}}
{"_id": "gpt3_2227", "text": "\nThis query finds the names of all physicians who prescribe the medication \"Thesisin\".", "metadata": {}}
{"_id": "gpt3_2228", "text": "\nThis query will retrieve the names of all the physicians who have prescribed the medication \u201cThesisin\u201d.", "metadata": {}}
{"_id": "gpt3_2229", "text": "\nThis statement will select all the unique names of physicians from the physician table who have prescribed the medication \"Thesisin\".", "metadata": {}}
{"_id": "gpt3_2230", "text": "\nThis query will select the distinct names of physicians who have prescribed the medication \"Thesisin\".", "metadata": {}}
{"_id": "gpt3_2231", "text": "\nThis query selects the cities from the city table that have lower temperatures in March than July, and are also hosting cities.", "metadata": {}}
{"_id": "gpt3_2232", "text": "\nThis query returns the names of all cities that have a lower temperature in March than in July and also hosted an event.", "metadata": {}}
{"_id": "gpt3_2233", "text": "\nThis query returns the city names from the city and temperature tables that have a lower temperature in March than July, and are also hosting cities from the hosting_city table.", "metadata": {}}
{"_id": "gpt3_2234", "text": "\nThis query will select the cities from the city table that have lower temperatures in March than in July, and that are hosting cities.", "metadata": {}}
{"_id": "gpt3_2235", "text": "\nThis query selects the cities from the city and temperature tables that have a lower temperature in March than in July, and intersects them with the cities from the city and hosting_city tables that are hosting cities. The result is a list of cities", "metadata": {}}
{"_id": "gpt3_2236", "text": "\nThis query will return the email associated with the user profile of Mary.", "metadata": {}}
{"_id": "gpt3_2237", "text": "\nThis query will retrieve the email address associated with the user profile of 'Mary'.", "metadata": {}}
{"_id": "gpt3_2238", "text": "\nThis query will return the email address associated with the user profile of Mary from the user_profiles table.", "metadata": {}}
{"_id": "gpt3_2239", "text": "\nThis query will select the email address associated with the user profile of the person named Mary.", "metadata": {}}
{"_id": "gpt3_2240", "text": "\nThis query will return the email address associated with the user profile of 'Mary' from the user_profiles table.", "metadata": {}}
{"_id": "gpt3_2241", "text": "\nThis query will count the number of distinct states in the bank table.", "metadata": {}}
{"_id": "gpt3_2242", "text": "\nThis query returns the number of distinct states in the bank table.", "metadata": {}}
{"_id": "gpt3_2243", "text": "\nThis query will count the number of distinct states in the bank table.", "metadata": {}}
{"_id": "gpt3_2244", "text": "\nThis query will count the number of distinct states in the bank table.", "metadata": {}}
{"_id": "gpt3_2245", "text": "\nThis query will return the number of distinct states in the bank table.", "metadata": {}}
{"_id": "gpt3_2246", "text": "\nThis query will return a list of studios and the number of films associated with each studio.", "metadata": {}}
{"_id": "gpt3_2247", "text": "\nThis query will count the number of films produced by each studio in the film table.", "metadata": {}}
{"_id": "gpt3_2248", "text": "\nThis SQL statement will return a list of studios and the number of films associated with each studio.", "metadata": {}}
{"_id": "gpt3_2249", "text": "\nThis query will return a list of studios and the number of films associated with each studio.", "metadata": {}}
{"_id": "gpt3_2250", "text": "\nThis query will return the number of films for each studio in the film table.", "metadata": {}}
{"_id": "gpt3_2251", "text": "\nThis query will return the total count of records in the track table.", "metadata": {}}
{"_id": "gpt3_2252", "text": "\nThis query counts the total number of rows in the track table.", "metadata": {}}
{"_id": "gpt3_2253", "text": "\nThis query returns the total number of rows in the track table.", "metadata": {}}
{"_id": "gpt3_2254", "text": "\nThis query returns the total number of records in the track table.", "metadata": {}}
{"_id": "gpt3_2255", "text": "\nThis query returns the total number of tracks in the table.", "metadata": {}}
{"_id": "gpt3_2256", "text": "\nThis SQL statement will select all countries from the mountain table that have more than one mountain listed.", "metadata": {}}
{"_id": "gpt3_2257", "text": "\nThis query returns a list of countries that have more than one mountain listed in the table.", "metadata": {}}
{"_id": "gpt3_2258", "text": "\nThis query returns a list of countries that have more than one mountain in the mountain table.", "metadata": {}}
{"_id": "gpt3_2259", "text": "\nThis query returns all the countries from the mountain table that have more than one mountain.", "metadata": {}}
{"_id": "gpt3_2260", "text": "\nThis SQL query will select the country from the mountain table and group the results by country that have more than one entry in the table.", "metadata": {}}
{"_id": "gpt3_2261", "text": "\nThis query will select the distinct names, locations, and products of enzymes from the enzyme table that have an interaction type of 'inhibitor' in the medicine_enzyme_interaction table.", "metadata": {}}
{"_id": "gpt3_2262", "text": "\nThis query returns a list of distinct names, locations, and products of enzymes that interact with medicine as inhibitors.", "metadata": {}}
{"_id": "gpt3_2263", "text": "\nThis query selects the distinct name, location, and product of enzymes from the enzyme table that have an interaction type of 'inhibitor' in the medicine_enzyme_interaction table.", "metadata": {}}
{"_id": "gpt3_2264", "text": "\nThis statement will select distinct names, locations, and products of enzymes from the enzyme table (T1) that have an interaction type of 'inhibitor' in the medicine_enzyme_interaction table (T2).", "metadata": {}}
{"_id": "gpt3_2265", "text": "\nThis query retrieves the name, location, and product of all enzymes that have an interaction type of 'inhibitor' from the enzyme and medicine_enzyme_interaction tables.", "metadata": {}}
{"_id": "gpt3_2266", "text": "\nThis query returns the least common allergy type from the Allergy_type table, sorted in ascending order by count.", "metadata": {}}
{"_id": "gpt3_2267", "text": "\nThis query will return the allergy type with the least amount of occurrences in the Allergy_type table, ordered in ascending order.", "metadata": {}}
{"_id": "gpt3_2268", "text": "\nThis query returns the least common allergy type from the Allergy_type table, ordered by the number of occurrences in ascending order and limited to the first result.", "metadata": {}}
{"_id": "gpt3_2269", "text": "\nThis query will select the allergy type with the lowest count from the Allergy_type table and return the result in ascending order.", "metadata": {}}
{"_id": "gpt3_2270", "text": "\nThis query returns the allergy type that appears the least in the Allergy_type table, sorted in ascending order.", "metadata": {}}
{"_id": "gpt3_2271", "text": "\nThe query SELECT Phone FROM EMPLOYEE will return all phone numbers from the EMPLOYEE table.", "metadata": {}}
{"_id": "gpt3_2272", "text": "\nThe SELECT Phone FROM EMPLOYEE statement is used to retrieve the phone numbers of all employees from the EMPLOYEE table.", "metadata": {}}
{"_id": "gpt3_2273", "text": "\nThe SELECT Phone FROM EMPLOYEE query will return a list of all the phone numbers of employees in the database.", "metadata": {}}
{"_id": "gpt3_2274", "text": "\nThe query SELECT Phone FROM EMPLOYEE will return the phone numbers of all employees in the EMPLOYEE table.", "metadata": {}}
{"_id": "gpt3_2275", "text": "\nThe query SELECT Phone FROM EMPLOYEE will return all phone numbers from the EMPLOYEE table.", "metadata": {}}
{"_id": "gpt3_2276", "text": "\nThis query selects the first and last name of the student with the most participation in activities from the Student and Participates_in tables. It does this by joining the two tables on the StuID field, grouping by the StuID,", "metadata": {}}
{"_id": "gpt3_2277", "text": "\nThis query selects the first and last name of the student who has participated in the most activities, by joining the Student and Participates_in tables, grouping by the student ID, ordering by the count of activities, and then limiting the result to", "metadata": {}}
{"_id": "gpt3_2278", "text": "\nThis query will select the first name and last name of the student with the highest number of participation in activities from the Student and Participates_in tables.", "metadata": {}}
{"_id": "gpt3_2279", "text": "\nThis query selects the first and last name of the student who has participated in the most activities, ordered by the number of activities they have participated in, with the highest count at the top.", "metadata": {}}
{"_id": "gpt3_2280", "text": "\nThis query selects the first name and last name of the student who has participated in the most activities from the Student and Participates_in tables. It does so by joining the tables on the Student ID field, grouping by the Student ID, and", "metadata": {}}
{"_id": "gpt3_2281", "text": "\nThis query retrieves the customer name of the customer with the most policies, sorted in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_2282", "text": "\nThis query selects the customer name with the most policies from the customers and customers_policies tables and orders them by the number of policies, with the customer having the most policies appearing first. The result is limited to the first customer in the", "metadata": {}}
{"_id": "gpt3_2283", "text": "\nThis query selects the customer name of the customer with the most policies from the customers and customers_policies tables, ordered by the count of policies in descending order, and limiting the result to one row.", "metadata": {}}
{"_id": "gpt3_2284", "text": "\nThis query will select the customer name with the most policies from the customers and customers_policies tables, ordered by the count of policies in descending order and limited to the top result.", "metadata": {}}
{"_id": "gpt3_2285", "text": "\nThis query returns the customer name of the customer with the most policies.", "metadata": {}}
{"_id": "gpt3_2286", "text": "\nThis query selects the customer with the least number of customer cards, along with their first and last name, from the Customers_cards and Customers tables. It groups the results by customer_id and orders them by the count of customer cards in ascending", "metadata": {}}
{"_id": "gpt3_2287", "text": "\nThis query selects the customer with the least number of customer cards and displays their customer ID, first name, and last name.", "metadata": {}}
{"_id": "gpt3_2288", "text": "\nThis query retrieves the customer ID, first name, and last name of the customer with the fewest cards from the Customers_cards and Customers tables. The results are sorted by the number of cards and limited to the customer with the lowest count", "metadata": {}}
{"_id": "gpt3_2289", "text": "\nThis query selects the customer with the least amount of customer cards, along with their customer ID, first name, and last name, from the Customers_cards and Customers tables. It groups the results by customer ID and orders them in ascending order by", "metadata": {}}
{"_id": "gpt3_2290", "text": "\nThis query selects the customer ID, first name, and last name of the customer who has the least number of customer cards from the Customers_cards and Customers tables. It groups the results by customer ID and orders them by the count of cards,", "metadata": {}}
{"_id": "gpt3_2291", "text": "\nThis query will return the number of distinct delegates from counties with a population greater than 50,000.", "metadata": {}}
{"_id": "gpt3_2292", "text": "\nThis query will count the number of unique delegates from counties with a population greater than 50,000.", "metadata": {}}
{"_id": "gpt3_2293", "text": "\nThis query will return the number of distinct delegates from counties with a population greater than 50,000.", "metadata": {}}
{"_id": "gpt3_2294", "text": "\nThis query returns the number of distinct delegates from counties with populations greater than 50,000.", "metadata": {}}
{"_id": "gpt3_2295", "text": "\nThis query returns the number of unique delegates from counties with a population greater than 50,000.", "metadata": {}}
{"_id": "gpt3_2296", "text": "\nThis query will select the department name and building from the department table and order the results by budget in descending order.", "metadata": {}}
{"_id": "gpt3_2297", "text": "\nThis query will select the department name and building from the department table and order the results by budget in descending order.", "metadata": {}}
{"_id": "gpt3_2298", "text": "\nThis query will select the department name and building from the department table, and order the results by the budget in descending order.", "metadata": {}}
{"_id": "gpt3_2299", "text": "\nThis query will select the department name and building from the department table, and then order the results by budget in descending order.", "metadata": {}}
{"_id": "gpt3_2300", "text": "\nThis query will return a list of department names and their associated buildings, sorted by budget in descending order.", "metadata": {}}
{"_id": "gpt3_2301", "text": "\nThis query will select the f_id of all songs in the song table with a resolution greater than the average resolution of all songs with a genre_is of \"modern\".", "metadata": {}}
{"_id": "gpt3_2302", "text": "\nThis query will select the f_id (foreign ID) of all songs in the song table with a resolution greater than the average resolution of all modern songs in the table.", "metadata": {}}
{"_id": "gpt3_2303", "text": "\nThis query will select the f_id (file identifier) from the song table where the resolution is greater than the average resolution of all songs with a genre of \"modern\".", "metadata": {}}
{"_id": "gpt3_2304", "text": "\nThis query selects the f_id of all songs from the song table with a resolution greater than the average resolution of all songs in the modern genre.", "metadata": {}}
{"_id": "gpt3_2305", "text": "\nThis query will select the f_id values from the song table where the resolution value is greater than the average resolution value for songs with a genre of \"modern\".", "metadata": {}}
{"_id": "gpt3_2306", "text": "\nThis query will return the last names of all students in classroom 111 from the list table.", "metadata": {}}
{"_id": "gpt3_2307", "text": "\nThis query will select the last name of all students from the list who are in classroom 111.", "metadata": {}}
{"_id": "gpt3_2308", "text": "\nThis query will select the lastname of all students in classroom 111 from the list table.", "metadata": {}}
{"_id": "gpt3_2309", "text": "\nThis query will select the last names of all people in classroom 111 from the list table.", "metadata": {}}
{"_id": "gpt3_2310", "text": "\nThis query will return the last names of all students in classroom 111 from the list table.", "metadata": {}}
{"_id": "gpt3_2311", "text": "\nThis query returns a count of the number of mailshot campaigns for each product category.", "metadata": {}}
{"_id": "gpt3_2312", "text": "\nThis query will return a count of the number of mailshot campaigns associated with each product category.", "metadata": {}}
{"_id": "gpt3_2313", "text": "\nThis query will return a count of the number of mailshot campaigns for each product category.", "metadata": {}}
{"_id": "gpt3_2314", "text": "\nThis query will return a count of the number of mailshot campaigns for each product category.", "metadata": {}}
{"_id": "gpt3_2315", "text": "\nThis query will return a list of product categories and the count of mailshot campaigns associated with each one.", "metadata": {}}
{"_id": "gpt3_2316", "text": "\nThis query retrieves the names of all people from the Person table, sorted in descending order by age.", "metadata": {}}
{"_id": "gpt3_2317", "text": "\nThis statement selects the name of each person from the Person table, and orders the results by age, from highest to lowest.", "metadata": {}}
{"_id": "gpt3_2318", "text": "\nThis query selects the names of all people from the Person table and orders them by age in descending order.", "metadata": {}}
{"_id": "gpt3_2319", "text": "\nThis query selects the name of each person from the Person table and orders the results by age in descending order.", "metadata": {}}
{"_id": "gpt3_2320", "text": "\nThis query selects the names of all people from the Person table, and orders them by age in descending order.", "metadata": {}}
{"_id": "gpt3_2321", "text": "\nThis query returns the document dates from Documents table that have both GV and SF budget type codes in the Documents_with_Expenses table.", "metadata": {}}
{"_id": "gpt3_2322", "text": "\nThis query selects the document dates from Documents and Documents_with_Expenses tables where the budget_type_code is either 'GV' or 'SF'. It then returns the dates that are common to both of these budget types.", "metadata": {}}
{"_id": "gpt3_2323", "text": "\nThis query retrieves the document dates from Documents that have both a budget type code of 'GV' and 'SF' in the Documents_with_Expenses table.", "metadata": {}}
{"_id": "gpt3_2324", "text": "\nThis query selects the document dates from both Documents and Documents_with_Expenses tables where the budget type code is either 'GV' or 'SF'. The INTERSECT operator is used to return only the document dates that appear in both sets", "metadata": {}}
{"_id": "gpt3_2325", "text": "\nThis query retrieves all document dates from the Documents and Documents_with_Expenses tables where the budget_type_code is 'GV' and 'SF'.", "metadata": {}}
{"_id": "gpt3_2326", "text": "\nThis query returns a list of zip codes from the weather table where the average mean visibility is less than 10 miles.", "metadata": {}}
{"_id": "gpt3_2327", "text": "\nThis query returns all zip codes from the weather table that have an average mean visibility in miles of less than 10.", "metadata": {}}
{"_id": "gpt3_2328", "text": "\nThis query returns a list of zip codes from the weather table where the average mean visibility is less than 10 miles.", "metadata": {}}
{"_id": "gpt3_2329", "text": "\nThis query returns a list of zip codes from the weather table where the average mean visibility is less than 10 miles.", "metadata": {}}
{"_id": "gpt3_2330", "text": "\nThis query finds all zip codes from the weather table with an average mean visibility of less than 10 miles.", "metadata": {}}
{"_id": "gpt3_2331", "text": "\nThis query will return the product name and the average price of each product in the PRODUCTS table.", "metadata": {}}
{"_id": "gpt3_2332", "text": "\nThis query will return the average product price for each product name in the PRODUCTS table.", "metadata": {}}
{"_id": "gpt3_2333", "text": "\nThis query will return the average product price for each product name from the PRODUCTS table.", "metadata": {}}
{"_id": "gpt3_2334", "text": "\nThis query will return the average product price for each product name in the PRODUCTS table.", "metadata": {}}
{"_id": "gpt3_2335", "text": "\nThis query will return the average price of each product name in the PRODUCTS table.", "metadata": {}}
{"_id": "gpt3_2336", "text": "\nThis query counts the total number of customers in the Customers table.", "metadata": {}}
{"_id": "gpt3_2337", "text": "\nThis query would return the total number of customers in the Customers table.", "metadata": {}}
{"_id": "gpt3_2338", "text": "\nThis query counts the total number of records in the Customers table.", "metadata": {}}
{"_id": "gpt3_2339", "text": "\nThis query returns the total number of customers in the Customers table.", "metadata": {}}
{"_id": "gpt3_2340", "text": "\nThis query counts the total number of records in the Customers table.", "metadata": {}}
{"_id": "gpt3_2341", "text": "\nThis query is selecting the distinct department_id from the employees table, grouping them by department_id and manager_id and having a count of employee_id greater than or equal to 4. This query will return all of the department_id", "metadata": {}}
{"_id": "gpt3_2342", "text": "\nThis query returns the unique department IDs from the employees table where the manager has at least four employees under them.", "metadata": {}}
{"_id": "gpt3_2343", "text": "\nThis query returns a list of distinct department_id values from the employees table, grouped by both department_id and manager_id, where the count of employee_id is greater than or equal to 4.", "metadata": {}}
{"_id": "gpt3_2344", "text": "\nThis query selects all distinct department IDs from the employees table, grouped by department and manager ID, having a count of employee IDs greater than or equal to 4.", "metadata": {}}
{"_id": "gpt3_2345", "text": "\nThis query returns a list of distinct department IDs where the manager in charge has at least four employees in their department.", "metadata": {}}
{"_id": "gpt3_2346", "text": "\nThis query returns the count of clubs that Tracy Kim is a member of.", "metadata": {}}
{"_id": "gpt3_2347", "text": "\nThis query will count the number of clubs that Tracy Kim is a member of.", "metadata": {}}
{"_id": "gpt3_2348", "text": "\nThis query will count the number of clubs that Tracy Kim is a member of.", "metadata": {}}
{"_id": "gpt3_2349", "text": "\nThis query counts the number of clubs that Tracy Kim is a member of.", "metadata": {}}
{"_id": "gpt3_2350", "text": "\nThis query will return the number of clubs that Tracy Kim is a member of.", "metadata": {}}
{"_id": "gpt3_2351", "text": "\nThis query will return a list of all distinct apartment numbers from the Apartments table that have a booking status code of \"Confirmed\" in the Apartment_Bookings table.", "metadata": {}}
{"_id": "gpt3_2352", "text": "\nThis query will return a list of all distinct apartment numbers from the Apartments table that have been confirmed in the Apartment_Bookings table.", "metadata": {}}
{"_id": "gpt3_2353", "text": "\nThis query selects the distinct apartment numbers of all the apartments that have confirmed bookings.", "metadata": {}}
{"_id": "gpt3_2354", "text": "\nThis statement returns a list of all distinct apartment numbers from the Apartments table whose bookings have a confirmed status code in the Apartment_Bookings table.", "metadata": {}}
{"_id": "gpt3_2355", "text": "\nThis query will select all the distinct apartment numbers from the Apartments table that have a confirmed booking in the Apartment_Bookings table.", "metadata": {}}
{"_id": "gpt3_2356", "text": "\nThis query returns the names of aircrafts that have been used in more than two flights.", "metadata": {}}
{"_id": "gpt3_2357", "text": "\nThis query returns the names of all aircrafts that have been used for at least two flights.", "metadata": {}}
{"_id": "gpt3_2358", "text": "\nThis query returns the name of the aircraft that has been used for at least two flights.", "metadata": {}}
{"_id": "gpt3_2359", "text": "\nThis query is used to select the names of aircrafts that have been used for at least two flights. It does this by joining the Flight and Aircraft tables on the aid column, grouping the results by the aid column, and having a count of", "metadata": {}}
{"_id": "gpt3_2360", "text": "\nThis query will return the name of the aircraft for all flights that have been taken at least twice.", "metadata": {}}
{"_id": "gpt3_2361", "text": "\nThis query selects the booking start dates from apartment bookings that correspond to duplex apartments.", "metadata": {}}
{"_id": "gpt3_2362", "text": "\nThis query selects the booking start date and end date for all bookings of duplex apartments.", "metadata": {}}
{"_id": "gpt3_2363", "text": "\nThis query selects the booking start date and end date from the Apartment_Bookings table for all apartment bookings that have an apt_type_code of \"Duplex\" from the Apartments table.", "metadata": {}}
{"_id": "gpt3_2364", "text": "\nThis query will select the booking start date and end date from the Apartment_Bookings table for all bookings associated with apartments of type \"Duplex\".", "metadata": {}}
{"_id": "gpt3_2365", "text": "\nThis query selects the booking start date and end date from the Apartment_Bookings table for all apartments of type \"Duplex\".", "metadata": {}}
{"_id": "gpt3_2366", "text": "\nThis query returns the total number of records in the catalog_contents table.", "metadata": {}}
{"_id": "gpt3_2367", "text": "\nThis query will return the total number of records in the catalog_contents table.", "metadata": {}}
{"_id": "gpt3_2368", "text": "\nThis query returns the total number of records in the table catalog_contents.", "metadata": {}}
{"_id": "gpt3_2369", "text": "\nThis query returns the total number of records in the \"catalog_contents\" table.", "metadata": {}}
{"_id": "gpt3_2370", "text": "\nThis query will return the total number of records in the table \"catalog_contents\".", "metadata": {}}
{"_id": "gpt3_2371", "text": "\nThis query will return the average number of pages per minute that can be printed in color by a product.", "metadata": {}}
{"_id": "gpt3_2372", "text": "\nThis query will return the average number of pages per minute that a color printer can print.", "metadata": {}}
{"_id": "gpt3_2373", "text": "\nThis query will return the average number of pages printed per minute for color printing from the product table.", "metadata": {}}
{"_id": "gpt3_2374", "text": "\nThe average pages per minute for color printing from the product is 4.3.", "metadata": {}}
{"_id": "gpt3_2375", "text": "\nThis query will return the average number of pages per minute that can be printed in color from the product table.", "metadata": {}}
{"_id": "gpt3_2376", "text": "\nThis query returns a list of hotel IDs and star rating codes from the Hotels table, sorted in ascending order by price range.", "metadata": {}}
{"_id": "gpt3_2377", "text": "\nThis query will select the hotel_id and star_rating_code from the HOTELS table in ascending order of price_range.", "metadata": {}}
{"_id": "gpt3_2378", "text": "\nThis query will select the hotel_id and star_rating_code from the HOTELS table, ordered by the price_range in ascending order.", "metadata": {}}
{"_id": "gpt3_2379", "text": "\nThis query will return a list of hotel IDs and star rating codes from the Hotels table, sorted in ascending order by price range.", "metadata": {}}
{"_id": "gpt3_2380", "text": "\nThis query returns a list of hotel IDs and their associated star rating codes, sorted in ascending order according to price range.", "metadata": {}}
{"_id": "gpt3_2381", "text": "\nThis query will count the total number of records in the inventory table that have a store_id of 1.", "metadata": {}}
{"_id": "gpt3_2382", "text": "\nThis query will return the total number of items in store 1's inventory.", "metadata": {}}
{"_id": "gpt3_2383", "text": "\nThis query will count the number of items in the inventory table that are associated with store_id = 1.", "metadata": {}}
{"_id": "gpt3_2384", "text": "\nThis query will return the total number of items in the inventory table for store_id 1.", "metadata": {}}
{"_id": "gpt3_2385", "text": "\nThis query returns the total number of items in inventory for store 1.", "metadata": {}}
{"_id": "gpt3_2386", "text": "\nThis query will return a count of the number of records in the county_public_safety table grouped by Police_force.", "metadata": {}}
{"_id": "gpt3_2387", "text": "\nThis query will return the number of entries for each police force in the county_public_safety table.", "metadata": {}}
{"_id": "gpt3_2388", "text": "\nThis query will count the number of records in the county_public_safety table for each police force. The result will be a table with two columns, one for Police_force and one for the count of records associated with each police force.", "metadata": {}}
{"_id": "gpt3_2389", "text": "\nThis query will return the police force name and the number of records associated with each police force from the county_public_safety table.", "metadata": {}}
{"_id": "gpt3_2390", "text": "\nThis query will count the number of records in the county_public_safety table grouped by the Police_force column.", "metadata": {}}
{"_id": "gpt3_2391", "text": "\nThis query will count the number of credit cards that Blanche Huels has.", "metadata": {}}
{"_id": "gpt3_2392", "text": "\nThis query will count the number of credit cards owned by Blanche Huels.", "metadata": {}}
{"_id": "gpt3_2393", "text": "\nThis query returns the total number of credit cards owned by Blanche Huels.", "metadata": {}}
{"_id": "gpt3_2394", "text": "\nThis query counts the number of credit cards that Blanche Huels has.", "metadata": {}}
{"_id": "gpt3_2395", "text": "\nThis query will count the number of credit cards that Blanche Huels has.", "metadata": {}}
{"_id": "gpt3_2396", "text": "\nThis statement selects the customer ID and name from the accounts table (T1) for customers who have a checking account balance that is less than the maximum balance from the checking table (T2).", "metadata": {}}
{"_id": "gpt3_2397", "text": "\nThis statement will select the customer ID and name from the accounts table, joining it with the checking table to check if the balance is less than the maximum balance in the checking table.", "metadata": {}}
{"_id": "gpt3_2398", "text": "\nThis statement selects the customer ID and name from the accounts table for customers whose checking account balance is less than the highest checking account balance.", "metadata": {}}
{"_id": "gpt3_2399", "text": "\nThis SQL statement selects the customer ID and name from the accounts table (T1) for customers who have a checking account balance that is less than the highest checking account balance in the checking table (T2).", "metadata": {}}
{"_id": "gpt3_2400", "text": "\nThis query selects the customer ID and name of customers from the accounts table who have a balance in the checking table that is lower than the maximum balance in the checking table.", "metadata": {}}
{"_id": "gpt3_2401", "text": "\nThis query will return the total number of songs in the Songs table.", "metadata": {}}
{"_id": "gpt3_2402", "text": "\nThis query will return the total number of rows in the Songs table.", "metadata": {}}
{"_id": "gpt3_2403", "text": "\nThis query counts the total number of rows in the Songs table.", "metadata": {}}
{"_id": "gpt3_2404", "text": "\nThis query returns the total number of records in the Songs table.", "metadata": {}}
{"_id": "gpt3_2405", "text": "\nThis query will count the total number of records in the Songs table.", "metadata": {}}
{"_id": "gpt3_2406", "text": "\nThis query will select the store phone and store email address from the Drama Workshop Groups table for any workshops that offer the product \"film\" from the Services table.", "metadata": {}}
{"_id": "gpt3_2407", "text": "\nThis query will return the store phone number and store email address of Drama Workshop Groups that offer \"film\" as a service.", "metadata": {}}
{"_id": "gpt3_2408", "text": "\nThis query selects the store phone number and store email address from the Drama Workshop Groups table for all workshops that offer the product \"film\" from the Services table.", "metadata": {}}
{"_id": "gpt3_2409", "text": "\nThis query selects the store phone number and store email address from the Drama Workshop Groups table for all workshops that offer the product \"film\".", "metadata": {}}
{"_id": "gpt3_2410", "text": "\nThis query selects the phone number and email address of a Drama Workshop Group from the Drama Workshop Groups table that offers a service related to film from the Services table.", "metadata": {}}
{"_id": "gpt3_2411", "text": "\nThis query selects the name of any person who is male and has the minimum age among all males.", "metadata": {}}
{"_id": "gpt3_2412", "text": "\nThis query will select the name of the person who is male and has the minimum age among all males.", "metadata": {}}
{"_id": "gpt3_2413", "text": "\nThis statement will select the name of the person from the Person table who is male and has the minimum age among all males in the table.", "metadata": {}}
{"_id": "gpt3_2414", "text": "\nThis query will select the name of the male person with the lowest age from the Person table.", "metadata": {}}
{"_id": "gpt3_2415", "text": "\nThis SQL statement selects the name of all male persons with the minimum age amongst the male persons.", "metadata": {}}
{"_id": "gpt3_2416", "text": "\nThis query returns the total number of records in the rent_arrears table.", "metadata": {}}
{"_id": "gpt3_2417", "text": "\nThis query returns the total number of records in the rent_arrears table.", "metadata": {}}
{"_id": "gpt3_2418", "text": "\nThis query returns the total number of records in the rent_arrears table.", "metadata": {}}
{"_id": "gpt3_2419", "text": "\nThis query returns the total number of records in the rent_arrears table.", "metadata": {}}
{"_id": "gpt3_2420", "text": "\nThis query returns the total number of records in the rent_arrears table.", "metadata": {}}
{"_id": "gpt3_2421", "text": "\nThis query will return the average price of each product grouped by Manufacturer.", "metadata": {}}
{"_id": "gpt3_2422", "text": "\nThis query will return the average price of all products for each manufacturer.", "metadata": {}}
{"_id": "gpt3_2423", "text": "\nThis query will return the average price of each product grouped by the manufacturer.", "metadata": {}}
{"_id": "gpt3_2424", "text": "\nThis query returns the average price of products from each manufacturer.", "metadata": {}}
{"_id": "gpt3_2425", "text": "\nThis query will return the average price for each manufacturer in the Products table.", "metadata": {}}
{"_id": "gpt3_2426", "text": "\nThis query selects the names of people from the people table who are perpetrators, and orders them by the year they were perpetrators in descending order.", "metadata": {}}
{"_id": "gpt3_2427", "text": "\nThis query selects the name of people from the people table and the perpetrator table, joining them by the People_ID column. The results are ordered by the Year column in the perpetrator table in descending order.", "metadata": {}}
{"_id": "gpt3_2428", "text": "\nThis query returns the name of people who are perpetrators from the people and perpetrator tables, ordered by the year in the perpetrator table in descending order.", "metadata": {}}
{"_id": "gpt3_2429", "text": "\nThis query will select the Name of people from the people table, joining with the perpetrator table on the People_ID column, and ordering the results by Year in descending order.", "metadata": {}}
{"_id": "gpt3_2430", "text": "\nThis statement selects the name of people from the people table and joins it with the perpetrator table to order the data by year in descending order.", "metadata": {}}
{"_id": "gpt3_2431", "text": "\nThis query will return the name and description of the location with the code \"x\" from the Ref_locations table.", "metadata": {}}
{"_id": "gpt3_2432", "text": "\nThis query will return the location name and description for the location with the code \"x\" from the Ref_locations table.", "metadata": {}}
{"_id": "gpt3_2433", "text": "\nThis query will return the location name and description from the Ref_locations table for the location with the code \"x\".", "metadata": {}}
{"_id": "gpt3_2434", "text": "\nThis query will return the name and description of the location with the code \"x\" from the Ref_locations table.", "metadata": {}}
{"_id": "gpt3_2435", "text": "\nThis query will return the location name and description for the location with the code \"x\" from the Ref_locations table.", "metadata": {}}
{"_id": "gpt3_2436", "text": "\nThis query will return all the details of investors from the INVESTORS table. The details may include the investor's name, contact information, investment amount, and other relevant information.", "metadata": {}}
{"_id": "gpt3_2437", "text": "\nThis statement would return a list of details about investors from the INVESTORS table. This could include information such as name, address, contact information, investment amount, and any other data that is stored in the INVESTORS table.", "metadata": {}}
{"_id": "gpt3_2438", "text": "\nThis query will return all the details associated with each investor from the INVESTORS table. This could include information such as investor name, contact information, investment history, and any other relevant data.", "metadata": {}}
{"_id": "gpt3_2439", "text": "\nThis query will return a list of details from the INVESTORS table, such as investor name, address, contact information, and any other relevant information.", "metadata": {}}
{"_id": "gpt3_2440", "text": "\nThis query will return all the details related to investors from the INVESTORS table. The details may include name, contact information, investment amount, investment type, and other relevant information.", "metadata": {}}
{"_id": "gpt3_2441", "text": "\nThis query will return the FacID numbers from the Faculty table that are not present in the Faculty_participates_in table.", "metadata": {}}
{"_id": "gpt3_2442", "text": "\nThis query will return the Faculty IDs of all faculty members who do not participate in any Faculty_participates_in activities.", "metadata": {}}
{"_id": "gpt3_2443", "text": "\nThis query will return the Faculty IDs of faculty members who are not participating in any activities.", "metadata": {}}
{"_id": "gpt3_2444", "text": "\nThis statement will return a list of faculty IDs from the Faculty table that are not present in the Faculty_participates_in table.", "metadata": {}}
{"_id": "gpt3_2445", "text": "\nThis query returns all FacID values from the Faculty table that are not present in the Faculty_participates_in table.", "metadata": {}}
{"_id": "gpt3_2446", "text": "\nThis query selects the weight of the person with the lowest height from the people table and orders the results in ascending order.", "metadata": {}}
{"_id": "gpt3_2447", "text": "\nThis query will select the weight of the person with the lowest height from the table \"people\", ordered in ascending order.", "metadata": {}}
{"_id": "gpt3_2448", "text": "\nThis query will return the weight of the person with the lowest height in the people table.", "metadata": {}}
{"_id": "gpt3_2449", "text": "\nThis query returns the weight of the person with the lowest height in the people table.", "metadata": {}}
{"_id": "gpt3_2450", "text": "\nThis query will select the weight of the person with the lowest height from the people table, in ascending order.", "metadata": {}}
{"_id": "gpt3_2451", "text": "\nThis query returns the location of the perpetrator with the most victims killed, in descending order.", "metadata": {}}
{"_id": "gpt3_2452", "text": "\nThis query will return the location of the perpetrator with the highest number of killings, in descending order.", "metadata": {}}
{"_id": "gpt3_2453", "text": "\nThis query will return the location of the perpetrator with the highest number of people killed, ordered from highest to lowest.", "metadata": {}}
{"_id": "gpt3_2454", "text": "\nThis query will return the location of the perpetrator with the highest number of victims killed.", "metadata": {}}
{"_id": "gpt3_2455", "text": "\nThis query will select the location of the perpetrator with the highest number of kills in descending order, and limit the results to the first one.", "metadata": {}}
{"_id": "gpt3_2456", "text": "\nThis query will select the first name of all students enrolled in the class with course code 'ACCT-211' from the CLASS, ENROLL, and STUDENT tables.", "metadata": {}}
{"_id": "gpt3_2457", "text": "\nThis query retrieves the first name of students enrolled in the course ACCT-211 from the CLASS, enroll, and student tables.", "metadata": {}}
{"_id": "gpt3_2458", "text": "\nThis query retrieves the first names of all students enrolled in the ACCT-211 course.", "metadata": {}}
{"_id": "gpt3_2459", "text": "\nThis query selects the first names of all students enrolled in the ACCT-211 course.", "metadata": {}}
{"_id": "gpt3_2460", "text": "\nThis query retrieves the first name of all students enrolled in the class with the course code \"ACCT-211\".", "metadata": {}}
{"_id": "gpt3_2461", "text": "\nThis query returns the type of artwork with the highest number of entries in the \"artwork\" table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_2462", "text": "\nThis query returns the most frequently occurring type of artwork from a table. It returns the type of artwork with the highest count of occurrences in the table, ordered in descending order.", "metadata": {}}
{"_id": "gpt3_2463", "text": "\nThis query returns the type of artwork that appears most often in the table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_2464", "text": "\nThis query will return the most common type of artwork from the artwork table, ordered by the number of occurrences of each type in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_2465", "text": "\nThis query returns the type of artwork with the highest count in the artwork table, ordered by the most frequent type.", "metadata": {}}
{"_id": "gpt3_2466", "text": "\nThis query returns the names of all patients who have not been prescribed the medication 'Procrastin-X'.", "metadata": {}}
{"_id": "gpt3_2467", "text": "\nThis query returns a list of names of patients who have not been prescribed the medication 'Procrastin-X'.", "metadata": {}}
{"_id": "gpt3_2468", "text": "\nThis query will return a list of names from the patient table that are not associated with the medication 'Procrastin-X'.", "metadata": {}}
{"_id": "gpt3_2469", "text": "\nThis query returns the names of all patients who do not have a prescription for the medication 'Procrastin-X'.", "metadata": {}}
{"_id": "gpt3_2470", "text": "\nThis query returns the names of all patients who have not been prescribed the medication 'Procrastin-X'.", "metadata": {}}
{"_id": "gpt3_2471", "text": "\nThis query will return the number of distinct sources in the injury_accident table.", "metadata": {}}
{"_id": "gpt3_2472", "text": "\nThis query will return the number of distinct sources in the injury_accident table.", "metadata": {}}
{"_id": "gpt3_2473", "text": "\nThis query returns the number of distinct sources in the injury_accident table.", "metadata": {}}
{"_id": "gpt3_2474", "text": "\nThis query will count the number of unique sources in the injury_accident table.", "metadata": {}}
{"_id": "gpt3_2475", "text": "\nThis query will return the number of unique sources in the injury_accident table.", "metadata": {}}
{"_id": "gpt3_2476", "text": "\nThis query selects the department name from the department table for any course that contains the word 'Statistics' in its description from the course table.", "metadata": {}}
{"_id": "gpt3_2477", "text": "\nThis query selects the name of the department associated with courses that contain the word \"Statistics\" in their description.", "metadata": {}}
{"_id": "gpt3_2478", "text": "\nThis query selects the department name from the course and department tables where the course description contains the word \"Statistics\".", "metadata": {}}
{"_id": "gpt3_2479", "text": "\nThis query retrieves the department name from the department table for any courses that have 'Statistics' in their description from the course table.", "metadata": {}}
{"_id": "gpt3_2480", "text": "\nThis query retrieves the name of the department associated with a course that contains the word \"Statistics\" in its description.", "metadata": {}}
{"_id": "gpt3_2481", "text": "\nThis query counts the number of products that have the characteristic of \"hot\".", "metadata": {}}
{"_id": "gpt3_2482", "text": "\nThis query counts the number of products that have the characteristic 'hot'.", "metadata": {}}
{"_id": "gpt3_2483", "text": "\nThis query counts the number of products in the products and product_characteristics tables that have the characteristic \"hot\" in the characteristics table.", "metadata": {}}
{"_id": "gpt3_2484", "text": "\nThis query counts the number of products that have the characteristic \"hot\".", "metadata": {}}
{"_id": "gpt3_2485", "text": "\nThis SQL statement will count the number of products that have the characteristic \"hot\".", "metadata": {}}
{"_id": "gpt3_2486", "text": "\nThis SQL query selects the first name, last name, and department ID of all employees who have the lowest salary in their respective departments.", "metadata": {}}
{"_id": "gpt3_2487", "text": "\nThis SQL query selects the first name, last name, and department ID of employees whose salary is the minimum salary for their department.", "metadata": {}}
{"_id": "gpt3_2488", "text": "\nThis SQL query selects the first name, last name, and department ID of employees whose salary is equal to the minimum salary in their respective department.", "metadata": {}}
{"_id": "gpt3_2489", "text": "\nThis SQL query selects the first name, last name, and department ID of all employees with the lowest salary in each department.", "metadata": {}}
{"_id": "gpt3_2490", "text": "\nThis SQL statement selects the first name, last name, and department ID of all employees whose salary is equal to the minimum salary within their respective department.", "metadata": {}}
{"_id": "gpt3_2491", "text": "\nThis query selects the artist name and country of artists who have songs with the word \"love\" in the title.", "metadata": {}}
{"_id": "gpt3_2492", "text": "\nThis query selects the artist name and country from the artist table for all songs whose name contains the word \"love\".", "metadata": {}}
{"_id": "gpt3_2493", "text": "\nThis query selects the artist name and country of all artists who have a song with the word \"love\" in its name.", "metadata": {}}
{"_id": "gpt3_2494", "text": "\nThis query selects the artist name and country from the artist table for all artists who have a song with the word \"love\" in the title.", "metadata": {}}
{"_id": "gpt3_2495", "text": "\nThis SQL query will select the artist name and country from the artist table (T1) that are associated with the song name that contains the word \"love\" from the song table (T2).", "metadata": {}}
{"_id": "gpt3_2496", "text": "\nThis query will return all of the dates that claims were made on from the Claims table where the amount settled was less than or equal to the average amount settled of all claims in the table.", "metadata": {}}
{"_id": "gpt3_2497", "text": "\nThis query will return the date that each claim was made from the Claims table where the amount settled was less than or equal to the average amount settled for all claims in the table.", "metadata": {}}
{"_id": "gpt3_2498", "text": "\nThis query will return all dates of claims made from the Claims table where the amount settled was less than or equal to the average amount settled of all claims in the table.", "metadata": {}}
{"_id": "gpt3_2499", "text": "\nThis query will return all dates in the Claims table where the Amount_Settled is less than or equal to the average Amount_Settled of all claims in the table.", "metadata": {}}
{"_id": "gpt3_2500", "text": "\nThis query will return the date of the claim made for all claims with an amount settled that is less than or equal to the average amount settled of all claims.", "metadata": {}}
{"_id": "gpt3_2501", "text": "\nThis query will return the birth dates of all employees who live in Edmonton.", "metadata": {}}
{"_id": "gpt3_2502", "text": "\nThis query retrieves the birth dates of all employees who live in Edmonton.", "metadata": {}}
{"_id": "gpt3_2503", "text": "\nThis query will return the birth dates of all employees who live in Edmonton.", "metadata": {}}
{"_id": "gpt3_2504", "text": "\nThe query will return the birth dates of all employees who live in Edmonton.", "metadata": {}}
{"_id": "gpt3_2505", "text": "\nThis query will select the birth dates of all employees from the EMPLOYEE table who live in Edmonton.", "metadata": {}}
{"_id": "gpt3_2506", "text": "\nThis query will return the name of the race with the most recent date.", "metadata": {}}
{"_id": "gpt3_2507", "text": "\nThis query will select the name of the race with the most recent date from the table of races.", "metadata": {}}
{"_id": "gpt3_2508", "text": "\nThis query returns the name of the race that is most recently scheduled, as ordered by date in descending order, with a limit of 1.", "metadata": {}}
{"_id": "gpt3_2509", "text": "\nThis query retrieves the name of the most recent race from the races table, ordered by date in descending order and limited to the first result.", "metadata": {}}
{"_id": "gpt3_2510", "text": "\nThis query will select the name of the most recently scheduled race from the 'races' table and return it as the result.", "metadata": {}}
{"_id": "gpt3_2511", "text": "\nThis query will select the name of all physicians who are affiliated with either the Surgery or Psychiatry departments.", "metadata": {}}
{"_id": "gpt3_2512", "text": "\nThis query will select the name of all physicians that are affiliated with either the Surgery or Psychiatry departments.", "metadata": {}}
{"_id": "gpt3_2513", "text": "\nThis query will select the name of all physicians who are affiliated with either the Surgery or Psychiatry departments.", "metadata": {}}
{"_id": "gpt3_2514", "text": "\nThis query will select the name of all physicians who are affiliated with either the Surgery or Psychiatry departments.", "metadata": {}}
{"_id": "gpt3_2515", "text": "\nThis statement retrieves the name of all physicians who are affiliated with either the Surgery or Psychiatry departments.", "metadata": {}}
{"_id": "gpt3_2516", "text": "\nThis SQL statement selects the hometown of people who are gymnasts and have been registered at least twice. It does this by joining the gymnast and people tables on the Gymnast_ID and People_ID columns, respectively. It then groups", "metadata": {}}
{"_id": "gpt3_2517", "text": "\nThis query will select the hometowns of gymnasts from the people and gymnast tables that have two or more gymnasts from the same hometown.", "metadata": {}}
{"_id": "gpt3_2518", "text": "\nThis query selects the hometown of gymnasts who have two or more gymnasts from the same hometown. It does this by joining the gymnast and people tables on the Gymnast_ID and People_ID columns, respectively. It then groups", "metadata": {}}
{"_id": "gpt3_2519", "text": "\nThis SQL statement returns the hometowns of all gymnasts who have more than one member living in the same hometown.", "metadata": {}}
{"_id": "gpt3_2520", "text": "\nThis query selects the hometowns of gymnasts who have appeared in the gymnast table more than once. It joins the gymnast table and the people table on the Gymnast_ID and People_ID columns, respectively. It then groups", "metadata": {}}
{"_id": "gpt3_2521", "text": "\nThis query selects the driverid and forename of drivers who competed in both the Australian Grand Prix and the Chinese Grand Prix.", "metadata": {}}
{"_id": "gpt3_2522", "text": "\nThis query returns the driverid and forename of drivers who participated in both the Australian Grand Prix and the Chinese Grand Prix.", "metadata": {}}
{"_id": "gpt3_2523", "text": "\nThis query selects the driver IDs and forenames of drivers who participated in both the Australian Grand Prix and the Chinese Grand Prix.", "metadata": {}}
{"_id": "gpt3_2524", "text": "\nThis query selects the driverid and forename of drivers who participated in both the Australian Grand Prix and the Chinese Grand Prix.", "metadata": {}}
{"_id": "gpt3_2525", "text": "\nThis query selects the driverid and forename of the drivers who participated in both the Australian Grand Prix and Chinese Grand Prix.", "metadata": {}}
{"_id": "gpt3_2526", "text": "\nThis query will select the players from the match_season table and order them by college in ascending order.", "metadata": {}}
{"_id": "gpt3_2527", "text": "\nThis query will return a list of all players from the match_season table, ordered in alphabetical order by their college.", "metadata": {}}
{"_id": "gpt3_2528", "text": "\nThis query will return a list of players from the match_season table, sorted in alphabetical order by college.", "metadata": {}}
{"_id": "gpt3_2529", "text": "\nThis statement will select the player from the match_season table and order the results by college in ascending order.", "metadata": {}}
{"_id": "gpt3_2530", "text": "\nThis query will select the player from the match_season table and order the results by college in ascending order.", "metadata": {}}
{"_id": "gpt3_2531", "text": "\nThis query will count the number of albums released by the artist Billy Cobham.", "metadata": {}}
{"_id": "gpt3_2532", "text": "\nThis query will count the number of albums by the artist Billy Cobham.", "metadata": {}}
{"_id": "gpt3_2533", "text": "\nThis query will count the number of albums released by the artist \"Billy Cobham\".", "metadata": {}}
{"_id": "gpt3_2534", "text": "\nThis query counts the number of albums by the artist \"Billy Cobham\".", "metadata": {}}
{"_id": "gpt3_2535", "text": "\nThis query returns the count of the number of albums released by the artist \"Billy Cobham\".", "metadata": {}}
{"_id": "gpt3_2536", "text": "\nThis query will return all institutions from the institution table that were founded after 1990 and have an enrollment of 1000 or more.", "metadata": {}}
{"_id": "gpt3_2537", "text": "\nThis query will return the type (e.g. college, university, etc.) of all institutions founded after 1990 and with an enrollment of at least 1000.", "metadata": {}}
{"_id": "gpt3_2538", "text": "\nThis query will select the type of institution from the institution table where the institution was founded after 1990 and has an enrollment of 1000 or more.", "metadata": {}}
{"_id": "gpt3_2539", "text": "\nThis query will return the type of institution from the institution table where the institution was founded after 1990 and has an enrollment of 1000 or more.", "metadata": {}}
{"_id": "gpt3_2540", "text": "\nThis query will return the type of institution (e.g. university, college, etc.) from the institution table where the institution was founded after 1990 and has an enrollment of at least 1000 students.", "metadata": {}}
{"_id": "gpt3_2541", "text": "\nThis query will return the number of players who have a high school (HS) score greater than 1000.", "metadata": {}}
{"_id": "gpt3_2542", "text": "\nThis query will return the total number of players who have scored more than 1000 points in their high school career.", "metadata": {}}
{"_id": "gpt3_2543", "text": "\nThis query will count the number of players from the Player table who have scored more than 1000 points in high school.", "metadata": {}}
{"_id": "gpt3_2544", "text": "\nThis query will return the number of players who have a high score greater than 1000.", "metadata": {}}
{"_id": "gpt3_2545", "text": "\nThis query will count the number of players in the Player table who have a high score (HS) higher than 1000.", "metadata": {}}
{"_id": "gpt3_2546", "text": "\nThis SQL query will count the number of invoices for each billing state in the USA.", "metadata": {}}
{"_id": "gpt3_2547", "text": "\nThis query will count the number of invoices from the USA, grouped by billing state.", "metadata": {}}
{"_id": "gpt3_2548", "text": "\nThis SQL query will return the number of invoices for each Billing State in the USA.", "metadata": {}}
{"_id": "gpt3_2549", "text": "\nThis SQL query will return the number of invoices for each state in the US. It will return two columns, one with the state name and one with the count of invoices for that state.", "metadata": {}}
{"_id": "gpt3_2550", "text": "\nThis SQL query will count the number of invoices from each state in the USA.", "metadata": {}}
{"_id": "gpt3_2551", "text": "\nThis query will select the names of people from a table and order them by their height in ascending order.", "metadata": {}}
{"_id": "gpt3_2552", "text": "\nThis query selects the names of people from a database and orders them in ascending order by their height.", "metadata": {}}
{"_id": "gpt3_2553", "text": "\nThe above SQL statement will select the names of people from a table and order the results in ascending order according to their height.", "metadata": {}}
{"_id": "gpt3_2554", "text": "\nThis query returns a list of all the names from the People table, sorted from the shortest height to the tallest.", "metadata": {}}
{"_id": "gpt3_2555", "text": "\nThis query will select the names of people from a table and order them in ascending order according to their height.", "metadata": {}}
{"_id": "gpt3_2556", "text": "\nThis statement will select the asset_id, asset_details, asset_make, and asset_model columns from the Assets table.", "metadata": {}}
{"_id": "gpt3_2557", "text": "\nThis query returns the asset ID, details, make, and model of assets from the Assets table.", "metadata": {}}
{"_id": "gpt3_2558", "text": "\nThis query retrieves the asset ID, details, make, and model of all assets from the Assets table.", "metadata": {}}
{"_id": "gpt3_2559", "text": "\nThis statement is used to select data from the Assets table. It will return the asset_id, asset_details, asset_make, and asset_model columns from the table.", "metadata": {}}
{"_id": "gpt3_2560", "text": "\nThis SQL query will return the asset_id, asset_details, asset_make, and asset_model columns from the Assets table.", "metadata": {}}
{"_id": "gpt3_2561", "text": "\nThis query returns the name of the department with the fewest professors, ordered by the number of professors in each department.", "metadata": {}}
{"_id": "gpt3_2562", "text": "\nThis query selects the name of the department with the fewest professors, based on the professor and department tables. It does this by joining the professor and department tables on the department code, grouping by the department code, and ordering by the count of", "metadata": {}}
{"_id": "gpt3_2563", "text": "\nThis query returns the name of the department with the fewest professors, based on the professor and department tables. It joins the professor and department tables on the dept_code column, groups the results by the department code, and orders the results", "metadata": {}}
{"_id": "gpt3_2564", "text": "\nThis query selects the department name from the professor and department tables, groups the results by department code, orders the results by count in descending order, and limits the result to the first row. This query returns the department name with the most professors.", "metadata": {}}
{"_id": "gpt3_2565", "text": "\nThis query retrieves the name of the department with the fewest professors, as determined by counting the number of professors in each department.", "metadata": {}}
{"_id": "gpt3_2566", "text": "\nThis query will return the names of all songs in the database that are in English.", "metadata": {}}
{"_id": "gpt3_2567", "text": "\nThis query returns the names of all songs in a database that are in English.", "metadata": {}}
{"_id": "gpt3_2568", "text": "\nThis query will return a list of all songs in a database that are in English.", "metadata": {}}
{"_id": "gpt3_2569", "text": "\nThis query will return a list of all song names from the song table where the languages column is set to \"English\".", "metadata": {}}
{"_id": "gpt3_2570", "text": "\nThis query will select all song names from the song table where the language is English.", "metadata": {}}
{"_id": "gpt3_2571", "text": "\nThis query will return the total number of movies in the Movie table that were released before 2000.", "metadata": {}}
{"_id": "gpt3_2572", "text": "\nThis query will return the total number of movies released before the year 2000.", "metadata": {}}
{"_id": "gpt3_2573", "text": "\nThis query returns the total number of movies released before the year 2000.", "metadata": {}}
{"_id": "gpt3_2574", "text": "\nThis query returns the number of movies released before the year 2000.", "metadata": {}}
{"_id": "gpt3_2575", "text": "\nThis query will return the total number of movies released before the year 2000.", "metadata": {}}
{"_id": "gpt3_2576", "text": "\nThis query will count the number of distinct region_id values in the affected_region table.", "metadata": {}}
{"_id": "gpt3_2577", "text": "\nThis query returns the total number of distinct region_ids present in the affected_region table.", "metadata": {}}
{"_id": "gpt3_2578", "text": "\nThis query returns the total number of distinct regions affected by a given event.", "metadata": {}}
{"_id": "gpt3_2579", "text": "\nThis query will return the number of distinct region_ids in the affected_region table.", "metadata": {}}
{"_id": "gpt3_2580", "text": "\nThis query returns the number of distinct region_ids from the affected_region table.", "metadata": {}}
{"_id": "gpt3_2581", "text": "\nThis query will return the number of kids associated with the reservation made by Roy Sweazy.", "metadata": {}}
{"_id": "gpt3_2582", "text": "\nThis SQL statement will select all the kids associated with the reservation of Roy Sweazy.", "metadata": {}}
{"_id": "gpt3_2583", "text": "\nThis query is asking for the number of kids in the reservation of Roy Sweazy.", "metadata": {}}
{"_id": "gpt3_2584", "text": "\nThis query will select the number of kids from the Reservations table for the person with the FirstName \"ROY\" and the LastName \"SWEAZY\".", "metadata": {}}
{"_id": "gpt3_2585", "text": "\nThis query will select all kids associated with the reservation under the name \"Roy Sweazy\".", "metadata": {}}
{"_id": "gpt3_2586", "text": "\nThis query selects the customer with the fewest accounts from the Accounts and Customers tables, and returns the customer's first name, last name, and customer ID.", "metadata": {}}
{"_id": "gpt3_2587", "text": "\nThis query selects the customer's first and last name, as well as their customer ID, from the Accounts and Customers tables, grouped by customer ID and ordered by the count of records in ascending order. The result is limited to the customer with the", "metadata": {}}
{"_id": "gpt3_2588", "text": "\nThis query selects the customer first name, customer last name, and customer ID from the Accounts and Customers tables, grouped by customer ID, and sorted by count in ascending order, with the lowest count being returned first.", "metadata": {}}
{"_id": "gpt3_2589", "text": "\nThis query selects the customer with the fewest accounts, identified by their first and last name, along with the associated customer ID.", "metadata": {}}
{"_id": "gpt3_2590", "text": "\nThis query selects the customer first and last name and customer ID from the Accounts and Customers tables, groups the results by customer ID, and orders the results by count in ascending order. The query then limits the results to the first entry.", "metadata": {}}
{"_id": "gpt3_2591", "text": "\nThe query will return all the types of films released in 1995 from the film_market_estimation table.", "metadata": {}}
{"_id": "gpt3_2592", "text": "\nThe query will return the type of film released in 1995 from the film_market_estimation table.", "metadata": {}}
{"_id": "gpt3_2593", "text": "\nThe query will return all types of films from the film_market_estimation table that were released in 1995.", "metadata": {}}
{"_id": "gpt3_2594", "text": "\nThe query will return the types of films released in 1995 from the film_market_estimation table.", "metadata": {}}
{"_id": "gpt3_2595", "text": "\nThe query will return all types of films released in 1995 from the film_market_estimation table.", "metadata": {}}
{"_id": "gpt3_2596", "text": "\nThis query selects the team name from the basketball_match table for any school whose enrollment is below the average enrollment of all schools in the university table.", "metadata": {}}
{"_id": "gpt3_2597", "text": "\nThis query will select the team names from the basketball_match table that are associated with universities that have an enrollment lower than the average enrollment of all universities.", "metadata": {}}
{"_id": "gpt3_2598", "text": "\nThis query will select the team name from the basketball_match table for all teams associated with universities that have an enrollment lower than the average enrollment of all universities.", "metadata": {}}
{"_id": "gpt3_2599", "text": "\nThis query selects the team name from the basketball_match table for all teams whose associated university has an enrollment less than the average enrollment of all universities.", "metadata": {}}
{"_id": "gpt3_2600", "text": "\nThis query selects the team name from the basketball_match table for teams associated with universities that have an enrollment lower than the average enrollment of all universities.", "metadata": {}}
{"_id": "gpt3_2601", "text": "\nThis query will select the flight numbers of all flights departing from Los Angeles.", "metadata": {}}
{"_id": "gpt3_2602", "text": "\nThis query will select the flight numbers from the Flight table that have an origin of Los Angeles.", "metadata": {}}
{"_id": "gpt3_2603", "text": "\nThis query will return the flight numbers for all flights that have an origin of Los Angeles.", "metadata": {}}
{"_id": "gpt3_2604", "text": "\nThis query will return the flight numbers from the Flight table for flights departing from Los Angeles.", "metadata": {}}
{"_id": "gpt3_2605", "text": "\nThis query will return a list of all flight numbers that originate from Los Angeles.", "metadata": {}}
{"_id": "gpt3_2606", "text": "\nThis query will select the names of all wines from the Wine table that have an Appelation from the Appelations table that is from Monterey County and has a price less than $50.", "metadata": {}}
{"_id": "gpt3_2607", "text": "\nThis query will select the names of wines from the Wine table where the Appelation is found in the Appelations table and the County is \"Monterey\" and the price is less than 50.", "metadata": {}}
{"_id": "gpt3_2608", "text": "\nThis query will select the names of wines from Monterey County that cost less than $50.", "metadata": {}}
{"_id": "gpt3_2609", "text": "\nThis query will select the names of wines from the Wine table that have an Appelation in the Appelations table that is from Monterey County and have a price less than 50.", "metadata": {}}
{"_id": "gpt3_2610", "text": "\nThis query will select the names of wines from the Wine table with a price less than 50 that are from the Appelations table with a county of Monterey.", "metadata": {}}
{"_id": "gpt3_2611", "text": "\nThis query returns the name and operating system of all web client accelerators that are not compatible with the Opera browser.", "metadata": {}}
{"_id": "gpt3_2612", "text": "\nThis statement returns the name and operating system of all web client accelerators except those that are compatible with the Opera browser.", "metadata": {}}
{"_id": "gpt3_2613", "text": "\nThis query returns all records from the web_client_accelerator table that do not have an associated accelerator_compatible_browser record with a browser name of 'Opera'.", "metadata": {}}
{"_id": "gpt3_2614", "text": "\nThis SQL statement will select the name and operating system of all web client accelerators, except those which are compatible with the Opera browser.", "metadata": {}}
{"_id": "gpt3_2615", "text": "\nThis query returns the names and operating systems of all web client accelerators that are not compatible with the Opera browser.", "metadata": {}}
{"_id": "gpt3_2616", "text": "\nThis statement will return all unique customer details from the Customers table.", "metadata": {}}
{"_id": "gpt3_2617", "text": "\nThis query returns all the distinct customer details from the Customers table in the database.", "metadata": {}}
{"_id": "gpt3_2618", "text": "\nThis query will return a list of unique customer details from the Customers table.", "metadata": {}}
{"_id": "gpt3_2619", "text": "\nThis statement will retrieve all unique customer details from the Customers table.", "metadata": {}}
{"_id": "gpt3_2620", "text": "\nThis statement will select all unique customer details from the Customers table.", "metadata": {}}
{"_id": "gpt3_2621", "text": "\nThis statement is selecting all columns from the products and manufacturers tables, and joining the two tables on the manufacturer column. The resulting table will contain all columns from both tables, and the rows will be the combined data from both tables where the manufacturer column", "metadata": {}}
{"_id": "gpt3_2622", "text": "\nThis query retrieves all records from the products and manufacturers tables, where the manufacturer code from the products table matches the code from the manufacturers table. It will return a combined table with the columns from both tables.", "metadata": {}}
{"_id": "gpt3_2623", "text": "\nThis statement will select all records from both the products and manufacturers tables, and join them together based on the manufacturer code in each table. The result will be a combined table with all records from both tables, with the manufacturer code in each record matching", "metadata": {}}
{"_id": "gpt3_2624", "text": "\nThis statement retrieves all records from both the products and manufacturers tables where the manufacturer code in the products table matches the code in the manufacturers table. The results of the join will contain all columns from both tables.", "metadata": {}}
{"_id": "gpt3_2625", "text": "\nThis statement is used to join the products and manufacturers tables together by matching the manufacturer code from the products table to the code from the manufacturers table. The statement will select all columns from both tables and return a result set with the columns from both tables", "metadata": {}}
{"_id": "gpt3_2626", "text": "\nThis query will return the location with the highest number of records in the county_public_safety table, ordered by count in descending order, and limited to one result.", "metadata": {}}
{"_id": "gpt3_2627", "text": "\nThis query returns the location with the highest number of public safety records from the county_public_safety table.", "metadata": {}}
{"_id": "gpt3_2628", "text": "\nThis query will return the location with the highest number of county public safety records.", "metadata": {}}
{"_id": "gpt3_2629", "text": "\nThis query selects the location with the highest count from the county_public_safety table and orders the results by count in descending order. The result of this query is the location with the highest count.", "metadata": {}}
{"_id": "gpt3_2630", "text": "\nThis query returns the location with the highest count of entries in the county_public_safety table.", "metadata": {}}
{"_id": "gpt3_2631", "text": "\nThis query will return the total number of apartment bookings in the database.", "metadata": {}}
{"_id": "gpt3_2632", "text": "\nThis query will return the total number of apartment bookings in the database.", "metadata": {}}
{"_id": "gpt3_2633", "text": "\nThis query would return the total number of records in the Apartment_Bookings table.", "metadata": {}}
{"_id": "gpt3_2634", "text": "\nThis query will return the total number of apartment bookings in the database.", "metadata": {}}
{"_id": "gpt3_2635", "text": "\nThis query would return the total number of apartment bookings in the database.", "metadata": {}}
{"_id": "gpt3_2636", "text": "\nThis query will return the names of all races that took place in the year 2017.", "metadata": {}}
{"_id": "gpt3_2637", "text": "\nThis query will return the names of all races that took place in the year 2017.", "metadata": {}}
{"_id": "gpt3_2638", "text": "\nThis query will return the names of all races that took place in 2017.", "metadata": {}}
{"_id": "gpt3_2639", "text": "\nThis query will return the names of all races in the database that took place in the year 2017.", "metadata": {}}
{"_id": "gpt3_2640", "text": "\nThis query will select the name of all races from the database that took place in the year 2017.", "metadata": {}}
{"_id": "gpt3_2641", "text": "\nThis query will select the names of all procedures that cost more than 1000 and the names of all procedures that John Wen is trained in.", "metadata": {}}
{"_id": "gpt3_2642", "text": "\nThis query will return the name of all procedures with a cost greater than 1000, as well as the name of any procedure that John Wen is trained in.", "metadata": {}}
{"_id": "gpt3_2643", "text": "\nThis query will return the name of all procedures with a cost greater than 1000, as well as the name of all procedures that John Wen is trained in.", "metadata": {}}
{"_id": "gpt3_2644", "text": "\nThis query will select the names of procedures with a cost greater than 1000, as well as the names of procedures that are trained in by a physician named John Wen.", "metadata": {}}
{"_id": "gpt3_2645", "text": "\nThis query will return the names of all procedures with a cost greater than 1000, as well as the names of all procedures trained in by physician \"John Wen\".", "metadata": {}}
{"_id": "gpt3_2646", "text": "\nThis query returns the number of gas stations that opened between the years 2000 and 2005.", "metadata": {}}
{"_id": "gpt3_2647", "text": "\nThis query returns the total number of gas stations that opened between 2000 and 2005.", "metadata": {}}
{"_id": "gpt3_2648", "text": "\nThis query will count the number of gas stations that opened between the years 2000 and 2005.", "metadata": {}}
{"_id": "gpt3_2649", "text": "\nThis query will count the number of gas stations that opened between the years 2000 and 2005.", "metadata": {}}
{"_id": "gpt3_2650", "text": "\nThis query counts the number of gas stations that opened between the years 2000 and 2005.", "metadata": {}}
{"_id": "gpt3_2651", "text": "\nThe query will return the first year and last year of all parties with a theme of either Spring or Technology.", "metadata": {}}
{"_id": "gpt3_2652", "text": "\nThis query will return the first and last years of any parties with the themes \"Spring\" or \"Technology\".", "metadata": {}}
{"_id": "gpt3_2653", "text": "\nThe query will return the first and last years for parties with either a Spring or Technology theme.", "metadata": {}}
{"_id": "gpt3_2654", "text": "\nThe query will return the First_year and Last_year columns from the party table where the Party_Theme is either \"Spring\" or \"Technology\".", "metadata": {}}
{"_id": "gpt3_2655", "text": "\nThis query will return the first and last year of any party with a theme of either Spring or Technology.", "metadata": {}}
{"_id": "gpt3_2656", "text": "\nThis query will return the total number of flights to each destination in the Flight table.", "metadata": {}}
{"_id": "gpt3_2657", "text": "\nThis query will return the destination and the number of flights to each destination.", "metadata": {}}
{"_id": "gpt3_2658", "text": "\nThis query will return a list of destinations and the number of flights that have departed for each destination.", "metadata": {}}
{"_id": "gpt3_2659", "text": "\nThis query will return a list of destinations and the count of flights to each destination from the Flight table.", "metadata": {}}
{"_id": "gpt3_2660", "text": "\nThis query will return the number of flights for each destination.", "metadata": {}}
{"_id": "gpt3_2661", "text": "\nThis query selects the season, player, and team name from the match_season and team tables. It joins the two tables on the Team column. The result will be a list of season, player, and team name for each match.", "metadata": {}}
{"_id": "gpt3_2662", "text": "\nThis query selects the season, player, and team name from two tables, match_season and team. It joins the two tables on the team ID.", "metadata": {}}
{"_id": "gpt3_2663", "text": "\nThis query selects the season, player, and team name from the match_season and team tables. It joins the tables on the Team column in both tables. The result will be a list of seasons, players, and team names.", "metadata": {}}
{"_id": "gpt3_2664", "text": "\nThis query selects the season, player, and team name from two tables: match_season and team. The query joins the two tables on the Team column, so that the data from the two tables can be combined.", "metadata": {}}
{"_id": "gpt3_2665", "text": "\nThis query selects the season, player, and team name from the match_season and team tables. It joins the two tables on the Team column in both tables. The result of this query will be a list of seasons, players, and team", "metadata": {}}
{"_id": "gpt3_2666", "text": "\nThis query retrieves the first name of the employee and the professor office from the professor and employee tables, sorted by the employee's first name.", "metadata": {}}
{"_id": "gpt3_2667", "text": "\nThis query will select the first name of an employee and the professor office of that employee from the professor and employee tables, and then order the results by the employee's first name.", "metadata": {}}
{"_id": "gpt3_2668", "text": "\nThis query returns a list of employee first names and the office number of their professor, ordered alphabetically by employee first name.", "metadata": {}}
{"_id": "gpt3_2669", "text": "\nThis query selects the first name of an employee and the office of the professor associated with the employee, ordered by the employee's first name.", "metadata": {}}
{"_id": "gpt3_2670", "text": "\nThis query selects the employee's first name and the professor's office from the professor and employee tables, and orders the results by the employee's first name.", "metadata": {}}
{"_id": "gpt3_2671", "text": "\nThis query will return the total number of artists in the table.", "metadata": {}}
{"_id": "gpt3_2672", "text": "\nThis query returns the total number of artists in the table.", "metadata": {}}
{"_id": "gpt3_2673", "text": "\nThis query returns the total number of entries in the artist table.", "metadata": {}}
{"_id": "gpt3_2674", "text": "\nThis query returns the total number of records in the artist table.", "metadata": {}}
{"_id": "gpt3_2675", "text": "\nThis query returns the total number of artists in the table.", "metadata": {}}
{"_id": "gpt3_2676", "text": "\nThis query would return the total number of financial transactions in the table.", "metadata": {}}
{"_id": "gpt3_2677", "text": "\nThis query returns the total number of records in the Financial_transactions table.", "metadata": {}}
{"_id": "gpt3_2678", "text": "\nThis query would return the total number of records in the Financial_transactions table.", "metadata": {}}
{"_id": "gpt3_2679", "text": "\nThis query will return the total number of records in the Financial_transactions table.", "metadata": {}}
{"_id": "gpt3_2680", "text": "\nThis query would return the total number of records in the Financial_transactions table.", "metadata": {}}
{"_id": "gpt3_2681", "text": "\nThis statement will select the name of a city from the city table and the name of the corresponding county public safety from the county public safety table, based on the matching County_ID in both tables.", "metadata": {}}
{"_id": "gpt3_2682", "text": "\nThis query selects the name of a city from the city table and the name of a county public safety organization from the county_public_safety table, based on a shared County_ID between the two tables.", "metadata": {}}
{"_id": "gpt3_2683", "text": "\nThis query will select the names of cities and counties from two tables, city and county_public_safety, based on the matching County_ID values.", "metadata": {}}
{"_id": "gpt3_2684", "text": "\nThis query selects the name of a city from the city table and the name of the public safety agency associated with the same county from the county_public_safety table. It does this by joining the two tables on the County_ID column.", "metadata": {}}
{"_id": "gpt3_2685", "text": "\nThis query selects the names from the city and county_public_safety tables, joining them on the County_ID column.", "metadata": {}}
{"_id": "gpt3_2686", "text": "\nThis query selects the name, latitude, and minimum duration of trips for each end station.", "metadata": {}}
{"_id": "gpt3_2687", "text": "\nThis query selects the name, latitude, and minimum duration of trips from the station and trip tables, grouped by end station ID.", "metadata": {}}
{"_id": "gpt3_2688", "text": "\nThis query finds the name and latitude of each station, as well as the minimum duration of trips to that station, grouped by the end station ID.", "metadata": {}}
{"_id": "gpt3_2689", "text": "\nThis query returns the name, latitude, and minimum duration of trips for each station.", "metadata": {}}
{"_id": "gpt3_2690", "text": "\nThis query selects the name, latitude, and minimum duration of trips for each station.", "metadata": {}}
{"_id": "gpt3_2691", "text": "\nThis query selects the name and team_id of the team with the lowest average salary, from the team and salary tables, ordered by the average salary in ascending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_2692", "text": "\nThis query selects the team name and team ID of the team with the lowest average salary, ordered by ascending salary.", "metadata": {}}
{"_id": "gpt3_2693", "text": "\nThis query selects the name and team_id of the team with the lowest average salary from the team and salary tables, and orders them in ascending order.", "metadata": {}}
{"_id": "gpt3_2694", "text": "\nThis query selects the name and team_id of the team with the lowest average salary, ordered in ascending order.", "metadata": {}}
{"_id": "gpt3_2695", "text": "\nThis query selects the name and team_id of the team with the lowest average salary, ordered by ascending salary.", "metadata": {}}
{"_id": "gpt3_2696", "text": "\nThis query will select the product details from the products table for the most ordered product in the order_items table, based on the product_id. The query will group the order_items by product_id, count the number of orders for", "metadata": {}}
{"_id": "gpt3_2697", "text": "\nThis query selects the product details of the product with the highest number of orders from the order_items and products tables. It groups the order items by product ID and orders them by the count of orders in descending order, then limits the results to", "metadata": {}}
{"_id": "gpt3_2698", "text": "\nThis query will select the product details of the product that has been ordered the most, from the order_items and products tables, grouped by product_id and ordered by count in descending order, with a limit of 1.", "metadata": {}}
{"_id": "gpt3_2699", "text": "\nThis query will select the product details for the product with the highest number of orders from the order_items and products tables. It will group the orders by product_id and order them by count in descending order, then return the top result.", "metadata": {}}
{"_id": "gpt3_2700", "text": "\nThis query will select the product details from the products table that was ordered the most from the order_items table, and will order the results by the count of each product and limit the results to one.", "metadata": {}}
{"_id": "gpt3_2701", "text": "\nThis statement will select all the unique payment methods used by customers from the customers table.", "metadata": {}}
{"_id": "gpt3_2702", "text": "\nThis statement will select all of the unique payment methods used by customers.", "metadata": {}}
{"_id": "gpt3_2703", "text": "\nThis query will return a list of all the distinct payment methods used by customers from the customers table.", "metadata": {}}
{"_id": "gpt3_2704", "text": "\nThis statement will select and return all unique payment methods used by customers.", "metadata": {}}
{"_id": "gpt3_2705", "text": "\nThis query will return a list of all the distinct payment methods used by customers.", "metadata": {}}
{"_id": "gpt3_2706", "text": "\nThis query will count the total number of scientists in a table.", "metadata": {}}
{"_id": "gpt3_2707", "text": "\nThis query returns the total number of scientists in a given table.", "metadata": {}}
{"_id": "gpt3_2708", "text": "\nThis statement will count the number of scientists in the table.", "metadata": {}}
{"_id": "gpt3_2709", "text": "\nThis query returns the total number of scientists in a table.", "metadata": {}}
{"_id": "gpt3_2710", "text": "\nThis query returns the total number of rows in the scientists table.", "metadata": {}}
{"_id": "gpt3_2711", "text": "\nThis statement will select the instrument from the instruments table that is associated with the bandmate with the last name \"Heilo\" in the Band table.", "metadata": {}}
{"_id": "gpt3_2712", "text": "\nThis query will return the instrument(s) that the bandmate with the last name \"Heilo\" plays.", "metadata": {}}
{"_id": "gpt3_2713", "text": "\nThis query will return the instruments played by the band member with the last name \"Heilo\" from the instruments and Band tables.", "metadata": {}}
{"_id": "gpt3_2714", "text": "\nThis query will return the instrument of each bandmate with the last name \"Heilo\" from the tables Instruments and Band.", "metadata": {}}
{"_id": "gpt3_2715", "text": "\nThis statement will return the instrument of the bandmate with the last name of \"Heilo\" from the instruments and Band tables.", "metadata": {}}
{"_id": "gpt3_2716", "text": "\nThis query will return a list of all the names from the GENRE table.", "metadata": {}}
{"_id": "gpt3_2717", "text": "\nThis query will select the name of all genres from a database.", "metadata": {}}
{"_id": "gpt3_2718", "text": "\nThis query will return the names of all genres in the GENRE table.", "metadata": {}}
{"_id": "gpt3_2719", "text": "\nThis query will return a list of all the genre names from the GENRE table.", "metadata": {}}
{"_id": "gpt3_2720", "text": "\nThis query returns the names of all the genres in the GENRE table.", "metadata": {}}
{"_id": "gpt3_2721", "text": "\nThis query will select the Nationality and Age columns from the journalist table.", "metadata": {}}
{"_id": "gpt3_2722", "text": "\nThis SQL statement selects the Nationality and Age columns from the journalist table.", "metadata": {}}
{"_id": "gpt3_2723", "text": "\nThis query will select the Nationality and Age columns from the journalist table.", "metadata": {}}
{"_id": "gpt3_2724", "text": "\nThis query selects the Nationality and Age columns from the journalist table.", "metadata": {}}
{"_id": "gpt3_2725", "text": "\nThis query selects the nationality and age of journalists from a database.", "metadata": {}}
{"_id": "gpt3_2726", "text": "\nThis query will return the number of books published by each publisher in the book club.", "metadata": {}}
{"_id": "gpt3_2727", "text": "\nThis query will return a list of publishers and the number of books they have published in the book club.", "metadata": {}}
{"_id": "gpt3_2728", "text": "\nThis query will return a list of publishers and the number of books associated with each publisher from the book_club table.", "metadata": {}}
{"_id": "gpt3_2729", "text": "\nThis query will return a list of publishers and the total number of books they have in the book club.", "metadata": {}}
{"_id": "gpt3_2730", "text": "\nThis query returns the number of books published by each publisher in the book club.", "metadata": {}}
{"_id": "gpt3_2731", "text": "\nThis query will return the total number of domestic passengers that have flown through all airports in London.", "metadata": {}}
{"_id": "gpt3_2732", "text": "\nThis query will return the sum of all domestic passengers from all airports in London.", "metadata": {}}
{"_id": "gpt3_2733", "text": "\nThis query will return the total number of domestic passengers who flew from airports in London.", "metadata": {}}
{"_id": "gpt3_2734", "text": "\nThis query will return the total number of domestic passengers who have flown through London airports.", "metadata": {}}
{"_id": "gpt3_2735", "text": "\nThis query will return the sum of all domestic passengers who flew from airports with \"London\" in the name.", "metadata": {}}
{"_id": "gpt3_2736", "text": "\nThis query returns the campus from the campuses table (T1) that have an enrollment in 1956 of more than 400 students and more than 200 full-time equivalent students.", "metadata": {}}
{"_id": "gpt3_2737", "text": "\nThis query will select the campuses from the campuses table (T1) that have enrollments in 1956 with a total enrollment AY greater than 400 and a FTE AY greater than 200.", "metadata": {}}
{"_id": "gpt3_2738", "text": "\nThis query will select the campus from the campuses table (t1) that have an enrollment of more than 400 total students and more than 200 full-time students in the year 1956.", "metadata": {}}
{"_id": "gpt3_2739", "text": "\nThis query will select the campus from the campuses table (T1) that have enrollments in the year 1956 with total enrollment of more than 400 and FTE of more than 200 in the enrollments table (T2).", "metadata": {}}
{"_id": "gpt3_2740", "text": "\nThis query will select the campus from the campuses table (t1) that has an enrollment in the year 1956 with a total enrollment of more than 400 and an FTE of more than 200.", "metadata": {}}
{"_id": "gpt3_2741", "text": "\nThis query selects the state/province/county from the Addresses table for staff members who have 2-4 addresses in the same state/province/county.", "metadata": {}}
{"_id": "gpt3_2742", "text": "\nThis query selects the state_province_county from the Addresses table for staff whose address_id is between 2 and 4. It groups the results by state_province_county and counts the number of staff with that address", "metadata": {}}
{"_id": "gpt3_2743", "text": "\nThis query selects the state/province/county from the Addresses table for staff members whose address IDs match, and groups the results by state/province/county, only returning results with 2 to 4 staff members.", "metadata": {}}
{"_id": "gpt3_2744", "text": "\nThis query selects the state/province/county from the Addresses table for staff members whose address is found in both the Addresses and Staff tables, and groups the results by state/province/county, displaying only those that", "metadata": {}}
{"_id": "gpt3_2745", "text": "\nThis query selects the state, province, or county from the Addresses table for staff members whose address IDs match between the Addresses and Staff tables, and groups them together based on the state, province, or county. It then filters the results", "metadata": {}}
{"_id": "gpt3_2746", "text": "\nThis query will select the leader name and the location of the college from a college table.", "metadata": {}}
{"_id": "gpt3_2747", "text": "\nThis query will select the leader name and college location from the college table.", "metadata": {}}
{"_id": "gpt3_2748", "text": "\nThis SQL query will return the leader name and college location from the college table.", "metadata": {}}
{"_id": "gpt3_2749", "text": "\nThis SQL statement selects the Leader_Name and College_Location from the college table.", "metadata": {}}
{"_id": "gpt3_2750", "text": "\nThis query will return the leader name and college location from the college table.", "metadata": {}}
{"_id": "gpt3_2751", "text": "\nThis query counts the number of departments that are not part of the management team.", "metadata": {}}
{"_id": "gpt3_2752", "text": "\nThis query returns the number of departments that are not in the management table.", "metadata": {}}
{"_id": "gpt3_2753", "text": "\nThis query will return the count of departments that are not in the management table.", "metadata": {}}
{"_id": "gpt3_2754", "text": "\nThis statement returns the count of all departments that are not in the management table.", "metadata": {}}
{"_id": "gpt3_2755", "text": "\nThis query returns the count of departments that are not part of the management table.", "metadata": {}}
{"_id": "gpt3_2756", "text": "\nThis query will count the number of complaints with a complaint type code of \"Product Failure\" for each complaint status code.", "metadata": {}}
{"_id": "gpt3_2757", "text": "\nThis query will count the number of complaints with a complaint type code of \"Product Failure\" for each complaint status code.", "metadata": {}}
{"_id": "gpt3_2758", "text": "\nThis query will return the number of complaints with a complaint type code of \"Product Failure\" grouped by complaint status code.", "metadata": {}}
{"_id": "gpt3_2759", "text": "\nThis query will return the number of complaints with a complaint type code of \"Product Failure\" for each complaint status code.", "metadata": {}}
{"_id": "gpt3_2760", "text": "\nThis query will return the number of complaints with a complaint type code of \"Product Failure\" for each complaint status code.", "metadata": {}}
{"_id": "gpt3_2761", "text": "\nThis query will return the name of the wine with the highest score from the WINE table, in order.", "metadata": {}}
{"_id": "gpt3_2762", "text": "\nThis query returns the name of the wine with the highest score from the WINE table.", "metadata": {}}
{"_id": "gpt3_2763", "text": "\nThis query will return the name of the wine with the highest score from the table WINE.", "metadata": {}}
{"_id": "gpt3_2764", "text": "\nThis query will return the name of the wine with the highest score from the WINE table.", "metadata": {}}
{"_id": "gpt3_2765", "text": "\nThis query selects the name of the wine with the highest score from the WINE table, limited to only one result.", "metadata": {}}
{"_id": "gpt3_2766", "text": "\nThis query will return the role name and role description for the role with the code \"MG\".", "metadata": {}}
{"_id": "gpt3_2767", "text": "\nThe query will return the role name and role description associated with the role code \"MG\".", "metadata": {}}
{"_id": "gpt3_2768", "text": "\nThis query will return the role name and description for the role with the code \"MG\".", "metadata": {}}
{"_id": "gpt3_2769", "text": "\nThis query will return the role name and description of the role with the code \"MG\".", "metadata": {}}
{"_id": "gpt3_2770", "text": "\nThis query will return the role name and role description for the role with the code \"MG\".", "metadata": {}}
{"_id": "gpt3_2771", "text": "\nThis query will return the average and total student capacity for dorms with gender 'X'.", "metadata": {}}
{"_id": "gpt3_2772", "text": "\nThis query would return the average student capacity and the total student capacity of all dorms designated for gender X.", "metadata": {}}
{"_id": "gpt3_2773", "text": "\nThis query will return the average and sum of student capacity for all dorms with a gender of 'X'.", "metadata": {}}
{"_id": "gpt3_2774", "text": "\nThis query will return the average and total student capacity for dorms with gender 'X'.", "metadata": {}}
{"_id": "gpt3_2775", "text": "\nThis query would return the average and sum of student capacity in dorms where the gender is 'X'.", "metadata": {}}
{"_id": "gpt3_2776", "text": "\nThis query will return the minimum, maximum, and average market value of a company.", "metadata": {}}
{"_id": "gpt3_2777", "text": "\nThis query will select the minimum, maximum, and average market value from a company table.", "metadata": {}}
{"_id": "gpt3_2778", "text": "\nThis query returns the minimum, maximum, and average market values for a company from a given table.", "metadata": {}}
{"_id": "gpt3_2779", "text": "\nThis query returns the minimum, maximum, and average market values of a company.", "metadata": {}}
{"_id": "gpt3_2780", "text": "\nThis query will return the minimum, maximum, and average market values for a company.", "metadata": {}}
{"_id": "gpt3_2781", "text": "\nThis query counts the number of products for each manufacturer and displays the manufacturer's name.", "metadata": {}}
{"_id": "gpt3_2782", "text": "\nThis query will return the count of products for each manufacturer and the name of that manufacturer.", "metadata": {}}
{"_id": "gpt3_2783", "text": "\nThis query counts the number of products associated with each manufacturer and groups the results by manufacturer name.", "metadata": {}}
{"_id": "gpt3_2784", "text": "\nThis query returns the number of products for each manufacturer, grouped by manufacturer name.", "metadata": {}}
{"_id": "gpt3_2785", "text": "\nThis query counts the number of products for each manufacturer and returns the manufacturer's name.", "metadata": {}}
{"_id": "gpt3_2786", "text": "\nThis query will return a list of distinct years that Eliot Spitzer served as Governor.", "metadata": {}}
{"_id": "gpt3_2787", "text": "\nThis query will return a list of all the years in which Eliot Spitzer was the governor of the party.", "metadata": {}}
{"_id": "gpt3_2788", "text": "\nThis query will return a list of all the years in which Eliot Spitzer was governor.", "metadata": {}}
{"_id": "gpt3_2789", "text": "\nThis query will return a list of all unique years in which Eliot Spitzer was the governor of a party.", "metadata": {}}
{"_id": "gpt3_2790", "text": "\nThis query will return a list of all the years that Eliot Spitzer was governor.", "metadata": {}}
{"_id": "gpt3_2791", "text": "\nThis query returns the total number of hours per week and total number of games played by students under the age of 20 from the Sportsinfo and Student tables.", "metadata": {}}
{"_id": "gpt3_2792", "text": "\nThe query will return the sum of hours per week and the sum of games played by students aged under 20 from the Sportsinfo and Student tables.", "metadata": {}}
{"_id": "gpt3_2793", "text": "\nThis query returns the total number of hours per week and total number of games played by students under the age of 20 from the Sportsinfo and Student tables.", "metadata": {}}
{"_id": "gpt3_2794", "text": "\nThis query returns the total number of hours spent playing sports and the total number of games played by students aged under 20.", "metadata": {}}
{"_id": "gpt3_2795", "text": "\nThis query will return the total number of hours per week and the total number of games played by students under the age of 20.", "metadata": {}}
{"_id": "gpt3_2796", "text": "\nThis query retrieves the school name, mascot, and IHSAA football class from the school table, joining it with the budget table on the school_id, where the budgeted amount is greater than 6000 or the year is before 2003,", "metadata": {}}
{"_id": "gpt3_2797", "text": "\nThis query will select the school name, mascot, and IHSAA Football Class from the school table (T1) and join it with the budget table (T2) based on the school_id. It will then filter the results to", "metadata": {}}
{"_id": "gpt3_2798", "text": "\nThis query will select the school name, mascot, and IHSAA Football Class from the school table, and join it with the budget table to get the budgeted amount and year. It will then filter the results to those with a budgeted", "metadata": {}}
{"_id": "gpt3_2799", "text": "\nThis query selects the school name, mascot, and IHSAA football class from the school table, and joins it with the budget table, filtering for schools with a budget greater than 6000 or a year before 2003. The results are ordered by total", "metadata": {}}
{"_id": "gpt3_2800", "text": "\nThis query will select the school name, mascot and IHSAA football class from the school table, joined with the budget table, where the budgeted amount is greater than 6000 or the year is less than 2003, and order the results by the", "metadata": {}}
{"_id": "gpt3_2801", "text": "\nThis statement will select the organisation details from the Organisations table, as well as the organisation type from the Organisation Types table, for organisations with a type description of 'Sponsor' and order the results by the organisation details.", "metadata": {}}
{"_id": "gpt3_2802", "text": "\nThis query will select the organisation details from the Organisations table and join it with the organisation_Types table on the organisation_type column. It will then filter out any results where the organisation_type_description is equal to 'Sponsor'", "metadata": {}}
{"_id": "gpt3_2803", "text": "\nThis query will select all organisation details from the Organisations table that have an organisation type of 'Sponsor' from the organisation_Types table, and will order the results by organisation details.", "metadata": {}}
{"_id": "gpt3_2804", "text": "\nThis query returns a list of organisations that are classified as 'Sponsor' types, ordered alphabetically by organisation details.", "metadata": {}}
{"_id": "gpt3_2805", "text": "\nThis query will select all organisation details from the Organisations table that are of type 'Sponsor' from the organisation_Types table and order the results by organisation_details.", "metadata": {}}
{"_id": "gpt3_2806", "text": "\nThis query selects all facility codes from the Apartment_Facilities table for apartments that have more than four bedrooms in the Apartments table.", "metadata": {}}
{"_id": "gpt3_2807", "text": "\nThis query selects the facility codes from the Apartment_Facilities table for all apartments with more than 4 bedrooms.", "metadata": {}}
{"_id": "gpt3_2808", "text": "\nThis SQL statement will select the facility code from the Apartment_Facilities table for all apartments with more than four bedrooms.", "metadata": {}}
{"_id": "gpt3_2809", "text": "\nThis query will select the facility codes from the Apartment_Facilities table for all apartments with more than four bedrooms.", "metadata": {}}
{"_id": "gpt3_2810", "text": "\nThis query selects the facility code from the Apartment_Facilities table for all apartments with more than four bedrooms.", "metadata": {}}
{"_id": "gpt3_2811", "text": "\nThis query will select the GDP and Regional Population of each Host City that has more than one city hosting an event.", "metadata": {}}
{"_id": "gpt3_2812", "text": "\nThis query selects the GDP and regional population of cities that have hosted more than one event. It does so by joining the city and hosting city tables and grouping by the host city, and then selecting only those cities that have hosted more than one event", "metadata": {}}
{"_id": "gpt3_2813", "text": "\nThis query selects the GDP and regional population of all cities that have hosted more than one event from the city and hosting_city tables, grouped by the host city.", "metadata": {}}
{"_id": "gpt3_2814", "text": "\nThis query returns the GDP and regional population of cities that have hosted more than one event.", "metadata": {}}
{"_id": "gpt3_2815", "text": "\nThis query is used to select the GDP and Regional Population of cities hosting more than one event. It joins the city and hosting_city tables on city_id, and groups the results by Host_City, having a count of more than one", "metadata": {}}
{"_id": "gpt3_2816", "text": "\nThis query returns the flag that appears the most in the ship table, ordered by count in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_2817", "text": "\nThis query will select the flag with the highest count from the ship table and display it as the result.", "metadata": {}}
{"_id": "gpt3_2818", "text": "\nThis query selects the most common flag from the ship table, ordering the results by the number of occurrences in descending order and limiting the results to the first row.", "metadata": {}}
{"_id": "gpt3_2819", "text": "\nThis query will return the most common flag from the \"ship\" table, sorted by count in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_2820", "text": "\nThis query is used to find the most common flag among ships in a table. It returns the flag with the highest count, ordered in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_2821", "text": "\nThis query selects the department name from the course and department tables where the course description contains the word \"Statistics\".", "metadata": {}}
{"_id": "gpt3_2822", "text": "\nThis query selects the department name from the course and department tables where the course description contains the word 'Statistics'.", "metadata": {}}
{"_id": "gpt3_2823", "text": "\nThis query selects the name of the department associated with any course that has a description containing the word \"Statistics\".", "metadata": {}}
{"_id": "gpt3_2824", "text": "\nThis query selects the department name from the course and department tables where the course description contains the word \"Statistics\".", "metadata": {}}
{"_id": "gpt3_2825", "text": "\nThis query retrieves the department name from the department table for any course with a description containing the word \"Statistics\".", "metadata": {}}
{"_id": "gpt3_2826", "text": "\nThis query will return the date of birth for all customers who have a customer status code of 'Good Customer'.", "metadata": {}}
{"_id": "gpt3_2827", "text": "\nThis query will return the date of birth of all customers with a customer status code of 'Good Customer'.", "metadata": {}}
{"_id": "gpt3_2828", "text": "\nThis query will return the date of birth of all customers with a customer status code of 'Good Customer'.", "metadata": {}}
{"_id": "gpt3_2829", "text": "\nThis query will return the date of birth of all customers with a customer status code of \"Good Customer\".", "metadata": {}}
{"_id": "gpt3_2830", "text": "\nThis query will return the date of birth of all customers who have a customer status code of \"Good Customer\".", "metadata": {}}
{"_id": "gpt3_2831", "text": "\nThe average enrollment of universities founded before 1850 is approximately 1,828 students.", "metadata": {}}
{"_id": "gpt3_2832", "text": "\nThe average enrollment of universities founded before 1850 is approximately 4,077 students.", "metadata": {}}
{"_id": "gpt3_2833", "text": "\nThe average enrollment for universities founded before 1850 is approximately 872 students.", "metadata": {}}
{"_id": "gpt3_2834", "text": "\nThis query would return the average enrollment of all universities founded before 1850.", "metadata": {}}
{"_id": "gpt3_2835", "text": "\nThe average enrollment for universities founded before 1850 is approximately 4,873 students.", "metadata": {}}
{"_id": "gpt3_2836", "text": "\nThis query will return a list of delegates and the committees they are on from an election.", "metadata": {}}
{"_id": "gpt3_2837", "text": "\nThis query will return a list of delegates and the committees they are assigned to from an election.", "metadata": {}}
{"_id": "gpt3_2838", "text": "\nThis SQL statement will return a list of delegates and the committees they are assigned to from the election table.", "metadata": {}}
{"_id": "gpt3_2839", "text": "\nThis query will select the delegate and committee from the election table.", "metadata": {}}
{"_id": "gpt3_2840", "text": "\nThis query will return the Delegate and Committee columns from the election table.", "metadata": {}}
{"_id": "gpt3_2841", "text": "\nThis query will select the title of all films that have a rating of 'R'.", "metadata": {}}
{"_id": "gpt3_2842", "text": "\nThis query will return all films with a rating of 'R' from the film table.", "metadata": {}}
{"_id": "gpt3_2843", "text": "\nThis query will return the titles of all films with a rating of 'R' from the film table.", "metadata": {}}
{"_id": "gpt3_2844", "text": "\nThis query will return the titles of all films with a rating of R from the film table.", "metadata": {}}
{"_id": "gpt3_2845", "text": "\nThis query will return the title of all films with a rating of 'R'.", "metadata": {}}
{"_id": "gpt3_2846", "text": "\nThis query returns the city code with the highest count of students from the STUDENT table.", "metadata": {}}
{"_id": "gpt3_2847", "text": "\nThis query will select the city code with the highest count of students and return the top result.", "metadata": {}}
{"_id": "gpt3_2848", "text": "\nThis query will select the city code with the most students from the STUDENT table, ordered by count in descending order, and limit the result to one record.", "metadata": {}}
{"_id": "gpt3_2849", "text": "\nThis query selects the city code with the highest number of students from the STUDENT table and orders them by count in descending order, limiting the result to the top city code.", "metadata": {}}
{"_id": "gpt3_2850", "text": "\nThis query will return the city code with the highest number of students, sorted by descending order.", "metadata": {}}
{"_id": "gpt3_2851", "text": "\nThis query will calculate the average number of followers for users who do not have any tweets.", "metadata": {}}
{"_id": "gpt3_2852", "text": "\nThis query will return the average number of followers of all users who do not have any tweets.", "metadata": {}}
{"_id": "gpt3_2853", "text": "\nThis query will return the average number of followers of all user profiles that are not associated with any tweets.", "metadata": {}}
{"_id": "gpt3_2854", "text": "\nThis query will return the average number of followers from user profiles that are not associated with any tweets.", "metadata": {}}
{"_id": "gpt3_2855", "text": "\nThis query will return the average number of followers of users who do not have any tweets.", "metadata": {}}
{"_id": "gpt3_2856", "text": "\nThe query will return the Other_Details column from the LOCATIONS table for the row with the Location_Name \"UK Gallery\".", "metadata": {}}
{"_id": "gpt3_2857", "text": "\nThe query will return all other details associated with the UK Gallery location.", "metadata": {}}
{"_id": "gpt3_2858", "text": "\nThe query will return all other details associated with the location \"UK Gallery\".", "metadata": {}}
{"_id": "gpt3_2859", "text": "\nThe query will return the Other_Details column from the LOCATIONS table where the Location_Name is \"UK Gallery\".", "metadata": {}}
{"_id": "gpt3_2860", "text": "\nThe query will return the other details associated with the location named \"UK Gallery\".", "metadata": {}}
{"_id": "gpt3_2861", "text": "\nThis query will select the first and last names of faculty members who are members of department 520.", "metadata": {}}
{"_id": "gpt3_2862", "text": "\nThis query selects the first and last names of faculty members who are part of department 520.", "metadata": {}}
{"_id": "gpt3_2863", "text": "\nThis query selects the first and last name of faculty members who are members of department 520.", "metadata": {}}
{"_id": "gpt3_2864", "text": "\nThis query selects the first and last names of faculty members who are members of department 520.", "metadata": {}}
{"_id": "gpt3_2865", "text": "\nThis query will select the first and last names of faculty members who are members of Department 520.", "metadata": {}}
{"_id": "gpt3_2866", "text": "\nThis query selects the Delegate and Party from the election and party tables based on the matching Party_ID.", "metadata": {}}
{"_id": "gpt3_2867", "text": "\nThis query will select the delegate and party from the election and party tables, respectively, based on the matching party ID from each table.", "metadata": {}}
{"_id": "gpt3_2868", "text": "\nThis query selects the Delegate and Party from the election and party tables, based on a matching Party ID.", "metadata": {}}
{"_id": "gpt3_2869", "text": "\nThis query selects the delegate and party from the election and party tables based on the matching Party_ID values.", "metadata": {}}
{"_id": "gpt3_2870", "text": "\nThis query returns a list of delegates and their respective parties from the election and party tables.", "metadata": {}}
{"_id": "gpt3_2871", "text": "\nThis query will return the number of participants who are organizers in the participants table.", "metadata": {}}
{"_id": "gpt3_2872", "text": "\nThis query counts the number of participants who have a participant type code of 'Organizer'.", "metadata": {}}
{"_id": "gpt3_2873", "text": "\nThis query counts the number of participants with a participant type code of 'Organizer'.", "metadata": {}}
{"_id": "gpt3_2874", "text": "\nThis query returns the total number of participants with a participant_type_code of 'Organizer'.", "metadata": {}}
{"_id": "gpt3_2875", "text": "\nThis query will return the number of participants who have a participant type code of 'Organizer'.", "metadata": {}}
{"_id": "gpt3_2876", "text": "\nThis query would return the number of films in the film table whose title includes the word \"Dummy\".", "metadata": {}}
{"_id": "gpt3_2877", "text": "\nThis query will count the number of films in the film table with a title that contains the word \"Dummy\".", "metadata": {}}
{"_id": "gpt3_2878", "text": "\nThis query will count the number of films whose title contains the word \"Dummy\".", "metadata": {}}
{"_id": "gpt3_2879", "text": "\nThis query will return the number of films in the database with the word \"Dummy\" in the title.", "metadata": {}}
{"_id": "gpt3_2880", "text": "\nThis query counts the number of films in the film table that have the word \"Dummy\" in the title.", "metadata": {}}
{"_id": "gpt3_2881", "text": "\nThis query returns a list of tourist attractions visited by Alison but not visited by Rosalind.", "metadata": {}}
{"_id": "gpt3_2882", "text": "\nThis query will select all the names of tourist attractions visited by Alison, but not by Rosalind.", "metadata": {}}
{"_id": "gpt3_2883", "text": "\nThis query returns the names of the tourist attractions that Alison has visited, but Rosalind has not.", "metadata": {}}
{"_id": "gpt3_2884", "text": "\nThis query returns the names of all tourist attractions visited by Alison, but not visited by Rosalind.", "metadata": {}}
{"_id": "gpt3_2885", "text": "\nThis query returns the names of tourist attractions visited by Alison but not by Rosalind.", "metadata": {}}
{"_id": "gpt3_2886", "text": "\nThis query would return all employees from the employees table who have a department_id value of \"null\".", "metadata": {}}
{"_id": "gpt3_2887", "text": "\nThe query will return no results, as it is impossible to have a department_id of \"null\".", "metadata": {}}
{"_id": "gpt3_2888", "text": "\nThis query would return no results, as there is no department with an ID of \"null\".", "metadata": {}}
{"_id": "gpt3_2889", "text": "\nThis query would return no results, as the value for the department_id column cannot be null.", "metadata": {}}
{"_id": "gpt3_2890", "text": "\nThis query will return all employees whose department_id is null.", "metadata": {}}
{"_id": "gpt3_2891", "text": "\nThis query returns the total count of parks located in the city of Atlanta.", "metadata": {}}
{"_id": "gpt3_2892", "text": "\nThis query will count the number of parks in the city of Atlanta.", "metadata": {}}
{"_id": "gpt3_2893", "text": "\nThis query counts the number of parks located in the city of Atlanta.", "metadata": {}}
{"_id": "gpt3_2894", "text": "\nThis query returns the number of parks in Atlanta.", "metadata": {}}
{"_id": "gpt3_2895", "text": "\nThis query will return the number of parks located in the city of Atlanta.", "metadata": {}}
{"_id": "gpt3_2896", "text": "\nThis query selects the first name (fname) and age of students who do not live in a dorm with a TV Lounge amenity.", "metadata": {}}
{"_id": "gpt3_2897", "text": "\nThis query will select the first name and age of all students who do not live in dorms with a TV Lounge amenity.", "metadata": {}}
{"_id": "gpt3_2898", "text": "\nThis query will select the first name and age of students who do not live in a dorm with a TV Lounge amenity.", "metadata": {}}
{"_id": "gpt3_2899", "text": "\nThis query selects the first name and age of students who do not live in a dorm that has a TV Lounge amenity.", "metadata": {}}
{"_id": "gpt3_2900", "text": "\nThis query selects the first name and age of all students who do not live in a dormitory with a TV lounge.", "metadata": {}}
{"_id": "gpt3_2901", "text": "\nThis statement will select the name of all reviewers from the Reviewer table who have given a rating of more than 3 stars in the Rating table.", "metadata": {}}
{"_id": "gpt3_2902", "text": "\nThis SQL query will select the names of all reviewers who have given ratings of 3 stars or more.", "metadata": {}}
{"_id": "gpt3_2903", "text": "\nThis query returns the name of each reviewer who has given a rating of 3 stars or higher.", "metadata": {}}
{"_id": "gpt3_2904", "text": "\nThis query will select the name of any reviewer who has given a rating with more than 3 stars.", "metadata": {}}
{"_id": "gpt3_2905", "text": "\nThis query selects the name of all reviewers who have given a rating of more than 3 stars.", "metadata": {}}
{"_id": "gpt3_2906", "text": "\nThis query will return the date that Janessa Sawayn joined the staff.", "metadata": {}}
{"_id": "gpt3_2907", "text": "\nThis statement will select the date that Janessa Sawayn joined the staff from the Staff table.", "metadata": {}}
{"_id": "gpt3_2908", "text": "\nThis query will return the date that Janessa Sawayn joined the staff.", "metadata": {}}
{"_id": "gpt3_2909", "text": "\nThis statement retrieves the date Janessa Sawayn joined the staff from the Staff table.", "metadata": {}}
{"_id": "gpt3_2910", "text": "\nThis statement will select the date that Janessa Sawayn joined the staff from the Staff table.", "metadata": {}}
{"_id": "gpt3_2911", "text": "\nThis query returns the distinct names and ages of people who are friends with either Dan or Alice.", "metadata": {}}
{"_id": "gpt3_2912", "text": "\nThis query selects the distinct name and age of all people who are friends with either Dan or Alice.", "metadata": {}}
{"_id": "gpt3_2913", "text": "\nThis query selects the distinct names and ages of people who are friends with either Dan or Alice from the Person and PersonFriend tables.", "metadata": {}}
{"_id": "gpt3_2914", "text": "\nThis query will retrieve the names and ages of all people who are friends with either Dan or Alice.", "metadata": {}}
{"_id": "gpt3_2915", "text": "\nThis query selects the distinct name and age of all people who are friends with either Dan or Alice from the Person and PersonFriend tables.", "metadata": {}}
{"_id": "gpt3_2916", "text": "\nThis query will return the name of the bank with the highest total loan amount. It does this by joining the bank and loan tables on the branch_id column, grouping by the bank name, and ordering the results by the sum of the loan", "metadata": {}}
{"_id": "gpt3_2917", "text": "\nThis query retrieves the name of the bank with the highest total loan amount from the bank and loan tables. It does this by joining the bank and loan tables on the branch_id column, then grouping by the bank name, summing the", "metadata": {}}
{"_id": "gpt3_2918", "text": "\nThis query finds the bank name with the highest total loan amount. It does this by joining the bank and loan tables on the branch_id, grouping the results by bank name, and ordering the results by the sum of the loan amounts, in", "metadata": {}}
{"_id": "gpt3_2919", "text": "\nThis query selects the branch name of the bank that has the highest total loan amount from the bank and loan tables. The query groups the results by branch name and orders them by the sum of the loan amounts in descending order, and then limits the", "metadata": {}}
{"_id": "gpt3_2920", "text": "\nThis query selects the name of the bank with the highest sum of loan amounts from the bank and loan tables, ordered in descending order, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_2921", "text": "\nThis query returns the names of customers who have not purchased a Latte.", "metadata": {}}
{"_id": "gpt3_2922", "text": "\nThis query selects all customer names from the customers table who have not purchased a Latte.", "metadata": {}}
{"_id": "gpt3_2923", "text": "\nThis statement will select all customer names from the customers table that do not have an order for a product with the details 'Latte'.", "metadata": {}}
{"_id": "gpt3_2924", "text": "\nThis query will return a list of customer names from the customers table that have not made an order for a product with the details 'Latte'.", "metadata": {}}
{"_id": "gpt3_2925", "text": "\nThis query will select the customer names from the customers table that have not ordered a Latte.", "metadata": {}}
{"_id": "gpt3_2926", "text": "\nThis query finds the average height of all players who attended Yale University.", "metadata": {}}
{"_id": "gpt3_2927", "text": "\nThis query returns the average height of players who attended Yale University.", "metadata": {}}
{"_id": "gpt3_2928", "text": "\nThis query will calculate the average height of players who attended Yale University.", "metadata": {}}
{"_id": "gpt3_2929", "text": "\nThis query returns the average height of all players who attended Yale University.", "metadata": {}}
{"_id": "gpt3_2930", "text": "\nThis query calculates the average height of players who attended Yale University.", "metadata": {}}
{"_id": "gpt3_2931", "text": "\nThis query selects the problem_id of all problems reported after the most recently reported problem by staff member Rylan Homenick.", "metadata": {}}
{"_id": "gpt3_2932", "text": "\nThis query selects the problem_id from the problems table for all problems that were reported after the most recently reported problem by a staff member named Rylan Homenick.", "metadata": {}}
{"_id": "gpt3_2933", "text": "\nThis query selects all problem IDs from the 'problems' table that were reported by a staff member after the most recently reported problem by a staff member with the first name \"Rylan\" and the last name \"Homenick\".", "metadata": {}}
{"_id": "gpt3_2934", "text": "\nThis query selects the problem_id from the problems table for all problems reported by any staff member after the most recent problem reported by staff member Rylan Homenick.", "metadata": {}}
{"_id": "gpt3_2935", "text": "\nThis query selects the problem_id of all problems reported by any staff member after the most recent problem reported by staff member Rylan Homenick.", "metadata": {}}
{"_id": "gpt3_2936", "text": "\nThis query will return the names of all camera lenses from the brands Sigma and Olympus that have been used to take photos.", "metadata": {}}
{"_id": "gpt3_2937", "text": "\nThis query will return the names of all camera lenses from either the Sigma or Olympus brands that have been used to take photos.", "metadata": {}}
{"_id": "gpt3_2938", "text": "\nThis query will return the names of all Sigma and Olympus camera lenses that have been used to take photos.", "metadata": {}}
{"_id": "gpt3_2939", "text": "\nThis query will select the name of all camera lenses from the camera_lens table, where the brand is either Sigma or Olympus, that have been used to take photos in the photos table.", "metadata": {}}
{"_id": "gpt3_2940", "text": "\nThis query will return the names of all camera lenses from either the Sigma or Olympus brands that are associated with photos in the photos table.", "metadata": {}}
{"_id": "gpt3_2941", "text": "\nThis query will count the number of unique delegates in the election table who reside in counties with populations greater than 50,000.", "metadata": {}}
{"_id": "gpt3_2942", "text": "\nThis query returns the number of distinct delegates from counties with populations greater than 50,000.", "metadata": {}}
{"_id": "gpt3_2943", "text": "\nThis query will return the number of unique delegates in counties with a population greater than 50,000.", "metadata": {}}
{"_id": "gpt3_2944", "text": "\nThis query will return the number of unique delegates from counties with a population greater than 50,000.", "metadata": {}}
{"_id": "gpt3_2945", "text": "\nThis query will count the number of unique delegates from districts with a population greater than 50,000.", "metadata": {}}
{"_id": "gpt3_2946", "text": "\nThis statement retrieves the location code and location name from the Ref_locations table.", "metadata": {}}
{"_id": "gpt3_2947", "text": "\nThis query retrieves the location code and location name from the Ref_locations table.", "metadata": {}}
{"_id": "gpt3_2948", "text": "\nThis query retrieves the location code and name from the Ref_locations table.", "metadata": {}}
{"_id": "gpt3_2949", "text": "\nThis query selects the location code and location name from the Ref_locations table.", "metadata": {}}
{"_id": "gpt3_2950", "text": "\nThis query will return the location code and location name from the Ref_locations table.", "metadata": {}}
{"_id": "gpt3_2951", "text": "\nThis query returns the first name and last name of the actor with the most appearances in the actor table, ordered by the number of appearances in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_2952", "text": "\nThis query will select the first name and last name of an actor from the actor table and group the results by first name and last name, then order them by the count in descending order and limit the results to one. This will return the actor", "metadata": {}}
{"_id": "gpt3_2953", "text": "\nThis query selects the first and last name of an actor from a group of actors, sorted by the number of occurrences in descending order, and limits the results to one row.", "metadata": {}}
{"_id": "gpt3_2954", "text": "\nThis query selects the first and last name of an actor and groups them together, then orders them by the count of records before limiting the results to the first record. This query will return the actor with the highest count of records.", "metadata": {}}
{"_id": "gpt3_2955", "text": "\nThis query selects the first and last name of the actor who has been in the most films, ordering them by the number of films they have been in and limiting the results to one.", "metadata": {}}
{"_id": "gpt3_2956", "text": "\nThis query returns the organization name with the most associated organization contact individuals.", "metadata": {}}
{"_id": "gpt3_2957", "text": "\nThis query selects the organization name with the most contact individuals associated with it, by joining the organizations and organization_contact_individuals tables, grouping by organization name, and ordering by a count of the contact individuals associated with each organization. The query", "metadata": {}}
{"_id": "gpt3_2958", "text": "\nThis query will select the organization name from the organizations table (t1) that has the most associated contacts in the organization_contact_individuals table (t2). The query will group the results by organization name and order them by the count", "metadata": {}}
{"_id": "gpt3_2959", "text": "\nThis query selects the organization name from the organizations table (t1) that has the most associated organization contact individuals (t2) and orders them by count in descending order. The result is limited to the top one.", "metadata": {}}
{"_id": "gpt3_2960", "text": "\nThis query selects the organization name with the most contacts from the organizations and organization_contact_individuals tables and orders the results in descending order. The result is limited to the top one organization name.", "metadata": {}}
{"_id": "gpt3_2961", "text": "\nThis query will select the city from the airports table and group the results by city, having more than 2 airports in the city, and order them by the number of airports in each city.", "metadata": {}}
{"_id": "gpt3_2962", "text": "\nThis query returns the cities from the airports table that have more than two airports, in order of the number of airports in each city.", "metadata": {}}
{"_id": "gpt3_2963", "text": "\nThis query returns a list of cities from the airports table that have more than two airports, and orders the list according to the number of airports in each city.", "metadata": {}}
{"_id": "gpt3_2964", "text": "\nThis query selects all cities from the airports table that have more than two airports and orders them by the number of airports in each city.", "metadata": {}}
{"_id": "gpt3_2965", "text": "\nThis SQL query will select all cities from the airports table that have more than two airports, and order them by the number of airports in each city.", "metadata": {}}
{"_id": "gpt3_2966", "text": "\nThis query will return the problem_log_id and problem_id of the first record in the problem_log table, sorted by log_entry_date.", "metadata": {}}
{"_id": "gpt3_2967", "text": "\nThis query will return the problem_log_id and problem_id of the first row in the problem_log table, ordered by log_entry_date.", "metadata": {}}
{"_id": "gpt3_2968", "text": "\nThis query will select the problem_log_id and problem_id from the problem_log table, ordered by log_entry_date, and limited to the first result.", "metadata": {}}
{"_id": "gpt3_2969", "text": "\nThis query will return the problem_log_id and problem_id of the first row in the problem_log table, sorted by the log_entry_date in ascending order.", "metadata": {}}
{"_id": "gpt3_2970", "text": "\nThis query will select the problem_log_id and problem_id from the problem_log table, ordered by log_entry_date, and limited to the first result.", "metadata": {}}
{"_id": "gpt3_2971", "text": "\nThis SQL query selects the bed type and the average base price of each bed type from the Rooms table, and then groups the results by bed type.", "metadata": {}}
{"_id": "gpt3_2972", "text": "\nThis SQL query will return the average base price for each type of bed in the Rooms table. It will group the results by bed type and return the average base price for each type.", "metadata": {}}
{"_id": "gpt3_2973", "text": "\nThis SQL query finds the average base price for each bed type in the Rooms table.", "metadata": {}}
{"_id": "gpt3_2974", "text": "\nThis SQL query selects the bed type and calculates the average base price from the Rooms table, grouping the results by bed type.", "metadata": {}}
{"_id": "gpt3_2975", "text": "\nThis SQL statement is selecting the bed type and the average base price of all the rooms in the Rooms table, and grouping them by bed type.", "metadata": {}}
{"_id": "gpt3_2976", "text": "\nThis query will select the unit of measure and product category code from the ref_product_categories table for the product with the name \"chervil\" from the products table.", "metadata": {}}
{"_id": "gpt3_2977", "text": "\nThis query will select the unit of measure and product category code from the ref_product_categories table for the product \"chervil\" from the products table.", "metadata": {}}
{"_id": "gpt3_2978", "text": "\nThis query retrieves the unit of measure and product category code from the ref_product_categories table for the product \"chervil\" from the products table.", "metadata": {}}
{"_id": "gpt3_2979", "text": "\nThis query will select the unit of measure and product category code from the ref_product_categories table for the product with the name \"chervil\" from the products table.", "metadata": {}}
{"_id": "gpt3_2980", "text": "\nThis query will select the unit of measure and product category code from the ref_product_categories table for the product named \"chervil\" from the products table.", "metadata": {}}
{"_id": "gpt3_2981", "text": "\nThis query returns a count of members from each country in the member table.", "metadata": {}}
{"_id": "gpt3_2982", "text": "\nThis query will return a list of countries and the total number of members from each country.", "metadata": {}}
{"_id": "gpt3_2983", "text": "\nThis query will return a list of countries and the number of members from each country.", "metadata": {}}
{"_id": "gpt3_2984", "text": "\nThis query returns a count of members from each country.", "metadata": {}}
{"_id": "gpt3_2985", "text": "\nThis query counts the number of members from each country.", "metadata": {}}
{"_id": "gpt3_2986", "text": "\nThe above SQL query will return the maximum elevation of any airport in Iceland.", "metadata": {}}
{"_id": "gpt3_2987", "text": "\nThis query will return the maximum elevation of all airports located in Iceland.", "metadata": {}}
{"_id": "gpt3_2988", "text": "\nThis query will return the maximum elevation of all airports in Iceland.", "metadata": {}}
{"_id": "gpt3_2989", "text": "\nThis query returns the maximum elevation of all airports in Iceland.", "metadata": {}}
{"_id": "gpt3_2990", "text": "\nThis query returns the maximum elevation of all airports in Iceland.", "metadata": {}}
{"_id": "gpt3_2991", "text": "\nThis query selects the top three teacher IDs and their associated first names from the Assessment_Notes and Teachers tables, sorted by the number of notes associated with each teacher.", "metadata": {}}
{"_id": "gpt3_2992", "text": "\nThis query selects the teacher_id and first_name of the top 3 teachers with the most Assessment_Notes, grouped by teacher_id and ordered by count in descending order.", "metadata": {}}
{"_id": "gpt3_2993", "text": "\nThis SQL statement selects the top three teacher_id's and corresponding first_names from the Assessment_Notes and Teachers tables, grouped by teacher_id and ordered by the count of entries in the Assessment_Notes table in descending order.", "metadata": {}}
{"_id": "gpt3_2994", "text": "\nThis query retrieves the teacher_id and first_name of the top three teachers with the most assessment notes from the Assessment_Notes and Teachers tables. It does so by joining the two tables on the teacher_id column, grouping by teacher", "metadata": {}}
{"_id": "gpt3_2995", "text": "\nThis query selects the top three teachers with the most assessment notes, as identified by their teacher ID and first name. It does this by joining the Assessment_Notes and Teachers tables on the teacher_id column, grouping the results by teacher_id", "metadata": {}}
{"_id": "gpt3_2996", "text": "\nThis query will return the number of distinct claim outcome codes from the claims processing table.", "metadata": {}}
{"_id": "gpt3_2997", "text": "\nThis query will return the number of different claim outcome codes in the claims_processing table.", "metadata": {}}
{"_id": "gpt3_2998", "text": "\nThis query will return the number of distinct claim outcome codes from the claims_processing table.", "metadata": {}}
{"_id": "gpt3_2999", "text": "\nThis query will return the total number of distinct claim outcome codes in the claims_processing table.", "metadata": {}}
{"_id": "gpt3_3000", "text": "\nThis query will return the number of distinct claim outcome codes in the claims processing table.", "metadata": {}}
{"_id": "gpt3_3001", "text": "\nThis query will count the number of financial transactions for each card type code.", "metadata": {}}
{"_id": "gpt3_3002", "text": "\nThis query will count the number of financial transactions for each card type code in the Customers_cards table.", "metadata": {}}
{"_id": "gpt3_3003", "text": "\nThis query returns the number of financial transactions for each card type code.", "metadata": {}}
{"_id": "gpt3_3004", "text": "\nThis query will return a count of the number of financial transactions for each card type code in the Customers_cards table.", "metadata": {}}
{"_id": "gpt3_3005", "text": "\nThis query will count the number of financial transactions for each card type code in the Customers_cards table.", "metadata": {}}
{"_id": "gpt3_3006", "text": "\nThis query selects the name of the user with the highest average trust score from the useracct and trust tables.", "metadata": {}}
{"_id": "gpt3_3007", "text": "\nThis query selects the name of the user with the highest average trust score, from the useracct and trust tables.", "metadata": {}}
{"_id": "gpt3_3008", "text": "\nThis query selects the name of the user account with the highest average trust score from the useracct and trust tables, ordered in descending order.", "metadata": {}}
{"_id": "gpt3_3009", "text": "\nThis query selects the name of the user with the highest average trust score from the useracct and trust tables, ordered by descending trust score.", "metadata": {}}
{"_id": "gpt3_3010", "text": "\nThis query selects the name of the user with the highest average trust rating from the useracct and trust tables, ordered by the highest average trust rating.", "metadata": {}}
{"_id": "gpt3_3011", "text": "\nThis query returns all locations from the station table that have only one station associated with them.", "metadata": {}}
{"_id": "gpt3_3012", "text": "\nThis query returns the locations of all stations that only have one station in that location.", "metadata": {}}
{"_id": "gpt3_3013", "text": "\nThis query will return all the locations from the station table that only have one record in the table.", "metadata": {}}
{"_id": "gpt3_3014", "text": "\nThis query will return the location of any station that appears only once in the station table.", "metadata": {}}
{"_id": "gpt3_3015", "text": "\nThis query selects the locations of stations that only have one station in that location.", "metadata": {}}
{"_id": "gpt3_3016", "text": "\nThis query will return the names of all channels in a table, ordered by their rating in percent, from highest to lowest.", "metadata": {}}
{"_id": "gpt3_3017", "text": "\nThis query will return a list of all channel names in order of their rating in percent, from highest to lowest.", "metadata": {}}
{"_id": "gpt3_3018", "text": "\nThis query will return a list of names from the channel table, sorted in descending order by rating_in_percent.", "metadata": {}}
{"_id": "gpt3_3019", "text": "\nThis query will return a list of the names of all channels in a database, sorted in descending order by their rating in percent.", "metadata": {}}
{"_id": "gpt3_3020", "text": "\nThis query returns the names of all channels from the database, sorted in descending order based on their rating in percent.", "metadata": {}}
{"_id": "gpt3_3021", "text": "\nThis query will count the number of people who have an age greater than the maximum age of people with the job of engineer.", "metadata": {}}
{"_id": "gpt3_3022", "text": "\nThis query will select the count of all people in the Person table whose age is greater than the maximum age of all people with the job title of 'engineer'.", "metadata": {}}
{"_id": "gpt3_3023", "text": "\nThis query counts the number of people in the Person table who are older than the oldest engineer in the table.", "metadata": {}}
{"_id": "gpt3_3024", "text": "\nThis query returns the total number of people in the Person table whose age is greater than the maximum age of all engineers in the table.", "metadata": {}}
{"_id": "gpt3_3025", "text": "\nThis query will return the number of people who are older than the oldest engineer in the Person table.", "metadata": {}}
{"_id": "gpt3_3026", "text": "\nThis query will return the title of all films with a length greater than 100 minutes or a rating of PG, except for those films with a replacement cost greater than 200.", "metadata": {}}
{"_id": "gpt3_3027", "text": "\nThis query will return a list of titles from the film table where the length is greater than 100 minutes or the rating is PG, except for titles where the replacement cost is greater than 200.", "metadata": {}}
{"_id": "gpt3_3028", "text": "\nThis query returns a list of films with a length greater than 100 minutes or a rating of PG, excluding films with a replacement cost greater than 200.", "metadata": {}}
{"_id": "gpt3_3029", "text": "\nThis query returns the titles of all films that have a length greater than 100 minutes OR a rating of 'PG', except for those films whose replacement cost is greater than 200.", "metadata": {}}
{"_id": "gpt3_3030", "text": "\nThis statement returns the titles of films that are longer than 100 minutes in length or are rated PG, excluding any films with a replacement cost of over 200.", "metadata": {}}
{"_id": "gpt3_3031", "text": "\nThis statement will select the product_name and product_id from the products table where the product_price is between 600 and 700.", "metadata": {}}
{"_id": "gpt3_3032", "text": "\nThis statement will select the product name and product ID from the products table where the product price is between 600 and 700.", "metadata": {}}
{"_id": "gpt3_3033", "text": "\nThis statement will select the product name and product id from the products table where the product price is between 600 and 700.", "metadata": {}}
{"_id": "gpt3_3034", "text": "\nThis statement selects the product name and product ID from the products table where the product price is between 600 and 700.", "metadata": {}}
{"_id": "gpt3_3035", "text": "\nThis query will select the product name and product ID from the products table where the product price is between 600 and 700.", "metadata": {}}
{"_id": "gpt3_3036", "text": "\nThis query returns the names of stations in Palo Alto which have not had more than 100 trips ending at them.", "metadata": {}}
{"_id": "gpt3_3037", "text": "\nThis query will return the names of all stations located in Palo Alto, excluding those that have had more than 100 trips end at them.", "metadata": {}}
{"_id": "gpt3_3038", "text": "\nThis query returns the names of stations in the city of Palo Alto that have not had more than 100 trips ending at them.", "metadata": {}}
{"_id": "gpt3_3039", "text": "\nThis query will return the names of all stations in Palo Alto that have fewer than 100 trips ending at the station.", "metadata": {}}
{"_id": "gpt3_3040", "text": "\nThis query will return the name of the station in Palo Alto that has had fewer than 100 trips ending there.", "metadata": {}}
{"_id": "gpt3_3041", "text": "\nThis query retrieves the location code, start date, and end date from the Document_locations table.", "metadata": {}}
{"_id": "gpt3_3042", "text": "\nThis query retrieves the location code, date in location from, and date in location to from the Document_locations table.", "metadata": {}}
{"_id": "gpt3_3043", "text": "\nThis query returns the location code, date in location from, and date in location to from the Document_locations table.", "metadata": {}}
{"_id": "gpt3_3044", "text": "\nThis query returns the location code, the start date of the location, and the end date of the location from the Document_locations table.", "metadata": {}}
{"_id": "gpt3_3045", "text": "\nThis query returns the location code, start date, and end date of a document's location from the Document_locations table.", "metadata": {}}
{"_id": "gpt3_3046", "text": "\nThis query selects the name of all male persons from the Person table, and orders the results by age.", "metadata": {}}
{"_id": "gpt3_3047", "text": "\nThis query retrieves the names of all male people in the Person table, sorted by age in ascending order.", "metadata": {}}
{"_id": "gpt3_3048", "text": "\nThis SQL statement selects the name of all male persons from the Person table and orders them by age.", "metadata": {}}
{"_id": "gpt3_3049", "text": "\nThis query will return a list of names from the Person table, ordered by age, for all people who have a gender of male.", "metadata": {}}
{"_id": "gpt3_3050", "text": "\nThis query selects the names of all male persons from the Person table and orders them according to their age.", "metadata": {}}
{"_id": "gpt3_3051", "text": "\nThis query will select the product name from the products table where the color code matches the color description of 'yellow' in the ref_colors table.", "metadata": {}}
{"_id": "gpt3_3052", "text": "\nThis SQL query will select the product name from the products table (T1) that have a color code that matches the color code from the ref_colors table (T2) where the color description is 'yellow'.", "metadata": {}}
{"_id": "gpt3_3053", "text": "\nThis query will select the product name from the products table (T1) where the color code matches the color code of the ref_colors table (T2) and the color description is 'yellow'.", "metadata": {}}
{"_id": "gpt3_3054", "text": "\nThis query will select the product name from the products table for all products that have a color code in the ref_colors table that corresponds to a color description of 'yellow'.", "metadata": {}}
{"_id": "gpt3_3055", "text": "\nThis statement selects the product name from the products table (T1) that have a color code that matches the color code from the ref_colors table (T2) where the color description is 'yellow'.", "metadata": {}}
{"_id": "gpt3_3056", "text": "\nThis query will count the number of stations in the city of Mountain View.", "metadata": {}}
{"_id": "gpt3_3057", "text": "\nThis query will count the number of stations located in Mountain View.", "metadata": {}}
{"_id": "gpt3_3058", "text": "\nThis query will count the number of stations in the city of Mountain View.", "metadata": {}}
{"_id": "gpt3_3059", "text": "\nThis query will count the number of stations in the city of Mountain View.", "metadata": {}}
{"_id": "gpt3_3060", "text": "\nThis query will count the number of stations in the city of Mountain View.", "metadata": {}}
{"_id": "gpt3_3061", "text": "\nThis query selects the name of customers who have an account balance above the average in checking and below the average in savings.", "metadata": {}}
{"_id": "gpt3_3062", "text": "\nThis query selects the names of customers who have a checking account balance greater than the average balance of all checking accounts, and a savings account balance lower than the average balance of all savings accounts.", "metadata": {}}
{"_id": "gpt3_3063", "text": "\nThis query selects the name from the accounts table from customers who have checking balances higher than the average balance of all customers in the checking table, and savings balances lower than the average balance of all customers in the savings table.", "metadata": {}}
{"_id": "gpt3_3064", "text": "\nThis query selects the names of customers who have a balance in their checking account greater than the average balance of all customers in the checking account and a balance in their savings account lower than the average balance of all customers in the savings account.", "metadata": {}}
{"_id": "gpt3_3065", "text": "\nThis statement selects the names of customers who have a checking account balance greater than the average checking account balance and a savings account balance less than the average savings account balance.", "metadata": {}}
{"_id": "gpt3_3066", "text": "\nThis query will select the city with the highest number of staff members, along with the count of staff members in that city, from the Addresses and Staff tables. It will group the results by city and order them in descending order, and then", "metadata": {}}
{"_id": "gpt3_3067", "text": "\nThis query selects the city and the count of staff members associated with it, from the Addresses and Staff tables, and orders the results by the count in descending order, then limits the results to the top one.", "metadata": {}}
{"_id": "gpt3_3068", "text": "\nThis query selects the city with the most staff members and counts the number of staff members in that city. It does this by joining the Addresses and Staff tables on the address_id and staff_address_id columns, respectively. The results", "metadata": {}}
{"_id": "gpt3_3069", "text": "\nThis statement selects the city with the highest number of staff members and counts the number of staff members associated with that city. It does this by joining the Addresses and Staff tables on the address_id and staff_address_id columns, grouping", "metadata": {}}
{"_id": "gpt3_3070", "text": "\nThis query will return the city with the highest number of staff members, along with the count of staff members in that city. It does this by joining the Addresses and Staff tables, grouping by city, and ordering the results by count in descending", "metadata": {}}
{"_id": "gpt3_3071", "text": "\nThis query selects the name of all male persons from the Person table and orders them by age.", "metadata": {}}
{"_id": "gpt3_3072", "text": "\nThis query selects the names of all males from the Person table and orders the results by age.", "metadata": {}}
{"_id": "gpt3_3073", "text": "\nThis query returns a list of names from the Person table where the gender is male, sorted in ascending order by age.", "metadata": {}}
{"_id": "gpt3_3074", "text": "\nThis query selects all names from the Person table where the gender is male and orders them by age.", "metadata": {}}
{"_id": "gpt3_3075", "text": "\nThis query selects the name of all male persons from the Person table, and orders them by age.", "metadata": {}}
{"_id": "gpt3_3076", "text": "\nThis query returns the most common apartment type code from the Apartments table where the number of bathrooms is greater than 1, sorted by descending count.", "metadata": {}}
{"_id": "gpt3_3077", "text": "\nThis query will select the most common apartment type code from Apartments where the bathroom count is greater than 1, and order the results by the number of occurrences of the apartment type code in descending order. The query will then return the top result,", "metadata": {}}
{"_id": "gpt3_3078", "text": "\nThis SQL query selects the most common apartment type code from the Apartments table where the bathroom count is greater than 1, and orders the results by count in descending order, with a limit of 1.", "metadata": {}}
{"_id": "gpt3_3079", "text": "\nThis query will select the apartment type code from the Apartments table where the bathroom count is greater than one, group the results by apartment type code, order the results by count in descending order, and limit the results to the first one.", "metadata": {}}
{"_id": "gpt3_3080", "text": "\nThis query selects the most common apartment type code from the Apartments table where the bathroom count is greater than 1, grouped by the apartment type code and ordered by the count in descending order, with a limit of 1 result.", "metadata": {}}
{"_id": "gpt3_3081", "text": "\nThis query will return the price of all wines that were produced before the year 2010.", "metadata": {}}
{"_id": "gpt3_3082", "text": "\nThis query will return the price of all wines from before 2010.", "metadata": {}}
{"_id": "gpt3_3083", "text": "\nThis query will return the prices of all wines from the WINE table that were produced before 2010.", "metadata": {}}
{"_id": "gpt3_3084", "text": "\nThis query will select the price of all wines from the WINE table that were produced before the year 2010.", "metadata": {}}
{"_id": "gpt3_3085", "text": "\nThis query will return the price of all wines that were produced before 2010.", "metadata": {}}
{"_id": "gpt3_3086", "text": "\nThis query returns a list of order IDs and the number of distinct product IDs associated with each order.", "metadata": {}}
{"_id": "gpt3_3087", "text": "\nThis query returns the order_id and the number of distinct products associated with each order_id from the Order_items table.", "metadata": {}}
{"_id": "gpt3_3088", "text": "\nThis query will return the order ID and the number of distinct product IDs associated with each order.", "metadata": {}}
{"_id": "gpt3_3089", "text": "\nThis query returns the order ID and the number of distinct product IDs associated with each order.", "metadata": {}}
{"_id": "gpt3_3090", "text": "\nThis query returns the order ID and the number of distinct products associated with each order.", "metadata": {}}
{"_id": "gpt3_3091", "text": "\nThis query returns the name of the catalog entry with the lowest capacity from the catalog_contents table, sorted in ascending order.", "metadata": {}}
{"_id": "gpt3_3092", "text": "\nThis query selects the name of the catalog entry with the lowest capacity from the catalog_contents table and displays it.", "metadata": {}}
{"_id": "gpt3_3093", "text": "\nThis query will return the name of the catalog entry with the lowest capacity from the catalog_contents table, sorted in ascending order.", "metadata": {}}
{"_id": "gpt3_3094", "text": "\nThis query returns the name of the catalog entry with the lowest capacity from the catalog_contents table.", "metadata": {}}
{"_id": "gpt3_3095", "text": "\nThis query selects the catalog entry name with the lowest capacity from the catalog contents table and limits the result to one row.", "metadata": {}}
{"_id": "gpt3_3096", "text": "\nThis query will return the total number of undergraduate students enrolled at San Jose State University in 2004.", "metadata": {}}
{"_id": "gpt3_3097", "text": "\nThis query will return the sum of all undergraduate enrollments at San Jose State University in the year 2004.", "metadata": {}}
{"_id": "gpt3_3098", "text": "\nThis query will return the total number of undergraduate students enrolled at San Jose State University in 2004.", "metadata": {}}
{"_id": "gpt3_3099", "text": "\nThis query will return the sum of all undergraduate students enrolled in San Jose State University in 2004.", "metadata": {}}
{"_id": "gpt3_3100", "text": "\nThis query will return the total number of undergraduate students enrolled at San Jose State University in 2004.", "metadata": {}}
{"_id": "gpt3_3101", "text": "\nThis query returns the total number of products in the Products table.", "metadata": {}}
{"_id": "gpt3_3102", "text": "\nThis query will return the total number of records in the Products table.", "metadata": {}}
{"_id": "gpt3_3103", "text": "\nThis query returns the total number of products in the Products table.", "metadata": {}}
{"_id": "gpt3_3104", "text": "\nThis query will return the total number of records in the Products table.", "metadata": {}}
{"_id": "gpt3_3105", "text": "\nThis query returns the total number of products in the Products table.", "metadata": {}}
{"_id": "gpt3_3106", "text": "\nThis query will return the titles of all songs from artists who have had at least one song with more than two weeks on top of the charts.", "metadata": {}}
{"_id": "gpt3_3107", "text": "\nThis query will return the famous titles of all the artists whose albums have been on the top of the charts for more than two weeks.", "metadata": {}}
{"_id": "gpt3_3108", "text": "\nThis query will return the titles of all songs from an artist that have been on the top of the music charts for more than two weeks.", "metadata": {}}
{"_id": "gpt3_3109", "text": "\nThis query will return the title of any artist's work that has been on the top of the charts for more than two weeks.", "metadata": {}}
{"_id": "gpt3_3110", "text": "\nThis query will select the famous title of an artist from the artist and volume tables where the number of weeks the artist was on top is greater than two.", "metadata": {}}
{"_id": "gpt3_3111", "text": "\nThis query will return the document name and document date from the Documents table where the project details in the Projects table is 'Graph Database project'.", "metadata": {}}
{"_id": "gpt3_3112", "text": "\nThis query will return all the document names and dates associated with the 'Graph Database project' from the Documents and Projects tables.", "metadata": {}}
{"_id": "gpt3_3113", "text": "\nThis query will return the document name and document date from the Documents table, for documents related to the Graph Database project from the Projects table.", "metadata": {}}
{"_id": "gpt3_3114", "text": "\nThis statement will select the document name and document date from the Documents table and the Projects table, where the project details in the Projects table is 'Graph Database project'.", "metadata": {}}
{"_id": "gpt3_3115", "text": "\nThis statement will select the document name and document date from the Documents table and the Projects table, where the project details in the Projects table is 'Graph Database project'.", "metadata": {}}
{"_id": "gpt3_3116", "text": "\nThis statement will select the address of all members in the member table except for those who have a black membership card.", "metadata": {}}
{"_id": "gpt3_3117", "text": "\nThis query will return all addresses from the member table, except those associated with a membership card of 'Black'.", "metadata": {}}
{"_id": "gpt3_3118", "text": "\nThis query will return a list of addresses from the members table that do not have a membership card of 'Black'.", "metadata": {}}
{"_id": "gpt3_3119", "text": "\nThis query will return all addresses from the member table, except for those with a membership card of 'Black'.", "metadata": {}}
{"_id": "gpt3_3120", "text": "\nThis query will return all addresses from the member table that are not associated with a 'Black' membership card.", "metadata": {}}
{"_id": "gpt3_3121", "text": "\nThis query returns the number of distinct cities in Greenland that have airports: 3.", "metadata": {}}
{"_id": "gpt3_3122", "text": "\nThis query will return the number of distinct cities in Greenland that have airports.", "metadata": {}}
{"_id": "gpt3_3123", "text": "\nThis query returns the number of distinct cities in Greenland that have airports: 4.", "metadata": {}}
{"_id": "gpt3_3124", "text": "\nThis query returns the number of distinct cities in Greenland that have airports.", "metadata": {}}
{"_id": "gpt3_3125", "text": "\nThis query will return the number of distinct cities in Greenland that have airports.", "metadata": {}}
{"_id": "gpt3_3126", "text": "\nThe query will return the description of the product category with the code \"Spices\", which is \"Spices and Seasonings\".", "metadata": {}}
{"_id": "gpt3_3127", "text": "\nThe query will return the product category description for \"Spices\" which is \"Spices and seasonings\".", "metadata": {}}
{"_id": "gpt3_3128", "text": "\nThe query will return the product category description for \"Spices\", which is \"Herbs and Spices\".", "metadata": {}}
{"_id": "gpt3_3129", "text": "\nThe result of this query is \"Spices and Seasonings\".", "metadata": {}}
{"_id": "gpt3_3130", "text": "\nThe query will return the product category description for the product category code \"Spices\", which is \"Spices and Seasonings\".", "metadata": {}}
{"_id": "gpt3_3131", "text": "\nThis query will return the manager name of all gas stations owned by ExxonMobil.", "metadata": {}}
{"_id": "gpt3_3132", "text": "\nThis query will return the manager name of all gas stations owned by ExxonMobil.", "metadata": {}}
{"_id": "gpt3_3133", "text": "\nThis query retrieves the manager names of all gas stations owned by ExxonMobil.", "metadata": {}}
{"_id": "gpt3_3134", "text": "\nThis query will return the names of all managers of ExxonMobil gas stations.", "metadata": {}}
{"_id": "gpt3_3135", "text": "\nThis query will select the manager names from the gas stations owned by ExxonMobil.", "metadata": {}}
{"_id": "gpt3_3136", "text": "\nThe query will return the total number of weddings that occurred in the year 2016.", "metadata": {}}
{"_id": "gpt3_3137", "text": "\nThis query will return the total number of weddings that occurred in 2016.", "metadata": {}}
{"_id": "gpt3_3138", "text": "\nThis query would return the total number of weddings that took place in 2016.", "metadata": {}}
{"_id": "gpt3_3139", "text": "\nThis query will return the total number of weddings that took place in the year 2016.", "metadata": {}}
{"_id": "gpt3_3140", "text": "\nThe query will return the total number of weddings that took place in 2016.", "metadata": {}}
{"_id": "gpt3_3141", "text": "\nThis query will return the party affiliation of the person with the lowest age from the people table, ordered in ascending order.", "metadata": {}}
{"_id": "gpt3_3142", "text": "\nThis query will select the party affiliation of the person with the lowest age from the people table, ordered in ascending order.", "metadata": {}}
{"_id": "gpt3_3143", "text": "\nThis query will select the party of the youngest person in the people table, ordered by age in ascending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_3144", "text": "\nThis query will select the party affiliation of the person with the lowest age from the people table and return it as the result.", "metadata": {}}
{"_id": "gpt3_3145", "text": "\nThis query returns the party affiliation of the person with the lowest age in the people table.", "metadata": {}}
{"_id": "gpt3_3146", "text": "\nThis query selects the customer last name, customer ID, and phone number of the customer who has placed the most orders. The query joins the Orders and Customers tables based on the customer ID and then groups the results by customer ID and orders them by", "metadata": {}}
{"_id": "gpt3_3147", "text": "\nThis query selects the customer last name, customer ID, and phone number from the Orders and Customers tables and groups them by customer ID. It then orders the results by the number of orders each customer has made and limits the results to the customer who", "metadata": {}}
{"_id": "gpt3_3148", "text": "\nThis query retrieves the customer last name, customer ID, and phone number from the Orders and Customers tables, grouped by customer ID and ordered by the number of orders in descending order, with the top customer displayed first.", "metadata": {}}
{"_id": "gpt3_3149", "text": "\nThis query selects the customer's last name, customer ID, and phone number from the Orders and Customers tables, grouped by customer ID and ordered by the number of orders, with the most orders listed first, and then limits the result to the first", "metadata": {}}
{"_id": "gpt3_3150", "text": "\nThis query selects the customer last name, customer id, and phone number of the customer who has placed the most orders, ordering the results in descending order and limiting the results to one.", "metadata": {}}
{"_id": "gpt3_3151", "text": "\nThis SQL query will select all unique directors from the film table.", "metadata": {}}
{"_id": "gpt3_3152", "text": "\nThis statement will select all the distinct directors from the film table.", "metadata": {}}
{"_id": "gpt3_3153", "text": "\nThe SQL statement SELECT DISTINCT Director FROM film will return a list of all the unique directors from the film table.", "metadata": {}}
{"_id": "gpt3_3154", "text": "\nThis query will select all unique directors from the film table.", "metadata": {}}
{"_id": "gpt3_3155", "text": "\nThis statement will select all distinct (unique) directors from the film table.", "metadata": {}}
{"_id": "gpt3_3156", "text": "\nThis query retrieves the name of the journalist and the date of the event associated with a news report.", "metadata": {}}
{"_id": "gpt3_3157", "text": "\nThis query selects the Name and Date from the news_report, event and journalist tables, using the Event_ID and journalist_ID to join the tables.", "metadata": {}}
{"_id": "gpt3_3158", "text": "\nThis query selects the name of the journalist and the date of the event associated with a news report.", "metadata": {}}
{"_id": "gpt3_3159", "text": "\nThis query will select the Name and Date from the news_report, event, and journalist tables based on the Event_ID and journalist_ID.", "metadata": {}}
{"_id": "gpt3_3160", "text": "\nThis query selects the name of the journalist and the date of the event associated with a news report from the news_report, event, and journalist tables.", "metadata": {}}
{"_id": "gpt3_3161", "text": "\nThis statement will select all unique customer details from the Customers table.", "metadata": {}}
{"_id": "gpt3_3162", "text": "\nThis SQL query will return a list of all distinct customer details from the Customers table.", "metadata": {}}
{"_id": "gpt3_3163", "text": "\nThis query will return a list of all distinct customer details from the Customers table.", "metadata": {}}
{"_id": "gpt3_3164", "text": "\nThis query will return a list of all the distinct customer details from the Customers table.", "metadata": {}}
{"_id": "gpt3_3165", "text": "\nThis statement will return a list of all the unique customer details from the Customers table.", "metadata": {}}
{"_id": "gpt3_3166", "text": "\nThis query will count the number of distinct names in the PersonFriend table that do not have a friend living in Austin.", "metadata": {}}
{"_id": "gpt3_3167", "text": "\nThis query will return the count of distinct names in the PersonFriend table who do not live in Austin.", "metadata": {}}
{"_id": "gpt3_3168", "text": "\nThis query will return the number of distinct names in the PersonFriend table that are not present in the Person table with a city of 'Austin'.", "metadata": {}}
{"_id": "gpt3_3169", "text": "\nThis query returns the number of distinct names in the PersonFriend table whose friend is not from Austin.", "metadata": {}}
{"_id": "gpt3_3170", "text": "\nThis query will return the total number of distinct names from the PersonFriend table that do not have a friend living in Austin.", "metadata": {}}
{"_id": "gpt3_3171", "text": "\nThis query returns the names of all dorms that do not have a TV Lounge amenity.", "metadata": {}}
{"_id": "gpt3_3172", "text": "\nThis query returns the dorm names from the dorm table that do not have a TV Lounge amenity.", "metadata": {}}
{"_id": "gpt3_3173", "text": "\nThis query returns the names of all dorms that do not have a TV Lounge amenity.", "metadata": {}}
{"_id": "gpt3_3174", "text": "\nThis statement will return a list of dorm names from the dorm table that do not have a TV Lounge amenity associated with them.", "metadata": {}}
{"_id": "gpt3_3175", "text": "\nThis query will select the names of all dorms that do not have a TV Lounge amenity.", "metadata": {}}
{"_id": "gpt3_3176", "text": "\nThis query counts the number of races each driver has participated in and returns the driver ID and count for drivers who have participated in less than or equal to 30 races.", "metadata": {}}
{"_id": "gpt3_3177", "text": "\nThis SQL statement retrieves the driverid and the number of races each driver has participated in, but only for drivers who have participated in 30 or fewer races.", "metadata": {}}
{"_id": "gpt3_3178", "text": "\nThis query counts the number of races each driver has participated in, with a maximum of 30 races. It does this by joining drivers, results, and races tables, grouping by driverid, and having a maximum of 30 races.", "metadata": {}}
{"_id": "gpt3_3179", "text": "\nThis query counts the number of races each driver has participated in, where the number of races is less than or equal to 30. The query joins the drivers, results, and races tables on the driverid and raceid columns, respectively. It", "metadata": {}}
{"_id": "gpt3_3180", "text": "\nThis query counts the number of races each driver has participated in, where the number of races is less than or equal to 30. It does this by joining the drivers, results, and races tables, grouping by the driverid column, and using", "metadata": {}}
{"_id": "gpt3_3181", "text": "\nThis query selects the three departments with the most students, along with their names and addresses. It does this by joining the student and department tables, grouping by department code, and ordering the results by the count of students. It then limits the results", "metadata": {}}
{"_id": "gpt3_3182", "text": "\nThis query retrieves the top three departments with the most students, along with their department name and address. It does so by joining the student and department tables on the dept_code field and then counting the number of students in each department.", "metadata": {}}
{"_id": "gpt3_3183", "text": "\nThis query retrieves the department name, address, and the number of students associated with each department, ordered by the number of students in descending order, with a limit of 3.", "metadata": {}}
{"_id": "gpt3_3184", "text": "\nThis query selects the department name, department address, and the number of students for the three departments with the most students. It does this by joining the student and department tables on the dept_code column, grouping by dept_code,", "metadata": {}}
{"_id": "gpt3_3185", "text": "\nThis query returns the top three departments with the most students, along with their department name and address. It does this by joining the student and department tables on the department code, then grouping by the department code and counting the number of students in each", "metadata": {}}
{"_id": "gpt3_3186", "text": "\nThis query returns all zip codes that have an average mean humidity lower than 70 and a trip count of 100 or more.", "metadata": {}}
{"_id": "gpt3_3187", "text": "\nThis query returns the zip codes from both the weather and trip tables where the average mean humidity is less than 70 and the number of trips is at least 100.", "metadata": {}}
{"_id": "gpt3_3188", "text": "\nThis query returns a list of zip codes that have an average mean humidity below 70 and have more than 100 trips recorded.", "metadata": {}}
{"_id": "gpt3_3189", "text": "\nThis query returns the zip codes that have an average mean humidity of less than 70 and have at least 100 trips associated with them.", "metadata": {}}
{"_id": "gpt3_3190", "text": "\nThis query finds the zip codes where the average mean humidity is less than 70 and has at least 100 trips associated with it.", "metadata": {}}
{"_id": "gpt3_3191", "text": "\nThis query selects the distinct artist name and country from the artist table, joining the song table on the artist name, where the rating for the song is greater than 9.", "metadata": {}}
{"_id": "gpt3_3192", "text": "\nThis query will select the distinct artist name and country from the artist table, joining the song table to check if the rating of the song is greater than 9.", "metadata": {}}
{"_id": "gpt3_3193", "text": "\nThis SQL query will select the distinct artist name and country from the artist table (T1) that have a song with a rating greater than 9 in the song table (T2).", "metadata": {}}
{"_id": "gpt3_3194", "text": "\nThis query selects the distinct artist name and country of all artists who have at least one song with a rating greater than 9.", "metadata": {}}
{"_id": "gpt3_3195", "text": "\nThis query will select distinct artist names and countries from the artist table (T1) that have songs with ratings greater than 9 in the song table (T2).", "metadata": {}}
{"_id": "gpt3_3196", "text": "\nThis query selects the product type code with the highest count from the Products table and returns it as the result.", "metadata": {}}
{"_id": "gpt3_3197", "text": "\nThis query will select the product type code from the Products table, group them by product type code, and order them by the number of occurrences in descending order. The query will then limit the result to the top one product type code.", "metadata": {}}
{"_id": "gpt3_3198", "text": "\nThis query returns the Product_Type_Code with the highest count from the Products table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_3199", "text": "\nThis query returns the most common product type code from the Products table, ordered by the number of occurrences.", "metadata": {}}
{"_id": "gpt3_3200", "text": "\nThis query will select the Product_Type_Code from the Products table, group them by Product_Type_Code and order them in descending order based on the count of each product type code. Finally, it will limit the result to the top", "metadata": {}}
{"_id": "gpt3_3201", "text": "\nThis query will select the phone number and email address of the customer named Aniyah Feest from the Customers table.", "metadata": {}}
{"_id": "gpt3_3202", "text": "\nThis query will select the phone number and email address of a customer with the first name of Aniyah and the last name of Feest from the Customers table.", "metadata": {}}
{"_id": "gpt3_3203", "text": "\nThis query will return the phone number and email address of the customer named Aniyah Feest from the Customers table.", "metadata": {}}
{"_id": "gpt3_3204", "text": "\nThis query will select the phone number and email address of the customer named Aniyah Feest from the Customers table.", "metadata": {}}
{"_id": "gpt3_3205", "text": "\nThis query will select the phone number and email address of the customer named Aniyah Feest from the Customers table.", "metadata": {}}
{"_id": "gpt3_3206", "text": "\nThis SQL statement will count the number of payments made for each payment method code in the Customer_Payments table.", "metadata": {}}
{"_id": "gpt3_3207", "text": "\nThis SQL query counts the number of customer payments for each payment method code.", "metadata": {}}
{"_id": "gpt3_3208", "text": "\nThis SQL statement will return a count of each payment method code from the Customer_Payments table, grouped by payment method code.", "metadata": {}}
{"_id": "gpt3_3209", "text": "\nThis query returns the number of times each payment method code appears in the Customer_Payments table. It groups the records by payment method code and then counts the number of records in each group.", "metadata": {}}
{"_id": "gpt3_3210", "text": "\nThis SQL statement will return the payment method code and the number of customers who have used each payment method code.", "metadata": {}}
{"_id": "gpt3_3211", "text": "\nThis statement will select the product name from the Products table for all products that are not included in the Products_in_Events table.", "metadata": {}}
{"_id": "gpt3_3212", "text": "\nThis query returns the names of products that are not present in any events.", "metadata": {}}
{"_id": "gpt3_3213", "text": "\nThis statement will select all product names from the Products table that are not included in the Products_in_Events table.", "metadata": {}}
{"_id": "gpt3_3214", "text": "\nThis query will return the names of all products that are not part of any events.", "metadata": {}}
{"_id": "gpt3_3215", "text": "\nThis query will select all product names from the Products table that are not in the Products_in_Events table.", "metadata": {}}
{"_id": "gpt3_3216", "text": "\nThis SQL statement will select the billing country and sum up the total of all invoices for each country, then order them by the total sum of each country in descending order and limit the results to the first 8 countries.", "metadata": {}}
{"_id": "gpt3_3217", "text": "\nThis SQL statement will select the billing country and the sum of the total of all invoices for each country, and then order the results by the total sum in descending order, showing the top 8 countries with the highest total invoice amounts.", "metadata": {}}
{"_id": "gpt3_3218", "text": "\nThis SQL statement is selecting the billing country and the sum of the total from the invoices table, grouping the results by billing country, and ordering the results by the sum of the total in descending order, limiting the results to the top 8", "metadata": {}}
{"_id": "gpt3_3219", "text": "\nThis SQL statement will return the top eight billing countries, along with the total amount of money spent in each country, from the invoices table. It will group the data by billing country and order the results by the total amount spent in each", "metadata": {}}
{"_id": "gpt3_3220", "text": "\nThis SQL statement will select the billing country and the sum of all totals from the invoices table, group them by billing country, order them by the sum of totals in descending order, and limit the results to the top 8 countries.", "metadata": {}}
{"_id": "gpt3_3221", "text": "\nThis query will select the enzyme ID and name of the enzyme with the most activitor interactions, ordered by count in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_3222", "text": "\nThis query will select the enzyme with the highest number of activator interactions and display its ID and name.", "metadata": {}}
{"_id": "gpt3_3223", "text": "\nThis query returns the enzyme ID and name of the enzyme with the most activator interactions, ordered by the count of interactions in descending order, with a limit of one.", "metadata": {}}
{"_id": "gpt3_3224", "text": "\nThis query selects the enzyme with the most activator interactions from the enzyme and medicine_enzyme_interaction tables, and orders the results by count in descending order. The query returns the id and name of the enzyme with the most activator", "metadata": {}}
{"_id": "gpt3_3225", "text": "\nThis query selects the enzyme ID and name of the enzyme with the highest number of activator interactions with medicines, ordered by count in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_3226", "text": "\nThis query will select the supplier_id from the Product_Suppliers table and group them by supplier_id, having an average total amount purchased greater than 50000 or less than 30000.", "metadata": {}}
{"_id": "gpt3_3227", "text": "\nThis query selects the supplier_id from the Product_Suppliers table and groups them by supplier_id. It then filters the results to only show suppliers whose average total amount purchased is greater than 50000 or less than 30000.", "metadata": {}}
{"_id": "gpt3_3228", "text": "\nThis query returns a list of supplier IDs from the Product_Suppliers table where the average total amount purchased is greater than 50000 or less than 30000.", "metadata": {}}
{"_id": "gpt3_3229", "text": "\nThis query will select all supplier IDs from the Product_Suppliers table that have an average total amount purchased greater than 50000 or less than 30000.", "metadata": {}}
{"_id": "gpt3_3230", "text": "\nThis query selects the supplier_id from the Product_Suppliers table, groups the data by supplier_id, and returns only those supplier_ids that have an average total_amount_purchased greater than 50000 or less than", "metadata": {}}
{"_id": "gpt3_3231", "text": "\nThis query will return a count of the number of constructors grouped by nationality.", "metadata": {}}
{"_id": "gpt3_3232", "text": "\nThis query returns the count of each nationality in the 'constructors' table grouped by nationality.", "metadata": {}}
{"_id": "gpt3_3233", "text": "\nThis query counts the number of constructors from each nationality and groups them by nationality. The output of the query will be a table containing the number of constructors for each nationality.", "metadata": {}}
{"_id": "gpt3_3234", "text": "\nThis query will count the number of constructors for each nationality and group them by nationality. The result will be a table containing the nationality and the number of constructors for each nationality.", "metadata": {}}
{"_id": "gpt3_3235", "text": "\nThis query will return a count of the number of constructors for each nationality.", "metadata": {}}
{"_id": "gpt3_3236", "text": "\nThis query returns the student IDs of those who have two or more allergies.", "metadata": {}}
{"_id": "gpt3_3237", "text": "\nThis query returns a list of student IDs from the Has_allergy table who have two or more allergies.", "metadata": {}}
{"_id": "gpt3_3238", "text": "\nThis query returns a list of student IDs of students who have two or more allergies.", "metadata": {}}
{"_id": "gpt3_3239", "text": "\nThis query returns a list of Student IDs from the Has_allergy table who have two or more allergies.", "metadata": {}}
{"_id": "gpt3_3240", "text": "\nThis query returns a list of student IDs from the Has_allergy table who have two or more allergies.", "metadata": {}}
{"_id": "gpt3_3241", "text": "\nThis query selects the sent date from documents that are associated with grants that have an amount greater than 5000 and are associated with an organization type of 'Research'.", "metadata": {}}
{"_id": "gpt3_3242", "text": "\nThis query selects the sent date from documents where the grant amount is greater than 5000 and the organisation type description is 'Research'.", "metadata": {}}
{"_id": "gpt3_3243", "text": "\nThis query will select the sent_date from documents for grants with an amount greater than 5000 and an organisation type description of 'Research'.", "metadata": {}}
{"_id": "gpt3_3244", "text": "\nThis query selects the sent date from documents, where the associated grant amount is greater than 5000 and the associated organisation type description is 'Research'.", "metadata": {}}
{"_id": "gpt3_3245", "text": "\nThis query selects the sent date from documents for grants with an amount greater than 5000 from organisations of the type 'Research'.", "metadata": {}}
{"_id": "gpt3_3246", "text": "\nThis query returns the number of distinct papers written by authors affiliated with Tokohu University.", "metadata": {}}
{"_id": "gpt3_3247", "text": "\nThis query counts the number of distinct paper titles from Tokohu University.", "metadata": {}}
{"_id": "gpt3_3248", "text": "\nThis query will count the number of distinct titles of papers published by authors affiliated with Tokohu University.", "metadata": {}}
{"_id": "gpt3_3249", "text": "\nThis query will return the number of distinct titles of papers that have been authored by someone from Tokohu University.", "metadata": {}}
{"_id": "gpt3_3250", "text": "\nThis query will count the number of distinct titles of papers that have authors affiliated with Tokohu University.", "metadata": {}}
{"_id": "gpt3_3251", "text": "\nThis query will return the average number of factories for manufacturers that have more than 20 shops.", "metadata": {}}
{"_id": "gpt3_3252", "text": "\nThe average number of factories among manufacturers with more than 20 shops is 35.", "metadata": {}}
{"_id": "gpt3_3253", "text": "\nThis query would return the average number of factories for all manufacturers who have more than 20 shops.", "metadata": {}}
{"_id": "gpt3_3254", "text": "\nThis query will return the average number of factories for manufacturers that have more than 20 shops.", "metadata": {}}
{"_id": "gpt3_3255", "text": "\nThe average number of factories for manufacturers who have more than 20 shops is 8.3.", "metadata": {}}
{"_id": "gpt3_3256", "text": "\nThis query returns the name, average attendance, and total attendance of stadiums that are not associated with any game that had an injury or accident.", "metadata": {}}
{"_id": "gpt3_3257", "text": "\nThis query will return the name, average attendance, and total attendance of all stadiums, except those stadiums that have had games with injuries or accidents.", "metadata": {}}
{"_id": "gpt3_3258", "text": "\nThis query returns all records from the stadium table that are not associated with any game in the game table and any injury or accident in the injury_accident table. It returns the name, average attendance, and total attendance from the stadium table.", "metadata": {}}
{"_id": "gpt3_3259", "text": "\nThis query returns the name, average attendance, and total attendance for all stadiums, except for those stadiums that hosted a game with an injury or accident.", "metadata": {}}
{"_id": "gpt3_3260", "text": "\nThis query returns the name, average attendance, and total attendance from the stadium table, excluding any stadiums associated with a game that had an injury or accident.", "metadata": {}}
{"_id": "gpt3_3261", "text": "\nThis query selects the customer name from the customers table that has the most entries in the mailshot_customers table.", "metadata": {}}
{"_id": "gpt3_3262", "text": "\nThis query selects the customer name from the mailshot_customers and customers tables, grouped by customer_id and ordered by the count of the customer_ids, and then limits the result to the first customer name.", "metadata": {}}
{"_id": "gpt3_3263", "text": "\nThis query selects the customer name from the mailshot_customers and customers tables, grouped by customer ID and ordered by the count of the customer ID in descending order, and limits the result to the top customer.", "metadata": {}}
{"_id": "gpt3_3264", "text": "\nThis query will select the customer name of the customer with the highest number of mailshots from the mailshot_customers and customers tables.", "metadata": {}}
{"_id": "gpt3_3265", "text": "\nThis query selects the customer name from the mailshot_customers and customers tables, grouped by customer ID and ordered by the count of each customer, and limits the result to the one customer with the highest count.", "metadata": {}}
{"_id": "gpt3_3266", "text": "\nThis query will return the name of the county with the highest population from the county_public_safety table, ordered in descending order.", "metadata": {}}
{"_id": "gpt3_3267", "text": "\nThis query returns the name of the county with the highest population from the county_public_safety table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_3268", "text": "\nThis query will select the name of the county with the highest population from the county_public_safety table, and limit the result to one row.", "metadata": {}}
{"_id": "gpt3_3269", "text": "\nThis query returns the name of the county with the highest population from the county_public_safety table.", "metadata": {}}
{"_id": "gpt3_3270", "text": "\nThis query returns the name of the county with the highest population from the county_public_safety table.", "metadata": {}}
{"_id": "gpt3_3271", "text": "\nThis query will retrieve the name of the aircraft that John Williams is certified to fly.", "metadata": {}}
{"_id": "gpt3_3272", "text": "\nThis query retrieves the name of the aircraft from the Aircraft table that John Williams has a certificate for.", "metadata": {}}
{"_id": "gpt3_3273", "text": "\nThis query will select the name of the Aircraft associated with the Certificate held by the Employee named \"John Williams\".", "metadata": {}}
{"_id": "gpt3_3274", "text": "\nThis query retrieves the name of an Aircraft associated with John Williams, an Employee, through the Certificate table.", "metadata": {}}
{"_id": "gpt3_3275", "text": "\nThis query retrieves the name of the Aircraft associated with the Employee \"John Williams\" who has a Certificate.", "metadata": {}}
{"_id": "gpt3_3276", "text": "\nThis query will select the advisors of all students from the city with the code \"BAL\".", "metadata": {}}
{"_id": "gpt3_3277", "text": "\nThis query will return the advisor of any student who lives in the city with the code \"BAL\".", "metadata": {}}
{"_id": "gpt3_3278", "text": "\nThis query will return the name of the advisor for any student who lives in the city with the code BAL.", "metadata": {}}
{"_id": "gpt3_3279", "text": "\nThis query will return the names of all advisors from the STUDENT table who are located in the city with the code \"BAL\".", "metadata": {}}
{"_id": "gpt3_3280", "text": "\nThis query will return all of the advisors associated with students who live in the city of Baltimore (city_code \"BAL\").", "metadata": {}}
{"_id": "gpt3_3281", "text": "\nThis query will return the names of dorms that have a student capacity greater than 300.", "metadata": {}}
{"_id": "gpt3_3282", "text": "\nThis query will return the names of dorms that have a student capacity of more than 300.", "metadata": {}}
{"_id": "gpt3_3283", "text": "\nThis query will select all dorm names from the dorm table where the student capacity is greater than 300.", "metadata": {}}
{"_id": "gpt3_3284", "text": "\nThis query will select the names of all dorms with a student capacity greater than 300.", "metadata": {}}
{"_id": "gpt3_3285", "text": "\nThis query will return the names of all dorms that have a student capacity greater than 300.", "metadata": {}}
{"_id": "gpt3_3286", "text": "\nThis statement selects the employee_id, first_name, last_name, and job_id from the employees table where their salary is greater than the maximum salary of employees with a job_id of 'PU_MAN'.", "metadata": {}}
{"_id": "gpt3_3287", "text": "\nThis query selects the employee ID, first name, last name, and job ID of all employees with a salary that is greater than the maximum salary of employees with the job ID of 'PU_MAN'.", "metadata": {}}
{"_id": "gpt3_3288", "text": "\nThis query returns the employee ID, first name, last name, and job ID of all employees whose salary is greater than the maximum salary of all employees with a job ID of 'PU_MAN'.", "metadata": {}}
{"_id": "gpt3_3289", "text": "\nThis query will select the employee_id, first_name, last_name, and job_id from the employees table for all employees with a salary greater than the maximum salary of employees with the job_id 'PU_MAN'.", "metadata": {}}
{"_id": "gpt3_3290", "text": "\nThis query selects the employee_id, first_name, last_name, and job_id from the employees table for all employees with a salary greater than the maximum salary of all employees with the job_id of 'PU_MAN'.", "metadata": {}}
{"_id": "gpt3_3291", "text": "\nThis query will return all campuses located in Los Angeles County that were established after 1950.", "metadata": {}}
{"_id": "gpt3_3292", "text": "\nThis query will select the campus from the campuses table where the county is Los Angeles and the year is greater than 1950.", "metadata": {}}
{"_id": "gpt3_3293", "text": "\nThis query will return all campuses located in Los Angeles County that were established after 1950.", "metadata": {}}
{"_id": "gpt3_3294", "text": "\nThis query will return all campuses located in Los Angeles County which were established after 1950.", "metadata": {}}
{"_id": "gpt3_3295", "text": "\nThis query will return all campuses located in Los Angeles County that were established after 1950.", "metadata": {}}
{"_id": "gpt3_3296", "text": "\nThis query will return the average age, maximum age, and sex for each gender in the student table.", "metadata": {}}
{"_id": "gpt3_3297", "text": "\nThis query will return the average age, maximum age, and sex of students grouped by sex. The results will be two rows, one for male students and one for female students, with the average age, maximum age, and sex for each gender", "metadata": {}}
{"_id": "gpt3_3298", "text": "\nThis query will return the average age, maximum age, and sex of students grouped by sex. The result will be two rows, one for male and one for female, with each row containing the average age, maximum age, and sex for that", "metadata": {}}
{"_id": "gpt3_3299", "text": "\nThis query will return the average age and maximum age of students grouped by sex. The result will be two rows, one for male students and one for female students, containing the average age and maximum age for each sex.", "metadata": {}}
{"_id": "gpt3_3300", "text": "\nThis query will return the average age, maximum age, and sex of students grouped by sex. The output will be two rows, one for each sex, containing the average age, maximum age, and the sex for each group.", "metadata": {}}
{"_id": "gpt3_3301", "text": "\nThis query will return a list of all the distinct directors of films released in the year 1995.", "metadata": {}}
{"_id": "gpt3_3302", "text": "\nThis query will return a list of all the distinct directors of films that had a film market estimation in the year 1995.", "metadata": {}}
{"_id": "gpt3_3303", "text": "\nThis query will select all unique directors of films released in 1995.", "metadata": {}}
{"_id": "gpt3_3304", "text": "\nThis query will return a list of all distinct directors of films that had market estimations in the year 1995.", "metadata": {}}
{"_id": "gpt3_3305", "text": "\nThis query will return a list of all directors who released films in 1995.", "metadata": {}}
{"_id": "gpt3_3306", "text": "\nThis query will select the account name, account ID, and count of all financial transactions associated with each account from the Financial_transactions and Accounts tables. The results will be grouped by account ID.", "metadata": {}}
{"_id": "gpt3_3307", "text": "\nThis query returns the account name, account ID, and a count of the number of financial transactions associated with each account.", "metadata": {}}
{"_id": "gpt3_3308", "text": "\nThis query selects the account name, account ID, and count of all financial transactions associated with each account from the Accounts and Financial_transactions tables.", "metadata": {}}
{"_id": "gpt3_3309", "text": "\nThis query returns the account name, account id, and count of transactions for each account in the Accounts and Financial_transactions tables.", "metadata": {}}
{"_id": "gpt3_3310", "text": "\nThis query will return the account name, account ID, and count of all financial transactions associated with each account.", "metadata": {}}
{"_id": "gpt3_3311", "text": "\nThis query will select the maximum price of a wine from the Central Coast region with a vintage year before 2005.", "metadata": {}}
{"_id": "gpt3_3312", "text": "\nThis query will return the highest price of any wine from the Central Coast region that was produced before 2005.", "metadata": {}}
{"_id": "gpt3_3313", "text": "\nThis query will return the maximum price of a wine from the Central Coast area that was produced before 2005.", "metadata": {}}
{"_id": "gpt3_3314", "text": "\nThis query will return the maximum price of any wine from the Central Coast region that was produced before 2005.", "metadata": {}}
{"_id": "gpt3_3315", "text": "\nThis query will return the maximum price of a wine from the Central Coast region that was produced before 2005.", "metadata": {}}
{"_id": "gpt3_3316", "text": "\nThis query will select the name of each actor from the 'actor' table and join it with the 'musical' table based on the Musical_ID. The results will be ordered by the year in the 'musical' table in descending", "metadata": {}}
{"_id": "gpt3_3317", "text": "\nThis query selects the name of an actor from the actor table, and joins it with the musical table to order the results by the year of the musical in descending order.", "metadata": {}}
{"_id": "gpt3_3318", "text": "\nThis query selects the names of actors from the actor table, ordered by the year of the musical they are associated with in the musical table, in descending order.", "metadata": {}}
{"_id": "gpt3_3319", "text": "\nThis query will select the name of each actor from the actor table who has worked on a musical, ordered by the year the musical was released in descending order.", "metadata": {}}
{"_id": "gpt3_3320", "text": "\nThis query selects the name of actors from the actor table and joins it with the musical table, ordering the results by the year in the musical table in descending order.", "metadata": {}}
{"_id": "gpt3_3321", "text": "\nThis query selects the customer name, account type, and account balance of the customer with the highest credit score, ordered by credit score in descending order, and limits the result to one row.", "metadata": {}}
{"_id": "gpt3_3322", "text": "\nThis query will select the customer name, account type, and account balance of the customer with the highest credit score, and order the results in descending order.", "metadata": {}}
{"_id": "gpt3_3323", "text": "\nThis query returns the customer name, account type, and account balance of the customer with the highest credit score.", "metadata": {}}
{"_id": "gpt3_3324", "text": "\nThis query selects the customer name, account type, and account balance of the customer with the highest credit score from the customer table, ordered in descending order, and limited to the first record.", "metadata": {}}
{"_id": "gpt3_3325", "text": "\nThis query retrieves the customer name, account type, and account balance of the customer with the highest credit score from the customer table, ordered in descending order.", "metadata": {}}
{"_id": "gpt3_3326", "text": "\nThis query will select the role name and role description from the Roles table for the employee named Ebba.", "metadata": {}}
{"_id": "gpt3_3327", "text": "\nThis query will select the role name and description of the role of an employee named Ebba from the Employees and Roles tables.", "metadata": {}}
{"_id": "gpt3_3328", "text": "\nThis query will select the role name and description for the employee Ebba from the Employees and Roles tables.", "metadata": {}}
{"_id": "gpt3_3329", "text": "\nThis query will retrieve the role name and description of the role associated with the employee named Ebba.", "metadata": {}}
{"_id": "gpt3_3330", "text": "\nThis query will select the role name and description of the employee named Ebba from the Employees and Roles tables.", "metadata": {}}
{"_id": "gpt3_3331", "text": "\nThis query returns the total number of records in the VOTING_RECORD table.", "metadata": {}}
{"_id": "gpt3_3332", "text": "\nThis query returns the total number of records in the VOTING_RECORD table.", "metadata": {}}
{"_id": "gpt3_3333", "text": "\nThis query will return the total number of records in the VOTING_RECORD table.", "metadata": {}}
{"_id": "gpt3_3334", "text": "\nThis query will count the total number of rows in the VOTING_RECORD table.", "metadata": {}}
{"_id": "gpt3_3335", "text": "\nThis query will return the total number of rows in the VOTING_RECORD table.", "metadata": {}}
{"_id": "gpt3_3336", "text": "\nThis statement selects the name and salary of instructors who are advisors for students in the Math department.", "metadata": {}}
{"_id": "gpt3_3337", "text": "\nThis statement retrieves the name and salary of instructors who are advisors for students in the Math department.", "metadata": {}}
{"_id": "gpt3_3338", "text": "\nThis query selects the name and salary of instructors who are advisors for students in the Math department.", "metadata": {}}
{"_id": "gpt3_3339", "text": "\nThis query selects the name and salary of all instructors who are advisors to students in the Math department.", "metadata": {}}
{"_id": "gpt3_3340", "text": "\nThis query selects the names and salaries of instructors who are advisors to students in the Math department.", "metadata": {}}
{"_id": "gpt3_3341", "text": "\nThis query will return the department name with the most students enrolled, ordered by the highest count.", "metadata": {}}
{"_id": "gpt3_3342", "text": "\nThis query selects the department name with the most students enrolled in it, and orders the results in descending order. The query returns the department name with the highest student count.", "metadata": {}}
{"_id": "gpt3_3343", "text": "\nThis query will return the department name with the most students enrolled, ordered by the highest count.", "metadata": {}}
{"_id": "gpt3_3344", "text": "\nThis query will select the department name with the most students and display it first, followed by the other departments in descending order based on the number of students.", "metadata": {}}
{"_id": "gpt3_3345", "text": "\nThis query will return the department name with the highest number of students, ordered by count in descending order, with a limit of one result.", "metadata": {}}
{"_id": "gpt3_3346", "text": "\nThis query will select the product_id and color_description from the products and ref_colors tables, as well as the product_characteristics table, and group them by product_id, having a count of at least 2.", "metadata": {}}
{"_id": "gpt3_3347", "text": "\nThis statement selects the product_id and color_description from the products and ref_colors tables, respectively, that have a product_characteristics record associated with them and that have at least two records for the product_id in the product", "metadata": {}}
{"_id": "gpt3_3348", "text": "\nThis query retrieves the product_id and color_description from the products and ref_colors tables, joined on the color_code column. It also joins the product_characteristics table, and groups the results by product_id,", "metadata": {}}
{"_id": "gpt3_3349", "text": "\nThis query retrieves the product_id and color_description of all products that have at least two product characteristics associated with them. It does this by joining the products, ref_colors and product_characteristics tables, and grouping the results", "metadata": {}}
{"_id": "gpt3_3350", "text": "\nThis query selects the product_id and color_description from the products, ref_colors, and product_characteristics tables, grouping the results by product_id and selecting only products that have at least two characteristics.", "metadata": {}}
{"_id": "gpt3_3351", "text": "\nThis query will count the number of customers who do not have any accounts.", "metadata": {}}
{"_id": "gpt3_3352", "text": "\nThis query counts the number of customers who do not have an account.", "metadata": {}}
{"_id": "gpt3_3353", "text": "\nThis query returns the count of customers who do not have an account in the Accounts table.", "metadata": {}}
{"_id": "gpt3_3354", "text": "\nThis query counts the number of customers who do not have an account in the Accounts table.", "metadata": {}}
{"_id": "gpt3_3355", "text": "\nThis query returns the number of customers who do not have any accounts.", "metadata": {}}
{"_id": "gpt3_3356", "text": "\nThis SQL query will select the address details from the Addresses table that is associated with the document ID of 4 from the Documents_Mailed table.", "metadata": {}}
{"_id": "gpt3_3357", "text": "\nThis query will select the address details from the Addresses table for the address associated with the document with ID 4 from the Documents_Mailed table.", "metadata": {}}
{"_id": "gpt3_3358", "text": "\nThis query retrieves the address details for the address associated with the document with ID 4 from the Addresses and Documents_Mailed tables.", "metadata": {}}
{"_id": "gpt3_3359", "text": "\nThis statement retrieves the address details from the Addresses table that corresponds to the document_id of 4 from the Documents_Mailed table.", "metadata": {}}
{"_id": "gpt3_3360", "text": "\nThis statement retrieves the address details from the Addresses table for the address associated with the document with an ID of 4 from the Documents_Mailed table.", "metadata": {}}
{"_id": "gpt3_3361", "text": "\nThis query will select the name of the director of the film with the highest number of show times per day in the schedule, and then order the results by the sum of the show times per day in descending order. The result will be limited to", "metadata": {}}
{"_id": "gpt3_3362", "text": "\nThis query selects the director with the most show times per day from the schedule and film tables, and orders them in descending order. The result is the director with the highest number of show times per day.", "metadata": {}}
{"_id": "gpt3_3363", "text": "\nThis query will select the director of the film with the highest number of show times per day from the schedule and film tables, ordered by the sum of show times per day and limited to the top result.", "metadata": {}}
{"_id": "gpt3_3364", "text": "\nThis query returns the director with the most show times per day from the schedule and film tables. It does this by joining the two tables on the film_id field, grouping the results by the director, and then ordering the results by the sum", "metadata": {}}
{"_id": "gpt3_3365", "text": "\nThis query selects the director with the most show times per day from the schedule and film tables, ordered by the sum of show times per day in descending order and limited to the top result.", "metadata": {}}
{"_id": "gpt3_3366", "text": "\nThis query selects the color of the grape with the highest average price from the GRAPES and WINE tables. It groups the grapes together and orders them by the average price in descending order, then selects the color of the top grape.", "metadata": {}}
{"_id": "gpt3_3367", "text": "\nThis query selects the color of the most expensive grape, as determined by the average price of the wines made with that grape, from the GRAPES and WINE tables. It groups the results by grape, orders them by the average price of", "metadata": {}}
{"_id": "gpt3_3368", "text": "\nThis query will select the color of the most expensive grape variety from the GRAPES and WINE tables, grouped by grape and ordered by average price in descending order, with a limit of one result.", "metadata": {}}
{"_id": "gpt3_3369", "text": "\nThis query selects the color of the most expensive grape used to make wine, by joining the GRAPES and WINE tables on the Grape column, grouping by grape, ordering by average price in descending order, and limiting the result to one.", "metadata": {}}
{"_id": "gpt3_3370", "text": "\nThis query will return the color of the most expensive type of grape used to make wine.", "metadata": {}}
{"_id": "gpt3_3371", "text": "\nThis query will select the investor with the most investments and order them in descending order, with the investor with the most investments listed first.", "metadata": {}}
{"_id": "gpt3_3372", "text": "\nThis query returns the Investor with the most investments in entrepreneurs, ordered by the number of investments they have made.", "metadata": {}}
{"_id": "gpt3_3373", "text": "\nThis query will return the investor with the most investments, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_3374", "text": "\nThis query will return the Investor with the most entries in the entrepreneur table, ordered by the number of entries in descending order, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_3375", "text": "\nThis query will return the investor with the most investments in the entrepreneur table, ordered by the number of investments in descending order.", "metadata": {}}
{"_id": "gpt3_3376", "text": "\nThis query selects the theme and name of an artist from the exhibition and artist tables, where the ticket price of the exhibition is greater than the average ticket price of all exhibitions.", "metadata": {}}
{"_id": "gpt3_3377", "text": "\nThis query will select the theme and name of the artist from the exhibition and artist tables where the ticket price of the exhibition is greater than the average ticket price of all exhibitions.", "metadata": {}}
{"_id": "gpt3_3378", "text": "\nThis query will select the theme and name of any exhibition and artist whose ticket price is higher than the average ticket price of all exhibitions.", "metadata": {}}
{"_id": "gpt3_3379", "text": "\nThis query will select the theme and name of the artist from the exhibition and artist tables where the ticket price of the exhibition is greater than the average ticket price of all exhibitions.", "metadata": {}}
{"_id": "gpt3_3380", "text": "\nThis statement is selecting the theme and name of an exhibition and artist from the exhibition and artist tables, respectively, where the ticket price of the exhibition is greater than the average ticket price of all exhibitions.", "metadata": {}}
{"_id": "gpt3_3381", "text": "\nThis query selects the names of all editors from a table and orders them by age in ascending order.", "metadata": {}}
{"_id": "gpt3_3382", "text": "\nThis query will return a list of all editors in the database, sorted in ascending order by age.", "metadata": {}}
{"_id": "gpt3_3383", "text": "\nThis query will select the name of each editor from the editor table and order them by age in ascending order.", "metadata": {}}
{"_id": "gpt3_3384", "text": "\nThis query will select the names of all editors from the database and order them by age in ascending order.", "metadata": {}}
{"_id": "gpt3_3385", "text": "\nThis query will return a list of names from the editor table, sorted in ascending order according to their age.", "metadata": {}}
{"_id": "gpt3_3386", "text": "\nThis query will return the unit price of the track \"Fast As a Shark\" from the Tracks table.", "metadata": {}}
{"_id": "gpt3_3387", "text": "\nThis statement will return the unit price of the track \"Fast As a Shark\" from the Tracks table.", "metadata": {}}
{"_id": "gpt3_3388", "text": "\nThis query will return the unit price of the track \"Fast As a Shark\" from the tracks table.", "metadata": {}}
{"_id": "gpt3_3389", "text": "\nThis query will return the unit price of the track \"Fast As a Shark\" from the Tracks table.", "metadata": {}}
{"_id": "gpt3_3390", "text": "\nThis query will return the unit price of the track \"Fast As a Shark\" from the Tracks table.", "metadata": {}}
{"_id": "gpt3_3391", "text": "\nThis statement selects all columns from the tables products and Manufacturers and joins them together on the manufacturer code. The result is a table containing all of the information from both tables.", "metadata": {}}
{"_id": "gpt3_3392", "text": "\nThis query selects all columns from both the products and manufacturers tables and joins them together based on the manufacturer code. This will provide information from both tables for each product.", "metadata": {}}
{"_id": "gpt3_3393", "text": "\nThis query is used to retrieve data from two tables, products and Manufacturers. It joins the two tables based on the manufacturer code in each table. The query will return all columns from both tables, allowing the user to view all data associated with", "metadata": {}}
{"_id": "gpt3_3394", "text": "\nThis statement retrieves data from two tables, Products and Manufacturers. It joins the two tables on the manufacturer code, which is found in both tables. The result of the query will be a table containing all columns from both tables, with the", "metadata": {}}
{"_id": "gpt3_3395", "text": "\nThis SQL statement is used to join two tables, 'products' and 'manufacturers', by their common attribute of 'manufacturer' and 'code' respectively. The statement will select all columns from both tables and return the result set.", "metadata": {}}
{"_id": "gpt3_3396", "text": "\nThe SELECT statement from the club table would return the description of the club \"Pen and Paper Gaming\".", "metadata": {}}
{"_id": "gpt3_3397", "text": "\nThe query will return the description of the club \"Pen and Paper Gaming\".", "metadata": {}}
{"_id": "gpt3_3398", "text": "\nThe query will return the description of the club \"Pen and Paper Gaming\", which is \"A club for people who like to play role-playing games such as Dungeons & Dragons, Pathfinder, and other tabletop RPGs.\"", "metadata": {}}
{"_id": "gpt3_3399", "text": "\nThe query will return the club description for the club named Pen and Paper Gaming.", "metadata": {}}
{"_id": "gpt3_3400", "text": "\nThe query will return the description of the club \"Pen and Paper Gaming\".", "metadata": {}}
{"_id": "gpt3_3401", "text": "\nThis query returns the name of each camera lens, along with a count of the number of photos taken with it, sorted by the count in descending order.", "metadata": {}}
{"_id": "gpt3_3402", "text": "\nThis query returns the name of each camera lens and the number of photos taken with it, ordered by the number of photos taken.", "metadata": {}}
{"_id": "gpt3_3403", "text": "\nThis query retrieves the names of camera lenses and the number of photos taken with each lens, sorted in descending order by the number of photos taken.", "metadata": {}}
{"_id": "gpt3_3404", "text": "\nThis query returns a list of camera lens names and a count of how many photos were taken using each lens, ordered by the count.", "metadata": {}}
{"_id": "gpt3_3405", "text": "\nThis query returns the name of each camera lens, along with a count of the number of photos taken with that lens, ordered by the count.", "metadata": {}}
{"_id": "gpt3_3406", "text": "\nThis query selects the artist name and gender from the artist table for all artists whose songs were released in March.", "metadata": {}}
{"_id": "gpt3_3407", "text": "\nThis query selects the artist name and gender of artists whose songs were released in March.", "metadata": {}}
{"_id": "gpt3_3408", "text": "\nThis query will select the artist name and gender from the artist table for all songs released in March.", "metadata": {}}
{"_id": "gpt3_3409", "text": "\nThis query selects the artist name and gender of all artists who have released a song in March.", "metadata": {}}
{"_id": "gpt3_3410", "text": "\nThis query selects the artist name and gender from the artist table for all songs released in March.", "metadata": {}}
{"_id": "gpt3_3411", "text": "\nThis query will select all countries from the market table, and order them in alphabetical order.", "metadata": {}}
{"_id": "gpt3_3412", "text": "\nThis query will select all countries from the market table, and order them in ascending alphabetical order.", "metadata": {}}
{"_id": "gpt3_3413", "text": "\nThis query will select all countries from the market table and order them in ascending alphabetical order.", "metadata": {}}
{"_id": "gpt3_3414", "text": "\nThis query will return a list of countries from the market table, sorted in alphabetical order.", "metadata": {}}
{"_id": "gpt3_3415", "text": "\nThis query selects all countries from the market table and orders them in ascending alphabetical order.", "metadata": {}}
{"_id": "gpt3_3416", "text": "\nThis query will select the name of all ships from the ship table and order them by the year they were built and then by the class of the ship.", "metadata": {}}
{"_id": "gpt3_3417", "text": "\nThis query selects the names of ships from a database and orders them by the year they were built, followed by their class.", "metadata": {}}
{"_id": "gpt3_3418", "text": "\nThis query selects the names of ships from the ship table and orders them by built year and class.", "metadata": {}}
{"_id": "gpt3_3419", "text": "\nThis query will return a list of ship names in alphabetical order, sorted first by the year the ship was built, and then by its class.", "metadata": {}}
{"_id": "gpt3_3420", "text": "\nThis query will select the name of ships from a table and order them by the year they were built, followed by their class.", "metadata": {}}
{"_id": "gpt3_3421", "text": "\nThis query will return the number of distinct titles of songs that have been shared by two or more vocalists.", "metadata": {}}
{"_id": "gpt3_3422", "text": "\nThis query returns the number of distinct titles in the vocals table that have a type of \"shared\".", "metadata": {}}
{"_id": "gpt3_3423", "text": "\nThis query will count the number of distinct titles from the vocals and songs tables where the type is \"shared\".", "metadata": {}}
{"_id": "gpt3_3424", "text": "\nThis query returns the number of distinct titles of songs that have shared vocals.", "metadata": {}}
{"_id": "gpt3_3425", "text": "\nThis query returns the count of distinct titles from the vocals and songs tables when the type is \"shared\".", "metadata": {}}
{"_id": "gpt3_3426", "text": "\nThis query will select the City from the Employee table for the Support Rep who is associated with the Customer with PostalCode \"70174\".", "metadata": {}}
{"_id": "gpt3_3427", "text": "\nThis SQL statement will select the City from the Employee table for any customers with a PostalCode of 70174.", "metadata": {}}
{"_id": "gpt3_3428", "text": "\nThis query will select the city of the employee who is the support representative for the customer with the postal code 70174.", "metadata": {}}
{"_id": "gpt3_3429", "text": "\nThis query selects the city from the EMPLOYEE table that corresponds to the SupportRepId of the CUSTOMER table where the PostalCode is \"70174\".", "metadata": {}}
{"_id": "gpt3_3430", "text": "\nThis query will select the city from the employee table that corresponds to the customer with the postal code 70174.", "metadata": {}}
{"_id": "gpt3_3431", "text": "\nThis query selects the names of instructors from the instructor table who have a salary higher than the minimum salary of instructors in the Biology department.", "metadata": {}}
{"_id": "gpt3_3432", "text": "\nThis query selects the name of any instructor whose salary is greater than the lowest salary of any instructor in the Biology department.", "metadata": {}}
{"_id": "gpt3_3433", "text": "\nThis query selects the name of instructors from the instructor table whose salary is greater than the minimum salary of instructors in the Biology department.", "metadata": {}}
{"_id": "gpt3_3434", "text": "\nThis query selects the names of instructors from the instructor table who have a salary greater than the minimum salary of instructors in the Biology department.", "metadata": {}}
{"_id": "gpt3_3435", "text": "\nThis query will return the names of all instructors in the Biology department who have a salary higher than the lowest salary of any instructor in the Biology department.", "metadata": {}}
{"_id": "gpt3_3436", "text": "\nThis query will select all the names from the scientists table, and order the results alphabetically.", "metadata": {}}
{"_id": "gpt3_3437", "text": "\nThis SQL query selects the names of scientists from a table and orders them alphabetically.", "metadata": {}}
{"_id": "gpt3_3438", "text": "\nThe SELECT statement will return a list of the names of the scientists in alphabetical order.", "metadata": {}}
{"_id": "gpt3_3439", "text": "\nThis query will select the name of all scientists from a database and order them alphabetically.", "metadata": {}}
{"_id": "gpt3_3440", "text": "\nThis query selects the name of all scientists from a table, and orders them alphabetically.", "metadata": {}}
{"_id": "gpt3_3441", "text": "\nThis query will return the industry with the most companies, ordered by count in descending order and limited to the top result.", "metadata": {}}
{"_id": "gpt3_3442", "text": "\nThis query returns the Industry with the most Companies in the Companies table, ordered by the number of Companies in each Industry.", "metadata": {}}
{"_id": "gpt3_3443", "text": "\nThis query will return the industry with the most companies, by grouping all companies by industry and ordering the results by the count of companies in each industry, in descending order, and then limiting the results to the first one.", "metadata": {}}
{"_id": "gpt3_3444", "text": "\nThis query returns the industry with the most companies, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_3445", "text": "\nThis query will select the industry with the most companies from the Companies table, and order them by count in descending order, with a limit of 1.", "metadata": {}}
{"_id": "gpt3_3446", "text": "\nThis query will select the most common competition type from the competition table, ordered by the number of occurrences, and limit the result to one record.", "metadata": {}}
{"_id": "gpt3_3447", "text": "\nThis query will select the most common type of competition from the competition table and order the results by count in descending order. It will then limit the results to the first row, which will be the most common type of competition.", "metadata": {}}
{"_id": "gpt3_3448", "text": "\nThis query will return the most common type of competition in the competition table, ordered by the number of occurrences.", "metadata": {}}
{"_id": "gpt3_3449", "text": "\nThis query will return the competition type with the most entries, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_3450", "text": "\nThis query will return the most common type of competition from the competition table, ordered by the number of occurrences in descending order, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_3451", "text": "\nThis query will select the FirstName and LastName from the CUSTOMER table where the Email is \"luisg@embraer.com.br\".", "metadata": {}}
{"_id": "gpt3_3452", "text": "\nThis query will return the first name and last name of the customer whose email address is \"luisg@embraer.com.br\".", "metadata": {}}
{"_id": "gpt3_3453", "text": "\nThis statement will select the first name and last name of the customer with the email address \"luisg@embraer.com.br\" from the CUSTOMER table.", "metadata": {}}
{"_id": "gpt3_3454", "text": "\nThis query will return the first and last name of the customer with the email address \"luisg@embraer.com.br\" from the CUSTOMER table.", "metadata": {}}
{"_id": "gpt3_3455", "text": "\nThis query will return the first and last name of the customer with the email address \"luisg@embraer.com.br\".", "metadata": {}}
{"_id": "gpt3_3456", "text": "\nThis query will return the first name, last name, salary, and department ID of each employee in the employees table, as well as the maximum salary for each department.", "metadata": {}}
{"_id": "gpt3_3457", "text": "\nThis query will return the first name, last name, salary, and department ID of the employee with the highest salary in each department.", "metadata": {}}
{"_id": "gpt3_3458", "text": "\nThis query returns the first name, last name, salary, and department ID of the employee with the highest salary in each department.", "metadata": {}}
{"_id": "gpt3_3459", "text": "\nThis query selects the first name, last name, salary, and department ID of each employee in the employees table, and then groups them by department ID to find the highest salary in each department.", "metadata": {}}
{"_id": "gpt3_3460", "text": "\nThis query is used to select the first name, last name, salary, and department ID of an employee with the highest salary in each department.", "metadata": {}}
{"_id": "gpt3_3461", "text": "\nThis statement will select the distinct names of wines from the WINE table that have an Appellation from the APPELLATIONs table with an Area of \"North Coast\".", "metadata": {}}
{"_id": "gpt3_3462", "text": "\nThis query will select the distinct names of wines from the \"North Coast\" area.", "metadata": {}}
{"_id": "gpt3_3463", "text": "\nThis query will select all distinct names of wines from the WINE table that have an Appelation from the APPELLATIONs table that is located in the North Coast area.", "metadata": {}}
{"_id": "gpt3_3464", "text": "\nThis query will select the distinct names of all wines from the \"North Coast\" area.", "metadata": {}}
{"_id": "gpt3_3465", "text": "\nThis query selects the distinct names of wines from the \"North Coast\" area.", "metadata": {}}
{"_id": "gpt3_3466", "text": "\nThis query will select the date from the game table and order the results by the home team in descending order.", "metadata": {}}
{"_id": "gpt3_3467", "text": "\nThis query will return a list of dates from the game table, sorted in descending order by the home team.", "metadata": {}}
{"_id": "gpt3_3468", "text": "\nThis query will select the date from the game table, ordered by the home team in descending order.", "metadata": {}}
{"_id": "gpt3_3469", "text": "\nThis query will return a list of dates from the game table, sorted in descending order by home_team.", "metadata": {}}
{"_id": "gpt3_3470", "text": "\nThis query will return a list of dates from the game table, sorted in descending order by the home_team column.", "metadata": {}}
{"_id": "gpt3_3471", "text": "\nThis query will return the most common occupation from the player table, sorted by the number of occurrences in descending order. The result will be the occupation with the highest count.", "metadata": {}}
{"_id": "gpt3_3472", "text": "\nThis query will select the most common occupation from the player table and display it.", "metadata": {}}
{"_id": "gpt3_3473", "text": "\nThis query will return the most common occupation among players in the table, sorted by the number of occurrences in descending order.", "metadata": {}}
{"_id": "gpt3_3474", "text": "\nThis query will return the Occupation with the highest count from the player table, ordered by the count in descending order.", "metadata": {}}
{"_id": "gpt3_3475", "text": "\nThis query returns the most common occupation of players in the player table, which is the occupation with the highest count.", "metadata": {}}
{"_id": "gpt3_3476", "text": "\nThis query will return the number of customer orders that have an order detail of \"Second time\".", "metadata": {}}
{"_id": "gpt3_3477", "text": "\nThis query would return the number of customer orders that have the order details of \"Second time\".", "metadata": {}}
{"_id": "gpt3_3478", "text": "\nThis query will return the number of customer orders that have the order details of \"Second time\".", "metadata": {}}
{"_id": "gpt3_3479", "text": "\nThis query will return the number of customer orders with the order details of \"Second time\".", "metadata": {}}
{"_id": "gpt3_3480", "text": "\nThis query will return the total number of customer orders where the order details are equal to \"Second time\".", "metadata": {}}
{"_id": "gpt3_3481", "text": "\nThis query returns the maximum, average, and minimum student GPAs for each department code.", "metadata": {}}
{"_id": "gpt3_3482", "text": "\nThis query will select the maximum, average, and minimum student GPA in each department code from the student table.", "metadata": {}}
{"_id": "gpt3_3483", "text": "\nThis query will return the maximum, average, and minimum student grade point averages (GPA) for each department code from the student table.", "metadata": {}}
{"_id": "gpt3_3484", "text": "\nThis query will return the maximum, average, and minimum student GPA for each department code in the student table.", "metadata": {}}
{"_id": "gpt3_3485", "text": "\nThis statement will return the maximum, average, and minimum student GPA for each department code in the student table.", "metadata": {}}
{"_id": "gpt3_3486", "text": "\nThe above statement will select the flight number (flno) and distance for the most expensive Flight in the Flight table, and order the results by price in descending order, with a limit of 1 result.", "metadata": {}}
{"_id": "gpt3_3487", "text": "\nThis query will select the flight number and distance of the most expensive flight in the Flight table, ordered by price in descending order, and limit the results to the top row.", "metadata": {}}
{"_id": "gpt3_3488", "text": "\nThis query will select the flight number and distance of the Flight with the highest price and order them in descending order.", "metadata": {}}
{"_id": "gpt3_3489", "text": "\nThis query will return the flight number and distance of the most expensive flight in the Flight table, sorted in descending order by price.", "metadata": {}}
{"_id": "gpt3_3490", "text": "\nThis query will return the flight number and distance of the flight with the highest price, ordered in descending order and limited to the first result.", "metadata": {}}
{"_id": "gpt3_3491", "text": "\nThis query will return the average number of followers for all users who have posted a tweet.", "metadata": {}}
{"_id": "gpt3_3492", "text": "\nThis query returns the average number of followers for users who have tweeted.", "metadata": {}}
{"_id": "gpt3_3493", "text": "\nThis query will return the average number of followers from all user profiles where the UID appears in the tweets table.", "metadata": {}}
{"_id": "gpt3_3494", "text": "\nThis query returns the average number of followers for all users who have tweeted.", "metadata": {}}
{"_id": "gpt3_3495", "text": "\nThis query will return the average number of followers for all users who have posted tweets.", "metadata": {}}
{"_id": "gpt3_3496", "text": "\nThis query selects the first name (fname) of any student who is between the ages of 20 and 25 and who lives in a city with a code of 'PHL'.", "metadata": {}}
{"_id": "gpt3_3497", "text": "\nThis query would select the first name of any student from the student table who is between the ages of 20 and 25 and whose city code is 'PHL'.", "metadata": {}}
{"_id": "gpt3_3498", "text": "\nThis query will select the first name of all students from the city code 'PHL' who are between the ages of 20 and 25.", "metadata": {}}
{"_id": "gpt3_3499", "text": "\nThis statement will select the first name (fname) of students from the student table who are between the ages of 20 and 25, and who live in the city with the code 'PHL'.", "metadata": {}}
{"_id": "gpt3_3500", "text": "\nThis query will select the first name of all students from the 'student' table who live in the city with the code 'PHL' and are between the ages of 20 and 25.", "metadata": {}}
{"_id": "gpt3_3501", "text": "\nThis query selects the name of the department associated with the student with the lowest GPA, in ascending order.", "metadata": {}}
{"_id": "gpt3_3502", "text": "\nThis query selects the department name from the department table for the student with the lowest GPA, ordered by student GPA.", "metadata": {}}
{"_id": "gpt3_3503", "text": "\nThis query selects the department name from the department table for the student with the lowest GPA, ordered by student GPA.", "metadata": {}}
{"_id": "gpt3_3504", "text": "\nThis SQL statement retrieves the department name from the department table for the student with the lowest GPA, ordered by student GPA.", "metadata": {}}
{"_id": "gpt3_3505", "text": "\nThis SQL query retrieves the department name from the department table associated with the student with the lowest GPA from the student table, ordered by student GPA in ascending order, and limited to the first result.", "metadata": {}}
{"_id": "gpt3_3506", "text": "\nThis query will return the distinct names of all departments where the PrimaryAffiliation is equal to 1.", "metadata": {}}
{"_id": "gpt3_3507", "text": "\nThis query returns a list of distinct names of departments where the person has a primary affiliation.", "metadata": {}}
{"_id": "gpt3_3508", "text": "\nThis query will select all distinct names of departments from the affiliated_with and department tables where the primary affiliation is set to 1.", "metadata": {}}
{"_id": "gpt3_3509", "text": "\nThis statement returns the names of all departments that have at least one primary affiliation.", "metadata": {}}
{"_id": "gpt3_3510", "text": "\nThis query selects the names of all departments with at least one primary affiliation.", "metadata": {}}
{"_id": "gpt3_3511", "text": "\nThis query selects the name and cost of all procedures from a table and orders them by cost in descending order.", "metadata": {}}
{"_id": "gpt3_3512", "text": "\nThis query selects the name and cost of procedures from a database and orders them from highest to lowest cost.", "metadata": {}}
{"_id": "gpt3_3513", "text": "\nThis query selects the name and cost of procedures from a database and orders them by cost in descending order.", "metadata": {}}
{"_id": "gpt3_3514", "text": "\nThis query will return the name and cost of all procedures in the table, ordered by cost in descending order (highest cost first).", "metadata": {}}
{"_id": "gpt3_3515", "text": "\nThis query will select the name and cost of all procedures from a table and order them in descending order by cost.", "metadata": {}}
{"_id": "gpt3_3516", "text": "\nThis query returns the total number of routes from each airport, grouped by the airport's name.", "metadata": {}}
{"_id": "gpt3_3517", "text": "\nThis query will count the number of routes that originate from each airport and return the name of the airport along with the count.", "metadata": {}}
{"_id": "gpt3_3518", "text": "\nThis query counts the number of routes that originate from each airport and returns the name of the airport.", "metadata": {}}
{"_id": "gpt3_3519", "text": "\nThis query will count the number of routes for each airport and return the airport name along with the count.", "metadata": {}}
{"_id": "gpt3_3520", "text": "\nThis query counts the number of routes for each airport, grouped by the name of the airport.", "metadata": {}}
{"_id": "gpt3_3521", "text": "\nThis query returns the total number of students in the student table.", "metadata": {}}
{"_id": "gpt3_3522", "text": "\nThis query will return the total number of students in the student table.", "metadata": {}}
{"_id": "gpt3_3523", "text": "\nThis query will return the total number of students in the student table.", "metadata": {}}
{"_id": "gpt3_3524", "text": "\nThis query returns the total number of students in the student table.", "metadata": {}}
{"_id": "gpt3_3525", "text": "\nThis SQL query will count the total number of students in a table.", "metadata": {}}
{"_id": "gpt3_3526", "text": "\nThis statement will select all distinct ages of heads from the management table where the temporary_acting field is set to 'Yes'.", "metadata": {}}
{"_id": "gpt3_3527", "text": "\nThis query selects the distinct ages of all heads who are currently acting in a temporary management position.", "metadata": {}}
{"_id": "gpt3_3528", "text": "\nThis query will return a list of distinct ages from the head table that are associated with a manager who is currently acting in a temporary role.", "metadata": {}}
{"_id": "gpt3_3529", "text": "\nThis query selects the distinct ages of all heads who are currently acting in a management role.", "metadata": {}}
{"_id": "gpt3_3530", "text": "\nThis query selects all distinct ages from the head table of all heads who are currently acting as managers in the management table.", "metadata": {}}
{"_id": "gpt3_3531", "text": "\nThis statement will select the player name and residence from the player table where the occupation is not equal to \"Researcher\".", "metadata": {}}
{"_id": "gpt3_3532", "text": "\nThis query will return a list of players' names and their residences, who are not researchers.", "metadata": {}}
{"_id": "gpt3_3533", "text": "\nThis query will select the player name and residence of all players whose occupation is not \"Researcher\".", "metadata": {}}
{"_id": "gpt3_3534", "text": "\nThis query will return the names and residences of players who are not researchers.", "metadata": {}}
{"_id": "gpt3_3535", "text": "\nThis query will select the player name and residence from the player table where the occupation is not equal to \"Researcher\".", "metadata": {}}
{"_id": "gpt3_3536", "text": "\nThis query will return the Delegate and Committee columns from the election table.", "metadata": {}}
{"_id": "gpt3_3537", "text": "\nThis query will return a list of all the delegates and their associated committees from the election.", "metadata": {}}
{"_id": "gpt3_3538", "text": "\nThis query will return a list of delegates and the committees they are assigned to from the election table.", "metadata": {}}
{"_id": "gpt3_3539", "text": "\nThis query will return a list of delegates and the committees they are assigned to from the election table.", "metadata": {}}
{"_id": "gpt3_3540", "text": "\nThis query will return a list of delegates and their corresponding committee from the election table.", "metadata": {}}
{"_id": "gpt3_3541", "text": "\nThis query selects the balance from both the checking and savings accounts, as well as the customer name, from three tables: accounts, checking, and savings. The query joins the three tables by the customer id.", "metadata": {}}
{"_id": "gpt3_3542", "text": "\nThis statement selects the balance from the checking and savings accounts, as well as the name of the customer from the accounts table, for each customer in the database.", "metadata": {}}
{"_id": "gpt3_3543", "text": "\nThis statement selects the balance of a customer's checking account, the balance of a customer's savings account, and the customer's name from three tables: accounts, checking, and savings. It joins the accounts table with the checking table on the cust", "metadata": {}}
{"_id": "gpt3_3544", "text": "\nThis query will retrieve the balance from the checking and savings accounts, as well as the name of the customer, from the accounts, checking, and savings tables.", "metadata": {}}
{"_id": "gpt3_3545", "text": "\nThis query selects the balances from the checking and savings accounts as well as the customer's name from the accounts table for all customers.", "metadata": {}}
{"_id": "gpt3_3546", "text": "\nThis query will select the last name of the student with the minimum age from the Student table.", "metadata": {}}
{"_id": "gpt3_3547", "text": "\nThis query will select the last name (LName) of the student with the minimum age from the Student table.", "metadata": {}}
{"_id": "gpt3_3548", "text": "\nThis query selects the last name of the student with the minimum age from the Student table.", "metadata": {}}
{"_id": "gpt3_3549", "text": "\nThis query will select the last name of the student with the minimum age from the Student table.", "metadata": {}}
{"_id": "gpt3_3550", "text": "\nThis statement will select the last name from the Student table where the age is equal to the minimum age found in the Student table.", "metadata": {}}
{"_id": "gpt3_3551", "text": "\nThis query will return all the unique transaction types from the Financial_Transactions table.", "metadata": {}}
{"_id": "gpt3_3552", "text": "\nThe SELECT DISTINCT statement returns a list of unique values from the specified column in the Financial_Transactions table.", "metadata": {}}
{"_id": "gpt3_3553", "text": "\nThis query will return all the unique transaction types from the Financial_Transactions table.", "metadata": {}}
{"_id": "gpt3_3554", "text": "\nThis SQL query will return a list of all the distinct transaction types from the Financial_Transactions table.", "metadata": {}}
{"_id": "gpt3_3555", "text": "\nThis query will return a list of all distinct transaction types from the Financial_Transactions table.", "metadata": {}}
{"_id": "gpt3_3556", "text": "\nThis query would return the Status of any city that has a Population greater than 1500 and less than 500.", "metadata": {}}
{"_id": "gpt3_3557", "text": "\nThis query will return the status of all cities that have a population between 500 and 1500.", "metadata": {}}
{"_id": "gpt3_3558", "text": "\nThis query will return the Status of any cities that have a population greater than 1500 and less than 500.", "metadata": {}}
{"_id": "gpt3_3559", "text": "\nThis query would return the Status of any city that has a population greater than 1500 and less than 500.", "metadata": {}}
{"_id": "gpt3_3560", "text": "\nThis query will return the Status of any city with a population between 500 and 1500.", "metadata": {}}
{"_id": "gpt3_3561", "text": "\nThis statement selects the names of ships from a table where the nationality is either United States or United Kingdom.", "metadata": {}}
{"_id": "gpt3_3562", "text": "\nThis statement selects the names of ships from a table where the nationality is either \"United States\" or \"United Kingdom\".", "metadata": {}}
{"_id": "gpt3_3563", "text": "\nThis query selects the names of ships from a table where the nationality is either from the United States or the United Kingdom.", "metadata": {}}
{"_id": "gpt3_3564", "text": "\nThis statement will select the names of all ships from the ship table that have a nationality of either United States or United Kingdom.", "metadata": {}}
{"_id": "gpt3_3565", "text": "\nThis statement selects the name of ships from a database where the nationality is either \"United States\" or \"United Kingdom\".", "metadata": {}}
{"_id": "gpt3_3566", "text": "\nThis query selects the City_Town from Addresses associated with Customers, but not associated with Performers.", "metadata": {}}
{"_id": "gpt3_3567", "text": "\nThis query selects the City_Town values from the Addresses table associated with Customers, but not associated with Performers.", "metadata": {}}
{"_id": "gpt3_3568", "text": "\nThis query selects all city/towns from the Addresses table that are associated with customers, but not associated with performers.", "metadata": {}}
{"_id": "gpt3_3569", "text": "\nThis query returns a list of City_Town values from the Addresses table that are associated with Customers, but not associated with Performers.", "metadata": {}}
{"_id": "gpt3_3570", "text": "\nThis query selects all the City_Town values from the Addresses table associated with customers that are not associated with performers.", "metadata": {}}
{"_id": "gpt3_3571", "text": "\nThis query selects the names of all manufacturers with a revenue higher than the average revenue of all manufacturers.", "metadata": {}}
{"_id": "gpt3_3572", "text": "\nThis query selects the names of all manufacturers that have a revenue greater than the average revenue of all manufacturers.", "metadata": {}}
{"_id": "gpt3_3573", "text": "\nThis statement returns the names of all manufacturers that have a revenue greater than the average revenue of all manufacturers.", "metadata": {}}
{"_id": "gpt3_3574", "text": "\nThis statement selects the name of all manufacturers from a table that have a revenue greater than the average revenue of all manufacturers in the table.", "metadata": {}}
{"_id": "gpt3_3575", "text": "\nThis query will select the name of all manufacturers that have a revenue greater than the average revenue of all manufacturers.", "metadata": {}}
{"_id": "gpt3_3576", "text": "\nThis statement will select all the distinct cities from the addresses table that are associated with the people_addresses table.", "metadata": {}}
{"_id": "gpt3_3577", "text": "\nThis SQL statement will select all distinct cities from the addresses table that are associated with people_addresses.", "metadata": {}}
{"_id": "gpt3_3578", "text": "\nThis statement selects distinct city values from the addresses table, joining it with the people_addresses table on the address_id column.", "metadata": {}}
{"_id": "gpt3_3579", "text": "\nThis SQL statement selects all distinct cities from the addresses table that have a corresponding entry in the people_addresses table.", "metadata": {}}
{"_id": "gpt3_3580", "text": "\nThis statement selects all the distinct cities from the addresses table that have a corresponding entry in the people_addresses table.", "metadata": {}}
{"_id": "gpt3_3581", "text": "\nThis query returns the product IDs of the problems reported by Christop Berge and authorised for closure by Ashley Medhurst.", "metadata": {}}
{"_id": "gpt3_3582", "text": "\nThis query selects the product_id from the problems table for which Christop Berge reported and Ashley Medhurst authorised the closure.", "metadata": {}}
{"_id": "gpt3_3583", "text": "\nThis query selects the product_id from the problems table where the reported_by_staff_id matches the staff_id of a staff member with the first name \"Christop\" and last name \"Berge\", and the closure_author", "metadata": {}}
{"_id": "gpt3_3584", "text": "\nThis query selects the product_id from two different tables, 'problems' and 'staff'. It retrieves the product_id from 'problems' when the reported_by_staff_id from 'problems' matches the staff", "metadata": {}}
{"_id": "gpt3_3585", "text": "\nThis query returns the product_id of all problems reported by Christop Berge and authorised for closure by Ashley Medhurst.", "metadata": {}}
{"_id": "gpt3_3586", "text": "\nThis query will return a list of all distinct characteristic names from the CHARACTERISTICS table.", "metadata": {}}
{"_id": "gpt3_3587", "text": "\nThis SQL statement returns a list of all the distinct characteristic names from the CHARACTERISTICS table.", "metadata": {}}
{"_id": "gpt3_3588", "text": "\nThe SQL query SELECT DISTINCT characteristic_name FROM CHARACTERISTICS will retrieve a list of all the unique characteristic names from the CHARACTERISTICS table.", "metadata": {}}
{"_id": "gpt3_3589", "text": "\nThis SQL query selects all the distinct characteristic names from the CHARACTERISTICS table.", "metadata": {}}
{"_id": "gpt3_3590", "text": "\nThis statement retrieves all the distinct characteristic names from the CHARACTERISTICS table.", "metadata": {}}
{"_id": "gpt3_3591", "text": "\nThis query selects the weight of people associated with entrepreneurs, ordered by the amount of money requested by the entrepreneur in descending order.", "metadata": {}}
{"_id": "gpt3_3592", "text": "\nThis query selects the weight of people who are entrepreneurs, ordered by the amount of money requested by the entrepreneur.", "metadata": {}}
{"_id": "gpt3_3593", "text": "\nThis query selects the weight of people who are entrepreneurs, ordered by the amount of money requested.", "metadata": {}}
{"_id": "gpt3_3594", "text": "\nThis query will select the weight of the people associated with each entrepreneur, ordered by the amount of money requested by the entrepreneur in descending order.", "metadata": {}}
{"_id": "gpt3_3595", "text": "\nThis query retrieves the weight of people who are entrepreneurs, ordered by the amount of money they requested, from highest to lowest.", "metadata": {}}
{"_id": "gpt3_3596", "text": "\nThis query selects the customer details and customer ID from the Customers table (T1) and joins it with the Customer_Policies table (T2). It then groups the results by customer ID and only returns records that have a count greater", "metadata": {}}
{"_id": "gpt3_3597", "text": "\nThis query selects the customer details and customer ID from the Customers table, joining it with the Customer_Policies table using the customer ID. It then groups the results by customer ID and only returns those that have more than one policy associated with", "metadata": {}}
{"_id": "gpt3_3598", "text": "\nThis query selects the customer details and customer IDs from the Customers table and joins them to the Customer_Policies table. It then groups the results by customer ID and only returns those customers who have more than one policy.", "metadata": {}}
{"_id": "gpt3_3599", "text": "\nThis query selects the customer details and customer ID from the Customers and Customer Policies tables, joining them on the customer ID. It then groups the results by customer ID and only returns customers who have more than one policy.", "metadata": {}}
{"_id": "gpt3_3600", "text": "\nThis query selects the customer details and customer IDs from the Customers and Customer_Policies tables, and groups them by customer ID, having the count of customer IDs greater than 1. This query can be used to find customers who have more than", "metadata": {}}
{"_id": "gpt3_3601", "text": "\nThis query returns the number of colors in the Ref_colors table that are not present in the Products table.", "metadata": {}}
{"_id": "gpt3_3602", "text": "\nThis query will return the count of all the colors in the Ref_colors table that are not present in the products table.", "metadata": {}}
{"_id": "gpt3_3603", "text": "\nThis query returns the count of the number of colors in the Ref_colors table that are not being used in the products table.", "metadata": {}}
{"_id": "gpt3_3604", "text": "\nThis query returns the total number of colors in the Ref_colors table that are not used in the products table.", "metadata": {}}
{"_id": "gpt3_3605", "text": "\nThis query will return the number of colors in the Ref_colors table that are not present in the products table.", "metadata": {}}
{"_id": "gpt3_3606", "text": "\nThis query will select the document name and access count from the documents table and order the results by document name.", "metadata": {}}
{"_id": "gpt3_3607", "text": "\nThis query will return a list of documents, along with their respective access counts, ordered alphabetically by document name.", "metadata": {}}
{"_id": "gpt3_3608", "text": "\nThis query will return a list of documents, sorted alphabetically, along with the number of times each document has been accessed.", "metadata": {}}
{"_id": "gpt3_3609", "text": "\nThis query retrieves the document name and access count of all documents in the database, sorted in alphabetical order by document name.", "metadata": {}}
{"_id": "gpt3_3610", "text": "\nThis query retrieves the document name and access count for all documents in a database, ordered alphabetically by document name.", "metadata": {}}
{"_id": "gpt3_3611", "text": "\nThis query counts the number of artists who do not have any albums in the ALBUM table.", "metadata": {}}
{"_id": "gpt3_3612", "text": "\nThis query will count the number of artists who have not released any albums.", "metadata": {}}
{"_id": "gpt3_3613", "text": "\nThis query will count the number of artists in the ARTIST table who do not have any albums in the ALBUM table.", "metadata": {}}
{"_id": "gpt3_3614", "text": "\nThis query returns the number of artists in the ARTIST table who do not have an album in the ALBUM table.", "metadata": {}}
{"_id": "gpt3_3615", "text": "\nThis query will count the number of artists who do not have any albums in the ALBUM table.", "metadata": {}}
{"_id": "gpt3_3616", "text": "\nThis query will return the number of submissions for each college.", "metadata": {}}
{"_id": "gpt3_3617", "text": "\nThis query will return a list of colleges and the number of submissions associated with each college.", "metadata": {}}
{"_id": "gpt3_3618", "text": "\nThis query will return a list of colleges and the number of submissions associated with each college.", "metadata": {}}
{"_id": "gpt3_3619", "text": "\nThis query will count the number of submissions from each college.", "metadata": {}}
{"_id": "gpt3_3620", "text": "\nThis query will return the number of submissions for each college in the submission table.", "metadata": {}}
{"_id": "gpt3_3621", "text": "\nThis statement will select all unique allergy types from the Allergy_type table.", "metadata": {}}
{"_id": "gpt3_3622", "text": "\nThis statement will return a list of all the distinct allergy types in the Allergy_type table.", "metadata": {}}
{"_id": "gpt3_3623", "text": "\nThis query will select all unique allergy types from the Allergy_type table.", "metadata": {}}
{"_id": "gpt3_3624", "text": "\nThis SQL statement will return a list of all the distinct allergy types from the Allergy_type table.", "metadata": {}}
{"_id": "gpt3_3625", "text": "\nThis query will return a list of all unique allergy types from the Allergy_type table.", "metadata": {}}
{"_id": "gpt3_3626", "text": "\nThis query selects the phone number of the customer who most recently raised a complaint, ordered by the date the complaint was raised.", "metadata": {}}
{"_id": "gpt3_3627", "text": "\nThis query retrieves the phone number of the customer who raised the most recent complaint from the customers and complaints tables.", "metadata": {}}
{"_id": "gpt3_3628", "text": "\nThis query selects the phone number of the customer who filed the most recent complaint from the customers and complaints tables, ordered by date of complaint raised in descending order and limited to 1 result.", "metadata": {}}
{"_id": "gpt3_3629", "text": "\nThis query selects the phone number of the customer who has made the most recent complaint, ordered by the date of the complaint, and limits the result to one row.", "metadata": {}}
{"_id": "gpt3_3630", "text": "\nThis query selects the phone number of the customer who has most recently filed a complaint from the customers and complaints tables, ordered by the date the complaint was raised.", "metadata": {}}
{"_id": "gpt3_3631", "text": "\nThis query will select the policy type code with the highest number of customer policies and return the code.", "metadata": {}}
{"_id": "gpt3_3632", "text": "\nThis query will select the Policy Type Code from the Customer Policies table, group the results by Policy Type Code, order the results by count in descending order, and return the top result. This query will return the Policy Type Code that is most commonly", "metadata": {}}
{"_id": "gpt3_3633", "text": "\nThis query will return the Policy_Type_Code that appears most frequently in the Customer_Policies table, ordered by the number of occurrences.", "metadata": {}}
{"_id": "gpt3_3634", "text": "\nThis query will select the Policy_Type_Code from the Customer_Policies table and group them by Policy_Type_Code in descending order. It will then limit the results to the top 1 record. This query will return the most", "metadata": {}}
{"_id": "gpt3_3635", "text": "\nThis query selects the Policy Type Code from the Customer Policies table, groups them by Policy Type Code, orders them by count in descending order, and limits the result to the top Policy Type Code. This will return the most common Policy Type Code in", "metadata": {}}
{"_id": "gpt3_3636", "text": "\nThe result of the query is the sum of all payments in the Payments table.", "metadata": {}}
{"_id": "gpt3_3637", "text": "\nThe result of the query is the sum of all amounts in the Payments table.", "metadata": {}}
{"_id": "gpt3_3638", "text": "\nThis query will return the total sum of all payments made in the Payments table.", "metadata": {}}
{"_id": "gpt3_3639", "text": "\nThis query will return the total sum of all payments made in the Payments table.", "metadata": {}}
{"_id": "gpt3_3640", "text": "\nThe query will return the total sum of all payments in the Payments table.", "metadata": {}}
{"_id": "gpt3_3641", "text": "\nThis query will return a list of all distinct song names from the song table where the resolution is greater than the minimum resolution of all songs in the table that are in English.", "metadata": {}}
{"_id": "gpt3_3642", "text": "\nThis query will select all the distinct song names from the song table where the resolution is greater than the minimum resolution from songs that are in English.", "metadata": {}}
{"_id": "gpt3_3643", "text": "\nThis query returns a list of all unique song names from the song table where the resolution is greater than the minimum resolution of all songs with the language of English.", "metadata": {}}
{"_id": "gpt3_3644", "text": "\nThis query will select all distinct song names from the song table where the resolution is greater than the minimum resolution of songs in the table that are in English.", "metadata": {}}
{"_id": "gpt3_3645", "text": "\nThis query will return a list of all distinct song names from the song table where the resolution is greater than the minimum resolution of any song in the table with the language set to \"English\".", "metadata": {}}
{"_id": "gpt3_3646", "text": "\nThe average amount of money requested from entrepreneurs is $1,365,072.", "metadata": {}}
{"_id": "gpt3_3647", "text": "\nThis query returns the average amount of money requested by entrepreneurs from a given database.", "metadata": {}}
{"_id": "gpt3_3648", "text": "\nThe average amount requested by entrepreneurs is $50,000.", "metadata": {}}
{"_id": "gpt3_3649", "text": "\nThe average amount of money requested by entrepreneurs is $25,000.", "metadata": {}}
{"_id": "gpt3_3650", "text": "\nThe average amount of money requested by entrepreneurs is $7,819.", "metadata": {}}
{"_id": "gpt3_3651", "text": "\nThis query will return the names of all students who are not taking any courses in the Biology department.", "metadata": {}}
{"_id": "gpt3_3652", "text": "\nThis statement will select the name of any student who is not enrolled in any course in the Biology department.", "metadata": {}}
{"_id": "gpt3_3653", "text": "\nThis query will return the names of all students who are not enrolled in any Biology courses.", "metadata": {}}
{"_id": "gpt3_3654", "text": "\nThis query will select the names of all students who are not taking any courses in Biology.", "metadata": {}}
{"_id": "gpt3_3655", "text": "\nThis statement will select the name of all students who are not registered for any Biology courses.", "metadata": {}}
{"_id": "gpt3_3656", "text": "\nThis query will select the head of the department with the least number of departmentIDs and order the results by the count of departmentIDs.", "metadata": {}}
{"_id": "gpt3_3657", "text": "\nThis query will select the head of the department with the least number of employees, ordered by the count of the department ID and limited to one result.", "metadata": {}}
{"_id": "gpt3_3658", "text": "\nThis query returns the head of the department with the fewest employees, ordered by the count of departmentID and limited to one result.", "metadata": {}}
{"_id": "gpt3_3659", "text": "\nThis query will return the head of the department with the least number of department IDs, ordered by the count of the department IDs.", "metadata": {}}
{"_id": "gpt3_3660", "text": "\nThis query will select the head of the department with the least number of department IDs, ordered by the count of department IDs, and limited to one result.", "metadata": {}}
{"_id": "gpt3_3661", "text": "\nThis query selects the Planned Delivery Date and Actual Delivery Date from the BOOKINGS table.", "metadata": {}}
{"_id": "gpt3_3662", "text": "\nThis query selects the planned delivery date and actual delivery date from the bookings table.", "metadata": {}}
{"_id": "gpt3_3663", "text": "\nThis query will select the Planned Delivery Date and the Actual Delivery Date from the BOOKINGS table.", "metadata": {}}
{"_id": "gpt3_3664", "text": "\nThis query returns the Planned Delivery Date and Actual Delivery Date from the BOOKINGS table.", "metadata": {}}
{"_id": "gpt3_3665", "text": "\nThis query retrieves the Planned Delivery Date and Actual Delivery Date from the BOOKINGS table.", "metadata": {}}
{"_id": "gpt3_3666", "text": "\nThis query returns the total number of records in the county table.", "metadata": {}}
{"_id": "gpt3_3667", "text": "\nThis query would return the total number of records in the county table.", "metadata": {}}
{"_id": "gpt3_3668", "text": "\nThis query returns the total number of records in the county table.", "metadata": {}}
{"_id": "gpt3_3669", "text": "\nThis query will return the total count of records in the county table.", "metadata": {}}
{"_id": "gpt3_3670", "text": "\nThis query returns the total number of records in the county table.", "metadata": {}}
{"_id": "gpt3_3671", "text": "\nThis query returns the name of the tourist attraction, the ID of the tourist attraction, and the number of visits for each attraction.", "metadata": {}}
{"_id": "gpt3_3672", "text": "\nThis query returns the name of the tourist attraction, the ID of the tourist attraction, and a count of how many times the attraction was visited.", "metadata": {}}
{"_id": "gpt3_3673", "text": "\nThis query returns the name of the tourist attraction, the ID of the tourist attraction, and the count of visits for each tourist attraction.", "metadata": {}}
{"_id": "gpt3_3674", "text": "\nThis query will select the name of the tourist attraction, the ID of the tourist attraction, and the count of visits to each attraction. It will group the results by the ID of the tourist attraction.", "metadata": {}}
{"_id": "gpt3_3675", "text": "\nThis query returns a list of tourist attractions, their IDs, and the number of visits for each attraction.", "metadata": {}}
{"_id": "gpt3_3676", "text": "\nThis query will count the total number of rows in the club table.", "metadata": {}}
{"_id": "gpt3_3677", "text": "\nThis query returns the total number of records in the club table.", "metadata": {}}
{"_id": "gpt3_3678", "text": "\nThis query returns the total number of rows in the club table.", "metadata": {}}
{"_id": "gpt3_3679", "text": "\nThis query will return the total number of records in the club table.", "metadata": {}}
{"_id": "gpt3_3680", "text": "\nThis query counts the total number of records in the club table.", "metadata": {}}
{"_id": "gpt3_3681", "text": "\nThis statement selects the distinct names of nurses from the nurse and on_call tables, based on the nurse's EmployeeID.", "metadata": {}}
{"_id": "gpt3_3682", "text": "\nThis query selects the distinct names of nurses from the nurse and on_call tables based on the nurse's EmployeeID.", "metadata": {}}
{"_id": "gpt3_3683", "text": "\nThis SQL statement selects the distinct names of nurses from the nurse and on_call tables, based on their EmployeeID.", "metadata": {}}
{"_id": "gpt3_3684", "text": "\nThis query will select the distinct names of nurses from the nurse and on_call tables, based on the EmployeeID of the nurse.", "metadata": {}}
{"_id": "gpt3_3685", "text": "\nThis statement will select the distinct names of nurses from the nurse and on_call tables that have the same EmployeeID.", "metadata": {}}
{"_id": "gpt3_3686", "text": "\nThis query retrieves all document IDs from the Documents table with a document status code of 'done' and a document type code of 'Paper', except for any documents that are associated with the USPS shipping agent.", "metadata": {}}
{"_id": "gpt3_3687", "text": "\nThis query finds all documents with a status code of \"done\" and a type code of \"Paper\" that are not associated with the shipping agent \"USPS\".", "metadata": {}}
{"_id": "gpt3_3688", "text": "\nThis query selects all document IDs from the Documents table with a document status code of \"done\" and a document type code of \"Paper,\" that are not associated with the shipping agent name \"USPS\" from the Ref_Shipping_Agents", "metadata": {}}
{"_id": "gpt3_3689", "text": "\nThis query returns all documents with a document status code of \"done\" and a document type code of \"Paper\" that do not have a shipping agent name of \"USPS\".", "metadata": {}}
{"_id": "gpt3_3690", "text": "\nThis query returns all documents with the status code \"done\" and document type code \"Paper\" that are not shipped by USPS.", "metadata": {}}
{"_id": "gpt3_3691", "text": "\nThis query will return the names of all instructors in the department of Computer Science with a salary greater than 80,000.", "metadata": {}}
{"_id": "gpt3_3692", "text": "\nThis query will select the name of all instructors in the computer science department who have a salary greater than $80,000.", "metadata": {}}
{"_id": "gpt3_3693", "text": "\nThis query selects the name of any instructor from the department of Computer Science with a salary greater than 80000.", "metadata": {}}
{"_id": "gpt3_3694", "text": "\nThis query will select the name of any instructor from the department of Computer Science with a salary greater than 80000.", "metadata": {}}
{"_id": "gpt3_3695", "text": "\nThis query will select the name of any instructor from the department of Computer Science with a salary greater than 80000.", "metadata": {}}
{"_id": "gpt3_3696", "text": "\nThis query selects the product_id from the product_suppliers table where the supplier_id is 2 and the product_price is greater than the average product_price from the products table.", "metadata": {}}
{"_id": "gpt3_3697", "text": "\nThis query selects the product_id from the product_suppliers table for any product with a supplier_id of 2 that has a product_price greater than the average product_price from the products table.", "metadata": {}}
{"_id": "gpt3_3698", "text": "\nThis query selects the product_id from the product_suppliers table, T1, that have a supplier_id of 2 and a product_price from the products table, T2, that is greater than the average product_price", "metadata": {}}
{"_id": "gpt3_3699", "text": "\nThis query selects the product_id from the product_suppliers table for supplier_id 2 which have a product_price greater than the average product_price from the products table.", "metadata": {}}
{"_id": "gpt3_3700", "text": "\nThis query selects all product_id values from the product_suppliers table (T1) that have a supplier_id of 2 and a product_price greater than the average product_price from the products table (T2).", "metadata": {}}
{"_id": "gpt3_3701", "text": "\nThis query selects the Total_Points column from the gymnast table and orders the results in descending order.", "metadata": {}}
{"_id": "gpt3_3702", "text": "\nThis query will return a list of all gymnasts in order of their total points, from highest to lowest.", "metadata": {}}
{"_id": "gpt3_3703", "text": "\nThis query will return a list of gymnast total points from highest to lowest.", "metadata": {}}
{"_id": "gpt3_3704", "text": "\nThis query will select the Total Points from the gymnast table and order them in descending order. It will return the Total Points of each gymnast in the table from the highest to the lowest.", "metadata": {}}
{"_id": "gpt3_3705", "text": "\nThis query will select the total points from the gymnast table and order them in descending order, from highest to lowest.", "metadata": {}}
{"_id": "gpt3_3706", "text": "\nThis query will return the countries in which mountains have heights that are greater than 5600 meters and less than 5200 meters.", "metadata": {}}
{"_id": "gpt3_3707", "text": "\nThis query returns the countries that have mountains with heights between 5200 and 5600 meters.", "metadata": {}}
{"_id": "gpt3_3708", "text": "\nThis query returns the countries that have mountains with heights between 5200 and 5600 meters.", "metadata": {}}
{"_id": "gpt3_3709", "text": "\nThis query returns the countries where mountains exist that are between 5600 and 5200 meters in height.", "metadata": {}}
{"_id": "gpt3_3710", "text": "\nThis query will return the name of the countries where mountains with heights between 5200 and 5600 meters are located.", "metadata": {}}
{"_id": "gpt3_3711", "text": "\nThis query will return a list of the distinct ages of students who voted for the Secretary in the Fall election cycle.", "metadata": {}}
{"_id": "gpt3_3712", "text": "\nThis query selects all the distinct ages of students who voted for the Secretary in the Fall election cycle.", "metadata": {}}
{"_id": "gpt3_3713", "text": "\nThis query will return a list of all the distinct ages of students who voted in the Fall election for Secretary.", "metadata": {}}
{"_id": "gpt3_3714", "text": "\nThis query will return a list of all distinct ages of students who voted for a secretary in the Fall election cycle.", "metadata": {}}
{"_id": "gpt3_3715", "text": "\nThis statement will return a list of all distinct ages of students who voted for the Secretary in the Fall election cycle.", "metadata": {}}
{"_id": "gpt3_3716", "text": "\nThis query will sum the order quantities for all orders placed before 2018-03-17 07:13:53.", "metadata": {}}
{"_id": "gpt3_3717", "text": "\nThis query will return the total sum of order quantities for all orders placed before 2018-03-17 07:13:53.", "metadata": {}}
{"_id": "gpt3_3718", "text": "\nThis query will return the sum of all order quantities for orders placed before 2018-03-17 07:13:53.", "metadata": {}}
{"_id": "gpt3_3719", "text": "\nThis query will return the sum of all order quantities for orders placed before 2018-03-17 07:13:53.", "metadata": {}}
{"_id": "gpt3_3720", "text": "\nThis query will return the sum of all order quantities for customer orders placed before 2018-03-17 07:13:53.", "metadata": {}}
{"_id": "gpt3_3721", "text": "\nThis query selects the distinct start station names from the trip table where the duration is less than 100.", "metadata": {}}
{"_id": "gpt3_3722", "text": "\nThis query returns a list of distinct start station names from the trip table where the duration is less than 100.", "metadata": {}}
{"_id": "gpt3_3723", "text": "\nThis query will return a list of all the distinct start station names from the trip table where the duration of the trip is less than 100 minutes.", "metadata": {}}
{"_id": "gpt3_3724", "text": "\nThis query retrieves the names of all the distinct start stations of trips that lasted less than 100 minutes.", "metadata": {}}
{"_id": "gpt3_3725", "text": "\nThis query will return a list of all the distinct start station names from the trip table where the duration is less than 100.", "metadata": {}}
{"_id": "gpt3_3726", "text": "\nThis query selects the member name and party name from the Member and Party tables, respectively, based on the party_id in both tables.", "metadata": {}}
{"_id": "gpt3_3727", "text": "\nThis statement selects the member name and party name from the Member and Party tables, respectively, by joining the two tables on the party_id column.", "metadata": {}}
{"_id": "gpt3_3728", "text": "\nThis statement selects the member name and party name from two tables, Member and Party, by joining them on the party_id column.", "metadata": {}}
{"_id": "gpt3_3729", "text": "\nThis statement selects the member name and party name from the Member and Party tables, respectively, based on the party_id in both tables.", "metadata": {}}
{"_id": "gpt3_3730", "text": "\nThis statement selects the member name and party name from the Member and Party tables, respectively, by joining the two tables based on the party_id column.", "metadata": {}}
{"_id": "gpt3_3731", "text": "\nThis query will return the number of distinct customers who have placed a cancelled order.", "metadata": {}}
{"_id": "gpt3_3732", "text": "\nThis query will return the number of distinct customers who have placed orders with a status of \"Cancelled\".", "metadata": {}}
{"_id": "gpt3_3733", "text": "\nThis query would return the number of distinct customer_id values from the customer_orders table where the order_status is \"Cancelled\".", "metadata": {}}
{"_id": "gpt3_3734", "text": "\nThis query will return the number of distinct customers who have placed a cancelled order.", "metadata": {}}
{"_id": "gpt3_3735", "text": "\nThis query will return the number of distinct customer IDs from the customer_orders table where the order_status is \"Cancelled\".", "metadata": {}}
{"_id": "gpt3_3736", "text": "\nThis SQL statement will select all of the distinct gtypes from the Video_games table.", "metadata": {}}
{"_id": "gpt3_3737", "text": "\nThis statement will return a list of all the distinct game types from the Video_games table.", "metadata": {}}
{"_id": "gpt3_3738", "text": "\nThis query will select all the distinct values of the \"gtype\" column from the Video_games table.", "metadata": {}}
{"_id": "gpt3_3739", "text": "\nThis SQL query will return a list of all the unique game types found in the Video_games table.", "metadata": {}}
{"_id": "gpt3_3740", "text": "\nThis SQL query will return a list of all the distinct game types present in the Video_games table.", "metadata": {}}
{"_id": "gpt3_3741", "text": "\nThis query will return the origin of each flight and the number of flights associated with each origin.", "metadata": {}}
{"_id": "gpt3_3742", "text": "\nThis query returns the number of flights for each origin.", "metadata": {}}
{"_id": "gpt3_3743", "text": "\nThis query will return the number of flights for each origin. It will return two columns, one for the origin and one for the count of flights for that origin.", "metadata": {}}
{"_id": "gpt3_3744", "text": "\nThis query will return the origin of each flight and the number of flights associated with that origin.", "metadata": {}}
{"_id": "gpt3_3745", "text": "\nThis query will return the origin and a count of the number of flights for each origin in the Flight table.", "metadata": {}}
{"_id": "gpt3_3746", "text": "\nThis query returns the highest lap speed, the name, and the year of each race that took place after 2014, ordered by year.", "metadata": {}}
{"_id": "gpt3_3747", "text": "\nThis query returns the maximum fastest lap speed, the name, and the year of races that have taken place after 2014, grouped by name and ordered by year.", "metadata": {}}
{"_id": "gpt3_3748", "text": "\nThis query returns the maximum fastest lap speed, the name, and the year of each race with a year greater than 2014, grouped by the race name and ordered by year.", "metadata": {}}
{"_id": "gpt3_3749", "text": "\nThis query finds the fastest lap speed, the race name, and the year of all races with a year greater than 2014 and groups them by race name, ordered by year.", "metadata": {}}
{"_id": "gpt3_3750", "text": "\nThis query finds the fastest lap speed, name, and year for all races after 2014, grouped by race name and ordered by year.", "metadata": {}}
{"_id": "gpt3_3751", "text": "\nThis query selects the distinct first names and city codes of students who have an allergy to either milk or cats.", "metadata": {}}
{"_id": "gpt3_3752", "text": "\nThis query selects the distinct first names and city codes of students who have either a milk or cat allergy.", "metadata": {}}
{"_id": "gpt3_3753", "text": "\nThis query selects the distinct first names and city codes of students who have either a milk or cat allergy.", "metadata": {}}
{"_id": "gpt3_3754", "text": "\nThis query selects distinct first names and city codes from the Student table for students who have either a Milk or Cat allergy, as indicated in the Has_Allergy table.", "metadata": {}}
{"_id": "gpt3_3755", "text": "\nThis query selects the distinct first name and city code of students who have an allergy to either milk or cats.", "metadata": {}}
{"_id": "gpt3_3756", "text": "\nThis query will calculate the total attendance for the Boston Red Stockings home games played between 2000 and 2010.", "metadata": {}}
{"_id": "gpt3_3757", "text": "\nThis query will calculate the total attendance for all of the Boston Red Stockings home games between the years 2000 and 2010.", "metadata": {}}
{"_id": "gpt3_3758", "text": "\nThis query will return the total attendance for all home games played by the Boston Red Stockings between 2000 and 2010.", "metadata": {}}
{"_id": "gpt3_3759", "text": "\nThis query returns the total attendance of all home games of the Boston Red Stockings between the years 2000 and 2010.", "metadata": {}}
{"_id": "gpt3_3760", "text": "\nThis query will sum up the total attendance for all home games of the Boston Red Stockings between the years 2000 and 2010.", "metadata": {}}
{"_id": "gpt3_3761", "text": "\nThis query will return a list of all distinct first and last names from the list table.", "metadata": {}}
{"_id": "gpt3_3762", "text": "\nThis query returns all unique first and last names from the list table.", "metadata": {}}
{"_id": "gpt3_3763", "text": "\nThis query will select all the unique first and last names from the list table.", "metadata": {}}
{"_id": "gpt3_3764", "text": "\nThis statement will select the unique first and last names from the list.", "metadata": {}}
{"_id": "gpt3_3765", "text": "\nThis query will return a list of unique first and last names from the list table.", "metadata": {}}
{"_id": "gpt3_3766", "text": "\nThis query returns a list of project_id values from the Documents table where there are at least two documents associated with each project_id.", "metadata": {}}
{"_id": "gpt3_3767", "text": "\nThis query returns a list of project_id's from the Documents table that have a count of two or more.", "metadata": {}}
{"_id": "gpt3_3768", "text": "\nThis query returns the project_id of all Documents that have at least two entries in the Documents table.", "metadata": {}}
{"_id": "gpt3_3769", "text": "\nThis query returns the project_id of documents that appear at least two times in the Documents table.", "metadata": {}}
{"_id": "gpt3_3770", "text": "\nThis query returns the project_id of all Documents that have a count of at least two.", "metadata": {}}
{"_id": "gpt3_3771", "text": "\nThis query selects the name of companies and buildings from the Office_locations, buildings, and Companies tables.", "metadata": {}}
{"_id": "gpt3_3772", "text": "\nThis query selects the name of a company and the name of the building associated with that company from the Office_locations, buildings and Companies tables.", "metadata": {}}
{"_id": "gpt3_3773", "text": "\nThis query selects the name of a company and the corresponding building name from the Office_locations, buildings, and Companies tables.", "metadata": {}}
{"_id": "gpt3_3774", "text": "\nThis query returns the name of the company and the name of the building associated with each office location.", "metadata": {}}
{"_id": "gpt3_3775", "text": "\nThis query selects the name of the company and the name of the building associated with the company's office locations.", "metadata": {}}
{"_id": "gpt3_3776", "text": "\nThis query finds the average height of players who attended Yale University.", "metadata": {}}
{"_id": "gpt3_3777", "text": "\nThis query finds the average height of players who attended Yale University.", "metadata": {}}
{"_id": "gpt3_3778", "text": "\nThis query returns the average height of players who attended Yale University.", "metadata": {}}
{"_id": "gpt3_3779", "text": "\nThis query will return the average height of all players who attended Yale University.", "metadata": {}}
{"_id": "gpt3_3780", "text": "\nThis query returns the average height of all players who attended Yale University.", "metadata": {}}
{"_id": "gpt3_3781", "text": "\nThis query will return the names of all buildings that are not associated with any institutions.", "metadata": {}}
{"_id": "gpt3_3782", "text": "\nThis query will return the names of all buildings that are not associated with any institution.", "metadata": {}}
{"_id": "gpt3_3783", "text": "\nThis statement will select the name of all buildings that are not associated with an institution.", "metadata": {}}
{"_id": "gpt3_3784", "text": "\nThis query will return the names of all buildings that are not associated with any institution.", "metadata": {}}
{"_id": "gpt3_3785", "text": "\nThis query will return the names of all buildings that are not associated with an institution.", "metadata": {}}
{"_id": "gpt3_3786", "text": "\nThis query returns the three counties with the lowest population, ordered from lowest to highest, from the county table.", "metadata": {}}
{"_id": "gpt3_3787", "text": "\nThis query will select the county name from the county table and order them by population in ascending order, and then return the first three results.", "metadata": {}}
{"_id": "gpt3_3788", "text": "\nThis query will return the three counties with the lowest population, in ascending order, from the \"county\" table.", "metadata": {}}
{"_id": "gpt3_3789", "text": "\nThis SQL query selects the three counties with the lowest population from the \"county\" table, and orders them in ascending order.", "metadata": {}}
{"_id": "gpt3_3790", "text": "\nThis query will select the names of the 3 counties with the lowest population from the \"county\" table, ordered by population in ascending order.", "metadata": {}}
{"_id": "gpt3_3791", "text": "\nThis query returns the total number of records in the submission table.", "metadata": {}}
{"_id": "gpt3_3792", "text": "\nThis query returns the total number of records in the submission table.", "metadata": {}}
{"_id": "gpt3_3793", "text": "\nThis query returns the total number of records in the submission table.", "metadata": {}}
{"_id": "gpt3_3794", "text": "\nThis query returns the total number of records in the submission table.", "metadata": {}}
{"_id": "gpt3_3795", "text": "\nThis query returns the total number of submissions in the submission table.", "metadata": {}}
{"_id": "gpt3_3796", "text": "\nThis query will count the number of records in the tryout table where the decision column is equal to 'yes'.", "metadata": {}}
{"_id": "gpt3_3797", "text": "\nThis query returns the total number of entries in the tryout table where the decision is set to 'yes'.", "metadata": {}}
{"_id": "gpt3_3798", "text": "\nThis query will return the count of records from the tryout table where the decision is 'yes'.", "metadata": {}}
{"_id": "gpt3_3799", "text": "\nThis query will return the total number of records in the tryout table where the decision is 'yes'.", "metadata": {}}
{"_id": "gpt3_3800", "text": "\nThis query returns the total number of records in the tryout table where the decision field is set to 'yes'.", "metadata": {}}
{"_id": "gpt3_3801", "text": "\nThis query will return the names of all courses that have only one student enrolled.", "metadata": {}}
{"_id": "gpt3_3802", "text": "\nThis query returns the names of all courses that have only one student enrolled in them.", "metadata": {}}
{"_id": "gpt3_3803", "text": "\nThis query selects the course name from the Courses table and groups them by course name, having the count of each course equal to 1. This query is used to return a list of courses which have only been enrolled in by a single student.", "metadata": {}}
{"_id": "gpt3_3804", "text": "\nThis query selects the course names of all courses that only have one student enrolled in them.", "metadata": {}}
{"_id": "gpt3_3805", "text": "\nThis query selects the course name from the Courses table and the Student_Course_Enrolment table, grouping them by course name and having a count of 1. This query will return the course name of any course that has only one student", "metadata": {}}
{"_id": "gpt3_3806", "text": "\nThis query will return the number of distinct governors in the party table.", "metadata": {}}
{"_id": "gpt3_3807", "text": "\nThis query returns the number of distinct governors in the party table.", "metadata": {}}
{"_id": "gpt3_3808", "text": "\nThis query will return the number of distinct governors in the party table.", "metadata": {}}
{"_id": "gpt3_3809", "text": "\nThis query will return the total number of distinct governors across all political parties.", "metadata": {}}
{"_id": "gpt3_3810", "text": "\nThis query will return the number of distinct governors from the party table.", "metadata": {}}
{"_id": "gpt3_3811", "text": "\nThe query \"SELECT Name, Score FROM WINE\" will return a list of all the names and scores of wines in the WINE table.", "metadata": {}}
{"_id": "gpt3_3812", "text": "\nThis query will return the name and score of all wines in the table.", "metadata": {}}
{"_id": "gpt3_3813", "text": "\nThis query returns the Name and Score columns from the WINE table.", "metadata": {}}
{"_id": "gpt3_3814", "text": "\nThis query will select the Name and Score columns from the WINE table.", "metadata": {}}
{"_id": "gpt3_3815", "text": "\nThis query will select the Name and Score columns from the WINE table.", "metadata": {}}
{"_id": "gpt3_3816", "text": "\nThis query will return the names of artists from the UK who have released songs in English.", "metadata": {}}
{"_id": "gpt3_3817", "text": "\nThis query will return a list of artist names from the artist table who are from the UK and have songs in English.", "metadata": {}}
{"_id": "gpt3_3818", "text": "\nThis query will select the artist names from the artist table where the country is \"UK\" and intersect it with the artist names from the song table where the language is \"english\". The result will be a list of artist names from the UK who", "metadata": {}}
{"_id": "gpt3_3819", "text": "\nThis query will select the names of all artists from the artist table who are from the UK and have songs in English.", "metadata": {}}
{"_id": "gpt3_3820", "text": "\nThis query will select the artist name from the artist table where the country is \"UK\" and intersect with the artist name from the song table where the languages is \"english\". The result will be a list of artist names from the UK who sing", "metadata": {}}
{"_id": "gpt3_3821", "text": "\nThis query will select the country of all airlines whose name starts with \"Orbit\".", "metadata": {}}
{"_id": "gpt3_3822", "text": "\nThis query will select the country from the airlines table where the name begins with \"Orbit\".", "metadata": {}}
{"_id": "gpt3_3823", "text": "\nThis query will select the country of all airlines whose name starts with \"Orbit\".", "metadata": {}}
{"_id": "gpt3_3824", "text": "\nThis query will select the country from the airlines table where the name begins with \"Orbit\".", "metadata": {}}
{"_id": "gpt3_3825", "text": "\nThis query will return all countries from the airlines table where the name begins with \"Orbit\".", "metadata": {}}
{"_id": "gpt3_3826", "text": "\nThis query will count the number of Lessons that Ray has taken.", "metadata": {}}
{"_id": "gpt3_3827", "text": "\nThis query will count the number of lessons that Ray has taken.", "metadata": {}}
{"_id": "gpt3_3828", "text": "\nThis query will count the number of lessons associated with the customer named Ray.", "metadata": {}}
{"_id": "gpt3_3829", "text": "\nThis query counts the number of lessons that Ray has taken.", "metadata": {}}
{"_id": "gpt3_3830", "text": "\nThis query counts the number of Lessons that are associated with a Customer named Ray.", "metadata": {}}
{"_id": "gpt3_3831", "text": "\nThis query returns the maximum page size from the product table, grouped by the maximum page size and filtered to only include those with more than three occurrences.", "metadata": {}}
{"_id": "gpt3_3832", "text": "\nThis query finds the maximum page size from the product table and groups them by the page size, returning only those page sizes that appear more than three times.", "metadata": {}}
{"_id": "gpt3_3833", "text": "\nThis query returns the maximum page size from the product table that appears in three or more records.", "metadata": {}}
{"_id": "gpt3_3834", "text": "\nThis query returns the maximum page size from the product table where the count of that page size is greater than 3.", "metadata": {}}
{"_id": "gpt3_3835", "text": "\nThis query returns the maximum page size of products with a count greater than 3.", "metadata": {}}
{"_id": "gpt3_3836", "text": "\nThis query will return the number of milliseconds for the track \"Fast As a Shark\" from the table \"tracks\".", "metadata": {}}
{"_id": "gpt3_3837", "text": "\nThis query will return the milliseconds of the track \"Fast As a Shark\" from the tracks table.", "metadata": {}}
{"_id": "gpt3_3838", "text": "\nThis query will return the milliseconds of the track \"Fast As a Shark\" from the tracks table.", "metadata": {}}
{"_id": "gpt3_3839", "text": "\nThis query will return the millisecond length of the song \"Fast As a Shark\" from the Tracks table.", "metadata": {}}
{"_id": "gpt3_3840", "text": "\nThis query will return the number of milliseconds of the track \"Fast As a Shark\" from the Tracks table.", "metadata": {}}
{"_id": "gpt3_3841", "text": "\nThis query will select the name of all projects from the Projects table that are not assigned to any employee in the AssignedTo table.", "metadata": {}}
{"_id": "gpt3_3842", "text": "\nThis query will return the names of all projects that have not been assigned to anyone.", "metadata": {}}
{"_id": "gpt3_3843", "text": "\nThis query will select the names of all projects that are not assigned to any people.", "metadata": {}}
{"_id": "gpt3_3844", "text": "\nThis query will select the names of all projects from the Projects table that are not assigned to anyone in the AssignedTo table.", "metadata": {}}
{"_id": "gpt3_3845", "text": "\nThis query returns the names of all projects that are not assigned to any employee.", "metadata": {}}
{"_id": "gpt3_3846", "text": "\nThis query will return the sum of all balances from the checking table.", "metadata": {}}
{"_id": "gpt3_3847", "text": "\nThe query will return the sum of all the balances in the checking table.", "metadata": {}}
{"_id": "gpt3_3848", "text": "\nThis query will return the sum of all the balances in the checking table.", "metadata": {}}
{"_id": "gpt3_3849", "text": "\nThe SUM() function in the SELECT statement will return the total sum of the 'balance' column from the 'checking' table.", "metadata": {}}
{"_id": "gpt3_3850", "text": "\nThe SUM() function in this SELECT statement will return the sum of all the values in the 'balance' column in the 'checking' table.", "metadata": {}}
{"_id": "gpt3_3851", "text": "\nThe director of the movie Avatar is James Cameron.", "metadata": {}}
{"_id": "gpt3_3852", "text": "\nThe director of the movie Avatar is James Cameron.", "metadata": {}}
{"_id": "gpt3_3853", "text": "\nThe director of the movie Avatar is James Cameron.", "metadata": {}}
{"_id": "gpt3_3854", "text": "\nThe director of the movie Avatar is James Cameron.", "metadata": {}}
{"_id": "gpt3_3855", "text": "\nThe director of the movie Avatar is James Cameron.", "metadata": {}}
{"_id": "gpt3_3856", "text": "\nThis query will select the average price of flights from Los Angeles to Honolulu.", "metadata": {}}
{"_id": "gpt3_3857", "text": "\nThis query will calculate the average price of flights from Los Angeles to Honolulu.", "metadata": {}}
{"_id": "gpt3_3858", "text": "\nThis query will return the average price of flights from Los Angeles to Honolulu.", "metadata": {}}
{"_id": "gpt3_3859", "text": "\nThis query will return the average price of flights departing from Los Angeles and arriving in Honolulu.", "metadata": {}}
{"_id": "gpt3_3860", "text": "\nThis query will return the average price of all flights from Los Angeles to Honolulu.", "metadata": {}}
{"_id": "gpt3_3861", "text": "\nThis query selects all distinct department names from the departments table that have corresponding entries in the employees table.", "metadata": {}}
{"_id": "gpt3_3862", "text": "\nThis query selects the distinct department names from the departments table, joined with the employees table by the common department_id field.", "metadata": {}}
{"_id": "gpt3_3863", "text": "\nThis query selects the distinct department names from the employees and departments tables, based on the department_id.", "metadata": {}}
{"_id": "gpt3_3864", "text": "\nThis query retrieves the distinct department names from the departments table that are associated with employees in the employees table.", "metadata": {}}
{"_id": "gpt3_3865", "text": "\nThis query selects distinct department names from the departments table that are associated with employees in the employees table.", "metadata": {}}
{"_id": "gpt3_3866", "text": "\nThis statement will select the circuitid and location from the circuits table for all circuits located in either France or Belgium.", "metadata": {}}
{"_id": "gpt3_3867", "text": "\nThis statement will select the circuitid and location from the circuits table for all circuits located in either France or Belgium.", "metadata": {}}
{"_id": "gpt3_3868", "text": "\nThis statement will select the circuitid and location of all circuits located in either France or Belgium.", "metadata": {}}
{"_id": "gpt3_3869", "text": "\nThis statement will select circuitid and location from the circuits table where the country is either France or Belgium.", "metadata": {}}
{"_id": "gpt3_3870", "text": "\nThis statement will select the circuitid and location from the circuits table where the country is either France or Belgium.", "metadata": {}}
{"_id": "gpt3_3871", "text": "\nThis query will select the name of people from a table whose height is greater than 200 cm or less than 190 cm.", "metadata": {}}
{"_id": "gpt3_3872", "text": "\nThis query will select the name of all people from the people table whose height is either greater than 200 or less than 190.", "metadata": {}}
{"_id": "gpt3_3873", "text": "\nThis query will return the names of all people from the people table who have a height greater than 200 cm or less than 190 cm.", "metadata": {}}
{"_id": "gpt3_3874", "text": "\nThis query will select the name from the people table where the height is either greater than 200 or less than 190.", "metadata": {}}
{"_id": "gpt3_3875", "text": "\nThis query returns the names of all people from the people table whose height is either greater than 200 or less than 190.", "metadata": {}}
{"_id": "gpt3_3876", "text": "\nThe above SQL query will return a list of all distinct location codes from the Document_locations table.", "metadata": {}}
{"_id": "gpt3_3877", "text": "\nThis statement will select all unique location codes from the Document_locations table.", "metadata": {}}
{"_id": "gpt3_3878", "text": "\nThis query returns a list of all unique location codes from the Document_locations table.", "metadata": {}}
{"_id": "gpt3_3879", "text": "\nThis statement will select all unique location codes from the Document_locations table.", "metadata": {}}
{"_id": "gpt3_3880", "text": "\nThis statement retrieves all unique location codes from the Document_locations table.", "metadata": {}}
{"_id": "gpt3_3881", "text": "\nThis query returns the support rate, consideration rate, and opposition rate of each candidate in an ordered list based on their unsure rate.", "metadata": {}}
{"_id": "gpt3_3882", "text": "\nThis query will return the support rate, consider rate, and oppose rate of each candidate in an ordered list based on their unsure rate.", "metadata": {}}
{"_id": "gpt3_3883", "text": "\nThis query returns the support rate, consider rate, and oppose rate of each candidate in a given table, ordered by the unsure rate.", "metadata": {}}
{"_id": "gpt3_3884", "text": "\nThis query will return the support rate, consider rate, and oppose rate of each candidate in order of their unsure rate.", "metadata": {}}
{"_id": "gpt3_3885", "text": "\nThis statement will select the support rate, consider rate, and oppose rate of each candidate from the candidate table, and order them by the unsure rate.", "metadata": {}}
{"_id": "gpt3_3886", "text": "\nThis query selects the name of the airport in China with the most routes, ordered by the number of routes, and limits the result to one row.", "metadata": {}}
{"_id": "gpt3_3887", "text": "\nThis query will select the name of the airport in China with the most routes out of it, ordered by the number of routes and limited to the top result.", "metadata": {}}
{"_id": "gpt3_3888", "text": "\nThis query will return the name of the airport in China with the most routes, ordered by the number of routes.", "metadata": {}}
{"_id": "gpt3_3889", "text": "\nThis query returns the name of the airport in China with the most routes, ordered by descending count.", "metadata": {}}
{"_id": "gpt3_3890", "text": "\nThis query will select the name of the airport in China with the most routes, ordered by the number of routes, and limited to one result.", "metadata": {}}
{"_id": "gpt3_3891", "text": "\nThis query selects the first name of an employee and the office number of a professor from the employee, professor, and department tables where the professor is in the History department and has a Ph.D. degree.", "metadata": {}}
{"_id": "gpt3_3892", "text": "\nThis query selects the first name of employees who are professors in the History department and have a Ph.D. degree, along with their office number.", "metadata": {}}
{"_id": "gpt3_3893", "text": "\nThis query selects the first name of employees and the professor office from the employee, professor, and department tables where the department name is 'History' and the professor has a high degree of 'Ph.D.'.", "metadata": {}}
{"_id": "gpt3_3894", "text": "\nThis query selects the first name of an employee and the office number of a professor from the employee, professor, and department tables where the professor has a Ph.D. degree and the department is History.", "metadata": {}}
{"_id": "gpt3_3895", "text": "\nThis query retrieves the first name of employees who are professors in the History department with a Ph.D. degree, and their office locations.", "metadata": {}}
{"_id": "gpt3_3896", "text": "\nThis query returns the names of people who have only one friend in the PersonFriend table.", "metadata": {}}
{"_id": "gpt3_3897", "text": "\nThis query returns the names of people who only have one friend in the PersonFriend table.", "metadata": {}}
{"_id": "gpt3_3898", "text": "\nThis query finds all people in the PersonFriend table who have only one friend. It returns the names of those people.", "metadata": {}}
{"_id": "gpt3_3899", "text": "\nThis query returns the names of people who have only one friend.", "metadata": {}}
{"_id": "gpt3_3900", "text": "\nThis query returns the names of people who have only one friend in the PersonFriend table.", "metadata": {}}
{"_id": "gpt3_3901", "text": "\nThis query will select the distinct artist name and country of all artists who have at least one song with a rating of 9 or higher.", "metadata": {}}
{"_id": "gpt3_3902", "text": "\nThis query will select the distinct artist name and country from the artist table for all songs with a rating greater than 9 in the song table.", "metadata": {}}
{"_id": "gpt3_3903", "text": "\nThis query selects the distinct artist names and countries from the artist table for all songs with a rating greater than 9 in the song table.", "metadata": {}}
{"_id": "gpt3_3904", "text": "\nThis query selects the distinct artist names and countries from the artist table associated with songs with a rating greater than 9 from the song table.", "metadata": {}}
{"_id": "gpt3_3905", "text": "\nThis query selects distinct artist names and countries from the artist table, joining it to the song table, where the rating of the song is greater than 9.", "metadata": {}}
{"_id": "gpt3_3906", "text": "\nThis query returns the sum of all revenues from manufacturers whose revenue is greater than the minimum revenue of any manufacturer headquartered in Austin.", "metadata": {}}
{"_id": "gpt3_3907", "text": "\nThis query will select the sum of all revenues from manufacturers where the revenue is greater than the minimum revenue for manufacturers with a headquarter located in Austin.", "metadata": {}}
{"_id": "gpt3_3908", "text": "\nThis query will return the sum of all revenues from manufacturers with a headquarter located in Austin that have a revenue greater than the minimum revenue from all manufacturers with a headquarter located in Austin.", "metadata": {}}
{"_id": "gpt3_3909", "text": "\nThis query will select the sum of all revenues from manufacturers whose revenue is greater than the minimum revenue of manufacturers headquartered in Austin.", "metadata": {}}
{"_id": "gpt3_3910", "text": "\nThis query will select the sum of all revenues from manufacturers where the revenue is greater than the minimum revenue of manufacturers whose headquarter is in Austin.", "metadata": {}}
{"_id": "gpt3_3911", "text": "\nThis query will return the venue from the city of Nanjing (Jiangsu) for the 1994 FIFA World Cup qualification.", "metadata": {}}
{"_id": "gpt3_3912", "text": "\nThis query will select the venue of the 1994 FIFA World Cup qualification match in Nanjing (Jiangsu).", "metadata": {}}
{"_id": "gpt3_3913", "text": "\nThis query will select the venue of all matches held in Nanjing (Jiangsu) for the 1994 FIFA World Cup qualification.", "metadata": {}}
{"_id": "gpt3_3914", "text": "\nThis query will return the venue of the 1994 FIFA World Cup qualification match that was hosted in Nanjing (Jiangsu).", "metadata": {}}
{"_id": "gpt3_3915", "text": "\nThis query retrieves the venue of a match from the city of Nanjing (Jiangsu) that was part of the 1994 FIFA World Cup qualification competition.", "metadata": {}}
{"_id": "gpt3_3916", "text": "\nThis query will select the role description from the ROLES table for the role code associated with the employee \"Koby\" from the Employees table.", "metadata": {}}
{"_id": "gpt3_3917", "text": "\nThis statement will select the role description of the role associated with the employee \"Koby\" from the ROLES and Employees tables.", "metadata": {}}
{"_id": "gpt3_3918", "text": "\nThis query will select the role description from the Roles table for the role code associated with the employee name \"Koby\" from the Employees table.", "metadata": {}}
{"_id": "gpt3_3919", "text": "\nThis query will select the role description from the ROLES table for the employee named \"Koby\" from the Employees table.", "metadata": {}}
{"_id": "gpt3_3920", "text": "\nThis statement will select the role description from the Roles table for the role code associated with the employee \"Koby\" from the Employees table.", "metadata": {}}
{"_id": "gpt3_3921", "text": "\nThis query selects the product name, color description, and product description from the products and Ref_colors tables for all products in the \"Herbs\" category.", "metadata": {}}
{"_id": "gpt3_3922", "text": "\nThis query selects the product name, color description, and product description from the products and Ref_colors tables for products with a product category code of \"Herbs\".", "metadata": {}}
{"_id": "gpt3_3923", "text": "\nThis query will select the product name, color description, and product description from the products and Ref_colors tables where the product category code is \"Herbs\".", "metadata": {}}
{"_id": "gpt3_3924", "text": "\nThis query selects the product name, color description, and product description from the products and Ref_colors tables where the product category code is \"Herbs\".", "metadata": {}}
{"_id": "gpt3_3925", "text": "\nThis query selects the product name, color description and product description from the products and Ref_colors tables where the product category code is \"Herbs\".", "metadata": {}}
{"_id": "gpt3_3926", "text": "\nThis SQL query will return the names of all courses with 1 credit from the COURSE table.", "metadata": {}}
{"_id": "gpt3_3927", "text": "\nThis query will return the names of all courses that have 1 credit.", "metadata": {}}
{"_id": "gpt3_3928", "text": "\nThis query selects the names of all courses from the COURSE table that have 1 credit.", "metadata": {}}
{"_id": "gpt3_3929", "text": "\nThis query will return a list of course names from the COURSE table where the number of credits is equal to 1.", "metadata": {}}
{"_id": "gpt3_3930", "text": "\nThis query selects the course name from the COURSE table where the credits are equal to 1.", "metadata": {}}
{"_id": "gpt3_3931", "text": "\nThis query will return the maximum and minimum star ratings from the Rating table.", "metadata": {}}
{"_id": "gpt3_3932", "text": "\nThis query returns the maximum and minimum values of the stars column from the Rating table.", "metadata": {}}
{"_id": "gpt3_3933", "text": "\nThis query returns the maximum and minimum number of stars in the Rating table.", "metadata": {}}
{"_id": "gpt3_3934", "text": "\nThis query will return the maximum and minimum stars from the Rating table.", "metadata": {}}
{"_id": "gpt3_3935", "text": "\nThis query will return the maximum and minimum stars from the Rating table.", "metadata": {}}
{"_id": "gpt3_3936", "text": "\nThis query will return the school code for the department of Accounting.", "metadata": {}}
{"_id": "gpt3_3937", "text": "\nThis query will return the school code associated with the department of Accounting.", "metadata": {}}
{"_id": "gpt3_3938", "text": "\nThis query will return the school code associated with the department of Accounting.", "metadata": {}}
{"_id": "gpt3_3939", "text": "\nThis query will return the school code of the department with the name \"Accounting\".", "metadata": {}}
{"_id": "gpt3_3940", "text": "\nThis query will return the school code for the department of Accounting.", "metadata": {}}
{"_id": "gpt3_3941", "text": "\nThis query will select the last name of the teacher in the same classroom as Gell Tami.", "metadata": {}}
{"_id": "gpt3_3942", "text": "\nThis query will return the last name of the teacher in the same classroom as Gell Tami.", "metadata": {}}
{"_id": "gpt3_3943", "text": "\nThis query will select the lastname of the teacher of the classroom where Gell Tami is enrolled.", "metadata": {}}
{"_id": "gpt3_3944", "text": "\nThis query will return the last name of the teacher that Gell Tami's classroom is assigned to.", "metadata": {}}
{"_id": "gpt3_3945", "text": "\nThis query will select the lastname of the teacher from the teachers table who is in the same classroom as Gell Tami from the list table.", "metadata": {}}
{"_id": "gpt3_3946", "text": "\nThis query will select the birth country of each player and group them by birth country, then order them in ascending order by the count of each birth country, and finally limit the results to the top 3 birth countries.", "metadata": {}}
{"_id": "gpt3_3947", "text": "\nThis query returns the 3 countries with the lowest number of players, ordered by the count of players from each country.", "metadata": {}}
{"_id": "gpt3_3948", "text": "\nThis query will select the birth country from the player table, group them by birth country, order them by the count of each country in ascending order, and limit the results to the top three.", "metadata": {}}
{"_id": "gpt3_3949", "text": "\nThis query will select the birth country from the player table, group them by birth country, order them by the count of each country in ascending order, and limit the results to the three countries with the lowest count.", "metadata": {}}
{"_id": "gpt3_3950", "text": "\nThis query will select the birth country of players from a database, group them by country, order them by the number of players in each country, and limit the results to the three countries with the fewest players.", "metadata": {}}
{"_id": "gpt3_3951", "text": "\nThis query will return the document_type_code for the document type \"Paper\" from the Ref_document_types table.", "metadata": {}}
{"_id": "gpt3_3952", "text": "\nThis query will return the document_type_code for the document type named \"Paper\" from the Ref_document_types table.", "metadata": {}}
{"_id": "gpt3_3953", "text": "\nThis query will return the document type code for \"Paper\" from the Ref_document_types table.", "metadata": {}}
{"_id": "gpt3_3954", "text": "\nThis query returns the document type code associated with the document type name \"Paper\".", "metadata": {}}
{"_id": "gpt3_3955", "text": "\nThis query will return the document_type_code for the document type \"Paper\" from the Ref_document_types table.", "metadata": {}}
{"_id": "gpt3_3956", "text": "\nThis query will return the name of the minister from any party that took office after 1961 or before 1959.", "metadata": {}}
{"_id": "gpt3_3957", "text": "\nThis query will select the name of the minister from the party table where the minister took office after 1961 or before 1959.", "metadata": {}}
{"_id": "gpt3_3958", "text": "\nThis query returns the name of the minister from a party who took office after 1961 or before 1959.", "metadata": {}}
{"_id": "gpt3_3959", "text": "\nThis query will select the minister from the party table who took office after 1961 or before 1959.", "metadata": {}}
{"_id": "gpt3_3960", "text": "\nThis query will return the name of the minister from a political party who took office after 1961 or before 1959.", "metadata": {}}
{"_id": "gpt3_3961", "text": "\nThis query will return the average velocity of all flights piloted by Thompson.", "metadata": {}}
{"_id": "gpt3_3962", "text": "\nThis query will return the average velocity of all flights piloted by Thompson.", "metadata": {}}
{"_id": "gpt3_3963", "text": "\nThis query returns the average velocity of all flights piloted by Thompson.", "metadata": {}}
{"_id": "gpt3_3964", "text": "\nThis query will return the average velocity of all flights taken by the pilot Thompson.", "metadata": {}}
{"_id": "gpt3_3965", "text": "\nThis query will return the average velocity of all flights piloted by Thompson.", "metadata": {}}
{"_id": "gpt3_3966", "text": "\nThis query counts the number of distinct departments for each school code in the department table.", "metadata": {}}
{"_id": "gpt3_3967", "text": "\nThis query returns the number of distinct departments for each school code in the department table.", "metadata": {}}
{"_id": "gpt3_3968", "text": "\nThis query will return the count of distinct department names for each school code.", "metadata": {}}
{"_id": "gpt3_3969", "text": "\nThis query will count the number of distinct department names for each school code in the department table and group the results by school code.", "metadata": {}}
{"_id": "gpt3_3970", "text": "\nThis query will count the number of distinct departments for each school code in the department table and group the results by school code.", "metadata": {}}
{"_id": "gpt3_3971", "text": "\nThis query returns the number of apartments that do not have any associated facilities.", "metadata": {}}
{"_id": "gpt3_3972", "text": "\nThis query will count the number of apartments that do not have any associated apartment facilities.", "metadata": {}}
{"_id": "gpt3_3973", "text": "\nThis query will return the number of apartments that do not have any facilities associated with them.", "metadata": {}}
{"_id": "gpt3_3974", "text": "\nThis query counts the number of apartments that do not have any associated facilities.", "metadata": {}}
{"_id": "gpt3_3975", "text": "\nThis query counts the number of apartments that do not have any facilities associated with them.", "metadata": {}}
{"_id": "gpt3_3976", "text": "\nThis query will select the firstname and lastname of all reservations where the rate is greater than the room's base price.", "metadata": {}}
{"_id": "gpt3_3977", "text": "\nThis query selects the first and last name of customers who have paid more than the base price for a room.", "metadata": {}}
{"_id": "gpt3_3978", "text": "\nThis query selects the first and last names of all customers from the Reservations table who have paid more than the base price for their room in the Rooms table.", "metadata": {}}
{"_id": "gpt3_3979", "text": "\nThis query selects the first and last name of the people who have reserved a room with a rate higher than the base price of the room.", "metadata": {}}
{"_id": "gpt3_3980", "text": "\nThis query selects the first and last names of people who have made reservations for rooms that have a rate higher than the base price of the room.", "metadata": {}}
{"_id": "gpt3_3981", "text": "\nThis query will return the name of people who are employed by companies with sales in excess of 200 billion.", "metadata": {}}
{"_id": "gpt3_3982", "text": "\nThis query will select the name of people who are employed by companies with sales in excess of 200 billion.", "metadata": {}}
{"_id": "gpt3_3983", "text": "\nThis query retrieves the names of people who are employed by companies with sales in excess of 200 billion.", "metadata": {}}
{"_id": "gpt3_3984", "text": "\nThis query selects the names of people who are employed by a company with sales in billions greater than 200.", "metadata": {}}
{"_id": "gpt3_3985", "text": "\nThis query selects the names of people who are employed by companies with sales in excess of 200 billion.", "metadata": {}}
{"_id": "gpt3_3986", "text": "\nThis query returns all albums from the table Albums that were released in the year 2010.", "metadata": {}}
{"_id": "gpt3_3987", "text": "\nThis query will return all albums released in the year 2010.", "metadata": {}}
{"_id": "gpt3_3988", "text": "\nThis query will select all records from the Albums table where the year is equal to 2010.", "metadata": {}}
{"_id": "gpt3_3989", "text": "\nThe query will select all columns from the Albums table where the year is equal to 2010. This will return all albums released in 2010.", "metadata": {}}
{"_id": "gpt3_3990", "text": "\nThis query will select all columns from the Albums table where the year is 2010.", "metadata": {}}
{"_id": "gpt3_3991", "text": "\nThis query will return the most common software platform from the device table, ordered by the number of occurrences of each platform.", "metadata": {}}
{"_id": "gpt3_3992", "text": "\nThis query will return the most common software platform used in the device table, ordered by the number of occurrences.", "metadata": {}}
{"_id": "gpt3_3993", "text": "\nThis query returns the most popular software platform used across all devices.", "metadata": {}}
{"_id": "gpt3_3994", "text": "\nThis query will return the most commonly used software platform from the device table, ordered by the number of occurrences.", "metadata": {}}
{"_id": "gpt3_3995", "text": "\nThis query selects the most popular software platform from the device table and orders it by the count of the software platform in descending order. The result of this query will be the most popular software platform from the device table.", "metadata": {}}
{"_id": "gpt3_3996", "text": "\nThis query will return the number of parks in the state of New York.", "metadata": {}}
{"_id": "gpt3_3997", "text": "\nThis query will count the number of rows in the park table where the state is equal to 'NY'.", "metadata": {}}
{"_id": "gpt3_3998", "text": "\nThis statement will return the total number of records in the park table where the state is set to 'NY'.", "metadata": {}}
{"_id": "gpt3_3999", "text": "\nThis query will count the number of records in the park table that have a state value of 'NY'.", "metadata": {}}
{"_id": "gpt3_4000", "text": "\nThis query will return the total number of parks located in New York.", "metadata": {}}
{"_id": "gpt3_4001", "text": "\nThis query summarizes the number of films in each category. It returns the name of the category, the category ID, and the number of films in that category.", "metadata": {}}
{"_id": "gpt3_4002", "text": "\nThis query summarizes the number of films in each category by joining the film_category and category tables. It returns the name of the category, the category ID, and the count of films in each category.", "metadata": {}}
{"_id": "gpt3_4003", "text": "\nThis query returns the name of each category along with the category ID and the number of films associated with each category.", "metadata": {}}
{"_id": "gpt3_4004", "text": "\nThis query returns the name of each category, the category_id, and the total number of films in each category.", "metadata": {}}
{"_id": "gpt3_4005", "text": "\nThis query will return the name of each category, the category ID, and a count of the number of films in each category.", "metadata": {}}
{"_id": "gpt3_4006", "text": "\nThis query selects the date an order was placed from the orders table, based on a shipment tracking number of 3452 from the shipments table.", "metadata": {}}
{"_id": "gpt3_4007", "text": "\nThis query selects the date an order was placed from the orders table based on a shipment tracking number from the shipments table.", "metadata": {}}
{"_id": "gpt3_4008", "text": "\nThis statement will select the date on which an order was placed from the orders table, based on the order_id associated with a shipment in the shipments table that has a shipment_tracking_number of 3452.", "metadata": {}}
{"_id": "gpt3_4009", "text": "\nThis query selects the date an order was placed from the orders table based on the shipment tracking number in the shipments table.", "metadata": {}}
{"_id": "gpt3_4010", "text": "\nThis query selects the date an order was placed for the shipment with tracking number 3452.", "metadata": {}}
{"_id": "gpt3_4011", "text": "\nThis query will return a list of all phone numbers from both the customers and staff tables.", "metadata": {}}
{"_id": "gpt3_4012", "text": "\nThis statement will select all the phone numbers from both the customers and staff tables and combine them into a single result set.", "metadata": {}}
{"_id": "gpt3_4013", "text": "\nThis query retrieves all phone numbers from both the customers and staff tables and combines them into a single result.", "metadata": {}}
{"_id": "gpt3_4014", "text": "\nThis statement returns a list of all phone numbers from both the customers and staff tables.", "metadata": {}}
{"_id": "gpt3_4015", "text": "\nThis statement will select all phone numbers from both the customers and staff tables and combine them into a single list.", "metadata": {}}
{"_id": "gpt3_4016", "text": "\nThis query selects the marketing region code with the highest count of drama workshop groups, and orders the results in descending order.", "metadata": {}}
{"_id": "gpt3_4017", "text": "\nThis query will select the Marketing Region Code from the Drama Workshop Groups table and group them by Marketing Region Code, ordering the results by the count of each code in descending order and limiting the results to the top 1 result.", "metadata": {}}
{"_id": "gpt3_4018", "text": "\nThis query returns the Marketing Region Code for the Drama Workshop Groups with the highest number of groups.", "metadata": {}}
{"_id": "gpt3_4019", "text": "\nThis query will return the Marketing Region Code for the Drama Workshop Groups that has the highest count.", "metadata": {}}
{"_id": "gpt3_4020", "text": "\nThis query will select the Marketing Region Code from the Drama Workshop Groups table and group them by Marketing Region Code, then order the results by count in descending order and limit the result to the top one. This will return the Marketing Region Code that has", "metadata": {}}
{"_id": "gpt3_4021", "text": "\nThis query returns a list of all distinct club names from clubs in the city of \"BAL\" that are joined by students.", "metadata": {}}
{"_id": "gpt3_4022", "text": "\nThis query returns all the distinct club names from a database of clubs, members, and students, where the student's city code is \"BAL\".", "metadata": {}}
{"_id": "gpt3_4023", "text": "\nThis SQL statement will select the distinct club names from the club, member_of_club, and student tables where the student's city code is \"BAL\".", "metadata": {}}
{"_id": "gpt3_4024", "text": "\nThis query retrieves the distinct club names from the club, member_of_club, and student tables where the student's city code is \"BAL\".", "metadata": {}}
{"_id": "gpt3_4025", "text": "\nThis query will return a list of distinct club names from clubs located in the city of BAL, by joining the club, member_of_club, and student tables.", "metadata": {}}
{"_id": "gpt3_4026", "text": "\nThis query will return the average number of employees in departments with a ranking between 10 and 15.", "metadata": {}}
{"_id": "gpt3_4027", "text": "\nThis query would return the average number of employees from departments with a ranking between 10 and 15.", "metadata": {}}
{"_id": "gpt3_4028", "text": "\nThis query will return the average number of employees in departments with a ranking between 10 and 15.", "metadata": {}}
{"_id": "gpt3_4029", "text": "\nThis query will calculate the average number of employees in all departments that have a ranking between 10 and 15.", "metadata": {}}
{"_id": "gpt3_4030", "text": "\nThis query will calculate the average number of employees in all departments with a ranking between 10 and 15.", "metadata": {}}
{"_id": "gpt3_4031", "text": "\nThis query returns the number of products for each manufacturer, grouped by manufacturer name.", "metadata": {}}
{"_id": "gpt3_4032", "text": "\nThis query counts the number of products from each manufacturer, and returns both the count and the name of the manufacturer.", "metadata": {}}
{"_id": "gpt3_4033", "text": "\nThis query counts the number of products for each manufacturer and returns the manufacturer's name.", "metadata": {}}
{"_id": "gpt3_4034", "text": "\nThis query is used to count the number of products from each manufacturer and display the name of the manufacturer. It returns a count of the products from each manufacturer and the name of the manufacturer.", "metadata": {}}
{"_id": "gpt3_4035", "text": "\nThis query counts the number of products for each manufacturer and returns the manufacturer name.", "metadata": {}}
{"_id": "gpt3_4036", "text": "\nThis query will select the name of the phone and the district of the market associated with it from the phone_market, market, and phone tables, and order the results by the market's ranking.", "metadata": {}}
{"_id": "gpt3_4037", "text": "\nThis query will select the name and district of all phones from the phone_market and market tables, ordered by the ranking of the district.", "metadata": {}}
{"_id": "gpt3_4038", "text": "\nThis query selects the name of the phone and the district of the market associated with it from the phone_market, market, and phone tables, and orders the results by the ranking of the market.", "metadata": {}}
{"_id": "gpt3_4039", "text": "\nThis query selects the name of the phone and its district from the phone_market, market, and phone tables and orders the results by the district's ranking.", "metadata": {}}
{"_id": "gpt3_4040", "text": "\nThis query retrieves the Name of each phone and the District of the corresponding market, from the phone_market, market, and phone tables, ordered by the Ranking of the market.", "metadata": {}}
{"_id": "gpt3_4041", "text": "\nThis query will return the number of distinct products and the headquarter of the manufacturer for each product.", "metadata": {}}
{"_id": "gpt3_4042", "text": "\nThis query returns the number of distinct products for each manufacturer and the headquarter of the manufacturer.", "metadata": {}}
{"_id": "gpt3_4043", "text": "\nThis query returns a count of distinct product names for each manufacturer's headquarter.", "metadata": {}}
{"_id": "gpt3_4044", "text": "\nThis query will return the number of distinct products and the headquarter of the manufacturer associated with each product.", "metadata": {}}
{"_id": "gpt3_4045", "text": "\nThis query returns the number of distinct products for each manufacturer's headquarter.", "metadata": {}}
{"_id": "gpt3_4046", "text": "\nThis query selects the first name, last name, and count of employees reported to for the employee with the highest number of reports.", "metadata": {}}
{"_id": "gpt3_4047", "text": "\nThis query selects the first and last name of the employee with the most number of reports, as well as the total number of reports. It does this by joining the employees table twice, grouping by the reports_to column, and ordering by the", "metadata": {}}
{"_id": "gpt3_4048", "text": "\nThis query selects the first and last name of the employee who has the most number of reports and counts the number of reports for that employee. It does this by joining two tables, Employees and Employees, on the Reports To field, grouping by the", "metadata": {}}
{"_id": "gpt3_4049", "text": "\nThis query selects the first and last name of the employee with the most number of reports from the employees table, along with the count of the number of reports. It does this by joining the employees table to itself, grouping by the reports_to", "metadata": {}}
{"_id": "gpt3_4050", "text": "\nThis query selects the first and last name of the employee with the most reports, as well as the number of reports they have. It does this by joining two tables (employees) and grouping the results by the reports_to field, ordering", "metadata": {}}
{"_id": "gpt3_4051", "text": "\nThis query selects the Museum Details and Opening Hours from two tables, Museums (T1) and Tourist Attractions (T2), based on a shared Museum ID.", "metadata": {}}
{"_id": "gpt3_4052", "text": "\nThis query selects the details of a museum and the opening hours of a tourist attraction associated with that museum from two tables, MUSEUMS and TOURIST_ATTRACTIONS, based on the Museum_ID from the MUSEUMS", "metadata": {}}
{"_id": "gpt3_4053", "text": "\nThis query is used to retrieve the details of a museum and its opening hours from two separate tables, MUSEUMS and TOURIST_ATTRACTIONS. The query joins the two tables on the Museum_ID field, which is shared", "metadata": {}}
{"_id": "gpt3_4054", "text": "\nThis query will select the museum details and opening hours from two tables, MUSEUMS and TOURIST_ATTRACTIONS. The query will join the two tables on the Museum_ID and Tourist_Attraction_ID columns.", "metadata": {}}
{"_id": "gpt3_4055", "text": "\nThis statement selects the museum details and opening hours from the Museums and Tourist Attractions tables, joining them on the Museum ID and Tourist Attraction ID.", "metadata": {}}
{"_id": "gpt3_4056", "text": "\nThis query will return the cities from the city table with a regional population greater than 10 million.", "metadata": {}}
{"_id": "gpt3_4057", "text": "\nThis query will return a list of cities with a regional population greater than 10 million.", "metadata": {}}
{"_id": "gpt3_4058", "text": "\nThis query returns a list of cities from the city table where the regional population is greater than 10 million.", "metadata": {}}
{"_id": "gpt3_4059", "text": "\nThis query will select the name of any city that has a regional population of more than 10 million people.", "metadata": {}}
{"_id": "gpt3_4060", "text": "\nThis query will return all cities with a regional population greater than 10 million.", "metadata": {}}
{"_id": "gpt3_4061", "text": "\nThis query returns the name of the most expensive item in the catalog, ordered by price in descending order.", "metadata": {}}
{"_id": "gpt3_4062", "text": "\nThis query will return the name of the most expensive item in the catalog, ordered by price in descending order.", "metadata": {}}
{"_id": "gpt3_4063", "text": "\nThis query will select the name of the most expensive item in the catalog contents table, sorted in descending order by price in dollars.", "metadata": {}}
{"_id": "gpt3_4064", "text": "\nThis query will select the name of the most expensive item from the catalog_contents table, ordered by price in descending order, and limit the result to the top item.", "metadata": {}}
{"_id": "gpt3_4065", "text": "\nThis query will return the name of the most expensive item in the catalog_contents table, ordered by price in descending order.", "metadata": {}}
{"_id": "gpt3_4066", "text": "\nThis query returns the number of distinct ranks present in the captain table.", "metadata": {}}
{"_id": "gpt3_4067", "text": "\nThis query will return the number of unique ranks found in the captain table.", "metadata": {}}
{"_id": "gpt3_4068", "text": "\nThis query will return the total number of distinct ranks found in the captain table.", "metadata": {}}
{"_id": "gpt3_4069", "text": "\nThis query returns the number of distinct ranks of captains in the table.", "metadata": {}}
{"_id": "gpt3_4070", "text": "\nThis query will return the number of distinct ranks among captains in a table.", "metadata": {}}
{"_id": "gpt3_4071", "text": "\nThis SQL statement will select all student IDs from the Student table that do not exist in the Has_allergy table.", "metadata": {}}
{"_id": "gpt3_4072", "text": "\nThis query will select all of the student IDs from the Student table that are not present in the Has_allergy table.", "metadata": {}}
{"_id": "gpt3_4073", "text": "\nThis query will return a list of student IDs from the Student table that do not appear in the Has_allergy table.", "metadata": {}}
{"_id": "gpt3_4074", "text": "\nThis query selects all student IDs from the Student table that are not present in the Has_allergy table.", "metadata": {}}
{"_id": "gpt3_4075", "text": "\nThis query returns the Student IDs of all students who do not have any allergies.", "metadata": {}}
{"_id": "gpt3_4076", "text": "\nThis SQL statement will select all the apartment numbers from the Apartments table, sorted in ascending order by the number of rooms in each apartment.", "metadata": {}}
{"_id": "gpt3_4077", "text": "\nThis query will select all of the apartment numbers from the Apartments table and order them in ascending order based on the number of rooms in each apartment.", "metadata": {}}
{"_id": "gpt3_4078", "text": "\nThis SQL statement will select all the apartment numbers from the Apartments table and order them by the number of rooms in each apartment in ascending order.", "metadata": {}}
{"_id": "gpt3_4079", "text": "\nThis statement selects all the apartment numbers from the Apartments table and orders them by room count in ascending order.", "metadata": {}}
{"_id": "gpt3_4080", "text": "\nThis query selects the apartment numbers from the Apartments table and orders them by the number of rooms in each apartment in ascending order.", "metadata": {}}
{"_id": "gpt3_4081", "text": "\nThis query returns the id of the trip with the shortest duration from the trip table, ordered by duration in ascending order.", "metadata": {}}
{"_id": "gpt3_4082", "text": "\nThis query will return the id of the trip with the shortest duration from the 'trip' table.", "metadata": {}}
{"_id": "gpt3_4083", "text": "\nThis query returns the id of the trip with the shortest duration from the \"trip\" table, sorted in ascending order.", "metadata": {}}
{"_id": "gpt3_4084", "text": "\nThis query will select the ID of the trip with the shortest duration from the trip table, and limit the result to one record.", "metadata": {}}
{"_id": "gpt3_4085", "text": "\nThis query selects the id of the trip with the shortest duration from the trip table, limiting the results to one record.", "metadata": {}}
{"_id": "gpt3_4086", "text": "\nThis query will return the average age of all students who are members of the Tennis Club.", "metadata": {}}
{"_id": "gpt3_4087", "text": "\nThis query will return the average age of students who are members of the Tennis Club.", "metadata": {}}
{"_id": "gpt3_4088", "text": "\nThis statement returns the average age of all students who are members of the Tennis Club.", "metadata": {}}
{"_id": "gpt3_4089", "text": "\nThis query will return the average age of all students who are members of the Tennis Club.", "metadata": {}}
{"_id": "gpt3_4090", "text": "\nThis query calculates the average age of all students who are members of the Tennis Club.", "metadata": {}}
{"_id": "gpt3_4091", "text": "\nThis query selects the aircraft that are present at both London Heathrow and London Gatwick airports.", "metadata": {}}
{"_id": "gpt3_4092", "text": "\nThis query returns the list of aircraft that are present at both London Heathrow and London Gatwick airports.", "metadata": {}}
{"_id": "gpt3_4093", "text": "\nThis query retrieves the aircraft that fly to both London Heathrow and London Gatwick airports.", "metadata": {}}
{"_id": "gpt3_4094", "text": "\nThis query selects the aircraft that are located in both London Heathrow and London Gatwick airports.", "metadata": {}}
{"_id": "gpt3_4095", "text": "\nThis query returns a list of aircraft that are present at both London Heathrow and London Gatwick airports.", "metadata": {}}
{"_id": "gpt3_4096", "text": "\nThis query will select the title of any course that does not have a prereq.", "metadata": {}}
{"_id": "gpt3_4097", "text": "\nThis query will select the title of any course that does not have a pre-requisite.", "metadata": {}}
{"_id": "gpt3_4098", "text": "\nThis query will return the titles of all courses that do not have any prerequisites.", "metadata": {}}
{"_id": "gpt3_4099", "text": "\nThis query will select the title of all courses that do not have any prerequisites.", "metadata": {}}
{"_id": "gpt3_4100", "text": "\nThis query will return the titles of all courses that do not have any prerequisites.", "metadata": {}}
{"_id": "gpt3_4101", "text": "\nThis query will return all the names of enzymes from the enzyme table where the product is not equal to 'Heme'.", "metadata": {}}
{"_id": "gpt3_4102", "text": "\nThis query will select the names of all enzymes from the enzyme table where the product is not Heme.", "metadata": {}}
{"_id": "gpt3_4103", "text": "\nThis query will select the name of an enzyme from the enzyme table where the product is not \"Heme\".", "metadata": {}}
{"_id": "gpt3_4104", "text": "\nThis query will return the names of all enzymes from the enzyme table that do not produce heme as a product.", "metadata": {}}
{"_id": "gpt3_4105", "text": "\nThis query will select the name of any enzyme whose product is not heme from the enzyme table.", "metadata": {}}
{"_id": "gpt3_4106", "text": "\nThis query returns the number of Project_Staff records that have a role code of \"leader\" or a date_from before April 24, 1989.", "metadata": {}}
{"_id": "gpt3_4107", "text": "\nThis query returns the total number of project staff members who have a role code of \"leader\" or whose date_from field is before April 24th, 1989 at 11:51:54 PM.", "metadata": {}}
{"_id": "gpt3_4108", "text": "\nThis query will return the number of records in the Project_Staff table where the role code is 'leader' or the date from is before April 24, 1989.", "metadata": {}}
{"_id": "gpt3_4109", "text": "\nThis query will count the number of Project_Staff rows that have a role_code of 'leader' or a date_from that is earlier than '1989-04-24 23:51:54'.", "metadata": {}}
{"_id": "gpt3_4110", "text": "\nThis query returns the number of records in the Project_Staff table where the role_code is 'leader' or the date_from is before April 24, 1989.", "metadata": {}}
{"_id": "gpt3_4111", "text": "\nThis query will return the average amount of money requested by entrepreneurs.", "metadata": {}}
{"_id": "gpt3_4112", "text": "\nThe average amount of money requested by entrepreneurs is $23,920.", "metadata": {}}
{"_id": "gpt3_4113", "text": "\nThe average amount of money requested by entrepreneurs is $3,739.", "metadata": {}}
{"_id": "gpt3_4114", "text": "\nThe average amount of money requested by entrepreneurs is $64,717.", "metadata": {}}
{"_id": "gpt3_4115", "text": "\nThe average amount of money requested by entrepreneurs is $3,857.", "metadata": {}}
{"_id": "gpt3_4116", "text": "\nThis statement will select the name of any person from the people table whose height is less than the average height of all people in the table.", "metadata": {}}
{"_id": "gpt3_4117", "text": "\nThis query will select the name of all people from the people table whose height is less than the average height of all people in the table.", "metadata": {}}
{"_id": "gpt3_4118", "text": "\nThis query will select the name of people from a table whose height is less than the average height of all people in the table.", "metadata": {}}
{"_id": "gpt3_4119", "text": "\nThis query selects the name of all people from the people table whose height is less than the average height of all people in the table.", "metadata": {}}
{"_id": "gpt3_4120", "text": "\nThis query selects the names of people from a table whose height is less than the average height of all people in the table.", "metadata": {}}
{"_id": "gpt3_4121", "text": "\nThis query selects the name and trade name of medicines that both inhibit and activate enzymes.", "metadata": {}}
{"_id": "gpt3_4122", "text": "\nThis query selects the name and trade name of medicines that both inhibit and activate enzymes from the medicine and medicine_enzyme_interaction tables.", "metadata": {}}
{"_id": "gpt3_4123", "text": "\nThis query returns the names and trade names of medicines that both inhibit and activate enzymes.", "metadata": {}}
{"_id": "gpt3_4124", "text": "\nThis query selects the name and trade name of medicines that are both inhibitors and activators of enzymes from the medicine and medicine_enzyme_interaction tables.", "metadata": {}}
{"_id": "gpt3_4125", "text": "\nThis query retrieves the name and trade name of medicines that are both inhibitors and activators.", "metadata": {}}
{"_id": "gpt3_4126", "text": "\nThis query will return the average of all scores from the submission table.", "metadata": {}}
{"_id": "gpt3_4127", "text": "\nThe query SELECT avg(Scores) FROM submission will return the average score from the submission table.", "metadata": {}}
{"_id": "gpt3_4128", "text": "\nThis query will return the average score from the submission table.", "metadata": {}}
{"_id": "gpt3_4129", "text": "\nThis statement will return the average of all scores from the submission table.", "metadata": {}}
{"_id": "gpt3_4130", "text": "\nThis query will return the average score from the submission table.", "metadata": {}}
{"_id": "gpt3_4131", "text": "\nThis query selects the claim ID, date of claim made, and the count of settlements associated with the claim ID from the Claims and Settlements tables. It then groups the results by claim ID and orders them in descending order by count of settlements.", "metadata": {}}
{"_id": "gpt3_4132", "text": "\nThis query selects the claim ID, date the claim was made, and the count of the claim from the Claims and Settlements tables, groups them by the claim ID, orders them by the count in descending order, and limits the result to one", "metadata": {}}
{"_id": "gpt3_4133", "text": "\nThis query selects the claim ID and date of the claim that has the most settlements associated with it, and counts the number of settlements associated with that claim.", "metadata": {}}
{"_id": "gpt3_4134", "text": "\nThis query returns the claim ID, date the claim was made, and the count of settlements associated with the claim with the highest number of settlements, ordered by the count of settlements in descending order, and limited to the first result.", "metadata": {}}
{"_id": "gpt3_4135", "text": "\nThis query will select the claim_id, date_claim_made, and count of the claim with the most settlements associated with it, and order the results by the count in descending order. The query will then limit the results to the first", "metadata": {}}
{"_id": "gpt3_4136", "text": "\nThis query counts the number of students registered for each course. It returns the course name and the number of students registered for that course.", "metadata": {}}
{"_id": "gpt3_4137", "text": "\nThis query will return the course name and the number of students registered for each course.", "metadata": {}}
{"_id": "gpt3_4138", "text": "\nThis query will return the name of each course and the total number of students registered for it.", "metadata": {}}
{"_id": "gpt3_4139", "text": "\nThis query will return the course name and the number of students registered for each course.", "metadata": {}}
{"_id": "gpt3_4140", "text": "\nThis query will return the course name and the number of students registered for each course.", "metadata": {}}
{"_id": "gpt3_4141", "text": "\nThis query will return the decor of the room \"Recluse and Defiance\" from the Rooms table.", "metadata": {}}
{"_id": "gpt3_4142", "text": "\nThis query will return the decor of the room \"Recluse and Defiance\" from the Rooms table.", "metadata": {}}
{"_id": "gpt3_4143", "text": "\nThis query will return the decor of the room named \"Recluse and Defiance\" from the Rooms table.", "metadata": {}}
{"_id": "gpt3_4144", "text": "\nThis query will return the decor of the room named \"Recluse and Defiance\" from the Rooms table.", "metadata": {}}
{"_id": "gpt3_4145", "text": "\nThis query will return the decor of the room \"Recluse and Defiance\" from the Rooms table.", "metadata": {}}
{"_id": "gpt3_4146", "text": "\nThis query will count the number of credit cards held by Blanche Huels.", "metadata": {}}
{"_id": "gpt3_4147", "text": "\nThis query returns the number of credit cards held by Blanche Huels.", "metadata": {}}
{"_id": "gpt3_4148", "text": "\nThis query will count the number of credit cards belonging to Blanche Huels.", "metadata": {}}
{"_id": "gpt3_4149", "text": "\nThis query will count the number of credit cards held by Blanche Huels.", "metadata": {}}
{"_id": "gpt3_4150", "text": "\nThis query will count the number of credit cards owned by Blanche Huels.", "metadata": {}}
{"_id": "gpt3_4151", "text": "\nThis query will return the average pages per minute for color printing from the product table.", "metadata": {}}
{"_id": "gpt3_4152", "text": "\nThis query will return the average pages per minute for color printing from the product table.", "metadata": {}}
{"_id": "gpt3_4153", "text": "\nThis query returns the average pages per minute for color printing from the product table.", "metadata": {}}
{"_id": "gpt3_4154", "text": "\nThis query will return the average number of pages per minute in color that the product can print.", "metadata": {}}
{"_id": "gpt3_4155", "text": "\nThe average pages per minute in color for the product is 6.5.", "metadata": {}}
{"_id": "gpt3_4156", "text": "\nThis query will select the total number of games played by the Clemson basketball team and the location of the university from which they originate.", "metadata": {}}
{"_id": "gpt3_4157", "text": "\nThis query will select the total number of games played (All_Games) and the location of the university (location) from the university and basketball_match tables for the team named Clemson.", "metadata": {}}
{"_id": "gpt3_4158", "text": "\nThis query will select the total number of basketball games played by the team 'Clemson' and the location of the university they are associated with.", "metadata": {}}
{"_id": "gpt3_4159", "text": "\nThis query will select the total number of games and the location of the university from the university and basketball_match tables where the team name is 'Clemson'.", "metadata": {}}
{"_id": "gpt3_4160", "text": "\nThis query will select the total number of games and the location of the university from the university and basketball_match tables for Clemson's team.", "metadata": {}}
{"_id": "gpt3_4161", "text": "\nThis query returns the sum of the amount from the loan table for each branch name from the bank table.", "metadata": {}}
{"_id": "gpt3_4162", "text": "\nThis query will return the sum of all amounts in the loan table for each branch name in the bank table.", "metadata": {}}
{"_id": "gpt3_4163", "text": "\nThis query will calculate the sum of the amount from the loan table for each branch name from the bank table. The results will be grouped by the branch name from the bank table.", "metadata": {}}
{"_id": "gpt3_4164", "text": "\nThis query will return the total amount of loans for each branch of the bank, grouped by branch name.", "metadata": {}}
{"_id": "gpt3_4165", "text": "\nThis query returns the sum of the amount for each branch name from the bank and loan tables, grouped by the branch name.", "metadata": {}}
{"_id": "gpt3_4166", "text": "\nThis query selects the customer name from customers table for customers who have made two or fewer orders in the orders table.", "metadata": {}}
{"_id": "gpt3_4167", "text": "\nThis query retrieves the names of customers who have placed two or fewer orders.", "metadata": {}}
{"_id": "gpt3_4168", "text": "\nThis query selects the customer name from the customers table for customers who have placed two or fewer orders in the orders table.", "metadata": {}}
{"_id": "gpt3_4169", "text": "\nThis query selects the customer names from the customers table who have placed two or fewer orders in the orders table.", "metadata": {}}
{"_id": "gpt3_4170", "text": "\nThis query selects the customer name from the customers table for customers who have placed two or fewer orders in the orders table.", "metadata": {}}
{"_id": "gpt3_4171", "text": "\nThis query counts the number of distinct majors and the number of distinct city codes from the student table.", "metadata": {}}
{"_id": "gpt3_4172", "text": "\nThis query counts the number of distinct majors and the number of distinct city codes from the student table.", "metadata": {}}
{"_id": "gpt3_4173", "text": "\nThis query counts the number of distinct majors and distinct city codes from the student table.", "metadata": {}}
{"_id": "gpt3_4174", "text": "\nThis query counts the number of distinct majors and cities from the student table.", "metadata": {}}
{"_id": "gpt3_4175", "text": "\nThis query will return the number of distinct majors and the number of distinct city codes from the student table.", "metadata": {}}
{"_id": "gpt3_4176", "text": "\nThis query retrieves the name of the department with the most enrolled classes.", "metadata": {}}
{"_id": "gpt3_4177", "text": "\nThis query retrieves the name of the department with the most enrollments, based on the number of classes offered in each department.", "metadata": {}}
{"_id": "gpt3_4178", "text": "\nThis query selects the department name from the class, enroll, course, and department tables, grouped by the department code and ordered by the count of each department, and returns the top result.", "metadata": {}}
{"_id": "gpt3_4179", "text": "\nThis query will select the department name from the class, enroll, course, and department tables, grouped by the department code, and ordered by the count of entries, with the highest count being the top result.", "metadata": {}}
{"_id": "gpt3_4180", "text": "\nThis query selects the department name of the department with the most enrollments in classes.", "metadata": {}}
{"_id": "gpt3_4181", "text": "\nThis query will return the total number of records in the Accounts table.", "metadata": {}}
{"_id": "gpt3_4182", "text": "\nThis query will return the total number of records in the Accounts table.", "metadata": {}}
{"_id": "gpt3_4183", "text": "\nThis query returns the total number of records in the Accounts table.", "metadata": {}}
{"_id": "gpt3_4184", "text": "\nThis query will return the total number of records in the Accounts table.", "metadata": {}}
{"_id": "gpt3_4185", "text": "\nThis query would count the total number of records in the Accounts table.", "metadata": {}}
{"_id": "gpt3_4186", "text": "\nThis query will select the job titles from the jobs table where the minimum salary is greater than 9000.", "metadata": {}}
{"_id": "gpt3_4187", "text": "\nThis query will return the job titles of all jobs with a minimum salary greater than $9000.", "metadata": {}}
{"_id": "gpt3_4188", "text": "\nThis query will return all job titles from the jobs table where the minimum salary is greater than $9000.", "metadata": {}}
{"_id": "gpt3_4189", "text": "\nThis query will return a list of all job titles from the jobs table where the minimum salary is greater than 9000.", "metadata": {}}
{"_id": "gpt3_4190", "text": "\nThis query returns all job titles from the jobs table where the minimum salary is greater than 9000.", "metadata": {}}
{"_id": "gpt3_4191", "text": "\nThis query returns a list of players and the number of years they have played.", "metadata": {}}
{"_id": "gpt3_4192", "text": "\nThis query will return a list of players and the number of years they have played.", "metadata": {}}
{"_id": "gpt3_4193", "text": "\nThis query will return a list of players and the number of years they have played.", "metadata": {}}
{"_id": "gpt3_4194", "text": "\nThis query will return a list of players and the number of years they have played.", "metadata": {}}
{"_id": "gpt3_4195", "text": "\nThis query will return a table containing the names of the players and the number of years each player has played.", "metadata": {}}
{"_id": "gpt3_4196", "text": "\nThis query will return a list of birth places and the number of people who were born in each place.", "metadata": {}}
{"_id": "gpt3_4197", "text": "\nThis query will return a list of birth places and the count of people associated with each one.", "metadata": {}}
{"_id": "gpt3_4198", "text": "\nThis query will count the number of people from each birth place and group them by birth place. The result will be a table showing the birth place and the number of people from that place.", "metadata": {}}
{"_id": "gpt3_4199", "text": "\nThis query will return a list of all the birth places of people in the table, along with the number of people who were born in each place.", "metadata": {}}
{"_id": "gpt3_4200", "text": "\nThis query will count the number of people from each birth place and group them together.", "metadata": {}}
{"_id": "gpt3_4201", "text": "\nThis query selects the aircraft and its description from the aircraft, airport_aircraft, and airport tables where the total passengers for the airport is greater than 10 million.", "metadata": {}}
{"_id": "gpt3_4202", "text": "\nThis query retrieves the Aircraft and Description columns from the aircraft table, based on the condition that the total number of passengers at the associated airport is greater than 10 million.", "metadata": {}}
{"_id": "gpt3_4203", "text": "\nThis statement selects the Aircraft and Description from the aircraft table for all aircraft that are used in airports where the total number of passengers is greater than 10 million.", "metadata": {}}
{"_id": "gpt3_4204", "text": "\nThis query retrieves the Aircraft and Description from the aircraft table, joining it with the airport_aircraft and airport tables, where the airport has more than 10 million passengers.", "metadata": {}}
{"_id": "gpt3_4205", "text": "\nThis statement retrieves the Aircraft and Description of aircraft from the aircraft, airport_aircraft, and airport tables where the total number of passengers at the airport is greater than 10 million.", "metadata": {}}
{"_id": "gpt3_4206", "text": "\nThe query will return the role description for the role \"Proof Reader\".", "metadata": {}}
{"_id": "gpt3_4207", "text": "\nThis query will return the role description of the role \"Proof Reader\" from the ROLES table.", "metadata": {}}
{"_id": "gpt3_4208", "text": "\nThe query above will return the role description for the role name \"Proof Reader\" from the ROLES table.", "metadata": {}}
{"_id": "gpt3_4209", "text": "\nThe query will return the role description for the role \"Proof Reader\", which is \"Reviews and corrects written material for accuracy, grammar, punctuation and spelling.\"", "metadata": {}}
{"_id": "gpt3_4210", "text": "\nThe query will return the role description for the role \"Proof Reader\".", "metadata": {}}
{"_id": "gpt3_4211", "text": "\nThis SQL query returns the city and the count of staff members who live in that city, ordered by the highest count, and limits the result to the top city.", "metadata": {}}
{"_id": "gpt3_4212", "text": "\nThis query selects the city with the highest number of staff members from the Addresses and Staff tables, and orders the results by the count of staff members in descending order. The query will return the city with the highest number of staff members and the", "metadata": {}}
{"_id": "gpt3_4213", "text": "\nThis query selects the city with the most staff members and counts the number of staff members in that city. It does this by joining the Addresses and Staff tables on the address_id and staff_address_id columns, respectively. It then", "metadata": {}}
{"_id": "gpt3_4214", "text": "\nThis query returns the city with the most staff members, by counting the number of staff members associated with each city in the Addresses and Staff tables, and then ordering the results by count in descending order and limiting the results to the top city.", "metadata": {}}
{"_id": "gpt3_4215", "text": "\nThis query selects the city with the most staff members and counts the number of staff members associated with it. It does this by joining the Addresses and Staff tables on the address_id and staff_address_id columns, respectively. It then", "metadata": {}}
{"_id": "gpt3_4216", "text": "\nThis query will select the name of all physicians who are affiliated with either the Surgery or Psychiatry departments.", "metadata": {}}
{"_id": "gpt3_4217", "text": "\nThis query will select the names of all physicians who are affiliated with either the Surgery or Psychiatry departments.", "metadata": {}}
{"_id": "gpt3_4218", "text": "\nThis query will select the name of all physicians who are affiliated with either the Surgery or Psychiatry department.", "metadata": {}}
{"_id": "gpt3_4219", "text": "\nThis query will return the names of physicians affiliated with either the Surgery or Psychiatry departments.", "metadata": {}}
{"_id": "gpt3_4220", "text": "\nThis query will select the name of all physicians who are affiliated with either the Surgery or Psychiatry department.", "metadata": {}}
{"_id": "gpt3_4221", "text": "\nThis query returns the year with the highest number of sections from the 'Section' table.", "metadata": {}}
{"_id": "gpt3_4222", "text": "\nThis query will return the year with the most sections from the 'SECTION' table, ordered by count in descending order and limited to the first result.", "metadata": {}}
{"_id": "gpt3_4223", "text": "\nThis query returns the year with the highest count of records from the \"SECTION\" table, ordered by the highest count first.", "metadata": {}}
{"_id": "gpt3_4224", "text": "\nThis query will return the year with the most sections in the table. It will return the year with the highest count of sections, ordered by the count in descending order, and limit the result to one.", "metadata": {}}
{"_id": "gpt3_4225", "text": "\nThis query returns the year with the most sections in the database.", "metadata": {}}
{"_id": "gpt3_4226", "text": "\nThis query selects the student_id and personal_name of students who are enrolled in two or more courses from the Student_Course_Enrolment and Students tables. It groups the results by student_id and uses a HAVING clause", "metadata": {}}
{"_id": "gpt3_4227", "text": "\nThis query selects the student_id and personal_name from two tables, Student_Course_Enrolment and Students, and groups the results by student_id, only showing those students who have enrolled in two or more courses.", "metadata": {}}
{"_id": "gpt3_4228", "text": "\nThis query retrieves student IDs and personal names from the Student_Course_Enrolment and Students tables, where the student has enrolled in at least two courses. It groups the results by student ID and returns the student IDs and personal names for", "metadata": {}}
{"_id": "gpt3_4229", "text": "\nThis query selects the student ID and personal name of students who are enrolled in two or more courses from the Student_Course_Enrolment and Students tables. It groups the results by student ID and counts the number of courses each student is enrolled", "metadata": {}}
{"_id": "gpt3_4230", "text": "\nThis query selects the student_id and personal_name of all students who have enrolled in two or more courses. It joins the Student_Course_Enrolment and Students tables on the student_id column, and then groups the results by", "metadata": {}}
{"_id": "gpt3_4231", "text": "\nThis query selects the employee_id, first_name, last_name, and salary from the employees table where the salary is greater than the average salary of all employees and the department_id is in the department_id of employees whose first", "metadata": {}}
{"_id": "gpt3_4232", "text": "\nThis query retrieves the employee ID, first name, last name, and salary of all employees with a salary higher than the average salary of all employees, and who work in a department with a first name starting with the letter 'J'.", "metadata": {}}
{"_id": "gpt3_4233", "text": "\nThis query selects the employee_id, first_name, last_name, and salary of all employees with a salary greater than the average salary of all employees, and who are in the same department as an employee whose first name begins with '", "metadata": {}}
{"_id": "gpt3_4234", "text": "\nThis query selects employee IDs, first names, last names, and salaries from the employees table where the salary is greater than the average salary of all employees, and the department ID is from an employee whose first name contains the letter 'J'.", "metadata": {}}
{"_id": "gpt3_4235", "text": "\nThis query selects the employee_id, first_name, last_name and salary from the employees table where the salary is greater than the average salary of all employees, and the department_id matches the department_id of an employee whose first", "metadata": {}}
{"_id": "gpt3_4236", "text": "\nThis query will return the average number of hours spent on all projects.", "metadata": {}}
{"_id": "gpt3_4237", "text": "\nThis query returns the average number of hours worked on all projects.", "metadata": {}}
{"_id": "gpt3_4238", "text": "\nThis query returns the average number of hours worked on all projects.", "metadata": {}}
{"_id": "gpt3_4239", "text": "\nThis query will return the average number of hours worked on all projects.", "metadata": {}}
{"_id": "gpt3_4240", "text": "\nThis query will return the average number of hours spent on all projects in the database.", "metadata": {}}
{"_id": "gpt3_4241", "text": "\nThis query selects the titles of courses that have exactly two prerequisites.", "metadata": {}}
{"_id": "gpt3_4242", "text": "\nThis query selects the title of a course that has two prerequisite courses.", "metadata": {}}
{"_id": "gpt3_4243", "text": "\nThis query selects the title of courses from the course table which have two prerequisites from the prereq table.", "metadata": {}}
{"_id": "gpt3_4244", "text": "\nThis query selects the titles of courses that have exactly two prerequisites.", "metadata": {}}
{"_id": "gpt3_4245", "text": "\nThis query selects the titles of courses that have two prerequisites.", "metadata": {}}
{"_id": "gpt3_4246", "text": "\nThis query selects the name of the user with the most reviews from the useracct and review tables. It joins the two tables on the u_id column, groups by u_id, orders by the count of reviews in descending order,", "metadata": {}}
{"_id": "gpt3_4247", "text": "\nThis query selects the name of the user with the most reviews from the useracct and review tables, ordered by the count of reviews from highest to lowest, and limiting the result to the top user.", "metadata": {}}
{"_id": "gpt3_4248", "text": "\nThis query selects the name of the user with the most reviews from the useracct and review tables. It joins the two tables on the user ID, groups by user ID, orders by the count of reviews, and returns the top user.", "metadata": {}}
{"_id": "gpt3_4249", "text": "\nThis query selects the name of the user with the most reviews from the useracct and review tables.", "metadata": {}}
{"_id": "gpt3_4250", "text": "\nThis query selects the name of the user with the most reviews from the useracct and review tables. It joins the two tables on the u_id column and groups the results by the u_id, then orders the results by the count", "metadata": {}}
{"_id": "gpt3_4251", "text": "\nThis query will select the name, city, country, and elevation of all airports located in the city of New York.", "metadata": {}}
{"_id": "gpt3_4252", "text": "\nThis query will select the name, city, country, and elevation of all airports located in New York.", "metadata": {}}
{"_id": "gpt3_4253", "text": "\nThis query will return the name, city, country, and elevation of all airports located in New York.", "metadata": {}}
{"_id": "gpt3_4254", "text": "\nThis query will return the name, city, country, and elevation of all airports located in New York.", "metadata": {}}
{"_id": "gpt3_4255", "text": "\nThis query returns the name, city, country and elevation for all airports located in New York.", "metadata": {}}
{"_id": "gpt3_4256", "text": "\nThis query selects the member names that belong to both party 3 and party 1.", "metadata": {}}
{"_id": "gpt3_4257", "text": "\nThis query selects the member names that belong to both party id 3 and party id 1.", "metadata": {}}
{"_id": "gpt3_4258", "text": "\nThis query returns the names of members who are in both party 3 and party 1.", "metadata": {}}
{"_id": "gpt3_4259", "text": "\nThis query returns the names of members who are in both party 3 and party 1.", "metadata": {}}
{"_id": "gpt3_4260", "text": "\nThis query selects the member names that are members of both party 3 and party 1.", "metadata": {}}
{"_id": "gpt3_4261", "text": "\nThis statement will select all unique city codes from the Student table.", "metadata": {}}
{"_id": "gpt3_4262", "text": "\nThe SQL query SELECT DISTINCT city_code FROM Student will return a list of all unique city codes from the Student table.", "metadata": {}}
{"_id": "gpt3_4263", "text": "\nThis SQL statement selects all distinct city codes from the Student table.", "metadata": {}}
{"_id": "gpt3_4264", "text": "\nThis query retrieves all the distinct city codes from the Student table.", "metadata": {}}
{"_id": "gpt3_4265", "text": "\nThis SQL query will select all unique city codes from the Student table.", "metadata": {}}
{"_id": "gpt3_4266", "text": "\nThis query will select the name and age of the youngest winning pilot from the pilot and match tables, ordered by age and limited to one result.", "metadata": {}}
{"_id": "gpt3_4267", "text": "\nThis query selects the name and age of the youngest pilot who won a match, ordered by age and limited to one result.", "metadata": {}}
{"_id": "gpt3_4268", "text": "\nThis query retrieves the name and age of the youngest pilot who won a match. It joins the pilot and match tables on the pilot_id column and orders the results by age, then limits the results to the first row.", "metadata": {}}
{"_id": "gpt3_4269", "text": "\nThis query will select the name and age of the youngest pilot who has won a match from the pilot and match tables, ordered by age and limited to one result.", "metadata": {}}
{"_id": "gpt3_4270", "text": "\nThis query selects the name and age of the youngest pilot who has won a match, ordering by age in ascending order and limiting the results to one row.", "metadata": {}}
{"_id": "gpt3_4271", "text": "\nThis query selects the salary and manager_id of all employees whose manager_id is not null.", "metadata": {}}
{"_id": "gpt3_4272", "text": "\nThis query will select the salary and manager_id from all employees who have a manager_id that is not null.", "metadata": {}}
{"_id": "gpt3_4273", "text": "\nThis query will select the salary and manager ID from all employees who have a manager ID that is not null.", "metadata": {}}
{"_id": "gpt3_4274", "text": "\nThis query will select the salary and manager_id of all employees who have a manager_id that is not null.", "metadata": {}}
{"_id": "gpt3_4275", "text": "\nThis query selects the salary and manager_id of all employees who have a manager_id that is not \"null\".", "metadata": {}}
{"_id": "gpt3_4276", "text": "\nThis statement will select all records from the CUSTOMER table where the State field is equal to \"NY\".", "metadata": {}}
{"_id": "gpt3_4277", "text": "\nThis SQL statement will return all records from the CUSTOMER table where the State field is equal to \"NY\".", "metadata": {}}
{"_id": "gpt3_4278", "text": "\nThis statement selects all records from the CUSTOMER table where the State field is equal to \"NY\".", "metadata": {}}
{"_id": "gpt3_4279", "text": "\nThe above SQL query selects all records from the CUSTOMER table where the State field is equal to \"NY\". This query will return all customers who have a state of New York.", "metadata": {}}
{"_id": "gpt3_4280", "text": "\nThe above SQL query will select all records from the CUSTOMER table where the State column is equal to \"NY\".", "metadata": {}}
{"_id": "gpt3_4281", "text": "\nThis query will return the order item ID for any orders containing a product with an ID of 11.", "metadata": {}}
{"_id": "gpt3_4282", "text": "\nThis statement will select the order_item_id from the order_items table where the product_id is equal to 11.", "metadata": {}}
{"_id": "gpt3_4283", "text": "\nThis query will return the order_item_id for all order items with a product_id of 11.", "metadata": {}}
{"_id": "gpt3_4284", "text": "\nThis query will retrieve all order item IDs from the order_items table where the product_id is equal to 11.", "metadata": {}}
{"_id": "gpt3_4285", "text": "\nThis query will return the order_item_id of all order items associated with product_id 11.", "metadata": {}}
{"_id": "gpt3_4286", "text": "\nThis query will return the average, minimum, maximum, and total of all the transaction amounts from a table of financial transactions.", "metadata": {}}
{"_id": "gpt3_4287", "text": "\nThis query returns the average, minimum, maximum, and total of the transaction amounts from the Financial_transactions table.", "metadata": {}}
{"_id": "gpt3_4288", "text": "\nThis query returns the average, minimum, maximum and sum of transaction amounts from a Financial_transactions table.", "metadata": {}}
{"_id": "gpt3_4289", "text": "\nThis query returns the average, minimum, maximum, and sum of all transaction amounts from the Financial_transactions table.", "metadata": {}}
{"_id": "gpt3_4290", "text": "\nThis query returns the average, minimum, maximum, and total of all the transaction amounts from the Financial_transactions table.", "metadata": {}}
{"_id": "gpt3_4291", "text": "\nThis query returns the total number of records in the cinema table.", "metadata": {}}
{"_id": "gpt3_4292", "text": "\nThis query returns the total number of records in the cinema table.", "metadata": {}}
{"_id": "gpt3_4293", "text": "\nThis query would return the total number of records in the cinema table.", "metadata": {}}
{"_id": "gpt3_4294", "text": "\nThis query returns the total number of records in the cinema table.", "metadata": {}}
{"_id": "gpt3_4295", "text": "\nThis query will return the total number of rows in the cinema table.", "metadata": {}}
{"_id": "gpt3_4296", "text": "\nThis query will return a list of investors who have invested in at least two entrepreneurs.", "metadata": {}}
{"_id": "gpt3_4297", "text": "\nThis query returns a list of investors who have invested in at least two entrepreneurs.", "metadata": {}}
{"_id": "gpt3_4298", "text": "\nThis query returns all investors who have invested in two or more entrepreneurs.", "metadata": {}}
{"_id": "gpt3_4299", "text": "\nThis query will return a list of investors who have invested in at least two entrepreneurs.", "metadata": {}}
{"_id": "gpt3_4300", "text": "\nThis query returns all investors that have invested in more than two entrepreneurs.", "metadata": {}}
{"_id": "gpt3_4301", "text": "\nThis query selects the name and the count of reviews associated with each user from the useracct and review tables, grouped by user ID.", "metadata": {}}
{"_id": "gpt3_4302", "text": "\nThis query counts the number of reviews each user has written by joining the useracct and review tables and grouping by the user ID. The output will be the user's name and the count of reviews they have written.", "metadata": {}}
{"_id": "gpt3_4303", "text": "\nThis query is selecting the name and the count of reviews from the useracct and review tables, grouping them by the user id.", "metadata": {}}
{"_id": "gpt3_4304", "text": "\nThis query selects the name and count of reviews for each user in the useracct and review tables. It joins the two tables on the u_id field and groups by the u_id field in the review table.", "metadata": {}}
{"_id": "gpt3_4305", "text": "\nThis query returns the name and count of reviews for each user in the useracct and review tables.", "metadata": {}}
{"_id": "gpt3_4306", "text": "\nThis query selects the problem_id from the problems table for all problems reported after 1995 that are associated with the product named \"voluptatem\" from the product table.", "metadata": {}}
{"_id": "gpt3_4307", "text": "\nThis query selects the problem_id from the problems table for any problem reported after 1995 that is related to the product \"voluptatem\" from the product table.", "metadata": {}}
{"_id": "gpt3_4308", "text": "\nThis query selects all problem_id's from the problems table where the product_id matches the product_name \"voluptatem\" and the date_problem_reported is after 1995.", "metadata": {}}
{"_id": "gpt3_4309", "text": "\nThis query selects the problem_id from the problems table for any problem reported after 1995 that is related to the product with the name \"voluptatem\".", "metadata": {}}
{"_id": "gpt3_4310", "text": "\nThis query selects the problem_id from the problems table for all problems reported after 1995 associated with the product with the name \"voluptatem\" from the product table.", "metadata": {}}
{"_id": "gpt3_4311", "text": "\nThis query returns the number of proteins associated with each institution in the institution and protein tables.", "metadata": {}}
{"_id": "gpt3_4312", "text": "\nThis query counts the number of proteins associated with each institution.", "metadata": {}}
{"_id": "gpt3_4313", "text": "\nThis query counts the number of proteins associated with each institution.", "metadata": {}}
{"_id": "gpt3_4314", "text": "\nThis query counts the number of proteins associated with each institution.", "metadata": {}}
{"_id": "gpt3_4315", "text": "\nThis query counts the number of proteins associated with each institution. It does so by joining the institution and protein tables on the institution_id column, grouping the results by institution_id, and counting the number of proteins associated with each institution.", "metadata": {}}
{"_id": "gpt3_4316", "text": "\nThis query will select the titles and years of all movies that have the same director as another movie, but have different titles.", "metadata": {}}
{"_id": "gpt3_4317", "text": "\nThis query will select the title and year of a movie from the Movie table, joining it with another movie from the same director where the titles are not the same.", "metadata": {}}
{"_id": "gpt3_4318", "text": "\nThis query selects the title and year of a movie from the Movie table, where the title is different from another movie with the same director.", "metadata": {}}
{"_id": "gpt3_4319", "text": "\nThis query selects the title and year of a movie from the Movie table, where the movie has a different title than another movie with the same director.", "metadata": {}}
{"_id": "gpt3_4320", "text": "\nThis SQL statement selects the title and year of a movie from the Movie table, as well as the title and year of another movie from the same director. It only returns movies with different titles.", "metadata": {}}
{"_id": "gpt3_4321", "text": "\nThis query returns the budget type code with the highest count from the Documents_with_expenses table, ordered in descending order.", "metadata": {}}
{"_id": "gpt3_4322", "text": "\nThis query returns the budget type code from the Documents_with_expenses table that appears the most often, ordered by the count of each budget type code in descending order and limited to the top result.", "metadata": {}}
{"_id": "gpt3_4323", "text": "\nThis query selects the budget type code from the Documents_with_expenses table and groups them by budget type code, ordering them by count in descending order, and limiting the result to the top one budget type code.", "metadata": {}}
{"_id": "gpt3_4324", "text": "\nThis query returns the budget type code with the highest number of documents with expenses from the Documents_with_expenses table, ordered by count in descending order and limited to the top result.", "metadata": {}}
{"_id": "gpt3_4325", "text": "\nThis statement retrieves the budget_type_code with the highest count from the Documents_with_expenses table, ordered by count in descending order.", "metadata": {}}
{"_id": "gpt3_4326", "text": "\nThis query will select the email address and date of birth from the Customers table for any customers whose first name is Carole.", "metadata": {}}
{"_id": "gpt3_4327", "text": "\nThis statement will select the email address and date of birth of customers with the first name Carole from the Customers table.", "metadata": {}}
{"_id": "gpt3_4328", "text": "\nThis SQL query will select the email address and date of birth from the Customers table for the customer whose first name is \"Carole\".", "metadata": {}}
{"_id": "gpt3_4329", "text": "\nThis query will return the email address and date of birth of any customers with the first name of \"Carole\" from the Customers table.", "metadata": {}}
{"_id": "gpt3_4330", "text": "\nThis query will return the email address and date of birth of all customers in the Customers table whose first name is \"Carole.\"", "metadata": {}}
{"_id": "gpt3_4331", "text": "\nThis query will count the number of airlines in Russia.", "metadata": {}}
{"_id": "gpt3_4332", "text": "\nThis query will return the total number of airlines based in Russia.", "metadata": {}}
{"_id": "gpt3_4333", "text": "\nThis query will return the number of airlines in the \"airlines\" table that are based in Russia.", "metadata": {}}
{"_id": "gpt3_4334", "text": "\nThis query will count the number of airlines in the table that are based in Russia.", "metadata": {}}
{"_id": "gpt3_4335", "text": "\nThis query will return the total number of airlines from Russia.", "metadata": {}}
{"_id": "gpt3_4336", "text": "\nThis query will select the distinct state and enrollment of colleges from the college table (T1) which have had a tryout with a \"yes\" decision in the tryout table (T2).", "metadata": {}}
{"_id": "gpt3_4337", "text": "\nThis query will select the distinct state and enrollment of colleges from the college table (T1) that have accepted students from the tryout table (T2).", "metadata": {}}
{"_id": "gpt3_4338", "text": "\nThis query will select all distinct states and enrollment numbers from the college table (T1) that have at least one student with a 'yes' decision in the tryout table (T2).", "metadata": {}}
{"_id": "gpt3_4339", "text": "\nThis query returns a list of distinct states and enrollment numbers from the college table for colleges that have accepted a student from the tryout table.", "metadata": {}}
{"_id": "gpt3_4340", "text": "\nThis query selects all the distinct states and enrollment numbers from the college table that have a corresponding 'yes' decision in the tryout table.", "metadata": {}}
{"_id": "gpt3_4341", "text": "\nThis query returns the number of distinct names in the PersonFriend table who have a friend who does not live in Austin.", "metadata": {}}
{"_id": "gpt3_4342", "text": "\nThis query will return a count of the distinct names of people in the PersonFriend table who do not live in Austin.", "metadata": {}}
{"_id": "gpt3_4343", "text": "\nThis query will return the count of distinct names from the PersonFriend table where the friend is not from Austin.", "metadata": {}}
{"_id": "gpt3_4344", "text": "\nThis query will count the number of distinct names in the PersonFriend table that do not have a corresponding name in the Person table for people who live in Austin.", "metadata": {}}
{"_id": "gpt3_4345", "text": "\nThis query will count the number of distinct names from the PersonFriend table that do not have a friend living in Austin.", "metadata": {}}
{"_id": "gpt3_4346", "text": "\nThis query selects the name and team_id of the team with the lowest average salary, ordered by ascending salary and limited to one result.", "metadata": {}}
{"_id": "gpt3_4347", "text": "\nThis query selects the name and team ID of the team with the lowest average salary, ordered by ascending salary and limited to one result.", "metadata": {}}
{"_id": "gpt3_4348", "text": "\nThis query selects the name and team_id of the team with the lowest average salary, ordered by ascending salary.", "metadata": {}}
{"_id": "gpt3_4349", "text": "\nThis query retrieves the name and team ID of the team with the lowest average salary, ordered by average salary in ascending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_4350", "text": "\nThis query selects the name and team_id of the team with the lowest average salary, ordered by ascending salary and limited to the first result.", "metadata": {}}
{"_id": "gpt3_4351", "text": "\nThis query returns the count of all students whose personal name ends with 'son'.", "metadata": {}}
{"_id": "gpt3_4352", "text": "\nThis query will return the total number of students in a table whose personal name contains the substring \"son\".", "metadata": {}}
{"_id": "gpt3_4353", "text": "\nThis query will count the number of students in the Students table whose personal name ends with the string 'son'.", "metadata": {}}
{"_id": "gpt3_4354", "text": "\nThis query will return the count of all students whose personal name contains \"son\" as a substring.", "metadata": {}}
{"_id": "gpt3_4355", "text": "\nThis query will count the number of students in the Students table whose personal name ends with \"son\".", "metadata": {}}
{"_id": "gpt3_4356", "text": "\nThis query selects the last name and first name of students who are registered for either football or lacrosse from the SportsInfo and Student tables.", "metadata": {}}
{"_id": "gpt3_4357", "text": "\nThis query selects the last name and first name of students who are involved in either Football or Lacrosse from the SportsInfo and Student tables.", "metadata": {}}
{"_id": "gpt3_4358", "text": "\nThis query selects the last name and first name of students from the Student table who are participating in either Football or Lacrosse from the SportsInfo table.", "metadata": {}}
{"_id": "gpt3_4359", "text": "\nThis query selects the last name and first name of students from the Student table who are involved in either Football or Lacrosse from the SportsInfo table.", "metadata": {}}
{"_id": "gpt3_4360", "text": "\nThis query selects the last name and first name of students from the Student table who are enrolled in either Football or Lacrosse from the SportsInfo table.", "metadata": {}}
{"_id": "gpt3_4361", "text": "\nThis query returns the total number of stations located in Mountain View.", "metadata": {}}
{"_id": "gpt3_4362", "text": "\nThis query would count the number of stations in the city of Mountain View.", "metadata": {}}
{"_id": "gpt3_4363", "text": "\nThis query will return the number of stations in the city of Mountain View.", "metadata": {}}
{"_id": "gpt3_4364", "text": "\nThis query will count the number of stations located in the city of Mountain View.", "metadata": {}}
{"_id": "gpt3_4365", "text": "\nThis query will count the number of stations in Mountain View.", "metadata": {}}
{"_id": "gpt3_4366", "text": "\nThis query returns the color description of the least popular product, as determined by counting the number of products with that color code.", "metadata": {}}
{"_id": "gpt3_4367", "text": "\nThis query selects the color description with the least number of products associated with it from the products and ref_colors tables, ordered by the number of products associated with each color in ascending order and limited to the first result.", "metadata": {}}
{"_id": "gpt3_4368", "text": "\nThis query will select the color description from the ref_colors table with the least amount of products associated with it, and order the results in ascending order.", "metadata": {}}
{"_id": "gpt3_4369", "text": "\nThis query returns the color description of the least popular product in a database, as determined by the number of times it appears in the products table. It joins the products and ref_colors tables on the color_code column and groups the results", "metadata": {}}
{"_id": "gpt3_4370", "text": "\nThis query selects the color description with the least amount of products from the products and ref_colors tables, ordered by the least amount of products and limited to one result.", "metadata": {}}
{"_id": "gpt3_4371", "text": "\nThis query will select the time taken by climbers to reach the summit of mountains in Uganda.", "metadata": {}}
{"_id": "gpt3_4372", "text": "\nThis query will select the time taken by climbers to climb a mountain in Uganda.", "metadata": {}}
{"_id": "gpt3_4373", "text": "\nThis statement retrieves the time it took for a climber to climb a mountain in Uganda.", "metadata": {}}
{"_id": "gpt3_4374", "text": "\nThis query selects the time taken by a climber to climb a mountain in Uganda.", "metadata": {}}
{"_id": "gpt3_4375", "text": "\nThis query selects the time that a climber took to complete a mountain located in Uganda.", "metadata": {}}
{"_id": "gpt3_4376", "text": "\nThis query selects the student_id and login_name of the student with the most course enrollments, ordered by the number of enrollments in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_4377", "text": "\nThis query selects the student_id and login_name of the student who has enrolled in the most courses from the Student_Course_Enrolment and Students tables. It groups the results by student_id and orders them by the count of", "metadata": {}}
{"_id": "gpt3_4378", "text": "\nThis query selects the student_id and login_name of the student who has enrolled in the most courses, ordered by the number of courses they are enrolled in, and limits the result to one row.", "metadata": {}}
{"_id": "gpt3_4379", "text": "\nThis query selects the student ID and login name of the student who is enrolled in the most courses, ordering the results by the number of courses and limiting the results to one.", "metadata": {}}
{"_id": "gpt3_4380", "text": "\nThis query selects the student ID and login name of the student who has enrolled in the most courses, based on data from the Student_Course_Enrolment and Students tables. It groups the data by student ID and orders by the number of", "metadata": {}}
{"_id": "gpt3_4381", "text": "\nThis query selects the school name from the endowment and school tables, grouping by school_id and having a sum of the amount in the endowment table that is less than or equal to 10.", "metadata": {}}
{"_id": "gpt3_4382", "text": "\nThis query returns the school name from the school table for any school whose total endowment amount is less than or equal to 10.", "metadata": {}}
{"_id": "gpt3_4383", "text": "\nThis query selects the school name from the endowment and school tables, grouping by school ID and having a sum of the amount in the endowment table that is less than or equal to 10.", "metadata": {}}
{"_id": "gpt3_4384", "text": "\nThis query selects the school name from the endowment and school tables, grouped by school ID and only where the sum of the amount in the endowment table is less than or equal to 10.", "metadata": {}}
{"_id": "gpt3_4385", "text": "\nThis query selects the school name from the endowment and school tables, grouping by school ID and having a sum of the amount in the endowment table that is less than or equal to 10.", "metadata": {}}
{"_id": "gpt3_4386", "text": "\nThis query will return all the names, average attendances, and total attendances from the stadium table that are not associated with any injuries or accidents in the injury_accident table.", "metadata": {}}
{"_id": "gpt3_4387", "text": "\nThis query returns the name, average attendance, and total attendance of all stadiums, except those stadiums that had a game with an injury or accident.", "metadata": {}}
{"_id": "gpt3_4388", "text": "\nThis query returns the name, average attendance, and total attendance from the stadium table, except for those stadiums that had a game that resulted in an injury or accident.", "metadata": {}}
{"_id": "gpt3_4389", "text": "\nThis query returns all the information from the stadium table that does not have a corresponding entry in the game and injury_accident tables. It returns the name, average attendance, and total attendance from the stadium table.", "metadata": {}}
{"_id": "gpt3_4390", "text": "\nThis query returns all rows from the stadium table that do not have any associated rows in the game and injury_accident tables. It returns the name, average attendance, and total attendance of the stadiums that do not have any associated injuries or games", "metadata": {}}
{"_id": "gpt3_4391", "text": "\nThis query will select the Product_ID from the INVOICES table, group them by Product_ID, order them by the count of each Product_ID in descending order, and limit the results to the top one. This will return the", "metadata": {}}
{"_id": "gpt3_4392", "text": "\nThis query will select the Product_ID from the INVOICES table, group the results by Product_ID, order them by the count of each Product_ID in descending order, and limit the results to the top 1 result. This query", "metadata": {}}
{"_id": "gpt3_4393", "text": "\nThis query will select the product ID from the INVOICES table that appears the most often and display it first. It will group the product IDs together and order them by the count of how many times each appears, with the most frequent one appearing", "metadata": {}}
{"_id": "gpt3_4394", "text": "\nThis query will select the Product_ID from the INVOICES table, group them by Product_ID, order them by the count of each Product_ID in descending order, and then limit the result to the top 1 Product_ID.", "metadata": {}}
{"_id": "gpt3_4395", "text": "\nThis query selects the Product_ID from the INVOICES table, groups the results by Product_ID, orders the results by the count of each Product_ID, and limits the results to the top result. This query returns the Product_", "metadata": {}}
{"_id": "gpt3_4396", "text": "\nThis query will count the number of salaries in the salary table for the Boston Red Stockings team in the year 2000.", "metadata": {}}
{"_id": "gpt3_4397", "text": "\nThis query counts the number of salaries in the year 2000 for the team 'Boston Red Stockings'.", "metadata": {}}
{"_id": "gpt3_4398", "text": "\nThis query will count the number of salaries in the year 2000 for players on the Boston Red Stockings team.", "metadata": {}}
{"_id": "gpt3_4399", "text": "\nThis query counts the number of salaries in the year 2000 for the Boston Red Stockings team.", "metadata": {}}
{"_id": "gpt3_4400", "text": "\nThis query counts the number of salaries in the year 2000 for the team 'Boston Red Stockings'.", "metadata": {}}
{"_id": "gpt3_4401", "text": "\nThis query will select the name of the project and the name of the scientist from the assignedto, projects, and scientists tables, where the project has the minimum number of hours.", "metadata": {}}
{"_id": "gpt3_4402", "text": "\nThis query selects the name of the project and the name of the scientist associated with the project that has the least amount of hours.", "metadata": {}}
{"_id": "gpt3_4403", "text": "\nThis query selects the name of the project and the name of the scientist assigned to the project that has the minimum hours assigned to it.", "metadata": {}}
{"_id": "gpt3_4404", "text": "\nThis query retrieves the name of the project and the name of the scientist assigned to it with the least amount of hours.", "metadata": {}}
{"_id": "gpt3_4405", "text": "\nThis query selects the name of the project and the name of the scientist associated with the project with the least amount of hours.", "metadata": {}}
{"_id": "gpt3_4406", "text": "\nThis query returns the names of all products that are manufactured by both Creative Labs and Sony.", "metadata": {}}
{"_id": "gpt3_4407", "text": "\nThis query will select the names of products from the products table that are manufactured by both Creative Labs and Sony.", "metadata": {}}
{"_id": "gpt3_4408", "text": "\nThis query selects the names of products that are manufactured by both Creative Labs and Sony.", "metadata": {}}
{"_id": "gpt3_4409", "text": "\nThis query selects the names of products from the 'products' table that are both manufactured by Creative Labs and Sony.", "metadata": {}}
{"_id": "gpt3_4410", "text": "\nThis query will return the names of all products from both Creative Labs and Sony.", "metadata": {}}
{"_id": "gpt3_4411", "text": "\nThe SQL query above would return the document_type_code for the document type \"Paper\" from the Ref_document_types table.", "metadata": {}}
{"_id": "gpt3_4412", "text": "\nThis query will return the document type code for a document type name of \"Paper\".", "metadata": {}}
{"_id": "gpt3_4413", "text": "\nThis query will return the document type code for \"Paper\" from the Ref_document_types table.", "metadata": {}}
{"_id": "gpt3_4414", "text": "\nThis query will return the document_type_code for the document type name \"Paper\".", "metadata": {}}
{"_id": "gpt3_4415", "text": "\nThis query will return the document_type_code for the document type \"Paper\" from the Ref_document_types table.", "metadata": {}}
{"_id": "gpt3_4416", "text": "\nThis query will select the name of the physician who has prescribed the highest dose of medication, as ordered by the dose of the medication.", "metadata": {}}
{"_id": "gpt3_4417", "text": "\nThis query returns the name of the physician who has prescribed the highest dose of a medication.", "metadata": {}}
{"_id": "gpt3_4418", "text": "\nThis query selects the name of the physician with the highest dose prescribed from the physician and prescribes tables.", "metadata": {}}
{"_id": "gpt3_4419", "text": "\nThis query will select the name of the physician who has prescribed the highest dose of medication, as indicated by the \"ORDER BY T2.dose DESC LIMIT 1\" clause.", "metadata": {}}
{"_id": "gpt3_4420", "text": "\nThis query selects the name of the physician with the highest dose of prescription from the physician and prescribes tables, ordered by dose in descending order, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_4421", "text": "\nThis query will return the minimum, maximum, and average age of people in a given table.", "metadata": {}}
{"_id": "gpt3_4422", "text": "\nThis query will return the minimum age, maximum age, and average age from the people table.", "metadata": {}}
{"_id": "gpt3_4423", "text": "\nThis query will return the minimum age, maximum age, and average age of the people in the table.", "metadata": {}}
{"_id": "gpt3_4424", "text": "\nThis query will return the minimum age, maximum age, and average age from the people table.", "metadata": {}}
{"_id": "gpt3_4425", "text": "\nThis query will return the minimum age, maximum age, and average age from the people table.", "metadata": {}}
{"_id": "gpt3_4426", "text": "\nThis statement will select the customer first and last names from the Customers table that are not in the Accounts table.", "metadata": {}}
{"_id": "gpt3_4427", "text": "\nThis query selects customer first and last names from the Customers table, except for those customers who have an account in the Accounts table.", "metadata": {}}
{"_id": "gpt3_4428", "text": "\nThis query returns the first and last names of customers who do not have an account in the Accounts table.", "metadata": {}}
{"_id": "gpt3_4429", "text": "\nThis query will select all customer first and last names from the Customers table, except for those that have an account in the Accounts table.", "metadata": {}}
{"_id": "gpt3_4430", "text": "\nThis query selects all customer first and last names from the Customers table, except for customer first and last names that appear in both the Customers and Accounts tables.", "metadata": {}}
{"_id": "gpt3_4431", "text": "\nThis query will return the total number of rooms in the Columbus Square apartment building.", "metadata": {}}
{"_id": "gpt3_4432", "text": "\nThis query returns the sum of all room counts in the apartments of the Columbus Square apartment building.", "metadata": {}}
{"_id": "gpt3_4433", "text": "\nThis query will return the total number of rooms in the Columbus Square apartment building.", "metadata": {}}
{"_id": "gpt3_4434", "text": "\nThis query will return the total number of rooms in the Columbus Square apartment building.", "metadata": {}}
{"_id": "gpt3_4435", "text": "\nThis query will return the sum of the room counts of all the apartments in the Columbus Square apartment building.", "metadata": {}}
{"_id": "gpt3_4436", "text": "\nThis query retrieves the name of each member and the date of the performance they attended, ordered by the number of members in attendance.", "metadata": {}}
{"_id": "gpt3_4437", "text": "\nThis query retrieves the names and dates of performances attended by members, sorted in descending order of attendance.", "metadata": {}}
{"_id": "gpt3_4438", "text": "\nThis query retrieves the name and date of performances of members, ordered by attendance.", "metadata": {}}
{"_id": "gpt3_4439", "text": "\nThis query selects the name of a member and the date of a performance from the member_attendance, member, and performance tables, and orders the results by attendance.", "metadata": {}}
{"_id": "gpt3_4440", "text": "\nThis query selects the Name and Date of performances from the member_attendance, member, and performance tables, and orders them by attendance in descending order.", "metadata": {}}
{"_id": "gpt3_4441", "text": "\nThis query selects all the distinct directors from the film table who had a film released in 1995, as indicated by the film_market_estimation table.", "metadata": {}}
{"_id": "gpt3_4442", "text": "\nThis statement selects all unique directors from the film table who had films released in 1995, as indicated by the film_market_estimation table.", "metadata": {}}
{"_id": "gpt3_4443", "text": "\nThis query returns a list of distinct directors who released films in 1995 according to film market estimation data.", "metadata": {}}
{"_id": "gpt3_4444", "text": "\nThis statement will select the distinct directors from the film table who had films released in 1995 according to the film_market_estimation table.", "metadata": {}}
{"_id": "gpt3_4445", "text": "\nThis query will return a list of all the distinct directors of films that had market estimations in 1995.", "metadata": {}}
{"_id": "gpt3_4446", "text": "\nThis query selects the name and type of a company from the operate_company table, based on its ID matching the company_id in the flight table.", "metadata": {}}
{"_id": "gpt3_4447", "text": "\nThis statement selects the name and type of a company from the operate_company table, joining it with the flight table on the company_id field.", "metadata": {}}
{"_id": "gpt3_4448", "text": "\nThis query selects the name and type of a company from the operate_company table, and joins it to the flight table on the company_id column.", "metadata": {}}
{"_id": "gpt3_4449", "text": "\nThis query selects the name and type of a company from the operate_company table that is associated with a flight from the flight table.", "metadata": {}}
{"_id": "gpt3_4450", "text": "\nThis query selects the name and type of an operating company from the operate_company table and joins it to the flight table on the company_id.", "metadata": {}}
{"_id": "gpt3_4451", "text": "\nThis query will return the number of AsstProf faculty members grouped by sex.", "metadata": {}}
{"_id": "gpt3_4452", "text": "\nThis query will return the number of Assistant Professors in the Faculty table, grouped by sex. The result will be two columns, one for sex and one for the count of Assistant Professors for each sex.", "metadata": {}}
{"_id": "gpt3_4453", "text": "\nThis query will count the number of Assistant Professors in the Faculty table grouped by sex.", "metadata": {}}
{"_id": "gpt3_4454", "text": "\nThis query will return a count of the number of Assistant Professors in a Faculty table grouped by their sex.", "metadata": {}}
{"_id": "gpt3_4455", "text": "\nThis query will count the number of Assistant Professors in the Faculty table grouped by sex.", "metadata": {}}
{"_id": "gpt3_4456", "text": "\nThis query returns the most common position from the tryout table, ordered by the number of occurrences in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_4457", "text": "\nThis query will select the position (pPos) with the most appearances from the tryout table, and return the position with the highest count.", "metadata": {}}
{"_id": "gpt3_4458", "text": "\nThis query retrieves the most frequently occurring position from the tryout table, ordered by the count of each position, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_4459", "text": "\nThis query returns the position with the most players from the tryout table, ordered by the number of players in each position in descending order and limited to the top result.", "metadata": {}}
{"_id": "gpt3_4460", "text": "\nThis query will select the most common position from the \"tryout\" table and order the results by count in descending order, with the most common position appearing first. It will then limit the results to the most common position.", "metadata": {}}
{"_id": "gpt3_4461", "text": "\nThis query returns the competition type from the competition table where the count of each competition type is less than or equal to 5.", "metadata": {}}
{"_id": "gpt3_4462", "text": "\nThis query will select the competition type from the competition table and group the results by competition type, showing only those with a count of five or fewer.", "metadata": {}}
{"_id": "gpt3_4463", "text": "\nThis query will return all competition types from the competition table that have five or fewer entries.", "metadata": {}}
{"_id": "gpt3_4464", "text": "\nThis query returns all distinct competition types from the competition table which have five or fewer entries.", "metadata": {}}
{"_id": "gpt3_4465", "text": "\nThis query will select the competition type from the competition table and group the results by competition type, but only show those with five or less entries.", "metadata": {}}
{"_id": "gpt3_4466", "text": "\nThis SQL statement will select the first and last names of customers from the Customers table who have an address in the city of Lockmanfurt from the Addresses table.", "metadata": {}}
{"_id": "gpt3_4467", "text": "\nThis SQL statement selects the first and last name of customers from the Customers table who live in the city of Lockmanfurt, as indicated by the Addresses table.", "metadata": {}}
{"_id": "gpt3_4468", "text": "\nThis query selects the first and last name of customers from the Customers table who have an address in the city of Lockmanfurt, as indicated by the Addresses table.", "metadata": {}}
{"_id": "gpt3_4469", "text": "\nThis statement will select the first and last name of customers from the Customers table who live in the city of Lockmanfurt, as identified in the Addresses table.", "metadata": {}}
{"_id": "gpt3_4470", "text": "\nThis SQL query will select the first and last names of customers from the Customers table who live in Lockmanfurt, based on their address in the Addresses table.", "metadata": {}}
{"_id": "gpt3_4471", "text": "\nThis statement returns the names of all patients who have not been prescribed the medication 'Procrastin-X'.", "metadata": {}}
{"_id": "gpt3_4472", "text": "\nThis query returns a list of all patient names from the patient table that are not prescribed the medication 'Procrastin-X'.", "metadata": {}}
{"_id": "gpt3_4473", "text": "\nThis query returns the names of all patients who are not prescribed the medication 'Procrastin-X'.", "metadata": {}}
{"_id": "gpt3_4474", "text": "\nThis query returns the names of all patients who have not been prescribed the medication 'Procrastin-X'.", "metadata": {}}
{"_id": "gpt3_4475", "text": "\nThis query returns the names of all patients who have not been prescribed the medication 'Procrastin-X'.", "metadata": {}}
{"_id": "gpt3_4476", "text": "\nThis query will return the class code of the class located in room KLR209.", "metadata": {}}
{"_id": "gpt3_4477", "text": "\nThis query will return the class code for any class that is held in room KLR209.", "metadata": {}}
{"_id": "gpt3_4478", "text": "\nThis query will return the class code of the class located in room KLR209.", "metadata": {}}
{"_id": "gpt3_4479", "text": "\nThis query will select the class code from the CLASS table where the class room is KLR209.", "metadata": {}}
{"_id": "gpt3_4480", "text": "\nThis query will return the class code of the class located in room KLR209.", "metadata": {}}
{"_id": "gpt3_4481", "text": "\nThis query will return the total number of rows in the candidate table.", "metadata": {}}
{"_id": "gpt3_4482", "text": "\nThis query returns the total number of records in the candidate table.", "metadata": {}}
{"_id": "gpt3_4483", "text": "\nThis query returns the number of records in the candidate table.", "metadata": {}}
{"_id": "gpt3_4484", "text": "\nThis query would return the total number of rows in the candidate table.", "metadata": {}}
{"_id": "gpt3_4485", "text": "\nThis query will return the total number of records in the candidate table.", "metadata": {}}
{"_id": "gpt3_4486", "text": "\nThis query returns the total number of medications and their corresponding names from the medication and prescribes tables, grouped by the brand of the medication.", "metadata": {}}
{"_id": "gpt3_4487", "text": "\nThis query returns the total number of medications prescribed for each medication brand.", "metadata": {}}
{"_id": "gpt3_4488", "text": "\nThis query returns the count of each medication name and the corresponding brand name from the medication and prescribes tables.", "metadata": {}}
{"_id": "gpt3_4489", "text": "\nThis query will return the total number of medications prescribed per brand name.", "metadata": {}}
{"_id": "gpt3_4490", "text": "\nThis query returns the total count of each medication name, grouped by its brand.", "metadata": {}}
{"_id": "gpt3_4491", "text": "\nThis query returns the number of distinct cities that appear in the Person table.", "metadata": {}}
{"_id": "gpt3_4492", "text": "\nThis query will return the total number of distinct cities from the Person table.", "metadata": {}}
{"_id": "gpt3_4493", "text": "\nThis query returns the number of distinct cities from the Person table.", "metadata": {}}
{"_id": "gpt3_4494", "text": "\nThis query returns the number of distinct cities that appear in the Person table.", "metadata": {}}
{"_id": "gpt3_4495", "text": "\nThis query will return the number of distinct cities in the Person table.", "metadata": {}}
{"_id": "gpt3_4496", "text": "\nThis statement is selecting the employee_id and job_title from the employees and jobs tables, respectively, where the department_id is equal to 80.", "metadata": {}}
{"_id": "gpt3_4497", "text": "\nThis SQL query retrieves the employee IDs and job titles of all employees in the department with ID 80.", "metadata": {}}
{"_id": "gpt3_4498", "text": "\nThis query selects the employee ID and job title for all employees in department 80.", "metadata": {}}
{"_id": "gpt3_4499", "text": "\nThis query selects the employee ID and job title of employees in department 80.", "metadata": {}}
{"_id": "gpt3_4500", "text": "\nThis query selects the employee ID and job title from the employees and jobs tables where the department ID is equal to 80.", "metadata": {}}
{"_id": "gpt3_4501", "text": "\nThis query returns the phone number of the customer who most recently raised a complaint.", "metadata": {}}
{"_id": "gpt3_4502", "text": "\nThis query retrieves the phone number of the customer who most recently raised a complaint.", "metadata": {}}
{"_id": "gpt3_4503", "text": "\nThis query retrieves the phone number of the customer who has raised the most recent complaint.", "metadata": {}}
{"_id": "gpt3_4504", "text": "\nThis query selects the phone number of the customer who has most recently raised a complaint, from the customers and complaints tables. It does this by joining the customers and complaints tables on the customer_id, ordering the complaints by date in descending order,", "metadata": {}}
{"_id": "gpt3_4505", "text": "\nThis query selects the phone number of the customer who most recently raised a complaint, from the customers and complaints tables. It does this by joining the customers and complaints tables on the customer_id column and ordering the results by the date_complaint", "metadata": {}}
{"_id": "gpt3_4506", "text": "\nThis query will select the district name from the district table, ordered by the city population in descending order, and limit the result to one row.", "metadata": {}}
{"_id": "gpt3_4507", "text": "\nThis query will return the name of the district with the highest population in a given city, ordered by city population in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_4508", "text": "\nThis query returns the district name of the district with the highest city population.", "metadata": {}}
{"_id": "gpt3_4509", "text": "\nThis query will select the district name with the highest population from the district table and return the top result.", "metadata": {}}
{"_id": "gpt3_4510", "text": "\nThis query returns the district name of the district with the highest population in a given city.", "metadata": {}}
{"_id": "gpt3_4511", "text": "\nThis query returns the mountain range that has the most mountains, by counting the number of mountains in each range and then ordering them in descending order. The result of the query is the mountain range with the highest count.", "metadata": {}}
{"_id": "gpt3_4512", "text": "\nThis query will select the mountain range with the most mountains and display it first.", "metadata": {}}
{"_id": "gpt3_4513", "text": "\nThis query returns the range with the most mountains from the mountain table, ordered by count in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_4514", "text": "\nThis query returns the mountain range with the most mountains from a table of mountain data, ordered by the number of mountains in the range in descending order and limited to the top result.", "metadata": {}}
{"_id": "gpt3_4515", "text": "\nThis query returns the mountain range with the most mountains, ordered by the number of mountains in each range.", "metadata": {}}
{"_id": "gpt3_4516", "text": "\nThis query will select the allergy type with the least occurrences and return it as the result.", "metadata": {}}
{"_id": "gpt3_4517", "text": "\nThis query returns the least common allergy type from the Allergy_type table, ordered by the number of occurrences in ascending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_4518", "text": "\nThis query retrieves the allergy type with the lowest count from the Allergy_type table, sorted in ascending order.", "metadata": {}}
{"_id": "gpt3_4519", "text": "\nThis query will return the allergy type that appears the least number of times in the Allergy_type table, ordered in ascending order by count.", "metadata": {}}
{"_id": "gpt3_4520", "text": "\nThis query will return the allergy type with the lowest count from the Allergy_type table, ordered in ascending order.", "metadata": {}}
{"_id": "gpt3_4521", "text": "\nThis query will return all the distinct club names for clubs that have a student with advisor 1121.", "metadata": {}}
{"_id": "gpt3_4522", "text": "\nThis query selects all distinct club names from the club table that have a student with an advisor of 1121.", "metadata": {}}
{"_id": "gpt3_4523", "text": "\nThis query retrieves the distinct club names for all the clubs that have a student with advisor 1121.", "metadata": {}}
{"_id": "gpt3_4524", "text": "\nThis query returns a list of all distinct club names associated with students whose advisor is 1121.", "metadata": {}}
{"_id": "gpt3_4525", "text": "\nThis query will select the distinct club names from the club, member_of_club, and student tables where the student's advisor is 1121.", "metadata": {}}
{"_id": "gpt3_4526", "text": "\nThis query will return all competition types that have fewer than 5 entries in the competition table.", "metadata": {}}
{"_id": "gpt3_4527", "text": "\nThis query returns all competition types from the competition table with a count of five or less.", "metadata": {}}
{"_id": "gpt3_4528", "text": "\nThis query selects the type of competition from a competition table, groups them by type, and only returns the types that have five or fewer entries.", "metadata": {}}
{"_id": "gpt3_4529", "text": "\nThis query will select all competition types from the competition table and group them together if they have 5 or fewer occurrences.", "metadata": {}}
{"_id": "gpt3_4530", "text": "\nThis query selects the Competition_type from the Competition table and groups them together based on the type of competition. It then returns only the groups that have a count of five or less.", "metadata": {}}
{"_id": "gpt3_4531", "text": "\nThis SQL query selects the company name from the phone table and groups them together by company name, only selecting company names that have more than one record in the table.", "metadata": {}}
{"_id": "gpt3_4532", "text": "\nThis SQL statement selects the company name from the phone table and groups the results by company name, only displaying those companies which have more than one entry in the table.", "metadata": {}}
{"_id": "gpt3_4533", "text": "\nThis SQL statement will select the company name from the phone table and group the results by company name, having the count of each company name be greater than one.", "metadata": {}}
{"_id": "gpt3_4534", "text": "\nThis SQL statement retrieves the names of companies with more than one phone number in the phone table.", "metadata": {}}
{"_id": "gpt3_4535", "text": "\nThis SQL statement returns a list of companies whose name appears more than once in the phone table.", "metadata": {}}
{"_id": "gpt3_4536", "text": "\nThis query selects the first and last names of students who live in a dorm that has a TV Lounge amenity.", "metadata": {}}
{"_id": "gpt3_4537", "text": "\nThis query selects the first name and last name of students who live in a dorm that has a TV Lounge amenity.", "metadata": {}}
{"_id": "gpt3_4538", "text": "\nThis query selects the first and last names of students who live in a dorm with a TV lounge amenity.", "metadata": {}}
{"_id": "gpt3_4539", "text": "\nThis query selects the first and last name of students who live in a dorm that has a TV Lounge amenity.", "metadata": {}}
{"_id": "gpt3_4540", "text": "\nThis query selects the first and last names of students who live in a dorm that has a TV lounge amenity.", "metadata": {}}
{"_id": "gpt3_4541", "text": "\nThis SQL query will count the number of aircrafts with a distance between 1000 and 5000 kilometers.", "metadata": {}}
{"_id": "gpt3_4542", "text": "\nThis query will count the number of aircraft that have a distance between 1000 and 5000.", "metadata": {}}
{"_id": "gpt3_4543", "text": "\nThis query returns the total number of aircraft that have a distance between 1000 and 5000 kilometers.", "metadata": {}}
{"_id": "gpt3_4544", "text": "\nThis query will count the number of aircraft that have a distance between 1000 and 5000 miles.", "metadata": {}}
{"_id": "gpt3_4545", "text": "\nThis query returns the number of aircraft that have a distance between 1000 and 5000 miles.", "metadata": {}}
{"_id": "gpt3_4546", "text": "\nThis query selects the name and balance from two tables, accounts and savings, and orders the results by the balance in descending order, limiting the results to the top 3.", "metadata": {}}
{"_id": "gpt3_4547", "text": "\nThis query selects the top 3 customers with the highest savings balance from two tables, accounts and savings. It joins the two tables on the customer ID, and orders the results by balance in descending order. The output will be the customer name and balance", "metadata": {}}
{"_id": "gpt3_4548", "text": "\nThis query selects the name and balance of the three customers with the highest balance in their savings account from the accounts and savings tables. It does this by joining the accounts and savings tables on the custid, ordering the results by balance in descending order", "metadata": {}}
{"_id": "gpt3_4549", "text": "\nThis statement selects the name and balance of the three customers with the highest balance in the savings accounts, from the accounts and savings tables. The accounts and savings tables are joined using the custid column. The results are ordered by balance in descending order", "metadata": {}}
{"_id": "gpt3_4550", "text": "\nThis query selects the name and balance from two tables, accounts and savings, and orders them by the balance from highest to lowest, then limits the results to the top three.", "metadata": {}}
{"_id": "gpt3_4551", "text": "\nThis query retrieves the names of all branches that have members from both Louisville, Kentucky, and Hiram, Georgia.", "metadata": {}}
{"_id": "gpt3_4552", "text": "\nThis query retrieves the names of branches from the membership_register_branch, branch, and member tables where the members are from Louisville, Kentucky and Hiram, Georgia.", "metadata": {}}
{"_id": "gpt3_4553", "text": "\nThis query will return the names of the branches that have members from both Louisville, Kentucky and Hiram, Georgia.", "metadata": {}}
{"_id": "gpt3_4554", "text": "\nThis query returns the names of all the branches that have members from both Louisville, Kentucky and Hiram, Georgia.", "metadata": {}}
{"_id": "gpt3_4555", "text": "\nThis query selects the name of the branches that are registered to members from both Louisville, Kentucky and Hiram, Georgia.", "metadata": {}}
{"_id": "gpt3_4556", "text": "\nThis query will select the district name of the district with the highest population from the district table, ordered by city population in descending order, and limited to the first result.", "metadata": {}}
{"_id": "gpt3_4557", "text": "\nThis query will return the name of the district with the highest city population.", "metadata": {}}
{"_id": "gpt3_4558", "text": "\nThis query will select the district name from the district table, ordered by the city population in descending order, and limit the results to one row.", "metadata": {}}
{"_id": "gpt3_4559", "text": "\nThis query will return the name of the district with the highest population from the district table, ordered by city population in descending order and limited to the first result.", "metadata": {}}
{"_id": "gpt3_4560", "text": "\nThis query returns the name of the district with the highest population in a given city, sorted in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_4561", "text": "\nThis query retrieves the zip/postcode for the customer Carole Bernhard by joining the Customers and Addresses tables and filtering on the customer's first and last name.", "metadata": {}}
{"_id": "gpt3_4562", "text": "\nThis query will select the zip postcode from the Addresses table for the customer with the first name \"Carole\" and the last name \"Bernhard\" from the Customers table.", "metadata": {}}
{"_id": "gpt3_4563", "text": "\nThis query will select the zip postcode from the Addresses table for the customer with the first name \"Carole\" and the last name \"Bernhard\" from the Customers table.", "metadata": {}}
{"_id": "gpt3_4564", "text": "\nThis query will return the zip/postcode of the customer with the first name \"Carole\" and last name \"Bernhard\" from the Addresses table by joining the Customers and Addresses tables on the customer_address_id.", "metadata": {}}
{"_id": "gpt3_4565", "text": "\nThis query will select the zip/postcode of the address associated with the customer named Carole Bernhard.", "metadata": {}}
{"_id": "gpt3_4566", "text": "\nThis query counts the number of scientists in the Scientists table who are not in the AssignedTo table.", "metadata": {}}
{"_id": "gpt3_4567", "text": "\nThis query counts the number of scientists who are not assigned to any project.", "metadata": {}}
{"_id": "gpt3_4568", "text": "\nThis query counts the number of scientists who are not assigned to any projects.", "metadata": {}}
{"_id": "gpt3_4569", "text": "\nThis query returns the total number of scientists who are not assigned to any projects.", "metadata": {}}
{"_id": "gpt3_4570", "text": "\nThis query counts the number of scientists in the scientists table who are not assigned to any project in the AssignedTo table.", "metadata": {}}
{"_id": "gpt3_4571", "text": "\nThis query retrieves the first names of employees who are professors in the History department, but do not teach any classes.", "metadata": {}}
{"_id": "gpt3_4572", "text": "\nThis query selects the first names of employee from the employee table (T1) who are professors in the 'History' department (T2 and T3) but are not teaching any classes (T4 and T5).", "metadata": {}}
{"_id": "gpt3_4573", "text": "\nThis query will select the first names of all employees who are professors in the History department, but are not teaching any classes.", "metadata": {}}
{"_id": "gpt3_4574", "text": "\nThis query selects the employee first names of all professors in the History department who are not teaching any classes.", "metadata": {}}
{"_id": "gpt3_4575", "text": "\nThis query selects the first names of employees who are professors in the History department but do not teach any classes.", "metadata": {}}
{"_id": "gpt3_4576", "text": "\nThis query will return the average and maximum damage in millions of US dollars caused by storms with maximum wind speeds over 1000 mph.", "metadata": {}}
{"_id": "gpt3_4577", "text": "\nThis query returns the average and maximum damage in millions of US dollars caused by storms with a maximum speed greater than 1000.", "metadata": {}}
{"_id": "gpt3_4578", "text": "\nThis query returns the average and maximum damage in millions of US dollars caused by storms with maximum speeds greater than 1000 mph.", "metadata": {}}
{"_id": "gpt3_4579", "text": "\nThis query returns the average and maximum damage caused by storms with a maximum speed greater than 1000mph.", "metadata": {}}
{"_id": "gpt3_4580", "text": "\nThis query will return the average and maximum damage in millions of US dollars caused by storms with a maximum speed greater than 1000 mph.", "metadata": {}}
{"_id": "gpt3_4581", "text": "\nThis query selects the title and studio of all films from the film table where the studio name contains the word 'Universal'.", "metadata": {}}
{"_id": "gpt3_4582", "text": "\nThis SQL query selects the title and studio of films from the film table where the studio is Universal.", "metadata": {}}
{"_id": "gpt3_4583", "text": "\nThis SQL statement will select the title and studio of all films from the 'film' table where the studio name contains the word 'Universal'.", "metadata": {}}
{"_id": "gpt3_4584", "text": "\nThis query selects the title and studio of films from the film table where the studio contains the word \"Universal\".", "metadata": {}}
{"_id": "gpt3_4585", "text": "\nThis SQL statement will select the title and studio of any film from the film table where the studio is Universal.", "metadata": {}}
{"_id": "gpt3_4586", "text": "\nThis query selects the customer details from the customers table for the customer who made the claim with the highest amount.", "metadata": {}}
{"_id": "gpt3_4587", "text": "\nThis statement selects the customer details from the customers table for the customer associated with the policy of the claim with the highest amount claimed.", "metadata": {}}
{"_id": "gpt3_4588", "text": "\nThis query selects the customer details from the customers table for the customer associated with the claim header record with the highest amount claimed.", "metadata": {}}
{"_id": "gpt3_4589", "text": "\nThis statement retrieves the customer details from the customers table for the customer associated with the claim header that has the highest amount claimed.", "metadata": {}}
{"_id": "gpt3_4590", "text": "\nThis statement selects the customer details from the customers table for the customer associated with the policy that has the highest amount claimed from the claim_headers table.", "metadata": {}}
{"_id": "gpt3_4591", "text": "\nThis query will return the policy type code and the count of each policy type code in the policies table.", "metadata": {}}
{"_id": "gpt3_4592", "text": "\nThis query will return the number of policies for each policy type code.", "metadata": {}}
{"_id": "gpt3_4593", "text": "\nThis query will count the number of policies in each policy type code.", "metadata": {}}
{"_id": "gpt3_4594", "text": "\nThis query returns the count of each policy type code in the policies table.", "metadata": {}}
{"_id": "gpt3_4595", "text": "\nThis query will return a count of the number of policies for each policy type code.", "metadata": {}}
{"_id": "gpt3_4596", "text": "\nThis query will return the total number of records in the Accounts table.", "metadata": {}}
{"_id": "gpt3_4597", "text": "\nThis query will return the total number of records in the Accounts table.", "metadata": {}}
{"_id": "gpt3_4598", "text": "\nThis query will return the total number of records in the Accounts table.", "metadata": {}}
{"_id": "gpt3_4599", "text": "\nThis query will return the total number of records in the Accounts table.", "metadata": {}}
{"_id": "gpt3_4600", "text": "\nThis query would return the total number of records in the Accounts table.", "metadata": {}}
{"_id": "gpt3_4601", "text": "\nThis query selects the name of the phone and the district of the market from the phone_market, market, and phone tables and orders them by the ranking of the market.", "metadata": {}}
{"_id": "gpt3_4602", "text": "\nThis query retrieves the name of the phone and the district of the market associated with it, ordered by the market's ranking.", "metadata": {}}
{"_id": "gpt3_4603", "text": "\nThis query retrieves the names of phones and the districts of markets in order of market ranking.", "metadata": {}}
{"_id": "gpt3_4604", "text": "\nThis query retrieves the names of phones and the districts they are in from the phone_market, market, and phone tables, and orders the results by the district's ranking.", "metadata": {}}
{"_id": "gpt3_4605", "text": "\nThis query selects the name and district of a phone market, joining the phone_market, market and phone tables, and orders the results by the ranking of the market.", "metadata": {}}
{"_id": "gpt3_4606", "text": "\nThis query will return the average and maximum High School Grade Point Average (HS) of players who were accepted into the tryout.", "metadata": {}}
{"_id": "gpt3_4607", "text": "\nThis query will return the average and maximum score of the players who were accepted to the tryout.", "metadata": {}}
{"_id": "gpt3_4608", "text": "\nThis query will return the average and maximum high scores of players who were accepted into the tryout.", "metadata": {}}
{"_id": "gpt3_4609", "text": "\nThis query returns the average and maximum high scores of players who were accepted in the tryout.", "metadata": {}}
{"_id": "gpt3_4610", "text": "\nThis query finds the average and maximum Hand Speed (HS) of all players who were accepted to the tryout.", "metadata": {}}
{"_id": "gpt3_4611", "text": "\nThis query will return the number of buildings that have a height greater than the average height of buildings in the table or have more floors than the average number of floors in the table.", "metadata": {}}
{"_id": "gpt3_4612", "text": "\nThis query will count the number of buildings that have a height greater than the average height of all buildings, or have a number of floors greater than the average number of floors of all buildings.", "metadata": {}}
{"_id": "gpt3_4613", "text": "\nThis query will return the count of buildings that have a height greater than the average height of all buildings, or a number of floors greater than the average number of floors of all buildings.", "metadata": {}}
{"_id": "gpt3_4614", "text": "\nThis query counts the number of buildings that have a height greater than the average height of all buildings, or a floor count greater than the average floor count of all buildings.", "metadata": {}}
{"_id": "gpt3_4615", "text": "\nThis query will count the number of buildings that have a height greater than the average height of all buildings in the table, or a number of floors greater than the average number of floors of all buildings in the table.", "metadata": {}}
{"_id": "gpt3_4616", "text": "\nThis query will select the city and count the number of stations in each city that have at least 15 stations.", "metadata": {}}
{"_id": "gpt3_4617", "text": "\nThis SQL query will count the number of records in the station table grouped by city, and return only cities that have at least 15 records.", "metadata": {}}
{"_id": "gpt3_4618", "text": "\nThis SQL query will return a list of cities and the number of stations in each city that have 15 or more stations.", "metadata": {}}
{"_id": "gpt3_4619", "text": "\nThis SQL statement is used to select the cities from the station table and count the number of rows for each city that have at least 15 entries. The result will be a list of cities and their respective row counts.", "metadata": {}}
{"_id": "gpt3_4620", "text": "\nThis SQL statement will return the cities and the number of stations in each city that have 15 or more stations.", "metadata": {}}
{"_id": "gpt3_4621", "text": "\nThis query will return the total number of exhibitions that have taken place since 2005.", "metadata": {}}
{"_id": "gpt3_4622", "text": "\nThis query will return the total number of exhibitions that have taken place since the year 2005.", "metadata": {}}
{"_id": "gpt3_4623", "text": "\nThis query will return the total number of exhibitions that have occurred since 2005.", "metadata": {}}
{"_id": "gpt3_4624", "text": "\nThis query will return the number of exhibitions that have taken place since 2005.", "metadata": {}}
{"_id": "gpt3_4625", "text": "\nThis query will count the number of records in the exhibition table that were created in or after the year 2005.", "metadata": {}}
{"_id": "gpt3_4626", "text": "\nThis query will return the number of matches in each competition. It will return two columns, one containing the number of matches in each competition and the other containing the name of the competition.", "metadata": {}}
{"_id": "gpt3_4627", "text": "\nThis query will return the total number of matches in each competition.", "metadata": {}}
{"_id": "gpt3_4628", "text": "\nThis query will return the number of matches in each competition, grouped by competition. The result will be two columns, one with the number of matches in each competition and the other with the name of the competition.", "metadata": {}}
{"_id": "gpt3_4629", "text": "\nThis query will return the count of matches for each competition. The result will be a table with two columns, one for the count and one for the competition.", "metadata": {}}
{"_id": "gpt3_4630", "text": "\nThis query will return the total number of matches played in each competition.", "metadata": {}}
{"_id": "gpt3_4631", "text": "\nThis query will return a list of names from the Person table, sorted in ascending order by age, where the age is greater than the minimum age of all engineers in the Person table.", "metadata": {}}
{"_id": "gpt3_4632", "text": "\nThis query will select the names of all people from the Person table who are older than the youngest engineer in the table and order them by age.", "metadata": {}}
{"_id": "gpt3_4633", "text": "\nThis query will select the names of all people who are older than the youngest engineer, ordered by age.", "metadata": {}}
{"_id": "gpt3_4634", "text": "\nThis query will select the names of all people from the Person table who have an age greater than the minimum age of all engineers in the table, and order them by age.", "metadata": {}}
{"_id": "gpt3_4635", "text": "\nThis query will select the names of all people who are older than the youngest engineer, and order them by age.", "metadata": {}}
{"_id": "gpt3_4636", "text": "\nThis query will return the country with the most tournaments in the competition table, ordered by the number of tournaments in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_4637", "text": "\nThis query returns the country with the most tournaments from the competition table, ordered by the number of tournaments in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_4638", "text": "\nThis query returns the country with the most tournaments in the competition table, ordered by the number of tournaments in descending order and limited to the top result.", "metadata": {}}
{"_id": "gpt3_4639", "text": "\nThis query will return the country with the most tournaments, in descending order.", "metadata": {}}
{"_id": "gpt3_4640", "text": "\nThis query will return the country with the highest number of tournaments, ordered by count in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_4641", "text": "\nThis statement will select the subject_id, subject_name, and count of courses from the Courses and Subjects tables, grouped by subject_id. The result will be a list of subject_ids, their corresponding subject_names, and", "metadata": {}}
{"_id": "gpt3_4642", "text": "\nThis query selects the subject ID and subject name from the Courses and Subjects tables, and then counts the number of courses associated with each subject. The result is a list of subjects and the number of courses associated with each.", "metadata": {}}
{"_id": "gpt3_4643", "text": "\nThis query returns the subject_id, subject_name, and the number of courses for each subject in the Courses and Subjects tables.", "metadata": {}}
{"_id": "gpt3_4644", "text": "\nThis query will return a list of subject IDs, subject names, and a count of the number of courses for each subject.", "metadata": {}}
{"_id": "gpt3_4645", "text": "\nThis query will return the subject_id, subject_name, and count of each subject from the Courses and Subjects tables. The results will be grouped by the subject_id.", "metadata": {}}
{"_id": "gpt3_4646", "text": "\nThis query will return a list of user profiles sorted by the number of followers in descending order, including the name and number of followers for each user.", "metadata": {}}
{"_id": "gpt3_4647", "text": "\nThis query selects the name and followers of all users from the user_profiles table, and orders them by the number of followers in descending order.", "metadata": {}}
{"_id": "gpt3_4648", "text": "\nThis query returns a list of user names and their corresponding followers in descending order.", "metadata": {}}
{"_id": "gpt3_4649", "text": "\nThis query returns a list of user names and the number of followers each user has, ordered from highest to lowest number of followers.", "metadata": {}}
{"_id": "gpt3_4650", "text": "\nThis query selects the name and followers of all users from the user_profiles table, and orders them by the number of followers in descending order.", "metadata": {}}
{"_id": "gpt3_4651", "text": "\nThis query returns the last names of all students who received an 'A' grade in the class with code 10018.", "metadata": {}}
{"_id": "gpt3_4652", "text": "\nThis query will select the last name of any student who has an 'A' grade in the class with code 10018.", "metadata": {}}
{"_id": "gpt3_4653", "text": "\nThis query selects the last name of students who have an 'A' grade in class code 10018.", "metadata": {}}
{"_id": "gpt3_4654", "text": "\nThis query selects the last name of students who have an 'A' grade in the class with the code 10018.", "metadata": {}}
{"_id": "gpt3_4655", "text": "\nThis query selects the last name of students who have received an 'A' grade in class code 10018.", "metadata": {}}
{"_id": "gpt3_4656", "text": "\nThis statement retrieves the candidate_id from the candidates table for the person whose email address is \"stanley.monahan@example.org\" from the people table.", "metadata": {}}
{"_id": "gpt3_4657", "text": "\nThis query selects the candidate_id from the candidates table that matches the person_id from the people table with the email address \"stanley.monahan@example.org\".", "metadata": {}}
{"_id": "gpt3_4658", "text": "\nThis query selects the candidate_id from the candidates table that matches the person_id from the people table where the email address is \"stanley.monahan@example.org\".", "metadata": {}}
{"_id": "gpt3_4659", "text": "\nThis query selects the candidate_id from the candidates table that corresponds to the person_id from the people table with the email address \"stanley.monahan@example.org\".", "metadata": {}}
{"_id": "gpt3_4660", "text": "\nThis query retrieves the candidate_id from the candidates table for the person with the email address \"stanley.monahan@example.org\" by joining the people and candidates tables on the person_id.", "metadata": {}}
{"_id": "gpt3_4661", "text": "\nThis query counts the number of members in each party. It joins the Member and Party tables on the party_id column, then groups the results by party_id and counts the number of members in each. The output will be the party name", "metadata": {}}
{"_id": "gpt3_4662", "text": "\nThis query returns the party name and the count of members in each party.", "metadata": {}}
{"_id": "gpt3_4663", "text": "\nThis query returns the party name and the count of members for each party.", "metadata": {}}
{"_id": "gpt3_4664", "text": "\nThis query selects the party name and the count of members associated with each party from the Member and Party tables. It groups the results by the party ID.", "metadata": {}}
{"_id": "gpt3_4665", "text": "\nThis query counts the number of members for each party. The results of the query will be a list of party names and the number of members for each party.", "metadata": {}}
{"_id": "gpt3_4666", "text": "\nThis query selects the name of the county with the highest population from the county_public_safety table and orders the results in descending order. The result of the query is the name of the county with the highest population.", "metadata": {}}
{"_id": "gpt3_4667", "text": "\nThis query returns the name of the county with the largest population from the county_public_safety table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_4668", "text": "\nThis query will select the name of the county with the highest population from the county_public_safety table, and return the result as the first record in the result set.", "metadata": {}}
{"_id": "gpt3_4669", "text": "\nThis query returns the name of the county with the highest population from the county_public_safety table.", "metadata": {}}
{"_id": "gpt3_4670", "text": "\nThis query returns the name of the county with the highest population from the county_public_safety table.", "metadata": {}}
{"_id": "gpt3_4671", "text": "\nThis query will return the names of all physicians who have prescribed the medication \"Thesisin\".", "metadata": {}}
{"_id": "gpt3_4672", "text": "\nThis query will select the distinct names of all physicians who prescribe the medication \"Thesisin\".", "metadata": {}}
{"_id": "gpt3_4673", "text": "\nThis query selects the distinct names of physicians who have prescribed a medication called Thesisin.", "metadata": {}}
{"_id": "gpt3_4674", "text": "\nThis query will select the distinct name of physicians who have prescribed Thesisin medication.", "metadata": {}}
{"_id": "gpt3_4675", "text": "\nThis query will select all the distinct names of physicians from the physician table who have prescribed the medication \"Thesisin\" from the medication table.", "metadata": {}}
{"_id": "gpt3_4676", "text": "\nThis query returns the allergy type with the fewest occurrences in the table Allergy_type, ordered in ascending order.", "metadata": {}}
{"_id": "gpt3_4677", "text": "\nThis query will return the allergy type with the lowest count from the Allergy_type table, ordered in ascending order.", "metadata": {}}
{"_id": "gpt3_4678", "text": "\nThis query returns the allergy type that appears the least number of times in the Allergy_type table.", "metadata": {}}
{"_id": "gpt3_4679", "text": "\nThis query will return the allergy type with the lowest count from the Allergy_type table, ordered in ascending order.", "metadata": {}}
{"_id": "gpt3_4680", "text": "\nThis query will return the allergy type with the lowest count from the Allergy_type table, ordered in ascending order.", "metadata": {}}
{"_id": "gpt3_4681", "text": "\nThis query will select the district name from the district table and order it by the city population in descending order, then limit the result to the top 1 record.", "metadata": {}}
{"_id": "gpt3_4682", "text": "\nThis query will return the name of the district with the highest population in the district table, ordered by city population in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_4683", "text": "\nThis query returns the name of the district with the highest population from the district table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_4684", "text": "\nThis query returns the name of the district with the highest population from the district table, ordered by city population in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_4685", "text": "\nThis query selects the district name with the highest city population from the district table and returns the top result.", "metadata": {}}
{"_id": "gpt3_4686", "text": "\nThis query selects the names of storms that affected both Afghanistan and Albania.", "metadata": {}}
{"_id": "gpt3_4687", "text": "\nThis query selects the names of storms that affected both Afghanistan and Albania.", "metadata": {}}
{"_id": "gpt3_4688", "text": "\nThis query selects the names of storms that have affected both Afghanistan and Albania.", "metadata": {}}
{"_id": "gpt3_4689", "text": "\nThis query returns the names of all storms that affected both Afghanistan and Albania.", "metadata": {}}
{"_id": "gpt3_4690", "text": "\nThis query selects the name of storms that affected both Afghanistan and Albania.", "metadata": {}}
{"_id": "gpt3_4691", "text": "\nThis SQL query will select the employee name of all employees who have checked out document 1 from the Circulation_History table, by joining the Employees and Circulation_History tables based on the employee ID.", "metadata": {}}
{"_id": "gpt3_4692", "text": "\nThis query will select the names of all employees who have checked out document 1 from the Circulation_History table, by joining it with the Employees table.", "metadata": {}}
{"_id": "gpt3_4693", "text": "\nThis query selects the employee name from the Employees table that has a matching employee id in the Circulation_History table for the document_id of 1.", "metadata": {}}
{"_id": "gpt3_4694", "text": "\nThis statement retrieves the employee name of an employee from the Employees table who has a circulation history with document id 1 from the Circulation_History table.", "metadata": {}}
{"_id": "gpt3_4695", "text": "\nThis query selects the employee name from the Employees table for all employees who have circulated a document with an ID of 1 from the Circulation_History table.", "metadata": {}}
{"_id": "gpt3_4696", "text": "\nThis query returns the nationality and the count of swimmers who have that nationality, where the count is greater than 1.", "metadata": {}}
{"_id": "gpt3_4697", "text": "\nThis query will count the number of swimmers from each nationality, and only display results for countries with more than one swimmer.", "metadata": {}}
{"_id": "gpt3_4698", "text": "\nThis query counts the number of swimmers by nationality and only includes nationalities with more than one swimmer.", "metadata": {}}
{"_id": "gpt3_4699", "text": "\nThis query returns the number of swimmers for each nationality that have more than one swimmer.", "metadata": {}}
{"_id": "gpt3_4700", "text": "\nThis query will count the number of swimmers for each nationality and only show results where there is more than one swimmer with the same nationality.", "metadata": {}}
{"_id": "gpt3_4701", "text": "\nThis query finds the average credit score of customers who have taken out a loan.", "metadata": {}}
{"_id": "gpt3_4702", "text": "\nThis statement will calculate the average credit score of all customers who have taken out a loan.", "metadata": {}}
{"_id": "gpt3_4703", "text": "\nThis query will return the average credit score of customers who have taken out a loan.", "metadata": {}}
{"_id": "gpt3_4704", "text": "\nThis query returns the average credit score of customers who have taken out a loan.", "metadata": {}}
{"_id": "gpt3_4705", "text": "\nThis query would return the average credit score of all customers who have taken out a loan.", "metadata": {}}
{"_id": "gpt3_4706", "text": "\nThis query will return the course IDs from the SECTION table for the Fall 2009 semester that are not in the Spring 2010 semester.", "metadata": {}}
{"_id": "gpt3_4707", "text": "\nThis query returns all the course_id's from the SECTION table that are in the Fall semester of 2009 but not in the Spring semester of 2010.", "metadata": {}}
{"_id": "gpt3_4708", "text": "\nThis query returns the course_ids from sections in the Fall of 2009 that are not in sections in the Spring of 2010.", "metadata": {}}
{"_id": "gpt3_4709", "text": "\nThis query returns all course_id's from the SECTION table that were offered in the Fall of 2009 but not offered in the Spring of 2010.", "metadata": {}}
{"_id": "gpt3_4710", "text": "\nThis query returns the course IDs for all sections offered in the Fall of 2009 but not offered in the Spring of 2010.", "metadata": {}}
{"_id": "gpt3_4711", "text": "\nThis query will return the number of products with the name \"sesame\" that have associated product characteristics.", "metadata": {}}
{"_id": "gpt3_4712", "text": "\nThis query counts the number of products with the name \"sesame\" that have corresponding product characteristics in the product_characteristics table.", "metadata": {}}
{"_id": "gpt3_4713", "text": "\nThis query counts the number of products with the name \"sesame\" in the products table, joined with the product_characteristics table on the product_id column.", "metadata": {}}
{"_id": "gpt3_4714", "text": "\nThis query will count the number of products that have the name \"sesame\" and also have associated product characteristics.", "metadata": {}}
{"_id": "gpt3_4715", "text": "\nThis query returns the total number of products with the name \"sesame\" that have associated product characteristics.", "metadata": {}}
{"_id": "gpt3_4716", "text": "\nThis statement selects the outcome description from the Research_outcomes table that matches the outcome code from the Project_outcomes table.", "metadata": {}}
{"_id": "gpt3_4717", "text": "\nThis query will select the outcome description from the Research_outcomes table that corresponds to the outcome code in the Project_outcomes table.", "metadata": {}}
{"_id": "gpt3_4718", "text": "\nThis statement retrieves the outcome description from the Research_outcomes table by joining it with the Project_outcomes table on the outcome_code field.", "metadata": {}}
{"_id": "gpt3_4719", "text": "\nThis query selects the description of research outcomes from the Research_outcomes table that match the outcome codes in the Project_outcomes table.", "metadata": {}}
{"_id": "gpt3_4720", "text": "\nThis statement selects the outcome description from the Research_outcomes table that is linked to the outcome code in the Project_outcomes table.", "metadata": {}}
{"_id": "gpt3_4721", "text": "\nThis query returns the total number of leagues in England.", "metadata": {}}
{"_id": "gpt3_4722", "text": "\nThis query will return the number of leagues in England.", "metadata": {}}
{"_id": "gpt3_4723", "text": "\nThis query counts the number of leagues in England.", "metadata": {}}
{"_id": "gpt3_4724", "text": "\nThis query will return the number of leagues in England.", "metadata": {}}
{"_id": "gpt3_4725", "text": "\nThis query will count the number of leagues in England.", "metadata": {}}
{"_id": "gpt3_4726", "text": "\nThis query will count the number of patients with SSN's that have been prescribed by the physician named John Dorian.", "metadata": {}}
{"_id": "gpt3_4727", "text": "\nThis query will count the number of patients that have been prescribed to by the physician named John Dorian.", "metadata": {}}
{"_id": "gpt3_4728", "text": "\nThis query will count the number of patients that have been prescribed medication by the physician named John Dorian.", "metadata": {}}
{"_id": "gpt3_4729", "text": "\nThis query returns the number of patients who have been prescribed medication by the physician named \"John Dorian\".", "metadata": {}}
{"_id": "gpt3_4730", "text": "\nThis query will count the number of patients that have been prescribed by the physician named \"John Dorian\".", "metadata": {}}
{"_id": "gpt3_4731", "text": "\nThis query will select the product price from the products table for all products that are not included in the complaints table.", "metadata": {}}
{"_id": "gpt3_4732", "text": "\nThis query will return the price of all products that are not associated with any complaints.", "metadata": {}}
{"_id": "gpt3_4733", "text": "\nThis query will select the product price from the products table where the product id is not in the product id column in the complaints table.", "metadata": {}}
{"_id": "gpt3_4734", "text": "\nThis query will select the product price from the products table where the product ID is not present in the complaints table.", "metadata": {}}
{"_id": "gpt3_4735", "text": "\nThis query will select all product prices from the products table where the product_id does not appear in the complaints table.", "metadata": {}}
{"_id": "gpt3_4736", "text": "\nThis query returns the names of procedures that cost less than $5,000 and are trained in by physician \"John Wen\".", "metadata": {}}
{"_id": "gpt3_4737", "text": "\nThis query returns the names of all procedures that cost less than 5000 and that John Wen is trained in.", "metadata": {}}
{"_id": "gpt3_4738", "text": "\nThis query returns the names of procedures that have a cost of less than $5000 and are trained in by \"John Wen\".", "metadata": {}}
{"_id": "gpt3_4739", "text": "\nThis query returns the names of procedures that cost less than $5000 and are trained in by physician John Wen.", "metadata": {}}
{"_id": "gpt3_4740", "text": "\nThis query returns the names of procedures with a cost less than 5000 that John Wen is trained in.", "metadata": {}}
{"_id": "gpt3_4741", "text": "\nThis query selects the first and last names of students from the student table who have an enrollment grade of either 'C' or 'A' from the enroll table.", "metadata": {}}
{"_id": "gpt3_4742", "text": "\nThis query selects the first and last names of students from the student table who have an enrollment grade of either C or A in the enroll table.", "metadata": {}}
{"_id": "gpt3_4743", "text": "\nThis query selects the first and last names of students from the student table who have either a C or A grade in the enroll table.", "metadata": {}}
{"_id": "gpt3_4744", "text": "\nThis query selects the first and last name of students from the student table who have an enrollment grade of 'C' or 'A' in the enroll table.", "metadata": {}}
{"_id": "gpt3_4745", "text": "\nThis statement selects the first and last names of students from the student table who have either a C or an A grade in the enroll table.", "metadata": {}}
{"_id": "gpt3_4746", "text": "\nThis query selects the apartment type code with the most apartments that have more than one bathroom, ordered by count in descending order, and limits the result to one.", "metadata": {}}
{"_id": "gpt3_4747", "text": "\nThis query will select the apartment type code with the highest count of apartments that have more than one bathroom, ordered by count in descending order, and limited to only one result.", "metadata": {}}
{"_id": "gpt3_4748", "text": "\nThis query will select the most common apartment type code from Apartments with more than one bathroom, ordered by count in descending order and limited to the top result.", "metadata": {}}
{"_id": "gpt3_4749", "text": "\nThis query selects the most common apartment type code from the Apartments table where the bathroom count is greater than 1 and orders the results by count in descending order, returning only the top result.", "metadata": {}}
{"_id": "gpt3_4750", "text": "\nThis query will select the apartment type code with the most number of bathrooms greater than 1, ordered by count in descending order, and limited to one result.", "metadata": {}}
{"_id": "gpt3_4751", "text": "\nThis query will count the number of times Mark Giuliano appears in the Faculty and Faculty_participates_in tables.", "metadata": {}}
{"_id": "gpt3_4752", "text": "\nThis query returns the number of activities that Mark Giuliano participates in.", "metadata": {}}
{"_id": "gpt3_4753", "text": "\nThis query returns the number of times Mark Giuliano has participated in a faculty event.", "metadata": {}}
{"_id": "gpt3_4754", "text": "\nThis query returns the number of faculty participation records associated with the faculty member Mark Giuliano.", "metadata": {}}
{"_id": "gpt3_4755", "text": "\nThis query will return the number of rows in the Faculty and Faculty_participates_in tables that have a faculty member with the first name \"Mark\" and last name \"Giuliano\".", "metadata": {}}
{"_id": "gpt3_4756", "text": "\nThis query retrieves the maximum end date for each employee_id from the job_history table.", "metadata": {}}
{"_id": "gpt3_4757", "text": "\nThis query returns the employee_id and the maximum end date for each employee's job history.", "metadata": {}}
{"_id": "gpt3_4758", "text": "\nThis SQL query selects the employee_id and the maximum end_date from the job_history table and groups the results by employee_id.", "metadata": {}}
{"_id": "gpt3_4759", "text": "\nThis SQL query returns the maximum end date for each employee_id in the job_history table.", "metadata": {}}
{"_id": "gpt3_4760", "text": "\nThis query returns the employee_id and the most recent end_date for each employee from the job_history table.", "metadata": {}}
{"_id": "gpt3_4761", "text": "\nThis query returns the number of distinct levels in the member table.", "metadata": {}}
{"_id": "gpt3_4762", "text": "\nThis query will return the number of distinct values in the LEVEL column from the member table.", "metadata": {}}
{"_id": "gpt3_4763", "text": "\nThis statement will count the number of distinct values in the LEVEL column of the member table.", "metadata": {}}
{"_id": "gpt3_4764", "text": "\nThis query will return the number of distinct values in the LEVEL column from the member table.", "metadata": {}}
{"_id": "gpt3_4765", "text": "\nThis query will count the total number of distinct levels in the member table.", "metadata": {}}
{"_id": "gpt3_4766", "text": "\nThis query will return the type of vocals (e.g. lead, backup, etc.) that Solveig sings in the song \"A Bar In Amsterdam\".", "metadata": {}}
{"_id": "gpt3_4767", "text": "\nThis statement will select the type of vocals from the vocals table (T1) for the song titled \"A Bar In Amsterdam\" (T2) performed by the bandmate Solveig (T3).", "metadata": {}}
{"_id": "gpt3_4768", "text": "\nThis query will select the type of vocals for the song \"A Bar in Amsterdam\" performed by Solveig.", "metadata": {}}
{"_id": "gpt3_4769", "text": "\nThis query will select the type of vocals of the song \"A Bar In Amsterdam\" sung by Solveig.", "metadata": {}}
{"_id": "gpt3_4770", "text": "\nThis query will select the type of vocal (e.g. lead, backing, etc.) that Solveig performed in the song \"A Bar In Amsterdam\" from the vocals, songs, and band tables.", "metadata": {}}
{"_id": "gpt3_4771", "text": "\nThis query will return the location of any party whose host is over the age of 50.", "metadata": {}}
{"_id": "gpt3_4772", "text": "\nThis query returns the location of all parties hosted by people over the age of 50.", "metadata": {}}
{"_id": "gpt3_4773", "text": "\nThis query will select the location of any party hosted by a host over the age of 50.", "metadata": {}}
{"_id": "gpt3_4774", "text": "\nThis query selects the location from the party table of all parties which have a host with an age greater than 50.", "metadata": {}}
{"_id": "gpt3_4775", "text": "\nThis query selects the location of all parties hosted by hosts over the age of 50.", "metadata": {}}
{"_id": "gpt3_4776", "text": "\nThis query selects the first name of an employee and the office of a professor from the employee, professor, and department tables where the professor is in the department of History and has a PhD degree.", "metadata": {}}
{"_id": "gpt3_4777", "text": "\nThis query selects the first name of employees who are professors in the History department and have a Ph.D. degree, as well as the office of the professor.", "metadata": {}}
{"_id": "gpt3_4778", "text": "\nThis query returns the first name of employees who are professors in the History department with a Ph.D. degree and the office number of the professor.", "metadata": {}}
{"_id": "gpt3_4779", "text": "\nThis query retrieves the first name of an employee and the office of a professor from the employee, professor, and department tables where the professor has a Ph.D. and works in the History department.", "metadata": {}}
{"_id": "gpt3_4780", "text": "\nThis SQL statement retrieves the first name of an employee and the professor office associated with them from the employee, professor, and department tables where the department name is 'History' and the professor has a high degree of 'Ph.D.'.", "metadata": {}}
{"_id": "gpt3_4781", "text": "\nThis query will return the total number of courses that have more than two credits.", "metadata": {}}
{"_id": "gpt3_4782", "text": "\nThis query will return the number of courses in the COURSE table that have a credit value greater than 2.", "metadata": {}}
{"_id": "gpt3_4783", "text": "\nThis query will return the number of courses that have more than 2 credits.", "metadata": {}}
{"_id": "gpt3_4784", "text": "\nThis query will return the number of courses in the COURSE table that have more than two credits.", "metadata": {}}
{"_id": "gpt3_4785", "text": "\nThis query will count the number of courses with credits greater than 2.", "metadata": {}}
{"_id": "gpt3_4786", "text": "\nThe query will return the location of the club \"Hopkins Student Enterprises\", which is Baltimore, MD.", "metadata": {}}
{"_id": "gpt3_4787", "text": "\nThe query will return the location of the club \"Hopkins Student Enterprises\".", "metadata": {}}
{"_id": "gpt3_4788", "text": "\nThe query will return the clublocation of \"Baltimore, MD\" for the clubname \"Hopkins Student Enterprises\".", "metadata": {}}
{"_id": "gpt3_4789", "text": "\nThe clublocation from the club with the clubname \"Hopkins Student Enterprises\" is Baltimore, Maryland.", "metadata": {}}
{"_id": "gpt3_4790", "text": "\nThe query will return the location of the club \"Hopkins Student Enterprises\", which is Baltimore, MD.", "metadata": {}}
{"_id": "gpt3_4791", "text": "\nThis query will count the number of universities located in New York.", "metadata": {}}
{"_id": "gpt3_4792", "text": "\nThis query counts the number of universities located in New York.", "metadata": {}}
{"_id": "gpt3_4793", "text": "\nThis query returns the number of universities located in the state of New York.", "metadata": {}}
{"_id": "gpt3_4794", "text": "\nThis query will return the number of universities located in New York.", "metadata": {}}
{"_id": "gpt3_4795", "text": "\nThis query will count the number of universities located in New York.", "metadata": {}}
{"_id": "gpt3_4796", "text": "\nThis query will return a list of players from the match_season table, sorted in ascending order by college.", "metadata": {}}
{"_id": "gpt3_4797", "text": "\nThis query will return a list of players from the match_season table, sorted in ascending order by the college they attended.", "metadata": {}}
{"_id": "gpt3_4798", "text": "\nThis query will select all players from the match_season table and order them by college in ascending order.", "metadata": {}}
{"_id": "gpt3_4799", "text": "\nThis query will return a list of players from the match_season table, sorted in ascending order by the College column.", "metadata": {}}
{"_id": "gpt3_4800", "text": "\nThis query will return a list of players from the match_season table, sorted in ascending order by their college.", "metadata": {}}
{"_id": "gpt3_4801", "text": "\nThis query returns a list of names of scientists who are not assigned to the project with the highest number of hours.", "metadata": {}}
{"_id": "gpt3_4802", "text": "\nThis statement returns the names of scientists from the 'scientists' table who are not assigned to the project with the highest number of hours.", "metadata": {}}
{"_id": "gpt3_4803", "text": "\nThis query will return a list of scientists' names who are not assigned to the project that requires the most hours.", "metadata": {}}
{"_id": "gpt3_4804", "text": "\nThis query returns the names of scientists who are not assigned to the project that requires the most hours.", "metadata": {}}
{"_id": "gpt3_4805", "text": "\nThis query returns the names of all scientists who are not assigned to the project with the highest number of hours.", "metadata": {}}
{"_id": "gpt3_4806", "text": "\nThis query will select the unique names of all patients who have stayed in room 111.", "metadata": {}}
{"_id": "gpt3_4807", "text": "\nThis query returns the names of all distinct patients who stayed in room 111.", "metadata": {}}
{"_id": "gpt3_4808", "text": "\nThis query returns a list of all the distinct names of patients who have stayed in room 111.", "metadata": {}}
{"_id": "gpt3_4809", "text": "\nThis statement will select the distinct name of the patient who stayed in room 111.", "metadata": {}}
{"_id": "gpt3_4810", "text": "\nThis query will return the distinct names of all patients who have undergone a stay in room 111.", "metadata": {}}
{"_id": "gpt3_4811", "text": "\nThis query selects the account ID, date account opened, account name, and other account details from the Accounts table for customers with a first name of Meaghan, based on a join of the Accounts and Customers tables.", "metadata": {}}
{"_id": "gpt3_4812", "text": "\nThis query selects the account ID, date the account was opened, account name, and other account details of any accounts belonging to a customer named Meaghan.", "metadata": {}}
{"_id": "gpt3_4813", "text": "\nThis query selects the account ID, date account opened, account name, and other account details from the Accounts table for customers with the first name of Meaghan from the Customers table.", "metadata": {}}
{"_id": "gpt3_4814", "text": "\nThis query selects the account ID, date opened, account name, and other account details of accounts associated with a customer named Meaghan.", "metadata": {}}
{"_id": "gpt3_4815", "text": "\nThis query selects the account ID, date account opened, account name, and other account details from the Accounts table for all accounts associated with customers named Meaghan from the Customers table.", "metadata": {}}
{"_id": "gpt3_4816", "text": "\nThis query will count the number of rooms that are not associated with any reservations.", "metadata": {}}
{"_id": "gpt3_4817", "text": "\nThis query returns the total number of rooms that are not currently reserved.", "metadata": {}}
{"_id": "gpt3_4818", "text": "\nThis query counts the number of rooms that are not in any reservations.", "metadata": {}}
{"_id": "gpt3_4819", "text": "\nThis query returns the total number of rooms that are not currently reserved.", "metadata": {}}
{"_id": "gpt3_4820", "text": "\nThis query counts the number of rooms that are not currently reserved.", "metadata": {}}
{"_id": "gpt3_4821", "text": "\nThis query selects the name and date of an election for each representative.", "metadata": {}}
{"_id": "gpt3_4822", "text": "\nThis query selects the name and date of an election from the election and representative tables, using the Representative_ID field to join the two tables.", "metadata": {}}
{"_id": "gpt3_4823", "text": "\nThis query selects the name and date of an election from the election and representative tables. It does this by joining the election and representative tables on the Representative_ID column.", "metadata": {}}
{"_id": "gpt3_4824", "text": "\nThis query will select the Name and Date from the election and representative tables, joining them on the Representative_ID column.", "metadata": {}}
{"_id": "gpt3_4825", "text": "\nThis query selects the name and date of each election from the election and representative tables, based on the Representative_ID in both tables.", "metadata": {}}
{"_id": "gpt3_4826", "text": "\nThis query counts the number of faculty members who participate in each activity listed in the Activity table. The result will be a list of activities with the corresponding count of faculty members who participate in each activity.", "metadata": {}}
{"_id": "gpt3_4827", "text": "\nThis query will return the activity name and the number of faculty members that participate in each activity.", "metadata": {}}
{"_id": "gpt3_4828", "text": "\nThis query counts the number of times each activity has been participated in by faculty members. It does this by joining the Activity and Faculty_participates_in tables, grouping by the actID, and counting the number of times the activity has been", "metadata": {}}
{"_id": "gpt3_4829", "text": "\nThis query is used to count the number of faculty members participating in each activity. It returns the activity name and the number of faculty members participating in it.", "metadata": {}}
{"_id": "gpt3_4830", "text": "\nThis query counts the number of faculty members who are participating in each activity. The result will be a list of the activities and the number of faculty members participating in them.", "metadata": {}}
{"_id": "gpt3_4831", "text": "\nThis query will return the total number of services, the network name, and the services provided for each station in the route table.", "metadata": {}}
{"_id": "gpt3_4832", "text": "\nThis query returns the number of services offered at each station, as well as the station's name and the services it offers.", "metadata": {}}
{"_id": "gpt3_4833", "text": "\nThis query returns the total number of stations, the network name, and services associated with each station, grouped by station ID.", "metadata": {}}
{"_id": "gpt3_4834", "text": "\nThis query returns the total number of stations, the network name, and the services offered for each station, grouped by station ID.", "metadata": {}}
{"_id": "gpt3_4835", "text": "\nThis query returns the total number of stations, the network name, and services associated with each station from the station and route tables.", "metadata": {}}
{"_id": "gpt3_4836", "text": "\nThis query selects the name of the bank with the most customers, by ordering the table by the number of customers in descending order and limiting the result to one.", "metadata": {}}
{"_id": "gpt3_4837", "text": "\nThe above SQL query will return the name of the bank with the highest number of customers.", "metadata": {}}
{"_id": "gpt3_4838", "text": "\nThis query will select the name of the bank with the highest number of customers and display it.", "metadata": {}}
{"_id": "gpt3_4839", "text": "\nThis query will select the name of the bank with the most customers, ordering the results by the number of customers in descending order and limiting the results to the first one.", "metadata": {}}
{"_id": "gpt3_4840", "text": "\nThis SQL statement retrieves the name of the bank with the highest number of customers from the 'bank' table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_4841", "text": "\nThis statement selects the distinct names of nurses who have assisted in a procedure (as recorded in the undergoes table) from the nurse table.", "metadata": {}}
{"_id": "gpt3_4842", "text": "\nThis query selects the distinct names of nurses who have assisted in a medical procedure listed in the \"undergoes\" table.", "metadata": {}}
{"_id": "gpt3_4843", "text": "\nThis query selects the names of all the nurses who have assisted in any surgery from the undergoes and nurse tables.", "metadata": {}}
{"_id": "gpt3_4844", "text": "\nThis query selects the name of all nurses who have ever assisted in a procedure that was undergone.", "metadata": {}}
{"_id": "gpt3_4845", "text": "\nThis query selects the distinct names of nurses from the nurse table who have assisted in the undergoes table.", "metadata": {}}
{"_id": "gpt3_4846", "text": "\nThis query returns all employee IDs from the Employees table that are not in the Documents_to_be_destroyed table.", "metadata": {}}
{"_id": "gpt3_4847", "text": "\nThis query returns a list of employee IDs from the Employees table that do not appear in the Documents_to_be_destroyed table.", "metadata": {}}
{"_id": "gpt3_4848", "text": "\nThis query returns a list of employee IDs from the Employees table that are not present in the Documents_to_be_destroyed table.", "metadata": {}}
{"_id": "gpt3_4849", "text": "\nThis query will return a list of all employee IDs from the Employees table that do not appear in the Documents_to_be_destroyed table.", "metadata": {}}
{"_id": "gpt3_4850", "text": "\nThis query will return a list of employee IDs from the Employees table that are not present in the Documents_to_be_destroyed table.", "metadata": {}}
{"_id": "gpt3_4851", "text": "\nThis query returns all of the degrees offered by San Jose State University in the year 2000.", "metadata": {}}
{"_id": "gpt3_4852", "text": "\nThis query will return all the degrees offered by San Jose State University in the year 2000.", "metadata": {}}
{"_id": "gpt3_4853", "text": "\nThis query will return all the degrees offered at San Jose State University in the year 2000.", "metadata": {}}
{"_id": "gpt3_4854", "text": "\nThis query will select all degrees from the campuses table with the campus name \"San Jose State University\" and the year 2000 from the degrees table.", "metadata": {}}
{"_id": "gpt3_4855", "text": "\nThis query returns a list of all the degrees offered by San Jose State University in the year 2000.", "metadata": {}}
{"_id": "gpt3_4856", "text": "\nThis query will return the number of distinct IDs from the teaches table that are associated with the Spring semester of 2010.", "metadata": {}}
{"_id": "gpt3_4857", "text": "\nThis query would return the number of distinct IDs from the teaches table for Spring semester in 2010.", "metadata": {}}
{"_id": "gpt3_4858", "text": "\nThis query counts the number of distinct IDs from the teaches table where the semester is Spring and the year is 2010.", "metadata": {}}
{"_id": "gpt3_4859", "text": "\nThis query returns the number of distinct IDs that are associated with teaching in the Spring semester of 2010.", "metadata": {}}
{"_id": "gpt3_4860", "text": "\nThis query will return the number of distinct IDs from the teaches table where the semester is Spring and the year is 2010.", "metadata": {}}
{"_id": "gpt3_4861", "text": "\nThis statement selects the first and last names of students from the student table who have an enrollment grade of either 'C' or 'A' from the enroll table.", "metadata": {}}
{"_id": "gpt3_4862", "text": "\nThis statement selects the first and last names of students from the student table who have an enrollment grade of either C or A in the enroll table.", "metadata": {}}
{"_id": "gpt3_4863", "text": "\nThis query selects the first and last name of students who have a grade of C or A in their enrollment.", "metadata": {}}
{"_id": "gpt3_4864", "text": "\nThis statement selects the first and last name of students who have received a grade of 'C' or 'A' in a course.", "metadata": {}}
{"_id": "gpt3_4865", "text": "\nThis statement selects the first and last name of students from the student table who have an enrollment grade of either \"C\" or \"A\" in the enroll table.", "metadata": {}}
{"_id": "gpt3_4866", "text": "\nThe above SQL query will select the role_code column from the ROLES table.", "metadata": {}}
{"_id": "gpt3_4867", "text": "\nThis SQL query will select the role_code column from the table ROLES.", "metadata": {}}
{"_id": "gpt3_4868", "text": "\nThe above SQL statement will select all role codes from the ROLES table.", "metadata": {}}
{"_id": "gpt3_4869", "text": "\nThe above SQL statement will return a list of all role codes from the ROLES table.", "metadata": {}}
{"_id": "gpt3_4870", "text": "\nThe SQL query SELECT role_code FROM ROLES will retrieve all the role codes from the ROLES table.", "metadata": {}}
{"_id": "gpt3_4871", "text": "\nThis query will select the city from the employee table that corresponds to the customer with the postal code of 70174.", "metadata": {}}
{"_id": "gpt3_4872", "text": "\nThis query will select the city from the Employee table that corresponds to the support representative associated with the customer with a Postal Code of 70174.", "metadata": {}}
{"_id": "gpt3_4873", "text": "\nThis query will select the city from the Employee table for the employee associated with the customer from the Customer table who has a postal code of 70174.", "metadata": {}}
{"_id": "gpt3_4874", "text": "\nThis query selects the city of the employee associated with a customer who has a postal code of 70174.", "metadata": {}}
{"_id": "gpt3_4875", "text": "\nThis query will select the city from the Employee table where the SupportRepId in the Customer table matches the EmployeeId in the Employee table and the PostalCode in the Customer table is '70174'.", "metadata": {}}
{"_id": "gpt3_4876", "text": "\nThis query will select the firstname of all students from the list table who are in classroom 108.", "metadata": {}}
{"_id": "gpt3_4877", "text": "\nThis query will return the firstname of all students in classroom 108 from the list table.", "metadata": {}}
{"_id": "gpt3_4878", "text": "\nThis query will select the firstname of all students in classroom 108 from the list table.", "metadata": {}}
{"_id": "gpt3_4879", "text": "\nThis query will select the first name of all students in classroom 108 from the list.", "metadata": {}}
{"_id": "gpt3_4880", "text": "\nThis query will select the firstname of all students in classroom 108 from the list table.", "metadata": {}}
{"_id": "gpt3_4881", "text": "\nThis SQL query will select the name of all technicians from a database and order them by age in ascending order.", "metadata": {}}
{"_id": "gpt3_4882", "text": "\nThis query selects the Name of each technician from the technician table and orders them by Age in ascending order.", "metadata": {}}
{"_id": "gpt3_4883", "text": "\nThis query will select the names of all technicians from the database and order them by age in ascending order.", "metadata": {}}
{"_id": "gpt3_4884", "text": "\nThis statement will select the names from the technician table, and order them in ascending order based on age.", "metadata": {}}
{"_id": "gpt3_4885", "text": "\nThis query will select the names of all technicians from the table and order them in ascending order by age.", "metadata": {}}
{"_id": "gpt3_4886", "text": "\nThis statement will return the maximum date that any of the residents moved in.", "metadata": {}}
{"_id": "gpt3_4887", "text": "\nThis statement returns the maximum date that a resident moved into the residence.", "metadata": {}}
{"_id": "gpt3_4888", "text": "\nThis query will return the maximum date when a resident moved in from the Residents table.", "metadata": {}}
{"_id": "gpt3_4889", "text": "\nThis query will return the maximum date that any resident has moved into the residence.", "metadata": {}}
{"_id": "gpt3_4890", "text": "\nThis query will select the maximum date that any resident moved in from the Residents table.", "metadata": {}}
{"_id": "gpt3_4891", "text": "\nThis query returns the count of schools grouped by the denomination of each school.", "metadata": {}}
{"_id": "gpt3_4892", "text": "\nThis query will return the denomination of each school and the number of schools that belong to that denomination.", "metadata": {}}
{"_id": "gpt3_4893", "text": "\nThis query will return a count of the number of schools associated with each denomination.", "metadata": {}}
{"_id": "gpt3_4894", "text": "\nThis query will return the number of schools in each denomination.", "metadata": {}}
{"_id": "gpt3_4895", "text": "\nThis query will return the denomination of each school and the number of schools associated with that denomination.", "metadata": {}}
{"_id": "gpt3_4896", "text": "\nThis query will return the average age of students grouped by sex. It will return two columns, one with the average age and one with the sex of the student.", "metadata": {}}
{"_id": "gpt3_4897", "text": "\nThis query returns the average age for each sex from the Student table.", "metadata": {}}
{"_id": "gpt3_4898", "text": "\nThis query will return the average age of students in the Student table, grouped by sex.", "metadata": {}}
{"_id": "gpt3_4899", "text": "\nThis query will return the average age of students, broken down by sex. The result will be two rows, one for male students and one for female students, with the respective average age for each.", "metadata": {}}
{"_id": "gpt3_4900", "text": "\nThis query will return the average age of students grouped by sex, with the results showing the average age for each sex.", "metadata": {}}
{"_id": "gpt3_4901", "text": "\nThis query selects the payment method of the customer with the lowest total order quantity from the customers, customer_orders, and order_items tables.", "metadata": {}}
{"_id": "gpt3_4902", "text": "\nThis query selects the payment method from customers who have placed the least number of orders. The query joins the customers, customer_orders, and order_items tables, groups the customers by name, orders them by the sum of their order quantities,", "metadata": {}}
{"_id": "gpt3_4903", "text": "\nThis query selects the payment method of the customer with the lowest order quantity from the customers, customer_orders, and order_items tables. The customer name is grouped and ordered by the sum of their order quantity, and the result is limited to", "metadata": {}}
{"_id": "gpt3_4904", "text": "\nThis query selects the payment method of the customer who has ordered the least amount of items, ordered by customer name.", "metadata": {}}
{"_id": "gpt3_4905", "text": "\nThis query selects the payment method of the customer with the lowest total order quantity.", "metadata": {}}
{"_id": "gpt3_4906", "text": "\nThis query will return the date of enrolment and the date of completion for each student enrolled in a course.", "metadata": {}}
{"_id": "gpt3_4907", "text": "\nThis query will return the date of enrolment and date of completion for each student in the Student_Course_Enrolment table.", "metadata": {}}
{"_id": "gpt3_4908", "text": "\nThe query will return a list of the dates of enrolment and completion of courses by a student.", "metadata": {}}
{"_id": "gpt3_4909", "text": "\nThis query will return the date of enrolment and date of completion for each student in the Student_Course_Enrolment table.", "metadata": {}}
{"_id": "gpt3_4910", "text": "\nThis query will return the date of enrolment and date of completion for each student enrolled in a course.", "metadata": {}}
{"_id": "gpt3_4911", "text": "\nThis query finds the medicines that are both inhibitors and activators of an enzyme and returns the name and trade name of these medicines.", "metadata": {}}
{"_id": "gpt3_4912", "text": "\nThis query selects the name and trade name of medicines that are both inhibitors and activators of enzymes.", "metadata": {}}
{"_id": "gpt3_4913", "text": "\nThis query selects the names and trade names of medicines that are both inhibitors and activators of enzymes from the medicine and medicine_enzyme_interaction tables.", "metadata": {}}
{"_id": "gpt3_4914", "text": "\nThis query returns the names and trade names of medicines that are both inhibitors and activators of enzymes.", "metadata": {}}
{"_id": "gpt3_4915", "text": "\nThis query selects the name and trade name of medicines that are both inhibitors and activators of enzymes.", "metadata": {}}
{"_id": "gpt3_4916", "text": "\nThis query will return the total number of distinct votes for the President recorded in the VOTING_RECORD table.", "metadata": {}}
{"_id": "gpt3_4917", "text": "\nThis query will return the total number of distinct President votes in the VOTING_RECORD table.", "metadata": {}}
{"_id": "gpt3_4918", "text": "\nThis query will return the total number of distinct votes cast for President in the VOTING_RECORD table.", "metadata": {}}
{"_id": "gpt3_4919", "text": "\nThis query will return the total number of distinct votes cast in the President_Vote column of the VOTING_RECORD table.", "metadata": {}}
{"_id": "gpt3_4920", "text": "\nThis query will return the number of unique President_Votes in the VOTING_RECORD table.", "metadata": {}}
{"_id": "gpt3_4921", "text": "\nThis query retrieves the earliest acquired asset date from the Assets table, ordered in ascending order.", "metadata": {}}
{"_id": "gpt3_4922", "text": "\nThis query retrieves the date of the earliest acquired asset from the Assets table, ordered in ascending order.", "metadata": {}}
{"_id": "gpt3_4923", "text": "\nThis query retrieves the earliest asset acquired date from the Assets table, ordered in ascending order, and limited to one result.", "metadata": {}}
{"_id": "gpt3_4924", "text": "\nThis query returns the date of the earliest asset acquired from the Assets table, sorted in ascending order.", "metadata": {}}
{"_id": "gpt3_4925", "text": "\nThis query will return the earliest acquired asset date from the Assets table, sorted in ascending order.", "metadata": {}}
{"_id": "gpt3_4926", "text": "\nThis SQL statement will select the complaint status code from the complaints table and group them together by complaint status code, only selecting those with a count greater than 3.", "metadata": {}}
{"_id": "gpt3_4927", "text": "\nThis SQL query returns all complaint status codes from the complaints table that have a count greater than 3.", "metadata": {}}
{"_id": "gpt3_4928", "text": "\nThis SQL statement returns all complaint status codes from the \"complaints\" table that have a count of more than 3. This can be used to identify which complaint status codes are the most common.", "metadata": {}}
{"_id": "gpt3_4929", "text": "\nThis query returns the complaint status codes from the complaints table that appear more than three times.", "metadata": {}}
{"_id": "gpt3_4930", "text": "\nThis SQL query finds the complaint status codes from the complaints table that have more than 3 occurrences. It returns the complaint status codes that meet the criteria.", "metadata": {}}
{"_id": "gpt3_4931", "text": "\nThis query selects the title and type of films from two tables, film and film_market_estimation, based on the film_id column in both tables.", "metadata": {}}
{"_id": "gpt3_4932", "text": "\nThis query selects the title and type of a film from two different tables based on a shared Film_ID.", "metadata": {}}
{"_id": "gpt3_4933", "text": "\nThis query selects the title and type of a film from two tables, film and film_market_estimation, by joining them on the Film_ID column.", "metadata": {}}
{"_id": "gpt3_4934", "text": "\nThis statement selects the title and type of a film from two tables, film and film_market_estimation, by joining them on the Film_ID column.", "metadata": {}}
{"_id": "gpt3_4935", "text": "\nThis query selects the title of a film and its market estimation type from two tables, film and film_market_estimation, based on the Film_ID shared by both tables.", "metadata": {}}
{"_id": "gpt3_4936", "text": "\nThis query will count the number of countries that do not have roller coasters with a length greater than 3000 feet.", "metadata": {}}
{"_id": "gpt3_4937", "text": "\nThis query will count the number of countries in which there are no roller coasters with a length greater than 3000 feet.", "metadata": {}}
{"_id": "gpt3_4938", "text": "\nThis query returns the number of countries that do not have roller coasters with a length greater than 3000 feet.", "metadata": {}}
{"_id": "gpt3_4939", "text": "\nThis query returns the number of countries that do not have any roller coasters with a length greater than 3000 feet.", "metadata": {}}
{"_id": "gpt3_4940", "text": "\nThis query returns the number of countries that do not have any roller coasters with a length greater than 3000 feet.", "metadata": {}}
{"_id": "gpt3_4941", "text": "\nThis query will select all teams from the elimination table that have more than 3 entries.", "metadata": {}}
{"_id": "gpt3_4942", "text": "\nThis query returns a list of teams from the 'elimination' table that have appeared more than three times in the table.", "metadata": {}}
{"_id": "gpt3_4943", "text": "\nThis SQL query will return a list of teams that have been eliminated more than three times.", "metadata": {}}
{"_id": "gpt3_4944", "text": "\nThis query will return all teams from the elimination table that have more than 3 records in the table.", "metadata": {}}
{"_id": "gpt3_4945", "text": "\nThis query returns a list of teams from the elimination table that have more than 3 entries.", "metadata": {}}
{"_id": "gpt3_4946", "text": "\nThe above SQL statement will return the total number of records in the Staff table.", "metadata": {}}
{"_id": "gpt3_4947", "text": "\nThis SQL query will return the total number of records in the Staff table.", "metadata": {}}
{"_id": "gpt3_4948", "text": "\nThis query will return the total number of staff members in the Staff table.", "metadata": {}}
{"_id": "gpt3_4949", "text": "\nThis query returns the total number of staff members in the Staff table.", "metadata": {}}
{"_id": "gpt3_4950", "text": "\nThis query will return the total number of records in the Staff table.", "metadata": {}}
{"_id": "gpt3_4951", "text": "\nThis query selects the distinct names of all physicians who have prescribed the medication \"Thesisin\".", "metadata": {}}
{"_id": "gpt3_4952", "text": "\nThis query will return a list of distinct names of physicians who have prescribed the medication \"Thesisin\".", "metadata": {}}
{"_id": "gpt3_4953", "text": "\nThis query will select all unique names of physicians who have prescribed the medication Thesisin.", "metadata": {}}
{"_id": "gpt3_4954", "text": "\nThis query will return a list of distinct names of physicians who have prescribed the medication \"Thesisin\".", "metadata": {}}
{"_id": "gpt3_4955", "text": "\nThis query will select the distinct name of all physicians who prescribe the medication \"Thesisin\".", "metadata": {}}
{"_id": "gpt3_4956", "text": "\nThis query retrieves the details of the student with the highest number of course registrations from the students and student_course_registrations tables. It does this by joining the two tables on the student_id column, grouping by student_id", "metadata": {}}
{"_id": "gpt3_4957", "text": "\nThis query will select the student details from the students table (T1) and join it with the student_course_registrations table (T2) based on the student_id. The results are then grouped by the student_id", "metadata": {}}
{"_id": "gpt3_4958", "text": "\nThis query will select the student details from the students table, join it with the student_course_registrations table, group the results by student id, order the results by the count of each student's registrations, and limit the results to", "metadata": {}}
{"_id": "gpt3_4959", "text": "\nThis query selects the student details from the students table, joins it with the student_course_registrations table, groups the results by student_id, orders them by the count of the grouped results in descending order, and then limits the", "metadata": {}}
{"_id": "gpt3_4960", "text": "\nThis query returns the student details from the students table for the student who has registered for the most courses, ordered by the number of courses registered for in descending order, with a limit of one result.", "metadata": {}}
{"_id": "gpt3_4961", "text": "\nThis statement will select all of the distinct cities from the addresses table that are associated with the people_addresses table.", "metadata": {}}
{"_id": "gpt3_4962", "text": "\nThis statement will select all distinct cities from the 'addresses' table that are associated with a person in the 'people_addresses' table.", "metadata": {}}
{"_id": "gpt3_4963", "text": "\nThis statement will select distinct cities from the addresses table by joining the addresses table (T1) and the people_addresses table (T2) on the address_id column.", "metadata": {}}
{"_id": "gpt3_4964", "text": "\nThis query selects all distinct cities from the addresses table, using the people_addresses table to link the addresses to people.", "metadata": {}}
{"_id": "gpt3_4965", "text": "\nThis query selects all distinct cities from the addresses table using the addresses and people_addresses tables. It does this by joining the two tables on the address_id column.", "metadata": {}}
{"_id": "gpt3_4966", "text": "\nThis query will return the total number of records in the Statements table.", "metadata": {}}
{"_id": "gpt3_4967", "text": "\nThis statement will return the total number of rows in the Statements table.", "metadata": {}}
{"_id": "gpt3_4968", "text": "\nThis query will return the total number of records in the Statements table.", "metadata": {}}
{"_id": "gpt3_4969", "text": "\nThis query will return the total number of rows in the Statements table.", "metadata": {}}
{"_id": "gpt3_4970", "text": "\nThis query will return the total number of rows in the Statements table.", "metadata": {}}
{"_id": "gpt3_4971", "text": "\nThis query will return the phone number and postal code associated with the address '1031 Daugavpils Parkway' from the address table.", "metadata": {}}
{"_id": "gpt3_4972", "text": "\nThe query will return the phone number and postal code associated with the address '1031 Daugavpils Parkway' from the address table.", "metadata": {}}
{"_id": "gpt3_4973", "text": "\nThis query will return the phone number and postal code of the address '1031 Daugavpils Parkway'.", "metadata": {}}
{"_id": "gpt3_4974", "text": "\nThis query will select the phone number and postal code from the address table for the address '1031 Daugavpils Parkway'.", "metadata": {}}
{"_id": "gpt3_4975", "text": "\nThis query would return the phone number and postal code associated with the address '1031 Daugavpils Parkway' from the address table.", "metadata": {}}
{"_id": "gpt3_4976", "text": "\nThis query returns the headquarters of companies that appear in the company table more than once.", "metadata": {}}
{"_id": "gpt3_4977", "text": "\nThis query will return the headquarters of all companies that have two or more entries in the company table.", "metadata": {}}
{"_id": "gpt3_4978", "text": "\nThis query returns all headquarters of companies that appear at least twice in the company table.", "metadata": {}}
{"_id": "gpt3_4979", "text": "\nThis query returns the headquarters of all companies that have two or more instances in the company table.", "metadata": {}}
{"_id": "gpt3_4980", "text": "\nThis SQL query will select the headquarters of companies that have two or more branches. It will group the results by headquarters and count the number of companies in each group.", "metadata": {}}
{"_id": "gpt3_4981", "text": "\nThe SQL query would return the Marketing Region Description for the Marketing Region Name \"China\".", "metadata": {}}
{"_id": "gpt3_4982", "text": "\nThe query will return the marketing region description for the region named \"China\".", "metadata": {}}
{"_id": "gpt3_4983", "text": "\nThis query would return the description of the marketing region named \"China\" from the Marketing_Regions table.", "metadata": {}}
{"_id": "gpt3_4984", "text": "\nThe query would return the description of the marketing region named \"China\".", "metadata": {}}
{"_id": "gpt3_4985", "text": "\nThe above SQL query will return the marketing region description for the marketing region named \"China\".", "metadata": {}}
{"_id": "gpt3_4986", "text": "\nThis query will select all the distinct allergy types from the Allergy_type table.", "metadata": {}}
{"_id": "gpt3_4987", "text": "\nThis query will return a list of all unique allergy types from the Allergy_type table.", "metadata": {}}
{"_id": "gpt3_4988", "text": "\nThis SQL statement will select all unique allergy types from the Allergy_type table.", "metadata": {}}
{"_id": "gpt3_4989", "text": "\nThis query will return all the distinct allergy types from the Allergy_type table.", "metadata": {}}
{"_id": "gpt3_4990", "text": "\nThis query will return a list of all the distinct allergy types in the Allergy_type table.", "metadata": {}}
{"_id": "gpt3_4991", "text": "\nThis query selects the Name of a tourist attraction and the Visit_Date from three tables (Tourist_Attractions, Visitors, and Visits) based on the Tourist_Details of either \"Vincent\" or \"Vivian\".", "metadata": {}}
{"_id": "gpt3_4992", "text": "\nThis query selects the name of the tourist attractions and the visit date for all tourist attractions visited by either Vincent or Vivian.", "metadata": {}}
{"_id": "gpt3_4993", "text": "\nThis query will select the name of the tourist attractions and the visit dates of Vincent and Vivian.", "metadata": {}}
{"_id": "gpt3_4994", "text": "\nThis query will select the Name and Visit_Date of Tourist Attractions visited by either Vincent or Vivian.", "metadata": {}}
{"_id": "gpt3_4995", "text": "\nThis query retrieves the name and visit date of the tourist attractions visited by either Vincent or Vivian.", "metadata": {}}
{"_id": "gpt3_4996", "text": "\nThis query selects the team ID and rank of the team with the highest average attendance during the 2014 home games.", "metadata": {}}
{"_id": "gpt3_4997", "text": "\nThis query selects the team_id and rank of the team with the highest average attendance in home games in 2014.", "metadata": {}}
{"_id": "gpt3_4998", "text": "\nThis query selects the team_id and rank of the team with the highest average attendance at home games in 2014.", "metadata": {}}
{"_id": "gpt3_4999", "text": "\nThis query retrieves the team ID and rank of the team with the highest average attendance for home games in the year 2014.", "metadata": {}}
{"_id": "gpt3_5000", "text": "\nThis query selects the team_id and rank of the team with the highest average attendance in home games in 2014.", "metadata": {}}
{"_id": "gpt3_5001", "text": "\nThis query returns the count of students over the age of 18 who are members of the club \"Bootup Baltimore\".", "metadata": {}}
{"_id": "gpt3_5002", "text": "\nThis query will count the number of students over the age of 18 who are members of the club \"Bootup Baltimore\".", "metadata": {}}
{"_id": "gpt3_5003", "text": "\nThis query returns the number of students over the age of 18 who are members of the club \"Bootup Baltimore\".", "metadata": {}}
{"_id": "gpt3_5004", "text": "\nThis query will count the number of students who are 18 years of age or older, and are members of the club \"Bootup Baltimore\".", "metadata": {}}
{"_id": "gpt3_5005", "text": "\nThis query will return the number of students over the age of 18 who are members of the club \"Bootup Baltimore\".", "metadata": {}}
{"_id": "gpt3_5006", "text": "\nThis query selects the department name from the DEPARTMENT table (T1) that has the least number of members from the MEMBER_OF table (T2). It groups the results by department number, orders them by the count of members", "metadata": {}}
{"_id": "gpt3_5007", "text": "\nThis query selects the department name from the DEPARTMENT table that has the least members, as indicated by the order by count(*) ASC in the query. The MEMBER_OF table is joined to the DEPARTMENT table to get the", "metadata": {}}
{"_id": "gpt3_5008", "text": "\nThis query selects the department name from the DEPARTMENT table (T1) that has the least amount of members, as determined by the MEMBER_OF table (T2), and orders the results in ascending order. The result is limited", "metadata": {}}
{"_id": "gpt3_5009", "text": "\nThis query returns the name of the department with the least number of members, ordered by the number of members in ascending order, and limited to one.", "metadata": {}}
{"_id": "gpt3_5010", "text": "\nThis query will select the department name of the department with the fewest members from the DEPARTMENT and MEMBER_OF tables. It will group the members by department number, order them by count in ascending order, and then select the first", "metadata": {}}
{"_id": "gpt3_5011", "text": "\nThis query selects the employee IDs and job IDs of all employees with a salary lower than the minimum salary of all employees with a job ID of 'MK_MAN'.", "metadata": {}}
{"_id": "gpt3_5012", "text": "\nThis statement selects the employee_id and job_id from the employees table where the salary is less than the minimum salary of any employee with a job_id of 'MK_MAN'.", "metadata": {}}
{"_id": "gpt3_5013", "text": "\nThis query selects the employee_id and job_id from the employees table for all employees with a salary lower than the minimum salary of employees with a job_id of 'MK_MAN'.", "metadata": {}}
{"_id": "gpt3_5014", "text": "\nThis query will select the employee_id and job_id from the employees table where the salary is less than the minimum salary of the employees with the job_id 'MK_MAN'.", "metadata": {}}
{"_id": "gpt3_5015", "text": "\nThis query will return the employee ID and job ID of all employees whose salary is less than the minimum salary for the job ID 'MK_MAN'.", "metadata": {}}
{"_id": "gpt3_5016", "text": "\nThis query will return the country with the most stadiums, ordered by the number of stadiums in descending order, with a limit of 1.", "metadata": {}}
{"_id": "gpt3_5017", "text": "\nThis query will return the country with the most stadiums, ordered by the highest count.", "metadata": {}}
{"_id": "gpt3_5018", "text": "\nThis query will select the country with the most stadiums and order the results by count in descending order, with a limit of one. The result will be the country with the most stadiums.", "metadata": {}}
{"_id": "gpt3_5019", "text": "\nThis query returns the country with the most stadiums, ordered by the number of stadiums in that country.", "metadata": {}}
{"_id": "gpt3_5020", "text": "\nThis query will return the country with the most stadiums, ordered by the number of stadiums in descending order, with a limit of 1.", "metadata": {}}
{"_id": "gpt3_5021", "text": "\nThis query will select the WiFi and Type from the chip_model, phone, and screen_mode tables, where the Hardware_Model_name of the phone table is \"LG-P760\".", "metadata": {}}
{"_id": "gpt3_5022", "text": "\nThis query will select the WiFi type and type of screen mode from the chip_model, phone, and screen_mode tables based on the hardware model name of \"LG-P760\".", "metadata": {}}
{"_id": "gpt3_5023", "text": "\nThis query will return the WiFi capabilities and type of screen mode for the LG-P760 phone.", "metadata": {}}
{"_id": "gpt3_5024", "text": "\nThis query will select the WiFi and Type of the chip model and screen mode of the phone with the Hardware Model Name \"LG-P760\".", "metadata": {}}
{"_id": "gpt3_5025", "text": "\nThis query will return the WiFi and Type information from the chip_model, phone, and screen_mode tables for the LG-P760 hardware model.", "metadata": {}}
{"_id": "gpt3_5026", "text": "\nThis query calculates the average total passengers for all airports with a Robinson R-22 aircraft.", "metadata": {}}
{"_id": "gpt3_5027", "text": "\nThis query will return the average total number of passengers for all airports that have a Robinson R-22 aircraft.", "metadata": {}}
{"_id": "gpt3_5028", "text": "\nThis query returns the average number of passengers for all airports that have a Robinson R-22 aircraft.", "metadata": {}}
{"_id": "gpt3_5029", "text": "\nThis query returns the average total number of passengers for all airports with a Robinson R-22 aircraft.", "metadata": {}}
{"_id": "gpt3_5030", "text": "\nThis query will return the average total number of passengers for all airports that have Robinson R-22 aircraft.", "metadata": {}}
{"_id": "gpt3_5031", "text": "\nThis query selects the name and balance from two tables, accounts and savings, and orders the results by the balance in descending order, limiting the results to the top three balances.", "metadata": {}}
{"_id": "gpt3_5032", "text": "\nThis query selects the name and balance from two tables, accounts and savings, by joining them based on the customer ID. The results are then ordered by the balance in descending order and the top three results are returned.", "metadata": {}}
{"_id": "gpt3_5033", "text": "\nThis query retrieves the name and balance of the top three customers with the highest balance in their savings accounts. It joins the accounts and savings tables by the customer ID, and orders the results by the balance in descending order.", "metadata": {}}
{"_id": "gpt3_5034", "text": "\nThis statement retrieves the name and balance of the top three customers with the highest balance in the savings accounts table, ordered by balance in descending order. It does this by joining the accounts and savings tables on the custid column and selecting the name", "metadata": {}}
{"_id": "gpt3_5035", "text": "\nThis statement selects the name and balance of the top three customers with the highest savings balance from the accounts and savings tables. It joins the two tables on the custid column, orders the results in descending order, and limits the results to the top", "metadata": {}}
{"_id": "gpt3_5036", "text": "\nThis query will select all distinct problem_id and problem_log_id associated with staff member Rylan Homenick.", "metadata": {}}
{"_id": "gpt3_5037", "text": "\nThis query retrieves the distinct problem_id and problem_log_id from the problem_log table for all entries assigned to the staff member Rylan Homenick.", "metadata": {}}
{"_id": "gpt3_5038", "text": "\nThis query selects the distinct problem_id and problem_log_id from the staff and problem_log tables where the staff first name is \"Rylan\" and the last name is \"Homenick\".", "metadata": {}}
{"_id": "gpt3_5039", "text": "\nThis query retrieves the distinct problem_id and problem_log_id from the problem_log table for the staff member with the first name \"Rylan\" and last name \"Homenick\".", "metadata": {}}
{"_id": "gpt3_5040", "text": "\nThis query selects the distinct problem_id and problem_log_id from the staff and problem_log tables for the staff member with the first name Rylan and the last name Homenick.", "metadata": {}}
{"_id": "gpt3_5041", "text": "\nThis query will return a list of all distinct venues from the debate table.", "metadata": {}}
{"_id": "gpt3_5042", "text": "\nThe SELECT DISTINCT statement is used to return only distinct (different) values in the specified column or expression. In this case, the SELECT DISTINCT statement will return all unique values in the Venue column from the debate table", "metadata": {}}
{"_id": "gpt3_5043", "text": "\nThis statement will return a list of all the distinct venues of debates.", "metadata": {}}
{"_id": "gpt3_5044", "text": "\nThis query will return a list of all the unique venues that have been used for debates.", "metadata": {}}
{"_id": "gpt3_5045", "text": "\nThis query will return a list of all unique venues from the debate table.", "metadata": {}}
{"_id": "gpt3_5046", "text": "\nThis query returns a list of distinct driverid and STOP values from the pitstops table, where the duration is less than the maximum duration for the raceid 841.", "metadata": {}}
{"_id": "gpt3_5047", "text": "\nThis query will select distinct driverid and STOP values from the pitstops table for all entries where the duration is less than the maximum duration for raceid 841.", "metadata": {}}
{"_id": "gpt3_5048", "text": "\nThis query selects the distinct driverid and stop of pitstops with a duration less than the maximum duration of pitstops in race 841.", "metadata": {}}
{"_id": "gpt3_5049", "text": "\nThis query returns the distinct driverid and STOP of all pitstops that have a duration less than the maximum duration of any pitstop for raceid 841.", "metadata": {}}
{"_id": "gpt3_5050", "text": "\nThis query returns a list of distinct driver IDs and their associated pit stop times from the \"pitstops\" table where the duration of the pit stop was less than the maximum duration of a pit stop for race ID 841.", "metadata": {}}
{"_id": "gpt3_5051", "text": "\nThis query returns the number of distinct course_ids in the Physics department.", "metadata": {}}
{"_id": "gpt3_5052", "text": "\nThis query will return the number of distinct courses offered in the Physics department.", "metadata": {}}
{"_id": "gpt3_5053", "text": "\nThis query will return the total number of distinct Physics courses.", "metadata": {}}
{"_id": "gpt3_5054", "text": "\nThis query will return the number of unique courses in the Physics department.", "metadata": {}}
{"_id": "gpt3_5055", "text": "\nThis query will return the number of distinct courses in the Physics department.", "metadata": {}}
{"_id": "gpt3_5056", "text": "\nThis query finds the average number of weeks spent on the top of the charts for artists who are 25 years old or younger.", "metadata": {}}
{"_id": "gpt3_5057", "text": "\nThis query will return the average number of weeks on top for all artists aged 25 or younger.", "metadata": {}}
{"_id": "gpt3_5058", "text": "\nThis query calculates the average number of weeks that artists who are 25 years old or younger have spent on the top of the music charts.", "metadata": {}}
{"_id": "gpt3_5059", "text": "\nThis query returns the average number of weeks that artists under the age of 25 have been on the top of the music charts.", "metadata": {}}
{"_id": "gpt3_5060", "text": "\nThis query will calculate the average number of weeks that artists aged 25 or younger have spent at the top of the music charts.", "metadata": {}}
{"_id": "gpt3_5061", "text": "\nThis query returns the denominations of schools that were founded before 1890 and after 1900.", "metadata": {}}
{"_id": "gpt3_5062", "text": "\nThis query will return the Denomination of schools that were founded before 1890 and after 1900.", "metadata": {}}
{"_id": "gpt3_5063", "text": "\nThis query returns the denominations of schools founded between 1890 and 1900.", "metadata": {}}
{"_id": "gpt3_5064", "text": "\nThis query will return the denominations of schools that were founded before 1890 and after 1900.", "metadata": {}}
{"_id": "gpt3_5065", "text": "\nThis query will return the denomination of schools that were founded before 1890 and after 1900.", "metadata": {}}
{"_id": "gpt3_5066", "text": "\nThis query will return all course names from the courses table, sorted in alphabetical order.", "metadata": {}}
{"_id": "gpt3_5067", "text": "\nThis statement retrieves all course names from the courses table and sorts them in alphabetical order.", "metadata": {}}
{"_id": "gpt3_5068", "text": "\nThis query selects all course names from the courses table and orders them alphabetically.", "metadata": {}}
{"_id": "gpt3_5069", "text": "\nThis query will select all course names from the courses table and order them alphabetically.", "metadata": {}}
{"_id": "gpt3_5070", "text": "\nThis query returns a list of course names from the courses table, sorted in alphabetical order.", "metadata": {}}
{"_id": "gpt3_5071", "text": "\nThis query will return a list of all the distinct countries that appear in the BillingCountry column of the INVOICE table.", "metadata": {}}
{"_id": "gpt3_5072", "text": "\nThis query will return a list of all the distinct countries from the INVOICE table.", "metadata": {}}
{"_id": "gpt3_5073", "text": "\nThis query will return a list of all the distinct billing countries from the INVOICE table.", "metadata": {}}
{"_id": "gpt3_5074", "text": "\nThis query returns a list of all unique countries listed in the BillingCountry field of the INVOICE table.", "metadata": {}}
{"_id": "gpt3_5075", "text": "\nThis query will return a list of all the distinct countries from the Invoice table.", "metadata": {}}
{"_id": "gpt3_5076", "text": "\nThis query will return a list of dates from the perpetrator table, ordered by the number of people killed in descending order.", "metadata": {}}
{"_id": "gpt3_5077", "text": "\nThis query will select the dates from the perpetrator table and order them in descending order based on the number of people killed.", "metadata": {}}
{"_id": "gpt3_5078", "text": "\nThis SQL query will return a list of dates from the perpetrator table, sorted in descending order by the number of people killed.", "metadata": {}}
{"_id": "gpt3_5079", "text": "\nThis query will select the date of each perpetrator from the perpetrator table and order them by the number of people killed from highest to lowest.", "metadata": {}}
{"_id": "gpt3_5080", "text": "\nThis query will return a list of dates from the perpetrator table, sorted in descending order by the number of people killed.", "metadata": {}}
{"_id": "gpt3_5081", "text": "\nThis statement retrieves the name and course_id of instructors from the Art department. It does this by joining the instructor and teaches tables on the ID column, and then filtering the results to only include those from the Art department.", "metadata": {}}
{"_id": "gpt3_5082", "text": "\nThis query returns the names and course IDs of instructors in the Art department.", "metadata": {}}
{"_id": "gpt3_5083", "text": "\nThis statement retrieves the name and course_id of instructors from the department of Art. It does this by joining the instructor and teaches tables on the ID column and filtering for instructors with a dept_name of 'Art'.", "metadata": {}}
{"_id": "gpt3_5084", "text": "\nThis query selects the name and course_id of instructors from the department of Art from the instructor and teaches tables.", "metadata": {}}
{"_id": "gpt3_5085", "text": "\nThis query selects the name and course_id of instructors from the Art department from the instructor and teaches tables.", "metadata": {}}
{"_id": "gpt3_5086", "text": "\nThis query will select the name of all airports whose name contains the word \"international\".", "metadata": {}}
{"_id": "gpt3_5087", "text": "\nThis SQL statement selects the name of airports from the airport table which have the word 'international' in their name.", "metadata": {}}
{"_id": "gpt3_5088", "text": "\nThis SQL statement will select the name of any airport whose name contains the word \"international\".", "metadata": {}}
{"_id": "gpt3_5089", "text": "\nThis query will select the name of all airports that include the word \"international\" in their name.", "metadata": {}}
{"_id": "gpt3_5090", "text": "\nThis SQL query will select the name of any airport that contains the word \"international\" in its name.", "metadata": {}}
{"_id": "gpt3_5091", "text": "\nThis query will return the description of the most common role for the user with the login ID of 1.", "metadata": {}}
{"_id": "gpt3_5092", "text": "\nThis query will select the role description from the ROLES table for the most frequently used role code for user login 1.", "metadata": {}}
{"_id": "gpt3_5093", "text": "\nThis query will select the role description from the ROLES table for the most commonly occurring role code associated with the user login '1'.", "metadata": {}}
{"_id": "gpt3_5094", "text": "\nThis query will select the role description from the roles table for the most frequently occurring role code associated with user login 1.", "metadata": {}}
{"_id": "gpt3_5095", "text": "\nThis query will select the role description from the ROLES table for the role code associated with the user login '1', grouped by role code and ordered by the count of the role code in descending order, with a limit of 1.", "metadata": {}}
{"_id": "gpt3_5096", "text": "\nThis query will select the title of all songs from albums released by the Universal Music Group.", "metadata": {}}
{"_id": "gpt3_5097", "text": "\nThis query selects the titles of all songs from albums released by Universal Music Group.", "metadata": {}}
{"_id": "gpt3_5098", "text": "\nThis query will select all titles of songs from albums released by the Universal Music Group.", "metadata": {}}
{"_id": "gpt3_5099", "text": "\nThis query will select all the titles of songs from albums released by the Universal Music Group.", "metadata": {}}
{"_id": "gpt3_5100", "text": "\nThis query selects the title of all songs from albums released by Universal Music Group.", "metadata": {}}
{"_id": "gpt3_5101", "text": "\nThis statement will select all unique locations from the station table.", "metadata": {}}
{"_id": "gpt3_5102", "text": "\nThis query will return a list of all unique locations from the station table.", "metadata": {}}
{"_id": "gpt3_5103", "text": "\nThis query will select all unique locations from the station table.", "metadata": {}}
{"_id": "gpt3_5104", "text": "\nThis statement will return a list of all unique locations from the station table.", "metadata": {}}
{"_id": "gpt3_5105", "text": "\nThis statement will select all the unique locations from the station table.", "metadata": {}}
{"_id": "gpt3_5106", "text": "\nThis query will return the average gross in dollars for all films in the film table.", "metadata": {}}
{"_id": "gpt3_5107", "text": "\nThis query will return the average gross earnings in dollars of all films in the film table.", "metadata": {}}
{"_id": "gpt3_5108", "text": "\nThis query will return the average gross income (in US dollars) for all films in the database.", "metadata": {}}
{"_id": "gpt3_5109", "text": "\nThis query returns the average gross in dollars for all films in the film table.", "metadata": {}}
{"_id": "gpt3_5110", "text": "\nThis query will return the average gross in dollars for all films in the film table.", "metadata": {}}
{"_id": "gpt3_5111", "text": "\nThis query will return a list of names from the people table, sorted in ascending order by date of birth.", "metadata": {}}
{"_id": "gpt3_5112", "text": "\nThis query will return a list of names from the people table, sorted in ascending order by date of birth.", "metadata": {}}
{"_id": "gpt3_5113", "text": "\nThis query will return the names of all people in a table ordered by their date of birth.", "metadata": {}}
{"_id": "gpt3_5114", "text": "\nThis query will return a list of names from the people table, sorted in ascending order based on the date of birth.", "metadata": {}}
{"_id": "gpt3_5115", "text": "\nThis query will return a list of names from the people table, sorted in ascending order by date of birth.", "metadata": {}}
{"_id": "gpt3_5116", "text": "\nThis query will select the names of editors who are part of a journal committee for a journal with sales greater than 3000.", "metadata": {}}
{"_id": "gpt3_5117", "text": "\nThis query selects the name of an editor from the journal_committee, editor, and journal tables where the journal sales are greater than 3000.", "metadata": {}}
{"_id": "gpt3_5118", "text": "\nThis query selects the name of the editor from the journal_committee, editor, and journal tables where the journal has sales greater than 3000.", "metadata": {}}
{"_id": "gpt3_5119", "text": "\nThis query will select the name of the editor from the journal_committee, editor, and journal tables where the journal's sales are greater than 3000.", "metadata": {}}
{"_id": "gpt3_5120", "text": "\nThis query selects the Name of an editor from the journal_committee, editor, and journal tables, where the journal's sales are greater than 3000.", "metadata": {}}
{"_id": "gpt3_5121", "text": "\nThis query will return all cities from the branch table where the open_year is 2001 and the membership_amount is greater than 100.", "metadata": {}}
{"_id": "gpt3_5122", "text": "\nThis query will return all cities from the branch table where the open year is 2001 and the membership amount is greater than 100.", "metadata": {}}
{"_id": "gpt3_5123", "text": "\nThis query will return all cities from the branch table where the open year is 2001 and the membership amount is greater than 100.", "metadata": {}}
{"_id": "gpt3_5124", "text": "\nThis query will select the city from the branch table where the open year is 2001 and the membership amount is greater than 100.", "metadata": {}}
{"_id": "gpt3_5125", "text": "\nThis query will return all cities from the branch table where the open year is 2001 and the membership amount is greater than 100.", "metadata": {}}
{"_id": "gpt3_5126", "text": "\nThis query returns the number of distinct regions affected by a particular event.", "metadata": {}}
{"_id": "gpt3_5127", "text": "\nThis query will return the total number of distinct region_ids in the affected_region table.", "metadata": {}}
{"_id": "gpt3_5128", "text": "\nThis query will return the number of distinct region_ids in the affected_region table.", "metadata": {}}
{"_id": "gpt3_5129", "text": "\nThis query returns the total number of distinct region_ids in the affected_region table.", "metadata": {}}
{"_id": "gpt3_5130", "text": "\nThis query will return the number of distinct regions that have been affected by a particular event.", "metadata": {}}
{"_id": "gpt3_5131", "text": "\nThis query selects the store name from the Drama Workshop Groups table for all bookings with a status code of \"stop\".", "metadata": {}}
{"_id": "gpt3_5132", "text": "\nThis query selects the store name from the Drama Workshop Groups table for all bookings with a status code of \"stop\".", "metadata": {}}
{"_id": "gpt3_5133", "text": "\nThis query will select the store name from the Bookings and Drama Workshop Groups tables where the Status Code in the Bookings table is \"stop\".", "metadata": {}}
{"_id": "gpt3_5134", "text": "\nThis query selects the store name from the Drama Workshop Groups table for bookings with a status code of \"stop\".", "metadata": {}}
{"_id": "gpt3_5135", "text": "\nThis query selects the name of the store associated with a booking whose status code is \"stop\" from the Bookings and Drama_Workshop_Groups tables.", "metadata": {}}
{"_id": "gpt3_5136", "text": "\nThis query returns the most popular party from a table of people, ordered by the number of people in each party.", "metadata": {}}
{"_id": "gpt3_5137", "text": "\nThis query will return the party with the most members from the people table, ordered by count in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_5138", "text": "\nThis query will return the most common party affiliation from the people table, ordered by the count of each party affiliation in descending order, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_5139", "text": "\nThis SQL query will return the most common party of the people in the table, sorted by count in descending order, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_5140", "text": "\nThis query returns the most common party from the people table, ordered by the count of each party in descending order, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_5141", "text": "\nThis statement retrieves the distinct names of banks from the bank and loan tables based on their shared branch_id.", "metadata": {}}
{"_id": "gpt3_5142", "text": "\nThis query selects the distinct names of banks from the bank and loan tables, based on the branch_id in both tables.", "metadata": {}}
{"_id": "gpt3_5143", "text": "\nThis SQL statement will select all of the distinct branch names from the bank table that are associated with a loan in the loan table.", "metadata": {}}
{"_id": "gpt3_5144", "text": "\nThis statement will select the unique names of banks from the bank and loan tables, based on the branch ID's in each table.", "metadata": {}}
{"_id": "gpt3_5145", "text": "\nThis query selects the distinct branch names from the bank and loan tables, using the branch_id from both tables to match the records.", "metadata": {}}
{"_id": "gpt3_5146", "text": "\nThis query will return a list of the names, address roads, and cities of branches in a particular order, sorted by the year in which they were opened.", "metadata": {}}
{"_id": "gpt3_5147", "text": "\nThis query will select the name, address road, and city from the branch table and order the results by open year.", "metadata": {}}
{"_id": "gpt3_5148", "text": "\nThis query will select the name, address_road, and city from the branch table and order the results by open_year. This will return a list of the branches in order of the year they opened.", "metadata": {}}
{"_id": "gpt3_5149", "text": "\nThis query will return the name, address_road and city of all branches in the database, ordered by the year they opened.", "metadata": {}}
{"_id": "gpt3_5150", "text": "\nThis query will select the name, address_road, and city from the branch table, and order the results by the open_year field.", "metadata": {}}
{"_id": "gpt3_5151", "text": "\nThis query will find the average latitude and longitude of all stations in the city of San Jose.", "metadata": {}}
{"_id": "gpt3_5152", "text": "\nThis query will return the average latitude and longitude of all stations located in San Jose.", "metadata": {}}
{"_id": "gpt3_5153", "text": "\nThis query will return the average latitude and longitude of stations in San Jose.", "metadata": {}}
{"_id": "gpt3_5154", "text": "\nThis query will return the average latitude and longitude of all the stations located in San Jose.", "metadata": {}}
{"_id": "gpt3_5155", "text": "\nThis query will return the average latitude and longitude of all stations in San Jose.", "metadata": {}}
{"_id": "gpt3_5156", "text": "\nThis query selects the pilot name and model of the aircraft from the pilot_record, aircraft, and pilot tables.", "metadata": {}}
{"_id": "gpt3_5157", "text": "\nThis query selects the name of the pilot and the model of the aircraft associated with them from the pilot_record, aircraft and pilot tables.", "metadata": {}}
{"_id": "gpt3_5158", "text": "\nThis query selects the pilot name and aircraft model from the pilot_record, aircraft, and pilot tables.", "metadata": {}}
{"_id": "gpt3_5159", "text": "\nThis query selects the pilot name and aircraft model from the pilot_record, aircraft, and pilot tables.", "metadata": {}}
{"_id": "gpt3_5160", "text": "\nThis query selects the pilot name and model from the pilot_record, aircraft, and pilot tables, by joining the tables based on the aircraft_ID and pilot_ID.", "metadata": {}}
{"_id": "gpt3_5161", "text": "\nThis query will return a list of players and the number of years they have played.", "metadata": {}}
{"_id": "gpt3_5162", "text": "\nThis query will return a list of players and the years they have played in the game.", "metadata": {}}
{"_id": "gpt3_5163", "text": "\nThis query will return a list of players and the number of years they have played.", "metadata": {}}
{"_id": "gpt3_5164", "text": "\nThis query will return a list of players and the number of years they have played.", "metadata": {}}
{"_id": "gpt3_5165", "text": "\nThis query will select the Player and Years_Played columns from the player table.", "metadata": {}}
{"_id": "gpt3_5166", "text": "\nThis query will select the first name, last name, and age of all female students from the Student table.", "metadata": {}}
{"_id": "gpt3_5167", "text": "\nThis query selects the first name, last name, and age of all female students from the Student table.", "metadata": {}}
{"_id": "gpt3_5168", "text": "\nThis query will select the first name, last name and age of all students from the Student table where their sex is female.", "metadata": {}}
{"_id": "gpt3_5169", "text": "\nThis query selects the first name, last name, and age of all students from the Student table who are female.", "metadata": {}}
{"_id": "gpt3_5170", "text": "\nThis query will select the first name, last name, and age of all students from the Student table where the sex is female.", "metadata": {}}
{"_id": "gpt3_5171", "text": "\nThis query will return the sum of credits for each department code from the course and class tables. It will group the courses by department code and sum the credits for each department.", "metadata": {}}
{"_id": "gpt3_5172", "text": "\nThis query is used to calculate the total credits for each department by summing the credits of all courses in the course table and grouping them by department code.", "metadata": {}}
{"_id": "gpt3_5173", "text": "\nThis query will calculate the total number of credits for each department in a course, by joining the course and class tables and summing the credits for each department.", "metadata": {}}
{"_id": "gpt3_5174", "text": "\nThis query will return the sum of credits for each department code, based on the courses and classes associated with each department.", "metadata": {}}
{"_id": "gpt3_5175", "text": "\nThis query will return the sum of course credits for each department code from the course and class tables.", "metadata": {}}
{"_id": "gpt3_5176", "text": "\nThis query selects the customer names from the customer table and joins it with the loan table based on the customer ID. The query groups the customer names and only returns those customers who have more than one loan associated with their name.", "metadata": {}}
{"_id": "gpt3_5177", "text": "\nThis query selects the customer names from the customer table (T1) that have taken out more than one loan from the loan table (T2). It joins the two tables on the customer ID and then groups the results by customer name and counts", "metadata": {}}
{"_id": "gpt3_5178", "text": "\nThis statement retrieves the names of customers who have taken out more than one loan from a database. It joins the customer and loan tables on the customer ID and then groups the results by customer name, only returning those customers who have taken out more", "metadata": {}}
{"_id": "gpt3_5179", "text": "\nThis query selects the customer name from the customer and loan tables, joining them on the customer ID, and groups the results by customer name. It then returns only those customers who have more than one loan.", "metadata": {}}
{"_id": "gpt3_5180", "text": "\nThis query selects the customer names from the customer table that have more than one loan in the loan table. It joins the customer and loan tables on the customer ID and groups the results by customer name, then filters the results to only include customers with", "metadata": {}}
{"_id": "gpt3_5181", "text": "\nThis query will return the login name and family name of all authors and tutors from the Course_Authors_and_Tutors table.", "metadata": {}}
{"_id": "gpt3_5182", "text": "\nThis statement will select the login name and family name from the Course_Authors_and_Tutors table.", "metadata": {}}
{"_id": "gpt3_5183", "text": "\nThis query will select the login name and family name from the Course_Authors_and_Tutors table.", "metadata": {}}
{"_id": "gpt3_5184", "text": "\nThis statement will select the login name and family name from the Course_Authors_and_Tutors table.", "metadata": {}}
{"_id": "gpt3_5185", "text": "\nThis SQL statement will select the login name and family name from the Course_Authors_and_Tutors table.", "metadata": {}}
{"_id": "gpt3_5186", "text": "\nThis query counts the number of postseason losses for the Boston Red Stockings in 2009.", "metadata": {}}
{"_id": "gpt3_5187", "text": "\nThis query counts the number of postseason losses by the Boston Red Stockings in 2009.", "metadata": {}}
{"_id": "gpt3_5188", "text": "\nThis query counts the number of postseason losses by the Boston Red Stockings in 2009.", "metadata": {}}
{"_id": "gpt3_5189", "text": "\nThis query counts the number of postseason losses by the Boston Red Stockings in 2009.", "metadata": {}}
{"_id": "gpt3_5190", "text": "\nThis query counts the number of postseason losses for the Boston Red Stockings in the year 2009.", "metadata": {}}
{"_id": "gpt3_5191", "text": "\nThis query will return the first and last name of the faculty member who is the advisor of a student named Linda Smith.", "metadata": {}}
{"_id": "gpt3_5192", "text": "\nThis statement will select the first and last name of the faculty advisor of a student named Linda Smith.", "metadata": {}}
{"_id": "gpt3_5193", "text": "\nThis query will select the first and last name of the faculty member who is the advisor of the student named Linda Smith.", "metadata": {}}
{"_id": "gpt3_5194", "text": "\nThis query will select the first and last name of the faculty member who is the advisor of a student named Linda Smith.", "metadata": {}}
{"_id": "gpt3_5195", "text": "\nThis query will select the first and last name of the faculty member who is the advisor of a student named Linda Smith.", "metadata": {}}
{"_id": "gpt3_5196", "text": "\nThis query selects the names of customers who have a balance in their checking account that is higher than the average balance of all checking accounts, and a balance in their savings account that is lower than the average balance of all savings accounts.", "metadata": {}}
{"_id": "gpt3_5197", "text": "\nThis query selects the names of customers who have a balance in their checking account that is greater than the average balance from all checking accounts, and a balance in their savings account that is less than the average balance from all savings accounts.", "metadata": {}}
{"_id": "gpt3_5198", "text": "\nThis query selects the names from the accounts table of customers who have a checking account balance greater than the average balance of all checking accounts, and a savings account balance less than the average balance of all savings accounts.", "metadata": {}}
{"_id": "gpt3_5199", "text": "\nThis statement selects the names of customers who have a balance in their checking account that is greater than the average balance of all checking accounts and a balance in their savings account that is less than the average balance of all savings accounts.", "metadata": {}}
{"_id": "gpt3_5200", "text": "\nThis query selects the name of customers from the accounts table who have a balance greater than the average balance of the checking table and a balance less than the average balance of the savings table.", "metadata": {}}
{"_id": "gpt3_5201", "text": "\nThis query will select all names from the enzyme table that contain the string \"ALA\".", "metadata": {}}
{"_id": "gpt3_5202", "text": "\nThis query will return all names from the enzyme table that contain the string \"ALA\".", "metadata": {}}
{"_id": "gpt3_5203", "text": "\nThis query selects the name of enzymes from a database whose name contains the string \"ALA\".", "metadata": {}}
{"_id": "gpt3_5204", "text": "\nThe SQL query SELECT name FROM enzyme WHERE name LIKE \"%ALA%\" will return the names of all enzymes that contain the substring \"ALA\" in their name.", "metadata": {}}
{"_id": "gpt3_5205", "text": "\nThis query will select the names of all enzymes from the enzyme table that contain the string \"ALA\".", "metadata": {}}
{"_id": "gpt3_5206", "text": "\nThis query returns the total number of records in the VOTING_RECORD table.", "metadata": {}}
{"_id": "gpt3_5207", "text": "\nThis query returns the total number of records in the VOTING_RECORD table.", "metadata": {}}
{"_id": "gpt3_5208", "text": "\nThis query returns the total number of records in the VOTING_RECORD table.", "metadata": {}}
{"_id": "gpt3_5209", "text": "\nThis SQL statement returns the total number of records in the VOTING_RECORD table.", "metadata": {}}
{"_id": "gpt3_5210", "text": "\nThis query will return the total number of records in the VOTING_RECORD table.", "metadata": {}}
{"_id": "gpt3_5211", "text": "\nThis query returns a list of cities that have two airports.", "metadata": {}}
{"_id": "gpt3_5212", "text": "\nThis query will select the city from the airports table and group the results by city, only returning cities that have two airports.", "metadata": {}}
{"_id": "gpt3_5213", "text": "\nThis query selects the cities from the airports table that have two airports, and groups them together.", "metadata": {}}
{"_id": "gpt3_5214", "text": "\nThis query returns a list of all cities that have exactly two airports.", "metadata": {}}
{"_id": "gpt3_5215", "text": "\nThis query will select the cities from the airports table that have exactly two airports associated with them.", "metadata": {}}
{"_id": "gpt3_5216", "text": "\nThis query finds the maximum and minimum grade points for students enrolled in a course in New York City.", "metadata": {}}
{"_id": "gpt3_5217", "text": "\nThis query will return the maximum and minimum grade points earned by students enrolled in courses in NYC.", "metadata": {}}
{"_id": "gpt3_5218", "text": "\nThis query will return the maximum and minimum grade points from the GRADECONVERSION table for all students in the STUDENT table who live in NYC (city_code = \"NYC\").", "metadata": {}}
{"_id": "gpt3_5219", "text": "\nThis query will find the maximum and minimum grade points for all students enrolled in courses in NYC.", "metadata": {}}
{"_id": "gpt3_5220", "text": "\nThis query will select the maximum and minimum grade points of students enrolled in courses in NYC.", "metadata": {}}
{"_id": "gpt3_5221", "text": "\nThis query will return the prices of all products that are not associated with any complaints.", "metadata": {}}
{"_id": "gpt3_5222", "text": "\nThis query will select the product prices from the products table where the product_id does not appear in the complaints table.", "metadata": {}}
{"_id": "gpt3_5223", "text": "\nThis query will select the product price from the products table for all products that are not listed in the complaints table.", "metadata": {}}
{"_id": "gpt3_5224", "text": "\nThis query will select the product prices from the products table for all products that are not included in the complaints table.", "metadata": {}}
{"_id": "gpt3_5225", "text": "\nThis query will return the price of all products that are not associated with any complaints.", "metadata": {}}
{"_id": "gpt3_5226", "text": "\nThis query will return the first year and last year of all parties with themes of either \"Spring\" or \"Technology\".", "metadata": {}}
{"_id": "gpt3_5227", "text": "\nThis query will return the first and last year of all parties with a theme of Spring or Technology.", "metadata": {}}
{"_id": "gpt3_5228", "text": "\nThis query will select the first year and last year of all parties with the theme of either Spring or Technology.", "metadata": {}}
{"_id": "gpt3_5229", "text": "\nThis query will return the first and last year of any parties with the theme of either \"Spring\" or \"Teqnology\".", "metadata": {}}
{"_id": "gpt3_5230", "text": "\nThis query will return the first and last year of any parties with a theme of either Spring or Technology.", "metadata": {}}
{"_id": "gpt3_5231", "text": "\nThis query selects all the countries from the market table and orders them alphabetically in ascending order.", "metadata": {}}
{"_id": "gpt3_5232", "text": "\nThis query retrieves all the countries from the market table and orders them in alphabetical order.", "metadata": {}}
{"_id": "gpt3_5233", "text": "\nThis query will return a list of all countries from the market table, ordered in ascending alphabetical order.", "metadata": {}}
{"_id": "gpt3_5234", "text": "\nThis statement will select all countries from the market table and order them in ascending order alphabetically.", "metadata": {}}
{"_id": "gpt3_5235", "text": "\nThis query will select all countries from the market table and order them in ascending alphabetical order.", "metadata": {}}
{"_id": "gpt3_5236", "text": "\nThis query finds the organisation with the most project outcomes and returns the organisation ID and the total number of project outcomes associated with it.", "metadata": {}}
{"_id": "gpt3_5237", "text": "\nThis query returns the organisation_id with the most project outcomes, along with the total number of project outcomes associated with that organisation.", "metadata": {}}
{"_id": "gpt3_5238", "text": "\nThis query finds the organisation with the most project outcomes and returns the organisation ID and the number of outcomes.", "metadata": {}}
{"_id": "gpt3_5239", "text": "\nThis query returns the organisation_id with the most number of project outcomes, along with the count of project outcomes for that organisation_id.", "metadata": {}}
{"_id": "gpt3_5240", "text": "\nThis query returns the organisation ID and the total number of project outcomes associated with it, sorted in descending order and with the highest count at the top.", "metadata": {}}
{"_id": "gpt3_5241", "text": "\nThis SQL statement selects the employee ID, first name, and last name from the employees table where the department ID is present in the table for employees whose first name contains the letter 'T'.", "metadata": {}}
{"_id": "gpt3_5242", "text": "\nThis query selects employee_id, first_name, and last_name from the employees table for all employees who are in the same department as employees whose first name begins with the letter 'T'.", "metadata": {}}
{"_id": "gpt3_5243", "text": "\nThis query selects the employee_id, first_name, and last_name of employees from departments which have an employee whose first name contains the letter 'T'.", "metadata": {}}
{"_id": "gpt3_5244", "text": "\nThis query selects the employee ID, first name, and last name from the employees table for all employees who work in the same department as an employee with a first name containing the letter 'T'.", "metadata": {}}
{"_id": "gpt3_5245", "text": "\nThis query selects the employee ID, first name, and last name of employees who work in a department with an employee whose first name contains the letter \"T\".", "metadata": {}}
{"_id": "gpt3_5246", "text": "\nThis query will select the title of all albums by artists whose name contains the string \"Led\".", "metadata": {}}
{"_id": "gpt3_5247", "text": "\nThis query will select the title of all albums from an artist with a name containing \"Led\".", "metadata": {}}
{"_id": "gpt3_5248", "text": "\nThis query will select the title of all albums by artists whose name contains the string \"Led\".", "metadata": {}}
{"_id": "gpt3_5249", "text": "\nThis statement will select the title of all albums from the artists table whose name contains the string 'Led'.", "metadata": {}}
{"_id": "gpt3_5250", "text": "\nThis query selects the title of albums from the albums table that are associated with an artist with a name that contains \"Led\" from the artists table.", "metadata": {}}
{"_id": "gpt3_5251", "text": "\nThis query returns the count of budget entries from the budget table where the budgeted amount is greater than 3000 and the year is less than or equal to 2001.", "metadata": {}}
{"_id": "gpt3_5252", "text": "\nThis query returns the number of records in the budget table where the budgeted amount is greater than 3000 and the year is less than or equal to 2001.", "metadata": {}}
{"_id": "gpt3_5253", "text": "\nThis query returns the number of budget records where the budgeted amount is greater than 3000 and the year is less than or equal to 2001.", "metadata": {}}
{"_id": "gpt3_5254", "text": "\nThis query will return the number of records in the budget table with a budgeted amount greater than 3000 and a year less than or equal to 2001.", "metadata": {}}
{"_id": "gpt3_5255", "text": "\nThis query returns the total number of budgets that have a budgeted amount greater than 3000 and a year of 2001 or earlier.", "metadata": {}}
{"_id": "gpt3_5256", "text": "\nThis query returns the total number of students who have Advisor 1121.", "metadata": {}}
{"_id": "gpt3_5257", "text": "\nThis query counts the number of students who have an advisor with ID 1121.", "metadata": {}}
{"_id": "gpt3_5258", "text": "\nThis query returns the total number of students who have Advisor 1121.", "metadata": {}}
{"_id": "gpt3_5259", "text": "\nThis query will count the number of students who have an advisor with an ID of 1121.", "metadata": {}}
{"_id": "gpt3_5260", "text": "\nThis query would count the number of students who have Advisor 1121.", "metadata": {}}
{"_id": "gpt3_5261", "text": "\nThis query will return the total amount of lesson time for the customer Rylan Goodwin.", "metadata": {}}
{"_id": "gpt3_5262", "text": "\nThis query will calculate the total lesson time for all lessons taken by Rylan Goodwin.", "metadata": {}}
{"_id": "gpt3_5263", "text": "\nThis query will return the total amount of lesson time for all lessons taken by the customer Rylan Goodwin.", "metadata": {}}
{"_id": "gpt3_5264", "text": "\nThis query will return the total amount of lesson time for all lessons taken by Rylan Goodwin.", "metadata": {}}
{"_id": "gpt3_5265", "text": "\nThis query will return the sum of the lesson times for all lessons taken by Rylan Goodwin.", "metadata": {}}
{"_id": "gpt3_5266", "text": "\nThis query will return the total number of bands in the table.", "metadata": {}}
{"_id": "gpt3_5267", "text": "\nThis query will return the total number of records in the Band table.", "metadata": {}}
{"_id": "gpt3_5268", "text": "\nThis query returns the total number of entries in the Band table.", "metadata": {}}
{"_id": "gpt3_5269", "text": "\nThis query will return the total number of records in the table called Band.", "metadata": {}}
{"_id": "gpt3_5270", "text": "\nThis query returns the total number of records in the Band table.", "metadata": {}}
{"_id": "gpt3_5271", "text": "\nThis query will return the company and main industry of all companies that are not headquartered in the United States.", "metadata": {}}
{"_id": "gpt3_5272", "text": "\nThis query will select the company name and main industry from companies that are not headquartered in the USA.", "metadata": {}}
{"_id": "gpt3_5273", "text": "\nThis query will return the company name and main industry of all companies whose headquarters are not located in the USA.", "metadata": {}}
{"_id": "gpt3_5274", "text": "\nThis query will return a list of companies and their main industry from companies that are not based in the USA.", "metadata": {}}
{"_id": "gpt3_5275", "text": "\nThis query will select the company and main industry from companies whose headquarters are not located in the USA.", "metadata": {}}
{"_id": "gpt3_5276", "text": "\nThis query selects the statement ID and statement details from two tables, Accounts and Statements, joining them by the statement ID. The query then groups the results by the statement ID and orders them by the count of the statement ID in descending order, limiting", "metadata": {}}
{"_id": "gpt3_5277", "text": "\nThis query will select the statement ID and statement details from the Accounts and Statements tables, joining them together on the statement ID. It will then group the results by statement ID and order them by the count of the statement ID in descending order, and", "metadata": {}}
{"_id": "gpt3_5278", "text": "\nThis statement retrieves the statement_id and statement_details associated with the most frequently occurring statement_id from the Accounts and Statements tables, ordered by count in descending order, and limited to one result.", "metadata": {}}
{"_id": "gpt3_5279", "text": "\nThis query selects the statement ID and details from the Accounts and Statements tables, grouping the results by statement ID and ordering them by count in descending order. The query then limits the results to the top statement.", "metadata": {}}
{"_id": "gpt3_5280", "text": "\nThis query selects the statement ID and statement details from two tables (Accounts and Statements) where the statement ID from the Accounts table matches the statement ID from the Statements table. It then groups the results by the statement ID from the Accounts table and", "metadata": {}}
{"_id": "gpt3_5281", "text": "\nThis query will return the total number of records in the performance table.", "metadata": {}}
{"_id": "gpt3_5282", "text": "\nThis query returns the number of rows in the performance table.", "metadata": {}}
{"_id": "gpt3_5283", "text": "\nThis query returns the total number of records in the performance table.", "metadata": {}}
{"_id": "gpt3_5284", "text": "\nThis query will return the total number of records in the performance table.", "metadata": {}}
{"_id": "gpt3_5285", "text": "\nThis query returns the total number of rows in the performance table.", "metadata": {}}
{"_id": "gpt3_5286", "text": "\nThis query will return a list of industries and the number of companies in each industry.", "metadata": {}}
{"_id": "gpt3_5287", "text": "\nThis query returns a count of the number of companies in each industry.", "metadata": {}}
{"_id": "gpt3_5288", "text": "\nThis query will return a count of companies in each industry, grouped by industry.", "metadata": {}}
{"_id": "gpt3_5289", "text": "\nThis query will return the total number of companies in each industry. The results will be a list of industries with the corresponding number of companies in each.", "metadata": {}}
{"_id": "gpt3_5290", "text": "\nThis query will return a count of each industry in the Companies table, grouped by the Industry column.", "metadata": {}}
{"_id": "gpt3_5291", "text": "\nThis query will select the customer name of the customer who placed the order with the highest quantity.", "metadata": {}}
{"_id": "gpt3_5292", "text": "\nThis query selects the customer name of the customer who placed the order with the highest quantity of items.", "metadata": {}}
{"_id": "gpt3_5293", "text": "\nThis SQL statement selects the customer name from the customers table (t1) who made the order with the highest order quantity from the order_items table (t3). It joins the customers table (t1) to the customer_orders table", "metadata": {}}
{"_id": "gpt3_5294", "text": "\nThis query selects the customer name from the customers table who placed the order with the highest order quantity.", "metadata": {}}
{"_id": "gpt3_5295", "text": "\nThis query selects the customer name from the customers table who has placed the order with the highest order quantity from the order_items table.", "metadata": {}}
{"_id": "gpt3_5296", "text": "\nThis query will return the sum of all credits for each department code found in the course and class tables. The result will be a list of department codes with the sum of credits associated with each code.", "metadata": {}}
{"_id": "gpt3_5297", "text": "\nThis query will calculate the sum of credits for each department code in the course table, by joining the course and class tables and grouping by department code.", "metadata": {}}
{"_id": "gpt3_5298", "text": "\nThis query will calculate the sum of the credits for each department code in the course table, based on the classes associated with each course.", "metadata": {}}
{"_id": "gpt3_5299", "text": "\nThis query will return the sum of credits for each department code from the course and class tables. It does this by joining the course and class tables on the course code, then grouping the results by department code and summing the credits.", "metadata": {}}
{"_id": "gpt3_5300", "text": "\nThis query will return the sum of the credits for each course in a given department, grouped by department code.", "metadata": {}}
{"_id": "gpt3_5301", "text": "\nThis query will select the name of any person from the people table whose height is greater than 200 cm or less than 190 cm.", "metadata": {}}
{"_id": "gpt3_5302", "text": "\nThis query will select the name of any people from the table whose height is either greater than 200 or less than 190.", "metadata": {}}
{"_id": "gpt3_5303", "text": "\nThis query will return the names of people in a table whose height is greater than 200 cm or less than 190 cm.", "metadata": {}}
{"_id": "gpt3_5304", "text": "\nThis query will select the names of people from a table whose height is greater than 200 cm or less than 190 cm.", "metadata": {}}
{"_id": "gpt3_5305", "text": "\nThis query will select the names of people from the people table who have a height greater than 200 cm or less than 190 cm.", "metadata": {}}
{"_id": "gpt3_5306", "text": "\nThis query will return the number of products that have a product category code of \"Spices\" and a typical buying price greater than 1000.", "metadata": {}}
{"_id": "gpt3_5307", "text": "\nThis query returns the total number of products in the \"Spices\" category with a typical buying price greater than 1000.", "metadata": {}}
{"_id": "gpt3_5308", "text": "\nThis query will return the total number of products in the \"Spices\" product category with a typical buying price greater than 1000.", "metadata": {}}
{"_id": "gpt3_5309", "text": "\nThis query will count the number of products in the products table with a product category code of \"Spices\" and a typical buying price greater than 1000.", "metadata": {}}
{"_id": "gpt3_5310", "text": "\nThis query will count the number of products in the products table where the product category code is \"Spices\" and the typical buying price is greater than 1000.", "metadata": {}}
{"_id": "gpt3_5311", "text": "\nThe query returns the highest Amount_Settled and Amount_Claimed from the Claims table, ordered by Amount_Claimed in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_5312", "text": "\nThis query returns the highest amount of money settled and claimed from the Claims table, ordered by the amount claimed in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_5313", "text": "\nThis query returns the largest amount settled and claimed from the Claims table, ordered by amount claimed in descending order and limited to the top result.", "metadata": {}}
{"_id": "gpt3_5314", "text": "\nThe query will return the highest amount settled and the corresponding amount claimed from the Claims table, ordered by the amount claimed in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_5315", "text": "\nThis query returns the highest Amount_Settled and Amount_Claimed from the Claims table, ordered by Amount_Claimed in descending order and limited to the first record.", "metadata": {}}
{"_id": "gpt3_5316", "text": "\nThis query will return the minimum age, average age, and maximum age of students in a table called Student.", "metadata": {}}
{"_id": "gpt3_5317", "text": "\nThis query will select the minimum, average, and maximum age of all students in the Student table.", "metadata": {}}
{"_id": "gpt3_5318", "text": "\nThis query will select the minimum, average, and maximum age from the Student table.", "metadata": {}}
{"_id": "gpt3_5319", "text": "\nThis query will return the minimum age, average age, and maximum age of all students from the Student table.", "metadata": {}}
{"_id": "gpt3_5320", "text": "\nThis query will return the minimum, average, and maximum ages of all students in the Student table.", "metadata": {}}
{"_id": "gpt3_5321", "text": "\nThis statement will select the highest amount from the payment table and return the result.", "metadata": {}}
{"_id": "gpt3_5322", "text": "\nThis query returns the highest amount from the payment table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_5323", "text": "\nThis statement will select the highest amount from the payment table, and limit the results to one row.", "metadata": {}}
{"_id": "gpt3_5324", "text": "\nThis query will select the highest amount from the payment table and return it.", "metadata": {}}
{"_id": "gpt3_5325", "text": "\nThis query will select the highest amount from the payment table and return it as the result.", "metadata": {}}
{"_id": "gpt3_5326", "text": "\nThis query returns the name and location of all cinemas with a capacity greater than the average capacity of all cinemas.", "metadata": {}}
{"_id": "gpt3_5327", "text": "\nThis query selects the name and location of all cinemas with a capacity greater than the average capacity of all cinemas.", "metadata": {}}
{"_id": "gpt3_5328", "text": "\nThis query will select the name and location of all cinemas with a capacity greater than the average capacity of all cinemas.", "metadata": {}}
{"_id": "gpt3_5329", "text": "\nThis query will select the name and location of all cinemas with a capacity greater than the average capacity of all cinemas.", "metadata": {}}
{"_id": "gpt3_5330", "text": "\nThis query will select the name and location of all cinemas with a capacity greater than the average capacity of all cinemas.", "metadata": {}}
{"_id": "gpt3_5331", "text": "\nThis query will select the name of the tracks from the tracks, invoice_lines, invoices, and customers tables that were purchased by the customer with the first name \"Daan\" and last name \"Peeters\".", "metadata": {}}
{"_id": "gpt3_5332", "text": "\nThis query selects the name of the tracks from the tracks table that are associated with the customer Daan Peeters. It does this by joining the tracks, invoice_lines, invoices, and customers tables on the appropriate foreign key relationships.", "metadata": {}}
{"_id": "gpt3_5333", "text": "\nThis SQL query will select the name of all tracks purchased by the customer with the first name \"Daan\" and the last name \"Peeters\".", "metadata": {}}
{"_id": "gpt3_5334", "text": "\nThis query selects the name of all tracks purchased by the customer with the first name \"Daan\" and last name \"Peeters\".", "metadata": {}}
{"_id": "gpt3_5335", "text": "\nThis query will select the name of all tracks purchased by the customer with the first name \"Daan\" and last name \"Peeters\" from the tracks, invoice_lines, invoices, and customers tables.", "metadata": {}}
{"_id": "gpt3_5336", "text": "\nThis query will return the total number of distinct languages used in the film table.", "metadata": {}}
{"_id": "gpt3_5337", "text": "\nThis query returns the number of distinct language_id values in the film table.", "metadata": {}}
{"_id": "gpt3_5338", "text": "\nThis query returns the number of distinct language_id values in the film table.", "metadata": {}}
{"_id": "gpt3_5339", "text": "\nThis query returns the total number of distinct language_ids in the film table.", "metadata": {}}
{"_id": "gpt3_5340", "text": "\nThis query returns the number of distinct language_id values in the film table.", "metadata": {}}
{"_id": "gpt3_5341", "text": "\nThis query will return the maximum active to date for the customer \"Tillman Ernser\" from the customers and customer_contact_channels tables.", "metadata": {}}
{"_id": "gpt3_5342", "text": "\nThis query will return the maximum active to date of the customer contact channels associated with the customer \"Tillman Ernser\".", "metadata": {}}
{"_id": "gpt3_5343", "text": "\nThis query returns the maximum active_to_date of customer Tillman Ernser from the customer_contact_channels table.", "metadata": {}}
{"_id": "gpt3_5344", "text": "\nThis query returns the maximum active to date value for the customer Tillman Ernser from the customer_contact_channels table.", "metadata": {}}
{"_id": "gpt3_5345", "text": "\nThis query will return the maximum active_to_date from the customer_contact_channels table for the customer named Tillman Ernser.", "metadata": {}}
{"_id": "gpt3_5346", "text": "\nThis query will return the name of the most expensive item in the catalog contents table, ordered by price in descending order.", "metadata": {}}
{"_id": "gpt3_5347", "text": "\nThis query will select the catalog entry name with the highest price from the catalog contents table and display it.", "metadata": {}}
{"_id": "gpt3_5348", "text": "\nThis query will select the name of the most expensive item in the catalog_contents table, ordered by price in descending order, and limit the result to one entry.", "metadata": {}}
{"_id": "gpt3_5349", "text": "\nThis query will select the name of the most expensive item in the catalog and display it.", "metadata": {}}
{"_id": "gpt3_5350", "text": "\nThis query will select the catalog entry name with the highest price from the catalog contents table and return it.", "metadata": {}}
{"_id": "gpt3_5351", "text": "\nThe query will return a list of course names from the COURSE table, ordered by the number of credits associated with each course.", "metadata": {}}
{"_id": "gpt3_5352", "text": "\nThis query will select the names of all courses from the COURSE table and order them by the number of credits associated with each course.", "metadata": {}}
{"_id": "gpt3_5353", "text": "\nThis query will select the name of all courses from the COURSE table and order them by their credits in ascending order.", "metadata": {}}
{"_id": "gpt3_5354", "text": "\nThis query will return the names of all courses in the COURSE table, sorted in ascending order by the number of credits associated with each course.", "metadata": {}}
{"_id": "gpt3_5355", "text": "\nThis query retrieves the names of all courses from the COURSE table, sorted in ascending order by the number of credits for each course.", "metadata": {}}
{"_id": "gpt3_5356", "text": "\nThis query counts the number of students who are 18 years old or older and who do not have food or animal allergies.", "metadata": {}}
{"_id": "gpt3_5357", "text": "\nThis query counts the number of students who are over 18 years old and do not have food or animal allergies.", "metadata": {}}
{"_id": "gpt3_5358", "text": "\nThis query will count the number of students over the age of 18 who do not have food or animal allergies.", "metadata": {}}
{"_id": "gpt3_5359", "text": "\nThis query will count the number of students who are over 18 years old and who do not have food or animal allergies.", "metadata": {}}
{"_id": "gpt3_5360", "text": "\nThis query returns the number of students who are over 18 and do not have a food or animal allergy.", "metadata": {}}
{"_id": "gpt3_5361", "text": "\nThis query will select the i_id from the advisor table for all advisors who have a student in the History department.", "metadata": {}}
{"_id": "gpt3_5362", "text": "\nThis query returns the ID of any advisor who is currently assigned to a student in the History department.", "metadata": {}}
{"_id": "gpt3_5363", "text": "\nThis query retrieves the i_id of all advisors associated with students in the History department.", "metadata": {}}
{"_id": "gpt3_5364", "text": "\nThis query will return the i_id values from the advisor table for all advisors associated with students in the History department.", "metadata": {}}
{"_id": "gpt3_5365", "text": "\nThis query will return the i_id of all advisors from the advisor table who are associated with students from the student table in the 'History' department.", "metadata": {}}
{"_id": "gpt3_5366", "text": "\nThis query counts the number of course registrations for each student by joining the students and student_course_registrations tables and grouping by the student_id.", "metadata": {}}
{"_id": "gpt3_5367", "text": "\nThis query counts the number of courses each student is registered for. It does this by joining the students table (T1) and the student_course_registrations table (T2) on the student_id column, then grouping the", "metadata": {}}
{"_id": "gpt3_5368", "text": "\nThis query counts the number of course registrations for each student. It joins the students and student_course_registrations tables on the student_id column and groups the results by student_id.", "metadata": {}}
{"_id": "gpt3_5369", "text": "\nThis query counts the number of student course registrations for each student.", "metadata": {}}
{"_id": "gpt3_5370", "text": "\nThis statement retrieves the student_id and the number of courses each student has registered for. It does this by joining the students and student_course_registrations tables on the student_id column and then grouping the results by student_", "metadata": {}}
{"_id": "gpt3_5371", "text": "\nThis query returns the customer names of customers who have both completed and partially completed orders.", "metadata": {}}
{"_id": "gpt3_5372", "text": "\nThis query selects the customer names from the customers and customer_orders tables who have both completed and partially completed orders.", "metadata": {}}
{"_id": "gpt3_5373", "text": "\nThis query selects the customer names from the customers and customer_orders tables that have both completed and partially completed orders.", "metadata": {}}
{"_id": "gpt3_5374", "text": "\nThis query selects the customer names from the customers and customer_orders tables where the order status code is either Completed or Part.", "metadata": {}}
{"_id": "gpt3_5375", "text": "\nThis query selects the customer names of customers who have both completed orders and orders that are partially completed.", "metadata": {}}
{"_id": "gpt3_5376", "text": "\nThis SQL query will return the names of all programs in an alphabetical order, sorted by their launch date.", "metadata": {}}
{"_id": "gpt3_5377", "text": "\nThis query will return a list of the names of all programs in a database, sorted in ascending order by launch date.", "metadata": {}}
{"_id": "gpt3_5378", "text": "\nThis query will return a list of program names from the program table, sorted in order of launch date.", "metadata": {}}
{"_id": "gpt3_5379", "text": "\nThis query will select the name of all programs from a table and order them by launch date.", "metadata": {}}
{"_id": "gpt3_5380", "text": "\nThe query will return a list of all the names of programs in the database, sorted in ascending order by their launch date.", "metadata": {}}
{"_id": "gpt3_5381", "text": "\nThe query will return the product category code and typical buying price for the product \"cumin\" from the products table.", "metadata": {}}
{"_id": "gpt3_5382", "text": "\nThe query would return the product category code and typical buying price of the product \"cumin\" from the products table.", "metadata": {}}
{"_id": "gpt3_5383", "text": "\nThe query would return the product category code and typical buying price for the product \"cumin\" from the products table.", "metadata": {}}
{"_id": "gpt3_5384", "text": "\nThe query will return the product category code and typical buying price of the product \"cumin\".", "metadata": {}}
{"_id": "gpt3_5385", "text": "\nThe query will return the product category code and typical buying price of the product \"cumin\" from the products table.", "metadata": {}}
{"_id": "gpt3_5386", "text": "\nThis query will return the number of documents for each document type code. For example, it might return something like:\n\nDocument Type Code | Count\n-------------------|-------\nABC                | 10\nXYZ                | 20\n...               ", "metadata": {}}
{"_id": "gpt3_5387", "text": "\nThis query will return a list of document type codes along with the count of documents for each document type code.", "metadata": {}}
{"_id": "gpt3_5388", "text": "\nThis query will return a list of document type codes and the count of documents associated with each code.", "metadata": {}}
{"_id": "gpt3_5389", "text": "\nThis query will return the document type code and the count of documents associated with each code.", "metadata": {}}
{"_id": "gpt3_5390", "text": "\nThis query will return a count of the number of documents for each document type code.", "metadata": {}}
{"_id": "gpt3_5391", "text": "\nThis query selects the location from gas stations that are associated with companies with a market value greater than 100.", "metadata": {}}
{"_id": "gpt3_5392", "text": "\nThis query will select the location from the gas station table for all gas stations associated with a company that has a market value greater than 100.", "metadata": {}}
{"_id": "gpt3_5393", "text": "\nThis query returns the location of all gas stations that are associated with a company with a market value greater than 100.", "metadata": {}}
{"_id": "gpt3_5394", "text": "\nThis query retrieves the location of any gas station associated with a company with a market value greater than 100.", "metadata": {}}
{"_id": "gpt3_5395", "text": "\nThis query selects the location of all gas stations that are associated with a company with a market value greater than 100.", "metadata": {}}
{"_id": "gpt3_5396", "text": "\nThis query retrieves the total points of the youngest gymnast from the gymnast and people tables, ordered by age in ascending order, and limited to one result.", "metadata": {}}
{"_id": "gpt3_5397", "text": "\nThis query selects the total points of the youngest gymnast from the gymnast and people tables, ordered by age.", "metadata": {}}
{"_id": "gpt3_5398", "text": "\nThis query retrieves the total points of the youngest gymnast from the gymnast and people tables, ordered by age in ascending order.", "metadata": {}}
{"_id": "gpt3_5399", "text": "\nThis query will select the total points of the gymnast with the lowest age from the gymnast and people tables and order the results in ascending order.", "metadata": {}}
{"_id": "gpt3_5400", "text": "\nThis query will select the total points of the gymnast with the lowest age, ordered by age in ascending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_5401", "text": "\nThis query retrieves the names of people and the companies they have worked for, ordered by the year they have worked for the respective company.", "metadata": {}}
{"_id": "gpt3_5402", "text": "\nThis query selects the name of the company and the name of the person from the employment, people, and company tables and orders the results by the year the person was working.", "metadata": {}}
{"_id": "gpt3_5403", "text": "\nThis query is selecting the name of the people and the name of the company from the employment, people and company tables and ordering the results by the year the people have been working.", "metadata": {}}
{"_id": "gpt3_5404", "text": "\nThis query selects the name of the company and the name of the person from the employment, people, and company tables, ordered by the year the person was working.", "metadata": {}}
{"_id": "gpt3_5405", "text": "\nThis query retrieves the name of a person and the name of the company they worked for, in order of the year they worked for the company.", "metadata": {}}
{"_id": "gpt3_5406", "text": "\nThis query selects the architect with the highest number of mills, displaying the id, name, and nationality of the architect. It does this by joining the architect and mill tables on the architect_id, grouping by the architect id, and ordering by", "metadata": {}}
{"_id": "gpt3_5407", "text": "\nThis query selects the architect with the most mills, by selecting the architect's ID, name, and nationality, joining the architect and mill tables, grouping by the architect's ID, and ordering the results by the count of mills in descending order,", "metadata": {}}
{"_id": "gpt3_5408", "text": "\nThis query will select the architect with the highest number of mills, as indicated by the count(*). It will return the ID, name, and nationality of the architect, and order the results by the number of mills they have built.", "metadata": {}}
{"_id": "gpt3_5409", "text": "\nThis query selects the architect with the highest number of mills, based on the architect_id in the mill table. It returns the id, name, and nationality of the architect, and orders the results by count of mills in descending order, limiting", "metadata": {}}
{"_id": "gpt3_5410", "text": "\nThis query selects the architect with the most associated mills, displaying their ID, name and nationality. It does so by joining the architect and mill tables, grouping by the architect's ID and ordering by the count of associated mills in descending order, then", "metadata": {}}
{"_id": "gpt3_5411", "text": "\nThis query will return all location names from the LOCATIONS table that contain the word \"film\".", "metadata": {}}
{"_id": "gpt3_5412", "text": "\nThis query will return all locations with the word \"film\" in the name from the LOCATIONS table.", "metadata": {}}
{"_id": "gpt3_5413", "text": "\nThis query will return all location names from the LOCATIONS table that contain the word \"film\".", "metadata": {}}
{"_id": "gpt3_5414", "text": "\nThis query will return all Location_Name entries from the LOCATIONS table that contain the word \"film\".", "metadata": {}}
{"_id": "gpt3_5415", "text": "\nThis query will return all locations from the LOCATIONS table whose name contains the word \"film\".", "metadata": {}}
{"_id": "gpt3_5416", "text": "\nThis query will return the average, minimum, and maximum ticket prices from exhibitions that took place before 2009.", "metadata": {}}
{"_id": "gpt3_5417", "text": "\nThis query returns the average, minimum, and maximum ticket prices for exhibitions that took place before 2009.", "metadata": {}}
{"_id": "gpt3_5418", "text": "\nThis query will calculate the average, minimum, and maximum ticket prices for exhibitions that took place before 2009.", "metadata": {}}
{"_id": "gpt3_5419", "text": "\nThis query returns the average, minimum, and maximum ticket prices for exhibitions that took place before 2009.", "metadata": {}}
{"_id": "gpt3_5420", "text": "\nThis query returns the average ticket price, the minimum ticket price, and the maximum ticket price for exhibitions that took place before 2009.", "metadata": {}}
{"_id": "gpt3_5421", "text": "\nThis query will return the names of all journalists who have not written any news reports.", "metadata": {}}
{"_id": "gpt3_5422", "text": "\nThis query will return the names of all journalists who have not written any news reports.", "metadata": {}}
{"_id": "gpt3_5423", "text": "\nThis query will return a list of names of journalists who have not written any news reports.", "metadata": {}}
{"_id": "gpt3_5424", "text": "\nThis query will return the names of journalists who have not written any news reports.", "metadata": {}}
{"_id": "gpt3_5425", "text": "\nThis query will return a list of all journalists who have not written any news reports.", "metadata": {}}
{"_id": "gpt3_5426", "text": "\nThis query returns the total number of rows in the appointment table.", "metadata": {}}
{"_id": "gpt3_5427", "text": "\nThis query returns the total number of rows in the appointment table.", "metadata": {}}
{"_id": "gpt3_5428", "text": "\nThis query returns the total number of rows in the appointment table.", "metadata": {}}
{"_id": "gpt3_5429", "text": "\nThis query would count the total number of rows in the appointment table.", "metadata": {}}
{"_id": "gpt3_5430", "text": "\nThis query counts the total number of rows in the appointment table.", "metadata": {}}
{"_id": "gpt3_5431", "text": "\nThis query will count the number of records in the csu_fees table where the campusfee is greater than the average campus fee.", "metadata": {}}
{"_id": "gpt3_5432", "text": "\nThis query will return the number of rows in the csu_fees table where the campusfee is greater than the average campusfee for all rows in the table.", "metadata": {}}
{"_id": "gpt3_5433", "text": "\nThis query will count the number of records in the csu_fees table where the campusfee is greater than the average campusfee for all records.", "metadata": {}}
{"_id": "gpt3_5434", "text": "\nThis query is counting the number of records in the csu_fees table that have a campusfee value greater than the average campusfee value of all records in the table.", "metadata": {}}
{"_id": "gpt3_5435", "text": "\nThis query returns the total number of records in the csu_fees table where the campusfee is greater than the average campusfee.", "metadata": {}}
{"_id": "gpt3_5436", "text": "\nThis query returns the highest accuracy percentage from a basketball match, ordered from highest to lowest.", "metadata": {}}
{"_id": "gpt3_5437", "text": "\nThe above query will return the highest accuracy percentage from the basketball_match table, ordered in descending order.", "metadata": {}}
{"_id": "gpt3_5438", "text": "\nThis query retrieves the highest accuracy percentage from the basketball_match table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_5439", "text": "\nThis query will return the highest accuracy percentage from a basketball match, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_5440", "text": "\nThe query will return the highest accuracy percentage from a basketball match, ordered in descending order.", "metadata": {}}
{"_id": "gpt3_5441", "text": "\nThis query will return the total number of graduates from San Francisco State University in 2004.", "metadata": {}}
{"_id": "gpt3_5442", "text": "\nThis query will return the total number of graduates from San Francisco State University in 2004.", "metadata": {}}
{"_id": "gpt3_5443", "text": "\nThis query will return the total number of graduates from San Francisco State University in 2004.", "metadata": {}}
{"_id": "gpt3_5444", "text": "\nThe query returns the total number of graduates from San Francisco State University in 2004.", "metadata": {}}
{"_id": "gpt3_5445", "text": "\nThe query will return the sum of all graduates from San Francisco State University in 2004.", "metadata": {}}
{"_id": "gpt3_5446", "text": "\nThis query will return all project details from the Projects table where the project_id is not present in the Project_outcomes table.", "metadata": {}}
{"_id": "gpt3_5447", "text": "\nThis query will return all project details from the Projects table where the project_id is not found in the Project_outcomes table.", "metadata": {}}
{"_id": "gpt3_5448", "text": "\nThis query will select all project details from the Projects table where the project_id does not exist in the Project_outcomes table. This will return all project details from the Projects table that do not have any associated outcomes in the Project_out", "metadata": {}}
{"_id": "gpt3_5449", "text": "\nThis query will select all project details from the Projects table where the project_id does not exist in the Project_outcomes table. This will effectively select all projects that have not yet had outcomes recorded.", "metadata": {}}
{"_id": "gpt3_5450", "text": "\nThis query will return all project details from the Projects table that do not have any associated project outcomes in the Project_outcomes table.", "metadata": {}}
{"_id": "gpt3_5451", "text": "\nThis query selects the name, sex, and the lowest oppose rate of all candidates grouped by their sex.", "metadata": {}}
{"_id": "gpt3_5452", "text": "\nThis query will select the name, sex, and minimum oppose rate of each candidate from the people and candidate tables. It will group the results by sex.", "metadata": {}}
{"_id": "gpt3_5453", "text": "\nThis query returns the name, sex, and minimum oppose rate of all people in the candidate table, grouped by their sex.", "metadata": {}}
{"_id": "gpt3_5454", "text": "\nThis query returns the name, sex, and lowest opposition rate for each candidate in the people and candidate tables. The results are grouped by sex.", "metadata": {}}
{"_id": "gpt3_5455", "text": "\nThis query will select the name, sex, and minimum oppose rate from the people and candidate tables, grouped by the sex of the people.", "metadata": {}}
{"_id": "gpt3_5456", "text": "\nThis query retrieves the rank, company, and market value of companies in the banking industry, sorted by sales billion and profits billion.", "metadata": {}}
{"_id": "gpt3_5457", "text": "\nThis query will return a list of companies from the Banking industry, sorted by sales and profits, along with their rank and market value.", "metadata": {}}
{"_id": "gpt3_5458", "text": "\nThis query will return the rank, company name, and market value of all companies in the Banking industry, sorted by sales in billions and profits in billions.", "metadata": {}}
{"_id": "gpt3_5459", "text": "\nThis query will return the rank, company name, and market value of banking companies, ordered by sales billion and profits billion.", "metadata": {}}
{"_id": "gpt3_5460", "text": "\nThis query will return a list of companies in the Banking industry, sorted by sales and profits in billions, along with their rank and market value.", "metadata": {}}
{"_id": "gpt3_5461", "text": "\nThis query retrieves the Order_Date column from the BOOKINGS table.", "metadata": {}}
{"_id": "gpt3_5462", "text": "\nThe query will return the order dates for all bookings in the BOOKINGS table.", "metadata": {}}
{"_id": "gpt3_5463", "text": "\nThe SELECT Order_Date FROM BOOKINGS statement is used to retrieve the date of any bookings that have been made.", "metadata": {}}
{"_id": "gpt3_5464", "text": "\nThe query SELECT Order_Date FROM BOOKINGS will return all the order dates from the BOOKINGS table.", "metadata": {}}
{"_id": "gpt3_5465", "text": "\nThe SELECT Order_Date FROM BOOKINGS statement will retrieve the order dates of all bookings from a database.", "metadata": {}}
{"_id": "gpt3_5466", "text": "\nThis query returns the earliest issue date of the volume that was on the top of the chart for the longest period of time.", "metadata": {}}
{"_id": "gpt3_5467", "text": "\nThis query will return the earliest Issue_Date from the volume table, ordered by Weeks_on_Top in ascending order, with a limit of one result.", "metadata": {}}
{"_id": "gpt3_5468", "text": "\nThis query returns the earliest Issue_Date from the volume table, ordered by the Weeks_on_Top column in ascending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_5469", "text": "\nThe query returns the earliest Issue_Date from the volume table, ordered by Weeks_on_Top in ascending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_5470", "text": "\nThis query will return the date of the earliest issue of the volume which was on the top of the charts for the longest period of time.", "metadata": {}}
{"_id": "gpt3_5471", "text": "\nThis query will return the description of the marketing region named \"China\".", "metadata": {}}
{"_id": "gpt3_5472", "text": "\nThis query will return the description of the marketing region named \"China\".", "metadata": {}}
{"_id": "gpt3_5473", "text": "\nThis query would return the description of the Marketing Region named \"China\".", "metadata": {}}
{"_id": "gpt3_5474", "text": "\nThe query will return the description of the marketing region \"China\".", "metadata": {}}
{"_id": "gpt3_5475", "text": "\nThis query will return the description of the marketing region named \"China\".", "metadata": {}}
{"_id": "gpt3_5476", "text": "\nThis query selects the first and last name of the 5 most recently invoiced customers from the customers and invoices tables.", "metadata": {}}
{"_id": "gpt3_5477", "text": "\nThis query will select the first and last name of the five most recent customers who have made an invoice, ordered by the most recent invoice date.", "metadata": {}}
{"_id": "gpt3_5478", "text": "\nThis query selects the first and last name of the five most recent customers who have made an invoice, by joining the customers and invoices tables and ordering the invoices by date in descending order.", "metadata": {}}
{"_id": "gpt3_5479", "text": "\nThis query selects the first and last names of the five most recently invoiced customers from the customers and invoices tables.", "metadata": {}}
{"_id": "gpt3_5480", "text": "\nThis SQL query selects the first and last names of the 5 most recent customers from the customers and invoices tables, ordered by the invoice date.", "metadata": {}}
{"_id": "gpt3_5481", "text": "\nThis query will return the names of all stations from the station table that have a latitude less than 37.5.", "metadata": {}}
{"_id": "gpt3_5482", "text": "\nThis query will return the names of all stations with a latitude below 37.5 degrees.", "metadata": {}}
{"_id": "gpt3_5483", "text": "\nThis query will return the names of all stations that have a latitude less than 37.5.", "metadata": {}}
{"_id": "gpt3_5484", "text": "\nThis query will select the name of all stations from the station table which have a latitude less than 37.5.", "metadata": {}}
{"_id": "gpt3_5485", "text": "\nThis query will select the name of any station with a latitude less than 37.5.", "metadata": {}}
{"_id": "gpt3_5486", "text": "\nThis query counts the number of claims and their IDs from the Claims and Settlements tables, grouped by claim ID and ordered by the date the claim was settled, and then limits the result to one row.", "metadata": {}}
{"_id": "gpt3_5487", "text": "\nThis query counts the number of Settlements associated with a Claim, orders them by the Date_Claim_Settled, and returns the count and Claim_ID of the most recently settled claim.", "metadata": {}}
{"_id": "gpt3_5488", "text": "\nThis query counts the number of claims and returns the most recently settled claim ID.", "metadata": {}}
{"_id": "gpt3_5489", "text": "\nThis query counts the number of claims and returns the claim_id of the most recently settled claim.", "metadata": {}}
{"_id": "gpt3_5490", "text": "\nThis query counts the number of claims in the Claims and Settlements tables that have the same claim_id and orders them by the date the claim was settled, limiting the result to the most recent claim.", "metadata": {}}
{"_id": "gpt3_5491", "text": "\nThis query selects the distinct first names of students who have received a grade of 'C' in a course.", "metadata": {}}
{"_id": "gpt3_5492", "text": "\nThis query selects the distinct first names of students who have received a grade of 'C' in a course.", "metadata": {}}
{"_id": "gpt3_5493", "text": "\nThis query returns the distinct first names of all students who have earned a grade of 'C' in a course.", "metadata": {}}
{"_id": "gpt3_5494", "text": "\nThis query retrieves the distinct first names of all students who have received a grade of 'C' in a course.", "metadata": {}}
{"_id": "gpt3_5495", "text": "\nThis query selects the distinct first names of students who have received a grade of 'C' in their enrollments.", "metadata": {}}
{"_id": "gpt3_5496", "text": "\nThis query retrieves the account name and other account details associated with the customer Meaghan Keeling from the Accounts and Customers tables.", "metadata": {}}
{"_id": "gpt3_5497", "text": "\nThis statement retrieves the account name and other account details from the Accounts table for the customer with the first name \"Meaghan\" and the last name \"Keeling\" by joining the Accounts and Customers tables on the customer_id column.", "metadata": {}}
{"_id": "gpt3_5498", "text": "\nThis query selects the account name and other account details of the customer with the first name \"Meaghan\" and last name \"Keeling\" from the Accounts and Customers tables.", "metadata": {}}
{"_id": "gpt3_5499", "text": "\nThis query selects the account name and other account details from the Accounts table for the customer with the first name \"Meaghan\" and last name \"Keeling\" from the Customers table.", "metadata": {}}
{"_id": "gpt3_5500", "text": "\nThis query will retrieve the account name and other account details from the Accounts table for the customer with the first name \"Meaghan\" and last name \"Keeling\" from the Customers table.", "metadata": {}}
{"_id": "gpt3_5501", "text": "\nThis query will return a list of all publishers and the number of books published by each publisher in the book club.", "metadata": {}}
{"_id": "gpt3_5502", "text": "\nThis query will return a list of publishers and the total number of books associated with each publisher from the book_club table.", "metadata": {}}
{"_id": "gpt3_5503", "text": "\nThis query returns a count of the number of books for each publisher in the book club.", "metadata": {}}
{"_id": "gpt3_5504", "text": "\nThis query counts the number of books published by each publisher in the book club. The result will be a table with two columns, one for the publisher and the other for the number of books published by that publisher.", "metadata": {}}
{"_id": "gpt3_5505", "text": "\nThis query returns a count of the number of books published by each publisher in the book_club table.", "metadata": {}}
{"_id": "gpt3_5506", "text": "\nThe query will return the maximum price and maximum score of wines from the St. Helena Appelation.", "metadata": {}}
{"_id": "gpt3_5507", "text": "\nThe query will return the maximum price and maximum score of wines from the St. Helena appellation.", "metadata": {}}
{"_id": "gpt3_5508", "text": "\nThe query will return the maximum Price and Score for wines from the St. Helena Appelation.", "metadata": {}}
{"_id": "gpt3_5509", "text": "\nThis query will return the maximum price and maximum score of all wines with an Appelation of \"St. Helena\".", "metadata": {}}
{"_id": "gpt3_5510", "text": "\nThe query will return the maximum price and maximum score for any wines from the St. Helena appellation.", "metadata": {}}
{"_id": "gpt3_5511", "text": "\nThis query returns the total number of customers in the customers table.", "metadata": {}}
{"_id": "gpt3_5512", "text": "\nThis query returns the total number of customers in the customers table.", "metadata": {}}
{"_id": "gpt3_5513", "text": "\nThis query returns the total number of records in the customers table.", "metadata": {}}
{"_id": "gpt3_5514", "text": "\nThis query returns the total number of customers in the customers table.", "metadata": {}}
{"_id": "gpt3_5515", "text": "\nThis query will count the total number of customers in the customers table.", "metadata": {}}
{"_id": "gpt3_5516", "text": "\nThis query will return the number of distinct cities in Greenland that have airports.", "metadata": {}}
{"_id": "gpt3_5517", "text": "\nThis query returns the number of distinct cities in Greenland that have airports: 2.", "metadata": {}}
{"_id": "gpt3_5518", "text": "\nThis query will return the number of distinct cities in Greenland that have airports.", "metadata": {}}
{"_id": "gpt3_5519", "text": "\nThis query will return the count of distinct cities in Greenland that have an airport.", "metadata": {}}
{"_id": "gpt3_5520", "text": "\nThis query will return the number of distinct cities in Greenland that have airports.", "metadata": {}}
{"_id": "gpt3_5521", "text": "\nThis query selects the first name, last name, hire date, salary, and department ID of all employees whose first name does not contain the letter M.", "metadata": {}}
{"_id": "gpt3_5522", "text": "\nThis query returns the first name, last name, hire date, salary, and department ID of all employees whose first name does not contain the letter \"M\".", "metadata": {}}
{"_id": "gpt3_5523", "text": "\nThis query will select the first name, last name, hire date, salary, and department ID from the employees table where the first name does not contain the letter \"M\".", "metadata": {}}
{"_id": "gpt3_5524", "text": "\nThis query selects the first name, last name, hire date, salary, and department ID from the employees table where the first name does not contain the letter 'M'.", "metadata": {}}
{"_id": "gpt3_5525", "text": "\nThis query selects the first name, last name, hire date, salary, and department ID from the employees table where the first name does not start with the letter 'M'.", "metadata": {}}
{"_id": "gpt3_5526", "text": "\nThis query returns the total number of records in the county table.", "metadata": {}}
{"_id": "gpt3_5527", "text": "\nThis query would return the total number of records in the county table.", "metadata": {}}
{"_id": "gpt3_5528", "text": "\nThis query returns the total number of records in the county table.", "metadata": {}}
{"_id": "gpt3_5529", "text": "\nThis query would return the total count of records in the county table.", "metadata": {}}
{"_id": "gpt3_5530", "text": "\nThis query will return the total number of records in the county table.", "metadata": {}}
{"_id": "gpt3_5531", "text": "\nThis query selects the name, latitude, and minimum duration from the station and trip tables, grouped by the end station ID.", "metadata": {}}
{"_id": "gpt3_5532", "text": "\nThis query returns the name, latitude and shortest duration of trips for each end station.", "metadata": {}}
{"_id": "gpt3_5533", "text": "\nThis query selects the name, latitude, and minimum duration of trips for each station from the station and trip tables.", "metadata": {}}
{"_id": "gpt3_5534", "text": "\nThis query selects the name, latitude, and minimum duration of trips for each end station.", "metadata": {}}
{"_id": "gpt3_5535", "text": "\nThis query retrieves the name, latitude, and minimum duration of trips for each station.", "metadata": {}}
{"_id": "gpt3_5536", "text": "\nThis query selects the distinct names of mountains that have been climbed by climbers from West Germany.", "metadata": {}}
{"_id": "gpt3_5537", "text": "\nThis query will select the distinct names of mountains in West Germany that have been climbed by a climber.", "metadata": {}}
{"_id": "gpt3_5538", "text": "\nThis statement will select the distinct names of mountains climbed by climbers from West Germany.", "metadata": {}}
{"_id": "gpt3_5539", "text": "\nThis query selects the distinct names of mountains that have been climbed by West German climbers.", "metadata": {}}
{"_id": "gpt3_5540", "text": "\nThis query selects the distinct names of mountains climbed by climbers from West Germany.", "metadata": {}}
{"_id": "gpt3_5541", "text": "\nThis query returns the weight of the person with the lowest height in the \"people\" table.", "metadata": {}}
{"_id": "gpt3_5542", "text": "\nThis query returns the weight of the person with the lowest height in the table 'people'.", "metadata": {}}
{"_id": "gpt3_5543", "text": "\nThis query will return the weight of the person with the lowest height in the \"people\" table.", "metadata": {}}
{"_id": "gpt3_5544", "text": "\nThis query will select the weight of the person with the lowest height in the people table.", "metadata": {}}
{"_id": "gpt3_5545", "text": "\nThis query will return the weight of the person with the lowest height in the people table.", "metadata": {}}
{"_id": "gpt3_5546", "text": "\nThis query selects the name of all playlists that contain more than 100 tracks.", "metadata": {}}
{"_id": "gpt3_5547", "text": "\nThis query retrieves the names of all playlists that contain more than 100 tracks.", "metadata": {}}
{"_id": "gpt3_5548", "text": "\nThis query will select the names of all playlists that have more than 100 tracks.", "metadata": {}}
{"_id": "gpt3_5549", "text": "\nThis query selects the name of all playlists that have more than 100 tracks.", "metadata": {}}
{"_id": "gpt3_5550", "text": "\nThis SQL statement selects the name of any playlists that have more than 100 tracks associated with them.", "metadata": {}}
{"_id": "gpt3_5551", "text": "\nThis SQL statement selects the name of customers from the accounts table who have a checking account balance that is below the average balance of all checking accounts.", "metadata": {}}
{"_id": "gpt3_5552", "text": "\nThis statement will select the name of customers from the accounts table who have a checking account balance lower than the average balance of all customers in the checking table.", "metadata": {}}
{"_id": "gpt3_5553", "text": "\nThis query selects the name of customers from the accounts table who have a checking account balance lower than the average checking account balance.", "metadata": {}}
{"_id": "gpt3_5554", "text": "\nThis query selects the name of customers from the accounts table who have a checking account balance lower than the average balance of all checking accounts.", "metadata": {}}
{"_id": "gpt3_5555", "text": "\nThis SQL statement selects the name of customers from the accounts table whose checking account balance is below the average balance of all checking accounts.", "metadata": {}}
{"_id": "gpt3_5556", "text": "\nThis query returns the total number of distinct departments in the department table.", "metadata": {}}
{"_id": "gpt3_5557", "text": "\nThis query will return the total number of distinct department names in the department table.", "metadata": {}}
{"_id": "gpt3_5558", "text": "\nThis query will return the total number of distinct departments in the department table.", "metadata": {}}
{"_id": "gpt3_5559", "text": "\nThis query will return the total number of distinct department names in the department table.", "metadata": {}}
{"_id": "gpt3_5560", "text": "\nThis query will count the number of unique department names in the department table.", "metadata": {}}
{"_id": "gpt3_5561", "text": "\nThis query will return the names and scores of all wines in the table.", "metadata": {}}
{"_id": "gpt3_5562", "text": "\nThis query will select the Name and Score columns from the WINE table.", "metadata": {}}
{"_id": "gpt3_5563", "text": "\nThis query will return the Name and Score columns from the WINE table.", "metadata": {}}
{"_id": "gpt3_5564", "text": "\nThe query will return a list of all the names and scores for wines in the database.", "metadata": {}}
{"_id": "gpt3_5565", "text": "\nThis query returns the columns \"Name\" and \"Score\" from the table \"WINE\".", "metadata": {}}
{"_id": "gpt3_5566", "text": "\nThis query selects the titles of all papers authored by Jeremy Gibbons.", "metadata": {}}
{"_id": "gpt3_5567", "text": "\nThis query will return the titles of all papers written by Jeremy Gibbons.", "metadata": {}}
{"_id": "gpt3_5568", "text": "\nThis query returns the titles of all papers written by Jeremy Gibbons.", "metadata": {}}
{"_id": "gpt3_5569", "text": "\nThis query selects all papers written by Jeremy Gibbons.", "metadata": {}}
{"_id": "gpt3_5570", "text": "\nThis query selects the title of all papers authored by Jeremy Gibbons.", "metadata": {}}
{"_id": "gpt3_5571", "text": "\nThis query will return a list of location codes and the number of documents associated with each code.", "metadata": {}}
{"_id": "gpt3_5572", "text": "\nThis query returns the count of documents stored in each location code.", "metadata": {}}
{"_id": "gpt3_5573", "text": "\nThis query will return a list of location codes and the number of documents associated with each location code.", "metadata": {}}
{"_id": "gpt3_5574", "text": "\nThis query will return a list of location codes and the number of documents stored in each location.", "metadata": {}}
{"_id": "gpt3_5575", "text": "\nThis query counts the number of documents stored in each location code.", "metadata": {}}
{"_id": "gpt3_5576", "text": "\nThis query selects the name and salary of all instructors who are advisors to students in the History department.", "metadata": {}}
{"_id": "gpt3_5577", "text": "\nThis statement will select the name and salary of all instructors who are advisors to students in the History department.", "metadata": {}}
{"_id": "gpt3_5578", "text": "\nThis query selects the name and salary of instructors who are advisors to students in the History department.", "metadata": {}}
{"_id": "gpt3_5579", "text": "\nThis query selects the name and salary of instructors who are advisors for students in the History department.", "metadata": {}}
{"_id": "gpt3_5580", "text": "\nThis query selects the name and salary of all instructors who are advisors to students in the History department.", "metadata": {}}
{"_id": "gpt3_5581", "text": "\nThis query selects the employee_id and country_name from the employees, departments, locations, and countries tables. It does this by joining the tables on their respective ids.", "metadata": {}}
{"_id": "gpt3_5582", "text": "\nThis statement selects the employee_id and the corresponding country_name from the employees, departments, locations, and countries tables. It does so by joining the tables on the department_id, location_id, and country_id columns.", "metadata": {}}
{"_id": "gpt3_5583", "text": "\nThis query selects the employee_id and country_name of each employee from the employees, departments, locations, and countries tables.", "metadata": {}}
{"_id": "gpt3_5584", "text": "\nThis query selects the employee_id and country_name from the employees, departments, locations, and countries tables, by joining the tables based on the department_id, location_id, and country_id.", "metadata": {}}
{"_id": "gpt3_5585", "text": "\nThis statement selects the employee ID and country name from four tables: employees, departments, locations, and countries. It joins the tables together using the department_id, location_id, and country_id columns.", "metadata": {}}
{"_id": "gpt3_5586", "text": "\nThis query will select the product description from the products_for_hire table for the product that was booked with an amount of 102.76 from the products_booked table.", "metadata": {}}
{"_id": "gpt3_5587", "text": "\nThis query will select the product description of products that have been booked for an amount of 102.76 from the products_booked and products_for_hire tables.", "metadata": {}}
{"_id": "gpt3_5588", "text": "\nThis query will select the product description from the products_for_hire table that corresponds to the product_id of the products_booked table with a booked_amount of 102.76.", "metadata": {}}
{"_id": "gpt3_5589", "text": "\nThis query will select the product description from the products_for_hire table for any product that has a booked amount of 102.76 in the products_booked table.", "metadata": {}}
{"_id": "gpt3_5590", "text": "\nThis query will select the product description from the products_for_hire table that correspond to the product_id that is linked to the booked_amount of 102.76 in the products_booked table.", "metadata": {}}
{"_id": "gpt3_5591", "text": "\nThis query will select the bank name from the bank table (T1) that has the highest total loan amount from the loan table (T2). It will join the two tables on the branch_id column, and then group by the bank", "metadata": {}}
{"_id": "gpt3_5592", "text": "\nThis query will select the name of the bank with the highest total amount of loans from the bank and loan tables, ordered by the sum of the loan amounts in descending order, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_5593", "text": "\nThis query selects the name of the bank with the highest total amount of loans from the bank and loan tables, and orders the results in descending order. The query returns the name of the bank with the highest total loan amount.", "metadata": {}}
{"_id": "gpt3_5594", "text": "\nThis query selects the name of the bank with the highest total loan amount from the bank and loan tables. It does this by joining the two tables on the common branch_id column and then grouping by bank name. It then orders the results by", "metadata": {}}
{"_id": "gpt3_5595", "text": "\nThis query selects the name of the bank with the highest total loan amount from the bank and loan tables. It joins the two tables on the branch_id column and groups the results by the bank's name. It then orders the results by the", "metadata": {}}
{"_id": "gpt3_5596", "text": "\nThis query returns the count of products that have a color description of \"white\" or a characteristic of \"hot\".", "metadata": {}}
{"_id": "gpt3_5597", "text": "\nThis query counts the number of products that have either a white color or a \"hot\" characteristic.", "metadata": {}}
{"_id": "gpt3_5598", "text": "\nThis query will count the number of products that have a color description of \"white\" or a characteristic name of \"hot\".", "metadata": {}}
{"_id": "gpt3_5599", "text": "\nThis query returns the count of all products that have a color description of \"white\" or a characteristic name of \"hot\".", "metadata": {}}
{"_id": "gpt3_5600", "text": "\nThis query returns the count of all products that are either white in color or have the characteristic of \"hot\".", "metadata": {}}
{"_id": "gpt3_5601", "text": "\nThis query will select the job title and the average salary of all employees in each job title from the employees and jobs tables, and group the results by job title.", "metadata": {}}
{"_id": "gpt3_5602", "text": "\nThis query calculates the average salary for each job title by joining the employees and jobs tables and grouping by job title.", "metadata": {}}
{"_id": "gpt3_5603", "text": "\nThis query selects the job title and the average salary of employees from the employees and jobs tables, grouped by job title.", "metadata": {}}
{"_id": "gpt3_5604", "text": "\nThis query will select the job title and the average salary from the employees and jobs tables, grouped by the job title from the jobs table.", "metadata": {}}
{"_id": "gpt3_5605", "text": "\nThis query will select the job title and the average salary from the employees and jobs tables, grouping the results by job title.", "metadata": {}}
{"_id": "gpt3_5606", "text": "\nThis query will return the number of rooms with a King bed type for each decor type.", "metadata": {}}
{"_id": "gpt3_5607", "text": "\nThis query will return the count of all the rooms with a King bed type grouped by the decor type.", "metadata": {}}
{"_id": "gpt3_5608", "text": "\nThis query will count the number of rooms with a king-sized bed and group them by decor.", "metadata": {}}
{"_id": "gpt3_5609", "text": "\nThis statement will return the count of rooms with a King size bed grouped by the decor of the room.", "metadata": {}}
{"_id": "gpt3_5610", "text": "\nThis query will return the count of all Rooms that have a King bed type and group them by their decor.", "metadata": {}}
{"_id": "gpt3_5611", "text": "\nThis query counts the number of records in the book_club table.", "metadata": {}}
{"_id": "gpt3_5612", "text": "\nThis query returns the total number of rows in the book_club table.", "metadata": {}}
{"_id": "gpt3_5613", "text": "\nThis query will return the total number of records in the book_club table.", "metadata": {}}
{"_id": "gpt3_5614", "text": "\nThis query will return the total number of records in the book_club table.", "metadata": {}}
{"_id": "gpt3_5615", "text": "\nThis query will count the total number of records in the book_club table.", "metadata": {}}
{"_id": "gpt3_5616", "text": "\nThis query selects the last name and hire date of employees who are professors and have an office in 'DRE 102'.", "metadata": {}}
{"_id": "gpt3_5617", "text": "\nThis query will select the last name and hire date of any employee who is a professor and has an office located in DRE 102.", "metadata": {}}
{"_id": "gpt3_5618", "text": "\nThis query selects the last name and hire date of employees who are also professors and have an office in DRE 102.", "metadata": {}}
{"_id": "gpt3_5619", "text": "\nThis statement selects the last name and hire date of employees who are also professors with an office in DRE 102.", "metadata": {}}
{"_id": "gpt3_5620", "text": "\nThis query selects the last name and hire date of all employees who are professors with an office located in 'DRE 102'.", "metadata": {}}
{"_id": "gpt3_5621", "text": "\nThis query selects the first name, last name, hire date, salary, and department ID of all employees whose first name does not contain the letter \"M\".", "metadata": {}}
{"_id": "gpt3_5622", "text": "\nThis query selects the first name, last name, hire date, salary and department ID of all employees whose first name does not contain the letter M.", "metadata": {}}
{"_id": "gpt3_5623", "text": "\nThis query selects the first name, last name, hire date, salary, and department ID from the employees table where the first name does not contain an 'M'.", "metadata": {}}
{"_id": "gpt3_5624", "text": "\nThis query selects the first name, last name, hire date, salary and department ID of all employees whose first name does not contain the letter 'M'.", "metadata": {}}
{"_id": "gpt3_5625", "text": "\nThis query retrieves the first name, last name, hire date, salary and department ID from the employees table, excluding those whose first name starts with the letter M.", "metadata": {}}
{"_id": "gpt3_5626", "text": "\nThis query will return all card numbers from members whose hometown is located in Kentucky.", "metadata": {}}
{"_id": "gpt3_5627", "text": "\nThis query will select the card number from the member table where the member's hometown is located in Kentucky.", "metadata": {}}
{"_id": "gpt3_5628", "text": "\nThis query will select all card numbers from the member table where the hometown contains \"Kentucky\".", "metadata": {}}
{"_id": "gpt3_5629", "text": "\nThis query will select the card number from the member table for all members whose hometown is in Kentucky.", "metadata": {}}
{"_id": "gpt3_5630", "text": "\nThis SQL query will select all card numbers from the member table where the hometown is like 'Kentucky'.", "metadata": {}}
{"_id": "gpt3_5631", "text": "\nThis query selects all employees whose first name begins with either the letter D or S, and orders them by salary in descending order.", "metadata": {}}
{"_id": "gpt3_5632", "text": "\nThis query selects all employees whose first name contains either a 'D' or an 'S' and orders them by salary in descending order.", "metadata": {}}
{"_id": "gpt3_5633", "text": "\nThis SQL statement selects all employees whose first name contains either a D or an S, and orders them by their salary in descending order.", "metadata": {}}
{"_id": "gpt3_5634", "text": "\nThis query will select all records from the employees table where the first name begins with either a D or S, and will order the results by salary in descending order.", "metadata": {}}
{"_id": "gpt3_5635", "text": "\nThis statement selects all employees whose first name contains either a \"D\" or an \"S\" and orders them by salary in descending order.", "metadata": {}}
{"_id": "gpt3_5636", "text": "\nThis query will return the total count of chip models that do not have wifi capability.", "metadata": {}}
{"_id": "gpt3_5637", "text": "\nThis query will count the number of chip models in the database that do not have wifi capabilities.", "metadata": {}}
{"_id": "gpt3_5638", "text": "\nThis query will count the number of chip models that do not have wifi capability.", "metadata": {}}
{"_id": "gpt3_5639", "text": "\nThis query will return the number of chip models that do not have wifi capability.", "metadata": {}}
{"_id": "gpt3_5640", "text": "\nThis query will count the number of chip models that do not have wifi.", "metadata": {}}
{"_id": "gpt3_5641", "text": "\nThis query returns the nominees from the musical table who have been nominated more than twice.", "metadata": {}}
{"_id": "gpt3_5642", "text": "\nThis query returns the names of nominees from the musical table who have been nominated more than twice.", "metadata": {}}
{"_id": "gpt3_5643", "text": "\nThis query returns the names of all nominees who have been nominated for a musical award more than two times.", "metadata": {}}
{"_id": "gpt3_5644", "text": "\nThis statement returns a list of musical nominees who have been nominated for more than two awards.", "metadata": {}}
{"_id": "gpt3_5645", "text": "\nThis query returns the names of nominees from the musical table who have been nominated more than twice.", "metadata": {}}
{"_id": "gpt3_5646", "text": "\nThis query will return the average enrollment of all schools in the table.", "metadata": {}}
{"_id": "gpt3_5647", "text": "\nThis query would return the average enrollment of all schools in the table.", "metadata": {}}
{"_id": "gpt3_5648", "text": "\nThis query will return the average enrollment from all schools in the table.", "metadata": {}}
{"_id": "gpt3_5649", "text": "\nThis query will return the average enrollment of all schools in the table.", "metadata": {}}
{"_id": "gpt3_5650", "text": "\nThis query will return the average enrollment of all schools in the given table.", "metadata": {}}
{"_id": "gpt3_5651", "text": "\nThis query will select the names of all camera lenses from the camera_lens table that are either a Sigma or an Olympus brand, and which have been used to take photos from the photos table.", "metadata": {}}
{"_id": "gpt3_5652", "text": "\nThis query will select the name of all camera lenses from the camera_lens table that have a brand of either Sigma or Olympus and that are associated with photos in the photos table.", "metadata": {}}
{"_id": "gpt3_5653", "text": "\nThis query will return the names of all camera lenses from the camera_lens table that are either Sigma or Olympus brand, and that have been used to take photos in the photos table.", "metadata": {}}
{"_id": "gpt3_5654", "text": "\nThis query will select the names of all camera lenses from the camera_lens table that are either Sigma or Olympus brand, and that have a corresponding entry in the photos table.", "metadata": {}}
{"_id": "gpt3_5655", "text": "\nThis query will select the name of all camera lenses with the brand Sigma or Olympus from the camera_lens table, joining it to the photos table on the camera_lens_id.", "metadata": {}}
{"_id": "gpt3_5656", "text": "\nThis query returns the aircrafts located at London Gatwick airport from the aircraft and airport_aircraft tables.", "metadata": {}}
{"_id": "gpt3_5657", "text": "\nThis query retrieves the Aircraft names from the aircraft table that are associated with London Gatwick Airport from the airport and airport_aircraft tables.", "metadata": {}}
{"_id": "gpt3_5658", "text": "\nThis query selects the aircraft from the aircraft table that are located at London Gatwick Airport, by joining the aircraft, airport_aircraft, and airport tables.", "metadata": {}}
{"_id": "gpt3_5659", "text": "\nThis query selects the aircraft from the aircraft table that are associated with London Gatwick airport.", "metadata": {}}
{"_id": "gpt3_5660", "text": "\nThis query will select the Aircraft from the aircraft table that are associated with the London Gatwick airport from the airport and airport_aircraft tables.", "metadata": {}}
{"_id": "gpt3_5661", "text": "\nThis query will return a list of all the names of genres from the GENRE table.", "metadata": {}}
{"_id": "gpt3_5662", "text": "\nThis query will return a list of all the names of genres from the GENRE table.", "metadata": {}}
{"_id": "gpt3_5663", "text": "\nThe SELECT Name FROM GENRE statement is used to retrieve the name of all genres from a database table.", "metadata": {}}
{"_id": "gpt3_5664", "text": "\nThis query will return a list of all genres in the GENRE table.", "metadata": {}}
{"_id": "gpt3_5665", "text": "\nThis query will return the names of all genres from the GENRE table.", "metadata": {}}
{"_id": "gpt3_5666", "text": "\nThis query returns all last names from the Teachers table that do not appear in the Detention table.", "metadata": {}}
{"_id": "gpt3_5667", "text": "\nThis query returns the last names of all teachers who have not given any detentions.", "metadata": {}}
{"_id": "gpt3_5668", "text": "\nThis query returns all last names from the Teachers table that are not associated with any Detention records in the Detention table.", "metadata": {}}
{"_id": "gpt3_5669", "text": "\nThis query returns the last names of teachers who have not assigned detention.", "metadata": {}}
{"_id": "gpt3_5670", "text": "\nThis query returns all last names from the Teachers table which are not associated with any Detention records.", "metadata": {}}
{"_id": "gpt3_5671", "text": "\nThis query selects the names of actors and the names of the musicals they are associated with from two tables, actor and musical, based on the Musical_ID field.", "metadata": {}}
{"_id": "gpt3_5672", "text": "\nThis query selects the names of actors and the names of musicals from two tables, actor and musical, based on the common Musical_ID field.", "metadata": {}}
{"_id": "gpt3_5673", "text": "\nThis query will return the names of actors and the musicals they are associated with from the actor and musical tables.", "metadata": {}}
{"_id": "gpt3_5674", "text": "\nThis query selects the names of actors and the names of musicals they are associated with from two tables, actor and musical, based on a shared Musical_ID.", "metadata": {}}
{"_id": "gpt3_5675", "text": "\nThis statement will select the name of an actor and the name of the musical they are associated with from the actor and musical tables, respectively, based on the actor's Musical_ID.", "metadata": {}}
{"_id": "gpt3_5676", "text": "\nThis query will return a list of personal names from both the Course_Authors_and_Tutors and Students tables that are the same.", "metadata": {}}
{"_id": "gpt3_5677", "text": "\nThis query selects the personal names of people who are both authors/tutors of a course and students.", "metadata": {}}
{"_id": "gpt3_5678", "text": "\nThis statement returns the personal names of people who are both Course Authors and Tutors and Students.", "metadata": {}}
{"_id": "gpt3_5679", "text": "\nThis query returns the names of people who are both Course Authors and Tutors and Students.", "metadata": {}}
{"_id": "gpt3_5680", "text": "\nThis query will select the personal names of people who are both Course Authors and Tutors and Students.", "metadata": {}}
{"_id": "gpt3_5681", "text": "\nThis query selects the locations of cinemas that opened in both 2010 and 2011.", "metadata": {}}
{"_id": "gpt3_5682", "text": "\nThis query returns the locations of all cinemas that opened in both 2010 and 2011.", "metadata": {}}
{"_id": "gpt3_5683", "text": "\nThis query will select the locations of cinemas that opened in both 2010 and 2011.", "metadata": {}}
{"_id": "gpt3_5684", "text": "\nThis query will return the locations of all cinemas that opened in both 2010 and 2011.", "metadata": {}}
{"_id": "gpt3_5685", "text": "\nThis query will return the locations of cinemas that opened in both 2010 and 2011.", "metadata": {}}
{"_id": "gpt3_5686", "text": "\nThis query will return the login name and family name of all Course Authors and Tutors from the Course_Authors_and_Tutors table.", "metadata": {}}
{"_id": "gpt3_5687", "text": "\nThis query will return the login name and family name for each record in the Course_Authors_and_Tutors table.", "metadata": {}}
{"_id": "gpt3_5688", "text": "\nThis query will return a list of login names and family names from the Course_Authors_and_Tutors table.", "metadata": {}}
{"_id": "gpt3_5689", "text": "\nThis query will return the login name and family name of all Course Authors and Tutors from the Course_Authors_and_Tutors table.", "metadata": {}}
{"_id": "gpt3_5690", "text": "\nThis SQL statement will return all login names and family names from the Course_Authors_and_Tutors table.", "metadata": {}}
{"_id": "gpt3_5691", "text": "\nThis query will select the minister from any party whose name is not the Progress Party.", "metadata": {}}
{"_id": "gpt3_5692", "text": "\nThis query will return all ministers from parties other than the Progress Party.", "metadata": {}}
{"_id": "gpt3_5693", "text": "\nThis SQL statement selects the minister from a party whose party name is not the Progress Party.", "metadata": {}}
{"_id": "gpt3_5694", "text": "\nThis query will return the minister from any party that is not the Progress Party.", "metadata": {}}
{"_id": "gpt3_5695", "text": "\nThis query will return the name of the minister from any party that is not the Progress Party.", "metadata": {}}
{"_id": "gpt3_5696", "text": "\nThis query will return the number of students each advisor has in the Student table.", "metadata": {}}
{"_id": "gpt3_5697", "text": "\nThis query will return a count of how many students each advisor has. It will return a list of advisors and the number of students they have.", "metadata": {}}
{"_id": "gpt3_5698", "text": "\nThis query will return a list of advisors and the number of students each advisor has.", "metadata": {}}
{"_id": "gpt3_5699", "text": "\nThis query will count the number of students for each advisor.", "metadata": {}}
{"_id": "gpt3_5700", "text": "\nThis query returns a list of advisors and the number of students they have advised.", "metadata": {}}
{"_id": "gpt3_5701", "text": "\nThis query selects the payment method of the customer with the least amount of order quantity.", "metadata": {}}
{"_id": "gpt3_5702", "text": "\nThis query selects the payment method of the customer who has ordered the least amount of items, ordered by customer name.", "metadata": {}}
{"_id": "gpt3_5703", "text": "\nThis query retrieves the payment method used by the customer who has placed the least number of orders, as determined by summing the order quantities of all orders placed by the customer.", "metadata": {}}
{"_id": "gpt3_5704", "text": "\nThis query selects the payment method of the customer with the least amount of ordered items, ordered by customer name.", "metadata": {}}
{"_id": "gpt3_5705", "text": "\nThis query returns the payment method of the customer who has ordered the least amount of items.", "metadata": {}}
{"_id": "gpt3_5706", "text": "\nThis query selects the city with the most customers from the customers, customer_addresses, and addresses tables, and orders them by count in descending order, with the highest count at the top. The query limits the result to one city.", "metadata": {}}
{"_id": "gpt3_5707", "text": "\nThis query returns the city with the most customers.", "metadata": {}}
{"_id": "gpt3_5708", "text": "\nThis query selects the city with the most customers from the customers, customer_addresses, and addresses tables, grouped by city and ordered by count in descending order, with the top result being returned.", "metadata": {}}
{"_id": "gpt3_5709", "text": "\nThis query selects the city with the highest number of customers from the customers, customer_addresses, and addresses tables. It groups by city and orders the results by count in descending order, then returns the top result.", "metadata": {}}
{"_id": "gpt3_5710", "text": "\nThis query retrieves the city with the highest number of customers from the customers, customer_addresses, and addresses tables. It groups the cities and orders them by the count of customers in each city, then returns the city with the highest count", "metadata": {}}
{"_id": "gpt3_5711", "text": "\nThis query selects all cities from the city table that were hosting cities after the year 2010 from the hosting_city table.", "metadata": {}}
{"_id": "gpt3_5712", "text": "\nThis statement will select the city from the city table (T1) that has been used as a hosting city for a year after 2010 from the hosting_city table (T2).", "metadata": {}}
{"_id": "gpt3_5713", "text": "\nThis query selects all cities from the \"city\" table that have hosted an event after 2010 from the \"hosting_city\" table.", "metadata": {}}
{"_id": "gpt3_5714", "text": "\nThis query selects the city from the city table (T1) which is also listed in the hosting_city table (T2) and has a year greater than 2010.", "metadata": {}}
{"_id": "gpt3_5715", "text": "\nThis query selects the cities from the \"city\" table (T1) that have hosted an event since 2010 from the \"hosting_city\" table (T2).", "metadata": {}}
{"_id": "gpt3_5716", "text": "\nThis query would calculate the average number of days a customer has been active on a contact channel.", "metadata": {}}
{"_id": "gpt3_5717", "text": "\nThis query returns the average number of days that a customer contact channel was active.", "metadata": {}}
{"_id": "gpt3_5718", "text": "\nThis query would return the average amount of time that customers have been active on contact channels.", "metadata": {}}
{"_id": "gpt3_5719", "text": "\nThis query calculates the average number of days customers have been active in their contact channels.", "metadata": {}}
{"_id": "gpt3_5720", "text": "\nThis query calculates the average number of days between the active_from_date and active_to_date fields in the customer_contact_channels table.", "metadata": {}}
{"_id": "gpt3_5721", "text": "\nThis query retrieves the first names of the staff members who have received the most complaints, ordered by the number of complaints they have received, with a limit of 5.", "metadata": {}}
{"_id": "gpt3_5722", "text": "\nThis query selects the first name of the staff members from the staff table (t1) who have the most complaints in the complaints table (t2). It groups the results by staff ID and orders them by the number of complaints in descending order", "metadata": {}}
{"_id": "gpt3_5723", "text": "\nThis query selects the first name of the first five staff members who have the most complaints against them, ordered by the number of complaints.", "metadata": {}}
{"_id": "gpt3_5724", "text": "\nThis query selects the first name of staff members from the 'staff' table who have the most complaints in the 'complaints' table, and limits the results to the top 5.", "metadata": {}}
{"_id": "gpt3_5725", "text": "\nThis query selects the first names of the top 5 staff members who have the most complaints against them, based on the staff and complaints tables. It does this by joining the two tables on the staff_id column, grouping the records by staff_", "metadata": {}}
{"_id": "gpt3_5726", "text": "\nThis query will select the lastname of all teachers who teach in classroom 109.", "metadata": {}}
{"_id": "gpt3_5727", "text": "\nThis query will select the lastname of all teachers who teach in classroom 109.", "metadata": {}}
{"_id": "gpt3_5728", "text": "\nThis query will select the last names of all teachers who are assigned to classroom 109.", "metadata": {}}
{"_id": "gpt3_5729", "text": "\nThis query will select the last name of all teachers who teach in classroom 109.", "metadata": {}}
{"_id": "gpt3_5730", "text": "\nThis query will select the last name of all teachers from the teachers table who are assigned to classroom 109.", "metadata": {}}
{"_id": "gpt3_5731", "text": "\nThis query will return the sum of the top 3 largest cities in the district, based on their area, in descending order.", "metadata": {}}
{"_id": "gpt3_5732", "text": "\nThis query will return the sum of the population of the top 3 largest cities in the district, ordered by their area.", "metadata": {}}
{"_id": "gpt3_5733", "text": "\nThis query will return the sum of the populations of the three largest cities in the district, ordered by area size in descending order.", "metadata": {}}
{"_id": "gpt3_5734", "text": "\nThis statement returns the sum of the population of the top 3 largest cities (by area) in the district table.", "metadata": {}}
{"_id": "gpt3_5735", "text": "\nThis query returns the sum of the population of the three largest cities in the district, ordered by city area in descending order.", "metadata": {}}
{"_id": "gpt3_5736", "text": "\nThis query selects the customer names of customers who have both requested a Close a Policy service and a New Policy Application service.", "metadata": {}}
{"_id": "gpt3_5737", "text": "\nThis query selects the customer names of customers who have both closed a policy and applied for a new policy.", "metadata": {}}
{"_id": "gpt3_5738", "text": "\nThis query selects the customer names of customers who have both requested a close a policy service and a new policy application service.", "metadata": {}}
{"_id": "gpt3_5739", "text": "\nThis query selects the customer names of customers who have both requested services of \"Close a policy\" and \"New policy application\".", "metadata": {}}
{"_id": "gpt3_5740", "text": "\nThis query selects the customer names of customers who have both a service of \"Close a policy\" and \"New policy application\" in the first_notification_of_loss table.", "metadata": {}}
{"_id": "gpt3_5741", "text": "\nThis query will return the average length of all bridges in the table in feet.", "metadata": {}}
{"_id": "gpt3_5742", "text": "\nThis query will calculate the average length of all bridges in the table, in feet.", "metadata": {}}
{"_id": "gpt3_5743", "text": "\nThis query will return the average length of all the bridges in the table, in feet.", "metadata": {}}
{"_id": "gpt3_5744", "text": "\nThis query returns the average length in feet of all bridges in the table.", "metadata": {}}
{"_id": "gpt3_5745", "text": "\nThis query will return the average length of all bridges in the bridge table in feet.", "metadata": {}}
{"_id": "gpt3_5746", "text": "\nThis query returns the name of the department with the highest total course credits.", "metadata": {}}
{"_id": "gpt3_5747", "text": "\nThis query selects the department name of the department with the most course credits from the course, class, and department tables.", "metadata": {}}
{"_id": "gpt3_5748", "text": "\nThis query retrieves the name of the department with the highest sum of course credits from the course, class, and department tables.", "metadata": {}}
{"_id": "gpt3_5749", "text": "\nThis query retrieves the name of the department with the highest total course credits from the course, class, and department tables. It does this by joining the course and class tables on the crs_code column, then joining the course and department", "metadata": {}}
{"_id": "gpt3_5750", "text": "\nThis query retrieves the name of the department with the highest total course credits, ordered by the sum of course credits.", "metadata": {}}
{"_id": "gpt3_5751", "text": "\nThis query selects the name from the accounts table, as well as the combined balance from the checking and savings tables, for customers whose savings account balance is greater than the average savings account balance.", "metadata": {}}
{"_id": "gpt3_5752", "text": "\nThis query selects the name of the customer and the combined balance of their checking and savings accounts from the accounts, checking, and savings tables. The query only selects customers whose savings account balance is greater than the average balance of all savings accounts.", "metadata": {}}
{"_id": "gpt3_5753", "text": "\nThis query selects the name and combined balance of customers from the accounts, checking, and savings tables where the customer's savings balance is greater than the average savings balance.", "metadata": {}}
{"_id": "gpt3_5754", "text": "\nThis query selects the customer name and the combined balance of their checking and savings accounts from the accounts, checking, and savings tables, where the customer's savings balance is greater than the average savings balance.", "metadata": {}}
{"_id": "gpt3_5755", "text": "\nThis statement selects the name and the combined balance of checking and savings accounts from customers with a savings balance greater than the average balance of all savings accounts.", "metadata": {}}
{"_id": "gpt3_5756", "text": "\nThis query counts the number of institutions that have at least 20 floors in their associated building and have proteins associated with them.", "metadata": {}}
{"_id": "gpt3_5757", "text": "\nThis query counts the number of institutions that have at least 20 floors in the associated building.", "metadata": {}}
{"_id": "gpt3_5758", "text": "\nThis query counts the number of institutions that have at least 20 floors in their buildings and are associated with proteins.", "metadata": {}}
{"_id": "gpt3_5759", "text": "\nThis query counts the number of institutions that have proteins and are located in buildings with at least 20 floors.", "metadata": {}}
{"_id": "gpt3_5760", "text": "\nThis query will count the number of institutions that have at least 20 floors in the buildings they are associated with.", "metadata": {}}
{"_id": "gpt3_5761", "text": "\nThis query will return the count of all files with a duration of 4 minutes or more.", "metadata": {}}
{"_id": "gpt3_5762", "text": "\nThis query will count the number of files in the files table that have a duration of 4 minutes or more.", "metadata": {}}
{"_id": "gpt3_5763", "text": "\nThis query counts the number of rows in the 'files' table where the duration column contains any value that starts with \"4:\".", "metadata": {}}
{"_id": "gpt3_5764", "text": "\nThis query will count the number of files with a duration of 4 minutes or more.", "metadata": {}}
{"_id": "gpt3_5765", "text": "\nThis query will count the number of files that have a duration of 4 minutes or more.", "metadata": {}}
{"_id": "gpt3_5766", "text": "\nThis query returns the title, stars, and director of each movie and the minimum stars given for that director.", "metadata": {}}
{"_id": "gpt3_5767", "text": "\nThis query returns the title, stars, and director of a movie, as well as the minimum stars given to any movie by the same director.", "metadata": {}}
{"_id": "gpt3_5768", "text": "\nThis query selects the title, stars, and director from the Movie and Rating tables, and groups them by director. It also finds the minimum stars for each director.", "metadata": {}}
{"_id": "gpt3_5769", "text": "\nThis query will return the title, stars, and director of each movie, as well as the minimum stars given to any movie directed by the specified director.", "metadata": {}}
{"_id": "gpt3_5770", "text": "\nThis query will select the title, stars, and director from the Movie table, as well as the minimum stars from the Rating table, for each movie grouped by director.", "metadata": {}}
{"_id": "gpt3_5771", "text": "\nThis query selects the date a claim was made and the claim ID from the Claims table and the Settlements table, where the claim IDs match. It then groups them by claim ID and only includes those with more than 2 entries. It also selects", "metadata": {}}
{"_id": "gpt3_5772", "text": "\nThis query selects the Date_Claim_Made and Claim_id from the Claims table as well as the Settlements table, grouping them by Claim_id and having a count of more than 2. It also selects the Date_Claim_Made", "metadata": {}}
{"_id": "gpt3_5773", "text": "\nThis query selects the date a claim was made and the claim ID from the Claims table for claims that have more than two settlements associated with them from the Settlements table, as well as the date a claim was made and the claim ID from the", "metadata": {}}
{"_id": "gpt3_5774", "text": "\nThis query selects the date and claim ID of all claims that have been settled more than two times, as well as the date and claim ID of the claim with the highest amount claimed.", "metadata": {}}
{"_id": "gpt3_5775", "text": "\nThis query selects the date and claim ID from the Claims table and the Settlements table for any claims with more than two settlements and for the claim with the highest amount claimed.", "metadata": {}}
{"_id": "gpt3_5776", "text": "\nThis query counts the number of races held at each track by joining the race and track tables and grouping by track_id. The output is the name of the track and the number of races held at each track.", "metadata": {}}
{"_id": "gpt3_5777", "text": "\nThis query counts the number of races for each track by joining the 'race' and 'track' tables and grouping the results by track_id. The output of the query will be a list of track names and the number of races at each", "metadata": {}}
{"_id": "gpt3_5778", "text": "\nThis statement will return the name of each track and the number of races run at each track.", "metadata": {}}
{"_id": "gpt3_5779", "text": "\nThis query counts the number of races that have been held at each track. It returns the track name and the number of races held at that track.", "metadata": {}}
{"_id": "gpt3_5780", "text": "\nThis statement returns the name of each track and the number of races held at each track.", "metadata": {}}
{"_id": "gpt3_5781", "text": "\nThis query retrieves the minimum duration, minimum rating, and genre for each file, grouped by genre and ordered by genre.", "metadata": {}}
{"_id": "gpt3_5782", "text": "\nThis query returns the minimum duration, minimum rating, and genre of each song in the files and song tables, grouped by genre and ordered by genre.", "metadata": {}}
{"_id": "gpt3_5783", "text": "\nThis query returns the minimum duration, minimum rating, and genre of each song in the files and song tables, grouped by genre and ordered by genre.", "metadata": {}}
{"_id": "gpt3_5784", "text": "\nThis query will return the minimum duration and rating for each genre_is in the files and song tables, sorted by genre_is.", "metadata": {}}
{"_id": "gpt3_5785", "text": "\nThis query will return the minimum duration, minimum rating, and genre of each song in the files and song tables, ordered by genre.", "metadata": {}}
{"_id": "gpt3_5786", "text": "\nThis query selects the name of all parties that are not associated with any members.", "metadata": {}}
{"_id": "gpt3_5787", "text": "\nThis query will select the name of a party from the party table that is not associated with any members.", "metadata": {}}
{"_id": "gpt3_5788", "text": "\nThis query returns the names of all parties that do not have any members.", "metadata": {}}
{"_id": "gpt3_5789", "text": "\nThis query selects the name of all parties that do not have any members associated with them.", "metadata": {}}
{"_id": "gpt3_5790", "text": "\nThis query will select the name of the party from the party table where the party_id does not exist in the Member table. This will return all parties that do not have any members.", "metadata": {}}
{"_id": "gpt3_5791", "text": "\nThis query will select the room names from the Rooms table where the bed type is either King or Queen.", "metadata": {}}
{"_id": "gpt3_5792", "text": "\nThis query will select the roomName from the Rooms table where the bedType is either King or Queen.", "metadata": {}}
{"_id": "gpt3_5793", "text": "\nThis SQL statement will select all room names from the Rooms table where the bed type is either King or Queen.", "metadata": {}}
{"_id": "gpt3_5794", "text": "\nThis SQL statement selects the roomName from the Rooms table where the bedType is either King or Queen.", "metadata": {}}
{"_id": "gpt3_5795", "text": "\nThis SQL statement will select the room names from the Rooms table where the bed type is either King or Queen.", "metadata": {}}
{"_id": "gpt3_5796", "text": "\nThis SQL query selects the first and last name of customers from the Customer_Payments and Customers tables who have made more than two payments. It does this by joining the two tables on the customer_id, grouping by customer_id, and", "metadata": {}}
{"_id": "gpt3_5797", "text": "\nThis query selects the first and last names of customers who have made more than two payments from the Customer_Payments and Customers tables.", "metadata": {}}
{"_id": "gpt3_5798", "text": "\nThis query selects the first and last name of customers who have made more than two payments from the Customer_Payments and Customers tables.", "metadata": {}}
{"_id": "gpt3_5799", "text": "\nThis query selects the first and last names of customers who have made more than two payments in the Customer_Payments table, by joining the Customer_Payments and Customers tables on the customer_id column and grouping by customer_id.", "metadata": {}}
{"_id": "gpt3_5800", "text": "\nThis query retrieves the first and last names of customers who have made more than two payments from the Customer_Payments and Customers tables.", "metadata": {}}
{"_id": "gpt3_5801", "text": "\nThis statement retrieves the names of journalists who have written more than one news report. It does this by joining the news_report, event, and journalist tables together and grouping the results by the journalist's name. It then filters the results to", "metadata": {}}
{"_id": "gpt3_5802", "text": "\nThis query returns the names of journalists who have written more than one news report.", "metadata": {}}
{"_id": "gpt3_5803", "text": "\nThis query returns the names of journalists who have reported on more than one event.", "metadata": {}}
{"_id": "gpt3_5804", "text": "\nThis SQL statement is used to select the name of journalists from the news_report, event, and journalist tables who have reported on more than one event.", "metadata": {}}
{"_id": "gpt3_5805", "text": "\nThis query selects the names of journalists who have written more than one news report.", "metadata": {}}
{"_id": "gpt3_5806", "text": "\nThis query would return the total number of records in the employee table.", "metadata": {}}
{"_id": "gpt3_5807", "text": "\nThis query will return the total number of employees in the employee table.", "metadata": {}}
{"_id": "gpt3_5808", "text": "\nThis query returns the total number of records in the employee table.", "metadata": {}}
{"_id": "gpt3_5809", "text": "\nThis query will return the total number of employees in a given table.", "metadata": {}}
{"_id": "gpt3_5810", "text": "\nThis query returns the total number of employees in the employee table.", "metadata": {}}
{"_id": "gpt3_5811", "text": "\nThis query will count the number of files in the files table that have a duration of 4 minutes.", "metadata": {}}
{"_id": "gpt3_5812", "text": "\nThis query returns the total count of files that have a duration of four minutes or more.", "metadata": {}}
{"_id": "gpt3_5813", "text": "\nThis query will count the number of files in the table with a duration that starts with \"4:\".", "metadata": {}}
{"_id": "gpt3_5814", "text": "\nThis query counts the number of files in a database that have a duration of 4 minutes or more.", "metadata": {}}
{"_id": "gpt3_5815", "text": "\nThis query will count the number of files in the database with a duration of 4 minutes.", "metadata": {}}
{"_id": "gpt3_5816", "text": "\nThis query will select the player's name from the tryout and player tables, where the college name from the college table is the one with the highest enrollment.", "metadata": {}}
{"_id": "gpt3_5817", "text": "\nThis query selects the player names from the tryout table and the player table that are associated with the college with the highest enrollment.", "metadata": {}}
{"_id": "gpt3_5818", "text": "\nThis query will select the player name from the tryout and player tables for the college with the highest enrollment.", "metadata": {}}
{"_id": "gpt3_5819", "text": "\nThis query will select the name of the player from the tryout and player tables where the college name from the college table is the college with the highest enrollment.", "metadata": {}}
{"_id": "gpt3_5820", "text": "\nThis query selects the name of the players from the tryout table who are from the college with the highest enrollment.", "metadata": {}}
{"_id": "gpt3_5821", "text": "\nThis query returns the number of markets in the table with fewer than 300 cities.", "metadata": {}}
{"_id": "gpt3_5822", "text": "\nThis query will count the number of markets with fewer than 300 cities.", "metadata": {}}
{"_id": "gpt3_5823", "text": "\nThis query returns the number of markets in the table with fewer than 300 cities.", "metadata": {}}
{"_id": "gpt3_5824", "text": "\nThis query will return the count of all markets in the table with less than 300 cities.", "metadata": {}}
{"_id": "gpt3_5825", "text": "\nThis query will count the number of markets with fewer than 300 cities.", "metadata": {}}
{"_id": "gpt3_5826", "text": "\nThis query will select the names of all technicians from the database and order them by their age in ascending order.", "metadata": {}}
{"_id": "gpt3_5827", "text": "\nThis query selects the names of technicians from a database and orders them by age in ascending order.", "metadata": {}}
{"_id": "gpt3_5828", "text": "\nThe query SELECT Name FROM technician ORDER BY Age ASC will return the names of all technicians in the table ordered by age in ascending order.", "metadata": {}}
{"_id": "gpt3_5829", "text": "\nThis query will select the names of all technicians from the technician table and order them in ascending order by age.", "metadata": {}}
{"_id": "gpt3_5830", "text": "\nThis query will return a list of technicians' names in order of their ages from youngest to oldest.", "metadata": {}}
{"_id": "gpt3_5831", "text": "\nThis query returns the states in which the heads of the Treasury and Homeland Security departments were born.", "metadata": {}}
{"_id": "gpt3_5832", "text": "\nThis query returns the state of birth of the head of both the Treasury and Homeland Security departments.", "metadata": {}}
{"_id": "gpt3_5833", "text": "\nThis query returns the states in which the heads of the Treasury and Homeland Security departments were born.", "metadata": {}}
{"_id": "gpt3_5834", "text": "\nThis query returns the born state of the head of the Treasury and Homeland Security departments.", "metadata": {}}
{"_id": "gpt3_5835", "text": "\nThis query retrieves the born state of all heads of the Treasury and Homeland Security departments who are from the same state.", "metadata": {}}
{"_id": "gpt3_5836", "text": "\nThis query selects the department_id from the employees table and groups it by department_id, and filters the results to only include departments with more than 10 employees that have a commission_pct.", "metadata": {}}
{"_id": "gpt3_5837", "text": "\nThis query returns a list of all department_ids from the employees table that have more than 10 commission_pct values.", "metadata": {}}
{"_id": "gpt3_5838", "text": "\nThis query returns a list of department_ids from the employees table where the number of employees with a commission_pct greater than 10 is greater than 10.", "metadata": {}}
{"_id": "gpt3_5839", "text": "\nThis query returns the department_id from the employees table that have more than 10 employees with commission_pct.", "metadata": {}}
{"_id": "gpt3_5840", "text": "\nThis query returns a list of department IDs from the employees table where more than 10 employees have a commission_pct value.", "metadata": {}}
{"_id": "gpt3_5841", "text": "\nThis query counts the number of occurrences of each test result in the Student_Tests_Taken table and orders the results in descending order.", "metadata": {}}
{"_id": "gpt3_5842", "text": "\nThis query will count the number of test results for each student and order them by the highest count. The output will be a table with two columns, one for the test result and one for the count.", "metadata": {}}
{"_id": "gpt3_5843", "text": "\nThis SQL query summarizes the number of student test results, grouped by result and ordered by the number of results in descending order.", "metadata": {}}
{"_id": "gpt3_5844", "text": "\nThis query will count the number of test results for each student and order the results from most to least. It will return the test result and the count of each result.", "metadata": {}}
{"_id": "gpt3_5845", "text": "\nThis query counts the number of test results for each result type in the Student_Tests_Taken table and orders them from highest to lowest.", "metadata": {}}
{"_id": "gpt3_5846", "text": "\nThis query selects the authors of submissions that have been accepted to more than one workshop.", "metadata": {}}
{"_id": "gpt3_5847", "text": "\nThis query selects the authors from the acceptance and submission tables who have had more than one of their submissions accepted for a workshop.", "metadata": {}}
{"_id": "gpt3_5848", "text": "\nThis query selects the authors of submissions that have been accepted to more than one workshop.", "metadata": {}}
{"_id": "gpt3_5849", "text": "\nThis query selects the authors from the acceptance and submission tables who have had more than one submission accepted to a workshop.", "metadata": {}}
{"_id": "gpt3_5850", "text": "\nThis query selects the authors from the acceptance and submission tables who have had more than one paper accepted to a workshop.", "metadata": {}}
{"_id": "gpt3_5851", "text": "\nThis query will select the name of any mountain that has a height greater than 5000 meters or a prominence greater than 1000 meters.", "metadata": {}}
{"_id": "gpt3_5852", "text": "\nThis SQL statement will select the name of any mountain that has a height greater than 5000 meters or a prominence greater than 1000 meters.", "metadata": {}}
{"_id": "gpt3_5853", "text": "\nThis SQL query will select the names of all mountains with a height greater than 5000 meters or a prominence greater than 1000 meters.", "metadata": {}}
{"_id": "gpt3_5854", "text": "\nThis query will select the names of all mountains that have a height greater than 5000 meters or a prominence greater than 1000 meters.", "metadata": {}}
{"_id": "gpt3_5855", "text": "\nThis statement selects the name of all mountains with a height greater than 5000 meters or a prominence greater than 1000 meters.", "metadata": {}}
{"_id": "gpt3_5856", "text": "\nThis query counts the number of distinct papers authored by people affiliated with Tokohu University.", "metadata": {}}
{"_id": "gpt3_5857", "text": "\nThis query will count the number of distinct titles of papers that were authored by authors affiliated with Tokohu University.", "metadata": {}}
{"_id": "gpt3_5858", "text": "\nThis query will count the number of distinct titles of papers published by authors affiliated with Tokohu University.", "metadata": {}}
{"_id": "gpt3_5859", "text": "\nThis query will count the number of distinct titles of papers written by authors affiliated with Tokohu University.", "metadata": {}}
{"_id": "gpt3_5860", "text": "\nThis query will return the number of distinct titles of papers that have authors affiliated with Tokohu University.", "metadata": {}}
{"_id": "gpt3_5861", "text": "\nThis query will select the most popular major from the STUDENT table and display it in descending order.", "metadata": {}}
{"_id": "gpt3_5862", "text": "\nThis query retrieves the major with the highest number of students enrolled from the STUDENT table, sorted by descending count.", "metadata": {}}
{"_id": "gpt3_5863", "text": "\nThis query returns the most common major from the STUDENT table, ordered by the number of students with that major in descending order, and limiting the result to one row.", "metadata": {}}
{"_id": "gpt3_5864", "text": "\nThis query will return the major with the highest number of students enrolled in it.", "metadata": {}}
{"_id": "gpt3_5865", "text": "\nThis query returns the Major with the highest number of students from the STUDENT table. It groups the records by Major and orders them by the count of each Major in descending order, then limits the query to the first record, which is the Major", "metadata": {}}
{"_id": "gpt3_5866", "text": "\nThis query will return the total number of stations, the network name, and services available for each station in the route table.", "metadata": {}}
{"_id": "gpt3_5867", "text": "\nThis query returns the number of services available at each station, along with the network name and services associated with the station.", "metadata": {}}
{"_id": "gpt3_5868", "text": "\nThis query returns a count of the number of services for each network name and service associated with a station in the station and route tables.", "metadata": {}}
{"_id": "gpt3_5869", "text": "\nThis query will return a count of the number of services provided by each station in the network, along with the station's name and the services provided.", "metadata": {}}
{"_id": "gpt3_5870", "text": "\nThis query will return the number of services available at each station, along with the station's name and services.", "metadata": {}}
{"_id": "gpt3_5871", "text": "\nThis query will return all faculty members from the faculty table who were employed at Long Beach State University in 2002.", "metadata": {}}
{"_id": "gpt3_5872", "text": "\nThis query will return all faculty members from Long Beach State University in the year 2002.", "metadata": {}}
{"_id": "gpt3_5873", "text": "\nThis query will return the faculty from the faculty table who worked at Long Beach State University in 2002.", "metadata": {}}
{"_id": "gpt3_5874", "text": "\nThis query will return a list of faculty members from the faculty table who were employed at Long Beach State University in 2002.", "metadata": {}}
{"_id": "gpt3_5875", "text": "\nThis query will return the faculty from the faculty table who were employed at Long Beach State University in 2002.", "metadata": {}}
{"_id": "gpt3_5876", "text": "\nThis query selects the department name and building of the department with the highest budget, ordered in descending order and limited to one result.", "metadata": {}}
{"_id": "gpt3_5877", "text": "\nThis query selects the department name and building from the department table and orders them by budget in descending order, then limits the output to one row. This query will return the department name and building of the department with the highest budget.", "metadata": {}}
{"_id": "gpt3_5878", "text": "\nThis query will select the department name and building of the department with the highest budget and display the result in descending order.", "metadata": {}}
{"_id": "gpt3_5879", "text": "\nThis query will select the department name and building of the department with the highest budget, in descending order.", "metadata": {}}
{"_id": "gpt3_5880", "text": "\nThis query selects the department name and building from the department table, ordered by budget in descending order, and returns the top result.", "metadata": {}}
{"_id": "gpt3_5881", "text": "\nThis query will return the number of customers in each state or province or county, grouped by the state, province, or county.", "metadata": {}}
{"_id": "gpt3_5882", "text": "\nThis query will count the number of customers in each state/province/county.", "metadata": {}}
{"_id": "gpt3_5883", "text": "\nThis query will return the number of customers in each state, province, or county by counting the number of customer addresses associated with each state, province, or county.", "metadata": {}}
{"_id": "gpt3_5884", "text": "\nThis query will return a count of the number of customers in each state, province, or county.", "metadata": {}}
{"_id": "gpt3_5885", "text": "\nThis query will return a count of the number of customers in each state/province/county.", "metadata": {}}
{"_id": "gpt3_5886", "text": "\nThis query will return the count of students, the average age of students, and the city code for each city in the student table.", "metadata": {}}
{"_id": "gpt3_5887", "text": "\nThis query will return the count of students, the average age, and the city code for each group of students based on their city code.", "metadata": {}}
{"_id": "gpt3_5888", "text": "\nThis query will return the total number of students, the average age of students, and the city code for each group of students in the student table.", "metadata": {}}
{"_id": "gpt3_5889", "text": "\nThis query returns the count of students, the average age of students, and the city code of each student, grouped by the city code.", "metadata": {}}
{"_id": "gpt3_5890", "text": "\nThis query will return the count of students, the average age of students, and the city code for each city code group in the student table.", "metadata": {}}
{"_id": "gpt3_5891", "text": "\nThis query selects the first name, last name, and salary of all employees who do not receive a commission.", "metadata": {}}
{"_id": "gpt3_5892", "text": "\nThis query selects the first name, last name, and salary of all employees who do not receive a commission.", "metadata": {}}
{"_id": "gpt3_5893", "text": "\nThis query will select the first name, last name, and salary of all employees who do not receive a commission.", "metadata": {}}
{"_id": "gpt3_5894", "text": "\nThis query will select the first name, last name, and salary of all employees who do not receive a commission.", "metadata": {}}
{"_id": "gpt3_5895", "text": "\nThis statement selects the first name, last name, and salary of all employees who do not receive commission.", "metadata": {}}
{"_id": "gpt3_5896", "text": "\nThis query selects the names of all aircrafts that have been used for at least two flights.", "metadata": {}}
{"_id": "gpt3_5897", "text": "\nThis query will select the name of an aircraft from the Aircraft table that has at least two flights associated with it in the Flight table.", "metadata": {}}
{"_id": "gpt3_5898", "text": "\nThis query will select the name of all aircrafts that have flown two or more flights.", "metadata": {}}
{"_id": "gpt3_5899", "text": "\nThis query will select the name of the aircraft from the Flight and Aircraft tables that have been used in at least two flights.", "metadata": {}}
{"_id": "gpt3_5900", "text": "\nThis query returns the names of all aircrafts that have been used for at least two flights.", "metadata": {}}
{"_id": "gpt3_5901", "text": "\nThis query will select the distinct names of institutions associated with the author Matthias Blume.", "metadata": {}}
{"_id": "gpt3_5902", "text": "\nThis query will return a list of all the institutions that Matthias Blume is associated with.", "metadata": {}}
{"_id": "gpt3_5903", "text": "\nThis query returns the unique names of the institutions Matthias Blume is associated with.", "metadata": {}}
{"_id": "gpt3_5904", "text": "\nThis query selects the distinct name of all institutions associated with the author Matthias Blume.", "metadata": {}}
{"_id": "gpt3_5905", "text": "\nThis query will return a list of all distinct names of institutions associated with the author Matthias Blume.", "metadata": {}}
{"_id": "gpt3_5906", "text": "\nThis query returns a list of storm names from the storm table that are not associated with at least two affected regions in the affected_region table.", "metadata": {}}
{"_id": "gpt3_5907", "text": "\nThis query will return a list of storm names that have fewer than two affected regions.", "metadata": {}}
{"_id": "gpt3_5908", "text": "\nThis query will select the names of storms from the 'storm' table that do not have at least two associated affected regions in the 'affected_region' table.", "metadata": {}}
{"_id": "gpt3_5909", "text": "\nThis query returns the names of storms that have not affected two or more regions.", "metadata": {}}
{"_id": "gpt3_5910", "text": "\nThis query returns the names of storms from the 'storm' table which are not associated with two or more affected regions in the 'affected_region' table.", "metadata": {}}
{"_id": "gpt3_5911", "text": "\nThis query will select the document type name and description from the Ref_document_types table where the document type code is \"RV\".", "metadata": {}}
{"_id": "gpt3_5912", "text": "\nThis query returns the name and description of the document type with the code \"RV\". The result of the query is \"Receipt Voucher\" and \"A voucher used to record the receipt of goods or services\".", "metadata": {}}
{"_id": "gpt3_5913", "text": "\nThis query will select the name and description of the document type with code \"RV\" from the Ref_document_types table.", "metadata": {}}
{"_id": "gpt3_5914", "text": "\nThis query will return the document type name and description for the document type code \"RV\".", "metadata": {}}
{"_id": "gpt3_5915", "text": "\nThis query will return the document type name and description associated with the document type code \"RV\".", "metadata": {}}
{"_id": "gpt3_5916", "text": "\nThis SQL statement joins the party and region tables together by their region_id columns. It then selects the party_name and region_name from the two tables.", "metadata": {}}
{"_id": "gpt3_5917", "text": "\nThis SQL statement joins the party and region tables together to select the party name and region name from both tables.", "metadata": {}}
{"_id": "gpt3_5918", "text": "\nThis SQL statement selects the party name and region name from two tables, party and region, based on the region_id in each table.", "metadata": {}}
{"_id": "gpt3_5919", "text": "\nThis SQL statement joins the party and region tables together by their region_id and returns the party_name and region_name from each table.", "metadata": {}}
{"_id": "gpt3_5920", "text": "\nThis query selects the party name and region name from the party and region tables, respectively, based on the region_id in each table.", "metadata": {}}
{"_id": "gpt3_5921", "text": "\nThis query selects the titles of movies that have a rating of both 3 stars and 4 stars.", "metadata": {}}
{"_id": "gpt3_5922", "text": "\nThis SQL statement selects the titles of movies which have been rated 3 stars and 4 stars.", "metadata": {}}
{"_id": "gpt3_5923", "text": "\nThis query will select the titles of movies that have been rated with both 3 stars and 4 stars.", "metadata": {}}
{"_id": "gpt3_5924", "text": "\nThis query returns the titles of all movies that have been rated 3 stars and 4 stars.", "metadata": {}}
{"_id": "gpt3_5925", "text": "\nThis query returns the titles of movies that have both a 3-star and a 4-star rating.", "metadata": {}}
{"_id": "gpt3_5926", "text": "\nThis query returns the number of financial transactions associated with the account named \"337\".", "metadata": {}}
{"_id": "gpt3_5927", "text": "\nThis query will return the number of financial transactions associated with the account named \"337\".", "metadata": {}}
{"_id": "gpt3_5928", "text": "\nThis query will count the number of financial transactions associated with the account name \"337\".", "metadata": {}}
{"_id": "gpt3_5929", "text": "\nThis query counts the number of financial transactions associated with the account named \"337\".", "metadata": {}}
{"_id": "gpt3_5930", "text": "\nThis query returns the total number of financial transactions associated with the account name \"337\".", "metadata": {}}
{"_id": "gpt3_5931", "text": "\nThis query will return the total number of female students under the age of 25.", "metadata": {}}
{"_id": "gpt3_5932", "text": "\nThis query counts the number of female students who are under the age of 25.", "metadata": {}}
{"_id": "gpt3_5933", "text": "\nThis query returns the total number of female students under 25 years of age.", "metadata": {}}
{"_id": "gpt3_5934", "text": "\nThis query will return the number of female students who are under the age of 25.", "metadata": {}}
{"_id": "gpt3_5935", "text": "\nThis query will count the number of female students who are under the age of 25.", "metadata": {}}
{"_id": "gpt3_5936", "text": "\nThis query returns the count of states that have mid players in tryouts, but not goalie players in tryouts.", "metadata": {}}
{"_id": "gpt3_5937", "text": "\nThis query returns the count of states that have a mid player in a college tryout, but no goalie players.", "metadata": {}}
{"_id": "gpt3_5938", "text": "\nThis query returns the number of states in which a college has a mid player but no goalie player.", "metadata": {}}
{"_id": "gpt3_5939", "text": "\nThis query returns the number of states that have colleges with mid-position players in tryouts, but not goalie-position players in tryouts.", "metadata": {}}
{"_id": "gpt3_5940", "text": "\nThis query returns the count of states that have college teams with mid players but no goalie players.", "metadata": {}}
{"_id": "gpt3_5941", "text": "\nThis query will select the department name with the highest number of students and display it first. It will group the student records by department name and order them by the count of students in each department in descending order. The query will then limit the results", "metadata": {}}
{"_id": "gpt3_5942", "text": "\nThis query will return the name of the department with the most students, ordered by the number of students in each department.", "metadata": {}}
{"_id": "gpt3_5943", "text": "\nThis query selects the department name from the student table, groups the results by department name, and orders them by the count of records in each department in descending order, then limits the results to the top one record. This query can be used to", "metadata": {}}
{"_id": "gpt3_5944", "text": "\nThis query will return the department name with the highest number of students enrolled, ordered by count in descending order, and limited to the top result.", "metadata": {}}
{"_id": "gpt3_5945", "text": "\nThis query will select the department name from the student table, group the results by department name, order them by the count of each department in descending order, and limit the results to the top (highest count) department.", "metadata": {}}
{"_id": "gpt3_5946", "text": "\nThis query will retrieve all customer names from the customers table who have not placed an order for a Latte product.", "metadata": {}}
{"_id": "gpt3_5947", "text": "\nThis query will retrieve all customer names from the customers table that have not placed an order for a product with the product details of 'Latte'.", "metadata": {}}
{"_id": "gpt3_5948", "text": "\nThis query will return all customer names from the customers table that have not ordered a product with the details of 'Latte'.", "metadata": {}}
{"_id": "gpt3_5949", "text": "\nThis query selects all customer names from the customers table that do not have an order of a latte product.", "metadata": {}}
{"_id": "gpt3_5950", "text": "\nThis query returns the names of customers who have not purchased a Latte from the customers, customer_orders, order_items, and products tables.", "metadata": {}}
{"_id": "gpt3_5951", "text": "\nThis query selects the three most common documents based on both document type code and document structure code from the documents table.", "metadata": {}}
{"_id": "gpt3_5952", "text": "\nThis query selects the three most common document names from two groups of documents, grouped by their document type code and document structure code, respectively.", "metadata": {}}
{"_id": "gpt3_5953", "text": "\nThis query retrieves the three most common document names from documents grouped by document type code and document structure code.", "metadata": {}}
{"_id": "gpt3_5954", "text": "\nThis query selects the three most common document names from two different groups of documents, grouped by document type code and document structure code, respectively.", "metadata": {}}
{"_id": "gpt3_5955", "text": "\nThis query selects the three most common document names from both the document type code and document structure code groups, and finds the documents that appear in both groups.", "metadata": {}}
{"_id": "gpt3_5956", "text": "\nThis statement will select the order_id from the shipments table where the shipment_date is equal to the maximum shipment_date from the shipments table.", "metadata": {}}
{"_id": "gpt3_5957", "text": "\nThis statement retrieves the order_id from the shipments table for the most recent shipment date.", "metadata": {}}
{"_id": "gpt3_5958", "text": "\nThis statement will select the order_id from the shipments table where the shipment_date is equal to the maximum shipment_date from the shipments table.", "metadata": {}}
{"_id": "gpt3_5959", "text": "\nThis query will select the order ID of the shipment with the most recent shipment date from the shipments table.", "metadata": {}}
{"_id": "gpt3_5960", "text": "\nThis query selects the order_id from the shipments table where the shipment_date is equal to the maximum shipment_date from the shipments table.", "metadata": {}}
{"_id": "gpt3_5961", "text": "\nThis query will return the names of all buildings that are on-hold, ordered from least to most stories.", "metadata": {}}
{"_id": "gpt3_5962", "text": "\nThis query will select the names of buildings with a status of \"on-hold\" and order them by the number of stories from least to greatest.", "metadata": {}}
{"_id": "gpt3_5963", "text": "\nThis query will select the name of all buildings whose status is \"on-hold\" and order them by the number of stories they have, from the least to the most.", "metadata": {}}
{"_id": "gpt3_5964", "text": "\nThis query will return a list of names of buildings with a status of \"on-hold\" in ascending order of number of stories.", "metadata": {}}
{"_id": "gpt3_5965", "text": "\nThis query selects the names of buildings that are on-hold and orders them by the number of stories in ascending order.", "metadata": {}}
{"_id": "gpt3_5966", "text": "\nThis query selects the distinct first and last names of female students who voted for the President.", "metadata": {}}
{"_id": "gpt3_5967", "text": "\nThis query will select all distinct first and last names of female students who voted for president in the voting record.", "metadata": {}}
{"_id": "gpt3_5968", "text": "\nThis query selects the distinct first and last names of female students who voted for president.", "metadata": {}}
{"_id": "gpt3_5969", "text": "\nThis query selects the distinct first and last names of female students who have voted in the presidential election.", "metadata": {}}
{"_id": "gpt3_5970", "text": "\nThis query selects the distinct first and last names of female students who voted for the president.", "metadata": {}}
{"_id": "gpt3_5971", "text": "\nThis query will select all employees from the employees table who do not have any entries in the job_history table.", "metadata": {}}
{"_id": "gpt3_5972", "text": "\nThis SQL statement selects all employees from the employees table who have not been assigned any job history.", "metadata": {}}
{"_id": "gpt3_5973", "text": "\nThis query selects all employees from the employees table who do not have any entries in the job_history table.", "metadata": {}}
{"_id": "gpt3_5974", "text": "\nThis SQL query selects all employees from the employees table who do not have any entries in the job_history table.", "metadata": {}}
{"_id": "gpt3_5975", "text": "\nThis query selects all employees from the employees table who do not have a record in the job_history table.", "metadata": {}}
{"_id": "gpt3_5976", "text": "\nThis query will select the name column from the enzyme table and order the results in descending order.", "metadata": {}}
{"_id": "gpt3_5977", "text": "\nThis statement will select the \"name\" column from the \"enzyme\" table and order the results in descending order by the \"name\" column.", "metadata": {}}
{"_id": "gpt3_5978", "text": "\nThis query retrieves the names of all enzymes from the enzyme table and orders them in descending order.", "metadata": {}}
{"_id": "gpt3_5979", "text": "\nThis query will select all names from the enzyme table and order them in descending order.", "metadata": {}}
{"_id": "gpt3_5980", "text": "\nThis query will select the name of all enzymes from the enzyme table and order them in descending alphabetical order.", "metadata": {}}
{"_id": "gpt3_5981", "text": "\nThis query will select the name of ships from the mission and ship tables that were launched after the year 1928.", "metadata": {}}
{"_id": "gpt3_5982", "text": "\nThis query will select the name of the ship from the mission and ship tables where the mission was launched after 1928.", "metadata": {}}
{"_id": "gpt3_5983", "text": "\nThis query will return the names of all ships that were involved in a mission launched after 1928.", "metadata": {}}
{"_id": "gpt3_5984", "text": "\nThis query will select the names of ships from the ship table that were used in missions launched after 1928 from the mission table.", "metadata": {}}
{"_id": "gpt3_5985", "text": "\nThis statement retrieves the names of all ships that were part of a mission launched after 1928.", "metadata": {}}
{"_id": "gpt3_5986", "text": "\nThis query counts the number of documents to be destroyed that have been authorized by each employee ID.", "metadata": {}}
{"_id": "gpt3_5987", "text": "\nThis query counts the number of documents to be destroyed that were authorised by each employee ID.", "metadata": {}}
{"_id": "gpt3_5988", "text": "\nThis SQL statement counts the number of documents to be destroyed for each employee ID associated with the destruction authorization.", "metadata": {}}
{"_id": "gpt3_5989", "text": "\nThis statement returns the employee ID of the person who authorized the destruction of documents and the number of documents they authorized to be destroyed.", "metadata": {}}
{"_id": "gpt3_5990", "text": "\nThis query counts the number of documents that have been authorized for destruction by each employee ID.", "metadata": {}}
{"_id": "gpt3_5991", "text": "\nThis query will select the title of all albums by the artist AC/DC.", "metadata": {}}
{"_id": "gpt3_5992", "text": "\nThis query will return the titles of all albums released by the artist \"AC/DC\".", "metadata": {}}
{"_id": "gpt3_5993", "text": "\nThis query will select the title of all albums by the artist AC/DC.", "metadata": {}}
{"_id": "gpt3_5994", "text": "\nThis query will return the titles of all albums released by the artist AC/DC.", "metadata": {}}
{"_id": "gpt3_5995", "text": "\nThis query will return the titles of all albums by the artist AC/DC.", "metadata": {}}
{"_id": "gpt3_5996", "text": "\nThis query selects the claim ID, date claim made, and date claim settled from the Claims and Settlements tables, and groups them by the claim ID. It then filters the results to only include records that have a count of 1, meaning that", "metadata": {}}
{"_id": "gpt3_5997", "text": "\nThis SQL statement retrieves the claim ID, date the claim was made, and date the claim was settled for all claims that have only one settlement associated with them.", "metadata": {}}
{"_id": "gpt3_5998", "text": "\nThis query selects the claim ID, date claim made, and date claim settled from the Claims and Settlements tables, grouping them by claim ID and having the count of 1. This query is used to get the information for claims that have been settled", "metadata": {}}
{"_id": "gpt3_5999", "text": "\nThis query selects the claim ID, date the claim was made, and date the claim was settled from the Claims and Settlements tables, grouping the results by claim ID and only selecting those that have a count of 1.", "metadata": {}}
{"_id": "gpt3_6000", "text": "\nThis SQL statement selects the claim ID, date claim made, and date claim settled from the Claims and Settlements tables, grouping them by claim ID and only selecting those that have a count of 1. This means that the statement is selecting only those", "metadata": {}}
{"_id": "gpt3_6001", "text": "\nThis query will return the sum of degrees awarded at each campus between 1998 and 2002. The result set will include the name of the campus and the total number of degrees awarded.", "metadata": {}}
{"_id": "gpt3_6002", "text": "\nThis query returns a summary of the total number of degrees awarded at each campus between 1998 and 2002. The result set includes the name of the campus and the total number of degrees awarded.", "metadata": {}}
{"_id": "gpt3_6003", "text": "\nThis query will select the campus name and the sum of degrees awarded from 1998 to 2002 from the campuses and degrees tables and group the results by campus.", "metadata": {}}
{"_id": "gpt3_6004", "text": "\nThis query will select the campus and sum the degrees awarded from 1998 to 2002 from the campuses and degrees tables. It will group the results by campus.", "metadata": {}}
{"_id": "gpt3_6005", "text": "\nThis query summarizes the total number of degrees awarded by each campus between 1998 and 2002. It does this by joining the campuses and degrees tables on the campus ID and grouping the results by campus. The sum of the degrees awarded is then calculated for each", "metadata": {}}
{"_id": "gpt3_6006", "text": "\nThis query selects the Social Security Number (SSN) and name of the scientist(s) who are assigned to the project with the highest number of hours.", "metadata": {}}
{"_id": "gpt3_6007", "text": "\nThis query selects the social security number and name of the scientist assigned to the project with the highest number of hours.", "metadata": {}}
{"_id": "gpt3_6008", "text": "\nThis query selects the social security number (ssn) and name of the scientist(s) who are assigned to the project with the highest number of hours.", "metadata": {}}
{"_id": "gpt3_6009", "text": "\nThis query will select the Social Security Number (SSN) and name of the scientist that is assigned to the project with the highest number of hours.", "metadata": {}}
{"_id": "gpt3_6010", "text": "\nThis query will select the social security number and name of each scientist who is assigned to the project with the maximum number of hours.", "metadata": {}}
{"_id": "gpt3_6011", "text": "\nThis query will return a list of student IDs from the Student table who have a major of 600 and are on a sports scholarship.", "metadata": {}}
{"_id": "gpt3_6012", "text": "\nThis query will select the student IDs of all students who have a major of 600 and are on a scholarship from the Student and Sportsinfo tables.", "metadata": {}}
{"_id": "gpt3_6013", "text": "\nThis query returns a list of student IDs from the Student table whose major is 600 and who are on scholarship in the Sportsinfo table.", "metadata": {}}
{"_id": "gpt3_6014", "text": "\nThis query will return the StuID of all students who have a major of 600 and are on scholarship through sports.", "metadata": {}}
{"_id": "gpt3_6015", "text": "\nThis query will return the Student ID numbers of students who have a major of 600 and are on scholarship from the Sportsinfo table.", "metadata": {}}
{"_id": "gpt3_6016", "text": "\nThis query will return the names of all members from the Member table who are not part of the Progress Party.", "metadata": {}}
{"_id": "gpt3_6017", "text": "\nThis query will select the member name from the Member table for all members who are not part of the Progress Party.", "metadata": {}}
{"_id": "gpt3_6018", "text": "\nThis statement will select the member name from the Member table (T1) where the party_id matches the party_id in the party table (T2) and the party name is not \"Progress Party\".", "metadata": {}}
{"_id": "gpt3_6019", "text": "\nThis query will select the member name from the Member table for members who are not part of the Progress Party.", "metadata": {}}
{"_id": "gpt3_6020", "text": "\nThis query selects the names of all members from the Member table who are not part of the Progress Party.", "metadata": {}}
{"_id": "gpt3_6021", "text": "\nThis query will select the name of all tracks purchased by the customer with the first name \"Daan\" and last name \"Peeters\".", "metadata": {}}
{"_id": "gpt3_6022", "text": "\nThis SQL statement retrieves the name of all tracks purchased by a customer named Daan Peeters. It does this by joining the tracks, invoice_lines, invoices and customers tables and filtering the results based on the customer's first and", "metadata": {}}
{"_id": "gpt3_6023", "text": "\nThis statement selects the name of all tracks purchased by the customer with the first name \"Daan\" and last name \"Peeters\". It does this by joining the tracks, invoice_lines, invoices, and customers tables on the respective", "metadata": {}}
{"_id": "gpt3_6024", "text": "\nThis SQL statement will select the name of all tracks purchased by the customer named Daan Peeters.", "metadata": {}}
{"_id": "gpt3_6025", "text": "\nThis SQL statement selects the name of all tracks purchased by the customer named Daan Peeters.", "metadata": {}}
{"_id": "gpt3_6026", "text": "\nThis query selects the first name of all students who live in the dormitory with the most amenities.", "metadata": {}}
{"_id": "gpt3_6027", "text": "\nThis query selects the first name of students who live in the dormitory with the most amenities.", "metadata": {}}
{"_id": "gpt3_6028", "text": "\nThis query selects the first name of students who live in the dorm with the most amenities.", "metadata": {}}
{"_id": "gpt3_6029", "text": "\nThis query will select the first name of students who live in the dorm with the most amenities.", "metadata": {}}
{"_id": "gpt3_6030", "text": "\nThis query selects the first name of students who live in the dorm with the most amenities.", "metadata": {}}
{"_id": "gpt3_6031", "text": "\nThis query will return the Police_force from the county_public_safety table where the LOCATION is both East and West.", "metadata": {}}
{"_id": "gpt3_6032", "text": "\nThis query returns the Police_force from county_public_safety where the LOCATION is both East and West.", "metadata": {}}
{"_id": "gpt3_6033", "text": "\nThis query will return the Police_force from county_public_safety where the LOCATION is both East and West.", "metadata": {}}
{"_id": "gpt3_6034", "text": "\nThis query will return a list of police forces that are located in both the East and West areas of a county.", "metadata": {}}
{"_id": "gpt3_6035", "text": "\nThis query returns the police forces present in both the East and West locations of the county public safety table.", "metadata": {}}
{"_id": "gpt3_6036", "text": "\nThis SQL query will return the most common result from the musical table, grouped by result and ordered by the number of occurrences in descending order, with a limit of 1.", "metadata": {}}
{"_id": "gpt3_6037", "text": "\nThis query will return the most common result from the musical table, grouped by result and ordered by the number of occurrences in descending order, with a limit of 1 result.", "metadata": {}}
{"_id": "gpt3_6038", "text": "\nThis query returns the most frequently occurring result from the musical table, sorted in descending order.", "metadata": {}}
{"_id": "gpt3_6039", "text": "\nThis query will return the most frequent result from the musical table, grouped by the result column and ordered by the count of each result in descending order, with a limit of one result.", "metadata": {}}
{"_id": "gpt3_6040", "text": "\nThis query will return the most common result from the musical table, grouped by result and ordered by the count in descending order, with a limit of one result.", "metadata": {}}
{"_id": "gpt3_6041", "text": "\nThis query will select the age of the student named Linda Smith from the Student table.", "metadata": {}}
{"_id": "gpt3_6042", "text": "\nThis statement will select the age of the student named Linda Smith from the Student table.", "metadata": {}}
{"_id": "gpt3_6043", "text": "\nThis statement selects the age of the student with the first name \"Linda\" and last name \"Smith\" from the Student table.", "metadata": {}}
{"_id": "gpt3_6044", "text": "\nThe above SQL statement will select the age of the student named Linda Smith from the Student table.", "metadata": {}}
{"_id": "gpt3_6045", "text": "\nThis statement will select the age of the student named Linda Smith from the Student table.", "metadata": {}}
{"_id": "gpt3_6046", "text": "\nThe query will return the product category description and unit of measure for the product category code \"Herbs\". The result will be \"Herbs and Spices\" and \"Ounce\".", "metadata": {}}
{"_id": "gpt3_6047", "text": "\nThe query will select the product category description and unit of measure for the product category code \"Herbs\".", "metadata": {}}
{"_id": "gpt3_6048", "text": "\nThe query will return the product category description and unit of measure for the product category code \"Herbs\". The result will be \"Herbs\" for the product category description and \"Oz\" for the unit of measure.", "metadata": {}}
{"_id": "gpt3_6049", "text": "\nThis query will return the product category description and unit of measure for the product category code \"Herbs\".", "metadata": {}}
{"_id": "gpt3_6050", "text": "\nThis query will select the product category description and unit of measure for the product category code \"Herbs\".", "metadata": {}}
{"_id": "gpt3_6051", "text": "\nThis query selects the name of the course from the COURSE table that has been enrolled in by at least 5 students from the ENROLLED_IN table.", "metadata": {}}
{"_id": "gpt3_6052", "text": "\nThis query returns the names of all courses that have at least five students enrolled in them.", "metadata": {}}
{"_id": "gpt3_6053", "text": "\nThis SQL query is selecting the names of courses that have at least five students enrolled in them. It does this by joining the COURSE and ENROLLED_IN tables on the CID column, grouping by CID, and having a", "metadata": {}}
{"_id": "gpt3_6054", "text": "\nThis query is selecting the course name from the COURSE table and joining it with the ENROLLED_IN table based on the course ID. It then groups the results by course ID and only returns the courses with 5 or more enrolled students", "metadata": {}}
{"_id": "gpt3_6055", "text": "\nThis query selects the course names from the COURSE table (T1) that have at least 5 students enrolled in them, as indicated by the ENROLLED_IN table (T2). It joins the two tables on the CID", "metadata": {}}
{"_id": "gpt3_6056", "text": "\nThis query selects the shop name and carrier from the stock, device, and shop tables based on the device ID and shop ID.", "metadata": {}}
{"_id": "gpt3_6057", "text": "\nThis query selects the shop name and carrier from the stock, device, and shop tables, using the device_id and shop_id fields to join the tables.", "metadata": {}}
{"_id": "gpt3_6058", "text": "\nThis query will select the shop name and carrier from the stock, device, and shop tables, joining the tables on the device ID and shop ID.", "metadata": {}}
{"_id": "gpt3_6059", "text": "\nThis query selects the shop name and carrier from the stock, device, and shop tables, based on a join between the device and stock tables, and a join between the stock and shop tables.", "metadata": {}}
{"_id": "gpt3_6060", "text": "\nThis query will select the shop name and carrier from the stock, device, and shop tables based on the matching Device_ID and Shop_ID.", "metadata": {}}
{"_id": "gpt3_6061", "text": "\nThis query returns the name of the minister from a party who took office after 1961 or before 1959.", "metadata": {}}
{"_id": "gpt3_6062", "text": "\nThis query retrieves the name of the minister from the party table where the minister took office after 1961 or before 1959.", "metadata": {}}
{"_id": "gpt3_6063", "text": "\nThis query will return the names of all ministers from a party who took office after 1961 or before 1959.", "metadata": {}}
{"_id": "gpt3_6064", "text": "\nThis query will select the name of the minister from the party table who took office after 1961 or before 1959.", "metadata": {}}
{"_id": "gpt3_6065", "text": "\nThis query will select the minister from the party table who took office after 1961 or before 1959.", "metadata": {}}
{"_id": "gpt3_6066", "text": "\nThis query will return the state/province/county and country from the addresses table where the zip/postcode starts with the number 4.", "metadata": {}}
{"_id": "gpt3_6067", "text": "\nThis query will select the state/province/county and country from the addresses table where the zip/postcode begins with the number 4.", "metadata": {}}
{"_id": "gpt3_6068", "text": "\nThis query will select the state_province_county and country from the addresses table where the zip_postcode begins with the number 4.", "metadata": {}}
{"_id": "gpt3_6069", "text": "\nThis query will return the state/province/county and country from all addresses with a zip/postcode starting with \"4\".", "metadata": {}}
{"_id": "gpt3_6070", "text": "\nThis query will select the state/province/county and country from addresses where the zip/postcode begins with the number 4.", "metadata": {}}
{"_id": "gpt3_6071", "text": "\nThis query will return the titles of all movies directed by Steven Spielberg.", "metadata": {}}
{"_id": "gpt3_6072", "text": "\nThis query will select the titles of all movies directed by Steven Spielberg.", "metadata": {}}
{"_id": "gpt3_6073", "text": "\nThis query will return the titles of all movies directed by Steven Spielberg.", "metadata": {}}
{"_id": "gpt3_6074", "text": "\nThis query will select the title of all movies directed by Steven Spielberg.", "metadata": {}}
{"_id": "gpt3_6075", "text": "\nThis query will return all movie titles directed by Steven Spielberg.", "metadata": {}}
{"_id": "gpt3_6076", "text": "\nThis query returns the total number of records in the Ref_calendar table.", "metadata": {}}
{"_id": "gpt3_6077", "text": "\nThis query returns the total number of records in the Ref_calendar table.", "metadata": {}}
{"_id": "gpt3_6078", "text": "\nThis query returns the total number of records in the Ref_calendar table.", "metadata": {}}
{"_id": "gpt3_6079", "text": "\nThis query returns the total count of records in the Ref_calendar table.", "metadata": {}}
{"_id": "gpt3_6080", "text": "\nThis query will count the total number of records in the Ref_calendar table.", "metadata": {}}
{"_id": "gpt3_6081", "text": "\nThis query will return the gender of the teacher with the last name \"Medhurst\" from the TEACHERS table.", "metadata": {}}
{"_id": "gpt3_6082", "text": "\nThis query will return the gender of the teacher with the last name \"Medhurst\" from the TEACHERS table.", "metadata": {}}
{"_id": "gpt3_6083", "text": "\nThis query would return the gender of the teacher with the last name of Medhurst.", "metadata": {}}
{"_id": "gpt3_6084", "text": "\nThis query will return the gender of the teacher with the last name Medhurst.", "metadata": {}}
{"_id": "gpt3_6085", "text": "\nThis query will return the gender of the teacher with the last name of Medhurst.", "metadata": {}}
{"_id": "gpt3_6086", "text": "\nThis query will return the number of distinct department addresses associated with each school code in the department table.", "metadata": {}}
{"_id": "gpt3_6087", "text": "\nThis query returns the number of distinct department addresses and the school code for each school in the department table, grouped by school code.", "metadata": {}}
{"_id": "gpt3_6088", "text": "\nThis query will return the number of distinct department addresses and the associated school code for each school code in the department table.", "metadata": {}}
{"_id": "gpt3_6089", "text": "\nThis query will return the number of unique department addresses for each school code in the department table.", "metadata": {}}
{"_id": "gpt3_6090", "text": "\nThis query will count the number of distinct department addresses for each school code and group the results by school code.", "metadata": {}}
{"_id": "gpt3_6091", "text": "\nThis query will return all the distinct buildings from the Faculty table.", "metadata": {}}
{"_id": "gpt3_6092", "text": "\nThis query will select all distinct buildings from the Faculty table.", "metadata": {}}
{"_id": "gpt3_6093", "text": "\nThis statement will select all unique buildings from the Faculty table.", "metadata": {}}
{"_id": "gpt3_6094", "text": "\nThis query will select all the distinct buildings from the Faculty table.", "metadata": {}}
{"_id": "gpt3_6095", "text": "\nThis query will return a list of all the unique buildings from the Faculty table.", "metadata": {}}
{"_id": "gpt3_6096", "text": "\nThis query will return the sum of the hours worked on projects by Michael Rogers and Carol Smith.", "metadata": {}}
{"_id": "gpt3_6097", "text": "\nThis query returns the total number of hours worked on projects by Michael Rogers and Carol Smith.", "metadata": {}}
{"_id": "gpt3_6098", "text": "\nThis query will return the total number of hours worked on projects by Michael Rogers and Carol Smith combined.", "metadata": {}}
{"_id": "gpt3_6099", "text": "\nThis query will return the sum of all hours worked on projects by Michael Rogers and Carol Smith.", "metadata": {}}
{"_id": "gpt3_6100", "text": "\nThis query will return the sum of hours worked on projects by scientists Michael Rogers and Carol Smith.", "metadata": {}}
